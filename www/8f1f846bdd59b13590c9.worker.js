/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 108);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports) {

/**
 * Callback for coordEach
 *
 * @callback coordEachCallback
 * @param {Array<number>} currentCoord The current coordinate being processed.
 * @param {number} coordIndex The current index of the coordinate being processed.
 * Starts at index 0.
 * @param {number} featureIndex The current index of the feature being processed.
 * @param {number} featureSubIndex The current subIndex of the feature being processed.
 */

/**
 * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
 *
 * @name coordEach
 * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, featureSubIndex)
 * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {"foo": "bar"}),
 *   turf.point([36, 53], {"hello": "world"})
 * ]);
 *
 * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {
 *   //=currentCoord
 *   //=coordIndex
 *   //=featureIndex
 *   //=featureSubIndex
 * });
 */
function coordEach(geojson, callback, excludeWrapCoord) {
    // Handles null Geometry -- Skips this GeoJSON
    if (geojson === null) return;
    var featureIndex, geometryIndex, j, k, l, geometry, stopG, coords,
        geometryMaybeCollection,
        wrapShrink = 0,
        coordIndex = 0,
        isGeometryCollection,
        type = geojson.type,
        isFeatureCollection = type === 'FeatureCollection',
        isFeature = type === 'Feature',
        stop = isFeatureCollection ? geojson.features.length : 1;

    // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.
    for (featureIndex = 0; featureIndex < stop; featureIndex++) {
        var featureSubIndex = 0;

        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :
        (isFeature ? geojson.geometry : geojson));
        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (geometryIndex = 0; geometryIndex < stopG; geometryIndex++) {
            geometry = isGeometryCollection ?
            geometryMaybeCollection.geometries[geometryIndex] : geometryMaybeCollection;

            // Handles null Geometry -- Skips this geometry
            if (geometry === null) continue;
            coords = geometry.coordinates;
            var geomType = geometry.type;

            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;

            switch (geomType) {
            case null:
                break;
            case 'Point':
                callback(coords, coordIndex, featureIndex, featureSubIndex);
                coordIndex++;
                featureSubIndex++;
                break;
            case 'LineString':
            case 'MultiPoint':
                for (j = 0; j < coords.length; j++) {
                    callback(coords[j], coordIndex, featureIndex, featureSubIndex);
                    coordIndex++;
                    featureSubIndex++;
                }
                break;
            case 'Polygon':
            case 'MultiLineString':
                for (j = 0; j < coords.length; j++)
                    for (k = 0; k < coords[j].length - wrapShrink; k++) {
                        callback(coords[j][k], coordIndex, featureIndex, featureSubIndex);
                        coordIndex++;
                        featureSubIndex++;
                    }
                break;
            case 'MultiPolygon':
                for (j = 0; j < coords.length; j++)
                    for (k = 0; k < coords[j].length; k++)
                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                            callback(coords[j][k][l], coordIndex, featureIndex, featureSubIndex);
                            coordIndex++;
                            featureSubIndex++;
                        }
                break;
            case 'GeometryCollection':
                for (j = 0; j < geometry.geometries.length; j++)
                    coordEach(geometry.geometries[j], callback, excludeWrapCoord);
                break;
            default: throw new Error('Unknown Geometry Type');
            }
        }
    }
}

/**
 * Callback for coordReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback coordReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Array<number>} currentCoord The current coordinate being processed.
 * @param {number} coordIndex The current index of the coordinate being processed.
 * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 * @param {number} featureIndex The current index of the feature being processed.
 * @param {number} featureSubIndex The current subIndex of the feature being processed.
 */

/**
 * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
 *
 * @name coordReduce
 * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {"foo": "bar"}),
 *   turf.point([36, 53], {"hello": "world"})
 * ]);
 *
 * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex) {
 *   //=previousValue
 *   //=currentCoord
 *   //=coordIndex
 *   //=featureIndex
 *   //=featureSubIndex
 *   return currentCoord;
 * });
 */
function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {
        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;
        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex);
    }, excludeWrapCoord);
    return previousValue;
}

/**
 * Callback for propEach
 *
 * @callback propEachCallback
 * @param {Object} currentProperties The current properties being processed.
 * @param {number} featureIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over properties in any GeoJSON object, similar to Array.forEach()
 *
 * @name propEach
 * @param {FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentProperties, featureIndex)
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.propEach(features, function (currentProperties, featureIndex) {
 *   //=currentProperties
 *   //=featureIndex
 * });
 */
function propEach(geojson, callback) {
    var i;
    switch (geojson.type) {
    case 'FeatureCollection':
        for (i = 0; i < geojson.features.length; i++) {
            callback(geojson.features[i].properties, i);
        }
        break;
    case 'Feature':
        callback(geojson.properties, 0);
        break;
    }
}


/**
 * Callback for propReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback propReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {*} currentProperties The current properties being processed.
 * @param {number} featureIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce properties in any GeoJSON object into a single value,
 * similar to how Array.reduce works. However, in this case we lazily run
 * the reduction, so an array of all properties is unnecessary.
 *
 * @name propReduce
 * @param {FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
 *   //=previousValue
 *   //=currentProperties
 *   //=featureIndex
 *   return currentProperties
 * });
 */
function propReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    propEach(geojson, function (currentProperties, featureIndex) {
        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;
        else previousValue = callback(previousValue, currentProperties, featureIndex);
    });
    return previousValue;
}

/**
 * Callback for featureEach
 *
 * @callback featureEachCallback
 * @param {Feature<any>} currentFeature The current feature being processed.
 * @param {number} featureIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over features in any GeoJSON object, similar to
 * Array.forEach.
 *
 * @name featureEach
 * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentFeature, featureIndex)
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {foo: 'bar'}),
 *   turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.featureEach(features, function (currentFeature, featureIndex) {
 *   //=currentFeature
 *   //=featureIndex
 * });
 */
function featureEach(geojson, callback) {
    if (geojson.type === 'Feature') {
        callback(geojson, 0);
    } else if (geojson.type === 'FeatureCollection') {
        for (var i = 0; i < geojson.features.length; i++) {
            callback(geojson.features[i], i);
        }
    }
}

/**
 * Callback for featureReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback featureReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature} currentFeature The current Feature being processed.
 * @param {number} featureIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce features in any GeoJSON object, similar to Array.reduce().
 *
 * @name featureReduce
 * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {"foo": "bar"}),
 *   turf.point([36, 53], {"hello": "world"})
 * ]);
 *
 * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
 *   //=previousValue
 *   //=currentFeature
 *   //=featureIndex
 *   return currentFeature
 * });
 */
function featureReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    featureEach(geojson, function (currentFeature, featureIndex) {
        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;
        else previousValue = callback(previousValue, currentFeature, featureIndex);
    });
    return previousValue;
}

/**
 * Get all coordinates from any GeoJSON object.
 *
 * @name coordAll
 * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object
 * @returns {Array<Array<number>>} coordinate position array
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {foo: 'bar'}),
 *   turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * var coords = turf.coordAll(features);
 * //= [[26, 37], [36, 53]]
 */
function coordAll(geojson) {
    var coords = [];
    coordEach(geojson, function (coord) {
        coords.push(coord);
    });
    return coords;
}

/**
 * Callback for geomEach
 *
 * @callback geomEachCallback
 * @param {Geometry} currentGeometry The current geometry being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 * @param {number} currentProperties The current feature properties being processed.
 */

/**
 * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
 *
 * @name geomEach
 * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentGeometry, featureIndex, currentProperties)
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.geomEach(features, function (currentGeometry, featureIndex, currentProperties) {
 *   //=currentGeometry
 *   //=featureIndex
 *   //=currentProperties
 * });
 */
function geomEach(geojson, callback) {
    var i, j, g, geometry, stopG,
        geometryMaybeCollection,
        isGeometryCollection,
        geometryProperties,
        featureIndex = 0,
        isFeatureCollection = geojson.type === 'FeatureCollection',
        isFeature = geojson.type === 'Feature',
        stop = isFeatureCollection ? geojson.features.length : 1;

  // This logic may look a little weird. The reason why it is that way
  // is because it's trying to be fast. GeoJSON supports multiple kinds
  // of objects at its root: FeatureCollection, Features, Geometries.
  // This function has the responsibility of handling all of them, and that
  // means that some of the `for` loops you see below actually just don't apply
  // to certain inputs. For instance, if you give this just a
  // Point geometry, then both loops are short-circuited and all we do
  // is gradually rename the input until it's called 'geometry'.
  //
  // This also aims to allocate as few resources as possible: just a
  // few numbers and booleans, rather than any temporary arrays as would
  // be required with the normalization approach.
    for (i = 0; i < stop; i++) {

        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :
        (isFeature ? geojson.geometry : geojson));
        geometryProperties = (isFeatureCollection ? geojson.features[i].properties :
                              (isFeature ? geojson.properties : {}));
        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (g = 0; g < stopG; g++) {
            geometry = isGeometryCollection ?
            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;

            // Handle null Geometry
            if (geometry === null) {
                callback(null, featureIndex, geometryProperties);
                featureIndex++;
                continue;
            }
            switch (geometry.type) {
            case 'Point':
            case 'LineString':
            case 'MultiPoint':
            case 'Polygon':
            case 'MultiLineString':
            case 'MultiPolygon': {
                callback(geometry, featureIndex, geometryProperties);
                featureIndex++;
                break;
            }
            case 'GeometryCollection': {
                for (j = 0; j < geometry.geometries.length; j++) {
                    callback(geometry.geometries[j], featureIndex, geometryProperties);
                    featureIndex++;
                }
                break;
            }
            default: throw new Error('Unknown Geometry Type');
            }
        }
    }
}

/**
 * Callback for geomReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback geomReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Geometry} currentGeometry The current Feature being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 * @param {Object} currentProperties The current feature properties being processed.
 */

/**
 * Reduce geometry in any GeoJSON object, similar to Array.reduce().
 *
 * @name geomReduce
 * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, currentProperties)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, currentProperties) {
 *   //=previousValue
 *   //=currentGeometry
 *   //=featureIndex
 *   //=currentProperties
 *   return currentGeometry
 * });
 */
function geomReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    geomEach(geojson, function (currentGeometry, currentIndex, currentProperties) {
        if (currentIndex === 0 && initialValue === undefined) previousValue = currentGeometry;
        else previousValue = callback(previousValue, currentGeometry, currentIndex, currentProperties);
    });
    return previousValue;
}

/**
 * Callback for flattenEach
 *
 * @callback flattenEachCallback
 * @param {Feature} currentFeature The current flattened feature being processed.
 * @param {number} featureIndex The index of the current element being processed in the
 * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 * @param {number} featureSubIndex The subindex of the current element being processed in the
 * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.
 */

/**
 * Iterate over flattened features in any GeoJSON object, similar to
 * Array.forEach.
 *
 * @name flattenEach
 * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentFeature, featureIndex, featureSubIndex)
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
 * ]);
 *
 * turf.flattenEach(features, function (currentFeature, featureIndex, featureSubIndex) {
 *   //=currentFeature
 *   //=featureIndex
 *   //=featureSubIndex
 * });
 */
function flattenEach(geojson, callback) {
    geomEach(geojson, function (geometry, featureIndex, properties) {
        // Callback for single geometry
        var type = (geometry === null) ? null : geometry.type;
        switch (type) {
        case null:
        case 'Point':
        case 'LineString':
        case 'Polygon':
            callback(feature(geometry, properties), featureIndex, 0);
            return;
        }

        var geomType;

        // Callback for multi-geometry
        switch (type) {
        case 'MultiPoint':
            geomType = 'Point';
            break;
        case 'MultiLineString':
            geomType = 'LineString';
            break;
        case 'MultiPolygon':
            geomType = 'Polygon';
            break;
        }

        geometry.coordinates.forEach(function (coordinate, featureSubIndex) {
            var geom = {
                type: geomType,
                coordinates: coordinate
            };
            callback(feature(geom, properties), featureIndex, featureSubIndex);
        });

    });
}

/**
 * Callback for flattenReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback flattenReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature} currentFeature The current Feature being processed.
 * @param {number} featureIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 * @param {number} featureSubIndex The subindex of the current element being processed in the
 * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.
 */

/**
 * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
 *
 * @name flattenReduce
 * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, featureSubIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
 * ]);
 *
 * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, featureSubIndex) {
 *   //=previousValue
 *   //=currentFeature
 *   //=featureIndex
 *   //=featureSubIndex
 *   return currentFeature
 * });
 */
function flattenReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    flattenEach(geojson, function (currentFeature, featureIndex, featureSubIndex) {
        if (featureIndex === 0 && featureSubIndex === 0 && initialValue === undefined) previousValue = currentFeature;
        else previousValue = callback(previousValue, currentFeature, featureIndex, featureSubIndex);
    });
    return previousValue;
}

/**
 * Callback for segmentEach
 *
 * @callback segmentEachCallback
 * @param {Feature<LineString>} currentSegment The current segment being processed.
 * @param {number} featureIndex The index of the current element being processed in the array, starts at index 0.
 * @param {number} featureSubIndex The subindex of the current element being processed in the
 * array. Starts at index 0 and increases for each iterating line segment.
 * @returns {void}
 */

/**
 * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
 * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
 *
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
 * @param {Function} callback a method that takes (currentSegment, featureIndex, featureSubIndex)
 * @returns {void}
 * @example
 * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
 *
 * // Iterate over GeoJSON by 2-vertex segments
 * turf.segmentEach(polygon, function (currentSegment, featureIndex, featureSubIndex) {
 *   //= currentSegment
 *   //= featureIndex
 *   //= featureSubIndex
 * });
 *
 * // Calculate the total number of segments
 * var total = 0;
 * var initialValue = 0;
 * turf.segmentEach(polygon, function () {
 *     total++;
 * }, initialValue);
 */
function segmentEach(geojson, callback) {
    flattenEach(geojson, function (feature, featureIndex) {
        var featureSubIndex = 0;
        // Exclude null Geometries
        if (!feature.geometry) return;
        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
        var type = feature.geometry.type;
        if (type === 'Point' || type === 'MultiPoint') return;

        // Generate 2-vertex line segments
        coordReduce(feature, function (previousCoords, currentCoord) {
            var currentSegment = lineString([previousCoords, currentCoord], feature.properties);
            callback(currentSegment, featureIndex, featureSubIndex);
            featureSubIndex++;
            return currentCoord;
        });
    });
}

/**
 * Callback for segmentReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback segmentReduceCallback
 * @param {*} [previousValue] The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature<LineString>} [currentSegment] The current segment being processed.
 * @param {number} [currentIndex] The index of the current element being processed in the
 * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 * @param {number} [currentSubIndex] The subindex of the current element being processed in the
 * array. Starts at index 0 and increases for each iterating line segment.
 */

/**
 * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
 * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
 *
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
 * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {void}
 * @example
 * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
 *
 * // Iterate over GeoJSON by 2-vertex segments
 * turf.segmentReduce(polygon, function (previousSegment, currentSegment, currentIndex, currentSubIndex) {
 *   //= previousSegment
 *   //= currentSegment
 *   //= currentIndex
 *   //= currentSubIndex
 *   return currentSegment
 * });
 *
 * // Calculate the total number of segments
 * var initialValue = 0
 * var total = turf.segmentReduce(polygon, function (previousValue) {
 *     previousValue++;
 *     return previousValue;
 * }, initialValue);
 */
function segmentReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    segmentEach(geojson, function (currentSegment, currentIndex, currentSubIndex) {
        if (currentIndex === 0 && initialValue === undefined) previousValue = currentSegment;
        else previousValue = callback(previousValue, currentSegment, currentIndex, currentSubIndex);
    });
    return previousValue;
}

/**
 * Create Feature
 *
 * @private
 * @param {Geometry} geometry GeoJSON Geometry
 * @param {Object} properties Properties
 * @returns {Feature} GeoJSON Feature
 */
function feature(geometry, properties) {
    if (geometry === undefined) throw new Error('No geometry passed');

    return {
        type: 'Feature',
        properties: properties || {},
        geometry: geometry
    };
}

/**
 * Create LineString
 *
 * @private
 * @param {Array<Array<number>>} coordinates Line Coordinates
 * @param {Object} properties Properties
 * @returns {Feature<LineString>} GeoJSON LineString Feature
 */
function lineString(coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');
    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');

    return {
        type: 'Feature',
        properties: properties || {},
        geometry: {
            type: 'LineString',
            coordinates: coordinates
        }
    };
}

module.exports = {
    coordEach: coordEach,
    coordReduce: coordReduce,
    propEach: propEach,
    propReduce: propReduce,
    featureEach: featureEach,
    featureReduce: featureReduce,
    coordAll: coordAll,
    geomEach: geomEach,
    geomReduce: geomReduce,
    flattenEach: flattenEach,
    flattenReduce: flattenReduce,
    segmentEach: segmentEach,
    segmentReduce: segmentReduce
};


/***/ }),
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var coordEach = __webpack_require__(1).coordEach;

/**
 * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
 *
 * @name bbox
 * @param {FeatureCollection|Feature<any>} geojson input features
 * @returns {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @example
 * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
 * var bbox = turf.bbox(line);
 * var bboxPolygon = turf.bboxPolygon(bbox);
 *
 * //addToMap
 * var addToMap = [line, bboxPolygon]
 */
module.exports = function (geojson) {
    var bbox = [Infinity, Infinity, -Infinity, -Infinity];
    coordEach(geojson, function (coord) {
        if (bbox[0] > coord[0]) bbox[0] = coord[0];
        if (bbox[1] > coord[1]) bbox[1] = coord[1];
        if (bbox[2] < coord[0]) bbox[2] = coord[0];
        if (bbox[3] < coord[1]) bbox[3] = coord[1];
    });
    return bbox;
};


/***/ }),
/* 11 */,
/* 12 */,
/* 13 */
/***/ (function(module, exports) {

/**
 * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
 *
 * @name feature
 * @param {Geometry} geometry input geometry
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature} a GeoJSON Feature
 * @example
 * var geometry = {
 *   "type": "Point",
 *   "coordinates": [110, 50]
 * };
 *
 * var feature = turf.feature(geometry);
 *
 * //=feature
 */
function feature(geometry, properties, bbox, id) {
    if (geometry === undefined) throw new Error('geometry is required');
    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');

    var feat = {
        type: 'Feature',
        properties: properties || {},
        geometry: geometry
    };
    if (bbox) {
        if (bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');
        feat.bbox = bbox;
    }
    if (id) feat.id = id;
    return feat;
}

/**
 * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.
 * For GeometryCollection type use `helpers.geometryCollection`
 *
 * @name geometry
 * @param {string} type Geometry Type
 * @param {Array<number>} coordinates Coordinates
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @returns {Geometry} a GeoJSON Geometry
 * @example
 * var type = 'Point';
 * var coordinates = [110, 50];
 *
 * var geometry = turf.geometry(type, coordinates);
 *
 * //=geometry
 */
function geometry(type, coordinates, bbox) {
    // Validation
    if (!type) throw new Error('type is required');
    if (!coordinates) throw new Error('coordinates is required');
    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');

    var geom;
    switch (type) {
    case 'Point': geom = point(coordinates).geometry; break;
    case 'LineString': geom = lineString(coordinates).geometry; break;
    case 'Polygon': geom = polygon(coordinates).geometry; break;
    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;
    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;
    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;
    default: throw new Error(type + ' is invalid');
    }
    if (bbox) {
        if (bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');
        geom.bbox = bbox;
    }
    return geom;
}

/**
 * Takes coordinates and properties (optional) and returns a new {@link Point} feature.
 *
 * @name point
 * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature<Point>} a Point feature
 * @example
 * var point = turf.point([-75.343, 39.984]);
 *
 * //=point
 */
function point(coordinates, properties, bbox, id) {
    if (!coordinates) throw new Error('No coordinates passed');
    if (coordinates.length === undefined) throw new Error('Coordinates must be an array');
    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');
    if (typeof coordinates[0] !== 'number' || typeof coordinates[1] !== 'number') throw new Error('Coordinates must contain numbers');

    return feature({
        type: 'Point',
        coordinates: coordinates
    }, properties, bbox, id);
}

/**
 * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.
 *
 * @name polygon
 * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature<Polygon>} a Polygon feature
 * @throws {Error} throw an error if a LinearRing of the polygon has too few positions
 * or if a LinearRing of the Polygon does not have matching Positions at the beginning & end.
 * @example
 * var polygon = turf.polygon([[
 *   [-2.275543, 53.464547],
 *   [-2.275543, 53.489271],
 *   [-2.215118, 53.489271],
 *   [-2.215118, 53.464547],
 *   [-2.275543, 53.464547]
 * ]], { name: 'poly1', population: 400});
 *
 * //=polygon
 */
function polygon(coordinates, properties, bbox, id) {
    if (!coordinates) throw new Error('No coordinates passed');

    for (var i = 0; i < coordinates.length; i++) {
        var ring = coordinates[i];
        if (ring.length < 4) {
            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');
        }
        for (var j = 0; j < ring[ring.length - 1].length; j++) {
            if (ring[ring.length - 1][j] !== ring[0][j]) {
                throw new Error('First and last Position are not equivalent.');
            }
        }
    }

    return feature({
        type: 'Polygon',
        coordinates: coordinates
    }, properties, bbox, id);
}

/**
 * Creates a {@link LineString} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name lineString
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature<LineString>} a LineString feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var linestring1 = turf.lineString([
 *   [-21.964416, 64.148203],
 *   [-21.956176, 64.141316],
 *   [-21.93901, 64.135924],
 *   [-21.927337, 64.136673]
 * ]);
 * var linestring2 = turf.lineString([
 *   [-21.929054, 64.127985],
 *   [-21.912918, 64.134726],
 *   [-21.916007, 64.141016],
 *   [-21.930084, 64.14446]
 * ], {name: 'line 1', distance: 145});
 *
 * //=linestring1
 *
 * //=linestring2
 */
function lineString(coordinates, properties, bbox, id) {
    if (!coordinates) throw new Error('No coordinates passed');
    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');

    return feature({
        type: 'LineString',
        coordinates: coordinates
    }, properties, bbox, id);
}

/**
 * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
 *
 * @name featureCollection
 * @param {Feature[]} features input features
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @returns {FeatureCollection} a FeatureCollection of input features
 * @example
 * var features = [
 *  turf.point([-75.343, 39.984], {name: 'Location A'}),
 *  turf.point([-75.833, 39.284], {name: 'Location B'}),
 *  turf.point([-75.534, 39.123], {name: 'Location C'})
 * ];
 *
 * var collection = turf.featureCollection(features);
 *
 * //=collection
 */
function featureCollection(features, bbox) {
    if (!features) throw new Error('No features passed');
    if (!Array.isArray(features)) throw new Error('features must be an Array');

    var fc = {
        type: 'FeatureCollection',
        features: features
    };
    if (bbox) fc.bbox = bbox;
    return fc;
}

/**
 * Creates a {@link Feature<MultiLineString>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiLineString
 * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature<MultiLineString>} a MultiLineString feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
 *
 * //=multiLine
 */
function multiLineString(coordinates, properties, bbox, id) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiLineString',
        coordinates: coordinates
    }, properties, bbox, id);
}

/**
 * Creates a {@link Feature<MultiPoint>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPoint
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature<MultiPoint>} a MultiPoint feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPt = turf.multiPoint([[0,0],[10,10]]);
 *
 * //=multiPt
 */
function multiPoint(coordinates, properties, bbox, id) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiPoint',
        coordinates: coordinates
    }, properties, bbox, id);
}

/**
 * Creates a {@link Feature<MultiPolygon>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPolygon
 * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature<MultiPolygon>} a multipolygon feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
 *
 * //=multiPoly
 *
 */
function multiPolygon(coordinates, properties, bbox, id) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiPolygon',
        coordinates: coordinates
    }, properties, bbox, id);
}

/**
 * Creates a {@link Feature<GeometryCollection>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name geometryCollection
 * @param {Array<Geometry>} geometries an array of GeoJSON Geometries
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Array<number>} [bbox] BBox [west, south, east, north]
 * @param {string|number} [id] Identifier
 * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
 * @example
 * var pt = {
 *     "type": "Point",
 *       "coordinates": [100, 0]
 *     };
 * var line = {
 *     "type": "LineString",
 *     "coordinates": [ [101, 0], [102, 1] ]
 *   };
 * var collection = turf.geometryCollection([pt, line]);
 *
 * //=collection
 */
function geometryCollection(geometries, properties, bbox, id) {
    if (!geometries) throw new Error('geometries is required');
    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');

    return feature({
        type: 'GeometryCollection',
        geometries: geometries
    }, properties, bbox, id);
}

// https://en.wikipedia.org/wiki/Great-circle_distance#Radius_for_spherical_Earth
var factors = {
    miles: 3960,
    nauticalmiles: 3441.145,
    degrees: 57.2957795,
    radians: 1,
    inches: 250905600,
    yards: 6969600,
    meters: 6373000,
    metres: 6373000,
    centimeters: 6.373e+8,
    centimetres: 6.373e+8,
    kilometers: 6373,
    kilometres: 6373,
    feet: 20908792.65
};

var areaFactors = {
    kilometers: 0.000001,
    kilometres: 0.000001,
    meters: 1,
    metres: 1,
    centimetres: 10000,
    millimeter: 1000000,
    acres: 0.000247105,
    miles: 3.86e-7,
    yards: 1.195990046,
    feet: 10.763910417,
    inches: 1550.003100006
};
/**
 * Round number to precision
 *
 * @param {number} num Number
 * @param {number} [precision=0] Precision
 * @returns {number} rounded number
 * @example
 * turf.round(120.4321)
 * //=120
 *
 * turf.round(120.4321, 2)
 * //=120.43
 */
function round(num, precision) {
    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');
    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');
    var multiplier = Math.pow(10, precision || 0);
    return Math.round(num * multiplier) / multiplier;
}

/**
 * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
 *
 * @name radiansToDistance
 * @param {number} radians in radians across the sphere
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} distance
 */
function radiansToDistance(radians, units) {
    if (radians === undefined || radians === null) throw new Error('radians is required');

    var factor = factors[units || 'kilometers'];
    if (!factor) throw new Error('units is invalid');
    return radians * factor;
}

/**
 * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
 *
 * @name distanceToRadians
 * @param {number} distance in real units
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} radians
 */
function distanceToRadians(distance, units) {
    if (distance === undefined || distance === null) throw new Error('distance is required');

    var factor = factors[units || 'kilometers'];
    if (!factor) throw new Error('units is invalid');
    return distance / factor;
}

/**
 * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet
 *
 * @name distanceToDegrees
 * @param {number} distance in real units
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} degrees
 */
function distanceToDegrees(distance, units) {
    return radians2degrees(distanceToRadians(distance, units));
}

/**
 * Converts any bearing angle from the north line direction (positive clockwise)
 * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line
 *
 * @name bearingToAngle
 * @param {number} bearing angle, between -180 and +180 degrees
 * @returns {number} angle between 0 and 360 degrees
 */
function bearingToAngle(bearing) {
    if (bearing === null || bearing === undefined) throw new Error('bearing is required');

    var angle = bearing % 360;
    if (angle < 0) angle += 360;
    return angle;
}

/**
 * Converts an angle in radians to degrees
 *
 * @name radians2degrees
 * @param {number} radians angle in radians
 * @returns {number} degrees between 0 and 360 degrees
 */
function radians2degrees(radians) {
    if (radians === null || radians === undefined) throw new Error('radians is required');

    var degrees = radians % (2 * Math.PI);
    return degrees * 180 / Math.PI;
}

/**
 * Converts an angle in degrees to radians
 *
 * @name degrees2radians
 * @param {number} degrees angle between 0 and 360 degrees
 * @returns {number} angle in radians
 */
function degrees2radians(degrees) {
    if (degrees === null || degrees === undefined) throw new Error('degrees is required');

    var radians = degrees % 360;
    return radians * Math.PI / 180;
}


/**
 * Converts a distance to the requested unit.
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
 *
 * @param {number} distance to be converted
 * @param {string} originalUnit of the distance
 * @param {string} [finalUnit=kilometers] returned unit
 * @returns {number} the converted distance
 */
function convertDistance(distance, originalUnit, finalUnit) {
    if (distance === null || distance === undefined) throw new Error('distance is required');
    if (!(distance >= 0)) throw new Error('distance must be a positive number');

    var convertedDistance = radiansToDistance(distanceToRadians(distance, originalUnit), finalUnit || 'kilometers');
    return convertedDistance;
}

/**
 * Converts a area to the requested unit.
 * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch
 * @param {number} area to be converted
 * @param {string} [originalUnit=meters] of the distance
 * @param {string} [finalUnit=kilometers] returned unit
 * @returns {number} the converted distance
 */
function convertArea(area, originalUnit, finalUnit) {
    if (area === null || area === undefined) throw new Error('area is required');
    if (!(area >= 0)) throw new Error('area must be a positive number');

    var startFactor = areaFactors[originalUnit || 'meters'];
    if (!startFactor) throw new Error('invalid original units');

    var finalFactor = areaFactors[finalUnit || 'kilometers'];
    if (!finalFactor) throw new Error('invalid final units');

    return (area / startFactor) * finalFactor;
}

module.exports = {
    feature: feature,
    geometry: geometry,
    featureCollection: featureCollection,
    geometryCollection: geometryCollection,
    point: point,
    multiPoint: multiPoint,
    lineString: lineString,
    multiLineString: multiLineString,
    polygon: polygon,
    multiPolygon: multiPolygon,
    radiansToDistance: radiansToDistance,
    distanceToRadians: distanceToRadians,
    distanceToDegrees: distanceToDegrees,
    radians2degrees: radians2degrees,
    degrees2radians: degrees2radians,
    bearingToAngle: bearingToAngle,
    convertDistance: convertDistance,
    convertArea: convertArea,
    round: round
};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

/**
 * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.
 *
 * @name getCoord
 * @param {Array<number>|Geometry<Point>|Feature<Point>} obj Object
 * @returns {Array<number>} coordinates
 * @example
 * var pt = turf.point([10, 10]);
 *
 * var coord = turf.getCoord(pt);
 * //= [10, 10]
 */
function getCoord(obj) {
    if (!obj) throw new Error('obj is required');

    var coordinates = getCoords(obj);

    // getCoord() must contain at least two numbers (Point)
    if (coordinates.length > 1 &&
        typeof coordinates[0] === 'number' &&
        typeof coordinates[1] === 'number') {
        return coordinates;
    } else {
        throw new Error('Coordinate is not a valid Point');
    }
}

/**
 * Unwrap coordinates from a Feature, Geometry Object or an Array of numbers
 *
 * @name getCoords
 * @param {Array<number>|Geometry|Feature} obj Object
 * @returns {Array<number>} coordinates
 * @example
 * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);
 *
 * var coord = turf.getCoords(poly);
 * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]
 */
function getCoords(obj) {
    if (!obj) throw new Error('obj is required');
    var coordinates;

    // Array of numbers
    if (obj.length) {
        coordinates = obj;

    // Geometry Object
    } else if (obj.coordinates) {
        coordinates = obj.coordinates;

    // Feature
    } else if (obj.geometry && obj.geometry.coordinates) {
        coordinates = obj.geometry.coordinates;
    }
    // Checks if coordinates contains a number
    if (coordinates) {
        containsNumber(coordinates);
        return coordinates;
    }
    throw new Error('No valid coordinates');
}

/**
 * Checks if coordinates contains a number
 *
 * @name containsNumber
 * @param {Array<any>} coordinates GeoJSON Coordinates
 * @returns {boolean} true if Array contains a number
 */
function containsNumber(coordinates) {
    if (coordinates.length > 1 &&
        typeof coordinates[0] === 'number' &&
        typeof coordinates[1] === 'number') {
        return true;
    }

    if (Array.isArray(coordinates[0]) && coordinates[0].length) {
        return containsNumber(coordinates[0]);
    }
    throw new Error('coordinates must only contain numbers');
}

/**
 * Enforce expectations about types of GeoJSON objects for Turf.
 *
 * @name geojsonType
 * @param {GeoJSON} value any GeoJSON object
 * @param {string} type expected GeoJSON type
 * @param {string} name name of calling function
 * @throws {Error} if value is not the expected type.
 */
function geojsonType(value, type, name) {
    if (!type || !name) throw new Error('type and name required');

    if (!value || value.type !== type) {
        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);
    }
}

/**
 * Enforce expectations about types of {@link Feature} inputs for Turf.
 * Internally this uses {@link geojsonType} to judge geometry types.
 *
 * @name featureOf
 * @param {Feature} feature a feature with an expected geometry type
 * @param {string} type expected GeoJSON type
 * @param {string} name name of calling function
 * @throws {Error} error if value is not the expected type.
 */
function featureOf(feature, type, name) {
    if (!feature) throw new Error('No feature passed');
    if (!name) throw new Error('.featureOf() requires a name');
    if (!feature || feature.type !== 'Feature' || !feature.geometry) {
        throw new Error('Invalid input to ' + name + ', Feature with geometry required');
    }
    if (!feature.geometry || feature.geometry.type !== type) {
        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);
    }
}

/**
 * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.
 * Internally this uses {@link geojsonType} to judge geometry types.
 *
 * @name collectionOf
 * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged
 * @param {string} type expected GeoJSON type
 * @param {string} name name of calling function
 * @throws {Error} if value is not the expected type.
 */
function collectionOf(featureCollection, type, name) {
    if (!featureCollection) throw new Error('No featureCollection passed');
    if (!name) throw new Error('.collectionOf() requires a name');
    if (!featureCollection || featureCollection.type !== 'FeatureCollection') {
        throw new Error('Invalid input to ' + name + ', FeatureCollection required');
    }
    for (var i = 0; i < featureCollection.features.length; i++) {
        var feature = featureCollection.features[i];
        if (!feature || feature.type !== 'Feature' || !feature.geometry) {
            throw new Error('Invalid input to ' + name + ', Feature with geometry required');
        }
        if (!feature.geometry || feature.geometry.type !== type) {
            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);
        }
    }
}

/**
 * Get Geometry from Feature or Geometry Object
 *
 * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object
 * @returns {Geometry|null} GeoJSON Geometry Object
 * @throws {Error} if geojson is not a Feature or Geometry Object
 * @example
 * var point = {
 *   "type": "Feature",
 *   "properties": {},
 *   "geometry": {
 *     "type": "Point",
 *     "coordinates": [110, 40]
 *   }
 * }
 * var geom = turf.getGeom(point)
 * //={"type": "Point", "coordinates": [110, 40]}
 */
function getGeom(geojson) {
    if (!geojson) throw new Error('geojson is required');
    if (geojson.geometry !== undefined) return geojson.geometry;
    if (geojson.coordinates || geojson.geometries) return geojson;
    throw new Error('geojson must be a valid Feature or Geometry Object');
}

/**
 * Get Geometry Type from Feature or Geometry Object
 *
 * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object
 * @returns {string} GeoJSON Geometry Type
 * @throws {Error} if geojson is not a Feature or Geometry Object
 * @example
 * var point = {
 *   "type": "Feature",
 *   "properties": {},
 *   "geometry": {
 *     "type": "Point",
 *     "coordinates": [110, 40]
 *   }
 * }
 * var geom = turf.getGeom(point)
 * //="Point"
 */
function getGeomType(geojson) {
    if (!geojson) throw new Error('geojson is required');
    var geom = getGeom(geojson);
    if (geom) return geom.type;
}

module.exports = {
    geojsonType: geojsonType,
    collectionOf: collectionOf,
    featureOf: featureOf,
    getCoord: getCoord,
    getCoords: getCoords,
    containsNumber: containsNumber,
    getGeom: getGeom,
    getGeomType: getGeomType
};


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return epsilon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return epsilon2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return pi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return halfPi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return quarterPi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return tau; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return degrees; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return radians; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return abs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return atan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return atan2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return cos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return exp; });
/* unused harmony export floor */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return pow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return sin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return sign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return sqrt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return tan; });
/* harmony export (immutable) */ __webpack_exports__["b"] = acos;
/* harmony export (immutable) */ __webpack_exports__["c"] = asin;
/* harmony export (immutable) */ __webpack_exports__["m"] = haversin;
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;

var degrees = 180 / pi;
var radians = pi / 180;

var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var floor = Math.floor;
var log = Math.log;
var pow = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
var sqrt = Math.sqrt;
var tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var getCoord = __webpack_require__(14).getCoord;
var radiansToDistance = __webpack_require__(13).radiansToDistance;
//http://en.wikipedia.org/wiki/Haversine_formula
//http://www.movable-type.co.uk/scripts/latlong.html

/**
 * Calculates the distance between two {@link Point|points} in degrees, radians,
 * miles, or kilometers. This uses the
 * [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula)
 * to account for global curvature.
 *
 * @name distance
 * @param {Geometry|Feature<Point>|Array<number>} from origin point
 * @param {Geometry|Feature<Point>|Array<number>} to destination point
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * @returns {number} distance between the two points
 * @example
 * var from = turf.point([-75.343, 39.984]);
 * var to = turf.point([-75.534, 39.123]);
 *
 * var distance = turf.distance(from, to, "miles");
 *
 * //addToMap
 * var addToMap = [from, to];
 * from.properties.distance = distance;
 * to.properties.distance = distance;
 */
module.exports = function (from, to, units) {
    var degrees2radians = Math.PI / 180;
    var coordinates1 = getCoord(from);
    var coordinates2 = getCoord(to);
    var dLat = degrees2radians * (coordinates2[1] - coordinates1[1]);
    var dLon = degrees2radians * (coordinates2[0] - coordinates1[0]);
    var lat1 = degrees2radians * coordinates1[1];
    var lat2 = degrees2radians * coordinates2[1];

    var a = Math.pow(Math.sin(dLat / 2), 2) +
          Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);

    return radiansToDistance(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), units);
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var invariant = __webpack_require__(14);
var getCoord = invariant.getCoord;
var getCoords = invariant.getCoords;

// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule
// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js
// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

/**
 * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point resides inside the polygon. The polygon can
 * be convex or concave. The function accounts for holes.
 *
 * @name inside
 * @param {Feature<Point>} point input point
 * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon
 * @param {boolean} [ignoreBoundary=false] True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.
 * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon
 * @example
 * var pt = turf.point([-77, 44]);
 * var poly = turf.polygon([[
 *   [-81, 41],
 *   [-81, 47],
 *   [-72, 47],
 *   [-72, 41],
 *   [-81, 41]
 * ]]);
 *
 * turf.inside(pt, poly);
 * //= true
 */
module.exports = function (point, polygon, ignoreBoundary) {
    // validation
    if (!point) throw new Error('point is required');
    if (!polygon) throw new Error('polygon is required');

    var pt = getCoord(point);
    var polys = getCoords(polygon);
    var type = (polygon.geometry) ? polygon.geometry.type : polygon.type;
    var bbox = polygon.bbox;

    // Quick elimination if point is not inside bbox
    if (bbox && inBBox(pt, bbox) === false) return false;

    // normalize to multipolygon
    if (type === 'Polygon') polys = [polys];

    for (var i = 0, insidePoly = false; i < polys.length && !insidePoly; i++) {
        // check if it is in the outer ring first
        if (inRing(pt, polys[i][0], ignoreBoundary)) {
            var inHole = false;
            var k = 1;
            // check for the point in any of the holes
            while (k < polys[i].length && !inHole) {
                if (inRing(pt, polys[i][k], !ignoreBoundary)) {
                    inHole = true;
                }
                k++;
            }
            if (!inHole) insidePoly = true;
        }
    }
    return insidePoly;
};

/**
 * inRing
 *
 * @private
 * @param {[number, number]} pt [x,y]
 * @param {Array<[number, number]>} ring [[x,y], [x,y],..]
 * @param {boolean} ignoreBoundary ignoreBoundary
 * @returns {boolean} inRing
 */
function inRing(pt, ring, ignoreBoundary) {
    var isInside = false;
    if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) ring = ring.slice(0, ring.length - 1);

    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {
        var xi = ring[i][0], yi = ring[i][1];
        var xj = ring[j][0], yj = ring[j][1];
        var onBoundary = (pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0) &&
            ((xi - pt[0]) * (xj - pt[0]) <= 0) && ((yi - pt[1]) * (yj - pt[1]) <= 0);
        if (onBoundary) return !ignoreBoundary;
        var intersect = ((yi > pt[1]) !== (yj > pt[1])) &&
        (pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi);
        if (intersect) isInside = !isInside;
    }
    return isInside;
}

/**
 * inBBox
 *
 * @private
 * @param {[number, number]} pt point [x,y]
 * @param {[number, number, number, number]} bbox BBox [west, south, east, north]
 * @returns {boolean} true/false if point is inside BBox
 */
function inBBox(pt, bbox) {
    return bbox[0] <= pt[0] &&
           bbox[1] <= pt[1] &&
           bbox[2] >= pt[0] &&
           bbox[3] >= pt[1];
}


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = projection;
/* harmony export (immutable) */ __webpack_exports__["b"] = projectionMutator;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clip_antimeridian__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clip_circle__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clip_extent__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__compose__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__identity__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__rotation__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__transform__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__fit__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__resample__ = __webpack_require__(179);











var transformRadians = Object(__WEBPACK_IMPORTED_MODULE_7__transform__["b" /* transformer */])({
  point: function(x, y) {
    this.stream.point(x * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], y * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */]);
  }
});

function projection(project) {
  return projectionMutator(function() { return project; })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150, // scale
      x = 480, y = 250, // translate
      dx, dy, lambda = 0, phi = 0, // center
      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
      theta = null, preclip = __WEBPACK_IMPORTED_MODULE_0__clip_antimeridian__["a" /* default */], // clip angle
      x0 = null, y0, x1, y1, postclip = __WEBPACK_IMPORTED_MODULE_4__identity__["a" /* default */], // clip extent
      delta2 = 0.5, projectResample = Object(__WEBPACK_IMPORTED_MODULE_9__resample__["a" /* default */])(projectTransform, delta2), // precision
      cache,
      cacheStream;

  function projection(point) {
    point = projectRotate(point[0] * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], point[1] * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */]);
    return [point[0] * k + dx, dy - point[1] * k];
  }

  function invert(point) {
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
    return point && [point[0] * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], point[1] * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */]];
  }

  function projectTransform(x, y) {
    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
  }

  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
  };

  projection.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? Object(__WEBPACK_IMPORTED_MODULE_1__clip_circle__["a" /* default */])(theta = _ * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], 6 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */]) : (theta = null, __WEBPACK_IMPORTED_MODULE_0__clip_antimeridian__["a" /* default */]), reset()) : theta * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */];
  };

  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, __WEBPACK_IMPORTED_MODULE_4__identity__["a" /* default */]) : Object(__WEBPACK_IMPORTED_MODULE_2__clip_extent__["a" /* clipExtent */])(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], phi = _[1] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], recenter()) : [lambda * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], phi * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */]];
  };

  projection.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], deltaPhi = _[1] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], deltaGamma = _.length > 2 ? _[2] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */] : 0, recenter()) : [deltaLambda * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], deltaPhi * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], deltaGamma * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */]];
  };

  projection.precision = function(_) {
    return arguments.length ? (projectResample = Object(__WEBPACK_IMPORTED_MODULE_9__resample__["a" /* default */])(projectTransform, delta2 = _ * _), reset()) : Object(__WEBPACK_IMPORTED_MODULE_5__math__["u" /* sqrt */])(delta2);
  };

  projection.fitExtent = function(extent, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_8__fit__["a" /* fitExtent */])(projection, extent, object);
  };

  projection.fitSize = function(size, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_8__fit__["b" /* fitSize */])(projection, size, object);
  };

  function recenter() {
    projectRotate = Object(__WEBPACK_IMPORTED_MODULE_3__compose__["a" /* default */])(rotate = Object(__WEBPACK_IMPORTED_MODULE_6__rotation__["b" /* rotateRadians */])(deltaLambda, deltaPhi, deltaGamma), project);
    var center = project(lambda, phi);
    dx = x - center[0] * k;
    dy = y + center[1] * k;
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function() {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = noop;
function noop() {}


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

//http://en.wikipedia.org/wiki/Haversine_formula
//http://www.movable-type.co.uk/scripts/latlong.html
var getCoord = __webpack_require__(14).getCoord;
var helpers = __webpack_require__(13);
var point = helpers.point;
var distanceToRadians = helpers.distanceToRadians;

/**
 * Takes a {@link Point} and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.
 *
 * @name destination
 * @param {Geometry|Feature<Point>|Array<number>} origin starting point
 * @param {number} distance distance from the origin point
 * @param {number} bearing ranging from -180 to 180
 * @param {string} [units=kilometers] miles, kilometers, degrees, or radians
 * @returns {Feature<Point>} destination point
 * @example
 * var point = turf.point([-75.343, 39.984]);
 * var distance = 50;
 * var bearing = 90;
 * var units = 'miles';
 *
 * var destination = turf.destination(point, distance, bearing, units);
 *
 * //addToMap
 * var addToMap = [point, destination]
 * destination.properties['marker-color'] = '#f00';
 * point.properties['marker-color'] = '#0f0';
 */
module.exports = function (origin, distance, bearing, units) {
    var degrees2radians = Math.PI / 180;
    var radians2degrees = 180 / Math.PI;
    var coordinates1 = getCoord(origin);
    var longitude1 = degrees2radians * coordinates1[0];
    var latitude1 = degrees2radians * coordinates1[1];
    var bearing_rad = degrees2radians * bearing;

    var radians = distanceToRadians(distance, units);

    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +
        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearing_rad));
    var longitude2 = longitude1 + Math.atan2(Math.sin(bearing_rad) *
        Math.sin(radians) * Math.cos(latitude1),
        Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));

    return point([radians2degrees * longitude2, radians2degrees * latitude2]);
};


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};

var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates[i], stream, 1);
  stream.polygonEnd();
}

/* harmony default export */ __webpack_exports__["a"] = (function(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
});


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = rbush;

var quickselect = __webpack_require__(133);

function rbush(maxEntries, format) {
    if (!(this instanceof rbush)) return new rbush(maxEntries, format);

    // max entries in a node is 9 by default; min node fill is 40% for best performance
    this._maxEntries = Math.max(4, maxEntries || 9);
    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

    if (format) {
        this._initFormat(format);
    }

    this.clear();
}

rbush.prototype = {

    all: function () {
        return this._all(this.data, []);
    },

    search: function (bbox) {

        var node = this.data,
            result = [],
            toBBox = this.toBBox;

        if (!intersects(bbox, node)) return result;

        var nodesToSearch = [],
            i, len, child, childBBox;

        while (node) {
            for (i = 0, len = node.children.length; i < len; i++) {

                child = node.children[i];
                childBBox = node.leaf ? toBBox(child) : child;

                if (intersects(bbox, childBBox)) {
                    if (node.leaf) result.push(child);
                    else if (contains(bbox, childBBox)) this._all(child, result);
                    else nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }

        return result;
    },

    collides: function (bbox) {

        var node = this.data,
            toBBox = this.toBBox;

        if (!intersects(bbox, node)) return false;

        var nodesToSearch = [],
            i, len, child, childBBox;

        while (node) {
            for (i = 0, len = node.children.length; i < len; i++) {

                child = node.children[i];
                childBBox = node.leaf ? toBBox(child) : child;

                if (intersects(bbox, childBBox)) {
                    if (node.leaf || contains(bbox, childBBox)) return true;
                    nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }

        return false;
    },

    load: function (data) {
        if (!(data && data.length)) return this;

        if (data.length < this._minEntries) {
            for (var i = 0, len = data.length; i < len; i++) {
                this.insert(data[i]);
            }
            return this;
        }

        // recursively build the tree with the given data from stratch using OMT algorithm
        var node = this._build(data.slice(), 0, data.length - 1, 0);

        if (!this.data.children.length) {
            // save as is if tree is empty
            this.data = node;

        } else if (this.data.height === node.height) {
            // split root if trees have the same height
            this._splitRoot(this.data, node);

        } else {
            if (this.data.height < node.height) {
                // swap trees if inserted one is bigger
                var tmpNode = this.data;
                this.data = node;
                node = tmpNode;
            }

            // insert the small tree into the large tree at appropriate level
            this._insert(node, this.data.height - node.height - 1, true);
        }

        return this;
    },

    insert: function (item) {
        if (item) this._insert(item, this.data.height - 1);
        return this;
    },

    clear: function () {
        this.data = createNode([]);
        return this;
    },

    remove: function (item, equalsFn) {
        if (!item) return this;

        var node = this.data,
            bbox = this.toBBox(item),
            path = [],
            indexes = [],
            i, parent, index, goingUp;

        // depth-first iterative tree traversal
        while (node || path.length) {

            if (!node) { // go up
                node = path.pop();
                parent = path[path.length - 1];
                i = indexes.pop();
                goingUp = true;
            }

            if (node.leaf) { // check current node
                index = findItem(item, node.children, equalsFn);

                if (index !== -1) {
                    // item found, remove the item and condense tree upwards
                    node.children.splice(index, 1);
                    path.push(node);
                    this._condense(path);
                    return this;
                }
            }

            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                path.push(node);
                indexes.push(i);
                i = 0;
                parent = node;
                node = node.children[0];

            } else if (parent) { // go right
                i++;
                node = parent.children[i];
                goingUp = false;

            } else node = null; // nothing found
        }

        return this;
    },

    toBBox: function (item) { return item; },

    compareMinX: compareNodeMinX,
    compareMinY: compareNodeMinY,

    toJSON: function () { return this.data; },

    fromJSON: function (data) {
        this.data = data;
        return this;
    },

    _all: function (node, result) {
        var nodesToSearch = [];
        while (node) {
            if (node.leaf) result.push.apply(result, node.children);
            else nodesToSearch.push.apply(nodesToSearch, node.children);

            node = nodesToSearch.pop();
        }
        return result;
    },

    _build: function (items, left, right, height) {

        var N = right - left + 1,
            M = this._maxEntries,
            node;

        if (N <= M) {
            // reached leaf level; return leaf
            node = createNode(items.slice(left, right + 1));
            calcBBox(node, this.toBBox);
            return node;
        }

        if (!height) {
            // target height of the bulk-loaded tree
            height = Math.ceil(Math.log(N) / Math.log(M));

            // target number of root entries to maximize storage utilization
            M = Math.ceil(N / Math.pow(M, height - 1));
        }

        node = createNode([]);
        node.leaf = false;
        node.height = height;

        // split the items into M mostly square tiles

        var N2 = Math.ceil(N / M),
            N1 = N2 * Math.ceil(Math.sqrt(M)),
            i, j, right2, right3;

        multiSelect(items, left, right, N1, this.compareMinX);

        for (i = left; i <= right; i += N1) {

            right2 = Math.min(i + N1 - 1, right);

            multiSelect(items, i, right2, N2, this.compareMinY);

            for (j = i; j <= right2; j += N2) {

                right3 = Math.min(j + N2 - 1, right2);

                // pack each entry recursively
                node.children.push(this._build(items, j, right3, height - 1));
            }
        }

        calcBBox(node, this.toBBox);

        return node;
    },

    _chooseSubtree: function (bbox, node, level, path) {

        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

        while (true) {
            path.push(node);

            if (node.leaf || path.length - 1 === level) break;

            minArea = minEnlargement = Infinity;

            for (i = 0, len = node.children.length; i < len; i++) {
                child = node.children[i];
                area = bboxArea(child);
                enlargement = enlargedArea(bbox, child) - area;

                // choose entry with the least area enlargement
                if (enlargement < minEnlargement) {
                    minEnlargement = enlargement;
                    minArea = area < minArea ? area : minArea;
                    targetNode = child;

                } else if (enlargement === minEnlargement) {
                    // otherwise choose one with the smallest area
                    if (area < minArea) {
                        minArea = area;
                        targetNode = child;
                    }
                }
            }

            node = targetNode || node.children[0];
        }

        return node;
    },

    _insert: function (item, level, isNode) {

        var toBBox = this.toBBox,
            bbox = isNode ? item : toBBox(item),
            insertPath = [];

        // find the best node for accommodating the item, saving all nodes along the path too
        var node = this._chooseSubtree(bbox, this.data, level, insertPath);

        // put the item into the node
        node.children.push(item);
        extend(node, bbox);

        // split on node overflow; propagate upwards if necessary
        while (level >= 0) {
            if (insertPath[level].children.length > this._maxEntries) {
                this._split(insertPath, level);
                level--;
            } else break;
        }

        // adjust bboxes along the insertion path
        this._adjustParentBBoxes(bbox, insertPath, level);
    },

    // split overflowed node into two
    _split: function (insertPath, level) {

        var node = insertPath[level],
            M = node.children.length,
            m = this._minEntries;

        this._chooseSplitAxis(node, m, M);

        var splitIndex = this._chooseSplitIndex(node, m, M);

        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
        newNode.height = node.height;
        newNode.leaf = node.leaf;

        calcBBox(node, this.toBBox);
        calcBBox(newNode, this.toBBox);

        if (level) insertPath[level - 1].children.push(newNode);
        else this._splitRoot(node, newNode);
    },

    _splitRoot: function (node, newNode) {
        // split root node
        this.data = createNode([node, newNode]);
        this.data.height = node.height + 1;
        this.data.leaf = false;
        calcBBox(this.data, this.toBBox);
    },

    _chooseSplitIndex: function (node, m, M) {

        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;

        minOverlap = minArea = Infinity;

        for (i = m; i <= M - m; i++) {
            bbox1 = distBBox(node, 0, i, this.toBBox);
            bbox2 = distBBox(node, i, M, this.toBBox);

            overlap = intersectionArea(bbox1, bbox2);
            area = bboxArea(bbox1) + bboxArea(bbox2);

            // choose distribution with minimum overlap
            if (overlap < minOverlap) {
                minOverlap = overlap;
                index = i;

                minArea = area < minArea ? area : minArea;

            } else if (overlap === minOverlap) {
                // otherwise choose distribution with minimum area
                if (area < minArea) {
                    minArea = area;
                    index = i;
                }
            }
        }

        return index;
    },

    // sorts node children by the best axis for split
    _chooseSplitAxis: function (node, m, M) {

        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
            xMargin = this._allDistMargin(node, m, M, compareMinX),
            yMargin = this._allDistMargin(node, m, M, compareMinY);

        // if total distributions margin value is minimal for x, sort by minX,
        // otherwise it's already sorted by minY
        if (xMargin < yMargin) node.children.sort(compareMinX);
    },

    // total margin of all possible split distributions where each node is at least m full
    _allDistMargin: function (node, m, M, compare) {

        node.children.sort(compare);

        var toBBox = this.toBBox,
            leftBBox = distBBox(node, 0, m, toBBox),
            rightBBox = distBBox(node, M - m, M, toBBox),
            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
            i, child;

        for (i = m; i < M - m; i++) {
            child = node.children[i];
            extend(leftBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(leftBBox);
        }

        for (i = M - m - 1; i >= m; i--) {
            child = node.children[i];
            extend(rightBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(rightBBox);
        }

        return margin;
    },

    _adjustParentBBoxes: function (bbox, path, level) {
        // adjust bboxes along the given tree path
        for (var i = level; i >= 0; i--) {
            extend(path[i], bbox);
        }
    },

    _condense: function (path) {
        // go through the path, removing empty nodes and updating bboxes
        for (var i = path.length - 1, siblings; i >= 0; i--) {
            if (path[i].children.length === 0) {
                if (i > 0) {
                    siblings = path[i - 1].children;
                    siblings.splice(siblings.indexOf(path[i]), 1);

                } else this.clear();

            } else calcBBox(path[i], this.toBBox);
        }
    },

    _initFormat: function (format) {
        // data format (minX, minY, maxX, maxY accessors)

        // uses eval-type function compilation instead of just accepting a toBBox function
        // because the algorithms are very sensitive to sorting functions performance,
        // so they should be dead simple and without inner calls

        var compareArr = ['return a', ' - b', ';'];

        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));

        this.toBBox = new Function('a',
            'return {minX: a' + format[0] +
            ', minY: a' + format[1] +
            ', maxX: a' + format[2] +
            ', maxY: a' + format[3] + '};');
    }
};

function findItem(item, items, equalsFn) {
    if (!equalsFn) return items.indexOf(item);

    for (var i = 0; i < items.length; i++) {
        if (equalsFn(item, items[i])) return i;
    }
    return -1;
}

// calculate node's bbox from bboxes of its children
function calcBBox(node, toBBox) {
    distBBox(node, 0, node.children.length, toBBox, node);
}

// min bounding rectangle of node children from k to p-1
function distBBox(node, k, p, toBBox, destNode) {
    if (!destNode) destNode = createNode(null);
    destNode.minX = Infinity;
    destNode.minY = Infinity;
    destNode.maxX = -Infinity;
    destNode.maxY = -Infinity;

    for (var i = k, child; i < p; i++) {
        child = node.children[i];
        extend(destNode, node.leaf ? toBBox(child) : child);
    }

    return destNode;
}

function extend(a, b) {
    a.minX = Math.min(a.minX, b.minX);
    a.minY = Math.min(a.minY, b.minY);
    a.maxX = Math.max(a.maxX, b.maxX);
    a.maxY = Math.max(a.maxY, b.maxY);
    return a;
}

function compareNodeMinX(a, b) { return a.minX - b.minX; }
function compareNodeMinY(a, b) { return a.minY - b.minY; }

function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

function enlargedArea(a, b) {
    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
}

function intersectionArea(a, b) {
    var minX = Math.max(a.minX, b.minX),
        minY = Math.max(a.minY, b.minY),
        maxX = Math.min(a.maxX, b.maxX),
        maxY = Math.min(a.maxY, b.maxY);

    return Math.max(0, maxX - minX) *
           Math.max(0, maxY - minY);
}

function contains(a, b) {
    return a.minX <= b.minX &&
           a.minY <= b.minY &&
           b.maxX <= a.maxX &&
           b.maxY <= a.maxY;
}

function intersects(a, b) {
    return b.minX <= a.maxX &&
           b.minY <= a.maxY &&
           b.maxX >= a.minX &&
           b.maxY >= a.minY;
}

function createNode(children) {
    return {
        children: children,
        height: 1,
        leaf: true,
        minX: Infinity,
        minY: Infinity,
        maxX: -Infinity,
        maxY: -Infinity
    };
}

// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
// combines selection algorithm with binary divide & conquer approach

function multiSelect(arr, left, right, n, compare) {
    var stack = [left, right],
        mid;

    while (stack.length) {
        right = stack.pop();
        left = stack.pop();

        if (right - left <= n) continue;

        mid = left + Math.ceil((right - left) / n / 2) * n;
        quickselect(arr, mid, left, right, compare);

        stack.push(left, mid, mid, right);
    }
}


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return new Adder;
});

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function(y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;
    else this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};

var temp = new Adder;

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = (a - av) + (b - bv);
}


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
});


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var getCoord = __webpack_require__(14).getCoord;
//http://en.wikipedia.org/wiki/Haversine_formula
//http://www.movable-type.co.uk/scripts/latlong.html

/**
 * Takes two {@link Point|points} and finds the geographic bearing between them,
 * i.e. the angle measured in degrees from the north line (0 degrees)
 *
 * @name bearing
 * @param {Geometry|Feature<Point>|Array<number>} start starting Point
 * @param {Geometry|Feature<Point>|Array<number>} end ending Point
 * @param {boolean} [final=false] calculates the final bearing if true
 * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)
 * @example
 * var point1 = turf.point([-75.343, 39.984]);
 * var point2 = turf.point([-75.534, 39.123]);
 *
 * var bearing = turf.bearing(point1, point2);
 *
 * //addToMap
 * var addToMap = [point1, point2]
 * point1.properties['marker-color'] = '#f00'
 * point2.properties['marker-color'] = '#0f0'
 * point1.properties.bearing = bearing
 */
function bearing(start, end, final) {
    if (final === true) return calculateFinalBearing(start, end);

    var degrees2radians = Math.PI / 180;
    var radians2degrees = 180 / Math.PI;
    var coordinates1 = getCoord(start);
    var coordinates2 = getCoord(end);

    var lon1 = degrees2radians * coordinates1[0];
    var lon2 = degrees2radians * coordinates2[0];
    var lat1 = degrees2radians * coordinates1[1];
    var lat2 = degrees2radians * coordinates2[1];
    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);
    var b = Math.cos(lat1) * Math.sin(lat2) -
        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);

    var bear = radians2degrees * Math.atan2(a, b);

    return bear;
}

/**
 * Calculates Final Bearing
 * @private
 * @param {Feature<Point>} start starting Point
 * @param {Feature<Point>} end ending Point
 * @returns {number} bearing
 */
function calculateFinalBearing(start, end) {
    // Swap start & end
    var bear = bearing(end, start);
    bear = (bear + 180) % 360;
    return bear;
}

module.exports = bearing;


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["g"] = spherical;
/* harmony export (immutable) */ __webpack_exports__["a"] = cartesian;
/* harmony export (immutable) */ __webpack_exports__["d"] = cartesianDot;
/* harmony export (immutable) */ __webpack_exports__["c"] = cartesianCross;
/* harmony export (immutable) */ __webpack_exports__["b"] = cartesianAddInPlace;
/* harmony export (immutable) */ __webpack_exports__["f"] = cartesianScale;
/* harmony export (immutable) */ __webpack_exports__["e"] = cartesianNormalizeInPlace;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);


function spherical(cartesian) {
  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(cartesian[1], cartesian[0]), Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0], phi = spherical[1], cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  return [cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda), cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda), Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x === null ? NaN : +x;
});


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = azimuthalRaw;
/* harmony export (immutable) */ __webpack_exports__["a"] = azimuthalInvert;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);


function azimuthalRaw(scale) {
  return function(x, y) {
    var cx = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x),
        cy = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y),
        k = scale(cx * cy);
    return [
      k * cy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x),
      k * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y)
    ];
  }
}

function azimuthalInvert(angle) {
  return function(x, y) {
    var z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + y * y),
        c = angle(z),
        sc = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(c),
        cc = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(c);
    return [
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x * sc, z * cc),
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(z && y * sc / z)
    ];
  }
}


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var coordEach = __webpack_require__(1).coordEach;
var point = __webpack_require__(13).point;

/**
 * Takes one or more features and calculates the centroid using the mean of all vertices.
 * This lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.
 *
 * @name centroid
 * @param {GeoJSON} geojson GeoJSON to be centered
 * @param {Object} [properties] an Object that is used as the {@link Feature}'s properties
 * @returns {Feature<Point>} the centroid of the input features
 * @example
 * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
 *
 * var centroid = turf.centroid(polygon);
 *
 * //addToMap
 * var addToMap = [polygon, centroid]
 */
module.exports = function (geojson, properties) {
    var xSum = 0;
    var ySum = 0;
    var len = 0;
    coordEach(geojson, function (coord) {
        xSum += coord[0];
        ySum += coord[1];
        len++;
    }, true);
    return point([xSum / len, ySum / len], properties);
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var rbush = __webpack_require__(54);
var helpers = __webpack_require__(13);
var getCoords = __webpack_require__(14).getCoords;
var lineSegment = __webpack_require__(37);
var point = helpers.point;
var featureEach = meta.featureEach;
var featureCollection = helpers.featureCollection;

/**
 * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).
 *
 * @name lineIntersect
 * @param {Geometry|FeatureCollection|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line1 any LineString or Polygon
 * @param {Geometry|FeatureCollection|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line2 any LineString or Polygon
 * @returns {FeatureCollection<Point>} point(s) that intersect both
 * @example
 * var line1 = turf.lineString([[126, -11], [129, -21]]);
 * var line2 = turf.lineString([[123, -18], [131, -14]]);
 * var intersects = turf.lineIntersect(line1, line2);
 *
 * //addToMap
 * var addToMap = [line1, line2, intersects]
 */
module.exports = function (line1, line2) {
    var unique = {};
    var results = [];

    // First, normalize geometries to features
    // Then, handle simple 2-vertex segments
    if (line1.type === 'LineString') line1 = helpers.feature(line1);
    if (line2.type === 'LineString') line2 = helpers.feature(line2);
    if (line1.type === 'Feature' &&
        line2.type === 'Feature' &&
        line1.geometry.type === 'LineString' &&
        line2.geometry.type === 'LineString' &&
        line1.geometry.coordinates.length === 2 &&
        line2.geometry.coordinates.length === 2) {
        var intersect = intersects(line1, line2);
        if (intersect) results.push(intersect);
        return featureCollection(results);
    }

    // Handles complex GeoJSON Geometries
    var tree = rbush();
    tree.load(lineSegment(line2));
    featureEach(lineSegment(line1), function (segment) {
        featureEach(tree.search(segment), function (match) {
            var intersect = intersects(segment, match);
            if (intersect) {
                // prevent duplicate points https://github.com/Turfjs/turf/issues/688
                var key = getCoords(intersect).join(',');
                if (!unique[key]) {
                    unique[key] = true;
                    results.push(intersect);
                }
            }
        });
    });
    return featureCollection(results);
};

/**
 * Find a point that intersects LineStrings with two coordinates each
 *
 * @private
 * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)
 * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)
 * @returns {Feature<Point>} intersecting GeoJSON Point
 */
function intersects(line1, line2) {
    var coords1 = getCoords(line1);
    var coords2 = getCoords(line2);
    if (coords1.length !== 2) {
        throw new Error('<intersects> line1 must only contain 2 coordinates');
    }
    if (coords2.length !== 2) {
        throw new Error('<intersects> line2 must only contain 2 coordinates');
    }
    var x1 = coords1[0][0];
    var y1 = coords1[0][1];
    var x2 = coords1[1][0];
    var y2 = coords1[1][1];
    var x3 = coords2[0][0];
    var y3 = coords2[0][1];
    var x4 = coords2[1][0];
    var y4 = coords2[1][1];
    var denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));
    var numeA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));
    var numeB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));

    if (denom === 0) {
        if (numeA === 0 && numeB === 0) {
            return null;
        }
        return null;
    }

    var uA = numeA / denom;
    var uB = numeB / denom;

    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
        var x = x1 + (uA * (x2 - x1));
        var y = y1 + (uA * (y2 - y1));
        return point([x, y]);
    }
    return null;
}


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* Geodesy tools for an ellipsoidal earth model                       (c) Chris Veness 2005-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong-convert-coords.html                                     */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-ellipsoidal.html                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


if (typeof module!='undefined' && module.exports) var Vector3d = __webpack_require__(59); // ≡ import Vector3d from 'vector3d.js'
if (typeof module!='undefined' && module.exports) var Dms = __webpack_require__(38);           // ≡ import Dms from 'dms.js'


/**
 * Library of geodesy functions for operations on an ellipsoidal earth model.
 *
 * Includes ellipsoid parameters and datums for different coordinate systems, and methods for
 * converting between them and to cartesian coordinates.
 *
 * q.v. Ordnance Survey ‘A guide to coordinate systems in Great Britain’ Section 6
 * www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf.
 *
 * @module   latlon-ellipsoidal
 * @requires dms
 */


/**
 * Creates lat/lon (polar) point with latitude & longitude values, on a specified datum.
 *
 * @constructor
 * @param {number}       lat - Geodetic latitude in degrees.
 * @param {number}       lon - Longitude in degrees.
 * @param {LatLon.datum} [datum=WGS84] - Datum this point is defined within.
 *
 * @example
 *     var p1 = new LatLon(51.4778, -0.0016, LatLon.datum.WGS84);
 */
function LatLon(lat, lon, datum) {
    // allow instantiation without 'new'
    if (!(this instanceof LatLon)) return new LatLon(lat, lon, datum);

    if (datum === undefined) datum = LatLon.datum.WGS84;

    this.lat = Number(lat);
    this.lon = Number(lon);
    this.datum = datum;
}


/**
 * Ellipsoid parameters; major axis (a), minor axis (b), and flattening (f) for each ellipsoid.
 */
LatLon.ellipsoid = {
    WGS84:        { a: 6378137,     b: 6356752.31425, f: 1/298.257223563 },
    GRS80:        { a: 6378137,     b: 6356752.31414, f: 1/298.257222101 },
    Airy1830:     { a: 6377563.396, b: 6356256.909,   f: 1/299.3249646   },
    AiryModified: { a: 6377340.189, b: 6356034.448,   f: 1/299.3249646   },
    Intl1924:     { a: 6378388,     b: 6356911.946,   f: 1/297           },
    Bessel1841:   { a: 6377397.155, b: 6356078.963,   f: 1/299.152815351 },
};

/**
 * Datums; with associated ellipsoid, and Helmert transform parameters to convert from WGS 84 into
 * given datum.
 *
 * More are available from earth-info.nga.mil/GandG/coordsys/datums/NATO_DT.pdf,
 * www.fieldenmaps.info/cconv/web/cconv_params.js, itrf.ensg.ign.fr/trans_para.php,
 * www.euref.eu/symposia/2012Paris/03-01-Altamimi.pdf (ITRF2008 -> ITRFyy,ITRFyy -> ETRF2000)
 */
LatLon.datum = {
    /* eslint key-spacing: 0, comma-dangle: 0 */
    WGS84: {
        ellipsoid: LatLon.ellipsoid.WGS84,
        transform: { tx:    0.0,    ty:    0.0,     tz:    0.0,    // m
                     rx:    0.0,    ry:    0.0,     rz:    0.0,    // sec
                      s:    0.0 }                                  // ppm
    },
    ITRF90: { // ftp://itrf.ensg.ign.fr/pub/itrf/WGS84.TXT
        ellipsoid: LatLon.ellipsoid.GRS80,
        transform: { tx:   -0.060,  ty:    0.517,   tz:    0.223,  // m
                     rx:   -0.0183, ry:    0.0003,  rz:   -0.0070, // sec
                      s:    0.011 }                                // ppm
    },
    NAD83: { // (2009); functionally ≡ WGS84 - www.uvm.edu/giv/resources/WGS84_NAD83.pdf
        ellipsoid: LatLon.ellipsoid.GRS80,
        transform: { tx:    1.004,  ty:   -1.910,   tz:   -0.515,  // m
                     rx:    0.0267, ry:    0.00034, rz:    0.011,  // sec
                      s:   -0.0015 }                               // ppm
    }, // note: if you *really* need to convert WGS84<->NAD83, you need more knowledge than this!
    OSGB36: { // www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf
        ellipsoid: LatLon.ellipsoid.Airy1830,
        transform: { tx: -446.448,  ty:  125.157,   tz: -542.060,  // m
                     rx:   -0.1502, ry:   -0.2470,  rz:   -0.8421, // sec
                      s:   20.4894 }                               // ppm
    },
    ED50: { // www.gov.uk/guidance/oil-and-gas-petroleum-operations-notices#pon-4
        ellipsoid: LatLon.ellipsoid.Intl1924,
        transform: { tx:   89.5,    ty:   93.8,     tz:  123.1,    // m
                     rx:    0.0,    ry:    0.0,     rz:    0.156,  // sec
                      s:   -1.2 }                                  // ppm
    },
    Irl1975: { // osi.ie/OSI/media/OSI/Content/Publications/transformations_booklet.pdf
        ellipsoid: LatLon.ellipsoid.AiryModified,
        transform: { tx: -482.530,  ty:  130.596,   tz: -564.557,  // m
                     rx:   -1.042,  ry:   -0.214,   rz:   -0.631,  // sec
                      s:   -8.150 }                                // ppm
    }, // note: many sources have opposite sign to rotations - to be checked!
    TokyoJapan: { // www.geocachingtoolbox.com?page=datumEllipsoidDetails
        ellipsoid: LatLon.ellipsoid.Bessel1841,
        transform: { tx:  148,      ty: -507,       tz: -685,      // m
                     rx:    0,      ry:    0,       rz:    0,      // sec
                      s:    0 }                                    // ppm
    },
};


/**
 * Converts ‘this’ lat/lon coordinate to new coordinate system.
 *
 * @param   {LatLon.datum} toDatum - Datum this coordinate is to be converted to.
 * @returns {LatLon} This point converted to new datum.
 *
 * @example
 *     var pWGS84 = new LatLon(51.4778, -0.0016, LatLon.datum.WGS84);
 *     var pOSGB = pWGS84.convertDatum(LatLon.datum.OSGB36); // 51.4773°N, 000.0000°E
 */
LatLon.prototype.convertDatum = function(toDatum) {
    var oldLatLon = this;
    var transform;

    if (oldLatLon.datum == LatLon.datum.WGS84) {
        // converting from WGS 84
        transform = toDatum.transform;
    }
    if (toDatum == LatLon.datum.WGS84) {
        // converting to WGS 84; use inverse transform (don't overwrite original!)
        transform = {};
        for (var param in oldLatLon.datum.transform) {
            if (oldLatLon.datum.transform.hasOwnProperty(param)) {
                transform[param] = -oldLatLon.datum.transform[param];
            }
        }
    }
    if (transform === undefined) {
        // neither this.datum nor toDatum are WGS84: convert this to WGS84 first
        oldLatLon = this.convertDatum(LatLon.datum.WGS84);
        transform = toDatum.transform;
    }

    var oldCartesian = oldLatLon.toCartesian();                // convert polar to cartesian...
    var newCartesian = oldCartesian.applyTransform(transform); // ...apply transform...
    var newLatLon = newCartesian.toLatLonE(toDatum);           // ...and convert cartesian to polar

    return newLatLon;
};


/**
 * Converts ‘this’ point from (geodetic) latitude/longitude coordinates to (geocentric) cartesian
 * (x/y/z) coordinates.
 *
 * @returns {Vector3d} Vector pointing to lat/lon point, with x, y, z in metres from earth centre.
 */
LatLon.prototype.toCartesian = function() {
    var φ = this.lat.toRadians(), λ = this.lon.toRadians();
    var h = 0; // height above ellipsoid - not currently used
    var a = this.datum.ellipsoid.a, f = this.datum.ellipsoid.f;

    var sinφ = Math.sin(φ), cosφ = Math.cos(φ);
    var sinλ = Math.sin(λ), cosλ = Math.cos(λ);

    var eSq = 2*f - f*f;                      // 1st eccentricity squared ≡ (a²-b²)/a²
    var ν = a / Math.sqrt(1 - eSq*sinφ*sinφ); // radius of curvature in prime vertical

    var x = (ν+h) * cosφ * cosλ;
    var y = (ν+h) * cosφ * sinλ;
    var z = (ν*(1-eSq)+h) * sinφ;

    var point = new Vector3d(x, y, z);

    return point;
};


/**
 * Converts ‘this’ (geocentric) cartesian (x/y/z) point to (ellipsoidal geodetic) latitude/longitude
 * coordinates on specified datum.
 *
 * Uses Bowring’s (1985) formulation for μm precision in concise form.
 *
 * @param {LatLon.datum.transform} datum - Datum to use when converting point.
 */
Vector3d.prototype.toLatLonE = function(datum) {
    var x = this.x, y = this.y, z = this.z;
    var a = datum.ellipsoid.a, b = datum.ellipsoid.b, f = datum.ellipsoid.f;

    var e2 = 2*f - f*f;   // 1st eccentricity squared ≡ (a²-b²)/a²
    var ε2 = e2 / (1-e2); // 2nd eccentricity squared ≡ (a²-b²)/b²
    var p = Math.sqrt(x*x + y*y); // distance from minor axis
    var R = Math.sqrt(p*p + z*z); // polar radius

    // parametric latitude (Bowring eqn 17, replacing tanβ = z·a / p·b)
    var tanβ = (b*z)/(a*p) * (1+ε2*b/R);
    var sinβ = tanβ / Math.sqrt(1+tanβ*tanβ);
    var cosβ = sinβ / tanβ;

    // geodetic latitude (Bowring eqn 18: tanφ = z+ε²bsin³β / p−e²cos³β)
    var φ = isNaN(cosβ) ? 0 : Math.atan2(z + ε2*b*sinβ*sinβ*sinβ, p - e2*a*cosβ*cosβ*cosβ);

    // longitude
    var λ = Math.atan2(y, x);

    // height above ellipsoid (Bowring eqn 7) [not currently used]
    var sinφ = Math.sin(φ), cosφ = Math.cos(φ);
    var ν = a/Math.sqrt(1-e2*sinφ*sinφ); // length of the normal terminated by the minor axis
    var h = p*cosφ + z*sinφ - (a*a/ν);

    var point = new LatLon(φ.toDegrees(), λ.toDegrees(), datum);

    return point;
};

/**
 * Applies Helmert transform to ‘this’ point using transform parameters t.
 *
 * @private
 * @param {LatLon.datum.transform} t - Transform to apply to this point.
 */
Vector3d.prototype.applyTransform = function(t)   {
    var x1 = this.x, y1 = this.y, z1 = this.z;

    var tx = t.tx, ty = t.ty, tz = t.tz;
    var rx = (t.rx/3600).toRadians(); // normalise seconds to radians
    var ry = (t.ry/3600).toRadians(); // normalise seconds to radians
    var rz = (t.rz/3600).toRadians(); // normalise seconds to radians
    var s1 = t.s/1e6 + 1;             // normalise ppm to (s+1)

    // apply transform
    var x2 = tx + x1*s1 - y1*rz + z1*ry;
    var y2 = ty + x1*rz + y1*s1 - z1*rx;
    var z2 = tz - x1*ry + y1*rx + z1*s1;

    var point = new Vector3d(x2, y2, z2);

    return point;
};


/**
 * Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or
 * degrees+minutes+seconds.
 *
 * @param   {string} [format=dms] - Format point as 'd', 'dm', 'dms'.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use - default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Comma-separated latitude/longitude.
 */
LatLon.prototype.toString = function(format, dp) {
    return Dms.toLat(this.lat, format, dp) + ', ' + Dms.toLon(this.lon, format, dp);
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Extend Number object with method to convert numeric degrees to radians */
if (Number.prototype.toRadians === undefined) {
    Number.prototype.toRadians = function() { return this * Math.PI / 180; };
}

/** Extend Number object with method to convert radians to numeric (signed) degrees */
if (Number.prototype.toDegrees === undefined) {
    Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = LatLon, module.exports.Vector3d = Vector3d; // ≡ export { LatLon as default, Vector3d }


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var jsts = __webpack_require__(33);

/**
 * Takes two or more {@link Polygon|polygons} and returns a combined polygon. If the input polygons are not contiguous, this function returns a {@link MultiPolygon} feature.
 *
 * @name union
 * @param {...Feature<Polygon>} A polygon to combine
 * @returns {Feature<(Polygon|MultiPolygon)>} a combined {@link Polygon} or {@link MultiPolygon} feature
 * @example
 * var poly1 = turf.polygon([[
 *     [-82.574787, 35.594087],
 *     [-82.574787, 35.615581],
 *     [-82.545261, 35.615581],
 *     [-82.545261, 35.594087],
 *     [-82.574787, 35.594087]
 * ]], {"fill": "#0f0"});
 * var poly2 = turf.polygon([[
 *     [-82.560024, 35.585153],
 *     [-82.560024, 35.602602],
 *     [-82.52964, 35.602602],
 *     [-82.52964, 35.585153],
 *     [-82.560024, 35.585153]
 * ]], {"fill": "#00f"});
 *
 * var union = turf.union(poly1, poly2);
 *
 * //addToMap
 * var addToMap = [poly1, poly2, union];
 */
module.exports = function () {
    var reader = new jsts.io.GeoJSONReader();
    var result = reader.read(JSON.stringify(arguments[0].geometry));

    for (var i = 1; i < arguments.length; i++) {
        result = result.union(reader.read(JSON.stringify(arguments[i].geometry)));
    }

    var writer = new jsts.io.GeoJSONWriter();
    result = writer.write(result);

    return {
        type: 'Feature',
        geometry: result,
        properties: arguments[0].properties
    };
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// JSTS. See https://github.com/bjornharrtell/jsts
// Licenses:
// https://github.com/bjornharrtell/jsts/blob/master/LICENSE_EDLv1.txt
// https://github.com/bjornharrtell/jsts/blob/master/LICENSE_EPLv1.txt
// https://github.com/bjornharrtell/jsts/blob/master/LICENSE_LICENSE_ES6_COLLECTIONS.txt
!function(t,e){ true?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.jsts=t.jsts||{})}(this,function(t){"use strict";function e(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])}function n(){}function i(){}function r(){}function s(){}function o(){}function a(){}function u(){}function l(t){this.name="RuntimeException",this.message=t,this.stack=(new Error).stack,Error.call(this,t)}function h(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t}function c(){if(0===arguments.length)l.call(this);else if(1===arguments.length){var t=arguments[0];l.call(this,t)}}function f(){}function g(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)g.call(this,0,0);else if(1===arguments.length){var t=arguments[0];g.call(this,t.x,t.y,t.z)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];g.call(this,e,n,g.NULL_ORDINATE)}else if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];this.x=i,this.y=r,this.z=s}}function d(){if(this.dimensionsToTest=2,0===arguments.length)d.call(this,2);else if(1===arguments.length){var t=arguments[0];if(2!==t&&3!==t)throw new i("only 2 or 3 dimensions may be specified");this.dimensionsToTest=t}}function p(){}function v(){}function m(t){this.message=t||""}function y(){}function x(t){this.message=t||""}function E(t){this.message=t||""}function I(){this.array_=[],arguments[0]instanceof v&&this.addAll(arguments[0])}function N(){if(I.apply(this),0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.ensureCapacity(t.length),this.add(t,!0)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.ensureCapacity(e.length),this.add(e,n)}}function C(){if(this.minx=null,this.maxx=null,this.miny=null,this.maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof g){var t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof C){var e=arguments[0];this.init(e)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.init(n.x,i.x,n.y,i.y)}else if(4===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2],a=arguments[3];this.init(r,s,o,a)}}function S(){}function w(){S.call(this,"Projective point not representable on the Cartesian plane.")}function L(){}function R(t,e){return t.interfaces_&&t.interfaces_().indexOf(e)>-1}function T(){}function P(t){this.str=t}function b(t){this.value=t}function O(){}function _(){if(this.hi=0,this.lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if("number"==typeof arguments[0]){var t=arguments[0];this.init(t)}else if(arguments[0]instanceof _){var e=arguments[0];this.init(e)}else if("string"==typeof arguments[0]){var n=arguments[0];_.call(this,_.parse(n))}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.init(i,r)}}function M(){}function D(){}function A(){}function F(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){var t=arguments[0];this.x=t.x,this.y=t.y,this.w=1}else if(2===arguments.length){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var e=arguments[0],n=arguments[1];this.x=e,this.y=n,this.w=1}else if(arguments[0]instanceof F&&arguments[1]instanceof F){var i=arguments[0],r=arguments[1];this.x=i.y*r.w-r.y*i.w,this.y=r.x*i.w-i.x*r.w,this.w=i.x*r.y-r.x*i.y}else if(arguments[0]instanceof g&&arguments[1]instanceof g){var s=arguments[0],o=arguments[1];this.x=s.y-o.y,this.y=o.x-s.x,this.w=s.x*o.y-o.x*s.y}}else if(3===arguments.length){var a=arguments[0],u=arguments[1],l=arguments[2];this.x=a,this.y=u,this.w=l}else if(4===arguments.length){var h=arguments[0],c=arguments[1],f=arguments[2],d=arguments[3],p=h.y-c.y,v=c.x-h.x,m=h.x*c.y-c.x*h.y,y=f.y-d.y,x=d.x-f.x,E=f.x*d.y-d.x*f.y;this.x=v*E-x*m,this.y=y*m-p*E,this.w=p*x-y*v}}function G(){}function q(){}function B(){this.envelope=null,this.factory=null,this.SRID=null,this.userData=null;var t=arguments[0];this.factory=t,this.SRID=t.getSRID()}function z(){}function V(){}function k(){}function Y(){}function U(){}function X(){}function H(){}function W(){}function j(){}function K(){}function Z(){}function Q(){}function J(){this.array_=[],arguments[0]instanceof v&&this.addAll(arguments[0])}function $(t){return null==t?$s:t.color}function tt(t){return null==t?null:t.parent}function et(t,e){null!==t&&(t.color=e)}function nt(t){return null==t?null:t.left}function it(t){return null==t?null:t.right}function rt(){this.root_=null,this.size_=0}function st(){}function ot(){}function at(){this.array_=[],arguments[0]instanceof v&&this.addAll(arguments[0])}function ut(){}function lt(){}function ht(){}function ct(){}function ft(){this.geometries=null;var t=arguments[0],e=arguments[1];if(B.call(this,e),null===t&&(t=[]),B.hasNullElements(t))throw new i("geometries must not contain null elements");this.geometries=t}function gt(){var t=arguments[0],e=arguments[1];ft.call(this,t,e)}function dt(){if(this.geom=null,this.geomFact=null,this.bnRule=null,this.endpointMap=null,1===arguments.length){var t=arguments[0];dt.call(this,t,V.MOD2_BOUNDARY_RULE)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.geom=e,this.geomFact=e.getFactory(),this.bnRule=n}}function pt(){this.count=null}function vt(){}function mt(){}function yt(){}function xt(){}function Et(){}function It(){}function Nt(){}function Ct(){}function St(){this.points=null;var t=arguments[0],e=arguments[1];B.call(this,e),this.init(t)}function wt(){}function Lt(){this.coordinates=null;var t=arguments[0],e=arguments[1];B.call(this,e),this.init(t)}function Rt(){}function Tt(){this.shell=null,this.holes=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(B.call(this,n),null===t&&(t=this.getFactory().createLinearRing()),null===e&&(e=[]),B.hasNullElements(e))throw new i("holes must not contain null elements");if(t.isEmpty()&&B.hasNonEmptyElements(e))throw new i("shell is empty but holes are not");this.shell=t,this.holes=e}function Pt(){var t=arguments[0],e=arguments[1];ft.call(this,t,e)}function bt(){if(arguments[0]instanceof g&&arguments[1]instanceof ie){var t=arguments[0],e=arguments[1];bt.call(this,e.getCoordinateSequenceFactory().create(t),e)}else if(R(arguments[0],D)&&arguments[1]instanceof ie){var n=arguments[0],i=arguments[1];St.call(this,n,i),this.validateConstruction()}}function Ot(){var t=arguments[0],e=arguments[1];ft.call(this,t,e)}function _t(){if(this.factory=null,this.isUserDataCopied=!1,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.factory=t}}function Mt(){}function Dt(){}function At(){}function Ft(){}function Gt(){if(this.dimension=3,this.coordinates=null,1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];Gt.call(this,t,3)}else if(Number.isInteger(arguments[0])){var e=arguments[0];this.coordinates=new Array(e).fill(null);for(var n=0;n<e;n++)this.coordinates[n]=new g}else if(R(arguments[0],D)){var i=arguments[0];if(null===i)return this.coordinates=new Array(0).fill(null),null;this.dimension=i.getDimension(),this.coordinates=new Array(i.size()).fill(null);for(var n=0;n<this.coordinates.length;n++)this.coordinates[n]=i.getCoordinateCopy(n)}}else if(2===arguments.length)if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var r=arguments[0],s=arguments[1];this.coordinates=r,this.dimension=s,null===r&&(this.coordinates=new Array(0).fill(null))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var o=arguments[0],a=arguments[1];this.coordinates=new Array(o).fill(null),this.dimension=a;for(var n=0;n<o;n++)this.coordinates[n]=new g}}function qt(){}function Bt(t,e){return t===e||t!==t&&e!==e}function zt(t,e){function n(t){return this&&this.constructor===n?(this._keys=[],this._values=[],this._itp=[],this.objectOnly=e,void(t&&Vt.call(this,t))):new n(t)}return e||io(t,"size",{get:Jt}),t.constructor=n,n.prototype=t,n}function Vt(t){this.add?t.forEach(this.add,this):t.forEach(function(t){this.set(t[0],t[1])},this)}function kt(t){return this.has(t)&&(this._keys.splice(no,1),this._values.splice(no,1),this._itp.forEach(function(t){no<t[0]&&t[0]--})),no>-1}function Yt(t){return this.has(t)?this._values[no]:void 0}function Ut(t,e){if(this.objectOnly&&e!==Object(e))throw new TypeError("Invalid value used as weak collection key");if(e!==e||0===e)for(no=t.length;no--&&!Bt(t[no],e););else no=t.indexOf(e);return no>-1}function Xt(t){return Ut.call(this,this._keys,t)}function Ht(t,e){return this.has(t)?this._values[no]=e:this._values[this._keys.push(t)-1]=e,this}function Wt(){(this._keys||0).length=this._values.length=0}function jt(){return Qt(this._itp,this._keys)}function Kt(){return Qt(this._itp,this._values)}function Zt(){return Qt(this._itp,this._keys,this._values)}function Qt(t,e,n){var i=[0],r=!1;return t.push(i),{next:function(){var s,o=i[0];return!r&&o<e.length?(s=n?[e[o],n[o]]:e[o],i[0]++):(r=!0,t.splice(t.indexOf(i),1)),{done:r,value:s}}}}function Jt(){return this._values.length}function $t(t,e){for(var n=this.entries();;){var i=n.next();if(i.done)break;t.call(e,i.value[1],i.value[0],this)}}function te(){this.map_=new so}function ee(){if(this.modelType=null,this.scale=null,0===arguments.length)this.modelType=ee.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof ne){var t=arguments[0];this.modelType=t,t===ee.FIXED&&this.setScale(1)}else if("number"==typeof arguments[0]){var e=arguments[0];this.modelType=ee.FIXED,this.setScale(e)}else if(arguments[0]instanceof ee){var n=arguments[0];this.modelType=n.modelType,this.scale=n.scale}}function ne(){this.name=null;var t=arguments[0];this.name=t,ne.nameToTypeMap.put(t,this)}function ie(){if(this.precisionModel=null,this.coordinateSequenceFactory=null,this.SRID=null,0===arguments.length)ie.call(this,new ee,0);else if(1===arguments.length){if(R(arguments[0],G)){var t=arguments[0];ie.call(this,new ee,0,t)}else if(arguments[0]instanceof ee){var e=arguments[0];ie.call(this,e,0,ie.getDefaultCoordinateSequenceFactory())}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];ie.call(this,n,i,ie.getDefaultCoordinateSequenceFactory())}else if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2];this.precisionModel=r,this.coordinateSequenceFactory=o,this.SRID=s}}function re(t){this.geometryFactory=t||new ie}function se(t){this.parser=new re(t)}function oe(){this.result=null,this.inputLines=Array(2).fill().map(function(){return Array(2)}),this.intPt=new Array(2).fill(null),this.intLineIndex=null,this._isProper=null,this.pa=null,this.pb=null,this.precisionModel=null,this.intPt[0]=new g,this.intPt[1]=new g,this.pa=this.intPt[0],this.pb=this.intPt[1],this.result=0}function ae(){oe.apply(this)}function ue(){}function le(){this.p=null,this.crossingCount=0,this.isPointOnSegment=!1;var t=arguments[0];this.p=t}function he(){}function ce(){if(this.p0=null,this.p1=null,0===arguments.length)ce.call(this,new g,new g);else if(1===arguments.length){var t=arguments[0];ce.call(this,t.p0,t.p1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.p0=e,this.p1=n}else if(4===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2],o=arguments[3];ce.call(this,new g(i,r),new g(s,o))}}function fe(){if(this.matrix=null,0===arguments.length)this.matrix=Array(3).fill().map(function(){return Array(3)}),this.setAll(lt.FALSE);else if(1===arguments.length)if("string"==typeof arguments[0]){var t=arguments[0];fe.call(this),this.set(t)}else if(arguments[0]instanceof fe){var e=arguments[0];fe.call(this),this.matrix[L.INTERIOR][L.INTERIOR]=e.matrix[L.INTERIOR][L.INTERIOR],this.matrix[L.INTERIOR][L.BOUNDARY]=e.matrix[L.INTERIOR][L.BOUNDARY],this.matrix[L.INTERIOR][L.EXTERIOR]=e.matrix[L.INTERIOR][L.EXTERIOR],this.matrix[L.BOUNDARY][L.INTERIOR]=e.matrix[L.BOUNDARY][L.INTERIOR],this.matrix[L.BOUNDARY][L.BOUNDARY]=e.matrix[L.BOUNDARY][L.BOUNDARY],this.matrix[L.BOUNDARY][L.EXTERIOR]=e.matrix[L.BOUNDARY][L.EXTERIOR],this.matrix[L.EXTERIOR][L.INTERIOR]=e.matrix[L.EXTERIOR][L.INTERIOR],this.matrix[L.EXTERIOR][L.BOUNDARY]=e.matrix[L.EXTERIOR][L.BOUNDARY],this.matrix[L.EXTERIOR][L.EXTERIOR]=e.matrix[L.EXTERIOR][L.EXTERIOR]}}function ge(){this.areaBasePt=null,this.triangleCent3=new g,this.areasum2=0,this.cg3=new g,this.lineCentSum=new g,this.totalLength=0,this.ptCount=0,this.ptCentSum=new g;var t=arguments[0];this.areaBasePt=null,this.add(t)}function de(t){this.message=t||""}function pe(){this.array_=[]}function ve(){this.treeSet=new at,this.list=new I}function me(){if(this.geomFactory=null,this.inputPts=null,1===arguments.length){var t=arguments[0];me.call(this,me.extractCoordinates(t),t.getFactory())}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.inputPts=ve.filterCoordinates(e),this.geomFactory=n}}function ye(){this.origin=null;var t=arguments[0];this.origin=t}function xe(){this.inputGeom=null,this.factory=null,this.pruneEmptyGeometry=!0,this.preserveGeometryCollectionType=!0,this.preserveCollections=!1,this.preserveType=!1}function Ee(){if(this.snapTolerance=0,this.srcPts=null,this.seg=new ce,this.allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof St&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];Ee.call(this,t.getCoordinates(),e)}else if(arguments[0]instanceof Array&&"number"==typeof arguments[1]){var n=arguments[0],i=arguments[1];this.srcPts=n,this._isClosed=Ee.isClosed(n),this.snapTolerance=i}}function Ie(){this.srcGeom=null;var t=arguments[0];this.srcGeom=t}function Ne(){if(xe.apply(this),this.snapTolerance=null,this.snapPts=null,this.isSelfSnap=!1,2===arguments.length){var t=arguments[0],e=arguments[1];this.snapTolerance=t,this.snapPts=e}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.snapTolerance=n,this.snapPts=i,this.isSelfSnap=r}}function Ce(){this.isFirst=!0,this.commonMantissaBitsCount=53,this.commonBits=0,this.commonSignExp=null}function Se(){this.commonCoord=null,this.ccFilter=new we}function we(){this.commonBitsX=new Ce,this.commonBitsY=new Ce}function Le(){this.trans=null;var t=arguments[0];this.trans=t}function Re(){this.parent=null,this.atStart=null,this.max=null,this.index=null,this.subcollectionIterator=null;var t=arguments[0];this.parent=t,this.atStart=!0,this.index=0,this.max=t.getNumGeometries()}function Te(){if(this.boundaryRule=V.OGC_SFS_BOUNDARY_RULE,this.isIn=null,this.numBoundaries=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];if(null===t)throw new i("Rule must be non-null");this.boundaryRule=t}}function Pe(){}function be(){}function Oe(){this.pts=null,this.data=null;var t=arguments[0],e=arguments[1];this.pts=t,this.data=e}function _e(){}function Me(){this.bounds=null,this.item=null;var t=arguments[0],e=arguments[1];this.bounds=t,this.item=e}function De(){this._size=null,this.items=null,this._size=0,this.items=new I,this.items.add(null)}function Ae(){}function Fe(){}function Ge(){if(this.childBoundables=new I,this.bounds=null,this.level=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.level=t}}function qe(){this.boundable1=null,this.boundable2=null,this._distance=null,this.itemDistance=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.boundable1=t,this.boundable2=e,this.itemDistance=n,this._distance=this.distance()}function Be(){if(this.root=null,this.built=!1,this.itemBoundables=new I,this.nodeCapacity=null,0===arguments.length)Be.call(this,Be.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){var t=arguments[0];f.isTrue(t>1,"Node capacity must be greater than 1"),this.nodeCapacity=t}}function ze(){}function Ve(){}function ke(){if(0===arguments.length)ke.call(this,ke.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){var t=arguments[0];Be.call(this,t)}}function Ye(){var t=arguments[0];Ge.call(this,t)}function Ue(){}function Xe(){this.segString=null,this.coord=null,this.segmentIndex=null,this.segmentOctant=null,this._isInterior=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.segString=t,this.coord=new g(e),this.segmentIndex=n,this.segmentOctant=i,this._isInterior=!e.equals2D(t.getCoordinate(n))}function He(){this.nodeMap=new rt,this.edge=null;var t=arguments[0];this.edge=t}function We(){this.nodeList=null,this.edge=null,this.nodeIt=null,this.currNode=null,this.nextNode=null,this.currSegIndex=0;var t=arguments[0];this.nodeList=t,this.edge=t.getEdge(),this.nodeIt=t.iterator(),this.readNextNode()}function je(){}function Ke(){this.nodeList=new He(this),this.pts=null,this.data=null;var t=arguments[0],e=arguments[1];this.pts=t,this.data=e}function Ze(){this.tempEnv1=new C,this.tempEnv2=new C,this.overlapSeg1=new ce,this.overlapSeg2=new ce}function Qe(){this.pts=null,this.start=null,this.end=null,this.env=null,this.context=null,this.id=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.pts=t,this.start=e,this.end=n,this.context=i}function Je(){}function $e(){}function tn(){}function en(){if(this.segInt=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.setSegmentIntersector(t)}}function nn(){if(this.monoChains=new I,this.index=new ke,this.idCounter=0,this.nodedSegStrings=null,this.nOverlaps=0,0===arguments.length);else if(1===arguments.length){var t=arguments[0];en.call(this,t)}}function rn(){Ze.apply(this),this.si=null;var t=arguments[0];this.si=t}function sn(){if(this.pt=null,1===arguments.length){var t=arguments[0];l.call(this,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];l.call(this,sn.msgWithCoord(e,n)),this.name="TopologyException",this.pt=new g(n)}}function on(){}function an(){this.findAllIntersections=!1,this.isCheckEndSegmentsOnly=!1,this.li=null,this.interiorIntersection=null,this.intSegments=null,this.intersections=new I,this.intersectionCount=0,this.keepIntersections=!0;var t=arguments[0];this.li=t,this.interiorIntersection=null}function un(){this.li=new ae,this.segStrings=null,this.findAllIntersections=!1,this.segInt=null,this._isValid=!0;var t=arguments[0];this.segStrings=t}function ln(){this.nv=null;var t=arguments[0];this.nv=new un(ln.toSegmentStrings(t))}function hn(){this.mapOp=null;var t=arguments[0];this.mapOp=t}function cn(){}function fn(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];this.init(t.length)}else if(Number.isInteger(arguments[0])){var e=arguments[0];this.init(1),this.location[cn.ON]=e}else if(arguments[0]instanceof fn){var n=arguments[0];if(this.init(n.location.length),null!==n)for(var i=0;i<this.location.length;i++)this.location[i]=n.location[i]}}else if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2];this.init(3),this.location[cn.ON]=r,this.location[cn.LEFT]=s,this.location[cn.RIGHT]=o}}function gn(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){var t=arguments[0];this.elt[0]=new fn(t),this.elt[1]=new fn(t)}else if(arguments[0]instanceof gn){var e=arguments[0];this.elt[0]=new fn(e.elt[0]),this.elt[1]=new fn(e.elt[1])}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.elt[0]=new fn(L.NONE),this.elt[1]=new fn(L.NONE),this.elt[n].setLocation(i)}else if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2];this.elt[0]=new fn(r,s,o),this.elt[1]=new fn(r,s,o)}else if(4===arguments.length){var a=arguments[0],u=arguments[1],l=arguments[2],h=arguments[3];this.elt[0]=new fn(L.NONE,L.NONE,L.NONE),this.elt[1]=new fn(L.NONE,L.NONE,L.NONE),this.elt[a].setLocations(u,l,h)}}function dn(){this.startDe=null,this.maxNodeDegree=-1,this.edges=new I,this.pts=new I,this.label=new gn(L.NONE),this.ring=null,this._isHole=null,this.shell=null,this.holes=new I,this.geometryFactory=null;var t=arguments[0],e=arguments[1];this.geometryFactory=e,this.computePoints(t),this.computeRing()}function pn(){var t=arguments[0],e=arguments[1];dn.call(this,t,e)}function vn(){var t=arguments[0],e=arguments[1];dn.call(this,t,e)}function mn(){if(this.label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.label=t}}function yn(){mn.apply(this),this.coord=null,this.edges=null;var t=arguments[0],e=arguments[1];this.coord=t,this.edges=e,this.label=new gn(0,L.NONE)}function xn(){this.nodeMap=new rt,this.nodeFact=null;var t=arguments[0];this.nodeFact=t}function En(){if(this.edge=null,this.label=null,this.node=null,this.p0=null,this.p1=null,this.dx=null,this.dy=null,this.quadrant=null,1===arguments.length){var t=arguments[0];this.edge=t}else if(3===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2];En.call(this,e,n,i,null)}else if(4===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2],a=arguments[3];En.call(this,r),this.init(s,o),this.label=a}}function In(){this._isForward=null,this._isInResult=!1,this._isVisited=!1,this.sym=null,this.next=null,this.nextMin=null,this.edgeRing=null,this.minEdgeRing=null,this.depth=[0,-999,-999];var t=arguments[0],e=arguments[1];if(En.call(this,t),this._isForward=e,e)this.init(t.getCoordinate(0),t.getCoordinate(1));else{var n=t.getNumPoints()-1;this.init(t.getCoordinate(n),t.getCoordinate(n-1))}this.computeDirectedLabel()}function Nn(){}function Cn(){if(this.edges=new I,this.nodes=null,this.edgeEndList=new I,0===arguments.length)this.nodes=new xn(new Nn);else if(1===arguments.length){var t=arguments[0];this.nodes=new xn(t)}}function Sn(){this.geometryFactory=null,this.shellList=new I;var t=arguments[0];this.geometryFactory=t}function wn(){this.op=null,this.geometryFactory=null,this.ptLocator=null,this.lineEdgesList=new I,this.resultLineList=new I;var t=arguments[0],e=arguments[1],n=arguments[2];this.op=t,this.geometryFactory=e,this.ptLocator=n}function Ln(){this.op=null,this.geometryFactory=null,this.resultPointList=new I;var t=arguments[0],e=arguments[1];arguments[2];this.op=t,this.geometryFactory=e}function Rn(){}function Tn(){this.geom=null;var t=arguments[0];this.geom=t}function Pn(){this.edgeMap=new rt,this.edgeList=null,this.ptInAreaLocation=[L.NONE,L.NONE]}function bn(){Pn.apply(this),this.resultAreaEdgeList=null,this.label=null,this.SCANNING_FOR_INCOMING=1,this.LINKING_TO_OUTGOING=2}function On(){Nn.apply(this)}function _n(){this.mce=null,this.chainIndex=null;var t=arguments[0],e=arguments[1];this.mce=t,this.chainIndex=e}function Mn(){if(this.label=null,this.xValue=null,this.eventType=null,this.insertEvent=null,this.deleteEventIndex=null,this.obj=null,2===arguments.length){var t=arguments[0],e=arguments[1];this.eventType=Mn.DELETE,this.xValue=t,this.insertEvent=e}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.eventType=Mn.INSERT,this.label=n,this.xValue=i,this.obj=r}}function Dn(){}function An(){this._hasIntersection=!1,this.hasProper=!1,this.hasProperInterior=!1,this.properIntersectionPoint=null,this.li=null,this.includeProper=null,this.recordIsolated=null,this.isSelfIntersection=null,this.numIntersections=0,this.numTests=0,this.bdyNodes=null,this._isDone=!1,this.isDoneWhenProperInt=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this.li=t,this.includeProper=e,this.recordIsolated=n}function Fn(){Dn.apply(this),this.events=new I,this.nOverlaps=null}function Gn(){this.min=r.POSITIVE_INFINITY,this.max=r.NEGATIVE_INFINITY}function qn(){}function Bn(){Gn.apply(this),this.item=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.min=t,this.max=e,this.item=n}function zn(){Gn.apply(this),this.node1=null,this.node2=null;var t=arguments[0],e=arguments[1];this.node1=t,this.node2=e,this.buildExtent(this.node1,this.node2)}function Vn(){this.leaves=new I,this.root=null,this.level=0}function kn(){if(this.lines=null,this.isForcedToLineString=!1,1===arguments.length){var t=arguments[0];this.lines=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.lines=e,this.isForcedToLineString=n}}function Yn(){this.items=new I}function Un(){this.index=null;var t=arguments[0];if(!R(t,Rt))throw new i("Argument must be Polygonal");this.index=new Hn(t)}function Xn(){this.counter=null;var t=arguments[0];this.counter=t}function Hn(){this.index=new Vn;var t=arguments[0];this.init(t)}function Wn(){this.coord=null,this.segmentIndex=null,this.dist=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.coord=new g(t),this.segmentIndex=e,this.dist=n}function jn(){this.nodeMap=new rt,this.edge=null;var t=arguments[0];this.edge=t}function Kn(){}function Zn(){this.e=null,this.pts=null,this.startIndex=null,this.env1=new C,this.env2=new C;var t=arguments[0];this.e=t,this.pts=t.getCoordinates();var e=new Kn;this.startIndex=e.getChainStartIndices(this.pts)}function Qn(){this.depth=Array(2).fill().map(function(){return Array(3)});for(var t=0;t<2;t++)for(var e=0;e<3;e++)this.depth[t][e]=Qn.NULL_VALUE}function Jn(){if(mn.apply(this),this.pts=null,this.env=null,this.eiList=new jn(this),this.name=null,this.mce=null,this._isIsolated=!0,this.depth=new Qn,this.depthDelta=0,1===arguments.length){var t=arguments[0];Jn.call(this,t,null)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.pts=e,this.label=n}}function $n(){if(Cn.apply(this),this.parentGeom=null,this.lineEdgeMap=new te,this.boundaryNodeRule=null,this.useBoundaryDeterminationRule=!0,this.argIndex=null,this.boundaryNodes=null,this._hasTooFewPoints=!1,this.invalidPoint=null,this.areaPtLocator=null,this.ptLocator=new Te,2===arguments.length){var t=arguments[0],e=arguments[1];$n.call(this,t,e,V.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.argIndex=n,this.parentGeom=i,this.boundaryNodeRule=r,null!==i&&this.add(i)}}function ti(){if(this.li=new ae,this.resultPrecisionModel=null,this.arg=null,1===arguments.length){var t=arguments[0];this.setComputationPrecision(t.getPrecisionModel()),this.arg=new Array(1).fill(null),this.arg[0]=new $n(0,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];ti.call(this,e,n,V.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];i.getPrecisionModel().compareTo(r.getPrecisionModel())>=0?this.setComputationPrecision(i.getPrecisionModel()):this.setComputationPrecision(r.getPrecisionModel()),this.arg=new Array(2).fill(null),this.arg[0]=new $n(0,i,s),this.arg[1]=new $n(1,r,s)}}function ei(){this.pts=null,this._orientation=null;var t=arguments[0];this.pts=t,this._orientation=ei.orientation(t)}function ni(){this.edges=new I,this.ocaMap=new rt}function ii(){this.ptLocator=new Te,this.geomFact=null,this.resultGeom=null,this.graph=null,this.edgeList=new ni,this.resultPolyList=new I,this.resultLineList=new I,this.resultPointList=new I;var t=arguments[0],e=arguments[1];ti.call(this,t,e),this.graph=new Cn(new On),this.geomFact=t.getFactory()}function ri(){this.geom=new Array(2).fill(null),this.snapTolerance=null,this.cbr=null;var t=arguments[0],e=arguments[1];this.geom[0]=t,this.geom[1]=e,this.computeSnapTolerance()}function si(){this.geom=new Array(2).fill(null);var t=arguments[0],e=arguments[1];this.geom[0]=t,this.geom[1]=e}function oi(){this.factory=null,this.interiorPoint=null,this.maxWidth=0;var t=arguments[0];this.factory=t.getFactory(),this.add(t)}function ai(){this.poly=null,this.centreY=null,this.hiY=r.MAX_VALUE,this.loY=-r.MAX_VALUE;var t=arguments[0];this.poly=t,this.hiY=t.getEnvelopeInternal().getMaxY(),this.loY=t.getEnvelopeInternal().getMinY(),this.centreY=oi.avg(this.loY,this.hiY)}function ui(){this.centroid=null,this.minDistance=r.MAX_VALUE,this.interiorPoint=null;var t=arguments[0];this.centroid=t.getCentroid().getCoordinate(),this.addInterior(t),null===this.interiorPoint&&this.addEndpoints(t)}function li(){this.centroid=null,this.minDistance=r.MAX_VALUE,this.interiorPoint=null;var t=arguments[0];this.centroid=t.getCentroid().getCoordinate(),this.add(t)}function hi(){this.tempEnv1=new C,this.selectedSegment=new ce}function ci(){this.items=new I,this.subnode=[null,null]}function fi(){if(this.min=null,this.max=null,0===arguments.length)this.min=0,this.max=0;else if(1===arguments.length){var t=arguments[0];this.init(t.min,t.max)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.init(e,n)}}function gi(){}function di(t,e){var n,i,r,s,o={32:{d:127,c:128,b:0,a:0},64:{d:32752,c:0,b:0,a:0}},a={32:8,64:11}[t];if(s||(n=e<0||1/e<0,isFinite(e)||(s=o[t],n&&(s.d+=1<<t/4-1),i=Math.pow(2,a)-1,r=0)),!s){for(i={32:127,64:1023}[t],r=Math.abs(e);r>=2;)i++,r/=2;for(;r<1&&i>0;)i--,r*=2;i<=0&&(r/=2),32===t&&i>254&&(s={d:n?255:127,c:128,b:0,a:0},i=Math.pow(2,a)-1,r=0)}return i}function pi(){this.pt=0,this.level=0,this.interval=null;var t=arguments[0];this.computeKey(t)}function vi(){ci.apply(this),this.interval=null,this.centre=null,this.level=null;var t=arguments[0],e=arguments[1];this.interval=t,this.level=e,this.centre=(t.getMin()+t.getMax())/2}function mi(){}function yi(){ci.apply(this)}function xi(){this.root=null,this.minExtent=1,this.root=new yi}function Ei(){}function Ii(){this.ring=null,this.tree=null,this.crossings=0,this.interval=new fi;var t=arguments[0];this.ring=t,this.buildIndex()}function Ni(){hi.apply(this),this.mcp=null,this.p=null;var t=arguments[0],e=arguments[1];this.mcp=t,this.p=e}function Ci(){}function Si(){this.p0=null,this.p1=null,this.p2=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.p0=t,this.p1=e,this.p2=n}function wi(){this.input=null,this.extremalPts=null,this.centre=null,this.radius=0;var t=arguments[0];this.input=t}function Li(){if(this.inputGeom=null,this.isConvex=null,this.convexHullPts=null,this.minBaseSeg=new ce,this.minWidthPt=null,this.minPtIndex=null,this.minWidth=0,1===arguments.length){var t=arguments[0];Li.call(this,t,!1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.inputGeom=e,this.isConvex=n}}function Ri(){this.inputGeom=null,this.distanceTolerance=null;var t=arguments[0];this.inputGeom=t}function Ti(){xe.apply(this),this.distanceTolerance=null;var t=arguments[0];this.distanceTolerance=t}function Pi(){this._orig=null,this._sym=null,this._next=null;var t=arguments[0];this._orig=t}function bi(){this._isMarked=!1;var t=arguments[0];Pi.call(this,t)}function Oi(){this.vertexMap=new te}function _i(){this._isStart=!1;var t=arguments[0];bi.call(this,t)}function Mi(){Oi.apply(this)}function Di(){this.result=null,this.factory=null,this.graph=null,this.lines=new I,this.nodeEdgeStack=new pe,this.ringStartEdge=null,this.graph=new Mi}function Ai(){this.items=new I,this.subnode=new Array(4).fill(null)}function Fi(){this.pt=new g,this.level=0,this.env=null;var t=arguments[0];this.computeKey(t)}function Gi(){Ai.apply(this),this.env=null,this.centrex=null,this.centrey=null,this.level=null;var t=arguments[0],e=arguments[1];this.env=t,this.level=e,this.centrex=(t.getMinX()+t.getMaxX())/2,this.centrey=(t.getMinY()+t.getMaxY())/2}function qi(){Ai.apply(this)}function Bi(){this.root=null,this.minExtent=1,this.root=new qi}function zi(t){this.geometryFactory=t||new ie}function Vi(t){this.geometryFactory=t||new ie,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new zi(this.geometryFactory)}function ki(){this.parser=new zi(this.geometryFactory)}function Yi(t){this.geometryFactory=t||new ie,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new re(this.geometryFactory)}function Ui(t){return[t.x,t.y]}function Xi(t,e){this.geometryFactory=t||new ie,this.ol=e||"undefined"!=typeof ol&&ol}function Hi(){if(this.noder=null,this.scaleFactor=null,this.offsetX=null,this.offsetY=null,this.isScaled=!1,2===arguments.length){var t=arguments[0],e=arguments[1];Hi.call(this,t,e,0,0)}else if(4===arguments.length){var n=arguments[0],i=arguments[1];arguments[2],arguments[3];this.noder=n,this.scaleFactor=i,this.isScaled=!this.isIntegerPrecision()}}function Wi(){if(this.inputGeom=null,this.isClosedEndpointsInInterior=!0,this.nonSimpleLocation=null,1===arguments.length){var t=arguments[0];this.inputGeom=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];
this.inputGeom=e,this.isClosedEndpointsInInterior=!n.isInBoundary(2)}}function ji(){this.pt=null,this.isClosed=null,this.degree=null;var t=arguments[0];this.pt=t,this.isClosed=!1,this.degree=0}function Ki(){if(this.quadrantSegments=Ki.DEFAULT_QUADRANT_SEGMENTS,this.endCapStyle=Ki.CAP_ROUND,this.joinStyle=Ki.JOIN_ROUND,this.mitreLimit=Ki.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this.simplifyFactor=Ki.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.setQuadrantSegments(t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.setQuadrantSegments(e),this.setEndCapStyle(n)}else if(4===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2],o=arguments[3];this.setQuadrantSegments(i),this.setEndCapStyle(r),this.setJoinStyle(s),this.setMitreLimit(o)}}function Zi(){this.minIndex=-1,this.minCoord=null,this.minDe=null,this.orientedDe=null}function Qi(){this.array_=[]}function Ji(){this.finder=null,this.dirEdgeList=new I,this.nodes=new I,this.rightMostCoord=null,this.env=null,this.finder=new Zi}function $i(){this.inputLine=null,this.distanceTol=null,this.isDeleted=null,this.angleOrientation=he.COUNTERCLOCKWISE;var t=arguments[0];this.inputLine=t}function tr(){this.ptList=null,this.precisionModel=null,this.minimimVertexDistance=0,this.ptList=new I}function er(){this.maxCurveSegmentError=0,this.filletAngleQuantum=null,this.closingSegLengthFactor=1,this.segList=null,this.distance=0,this.precisionModel=null,this.bufParams=null,this.li=null,this.s0=null,this.s1=null,this.s2=null,this.seg0=new ce,this.seg1=new ce,this.offset0=new ce,this.offset1=new ce,this.side=0,this._hasNarrowConcaveAngle=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this.precisionModel=t,this.bufParams=e,this.li=new ae,this.filletAngleQuantum=Math.PI/2/e.getQuadrantSegments(),e.getQuadrantSegments()>=8&&e.getJoinStyle()===Ki.JOIN_ROUND&&(this.closingSegLengthFactor=er.MAX_CLOSING_SEG_LEN_FACTOR),this.init(n)}function nr(){this.distance=0,this.precisionModel=null,this.bufParams=null;var t=arguments[0],e=arguments[1];this.precisionModel=t,this.bufParams=e}function ir(){this.subgraphs=null,this.seg=new ce,this.cga=new he;var t=arguments[0];this.subgraphs=t}function rr(){this.upwardSeg=null,this.leftDepth=null;var t=arguments[0],e=arguments[1];this.upwardSeg=new ce(t),this.leftDepth=e}function sr(){this.inputGeom=null,this.distance=null,this.curveBuilder=null,this.curveList=new I;var t=arguments[0],e=arguments[1],n=arguments[2];this.inputGeom=t,this.distance=e,this.curveBuilder=n}function or(){this._hasIntersection=!1,this.hasProper=!1,this.hasProperInterior=!1,this.hasInterior=!1,this.properIntersectionPoint=null,this.li=null,this.isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;var t=arguments[0];this.li=t}function ar(){this.bufParams=null,this.workingPrecisionModel=null,this.workingNoder=null,this.geomFact=null,this.graph=null,this.edgeList=new ni;var t=arguments[0];this.bufParams=t}function ur(){this.li=new ae,this.segStrings=null;var t=arguments[0];this.segStrings=t}function lr(){this.li=null,this.pt=null,this.originalPt=null,this.ptScaled=null,this.p0Scaled=null,this.p1Scaled=null,this.scaleFactor=null,this.minx=null,this.maxx=null,this.miny=null,this.maxy=null,this.corner=new Array(4).fill(null),this.safeEnv=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(this.originalPt=t,this.pt=t,this.scaleFactor=e,this.li=n,e<=0)throw new i("Scale factor must be non-zero");1!==e&&(this.pt=new g(this.scale(t.x),this.scale(t.y)),this.p0Scaled=new g,this.p1Scaled=new g),this.initCorners(this.pt)}function hr(){this.index=null;var t=arguments[0];this.index=t}function cr(){hi.apply(this),this.hotPixel=null,this.parentEdge=null,this.hotPixelVertexIndex=null,this._isNodeAdded=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this.hotPixel=t,this.parentEdge=e,this.hotPixelVertexIndex=n}function fr(){this.li=null,this.interiorIntersections=null;var t=arguments[0];this.li=t,this.interiorIntersections=new I}function gr(){this.pm=null,this.li=null,this.scaleFactor=null,this.noder=null,this.pointSnapper=null,this.nodedSegStrings=null;var t=arguments[0];this.pm=t,this.li=new ae,this.li.setPrecisionModel(t),this.scaleFactor=t.getScale()}function dr(){if(this.argGeom=null,this.distance=null,this.bufParams=new Ki,this.resultGeometry=null,this.saveException=null,1===arguments.length){var t=arguments[0];this.argGeom=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.argGeom=e,this.bufParams=n}}function pr(){this.comps=null;var t=arguments[0];this.comps=t}function vr(){if(this.component=null,this.segIndex=null,this.pt=null,2===arguments.length){var t=arguments[0],e=arguments[1];vr.call(this,t,vr.INSIDE_AREA,e)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.component=n,this.segIndex=i,this.pt=r}}function mr(){this.pts=null;var t=arguments[0];this.pts=t}function yr(){this.locations=null;var t=arguments[0];this.locations=t}function xr(){if(this.geom=null,this.terminateDistance=0,this.ptLocator=new Te,this.minDistanceLocation=null,this.minDistance=r.MAX_VALUE,2===arguments.length){var t=arguments[0],e=arguments[1];xr.call(this,t,e,0)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],s=arguments[2];this.geom=new Array(2).fill(null),this.geom[0]=n,this.geom[1]=i,this.terminateDistance=s}}function Er(){this.factory=null,this.directedEdges=new I,this.coordinates=null;var t=arguments[0];this.factory=t}function Ir(){this._isMarked=!1,this._isVisited=!1,this.data=null}function Nr(){Ir.apply(this),this.parentEdge=null,this.from=null,this.to=null,this.p0=null,this.p1=null,this.sym=null,this.edgeDirection=null,this.quadrant=null,this.angle=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.from=t,this.to=e,this.edgeDirection=i,this.p0=t.getCoordinate(),this.p1=n;var r=this.p1.x-this.p0.x,s=this.p1.y-this.p0.y;this.quadrant=Je.quadrant(r,s),this.angle=Math.atan2(s,r)}function Cr(){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];Nr.call(this,t,e,n,i)}function Sr(){if(Ir.apply(this),this.dirEdge=null,0===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.setDirectedEdges(t,e)}}function wr(){this.outEdges=new I,this.sorted=!1}function Lr(){if(Ir.apply(this),this.pt=null,this.deStar=null,1===arguments.length){var t=arguments[0];Lr.call(this,t,new wr)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.pt=e,this.deStar=n}}function Rr(){Sr.apply(this),this.line=null;var t=arguments[0];this.line=t}function Tr(){this.nodeMap=new rt}function Pr(){this.edges=new J,this.dirEdges=new J,this.nodeMap=new Tr}function br(){Pr.apply(this)}function Or(){this.graph=new br,this.mergedLineStrings=null,this.factory=null,this.edgeStrings=null}function _r(){this.edgeRing=null,this.next=null,this.label=-1;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];Nr.call(this,t,e,n,i)}function Mr(){Sr.apply(this),this.line=null;var t=arguments[0];this.line=t}function Dr(){this.geometryFactory=new ie,this.geomGraph=null,this.disconnectedRingcoord=null;var t=arguments[0];this.geomGraph=t}function Ar(){}function Fr(){if(this.edgeEnds=new I,1===arguments.length){var t=arguments[0];Fr.call(this,null,t)}else if(2===arguments.length){var e=(arguments[0],arguments[1]);En.call(this,e.getEdge(),e.getCoordinate(),e.getDirectedCoordinate(),new gn(e.getLabel())),this.insert(e)}}function Gr(){Pn.apply(this)}function qr(){var t=arguments[0],e=arguments[1];yn.call(this,t,e)}function Br(){Nn.apply(this)}function zr(){this.nodes=new xn(new Br)}function Vr(){this.li=new ae,this.geomGraph=null,this.nodeGraph=new zr,this.invalidPoint=null;var t=arguments[0];this.geomGraph=t}function kr(){this.graph=null,this.rings=new I,this.totalEnv=new C,this.index=null,this.nestedPt=null;var t=arguments[0];this.graph=t}function Yr(){if(this.errorType=null,this.pt=null,1===arguments.length){var t=arguments[0];Yr.call(this,t,null)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.errorType=e,null!==n&&(this.pt=n.copy())}}function Ur(){this.parentGeometry=null,this.isSelfTouchingRingFormingHoleValid=!1,this.validErr=null;var t=arguments[0];this.parentGeometry=t}function Xr(){this.factory=null,this.deList=new I,this.lowestEdge=null,this.ring=null,this.ringPts=null,this.holes=null,this.shell=null,this._isHole=null,this._isProcessed=!1,this._isIncludedSet=!1,this._isIncluded=!1;var t=arguments[0];this.factory=t}function Hr(){}function Wr(){Pr.apply(this),this.factory=null;var t=arguments[0];this.factory=t}function jr(){if(this.lineStringAdder=new Kr(this),this.graph=null,this.dangles=new I,this.cutEdges=new I,this.invalidRingLines=new I,this.holeList=null,this.shellList=null,this.polyList=null,this.isCheckingRingsValid=!0,this.extractOnlyPolygonal=null,this.geomFactory=null,0===arguments.length)jr.call(this,!1);else if(1===arguments.length){var t=arguments[0];this.extractOnlyPolygonal=t}}function Kr(){this.p=null;var t=arguments[0];this.p=t}function Zr(){this.li=new ae,this.ptLocator=new Te,this.arg=null,this.nodes=new xn(new Br),this.im=null,this.isolatedEdges=new I,this.invalidPoint=null;var t=arguments[0];this.arg=t}function Qr(){this.rectEnv=null;var t=arguments[0];this.rectEnv=t.getEnvelopeInternal()}function Jr(){this.li=new ae,this.rectEnv=null,this.diagUp0=null,this.diagUp1=null,this.diagDown0=null,this.diagDown1=null;var t=arguments[0];this.rectEnv=t,this.diagUp0=new g(t.getMinX(),t.getMinY()),this.diagUp1=new g(t.getMaxX(),t.getMaxY()),this.diagDown0=new g(t.getMinX(),t.getMaxY()),this.diagDown1=new g(t.getMaxX(),t.getMinY())}function $r(){this._isDone=!1}function ts(){this.rectangle=null,this.rectEnv=null;var t=arguments[0];this.rectangle=t,this.rectEnv=t.getEnvelopeInternal()}function es(){$r.apply(this),this.rectEnv=null,this._intersects=!1;var t=arguments[0];this.rectEnv=t}function ns(){$r.apply(this),this.rectSeq=null,this.rectEnv=null,this._containsPoint=!1;var t=arguments[0];this.rectSeq=t.getExteriorRing().getCoordinateSequence(),this.rectEnv=t.getEnvelopeInternal()}function is(){$r.apply(this),this.rectEnv=null,this.rectIntersector=null,this.hasIntersection=!1,this.p0=new g,this.p1=new g;var t=arguments[0];this.rectEnv=t.getEnvelopeInternal(),this.rectIntersector=new Jr(this.rectEnv)}function rs(){if(this._relate=null,2===arguments.length){var t=arguments[0],e=arguments[1];ti.call(this,t,e),this._relate=new Zr(this.arg)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];ti.call(this,n,i,r),this._relate=new Zr(this.arg)}}function ss(){this.geomFactory=null,this.skipEmpty=!1,this.inputGeoms=null;var t=arguments[0];this.geomFactory=ss.extractFactory(t),this.inputGeoms=t}function os(){this.pointGeom=null,this.otherGeom=null,this.geomFact=null;var t=arguments[0],e=arguments[1];this.pointGeom=t,this.otherGeom=e,this.geomFact=e.getFactory()}function as(){this.sortIndex=-1,this.comps=null;var t=arguments[0],e=arguments[1];this.sortIndex=t,this.comps=e}function us(){this.inputPolys=null,this.geomFactory=null;var t=arguments[0];this.inputPolys=t,null===this.inputPolys&&(this.inputPolys=new I)}function ls(){if(this.polygons=new I,this.lines=new I,this.points=new I,this.geomFact=null,1===arguments.length){if(R(arguments[0],v)){var t=arguments[0];this.extract(t)}else if(arguments[0]instanceof B){var e=arguments[0];this.extract(e)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.geomFact=i,this.extract(n)}}function hs(){_t.CoordinateOperation.apply(this),this.targetPM=null,this.removeCollapsed=!0;var t=arguments[0],e=arguments[1];this.targetPM=t,this.removeCollapsed=e}function cs(){this.targetPM=null,this.removeCollapsed=!0,this.changePrecisionModel=!1,this.isPointwise=!1;var t=arguments[0];this.targetPM=t}function fs(){this.pts=null,this.usePt=null,this.distanceTolerance=null,this.seg=new ce;var t=arguments[0];this.pts=t}function gs(){this.inputGeom=null,this.distanceTolerance=null,this.isEnsureValidTopology=!0;var t=arguments[0];this.inputGeom=t}function ds(){xe.apply(this),this.isEnsureValidTopology=!0,this.distanceTolerance=null;var t=arguments[0],e=arguments[1];this.isEnsureValidTopology=t,this.distanceTolerance=e}function ps(){if(this.parent=null,this.index=null,2===arguments.length){var t=arguments[0],e=arguments[1];ps.call(this,t,e,null,-1)}else if(4===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],s=arguments[3];ce.call(this,n,i),this.parent=r,this.index=s}}function vs(){if(this.parentLine=null,this.segs=null,this.resultSegs=new I,this.minimumSize=null,1===arguments.length){var t=arguments[0];vs.call(this,t,2)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.parentLine=e,this.minimumSize=n,this.init()}}function ms(){this.index=new Bi}function ys(){this.querySeg=null,this.items=new I;var t=arguments[0];this.querySeg=t}function xs(){this.li=new ae,this.inputIndex=new ms,this.outputIndex=new ms,this.line=null,this.linePts=null,this.distanceTolerance=0;var t=arguments[0],e=arguments[1];this.inputIndex=t,this.outputIndex=e}function Es(){this.inputIndex=new ms,this.outputIndex=new ms,this.distanceTolerance=0}function Is(){this.inputGeom=null,this.lineSimplifier=new Es,this.linestringMap=null;var t=arguments[0];this.inputGeom=t}function Ns(){xe.apply(this),this.linestringMap=null;var t=arguments[0];this.linestringMap=t}function Cs(){this.tps=null;var t=arguments[0];this.tps=t}function Ss(){this.seg=null,this.segLen=null,this.splitPt=null,this.minimumLen=0;var t=arguments[0];this.seg=t,this.segLen=t.getLength()}function ws(){}function Ls(){}function Rs(){}function Ts(){if(this.p=null,1===arguments.length){var t=arguments[0];this.p=new g(t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.p=new g(e,n)}else if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];this.p=new g(i,r,s)}}function Ps(){this._isOnConstraint=null,this.constraint=null;var t=arguments[0];Ts.call(this,t)}function bs(){this._rot=null,this.vertex=null,this.next=null,this.data=null}function Os(){this.subdiv=null,this.isUsingTolerance=!1;var t=arguments[0];this.subdiv=t,this.isUsingTolerance=t.getTolerance()>0}function _s(){}function Ms(){this.subdiv=null,this.lastEdge=null;var t=arguments[0];this.subdiv=t,this.init()}function Ds(){if(this.seg=null,1===arguments.length){if("string"==typeof arguments[0]){var t=arguments[0];l.call(this,t)}else if(arguments[0]instanceof ce){var e=arguments[0];l.call(this,"Locate failed to converge (at edge: "+e+").  Possible causes include invalid Subdivision topology or very close sites"),this.seg=new ce(e)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];l.call(this,Ds.msgWithSpatial(n,i)),this.seg=new ce(i)}}function As(){}function Fs(){this.visitedKey=0,this.quadEdges=new I,this.startingEdge=null,this.tolerance=null,this.edgeCoincidenceTolerance=null,this.frameVertex=new Array(3).fill(null),this.frameEnv=null,this.locator=null,this.seg=new ce,this.triEdges=new Array(3).fill(null);var t=arguments[0],e=arguments[1];this.tolerance=e,this.edgeCoincidenceTolerance=e/Fs.EDGE_COINCIDENCE_TOL_FACTOR,this.createFrame(t),this.startingEdge=this.initSubdiv(),this.locator=new Ms(this)}function Gs(){}function qs(){this.triList=new I}function Bs(){this.triList=new I}function zs(){this.coordList=new N,this.triCoords=new I}function Vs(){if(this.ls=null,this.data=null,2===arguments.length){var t=arguments[0],e=arguments[1];this.ls=new ce(t,e)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.ls=new ce(n,i),this.data=r}else if(6===arguments.length){var s=arguments[0],o=arguments[1],a=arguments[2],u=arguments[3],l=arguments[4],h=arguments[5];Vs.call(this,new g(s,o,a),new g(u,l,h))}else if(7===arguments.length){var c=arguments[0],f=arguments[1],d=arguments[2],p=arguments[3],v=arguments[4],m=arguments[5],y=arguments[6];Vs.call(this,new g(c,f,d),new g(p,v,m),y)}}function ks(){}function Ys(){if(this.p=null,this.data=null,this.left=null,this.right=null,this.count=null,2===arguments.length){var t=arguments[0],e=arguments[1];this.p=new g(t),this.left=null,this.right=null,this.count=1,this.data=e}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.p=new g(n,i),this.left=null,this.right=null,this.count=1,this.data=r}}function Us(){if(this.root=null,this.numberOfNodes=null,this.tolerance=null,0===arguments.length)Us.call(this,0);else if(1===arguments.length){var t=arguments[0];this.tolerance=t}}function Xs(){this.tolerance=null,this.matchNode=null,this.matchDist=0,this.p=null;var t=arguments[0],e=arguments[1];this.p=t,this.tolerance=e}function Hs(){this.initialVertices=null,this.segVertices=null,this.segments=new I,this.subdiv=null,this.incDel=null,this.convexHull=null,this.splitFinder=new Ls,this.kdt=null,this.vertexFactory=null,this.computeAreaEnv=null,this.splitPt=null,this.tolerance=null;var t=arguments[0],e=arguments[1];this.initialVertices=new I(t),this.tolerance=e,this.kdt=new Us(e)}function Ws(){this.siteCoords=null,this.tolerance=0,this.subdiv=null}function js(){this.siteCoords=null,this.constraintLines=null,this.tolerance=0,this.subdiv=null,this.constraintVertexMap=new rt}function Ks(){this.siteCoords=null,this.tolerance=0,this.subdiv=null,this.clipEnv=null,this.diagramEnv=null}function Zs(){}"fill"in Array.prototype||Object.defineProperty(Array.prototype,"fill",{configurable:!0,value:function(t){if(void 0===this||null===this)throw new TypeError(this+" is not an object");var e=Object(this),n=Math.max(Math.min(e.length,9007199254740991),0)||0,i=1 in arguments?parseInt(Number(arguments[1]),10)||0:0;i=i<0?Math.max(n+i,0):Math.min(i,n);var r=2 in arguments&&void 0!==arguments[2]?parseInt(Number(arguments[2]),10)||0:n;for(r=r<0?Math.max(n+arguments[2],0):Math.min(r,n);i<r;)e[i]=t,++i;return e},writable:!0}),Number.isFinite=Number.isFinite||function(t){return"number"==typeof t&&isFinite(t)},Number.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},Number.parseFloat=Number.parseFloat||parseFloat,Number.isNaN=Number.isNaN||function(t){return t!==t},Math.trunc=Math.trunc||function(t){return t<0?Math.ceil(t):Math.floor(t)},e(n.prototype,{interfaces_:function(){return[]},getClass:function(){return n}}),n.equalsWithTolerance=function(t,e,n){return Math.abs(t-e)<=n},r.isNaN=function(t){return Number.isNaN(t)},r.doubleToLongBits=function(t){return t},r.longBitsToDouble=function(t){return t},r.isInfinite=function(t){return!Number.isFinite(t)},r.MAX_VALUE=Number.MAX_VALUE,l.prototype=Object.create(Error.prototype),l.prototype.constructor=Error,h(c,l),e(c.prototype,{interfaces_:function(){return[]},getClass:function(){return c}}),e(f.prototype,{interfaces_:function(){return[]},getClass:function(){return f}}),f.shouldNeverReachHere=function(){if(0===arguments.length)f.shouldNeverReachHere(null);else if(1===arguments.length){var t=arguments[0];throw new c("Should never reach here"+(null!==t?": "+t:""))}},f.isTrue=function(){if(1===arguments.length){var t=arguments[0];f.isTrue(t,null)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(!e)throw null===n?new c:new c(n)}},f.equals=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];f.equals(t,e,null)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];if(!i.equals(n))throw new c("Expected "+n+" but encountered "+i+(null!==r?": "+r:""))}},e(g.prototype,{setOrdinate:function(t,e){switch(t){case g.X:this.x=e;break;case g.Y:this.y=e;break;case g.Z:this.z=e;break;default:throw new i("Invalid ordinate index: "+t)}},equals2D:function(){if(1===arguments.length){var t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){var e=arguments[0],i=arguments[1];return!!n.equalsWithTolerance(this.x,e.x,i)&&!!n.equalsWithTolerance(this.y,e.y,i)}},getOrdinate:function(t){switch(t){case g.X:return this.x;case g.Y:return this.y;case g.Z:return this.z}throw new i("Invalid ordinate index: "+t)},equals3D:function(t){return this.x===t.x&&this.y===t.y&&(this.z===t.z||r.isNaN(this.z)&&r.isNaN(t.z))},equals:function(t){return t instanceof g&&this.equals2D(t)},equalInZ:function(t,e){return n.equalsWithTolerance(this.z,t.z,e)},compareTo:function(t){var e=t;return this.x<e.x?-1:this.x>e.x?1:this.y<e.y?-1:this.y>e.y?1:0},clone:function(){try{var t=null;return t}catch(t){if(t instanceof CloneNotSupportedException)return f.shouldNeverReachHere("this shouldn't happen because this class is Cloneable"),null;throw t}finally{}},copy:function(){return new g(this)},toString:function(){return"("+this.x+", "+this.y+", "+this.z+")"},distance3D:function(t){var e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return Math.sqrt(e*e+n*n+i*i)},distance:function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},hashCode:function(){var t=17;return t=37*t+g.hashCode(this.x),t=37*t+g.hashCode(this.y)},setCoordinate:function(t){this.x=t.x,this.y=t.y,this.z=t.z},interfaces_:function(){return[s,o,u]},getClass:function(){return g}}),g.hashCode=function(){if(1===arguments.length){var t=arguments[0],e=r.doubleToLongBits(t);return Math.trunc(e^e>>>32)}},e(d.prototype,{compare:function(t,e){var n=t,i=e,r=d.compare(n.x,i.x);if(0!==r)return r;var s=d.compare(n.y,i.y);if(0!==s)return s;if(this.dimensionsToTest<=2)return 0;var o=d.compare(n.z,i.z);return o},interfaces_:function(){return[a]},getClass:function(){return d}}),d.compare=function(t,e){return t<e?-1:t>e?1:r.isNaN(t)?r.isNaN(e)?0:-1:r.isNaN(e)?1:0},g.DimensionalComparator=d,g.serialVersionUID=0x5cbf2c235c7e5800,g.NULL_ORDINATE=r.NaN,g.X=0,g.Y=1,g.Z=2,p.prototype.hasNext=function(){},p.prototype.next=function(){},p.prototype.remove=function(){},v.prototype.add=function(){},v.prototype.addAll=function(){},v.prototype.isEmpty=function(){},v.prototype.iterator=function(){},v.prototype.size=function(){},v.prototype.toArray=function(){},v.prototype.remove=function(){},m.prototype=new Error,m.prototype.name="IndexOutOfBoundsException",y.prototype=Object.create(v.prototype),y.prototype.constructor=y,y.prototype.get=function(){},y.prototype.set=function(){},y.prototype.isEmpty=function(){},x.prototype=new Error,x.prototype.name="NoSuchElementException",E.prototype=new Error,E.prototype.name="OperationNotSupported",I.prototype=Object.create(y.prototype),I.prototype.constructor=I,I.prototype.ensureCapacity=function(){},I.prototype.interfaces_=function(){return[y,v]},I.prototype.add=function(t){return 1===arguments.length?this.array_.push(t):this.array_.splice(arguments[0],arguments[1]),!0},I.prototype.clear=function(){this.array_=[]},I.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},I.prototype.set=function(t,e){var n=this.array_[t];return this.array_[t]=e,n},I.prototype.iterator=function(){return new Qs(this)},I.prototype.get=function(t){if(t<0||t>=this.size())throw new m;return this.array_[t]},I.prototype.isEmpty=function(){return 0===this.array_.length},I.prototype.size=function(){return this.array_.length},I.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},I.prototype.remove=function(t){for(var e=!1,n=0,i=this.array_.length;n<i;n++)if(this.array_[n]===t){this.array_.splice(n,1),e=!0;break}return e};var Qs=function(t){this.arrayList_=t,this.position_=0};Qs.prototype.next=function(){if(this.position_===this.arrayList_.size())throw new x;return this.arrayList_.get(this.position_++)},Qs.prototype.hasNext=function(){return this.position_<this.arrayList_.size()},Qs.prototype.set=function(t){return this.arrayList_.set(this.position_-1,t)},Qs.prototype.remove=function(){this.arrayList_.remove(this.arrayList_.get(this.position_))},h(N,I),e(N.prototype,{getCoordinate:function(t){return this.get(t)},addAll:function(){if(2===arguments.length){for(var t=arguments[0],e=arguments[1],n=!1,i=t.iterator();i.hasNext();)this.add(i.next(),e),n=!0;return n}return I.prototype.addAll.apply(this,arguments)},clone:function t(){for(var t=I.prototype.clone.call(this),e=0;e<this.size();e++)t.add(e,this.get(e).copy());return t},toCoordinateArray:function(){return this.toArray(N.coordArrayType)},add:function(){if(1===arguments.length){var t=arguments[0];I.prototype.add.call(this,t)}else if(2===arguments.length){if(arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var e=arguments[0],n=arguments[1];return this.add(e,n,!0),!0}if(arguments[0]instanceof g&&"boolean"==typeof arguments[1]){var i=arguments[0],r=arguments[1];if(!r&&this.size()>=1){var s=this.get(this.size()-1);if(s.equals2D(i))return null}I.prototype.add.call(this,i)}else if(arguments[0]instanceof Object&&"boolean"==typeof arguments[1]){var o=arguments[0],a=arguments[1];return this.add(o,a),!0}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var u=arguments[0],l=arguments[1],h=arguments[2];if(h)for(var c=0;c<u.length;c++)this.add(u[c],l);else for(var c=u.length-1;c>=0;c--)this.add(u[c],l);return!0}if("boolean"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof g){var f=arguments[0],d=arguments[1],p=arguments[2];if(!p){var v=this.size();if(v>0){if(f>0){var m=this.get(f-1);if(m.equals2D(d))return null}if(f<v){var y=this.get(f);if(y.equals2D(d))return null}}}I.prototype.add.call(this,f,d)}}else if(4===arguments.length){var x=arguments[0],E=arguments[1],N=arguments[2],C=arguments[3],S=1;N>C&&(S=-1);for(var c=N;c!==C;c+=S)this.add(x[c],E);return!0}},closeRing:function(){this.size()>0&&this.add(new g(this.get(0)),!1)},interfaces_:function(){return[]},getClass:function(){return N}}),N.coordArrayType=new Array(0).fill(null),e(C.prototype,{getArea:function(){return this.getWidth()*this.getHeight()},equals:function(t){if(!(t instanceof C))return!1;var e=t;return this.isNull()?e.isNull():this.maxx===e.getMaxX()&&this.maxy===e.getMaxY()&&this.minx===e.getMinX()&&this.miny===e.getMinY()},intersection:function(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new C;var e=this.minx>t.minx?this.minx:t.minx,n=this.miny>t.miny?this.miny:t.miny,i=this.maxx<t.maxx?this.maxx:t.maxx,r=this.maxy<t.maxy?this.maxy:t.maxy;return new C(e,i,n,r)},isNull:function(){return this.maxx<this.minx},getMaxX:function(){return this.maxx},covers:function(){if(1===arguments.length){if(arguments[0]instanceof g){var t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof C){var e=arguments[0];return!this.isNull()&&!e.isNull()&&(e.getMinX()>=this.minx&&e.getMaxX()<=this.maxx&&e.getMinY()>=this.miny&&e.getMaxY()<=this.maxy)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return!this.isNull()&&(n>=this.minx&&n<=this.maxx&&i>=this.miny&&i<=this.maxy)}},intersects:function(){if(1===arguments.length){if(arguments[0]instanceof C){var t=arguments[0];return!this.isNull()&&!t.isNull()&&!(t.minx>this.maxx||t.maxx<this.minx||t.miny>this.maxy||t.maxy<this.miny)}if(arguments[0]instanceof g){var e=arguments[0];return this.intersects(e.x,e.y)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return!this.isNull()&&!(n>this.maxx||n<this.minx||i>this.maxy||i<this.miny)}},getMinY:function(){return this.miny},getMinX:function(){return this.minx},expandToInclude:function(){if(1===arguments.length){if(arguments[0]instanceof g){var t=arguments[0];this.expandToInclude(t.x,t.y)}else if(arguments[0]instanceof C){var e=arguments[0];if(e.isNull())return null;this.isNull()?(this.minx=e.getMinX(),this.maxx=e.getMaxX(),this.miny=e.getMinY(),this.maxy=e.getMaxY()):(e.minx<this.minx&&(this.minx=e.minx),e.maxx>this.maxx&&(this.maxx=e.maxx),e.miny<this.miny&&(this.miny=e.miny),e.maxy>this.maxy&&(this.maxy=e.maxy))}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.isNull()?(this.minx=n,this.maxx=n,this.miny=i,this.maxy=i):(n<this.minx&&(this.minx=n),n>this.maxx&&(this.maxx=n),i<this.miny&&(this.miny=i),i>this.maxy&&(this.maxy=i))}},minExtent:function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t<e?t:e},getWidth:function(){return this.isNull()?0:this.maxx-this.minx},compareTo:function(t){var e=t;return this.isNull()?e.isNull()?0:-1:e.isNull()?1:this.minx<e.minx?-1:this.minx>e.minx?1:this.miny<e.miny?-1:this.miny>e.miny?1:this.maxx<e.maxx?-1:this.maxx>e.maxx?1:this.maxy<e.maxy?-1:this.maxy>e.maxy?1:0},translate:function(t,e){return this.isNull()?null:void this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e)},toString:function(){return"Env["+this.minx+" : "+this.maxx+", "+this.miny+" : "+this.maxy+"]"},setToNull:function(){this.minx=0,this.maxx=-1,this.miny=0,this.maxy=-1},getHeight:function(){return this.isNull()?0:this.maxy-this.miny},maxExtent:function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t>e?t:e},expandBy:function(){if(1===arguments.length){var t=arguments[0];this.expandBy(t,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this.isNull())return null;this.minx-=e,this.maxx+=e,this.miny-=n,this.maxy+=n,(this.minx>this.maxx||this.miny>this.maxy)&&this.setToNull()}},contains:function(){if(1===arguments.length){if(arguments[0]instanceof C){var t=arguments[0];return this.covers(t)}if(arguments[0]instanceof g){var e=arguments[0];return this.covers(e)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return this.covers(n,i)}},centre:function(){return this.isNull()?null:new g((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)},init:function(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof g){var t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof C){var e=arguments[0];this.minx=e.minx,this.maxx=e.maxx,this.miny=e.miny,this.maxy=e.maxy}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.init(n.x,i.x,n.y,i.y)}else if(4===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2],a=arguments[3];r<s?(this.minx=r,this.maxx=s):(this.minx=s,this.maxx=r),o<a?(this.miny=o,this.maxy=a):(this.miny=a,this.maxy=o)}},getMaxY:function(){return this.maxy},distance:function(t){if(this.intersects(t))return 0;var e=0;this.maxx<t.minx?e=t.minx-this.maxx:this.minx>t.maxx&&(e=this.minx-t.maxx);var n=0;return this.maxy<t.miny?n=t.miny-this.maxy:this.miny>t.maxy&&(n=this.miny-t.maxy),0===e?n:0===n?e:Math.sqrt(e*e+n*n)},hashCode:function(){var t=17;return t=37*t+g.hashCode(this.minx),t=37*t+g.hashCode(this.maxx),t=37*t+g.hashCode(this.miny),t=37*t+g.hashCode(this.maxy)},interfaces_:function(){return[s,u]},getClass:function(){return C}}),C.intersects=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];return n.x>=(t.x<e.x?t.x:e.x)&&n.x<=(t.x>e.x?t.x:e.x)&&n.y>=(t.y<e.y?t.y:e.y)&&n.y<=(t.y>e.y?t.y:e.y)}if(4===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2],o=arguments[3],a=Math.min(s.x,o.x),u=Math.max(s.x,o.x),l=Math.min(i.x,r.x),h=Math.max(i.x,r.x);return!(l>u)&&(!(h<a)&&(a=Math.min(s.y,o.y),u=Math.max(s.y,o.y),l=Math.min(i.y,r.y),h=Math.max(i.y,r.y),!(l>u)&&!(h<a)))}},C.serialVersionUID=0x51845cd552189800,h(w,S),e(w.prototype,{interfaces_:function(){return[]},getClass:function(){return w}}),e(L.prototype,{interfaces_:function(){return[]},getClass:function(){return L}}),L.toLocationSymbol=function(t){switch(t){case L.EXTERIOR:return"e";case L.BOUNDARY:return"b";case L.INTERIOR:return"i";case L.NONE:return"-"}throw new i("Unknown location value: "+t)},L.INTERIOR=0,L.BOUNDARY=1,L.EXTERIOR=2,L.NONE=-1,e(T.prototype,{interfaces_:function(){return[]},getClass:function(){return T}}),T.log10=function(t){var e=Math.log(t);return r.isInfinite(e)?e:r.isNaN(e)?e:e/T.LOG_10},T.min=function(t,e,n,i){var r=t;return e<r&&(r=e),n<r&&(r=n),i<r&&(r=i),r},T.clamp=function(){if("number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1],n=arguments[2];
return t<e?e:t>n?n:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var i=arguments[0],r=arguments[1],s=arguments[2];return i<r?r:i>s?s:i}},T.wrap=function(t,e){return t<0?e- -t%e:t%e},T.max=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=t;return e>i&&(i=e),n>i&&(i=n),i}if(4===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2],a=arguments[3],i=r;return s>i&&(i=s),o>i&&(i=o),a>i&&(i=a),i}},T.average=function(t,e){return(t+e)/2},T.LOG_10=Math.log(10),P.prototype.append=function(t){this.str+=t},P.prototype.setCharAt=function(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)},P.prototype.toString=function(t){return this.str},b.prototype.intValue=function(){return this.value},b.prototype.compareTo=function(t){return this.value<t?-1:this.value>t?1:0},b.isNaN=function(t){return Number.isNaN(t)},O.isWhitespace=function(t){return t<=32&&t>=0||127==t},O.toUpperCase=function(t){return t.toUpperCase()},e(_.prototype,{le:function(t){return this.hi<t.hi||this.hi===t.hi&&this.lo<=t.lo},extractSignificantDigits:function(t,e){var n=this.abs(),i=_.magnitude(n.hi),r=_.TEN.pow(i);n=n.divide(r),n.gt(_.TEN)?(n=n.divide(_.TEN),i+=1):n.lt(_.ONE)&&(n=n.multiply(_.TEN),i-=1);for(var s=i+1,o=new P,a=_.MAX_PRINT_DIGITS-1,u=0;u<=a;u++){t&&u===s&&o.append(".");var l=Math.trunc(n.hi);if(l<0)break;var h=!1,c=0;l>9?(h=!0,c="9"):c="0"+l,o.append(c),n=n.subtract(_.valueOf(l)).multiply(_.TEN),h&&n.selfAdd(_.TEN);var f=!0,g=_.magnitude(n.hi);if(g<0&&Math.abs(g)>=a-u&&(f=!1),!f)break}return e[0]=i,o.toString()},sqr:function(){return this.multiply(this)},doubleValue:function(){return this.hi+this.lo},subtract:function(){if(arguments[0]instanceof _){var t=arguments[0];return this.add(t.negate())}if("number"==typeof arguments[0]){var e=arguments[0];return this.add(-e)}},equals:function(){if(1===arguments.length){var t=arguments[0];return this.hi===t.hi&&this.lo===t.lo}},isZero:function(){return 0===this.hi&&0===this.lo},selfSubtract:function(){if(arguments[0]instanceof _){var t=arguments[0];return this.isNaN()?this:this.selfAdd(-t.hi,-t.lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.isNaN()?this:this.selfAdd(-e,0)}},getSpecialNumberString:function(){return this.isZero()?"0.0":this.isNaN()?"NaN ":null},min:function(t){return this.le(t)?this:t},selfDivide:function(){if(1===arguments.length){if(arguments[0]instanceof _){var t=arguments[0];return this.selfDivide(t.hi,t.lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.selfDivide(e,0)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1],r=null,s=null,o=null,a=null,u=null,l=null,h=null,c=null;return u=this.hi/n,l=_.SPLIT*u,r=l-u,c=_.SPLIT*n,r=l-r,s=u-r,o=c-n,h=u*n,o=c-o,a=n-o,c=r*o-h+r*a+s*o+s*a,l=(this.hi-h-c+this.lo-u*i)/n,c=u+l,this.hi=c,this.lo=u-c+l,this}},dump:function(){return"DD<"+this.hi+", "+this.lo+">"},divide:function(){if(arguments[0]instanceof _){var t=arguments[0],e=null,n=null,i=null,s=null,o=null,a=null,u=null,l=null;o=this.hi/t.hi,a=_.SPLIT*o,e=a-o,l=_.SPLIT*t.hi,e=a-e,n=o-e,i=l-t.hi,u=o*t.hi,i=l-i,s=t.hi-i,l=e*i-u+e*s+n*i+n*s,a=(this.hi-u-l+this.lo-o*t.lo)/t.hi,l=o+a;var h=l,c=o-l+a;return new _(h,c)}if("number"==typeof arguments[0]){var f=arguments[0];return r.isNaN(f)?_.createNaN():_.copy(this).selfDivide(f,0)}},ge:function(t){return this.hi>t.hi||this.hi===t.hi&&this.lo>=t.lo},pow:function(t){if(0===t)return _.valueOf(1);var e=new _(this),n=_.valueOf(1),i=Math.abs(t);if(i>1)for(;i>0;)i%2===1&&n.selfMultiply(e),i/=2,i>0&&(e=e.sqr());else n=e;return t<0?n.reciprocal():n},ceil:function(){if(this.isNaN())return _.NaN;var t=Math.ceil(this.hi),e=0;return t===this.hi&&(e=Math.ceil(this.lo)),new _(t,e)},compareTo:function(t){var e=t;return this.hi<e.hi?-1:this.hi>e.hi?1:this.lo<e.lo?-1:this.lo>e.lo?1:0},rint:function(){if(this.isNaN())return this;var t=this.add(.5);return t.floor()},setValue:function(){if(arguments[0]instanceof _){var t=arguments[0];return this.init(t),this}if("number"==typeof arguments[0]){var e=arguments[0];return this.init(e),this}},max:function(t){return this.ge(t)?this:t},sqrt:function(){if(this.isZero())return _.valueOf(0);if(this.isNegative())return _.NaN;var t=1/Math.sqrt(this.hi),e=this.hi*t,n=_.valueOf(e),i=this.subtract(n.sqr()),r=i.hi*(.5*t);return n.add(r)},selfAdd:function(){if(1===arguments.length){if(arguments[0]instanceof _){var t=arguments[0];return this.selfAdd(t.hi,t.lo)}if("number"==typeof arguments[0]){var e=arguments[0],n=null,i=null,r=null,s=null,o=null,a=null;return r=this.hi+e,o=r-this.hi,s=r-o,s=e-o+(this.hi-s),a=s+this.lo,n=r+a,i=a+(r-n),this.hi=n+i,this.lo=i+(n-this.hi),this}}else if(2===arguments.length){var u=arguments[0],l=arguments[1],n=null,i=null,h=null,c=null,r=null,s=null,o=null,a=null;r=this.hi+u,h=this.lo+l,o=r-this.hi,a=h-this.lo,s=r-o,c=h-a,s=u-o+(this.hi-s),c=l-a+(this.lo-c),o=s+h,n=r+o,i=o+(r-n),o=c+i;var f=n+o,g=o+(n-f);return this.hi=f,this.lo=g,this}},selfMultiply:function(){if(1===arguments.length){if(arguments[0]instanceof _){var t=arguments[0];return this.selfMultiply(t.hi,t.lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.selfMultiply(e,0)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1],r=null,s=null,o=null,a=null,u=null,l=null;u=_.SPLIT*this.hi,r=u-this.hi,l=_.SPLIT*n,r=u-r,s=this.hi-r,o=l-n,u=this.hi*n,o=l-o,a=n-o,l=r*o-u+r*a+s*o+s*a+(this.hi*i+this.lo*n);var h=u+l;r=u-h;var c=l+r;return this.hi=h,this.lo=c,this}},selfSqr:function(){return this.selfMultiply(this)},floor:function(){if(this.isNaN())return _.NaN;var t=Math.floor(this.hi),e=0;return t===this.hi&&(e=Math.floor(this.lo)),new _(t,e)},negate:function(){return this.isNaN()?this:new _((-this.hi),(-this.lo))},clone:function(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return null;throw t}finally{}},multiply:function(){if(arguments[0]instanceof _){var t=arguments[0];return t.isNaN()?_.createNaN():_.copy(this).selfMultiply(t)}if("number"==typeof arguments[0]){var e=arguments[0];return r.isNaN(e)?_.createNaN():_.copy(this).selfMultiply(e,0)}},isNaN:function(){return r.isNaN(this.hi)},intValue:function(){return Math.trunc(this.hi)},toString:function(){var t=_.magnitude(this.hi);return t>=-3&&t<=20?this.toStandardNotation():this.toSciNotation()},toStandardNotation:function(){var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!0,e),i=e[0]+1,r=n;if("."===n.charAt(0))r="0"+n;else if(i<0)r="0."+_.stringOfChar("0",-i)+n;else if(n.indexOf(".")===-1){var s=i-n.length,o=_.stringOfChar("0",s);r=n+o+".0"}return this.isNegative()?"-"+r:r},reciprocal:function(){var t=null,e=null,n=null,i=null,r=null,s=null,o=null,a=null;r=1/this.hi,s=_.SPLIT*r,t=s-r,a=_.SPLIT*this.hi,t=s-t,e=r-t,n=a-this.hi,o=r*this.hi,n=a-n,i=this.hi-n,a=t*n-o+t*i+e*n+e*i,s=(1-o-a-r*this.lo)/this.hi;var u=r+s,l=r-u+s;return new _(u,l)},toSciNotation:function(){if(this.isZero())return _.SCI_NOT_ZERO;var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!1,e),i=_.SCI_NOT_EXPONENT_CHAR+e[0];if("0"===n.charAt(0))throw new IllegalStateException("Found leading zero: "+n);var r="";n.length>1&&(r=n.substring(1));var s=n.charAt(0)+"."+r;return this.isNegative()?"-"+s+i:s+i},abs:function(){return this.isNaN()?_.NaN:this.isNegative()?this.negate():new _(this)},isPositive:function(){return this.hi>0||0===this.hi&&this.lo>0},lt:function(t){return this.hi<t.hi||this.hi===t.hi&&this.lo<t.lo},add:function(){if(arguments[0]instanceof _){var t=arguments[0];return _.copy(this).selfAdd(t)}if("number"==typeof arguments[0]){var e=arguments[0];return _.copy(this).selfAdd(e)}},init:function(){if(1===arguments.length){if("number"==typeof arguments[0]){var t=arguments[0];this.hi=t,this.lo=0}else if(arguments[0]instanceof _){var e=arguments[0];this.hi=e.hi,this.lo=e.lo}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];this.hi=n,this.lo=i}},gt:function(t){return this.hi>t.hi||this.hi===t.hi&&this.lo>t.lo},isNegative:function(){return this.hi<0||0===this.hi&&this.lo<0},trunc:function(){return this.isNaN()?_.NaN:this.isPositive()?this.floor():this.ceil()},signum:function(){return this.hi>0?1:this.hi<0?-1:this.lo>0?1:this.lo<0?-1:0},interfaces_:function(){return[u,s,o]},getClass:function(){return _}}),_.sqr=function(t){return _.valueOf(t).selfMultiply(t)},_.valueOf=function(){if("string"==typeof arguments[0]){var t=arguments[0];return _.parse(t)}if("number"==typeof arguments[0]){var e=arguments[0];return new _(e)}},_.sqrt=function(t){return _.valueOf(t).sqrt()},_.parse=function(t){for(var e=0,n=t.length;O.isWhitespace(t.charAt(e));)e++;var i=!1;if(e<n){var r=t.charAt(e);"-"!==r&&"+"!==r||(e++,"-"===r&&(i=!0))}for(var s=new _,o=0,a=0,u=0;;){if(e>=n)break;var l=t.charAt(e);if(e++,O.isDigit(l)){var h=l-"0";s.selfMultiply(_.TEN),s.selfAdd(h),o++}else{if("."!==l){if("e"===l||"E"===l){var c=t.substring(e);try{u=b.parseInt(c)}catch(e){throw e instanceof NumberFormatException?new NumberFormatException("Invalid exponent "+c+" in string "+t):e}finally{}break}throw new NumberFormatException("Unexpected character '"+l+"' at position "+e+" in string "+t)}a=o}}var f=s,g=o-a-u;if(0===g)f=s;else if(g>0){var d=_.TEN.pow(g);f=s.divide(d)}else if(g<0){var d=_.TEN.pow(-g);f=s.multiply(d)}return i?f.negate():f},_.createNaN=function(){return new _(r.NaN,r.NaN)},_.copy=function(t){return new _(t)},_.magnitude=function(t){var e=Math.abs(t),n=Math.log(e)/Math.log(10),i=Math.trunc(Math.floor(n)),r=Math.pow(10,i);return 10*r<=e&&(i+=1),i},_.stringOfChar=function(t,e){for(var n=new P,i=0;i<e;i++)n.append(t);return n.toString()},_.PI=new _(3.141592653589793,1.2246467991473532e-16),_.TWO_PI=new _(6.283185307179586,2.4492935982947064e-16),_.PI_2=new _(1.5707963267948966,6.123233995736766e-17),_.E=new _(2.718281828459045,1.4456468917292502e-16),_.NaN=new _(r.NaN,r.NaN),_.EPS=1.23259516440783e-32,_.SPLIT=134217729,_.MAX_PRINT_DIGITS=32,_.TEN=_.valueOf(10),_.ONE=_.valueOf(1),_.SCI_NOT_EXPONENT_CHAR="E",_.SCI_NOT_ZERO="0.0E0",e(M.prototype,{interfaces_:function(){return[]},getClass:function(){return M}}),M.orientationIndex=function(t,e,n){var i=M.orientationIndexFilter(t,e,n);if(i<=1)return i;var r=_.valueOf(e.x).selfAdd(-t.x),s=_.valueOf(e.y).selfAdd(-t.y),o=_.valueOf(n.x).selfAdd(-e.x),a=_.valueOf(n.y).selfAdd(-e.y);return r.selfMultiply(a).selfSubtract(s.selfMultiply(o)).signum()},M.signOfDet2x2=function(t,e,n,i){var r=t.multiply(i).selfSubtract(e.multiply(n));return r.signum()},M.intersection=function(t,e,n,i){var r=_.valueOf(i.y).selfSubtract(n.y).selfMultiply(_.valueOf(e.x).selfSubtract(t.x)),s=_.valueOf(i.x).selfSubtract(n.x).selfMultiply(_.valueOf(e.y).selfSubtract(t.y)),o=r.subtract(s),a=_.valueOf(i.x).selfSubtract(n.x).selfMultiply(_.valueOf(t.y).selfSubtract(n.y)),u=_.valueOf(i.y).selfSubtract(n.y).selfMultiply(_.valueOf(t.x).selfSubtract(n.x)),l=a.subtract(u),h=l.selfDivide(o).doubleValue(),c=_.valueOf(t.x).selfAdd(_.valueOf(e.x).selfSubtract(t.x).selfMultiply(h)).doubleValue(),f=_.valueOf(e.x).selfSubtract(t.x).selfMultiply(_.valueOf(t.y).selfSubtract(n.y)),d=_.valueOf(e.y).selfSubtract(t.y).selfMultiply(_.valueOf(t.x).selfSubtract(n.x)),p=f.subtract(d),v=p.selfDivide(o).doubleValue(),m=_.valueOf(n.y).selfAdd(_.valueOf(i.y).selfSubtract(n.y).selfMultiply(v)).doubleValue();return new g(c,m)},M.orientationIndexFilter=function(t,e,n){var i=null,r=(t.x-n.x)*(e.y-n.y),s=(t.y-n.y)*(e.x-n.x),o=r-s;if(r>0){if(s<=0)return M.signum(o);i=r+s}else{if(!(r<0))return M.signum(o);if(s>=0)return M.signum(o);i=-r-s}var a=M.DP_SAFE_EPSILON*i;return o>=a||-o>=a?M.signum(o):2},M.signum=function(t){return t>0?1:t<0?-1:0},M.DP_SAFE_EPSILON=1e-15,e(D.prototype,{setOrdinate:function(t,e,n){},size:function(){},getOrdinate:function(t,e){},getCoordinate:function(){if(1===arguments.length){arguments[0]}else if(2===arguments.length){arguments[0],arguments[1]}},getCoordinateCopy:function(t){},getDimension:function(){},getX:function(t){},clone:function(){},expandEnvelope:function(t){},copy:function(){},getY:function(t){},toCoordinateArray:function(){},interfaces_:function(){return[o]},getClass:function(){return D}}),D.X=0,D.Y=1,D.Z=2,D.M=3,A.arraycopy=function(t,e,n,i,r){for(var s=0,o=e;o<e+r;o++)n[i+s]=t[o],s++},A.getProperty=function(t){return{"line.separator":"\n"}[t]},e(F.prototype,{getY:function(){var t=this.y/this.w;if(r.isNaN(t)||r.isInfinite(t))throw new w;return t},getX:function(){var t=this.x/this.w;if(r.isNaN(t)||r.isInfinite(t))throw new w;return t},getCoordinate:function(){var t=new g;return t.x=this.getX(),t.y=this.getY(),t},interfaces_:function(){return[]},getClass:function(){return F}}),F.intersection=function(t,e,n,i){var s=t.y-e.y,o=e.x-t.x,a=t.x*e.y-e.x*t.y,u=n.y-i.y,l=i.x-n.x,h=n.x*i.y-i.x*n.y,c=o*h-l*a,f=u*a-s*h,d=s*l-u*o,p=c/d,v=f/d;if(r.isNaN(p)||r.isInfinite(p)||r.isNaN(v)||r.isInfinite(v))throw new w;return new g(p,v)},e(G.prototype,{create:function(){if(1===arguments.length){if(arguments[0]instanceof Array){arguments[0]}else if(R(arguments[0],D)){arguments[0]}}else if(2===arguments.length){arguments[0],arguments[1]}},interfaces_:function(){return[]},getClass:function(){return G}}),e(q.prototype,{filter:function(t){},interfaces_:function(){return[]},getClass:function(){return q}}),e(B.prototype,{isGeometryCollection:function(){return this.getSortIndex()===B.SORTINDEX_GEOMETRYCOLLECTION},getFactory:function(){return this.factory},getGeometryN:function(t){return this},getArea:function(){return 0},isRectangle:function(){return!1},equals:function(){if(1===arguments.length){if(arguments[0]instanceof B){var t=arguments[0];return null!==t&&this.equalsTopo(t)}if(arguments[0]instanceof Object){var e=arguments[0];if(!(e instanceof B))return!1;var n=e;return this.equalsExact(n)}}},equalsExact:function(t){return this===t||this.equalsExact(t,0)},geometryChanged:function(){this.apply(B.geometryChangedFilter)},geometryChangedAction:function(){this.envelope=null},equalsNorm:function(t){return null!==t&&this.norm().equalsExact(t.norm())},getLength:function(){return 0},getNumGeometries:function(){return 1},compareTo:function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getSortIndex()!==e.getSortIndex()?this.getSortIndex()-e.getSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t)}if(2===arguments.length){var n=arguments[0],i=arguments[1],e=n;return this.getSortIndex()!==e.getSortIndex()?this.getSortIndex()-e.getSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(n,i)}},getUserData:function(){return this.userData},getSRID:function(){return this.SRID},getEnvelope:function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())},checkNotGeometryCollection:function(t){if(t.getSortIndex()===B.SORTINDEX_GEOMETRYCOLLECTION)throw new i("This method does not support GeometryCollection arguments")},equal:function(t,e,n){return 0===n?t.equals(e):t.distance(e)<=n},norm:function(){var t=this.copy();return t.normalize(),t},getPrecisionModel:function(){return this.factory.getPrecisionModel()},getEnvelopeInternal:function(){return null===this.envelope&&(this.envelope=this.computeEnvelopeInternal()),new C(this.envelope)},setSRID:function(t){this.SRID=t},setUserData:function(t){this.userData=t},compare:function(t,e){for(var n=t.iterator(),i=e.iterator();n.hasNext()&&i.hasNext();){var r=n.next(),s=i.next(),o=r.compareTo(s);if(0!==o)return o}return n.hasNext()?1:i.hasNext()?-1:0},hashCode:function(){return this.getEnvelopeInternal().hashCode()},isGeometryCollectionOrDerived:function(){return this.getSortIndex()===B.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===B.SORTINDEX_MULTIPOINT||this.getSortIndex()===B.SORTINDEX_MULTILINESTRING||this.getSortIndex()===B.SORTINDEX_MULTIPOLYGON},interfaces_:function(){return[o,s,u]},getClass:function(){return B}}),B.hasNonEmptyElements=function(t){for(var e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1},B.hasNullElements=function(t){for(var e=0;e<t.length;e++)if(null===t[e])return!0;return!1},B.serialVersionUID=0x799ea46522854c00,B.SORTINDEX_POINT=0,B.SORTINDEX_MULTIPOINT=1,B.SORTINDEX_LINESTRING=2,B.SORTINDEX_LINEARRING=3,B.SORTINDEX_MULTILINESTRING=4,B.SORTINDEX_POLYGON=5,B.SORTINDEX_MULTIPOLYGON=6,B.SORTINDEX_GEOMETRYCOLLECTION=7,B.geometryChangedFilter={interfaces_:function(){return[q]},filter:function(t){t.geometryChangedAction()}},e(z.prototype,{filter:function(t){},interfaces_:function(){return[]},getClass:function(){return z}}),e(V.prototype,{isInBoundary:function(t){},interfaces_:function(){return[]},getClass:function(){return V}}),e(k.prototype,{isInBoundary:function(t){return t%2===1},interfaces_:function(){return[V]},getClass:function(){return k}}),e(Y.prototype,{isInBoundary:function(t){return t>0},interfaces_:function(){return[V]},getClass:function(){return Y}}),e(U.prototype,{isInBoundary:function(t){return t>1},interfaces_:function(){return[V]},getClass:function(){return U}}),e(X.prototype,{isInBoundary:function(t){return 1===t},interfaces_:function(){return[V]},getClass:function(){return X}}),V.Mod2BoundaryNodeRule=k,V.EndPointBoundaryNodeRule=Y,V.MultiValentEndPointBoundaryNodeRule=U,V.MonoValentEndPointBoundaryNodeRule=X,V.MOD2_BOUNDARY_RULE=new k,V.ENDPOINT_BOUNDARY_RULE=new Y,V.MULTIVALENT_ENDPOINT_BOUNDARY_RULE=new U,V.MONOVALENT_ENDPOINT_BOUNDARY_RULE=new X,V.OGC_SFS_BOUNDARY_RULE=V.MOD2_BOUNDARY_RULE,e(H.prototype,{interfaces_:function(){return[]},getClass:function(){return H}}),H.isRing=function(t){return!(t.length<4)&&!!t[0].equals2D(t[t.length-1])},H.ptNotInList=function(t,e){for(var n=0;n<t.length;n++){var i=t[n];if(H.indexOf(i,e)<0)return i}return null},H.scroll=function(t,e){var n=H.indexOf(e,t);if(n<0)return null;var i=new Array(t.length).fill(null);A.arraycopy(t,n,i,0,t.length-n),A.arraycopy(t,0,i,t.length-n,n),A.arraycopy(i,0,t,0,t.length)},H.equals=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].equals(e[n]))return!1;return!0}if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];if(i===r)return!0;if(null===i||null===r)return!1;if(i.length!==r.length)return!1;for(var n=0;n<i.length;n++)if(0!==s.compare(i[n],r[n]))return!1;return!0}},H.intersection=function(t,e){for(var n=new N,i=0;i<t.length;i++)e.intersects(t[i])&&n.add(t[i],!0);return n.toCoordinateArray()},H.hasRepeatedPoints=function(t){for(var e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1},H.removeRepeatedPoints=function(t){if(!H.hasRepeatedPoints(t))return t;var e=new N(t,(!1));return e.toCoordinateArray()},H.reverse=function(t){for(var e=t.length-1,n=Math.trunc(e/2),i=0;i<=n;i++){var r=t[i];t[i]=t[e-i],t[e-i]=r}},H.removeNull=function(t){for(var e=0,n=0;n<t.length;n++)null!==t[n]&&e++;var i=new Array(e).fill(null);if(0===e)return i;for(var r=0,n=0;n<t.length;n++)null!==t[n]&&(i[r++]=t[n]);return i},H.copyDeep=function(){if(1===arguments.length){for(var t=arguments[0],e=new Array(t.length).fill(null),n=0;n<t.length;n++)e[n]=new g(t[n]);return e}if(5===arguments.length)for(var i=arguments[0],r=arguments[1],s=arguments[2],o=arguments[3],a=arguments[4],n=0;n<a;n++)s[o+n]=new g(i[r+n])},H.isEqualReversed=function(t,e){for(var n=0;n<t.length;n++){var i=t[n],r=e[t.length-n-1];if(0!==i.compareTo(r))return!1}return!0},H.envelope=function(t){for(var e=new C,n=0;n<t.length;n++)e.expandToInclude(t[n]);return e},H.toCoordinateArray=function(t){return t.toArray(H.coordArrayType)},H.atLeastNCoordinatesOrNothing=function(t,e){return e.length>=t?e:[]},H.indexOf=function(t,e){for(var n=0;n<e.length;n++)if(t.equals(e[n]))return n;return-1},H.increasingDirection=function(t){for(var e=0;e<Math.trunc(t.length/2);e++){var n=t.length-1-e,i=t[e].compareTo(t[n]);if(0!==i)return i}return 1},H.compare=function(t,e){for(var n=0;n<t.length&&n<e.length;){var i=t[n].compareTo(e[n]);if(0!==i)return i;n++}return n<e.length?-1:n<t.length?1:0},H.minCoordinate=function(t){for(var e=null,n=0;n<t.length;n++)(null===e||e.compareTo(t[n])>0)&&(e=t[n]);return e},H.extract=function(t,e,n){e=T.clamp(e,0,t.length),n=T.clamp(n,-1,t.length);var i=n-e+1;n<0&&(i=0),e>=t.length&&(i=0),n<e&&(i=0);var r=new Array(i).fill(null);if(0===i)return r;for(var s=0,o=e;o<=n;o++)r[s++]=t[o];return r},e(W.prototype,{compare:function(t,e){var n=t,i=e;return H.compare(n,i)},interfaces_:function(){return[a]},getClass:function(){return W}}),e(j.prototype,{compare:function(t,e){var n=t,i=e;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;var r=H.compare(n,i),s=H.isEqualReversed(n,i);return s?0:r},OLDcompare:function(t,e){var n=t,i=e;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;for(var r=H.increasingDirection(n),s=H.increasingDirection(i),o=r>0?0:n.length-1,a=s>0?0:n.length-1,u=0;u<n.length;u++){var l=n[o].compareTo(i[a]);if(0!==l)return l;o+=r,a+=s}return 0},interfaces_:function(){return[a]},getClass:function(){return j}}),H.ForwardComparator=W,H.BidirectionalComparator=j,H.coordArrayType=new Array(0).fill(null),K.prototype.get=function(){},K.prototype.put=function(){},K.prototype.size=function(){},K.prototype.values=function(){},K.prototype.entrySet=function(){},Z.prototype=new K,Q.prototype=new v,Q.prototype.contains=function(){},J.prototype=new Q,J.prototype.contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){var i=this.array_[e];if(i===t)return!0}return!1},J.prototype.add=function(t){return!this.contains(t)&&(this.array_.push(t),!0)},J.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},J.prototype.remove=function(t){throw new javascript.util.OperationNotSupported},J.prototype.size=function(){return this.array_.length},J.prototype.isEmpty=function(){return 0===this.array_.length},J.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},J.prototype.iterator=function(){return new Js(this)};var Js=function(t){this.hashSet_=t,this.position_=0};Js.prototype.next=function(){if(this.position_===this.hashSet_.size())throw new x;return this.hashSet_.array_[this.position_++]},Js.prototype.hasNext=function(){return this.position_<this.hashSet_.size()},Js.prototype.remove=function(){throw new E};var $s=0,to=1;rt.prototype=new Z,rt.prototype.get=function(t){for(var e=this.root_;null!==e;){var n=t.compareTo(e.key);if(n<0)e=e.left;else{if(!(n>0))return e.value;e=e.right}}return null},rt.prototype.put=function(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:$s,getValue:function(){return this.value},getKey:function(){return this.key}},this.size_=1,null;var n,i,r=this.root_;do if(n=r,i=t.compareTo(r.key),i<0)r=r.left;else{if(!(i>0)){var s=r.value;return r.value=e,s}r=r.right}while(null!==r);var o={key:t,left:null,right:null,value:e,parent:n,color:$s,getValue:function(){return this.value},getKey:function(){return this.key}};return i<0?n.left=o:n.right=o,this.fixAfterInsertion(o),this.size_++,null},rt.prototype.fixAfterInsertion=function(t){for(t.color=to;null!=t&&t!=this.root_&&t.parent.color==to;)if(tt(t)==nt(tt(tt(t)))){var e=it(tt(tt(t)));$(e)==to?(et(tt(t),$s),et(e,$s),et(tt(tt(t)),to),t=tt(tt(t))):(t==it(tt(t))&&(t=tt(t),this.rotateLeft(t)),et(tt(t),$s),et(tt(tt(t)),to),this.rotateRight(tt(tt(t))))}else{var e=nt(tt(tt(t)));$(e)==to?(et(tt(t),$s),et(e,$s),et(tt(tt(t)),to),t=tt(tt(t))):(t==nt(tt(t))&&(t=tt(t),this.rotateRight(t)),et(tt(t),$s),et(tt(tt(t)),to),this.rotateLeft(tt(tt(t))))}this.root_.color=$s},rt.prototype.values=function(){var t=new I,e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=rt.successor(e));)t.add(e.value);return t},rt.prototype.entrySet=function(){var t=new J,e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=rt.successor(e));)t.add(e);return t},rt.prototype.rotateLeft=function(t){if(null!=t){var e=t.right;t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.left==t?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e}},rt.prototype.rotateRight=function(t){if(null!=t){var e=t.left;t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.right==t?t.parent.right=e:t.parent.left=e,e.right=t,t.parent=e}},rt.prototype.getFirstEntry=function(){var t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t},rt.successor=function(t){if(null===t)return null;if(null!==t.right){for(var e=t.right;null!==e.left;)e=e.left;return e}for(var e=t.parent,n=t;null!==e&&n===e.right;)n=e,e=e.parent;return e},rt.prototype.size=function(){return this.size_},e(st.prototype,{interfaces_:function(){return[]},getClass:function(){return st}}),ot.prototype=new Q,at.prototype=new ot,at.prototype.contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){var i=this.array_[e];if(0===i.compareTo(t))return!0}return!1},at.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,n=this.array_.length;e<n;e++){var i=this.array_[e];if(1===i.compareTo(t))return this.array_.splice(e,0,t),!0}return this.array_.push(t),!0},at.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},at.prototype.remove=function(t){throw new E},at.prototype.size=function(){return this.array_.length},at.prototype.isEmpty=function(){return 0===this.array_.length},at.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},at.prototype.iterator=function(){return new eo(this)};var eo=function(t){this.treeSet_=t,this.position_=0};eo.prototype.next=function(){if(this.position_===this.treeSet_.size())throw new x;return this.treeSet_.array_[this.position_++]},eo.prototype.hasNext=function(){return this.position_<this.treeSet_.size()},eo.prototype.remove=function(){throw new E},ut.sort=function(){var t,e,n,i,r=arguments[0];if(1===arguments.length)return i=function(t,e){return t.compareTo(e)},void r.sort(i);if(2===arguments.length)n=arguments[1],i=function(t,e){return n.compare(t,e)},r.sort(i);else{if(3===arguments.length){e=r.slice(arguments[1],arguments[2]),e.sort();var s=r.slice(0,arguments[1]).concat(e,r.slice(arguments[2],r.length));for(r.splice(0,r.length),t=0;t<s.length;t++)r.push(s[t]);return}if(4===arguments.length){for(e=r.slice(arguments[1],arguments[2]),n=arguments[3],i=function(t,e){return n.compare(t,e)},e.sort(i),s=r.slice(0,arguments[1]).concat(e,r.slice(arguments[2],r.length)),r.splice(0,r.length),t=0;t<s.length;t++)r.push(s[t]);return}}},ut.asList=function(t){for(var e=new I,n=0,i=t.length;n<i;n++)e.add(t[n]);return e},e(lt.prototype,{interfaces_:function(){return[]},getClass:function(){return lt}}),lt.toDimensionSymbol=function(t){switch(t){case lt.FALSE:return lt.SYM_FALSE;case lt.TRUE:return lt.SYM_TRUE;case lt.DONTCARE:return lt.SYM_DONTCARE;case lt.P:return lt.SYM_P;case lt.L:return lt.SYM_L;case lt.A:return lt.SYM_A}throw new i("Unknown dimension value: "+t)},lt.toDimensionValue=function(t){switch(O.toUpperCase(t)){case lt.SYM_FALSE:return lt.FALSE;case lt.SYM_TRUE:return lt.TRUE;case lt.SYM_DONTCARE:return lt.DONTCARE;case lt.SYM_P:return lt.P;case lt.SYM_L:return lt.L;case lt.SYM_A:return lt.A}throw new i("Unknown dimension symbol: "+t)},lt.P=0,lt.L=1,lt.A=2,lt.FALSE=-1,lt.TRUE=-2,lt.DONTCARE=-3,lt.SYM_FALSE="F",lt.SYM_TRUE="T",lt.SYM_DONTCARE="*",lt.SYM_P="0",lt.SYM_L="1",lt.SYM_A="2",e(ht.prototype,{filter:function(t){},interfaces_:function(){return[]},getClass:function(){return ht}}),e(ct.prototype,{filter:function(t,e){},isDone:function(){},isGeometryChanged:function(){},interfaces_:function(){return[]},getClass:function(){return ct}}),h(ft,B),e(ft.prototype,{computeEnvelopeInternal:function(){for(var t=new C,e=0;e<this.geometries.length;e++)t.expandToInclude(this.geometries[e].getEnvelopeInternal());return t},getGeometryN:function(t){return this.geometries[t]},getSortIndex:function(){return B.SORTINDEX_GEOMETRYCOLLECTION},getCoordinates:function(){for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=0;n<this.geometries.length;n++)for(var i=this.geometries[n].getCoordinates(),r=0;r<i.length;r++)e++,t[e]=i[r];return t},getArea:function(){for(var t=0,e=0;e<this.geometries.length;e++)t+=this.geometries[e].getArea();return t},equalsExact:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t;if(this.geometries.length!==n.geometries.length)return!1;for(var i=0;i<this.geometries.length;i++)if(!this.geometries[i].equalsExact(n.geometries[i],e))return!1;return!0}return B.prototype.equalsExact.apply(this,arguments)},normalize:function(){for(var t=0;t<this.geometries.length;t++)this.geometries[t].normalize();ut.sort(this.geometries)},getCoordinate:function(){return this.isEmpty()?null:this.geometries[0].getCoordinate()},getBoundaryDimension:function(){for(var t=lt.FALSE,e=0;e<this.geometries.length;e++)t=Math.max(t,this.geometries[e].getBoundaryDimension());return t},getDimension:function(){for(var t=lt.FALSE,e=0;e<this.geometries.length;e++)t=Math.max(t,this.geometries[e].getDimension());return t},getLength:function(){for(var t=0,e=0;e<this.geometries.length;e++)t+=this.geometries[e].getLength();return t},getNumPoints:function(){for(var t=0,e=0;e<this.geometries.length;e++)t+=this.geometries[e].getNumPoints();return t},getNumGeometries:function(){return this.geometries.length},reverse:function(){for(var t=this.geometries.length,e=new Array(t).fill(null),n=0;n<this.geometries.length;n++)e[n]=this.geometries[n].reverse();return this.getFactory().createGeometryCollection(e)},compareToSameClass:function(){if(1===arguments.length){var t=arguments[0],e=new at(ut.asList(this.geometries)),n=new at(ut.asList(t.geometries));return this.compare(e,n)}if(2===arguments.length){for(var i=arguments[0],r=arguments[1],s=i,o=this.getNumGeometries(),a=s.getNumGeometries(),u=0;u<o&&u<a;){var l=this.getGeometryN(u),h=s.getGeometryN(u),c=l.compareToSameClass(h,r);if(0!==c)return c;u++}return u<o?1:u<a?-1:0}},apply:function(){if(R(arguments[0],z))for(var t=arguments[0],e=0;e<this.geometries.length;e++)this.geometries[e].apply(t);else if(R(arguments[0],ct)){var n=arguments[0];if(0===this.geometries.length)return null;for(var e=0;e<this.geometries.length&&(this.geometries[e].apply(n),!n.isDone());e++);n.isGeometryChanged()&&this.geometryChanged()}else if(R(arguments[0],ht)){var i=arguments[0];i.filter(this);for(var e=0;e<this.geometries.length;e++)this.geometries[e].apply(i)}else if(R(arguments[0],q)){var r=arguments[0];r.filter(this);for(var e=0;e<this.geometries.length;e++)this.geometries[e].apply(r)}},getBoundary:function(){return this.checkNotGeometryCollection(this),f.shouldNeverReachHere(),null},clone:function(){var t=B.prototype.clone.call(this);t.geometries=new Array(this.geometries.length).fill(null);for(var e=0;e<this.geometries.length;e++)t.geometries[e]=this.geometries[e].clone();return t},getGeometryType:function(){return"GeometryCollection"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new ft(t,this.factory)},isEmpty:function(){for(var t=0;t<this.geometries.length;t++)if(!this.geometries[t].isEmpty())return!1;return!0},interfaces_:function(){return[]},getClass:function(){return ft}}),ft.serialVersionUID=-0x4f07bcb1f857d800,h(gt,ft),e(gt.prototype,{getSortIndex:function(){return B.SORTINDEX_MULTILINESTRING},equalsExact:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&ft.prototype.equalsExact.call(this,t,e)}return ft.prototype.equalsExact.apply(this,arguments)},getBoundaryDimension:function(){return this.isClosed()?lt.FALSE:0},isClosed:function(){if(this.isEmpty())return!1;for(var t=0;t<this.geometries.length;t++)if(!this.geometries[t].isClosed())return!1;return!0;
},getDimension:function(){return 1},reverse:function(){for(var t=this.geometries.length,e=new Array(t).fill(null),n=0;n<this.geometries.length;n++)e[t-1-n]=this.geometries[n].reverse();return this.getFactory().createMultiLineString(e)},getBoundary:function(){return new dt(this).getBoundary()},getGeometryType:function(){return"MultiLineString"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new gt(t,this.factory)},interfaces_:function(){return[st]},getClass:function(){return gt}}),gt.serialVersionUID=0x7155d2ab4afa8000,e(dt.prototype,{boundaryMultiLineString:function(t){if(this.geom.isEmpty())return this.getEmptyMultiPoint();var e=this.computeBoundaryCoordinates(t);return 1===e.length?this.geomFact.createPoint(e[0]):this.geomFact.createMultiPointFromCoords(e)},getBoundary:function(){return this.geom instanceof St?this.boundaryLineString(this.geom):this.geom instanceof gt?this.boundaryMultiLineString(this.geom):this.geom.getBoundary()},boundaryLineString:function(t){if(this.geom.isEmpty())return this.getEmptyMultiPoint();if(t.isClosed()){var e=this.bnRule.isInBoundary(2);return e?t.getStartPoint():this.geomFact.createMultiPoint()}return this.geomFact.createMultiPoint([t.getStartPoint(),t.getEndPoint()])},getEmptyMultiPoint:function(){return this.geomFact.createMultiPoint()},computeBoundaryCoordinates:function(t){var e=new I;this.endpointMap=new rt;for(var n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n);0!==i.getNumPoints()&&(this.addEndpoint(i.getCoordinateN(0)),this.addEndpoint(i.getCoordinateN(i.getNumPoints()-1)))}for(var r=this.endpointMap.entrySet().iterator();r.hasNext();){var s=r.next(),o=s.getValue(),a=o.count;this.bnRule.isInBoundary(a)&&e.add(s.getKey())}return H.toCoordinateArray(e)},addEndpoint:function(t){var e=this.endpointMap.get(t);null===e&&(e=new pt,this.endpointMap.put(t,e)),e.count++},interfaces_:function(){return[]},getClass:function(){return dt}}),dt.getBoundary=function(){if(1===arguments.length){var t=arguments[0],e=new dt(t);return e.getBoundary()}if(2===arguments.length){var n=arguments[0],i=arguments[1],e=new dt(n,i);return e.getBoundary()}},e(pt.prototype,{interfaces_:function(){return[]},getClass:function(){return pt}}),e(Nt.prototype,{interfaces_:function(){return[]},getClass:function(){return Nt}}),Nt.chars=function(t,e){for(var n=new Array(e).fill(null),i=0;i<e;i++)n[i]=t;return new String(n)},Nt.getStackTrace=function(){if(1===arguments.length){var t=arguments[0],e=new xt,n=new vt(e);return t.printStackTrace(n),e.toString()}if(2===arguments.length){for(var i=arguments[0],r=arguments[1],s="",o=new mt(Nt.getStackTrace(i)),a=new It(o),u=0;u<r;u++)try{s+=a.readLine()+Nt.NEWLINE}catch(t){if(!(t instanceof Et))throw t;f.shouldNeverReachHere()}finally{}return s}},Nt.split=function(t,e){for(var n=e.length,i=new I,r=""+t,s=r.indexOf(e);s>=0;){var o=r.substring(0,s);i.add(o),r=r.substring(s+n),s=r.indexOf(e)}r.length>0&&i.add(r);for(var a=new Array(i.size()).fill(null),u=0;u<a.length;u++)a[u]=i.get(u);return a},Nt.toString=function(){if(1===arguments.length){var t=arguments[0];return Nt.SIMPLE_ORDINATE_FORMAT.format(t)}},Nt.spaces=function(t){return Nt.chars(" ",t)},Nt.NEWLINE=A.getProperty("line.separator"),Nt.SIMPLE_ORDINATE_FORMAT=new yt("0.#"),e(Ct.prototype,{interfaces_:function(){return[]},getClass:function(){return Ct}}),Ct.copyCoord=function(t,e,n,i){for(var r=Math.min(t.getDimension(),n.getDimension()),s=0;s<r;s++)n.setOrdinate(i,s,t.getOrdinate(e,s))},Ct.isRing=function(t){var e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,D.X)===t.getOrdinate(e-1,D.X)&&t.getOrdinate(0,D.Y)===t.getOrdinate(e-1,D.Y))},Ct.isEqual=function(t,e){var n=t.size(),i=e.size();if(n!==i)return!1;for(var s=Math.min(t.getDimension(),e.getDimension()),o=0;o<n;o++)for(var a=0;a<s;a++){var u=t.getOrdinate(o,a),l=e.getOrdinate(o,a);if(!(t.getOrdinate(o,a)===e.getOrdinate(o,a)||r.isNaN(u)&&r.isNaN(l)))return!1}return!0},Ct.extend=function(t,e,n){var i=t.create(n,e.getDimension()),r=e.size();if(Ct.copy(e,0,i,0,r),r>0)for(var s=r;s<n;s++)Ct.copy(e,r-1,i,s,1);return i},Ct.reverse=function(t){for(var e=t.size()-1,n=Math.trunc(e/2),i=0;i<=n;i++)Ct.swap(t,i,e-i)},Ct.swap=function(t,e,n){if(e===n)return null;for(var i=0;i<t.getDimension();i++){var r=t.getOrdinate(e,i);t.setOrdinate(e,i,t.getOrdinate(n,i)),t.setOrdinate(n,i,r)}},Ct.copy=function(t,e,n,i,r){for(var s=0;s<r;s++)Ct.copyCoord(t,e+s,n,i+s)},Ct.toString=function(){if(1===arguments.length){var t=arguments[0],e=t.size();if(0===e)return"()";var n=t.getDimension(),i=new P;i.append("(");for(var r=0;r<e;r++){r>0&&i.append(" ");for(var s=0;s<n;s++)s>0&&i.append(","),i.append(Nt.toString(t.getOrdinate(r,s)))}return i.append(")"),i.toString()}},Ct.ensureValidRing=function(t,e){var n=e.size();if(0===n)return e;if(n<=3)return Ct.createClosedRing(t,e,4);var i=e.getOrdinate(0,D.X)===e.getOrdinate(n-1,D.X)&&e.getOrdinate(0,D.Y)===e.getOrdinate(n-1,D.Y);return i?e:Ct.createClosedRing(t,e,n+1)},Ct.createClosedRing=function(t,e,n){var i=t.create(n,e.getDimension()),r=e.size();Ct.copy(e,0,i,0,r);for(var s=r;s<n;s++)Ct.copy(e,0,i,s,1);return i},h(St,B),e(St.prototype,{computeEnvelopeInternal:function(){return this.isEmpty()?new C:this.points.expandEnvelope(new C)},isRing:function(){return this.isClosed()&&this.isSimple()},getSortIndex:function(){return B.SORTINDEX_LINESTRING},getCoordinates:function(){return this.points.toCoordinateArray()},equalsExact:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t;if(this.points.size()!==n.points.size())return!1;for(var i=0;i<this.points.size();i++)if(!this.equal(this.points.getCoordinate(i),n.points.getCoordinate(i),e))return!1;return!0}return B.prototype.equalsExact.apply(this,arguments)},normalize:function(){for(var t=0;t<Math.trunc(this.points.size()/2);t++){var e=this.points.size()-1-t;if(!this.points.getCoordinate(t).equals(this.points.getCoordinate(e)))return this.points.getCoordinate(t).compareTo(this.points.getCoordinate(e))>0&&Ct.reverse(this.points),null}},getCoordinate:function(){return this.isEmpty()?null:this.points.getCoordinate(0)},getBoundaryDimension:function(){return this.isClosed()?lt.FALSE:0},isClosed:function(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))},getEndPoint:function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)},getDimension:function(){return 1},getLength:function(){return he.computeLength(this.points)},getNumPoints:function(){return this.points.size()},reverse:function(){var t=this.points.copy();Ct.reverse(t);var e=this.getFactory().createLineString(t);return e},compareToSameClass:function(){if(1===arguments.length){for(var t=arguments[0],e=t,n=0,i=0;n<this.points.size()&&i<e.points.size();){var r=this.points.getCoordinate(n).compareTo(e.points.getCoordinate(i));if(0!==r)return r;n++,i++}return n<this.points.size()?1:i<e.points.size()?-1:0}if(2===arguments.length){var s=arguments[0],o=arguments[1],e=s;return o.compare(this.points,e.points)}},apply:function(){if(R(arguments[0],z))for(var t=arguments[0],e=0;e<this.points.size();e++)t.filter(this.points.getCoordinate(e));else if(R(arguments[0],ct)){var n=arguments[0];if(0===this.points.size())return null;for(var e=0;e<this.points.size()&&(n.filter(this.points,e),!n.isDone());e++);n.isGeometryChanged()&&this.geometryChanged()}else if(R(arguments[0],ht)){var i=arguments[0];i.filter(this)}else if(R(arguments[0],q)){var r=arguments[0];r.filter(this)}},getBoundary:function(){return new dt(this).getBoundary()},isEquivalentClass:function(t){return t instanceof St},clone:function(){var t=B.prototype.clone.call(this);return t.points=this.points.clone(),t},getCoordinateN:function(t){return this.points.getCoordinate(t)},getGeometryType:function(){return"LineString"},copy:function(){return new St(this.points.copy(),this.factory)},getCoordinateSequence:function(){return this.points},isEmpty:function(){return 0===this.points.size()},init:function(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new i("Invalid number of points in LineString (found "+t.size()+" - must be 0 or >= 2)");this.points=t},isCoordinate:function(t){for(var e=0;e<this.points.size();e++)if(this.points.getCoordinate(e).equals(t))return!0;return!1},getStartPoint:function(){return this.isEmpty()?null:this.getPointN(0)},getPointN:function(t){return this.getFactory().createPoint(this.points.getCoordinate(t))},interfaces_:function(){return[st]},getClass:function(){return St}}),St.serialVersionUID=0x2b2b51ba435c8e00,e(wt.prototype,{interfaces_:function(){return[]},getClass:function(){return wt}}),h(Lt,B),e(Lt.prototype,{computeEnvelopeInternal:function(){if(this.isEmpty())return new C;var t=new C;return t.expandToInclude(this.coordinates.getX(0),this.coordinates.getY(0)),t},getSortIndex:function(){return B.SORTINDEX_POINT},getCoordinates:function(){return this.isEmpty()?[]:[this.getCoordinate()]},equalsExact:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&(!(!this.isEmpty()||!t.isEmpty())||this.isEmpty()===t.isEmpty()&&this.equal(t.getCoordinate(),this.getCoordinate(),e))}return B.prototype.equalsExact.apply(this,arguments)},normalize:function(){},getCoordinate:function(){return 0!==this.coordinates.size()?this.coordinates.getCoordinate(0):null},getBoundaryDimension:function(){return lt.FALSE},getDimension:function(){return 0},getNumPoints:function(){return this.isEmpty()?0:1},reverse:function(){return this.copy()},getX:function(){if(null===this.getCoordinate())throw new IllegalStateException("getX called on empty Point");return this.getCoordinate().x},compareToSameClass:function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getCoordinate().compareTo(e.getCoordinate())}if(2===arguments.length){var n=arguments[0],i=arguments[1],e=n;return i.compare(this.coordinates,e.coordinates)}},apply:function(){if(R(arguments[0],z)){var t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate())}else if(R(arguments[0],ct)){var e=arguments[0];if(this.isEmpty())return null;e.filter(this.coordinates,0),e.isGeometryChanged()&&this.geometryChanged()}else if(R(arguments[0],ht)){var n=arguments[0];n.filter(this)}else if(R(arguments[0],q)){var i=arguments[0];i.filter(this)}},getBoundary:function(){return this.getFactory().createGeometryCollection(null)},clone:function(){var t=B.prototype.clone.call(this);return t.coordinates=this.coordinates.clone(),t},getGeometryType:function(){return"Point"},copy:function(){return new Lt(this.coordinates.copy(),this.factory)},getCoordinateSequence:function(){return this.coordinates},getY:function(){if(null===this.getCoordinate())throw new IllegalStateException("getY called on empty Point");return this.getCoordinate().y},isEmpty:function(){return 0===this.coordinates.size()},init:function(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),f.isTrue(t.size()<=1),this.coordinates=t},isSimple:function(){return!0},interfaces_:function(){return[wt]},getClass:function(){return Lt}}),Lt.serialVersionUID=0x44077bad161cbc00,e(Rt.prototype,{interfaces_:function(){return[]},getClass:function(){return Rt}}),h(Tt,B),e(Tt.prototype,{computeEnvelopeInternal:function(){return this.shell.getEnvelopeInternal()},getSortIndex:function(){return B.SORTINDEX_POLYGON},getCoordinates:function(){if(this.isEmpty())return[];for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=this.shell.getCoordinates(),i=0;i<n.length;i++)e++,t[e]=n[i];for(var r=0;r<this.holes.length;r++)for(var s=this.holes[r].getCoordinates(),o=0;o<s.length;o++)e++,t[e]=s[o];return t},getArea:function(){var t=0;t+=Math.abs(he.signedArea(this.shell.getCoordinateSequence()));for(var e=0;e<this.holes.length;e++)t-=Math.abs(he.signedArea(this.holes[e].getCoordinateSequence()));return t},isRectangle:function(){if(0!==this.getNumInteriorRing())return!1;if(null===this.shell)return!1;if(5!==this.shell.getNumPoints())return!1;for(var t=this.shell.getCoordinateSequence(),e=this.getEnvelopeInternal(),n=0;n<5;n++){var i=t.getX(n);if(i!==e.getMinX()&&i!==e.getMaxX())return!1;var r=t.getY(n);if(r!==e.getMinY()&&r!==e.getMaxY())return!1}for(var s=t.getX(0),o=t.getY(0),n=1;n<=4;n++){var i=t.getX(n),r=t.getY(n),a=i!==s,u=r!==o;if(a===u)return!1;s=i,o=r}return!0},equalsExact:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t,i=this.shell,r=n.shell;if(!i.equalsExact(r,e))return!1;if(this.holes.length!==n.holes.length)return!1;for(var s=0;s<this.holes.length;s++)if(!this.holes[s].equalsExact(n.holes[s],e))return!1;return!0}return B.prototype.equalsExact.apply(this,arguments)},normalize:function(){if(0===arguments.length){this.normalize(this.shell,!0);for(var t=0;t<this.holes.length;t++)this.normalize(this.holes[t],!1);ut.sort(this.holes)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(e.isEmpty())return null;var i=new Array(e.getCoordinates().length-1).fill(null);A.arraycopy(e.getCoordinates(),0,i,0,i.length);var r=H.minCoordinate(e.getCoordinates());H.scroll(i,r),A.arraycopy(i,0,e.getCoordinates(),0,i.length),e.getCoordinates()[i.length]=i[0],he.isCCW(e.getCoordinates())===n&&H.reverse(e.getCoordinates())}},getCoordinate:function(){return this.shell.getCoordinate()},getNumInteriorRing:function(){return this.holes.length},getBoundaryDimension:function(){return 1},getDimension:function(){return 2},getLength:function(){var t=0;t+=this.shell.getLength();for(var e=0;e<this.holes.length;e++)t+=this.holes[e].getLength();return t},getNumPoints:function(){for(var t=this.shell.getNumPoints(),e=0;e<this.holes.length;e++)t+=this.holes[e].getNumPoints();return t},reverse:function(){var t=this.copy();t.shell=this.shell.copy().reverse(),t.holes=new Array(this.holes.length).fill(null);for(var e=0;e<this.holes.length;e++)t.holes[e]=this.holes[e].copy().reverse();return t},convexHull:function(){return this.getExteriorRing().convexHull()},compareToSameClass:function(){if(1===arguments.length){var t=arguments[0],e=this.shell,n=t.shell;return e.compareToSameClass(n)}if(2===arguments.length){var i=arguments[0],r=arguments[1],s=i,e=this.shell,n=s.shell,o=e.compareToSameClass(n,r);if(0!==o)return o;for(var a=this.getNumInteriorRing(),u=s.getNumInteriorRing(),l=0;l<a&&l<u;){var h=this.getInteriorRingN(l),c=s.getInteriorRingN(l),f=h.compareToSameClass(c,r);if(0!==f)return f;l++}return l<a?1:l<u?-1:0}},apply:function(){if(R(arguments[0],z)){var t=arguments[0];this.shell.apply(t);for(var e=0;e<this.holes.length;e++)this.holes[e].apply(t)}else if(R(arguments[0],ct)){var n=arguments[0];if(this.shell.apply(n),!n.isDone())for(var e=0;e<this.holes.length&&(this.holes[e].apply(n),!n.isDone());e++);n.isGeometryChanged()&&this.geometryChanged()}else if(R(arguments[0],ht)){var i=arguments[0];i.filter(this)}else if(R(arguments[0],q)){var r=arguments[0];r.filter(this),this.shell.apply(r);for(var e=0;e<this.holes.length;e++)this.holes[e].apply(r)}},getBoundary:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();var t=new Array(this.holes.length+1).fill(null);t[0]=this.shell;for(var e=0;e<this.holes.length;e++)t[e+1]=this.holes[e];return t.length<=1?this.getFactory().createLinearRing(t[0].getCoordinateSequence()):this.getFactory().createMultiLineString(t)},clone:function(){var t=B.prototype.clone.call(this);t.shell=this.shell.clone(),t.holes=new Array(this.holes.length).fill(null);for(var e=0;e<this.holes.length;e++)t.holes[e]=this.holes[e].clone();return t},getGeometryType:function(){return"Polygon"},copy:function(){for(var t=this.shell.copy(),e=new Array(this.holes.length).fill(null),n=0;n<e.length;n++)e[n]=this.holes[n].copy();return new Tt(t,e,this.factory)},getExteriorRing:function(){return this.shell},isEmpty:function(){return this.shell.isEmpty()},getInteriorRingN:function(t){return this.holes[t]},interfaces_:function(){return[Rt]},getClass:function(){return Tt}}),Tt.serialVersionUID=-0x307ffefd8dc97200,h(Pt,ft),e(Pt.prototype,{getSortIndex:function(){return B.SORTINDEX_MULTIPOINT},isValid:function(){return!0},equalsExact:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&ft.prototype.equalsExact.call(this,t,e)}return ft.prototype.equalsExact.apply(this,arguments)},getCoordinate:function(){if(1===arguments.length){var t=arguments[0];return this.geometries[t].getCoordinate()}return ft.prototype.getCoordinate.apply(this,arguments)},getBoundaryDimension:function(){return lt.FALSE},getDimension:function(){return 0},getBoundary:function(){return this.getFactory().createGeometryCollection(null)},getGeometryType:function(){return"MultiPoint"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new Pt(t,this.factory)},interfaces_:function(){return[wt]},getClass:function(){return Pt}}),Pt.serialVersionUID=-0x6fb1ed4162e0fc00,h(bt,St),e(bt.prototype,{getSortIndex:function(){return B.SORTINDEX_LINEARRING},getBoundaryDimension:function(){return lt.FALSE},isClosed:function(){return!!this.isEmpty()||St.prototype.isClosed.call(this)},reverse:function(){var t=this.points.copy();Ct.reverse(t);var e=this.getFactory().createLinearRing(t);return e},validateConstruction:function(){if(!this.isEmpty()&&!St.prototype.isClosed.call(this))throw new i("Points of LinearRing do not form a closed linestring");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<bt.MINIMUM_VALID_SIZE)throw new i("Invalid number of points in LinearRing (found "+this.getCoordinateSequence().size()+" - must be 0 or >= 4)")},getGeometryType:function(){return"LinearRing"},copy:function(){return new bt(this.points.copy(),this.factory)},interfaces_:function(){return[]},getClass:function(){return bt}}),bt.MINIMUM_VALID_SIZE=4,bt.serialVersionUID=-0x3b229e262367a600,h(Ot,ft),e(Ot.prototype,{getSortIndex:function(){return B.SORTINDEX_MULTIPOLYGON},equalsExact:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&ft.prototype.equalsExact.call(this,t,e)}return ft.prototype.equalsExact.apply(this,arguments)},getBoundaryDimension:function(){return 1},getDimension:function(){return 2},reverse:function(){for(var t=this.geometries.length,e=new Array(t).fill(null),n=0;n<this.geometries.length;n++)e[n]=this.geometries[n].reverse();return this.getFactory().createMultiPolygon(e)},getBoundary:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();for(var t=new I,e=0;e<this.geometries.length;e++)for(var n=this.geometries[e],i=n.getBoundary(),r=0;r<i.getNumGeometries();r++)t.add(i.getGeometryN(r));var s=new Array(t.size()).fill(null);return this.getFactory().createMultiLineString(t.toArray(s))},getGeometryType:function(){return"MultiPolygon"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new Ot(t,this.factory)},interfaces_:function(){return[Rt]},getClass:function(){return Ot}}),Ot.serialVersionUID=-0x7a5aa1369171980,e(_t.prototype,{setCopyUserData:function(t){this.isUserDataCopied=t},edit:function(t,e){if(null===t)return null;var n=this.editInternal(t,e);return this.isUserDataCopied&&n.setUserData(t.getUserData()),n},editInternal:function(t,e){return null===this.factory&&(this.factory=t.getFactory()),t instanceof ft?this.editGeometryCollection(t,e):t instanceof Tt?this.editPolygon(t,e):t instanceof Lt?e.edit(t,this.factory):t instanceof St?e.edit(t,this.factory):(f.shouldNeverReachHere("Unsupported Geometry class: "+t.getClass().getName()),null)},editGeometryCollection:function(t,e){for(var n=e.edit(t,this.factory),i=new I,r=0;r<n.getNumGeometries();r++){var s=this.edit(n.getGeometryN(r),e);null===s||s.isEmpty()||i.add(s)}return n.getClass()===Pt?this.factory.createMultiPoint(i.toArray([])):n.getClass()===gt?this.factory.createMultiLineString(i.toArray([])):n.getClass()===Ot?this.factory.createMultiPolygon(i.toArray([])):this.factory.createGeometryCollection(i.toArray([]))},editPolygon:function(t,e){var n=e.edit(t,this.factory);if(null===n&&(n=this.factory.createPolygon(null)),n.isEmpty())return n;var i=this.edit(n.getExteriorRing(),e);if(null===i||i.isEmpty())return this.factory.createPolygon();for(var r=new I,s=0;s<n.getNumInteriorRing();s++){var o=this.edit(n.getInteriorRingN(s),e);null===o||o.isEmpty()||r.add(o)}return this.factory.createPolygon(i,r.toArray([]))},interfaces_:function(){return[]},getClass:function(){return _t}}),_t.GeometryEditorOperation=Mt,e(Dt.prototype,{edit:function(t,e){return t},interfaces_:function(){return[Mt]},getClass:function(){return Dt}}),e(At.prototype,{edit:function(t,e){var n=this.editCoordinates(t.getCoordinates(),t);return null===n?t:t instanceof bt?e.createLinearRing(n):t instanceof St?e.createLineString(n):t instanceof Lt?n.length>0?e.createPoint(n[0]):e.createPoint():t},interfaces_:function(){return[Mt]},getClass:function(){return At}}),e(Ft.prototype,{edit:function(t,e){return t instanceof bt?e.createLinearRing(this.edit(t.getCoordinateSequence(),t)):t instanceof St?e.createLineString(this.edit(t.getCoordinateSequence(),t)):t instanceof Lt?e.createPoint(this.edit(t.getCoordinateSequence(),t)):t},interfaces_:function(){return[Mt]},getClass:function(){return Ft}}),_t.NoOpGeometryOperation=Dt,_t.CoordinateOperation=At,_t.CoordinateSequenceOperation=Ft,e(Gt.prototype,{setOrdinate:function(t,e,n){switch(e){case D.X:this.coordinates[t].x=n;break;case D.Y:this.coordinates[t].y=n;break;case D.Z:this.coordinates[t].z=n;break;default:throw new i("invalid ordinateIndex")}},size:function(){return this.coordinates.length},getOrdinate:function(t,e){switch(e){case D.X:return this.coordinates[t].x;case D.Y:return this.coordinates[t].y;case D.Z:return this.coordinates[t].z}return r.NaN},getCoordinate:function(){if(1===arguments.length){var t=arguments[0];return this.coordinates[t]}if(2===arguments.length){var e=arguments[0],n=arguments[1];n.x=this.coordinates[e].x,n.y=this.coordinates[e].y,n.z=this.coordinates[e].z}},getCoordinateCopy:function(t){return new g(this.coordinates[t])},getDimension:function(){return this.dimension},getX:function(t){return this.coordinates[t].x},clone:function(){for(var t=new Array(this.size()).fill(null),e=0;e<this.coordinates.length;e++)t[e]=this.coordinates[e].clone();return new Gt(t,this.dimension)},expandEnvelope:function(t){for(var e=0;e<this.coordinates.length;e++)t.expandToInclude(this.coordinates[e]);return t},copy:function(){for(var t=new Array(this.size()).fill(null),e=0;e<this.coordinates.length;e++)t[e]=this.coordinates[e].copy();return new Gt(t,this.dimension)},toString:function(){if(this.coordinates.length>0){var t=new P(17*this.coordinates.length);t.append("("),t.append(this.coordinates[0]);for(var e=1;e<this.coordinates.length;e++)t.append(", "),t.append(this.coordinates[e]);return t.append(")"),t.toString()}return"()"},getY:function(t){return this.coordinates[t].y},toCoordinateArray:function(){return this.coordinates},interfaces_:function(){return[D,u]},getClass:function(){return Gt}}),Gt.serialVersionUID=-0xcb44a778db18e00,e(qt.prototype,{readResolve:function(){return qt.instance()},create:function(){if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new Gt(t)}if(R(arguments[0],D)){var e=arguments[0];return new Gt(e)}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return i>3&&(i=3),i<2?new Gt(n):new Gt(n,i)}},interfaces_:function(){return[G,u]},getClass:function(){return qt}}),qt.instance=function(){return qt.instanceObject},qt.serialVersionUID=-0x38e49fa6cf6f2e00,qt.instanceObject=new qt;var no,io=Object.defineProperty,ro=zt({delete:kt,has:Xt,get:Yt,set:Ht,keys:jt,values:Kt,entries:Zt,forEach:$t,clear:Wt}),so="undefined"!=typeof Map&&Map.prototype.values?Map:ro;te.prototype=new K,te.prototype.get=function(t){return this.map_.get(t)||null},te.prototype.put=function(t,e){return this.map_.set(t,e),e},te.prototype.values=function(){for(var t=new I,e=this.map_.values(),n=e.next();!n.done;)t.add(n.value),n=e.next();return t},te.prototype.entrySet=function(){var t=new J;return this.map_.entries().forEach(function(e){return t.add(e)}),t},te.prototype.size=function(){return this.map_.size()},e(ee.prototype,{equals:function(t){if(!(t instanceof ee))return!1;var e=t;return this.modelType===e.modelType&&this.scale===e.scale},compareTo:function(t){var e=t,n=this.getMaximumSignificantDigits(),i=e.getMaximumSignificantDigits();return new b(n).compareTo(new b(i))},getScale:function(){return this.scale},isFloating:function(){return this.modelType===ee.FLOATING||this.modelType===ee.FLOATING_SINGLE},getType:function(){return this.modelType},toString:function(){var t="UNKNOWN";return this.modelType===ee.FLOATING?t="Floating":this.modelType===ee.FLOATING_SINGLE?t="Floating-Single":this.modelType===ee.FIXED&&(t="Fixed (Scale="+this.getScale()+")"),t},makePrecise:function(){if("number"==typeof arguments[0]){var t=arguments[0];if(r.isNaN(t))return t;if(this.modelType===ee.FLOATING_SINGLE){var e=t;return e}return this.modelType===ee.FIXED?Math.round(t*this.scale)/this.scale:t}if(arguments[0]instanceof g){var n=arguments[0];if(this.modelType===ee.FLOATING)return null;n.x=this.makePrecise(n.x),n.y=this.makePrecise(n.y)}},getMaximumSignificantDigits:function(){var t=16;return this.modelType===ee.FLOATING?t=16:this.modelType===ee.FLOATING_SINGLE?t=6:this.modelType===ee.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t},setScale:function(t){this.scale=Math.abs(t)},interfaces_:function(){return[u,s]},getClass:function(){return ee}}),ee.mostPrecise=function(t,e){return t.compareTo(e)>=0?t:e},e(ne.prototype,{readResolve:function(){return ne.nameToTypeMap.get(this.name)},toString:function(){return this.name},interfaces_:function(){return[u]},getClass:function(){return ne}}),ne.serialVersionUID=-552860263173159e4,ne.nameToTypeMap=new te,ee.Type=ne,ee.serialVersionUID=0x6bee6404e9a25c00,ee.FIXED=new ne("FIXED"),ee.FLOATING=new ne("FLOATING"),ee.FLOATING_SINGLE=new ne("FLOATING SINGLE"),ee.maximumPreciseValue=9007199254740992,e(ie.prototype,{toGeometry:function(t){return t.isNull()?this.createPoint(null):t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new g(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new g(t.getMinX(),t.getMinY()),new g(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new g(t.getMinX(),t.getMinY()),new g(t.getMinX(),t.getMaxY()),new g(t.getMaxX(),t.getMaxY()),new g(t.getMaxX(),t.getMinY()),new g(t.getMinX(),t.getMinY())]),null)},createLineString:function(){if(0===arguments.length)return this.createLineString(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLineString(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(R(arguments[0],D)){var e=arguments[0];return new St(e,this)}}},createMultiLineString:function(){if(0===arguments.length)return new gt(null,this);if(1===arguments.length){var t=arguments[0];return new gt(t,this)}},buildGeometry:function(t){for(var e=null,n=!1,i=!1,r=t.iterator();r.hasNext();){var s=r.next(),o=s.getClass();null===e&&(e=o),o!==e&&(n=!0),s.isGeometryCollectionOrDerived()&&(i=!0)}if(null===e)return this.createGeometryCollection();if(n||i)return this.createGeometryCollection(ie.toGeometryArray(t));var a=t.iterator().next(),u=t.size()>1;if(u){if(a instanceof Tt)return this.createMultiPolygon(ie.toPolygonArray(t));if(a instanceof St)return this.createMultiLineString(ie.toLineStringArray(t));if(a instanceof Lt)return this.createMultiPoint(ie.toPointArray(t));f.shouldNeverReachHere("Unhandled class: "+a.getClass().getName())}return a},createMultiPointFromCoords:function(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)},createPoint:function(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof g){var t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(R(arguments[0],D)){var e=arguments[0];return new Lt(e,this)}}},getCoordinateSequenceFactory:function(){return this.coordinateSequenceFactory},createPolygon:function(){if(0===arguments.length)return new Tt(null,null,this);if(1===arguments.length){if(R(arguments[0],D)){var t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){var e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof bt){var n=arguments[0];return this.createPolygon(n,null)}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];return new Tt(i,r,this)}},getSRID:function(){return this.SRID},createGeometryCollection:function(){if(0===arguments.length)return new ft(null,this);if(1===arguments.length){var t=arguments[0];return new ft(t,this)}},createGeometry:function(t){var e=new _t(this);return e.edit(t,{edit:function(){if(2===arguments.length){var t=arguments[0];arguments[1];return this.coordinateSequenceFactory.create(t)}}})},getPrecisionModel:function(){return this.precisionModel},createLinearRing:function(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(R(arguments[0],D)){var e=arguments[0];return new bt(e,this)}}},createMultiPolygon:function(){if(0===arguments.length)return new Ot(null,this);if(1===arguments.length){var t=arguments[0];return new Ot(t,this)}},createMultiPoint:function(){if(0===arguments.length)return new Pt(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new Pt(t,this)}if(arguments[0]instanceof Array){var e=arguments[0];return this.createMultiPoint(null!==e?this.getCoordinateSequenceFactory().create(e):null)}if(R(arguments[0],D)){var n=arguments[0];if(null===n)return this.createMultiPoint(new Array(0).fill(null));for(var i=new Array(n.size()).fill(null),r=0;r<n.size();r++){var s=this.getCoordinateSequenceFactory().create(1,n.getDimension());Ct.copy(n,r,s,0,1),i[r]=this.createPoint(s)}return this.createMultiPoint(i)}}},interfaces_:function(){return[u]},getClass:function(){return ie}}),ie.toMultiPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.toGeometryArray=function(t){if(null===t)return null;var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.getDefaultCoordinateSequenceFactory=function(){return qt.instance()},ie.toMultiLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.toLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.toMultiPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.toLinearRingArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.toPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.toPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},ie.createPointFromInternalCoord=function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},ie.serialVersionUID=-0x5ea75f2051eeb400;var oo={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,emptyTypeStr:/^\s*(\w+)\s*EMPTY\s*$/,spaces:/\s+/,parenComma:/\)\s*,\s*\(/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,trimParens:/^\s*\(?(.*?)\)?\s*$/};e(re.prototype,{read:function(t){var e,n,i;t=t.replace(/[\n\r]/g," ");var r=oo.typeStr.exec(t);if(t.search("EMPTY")!==-1&&(r=oo.emptyTypeStr.exec(t),r[2]=void 0),r&&(n=r[1].toLowerCase(),
i=r[2],uo[n]&&(e=uo[n].apply(this,[i]))),void 0===e)throw new Error("Could not parse WKT "+t);return e},write:function(t){return this.extractGeometry(t)},extractGeometry:function(t){var e=t.getGeometryType().toLowerCase();if(!ao[e])return null;var n,i=e.toUpperCase();return n=t.isEmpty()?i+" EMPTY":i+"("+ao[e].apply(this,[t])+")"}});var ao={coordinate:function(t){return t.x+" "+t.y},point:function(t){return ao.coordinate.call(this,t.coordinates.coordinates[0])},multipoint:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push("("+ao.point.apply(this,[t.geometries[n]])+")");return e.join(",")},linestring:function(t){for(var e=[],n=0,i=t.points.coordinates.length;n<i;++n)e.push(ao.coordinate.apply(this,[t.points.coordinates[n]]));return e.join(",")},linearring:function(t){for(var e=[],n=0,i=t.points.coordinates.length;n<i;++n)e.push(ao.coordinate.apply(this,[t.points.coordinates[n]]));return e.join(",")},multilinestring:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push("("+ao.linestring.apply(this,[t.geometries[n]])+")");return e.join(",")},polygon:function(t){var e=[];e.push("("+ao.linestring.apply(this,[t.shell])+")");for(var n=0,i=t.holes.length;n<i;++n)e.push("("+ao.linestring.apply(this,[t.holes[n]])+")");return e.join(",")},multipolygon:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push("("+ao.polygon.apply(this,[t.geometries[n]])+")");return e.join(",")},geometrycollection:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push(this.extractGeometry(t.geometries[n]));return e.join(",")}},uo={point:function(t){if(void 0===t)return this.geometryFactory.createPoint();var e=t.trim().split(oo.spaces);return this.geometryFactory.createPoint(new g(Number.parseFloat(e[0]),Number.parseFloat(e[1])))},multipoint:function(t){if(void 0===t)return this.geometryFactory.createMultiPoint();for(var e,n=t.trim().split(","),i=[],r=0,s=n.length;r<s;++r)e=n[r].replace(oo.trimParens,"$1"),i.push(uo.point.apply(this,[e]));return this.geometryFactory.createMultiPoint(i)},linestring:function(t){if(void 0===t)return this.geometryFactory.createLineString();for(var e,n=t.trim().split(","),i=[],r=0,s=n.length;r<s;++r)e=n[r].trim().split(oo.spaces),i.push(new g(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLineString(i)},linearring:function(t){if(void 0===t)return this.geometryFactory.createLinearRing();for(var e,n=t.trim().split(","),i=[],r=0,s=n.length;r<s;++r)e=n[r].trim().split(oo.spaces),i.push(new g(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLinearRing(i)},multilinestring:function(t){if(void 0===t)return this.geometryFactory.createMultiLineString();for(var e,n=t.trim().split(oo.parenComma),i=[],r=0,s=n.length;r<s;++r)e=n[r].replace(oo.trimParens,"$1"),i.push(uo.linestring.apply(this,[e]));return this.geometryFactory.createMultiLineString(i)},polygon:function(t){if(void 0===t)return this.geometryFactory.createPolygon();for(var e,n,i,r,s=t.trim().split(oo.parenComma),o=[],a=0,u=s.length;a<u;++a)e=s[a].replace(oo.trimParens,"$1"),n=uo.linestring.apply(this,[e]),i=this.geometryFactory.createLinearRing(n.points),0===a?r=i:o.push(i);return this.geometryFactory.createPolygon(r,o)},multipolygon:function(t){if(void 0===t)return this.geometryFactory.createMultiPolygon();for(var e,n=t.trim().split(oo.doubleParenComma),i=[],r=0,s=n.length;r<s;++r)e=n[r].replace(oo.trimParens,"$1"),i.push(uo.polygon.apply(this,[e]));return this.geometryFactory.createMultiPolygon(i)},geometrycollection:function(t){if(void 0===t)return this.geometryFactory.createGeometryCollection();t=t.replace(/,\s*([A-Za-z])/g,"|$1");for(var e=t.trim().split("|"),n=[],i=0,r=e.length;i<r;++i)n.push(this.read(e[i]));return this.geometryFactory.createGeometryCollection(n)}};e(se.prototype,{write:function(t){return this.parser.write(t)}}),e(se,{toLineString:function(t,e){if(2!==arguments.length)throw new Error("Not implemented");return"LINESTRING ( "+t.x+" "+t.y+", "+e.x+" "+e.y+" )"}}),e(oe.prototype,{getIndexAlongSegment:function(t,e){return this.computeIntLineIndex(),this.intLineIndex[t][e]},getTopologySummary:function(){var t=new P;return this.isEndPoint()&&t.append(" endpoint"),this._isProper&&t.append(" proper"),this.isCollinear()&&t.append(" collinear"),t.toString()},computeIntersection:function(t,e,n,i){this.inputLines[0][0]=t,this.inputLines[0][1]=e,this.inputLines[1][0]=n,this.inputLines[1][1]=i,this.result=this.computeIntersect(t,e,n,i)},getIntersectionNum:function(){return this.result},computeIntLineIndex:function(){if(0===arguments.length)null===this.intLineIndex&&(this.intLineIndex=Array(2).fill().map(function(){return Array(2)}),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){var t=arguments[0],e=this.getEdgeDistance(t,0),n=this.getEdgeDistance(t,1);e>n?(this.intLineIndex[t][0]=0,this.intLineIndex[t][1]=1):(this.intLineIndex[t][0]=1,this.intLineIndex[t][1]=0)}},isProper:function(){return this.hasIntersection()&&this._isProper},setPrecisionModel:function(t){this.precisionModel=t},isInteriorIntersection:function(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){for(var t=arguments[0],e=0;e<this.result;e++)if(!this.intPt[e].equals2D(this.inputLines[t][0])&&!this.intPt[e].equals2D(this.inputLines[t][1]))return!0;return!1}},getIntersection:function(t){return this.intPt[t]},isEndPoint:function(){return this.hasIntersection()&&!this._isProper},hasIntersection:function(){return this.result!==oe.NO_INTERSECTION},getEdgeDistance:function(t,e){var n=oe.computeEdgeDistance(this.intPt[e],this.inputLines[t][0],this.inputLines[t][1]);return n},isCollinear:function(){return this.result===oe.COLLINEAR_INTERSECTION},toString:function(){return se.toLineString(this.inputLines[0][0],this.inputLines[0][1])+" - "+se.toLineString(this.inputLines[1][0],this.inputLines[1][1])+this.getTopologySummary()},getEndpoint:function(t,e){return this.inputLines[t][e]},isIntersection:function(t){for(var e=0;e<this.result;e++)if(this.intPt[e].equals2D(t))return!0;return!1},getIntersectionAlongSegment:function(t,e){return this.computeIntLineIndex(),this.intPt[this.intLineIndex[t][e]]},interfaces_:function(){return[]},getClass:function(){return oe}}),oe.computeEdgeDistance=function(t,e,n){var i=Math.abs(n.x-e.x),r=Math.abs(n.y-e.y),s=-1;if(t.equals(e))s=0;else if(t.equals(n))s=i>r?i:r;else{var o=Math.abs(t.x-e.x),a=Math.abs(t.y-e.y);s=i>r?o:a,0!==s||t.equals(e)||(s=Math.max(o,a))}return f.isTrue(!(0===s&&!t.equals(e)),"Bad distance calculation"),s},oe.nonRobustComputeEdgeDistance=function(t,e,n){var i=t.x-e.x,r=t.y-e.y,s=Math.sqrt(i*i+r*r);return f.isTrue(!(0===s&&!t.equals(e)),"Invalid distance calculation"),s},oe.DONT_INTERSECT=0,oe.DO_INTERSECT=1,oe.COLLINEAR=2,oe.NO_INTERSECTION=0,oe.POINT_INTERSECTION=1,oe.COLLINEAR_INTERSECTION=2,h(ae,oe),e(ae.prototype,{isInSegmentEnvelopes:function(t){var e=new C(this.inputLines[0][0],this.inputLines[0][1]),n=new C(this.inputLines[1][0],this.inputLines[1][1]);return e.contains(t)&&n.contains(t)},computeIntersection:function(){if(3!==arguments.length)return oe.prototype.computeIntersection.apply(this,arguments);var t=arguments[0],e=arguments[1],n=arguments[2];return this._isProper=!1,C.intersects(e,n,t)&&0===he.orientationIndex(e,n,t)&&0===he.orientationIndex(n,e,t)?(this._isProper=!0,(t.equals(e)||t.equals(n))&&(this._isProper=!1),this.result=oe.POINT_INTERSECTION,null):void(this.result=oe.NO_INTERSECTION)},normalizeToMinimum:function(t,e,n,i,r){r.x=this.smallestInAbsValue(t.x,e.x,n.x,i.x),r.y=this.smallestInAbsValue(t.y,e.y,n.y,i.y),t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,n.x-=r.x,n.y-=r.y,i.x-=r.x,i.y-=r.y},safeHCoordinateIntersection:function(t,e,n,i){var r=null;try{r=F.intersection(t,e,n,i)}catch(s){if(!(s instanceof w))throw s;r=ae.nearestEndpoint(t,e,n,i)}finally{}return r},intersection:function(t,e,n,i){var r=this.intersectionWithNormalization(t,e,n,i);return this.isInSegmentEnvelopes(r)||(r=new g(ae.nearestEndpoint(t,e,n,i))),null!==this.precisionModel&&this.precisionModel.makePrecise(r),r},smallestInAbsValue:function(t,e,n,i){var r=t,s=Math.abs(r);return Math.abs(e)<s&&(r=e,s=Math.abs(e)),Math.abs(n)<s&&(r=n,s=Math.abs(n)),Math.abs(i)<s&&(r=i),r},checkDD:function(t,e,n,i,r){var s=M.intersection(t,e,n,i),o=this.isInSegmentEnvelopes(s);A.out.println("DD in env = "+o+"  --------------------- "+s),r.distance(s)>1e-4&&A.out.println("Distance = "+r.distance(s))},intersectionWithNormalization:function(t,e,n,i){var r=new g(t),s=new g(e),o=new g(n),a=new g(i),u=new g;this.normalizeToEnvCentre(r,s,o,a,u);var l=this.safeHCoordinateIntersection(r,s,o,a);return l.x+=u.x,l.y+=u.y,l},computeCollinearIntersection:function(t,e,n,i){var r=C.intersects(t,e,n),s=C.intersects(t,e,i),o=C.intersects(n,i,t),a=C.intersects(n,i,e);return r&&s?(this.intPt[0]=n,this.intPt[1]=i,oe.COLLINEAR_INTERSECTION):o&&a?(this.intPt[0]=t,this.intPt[1]=e,oe.COLLINEAR_INTERSECTION):r&&o?(this.intPt[0]=n,this.intPt[1]=t,!n.equals(t)||s||a?oe.COLLINEAR_INTERSECTION:oe.POINT_INTERSECTION):r&&a?(this.intPt[0]=n,this.intPt[1]=e,!n.equals(e)||s||o?oe.COLLINEAR_INTERSECTION:oe.POINT_INTERSECTION):s&&o?(this.intPt[0]=i,this.intPt[1]=t,!i.equals(t)||r||a?oe.COLLINEAR_INTERSECTION:oe.POINT_INTERSECTION):s&&a?(this.intPt[0]=i,this.intPt[1]=e,!i.equals(e)||r||o?oe.COLLINEAR_INTERSECTION:oe.POINT_INTERSECTION):oe.NO_INTERSECTION},normalizeToEnvCentre:function(t,e,n,i,r){var s=t.x<e.x?t.x:e.x,o=t.y<e.y?t.y:e.y,a=t.x>e.x?t.x:e.x,u=t.y>e.y?t.y:e.y,l=n.x<i.x?n.x:i.x,h=n.y<i.y?n.y:i.y,c=n.x>i.x?n.x:i.x,f=n.y>i.y?n.y:i.y,g=s>l?s:l,d=a<c?a:c,p=o>h?o:h,v=u<f?u:f,m=(g+d)/2,y=(p+v)/2;r.x=m,r.y=y,t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,n.x-=r.x,n.y-=r.y,i.x-=r.x,i.y-=r.y},computeIntersect:function(t,e,n,i){if(this._isProper=!1,!C.intersects(t,e,n,i))return oe.NO_INTERSECTION;var r=he.orientationIndex(t,e,n),s=he.orientationIndex(t,e,i);if(r>0&&s>0||r<0&&s<0)return oe.NO_INTERSECTION;var o=he.orientationIndex(n,i,t),a=he.orientationIndex(n,i,e);if(o>0&&a>0||o<0&&a<0)return oe.NO_INTERSECTION;var u=0===r&&0===s&&0===o&&0===a;return u?this.computeCollinearIntersection(t,e,n,i):(0===r||0===s||0===o||0===a?(this._isProper=!1,t.equals2D(n)||t.equals2D(i)?this.intPt[0]=t:e.equals2D(n)||e.equals2D(i)?this.intPt[0]=e:0===r?this.intPt[0]=new g(n):0===s?this.intPt[0]=new g(i):0===o?this.intPt[0]=new g(t):0===a&&(this.intPt[0]=new g(e))):(this._isProper=!0,this.intPt[0]=this.intersection(t,e,n,i)),oe.POINT_INTERSECTION)},interfaces_:function(){return[]},getClass:function(){return ae}}),ae.nearestEndpoint=function(t,e,n,i){var r=t,s=he.distancePointLine(t,n,i),o=he.distancePointLine(e,n,i);return o<s&&(s=o,r=e),o=he.distancePointLine(n,t,e),o<s&&(s=o,r=n),o=he.distancePointLine(i,t,e),o<s&&(s=o,r=i),r},e(ue.prototype,{interfaces_:function(){return[]},getClass:function(){return ue}}),ue.orientationIndex=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,s=n.x-e.x,o=n.y-e.y;return ue.signOfDet2x2(i,r,s,o)},ue.signOfDet2x2=function(t,e,n,i){var r=null,s=null,o=null,a=0;if(r=1,0===t||0===i)return 0===e||0===n?0:e>0?n>0?-r:r:n>0?r:-r;if(0===e||0===n)return i>0?t>0?r:-r:t>0?-r:r;if(0<e?0<i?e<=i||(r=-r,s=t,t=n,n=s,s=e,e=i,i=s):e<=-i?(r=-r,n=-n,i=-i):(s=t,t=-n,n=s,s=e,e=-i,i=s):0<i?-e<=i?(r=-r,t=-t,e=-e):(s=-t,t=n,n=s,s=-e,e=i,i=s):e>=i?(t=-t,e=-e,n=-n,i=-i):(r=-r,s=-t,t=-n,n=s,s=-e,e=-i,i=s),0<t){if(!(0<n))return r;if(!(t<=n))return r}else{if(0<n)return-r;if(!(t>=n))return-r;r=-r,t=-t,n=-n}for(;;){if(a+=1,o=Math.floor(n/t),n-=o*t,i-=o*e,i<0)return-r;if(i>e)return r;if(t>n+n){if(e<i+i)return r}else{if(e>i+i)return-r;n=t-n,i=e-i,r=-r}if(0===i)return 0===n?0:-r;if(0===n)return r;if(o=Math.floor(t/n),t-=o*n,e-=o*i,e<0)return r;if(e>i)return-r;if(n>t+t){if(i<e+e)return-r}else{if(i>e+e)return r;t=n-t,e=i-e,r=-r}if(0===e)return 0===t?0:r;if(0===t)return-r}},e(le.prototype,{countSegment:function(t,e){if(t.x<this.p.x&&e.x<this.p.x)return null;if(this.p.x===e.x&&this.p.y===e.y)return this.isPointOnSegment=!0,null;if(t.y===this.p.y&&e.y===this.p.y){var n=t.x,i=e.x;return n>i&&(n=e.x,i=t.x),this.p.x>=n&&this.p.x<=i&&(this.isPointOnSegment=!0),null}if(t.y>this.p.y&&e.y<=this.p.y||e.y>this.p.y&&t.y<=this.p.y){var r=t.x-this.p.x,s=t.y-this.p.y,o=e.x-this.p.x,a=e.y-this.p.y,u=ue.signOfDet2x2(r,s,o,a);if(0===u)return this.isPointOnSegment=!0,null;a<s&&(u=-u),u>0&&this.crossingCount++}},isPointInPolygon:function(){return this.getLocation()!==L.EXTERIOR},getLocation:function(){return this.isPointOnSegment?L.BOUNDARY:this.crossingCount%2===1?L.INTERIOR:L.EXTERIOR},isOnSegment:function(){return this.isPointOnSegment},interfaces_:function(){return[]},getClass:function(){return le}}),le.locatePointInRing=function(){if(arguments[0]instanceof g&&R(arguments[1],D)){for(var t=arguments[0],e=arguments[1],n=new le(t),i=new g,r=new g,s=1;s<e.size();s++)if(e.getCoordinate(s,i),e.getCoordinate(s-1,r),n.countSegment(i,r),n.isOnSegment())return n.getLocation();return n.getLocation()}if(arguments[0]instanceof g&&arguments[1]instanceof Array){for(var o=arguments[0],a=arguments[1],n=new le(o),s=1;s<a.length;s++){var i=a[s],r=a[s-1];if(n.countSegment(i,r),n.isOnSegment())return n.getLocation()}return n.getLocation()}},e(he.prototype,{interfaces_:function(){return[]},getClass:function(){return he}}),he.orientationIndex=function(t,e,n){return M.orientationIndex(t,e,n)},he.signedArea=function(){if(arguments[0]instanceof Array){var t=arguments[0];if(t.length<3)return 0;for(var e=0,n=t[0].x,i=1;i<t.length-1;i++){var r=t[i].x-n,s=t[i+1].y,o=t[i-1].y;e+=r*(o-s)}return e/2}if(R(arguments[0],D)){var a=arguments[0],u=a.size();if(u<3)return 0;var l=new g,h=new g,c=new g;a.getCoordinate(0,h),a.getCoordinate(1,c);var n=h.x;c.x-=n;for(var e=0,i=1;i<u-1;i++)l.y=h.y,h.x=c.x,h.y=c.y,a.getCoordinate(i+1,c),c.x-=n,e+=h.x*(l.y-c.y);return e/2}},he.distanceLineLine=function(t,e,n,i){if(t.equals(e))return he.distancePointLine(t,n,i);if(n.equals(i))return he.distancePointLine(i,t,e);var r=!1;if(C.intersects(t,e,n,i)){var s=(e.x-t.x)*(i.y-n.y)-(e.y-t.y)*(i.x-n.x);if(0===s)r=!0;else{var o=(t.y-n.y)*(i.x-n.x)-(t.x-n.x)*(i.y-n.y),a=(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y),u=a/s,l=o/s;(l<0||l>1||u<0||u>1)&&(r=!0)}}else r=!0;return r?T.min(he.distancePointLine(t,n,i),he.distancePointLine(e,n,i),he.distancePointLine(n,t,e),he.distancePointLine(i,t,e)):0},he.isPointInRing=function(t,e){return he.locatePointInRing(t,e)!==L.EXTERIOR},he.computeLength=function(t){var e=t.size();if(e<=1)return 0;var n=0,i=new g;t.getCoordinate(0,i);for(var r=i.x,s=i.y,o=1;o<e;o++){t.getCoordinate(o,i);var a=i.x,u=i.y,l=a-r,h=u-s;n+=Math.sqrt(l*l+h*h),r=a,s=u}return n},he.isCCW=function(t){var e=t.length-1;if(e<3)throw new i("Ring has fewer than 4 points, so orientation cannot be determined");for(var n=t[0],r=0,s=1;s<=e;s++){var o=t[s];o.y>n.y&&(n=o,r=s)}var a=r;do a-=1,a<0&&(a=e);while(t[a].equals2D(n)&&a!==r);var u=r;do u=(u+1)%e;while(t[u].equals2D(n)&&u!==r);var l=t[a],h=t[u];if(l.equals2D(n)||h.equals2D(n)||l.equals2D(h))return!1;var c=he.computeOrientation(l,n,h),f=!1;return f=0===c?l.x>h.x:c>0},he.locatePointInRing=function(t,e){return le.locatePointInRing(t,e)},he.distancePointLinePerpendicular=function(t,e,n){var i=(n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y),r=((e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y))/i;return Math.abs(r)*Math.sqrt(i)},he.computeOrientation=function(t,e,n){return he.orientationIndex(t,e,n)},he.distancePointLine=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(0===e.length)throw new i("Line array must contain at least one vertex");for(var n=t.distance(e[0]),r=0;r<e.length-1;r++){var s=he.distancePointLine(t,e[r],e[r+1]);s<n&&(n=s)}return n}if(3===arguments.length){var o=arguments[0],a=arguments[1],u=arguments[2];if(a.x===u.x&&a.y===u.y)return o.distance(a);var l=(u.x-a.x)*(u.x-a.x)+(u.y-a.y)*(u.y-a.y),h=((o.x-a.x)*(u.x-a.x)+(o.y-a.y)*(u.y-a.y))/l;if(h<=0)return o.distance(a);if(h>=1)return o.distance(u);var c=((a.y-o.y)*(u.x-a.x)-(a.x-o.x)*(u.y-a.y))/l;return Math.abs(c)*Math.sqrt(l)}},he.isOnLine=function(t,e){for(var n=new ae,i=1;i<e.length;i++){var r=e[i-1],s=e[i];if(n.computeIntersection(t,r,s),n.hasIntersection())return!0}return!1},he.CLOCKWISE=-1,he.RIGHT=he.CLOCKWISE,he.COUNTERCLOCKWISE=1,he.LEFT=he.COUNTERCLOCKWISE,he.COLLINEAR=0,he.STRAIGHT=he.COLLINEAR,e(ce.prototype,{minX:function(){return Math.min(this.p0.x,this.p1.x)},orientationIndex:function(){if(arguments[0]instanceof ce){var t=arguments[0],e=he.orientationIndex(this.p0,this.p1,t.p0),n=he.orientationIndex(this.p0,this.p1,t.p1);return e>=0&&n>=0?Math.max(e,n):e<=0&&n<=0?Math.max(e,n):0}if(arguments[0]instanceof g){var i=arguments[0];return he.orientationIndex(this.p0,this.p1,i)}},toGeometry:function(t){return t.createLineString([this.p0,this.p1])},isVertical:function(){return this.p0.x===this.p1.x},equals:function(t){if(!(t instanceof ce))return!1;var e=t;return this.p0.equals(e.p0)&&this.p1.equals(e.p1)},intersection:function(t){var e=new ae;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null},project:function(){if(arguments[0]instanceof g){var t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new g(t);var e=this.projectionFactor(t),n=new g;return n.x=this.p0.x+e*(this.p1.x-this.p0.x),n.y=this.p0.y+e*(this.p1.y-this.p0.y),n}if(arguments[0]instanceof ce){var i=arguments[0],r=this.projectionFactor(i.p0),s=this.projectionFactor(i.p1);if(r>=1&&s>=1)return null;if(r<=0&&s<=0)return null;var o=this.project(i.p0);r<0&&(o=this.p0),r>1&&(o=this.p1);var a=this.project(i.p1);return s<0&&(a=this.p0),s>1&&(a=this.p1),new ce(o,a)}},normalize:function(){this.p1.compareTo(this.p0)<0&&this.reverse()},angle:function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)},getCoordinate:function(t){return 0===t?this.p0:this.p1},distancePerpendicular:function(t){return he.distancePointLinePerpendicular(t,this.p0,this.p1)},minY:function(){return Math.min(this.p0.y,this.p1.y)},midPoint:function(){return ce.midPoint(this.p0,this.p1)},projectionFactor:function(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;var e=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y,i=e*e+n*n;if(i<=0)return r.NaN;var s=((t.x-this.p0.x)*e+(t.y-this.p0.y)*n)/i;return s},closestPoints:function(t){var e=this.intersection(t);if(null!==e)return[e,e];var n=new Array(2).fill(null),i=r.MAX_VALUE,s=null,o=this.closestPoint(t.p0);i=o.distance(t.p0),n[0]=o,n[1]=t.p0;var a=this.closestPoint(t.p1);s=a.distance(t.p1),s<i&&(i=s,n[0]=a,n[1]=t.p1);var u=t.closestPoint(this.p0);s=u.distance(this.p0),s<i&&(i=s,n[0]=this.p0,n[1]=u);var l=t.closestPoint(this.p1);return s=l.distance(this.p1),s<i&&(i=s,n[0]=this.p1,n[1]=l),n},closestPoint:function(t){var e=this.projectionFactor(t);if(e>0&&e<1)return this.project(t);var n=this.p0.distance(t),i=this.p1.distance(t);return n<i?this.p0:this.p1},maxX:function(){return Math.max(this.p0.x,this.p1.x)},getLength:function(){return this.p0.distance(this.p1)},compareTo:function(t){var e=t,n=this.p0.compareTo(e.p0);return 0!==n?n:this.p1.compareTo(e.p1)},reverse:function(){var t=this.p0;this.p0=this.p1,this.p1=t},equalsTopo:function(t){return this.p0.equals(t.p0)&&this.p1.equals(t.p1)||this.p0.equals(t.p1)&&this.p1.equals(t.p0)},lineIntersection:function(t){try{var e=F.intersection(this.p0,this.p1,t.p0,t.p1);return e}catch(t){if(!(t instanceof w))throw t}finally{}return null},maxY:function(){return Math.max(this.p0.y,this.p1.y)},pointAlongOffset:function(t,e){var n=this.p0.x+t*(this.p1.x-this.p0.x),i=this.p0.y+t*(this.p1.y-this.p0.y),r=this.p1.x-this.p0.x,s=this.p1.y-this.p0.y,o=Math.sqrt(r*r+s*s),a=0,u=0;if(0!==e){if(o<=0)throw new IllegalStateException("Cannot compute offset from zero-length line segment");a=e*r/o,u=e*s/o}var l=n-u,h=i+a,c=new g(l,h);return c},setCoordinates:function(){if(1===arguments.length){var t=arguments[0];this.setCoordinates(t.p0,t.p1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.p0.x=e.x,this.p0.y=e.y,this.p1.x=n.x,this.p1.y=n.y}},segmentFraction:function(t){var e=this.projectionFactor(t);return e<0?e=0:(e>1||r.isNaN(e))&&(e=1),e},toString:function(){return"LINESTRING( "+this.p0.x+" "+this.p0.y+", "+this.p1.x+" "+this.p1.y+")"},isHorizontal:function(){return this.p0.y===this.p1.y},distance:function(){if(arguments[0]instanceof ce){var t=arguments[0];return he.distanceLineLine(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof g){var e=arguments[0];return he.distancePointLine(e,this.p0,this.p1)}},pointAlong:function(t){var e=new g;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e},hashCode:function(){var t=java.lang.Double.doubleToLongBits(this.p0.x);t^=31*java.lang.Double.doubleToLongBits(this.p0.y);var e=Math.trunc(t)^Math.trunc(t>>32),n=java.lang.Double.doubleToLongBits(this.p1.x);n^=31*java.lang.Double.doubleToLongBits(this.p1.y);var i=Math.trunc(n)^Math.trunc(n>>32);return e^i},interfaces_:function(){return[s,u]},getClass:function(){return ce}}),ce.midPoint=function(t,e){return new g((t.x+e.x)/2,(t.y+e.y)/2)},ce.serialVersionUID=0x2d2172135f411c00,e(fe.prototype,{isIntersects:function(){return!this.isDisjoint()},isCovers:function(){var t=fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])||fe.isTrue(this.matrix[L.INTERIOR][L.BOUNDARY])||fe.isTrue(this.matrix[L.BOUNDARY][L.INTERIOR])||fe.isTrue(this.matrix[L.BOUNDARY][L.BOUNDARY]);return t&&this.matrix[L.EXTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.BOUNDARY]===lt.FALSE},isCoveredBy:function(){var t=fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])||fe.isTrue(this.matrix[L.INTERIOR][L.BOUNDARY])||fe.isTrue(this.matrix[L.BOUNDARY][L.INTERIOR])||fe.isTrue(this.matrix[L.BOUNDARY][L.BOUNDARY]);return t&&this.matrix[L.INTERIOR][L.EXTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.EXTERIOR]===lt.FALSE},set:function(){if(1===arguments.length)for(var t=arguments[0],e=0;e<t.length;e++){var n=Math.trunc(e/3),i=e%3;this.matrix[n][i]=lt.toDimensionValue(t.charAt(e))}else if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2];this.matrix[r][s]=o}},isContains:function(){return fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&this.matrix[L.EXTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.BOUNDARY]===lt.FALSE},setAtLeast:function(){if(1===arguments.length)for(var t=arguments[0],e=0;e<t.length;e++){var n=Math.trunc(e/3),i=e%3;this.setAtLeast(n,i,lt.toDimensionValue(t.charAt(e)))}else if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2];this.matrix[r][s]<o&&(this.matrix[r][s]=o)}},setAtLeastIfValid:function(t,e,n){t>=0&&e>=0&&this.setAtLeast(t,e,n)},isWithin:function(){return fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&this.matrix[L.INTERIOR][L.EXTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.EXTERIOR]===lt.FALSE},isTouches:function(t,e){return t>e?this.isTouches(e,t):(t===lt.A&&e===lt.A||t===lt.L&&e===lt.L||t===lt.L&&e===lt.A||t===lt.P&&e===lt.A||t===lt.P&&e===lt.L)&&(this.matrix[L.INTERIOR][L.INTERIOR]===lt.FALSE&&(fe.isTrue(this.matrix[L.INTERIOR][L.BOUNDARY])||fe.isTrue(this.matrix[L.BOUNDARY][L.INTERIOR])||fe.isTrue(this.matrix[L.BOUNDARY][L.BOUNDARY])))},isOverlaps:function(t,e){return t===lt.P&&e===lt.P||t===lt.A&&e===lt.A?fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&fe.isTrue(this.matrix[L.INTERIOR][L.EXTERIOR])&&fe.isTrue(this.matrix[L.EXTERIOR][L.INTERIOR]):t===lt.L&&e===lt.L&&(1===this.matrix[L.INTERIOR][L.INTERIOR]&&fe.isTrue(this.matrix[L.INTERIOR][L.EXTERIOR])&&fe.isTrue(this.matrix[L.EXTERIOR][L.INTERIOR]))},isEquals:function(t,e){return t===e&&(fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&this.matrix[L.INTERIOR][L.EXTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.EXTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.BOUNDARY]===lt.FALSE)},toString:function(){for(var t=new P("123456789"),e=0;e<3;e++)for(var n=0;n<3;n++)t.setCharAt(3*e+n,lt.toDimensionSymbol(this.matrix[e][n]));return t.toString()},setAll:function(t){for(var e=0;e<3;e++)for(var n=0;n<3;n++)this.matrix[e][n]=t},get:function(t,e){return this.matrix[t][e]},transpose:function(){var t=this.matrix[1][0];return this.matrix[1][0]=this.matrix[0][1],this.matrix[0][1]=t,t=this.matrix[2][0],this.matrix[2][0]=this.matrix[0][2],this.matrix[0][2]=t,t=this.matrix[2][1],this.matrix[2][1]=this.matrix[1][2],this.matrix[1][2]=t,this},matches:function(t){if(9!==t.length)throw new i("Should be length 9: "+t);for(var e=0;e<3;e++)for(var n=0;n<3;n++)if(!fe.matches(this.matrix[e][n],t.charAt(3*e+n)))return!1;return!0},add:function(t){for(var e=0;e<3;e++)for(var n=0;n<3;n++)this.setAtLeast(e,n,t.get(e,n))},isDisjoint:function(){return this.matrix[L.INTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.INTERIOR][L.BOUNDARY]===lt.FALSE&&this.matrix[L.BOUNDARY][L.INTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.BOUNDARY]===lt.FALSE},isCrosses:function(t,e){return t===lt.P&&e===lt.L||t===lt.P&&e===lt.A||t===lt.L&&e===lt.A?fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&fe.isTrue(this.matrix[L.INTERIOR][L.EXTERIOR]):t===lt.L&&e===lt.P||t===lt.A&&e===lt.P||t===lt.A&&e===lt.L?fe.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&fe.isTrue(this.matrix[L.EXTERIOR][L.INTERIOR]):t===lt.L&&e===lt.L&&0===this.matrix[L.INTERIOR][L.INTERIOR]},interfaces_:function(){return[o]},getClass:function(){return fe}}),fe.matches=function(){if(Number.isInteger(arguments[0])&&"string"==typeof arguments[1]){var t=arguments[0],e=arguments[1];return e===lt.SYM_DONTCARE||(e===lt.SYM_TRUE&&(t>=0||t===lt.TRUE)||(e===lt.SYM_FALSE&&t===lt.FALSE||(e===lt.SYM_P&&t===lt.P||(e===lt.SYM_L&&t===lt.L||e===lt.SYM_A&&t===lt.A))))}if("string"==typeof arguments[0]&&"string"==typeof arguments[1]){var n=arguments[0],i=arguments[1],r=new fe(n);return r.matches(i)}},fe.isTrue=function(t){return t>=0||t===lt.TRUE};var lo=Object.freeze({Coordinate:g,CoordinateList:N,Envelope:C,LineSegment:ce,GeometryFactory:ie,Geometry:B,Point:Lt,LineString:St,LinearRing:bt,Polygon:Tt,GeometryCollection:ft,MultiPoint:Pt,MultiLineString:gt,MultiPolygon:Ot,Dimension:lt,IntersectionMatrix:fe,PrecisionModel:ee});e(ge.prototype,{addPoint:function(t){this.ptCount+=1,this.ptCentSum.x+=t.x,this.ptCentSum.y+=t.y},setBasePoint:function(t){null===this.areaBasePt&&(this.areaBasePt=t)},addLineSegments:function(t){for(var e=0,n=0;n<t.length-1;n++){var i=t[n].distance(t[n+1]);if(0!==i){e+=i;var r=(t[n].x+t[n+1].x)/2;this.lineCentSum.x+=i*r;var s=(t[n].y+t[n+1].y)/2;this.lineCentSum.y+=i*s}}this.totalLength+=e,0===e&&t.length>0&&this.addPoint(t[0])},addHole:function(t){for(var e=he.isCCW(t),n=0;n<t.length-1;n++)this.addTriangle(this.areaBasePt,t[n],t[n+1],e);this.addLineSegments(t)},getCentroid:function(){var t=new g;if(Math.abs(this.areasum2)>0)t.x=this.cg3.x/3/this.areasum2,t.y=this.cg3.y/3/this.areasum2;else if(this.totalLength>0)t.x=this.lineCentSum.x/this.totalLength,t.y=this.lineCentSum.y/this.totalLength;else{if(!(this.ptCount>0))return null;t.x=this.ptCentSum.x/this.ptCount,t.y=this.ptCentSum.y/this.ptCount}return t},addShell:function(t){t.length>0&&this.setBasePoint(t[0]);for(var e=!he.isCCW(t),n=0;n<t.length-1;n++)this.addTriangle(this.areaBasePt,t[n],t[n+1],e);this.addLineSegments(t)},addTriangle:function(t,e,n,i){var r=i?1:-1;ge.centroid3(t,e,n,this.triangleCent3);var s=ge.area2(t,e,n);this.cg3.x+=r*s*this.triangleCent3.x,this.cg3.y+=r*s*this.triangleCent3.y,this.areasum2+=r*s},add:function(){if(arguments[0]instanceof Tt){var t=arguments[0];this.addShell(t.getExteriorRing().getCoordinates());for(var e=0;e<t.getNumInteriorRing();e++)this.addHole(t.getInteriorRingN(e).getCoordinates())}else if(arguments[0]instanceof B){var n=arguments[0];if(n.isEmpty())return null;if(n instanceof Lt)this.addPoint(n.getCoordinate());else if(n instanceof St)this.addLineSegments(n.getCoordinates());else if(n instanceof Tt){var i=n;this.add(i)}else if(n instanceof ft)for(var r=n,e=0;e<r.getNumGeometries();e++)this.add(r.getGeometryN(e))}},interfaces_:function(){return[]},getClass:function(){return ge}}),ge.area2=function(t,e,n){return(e.x-t.x)*(n.y-t.y)-(n.x-t.x)*(e.y-t.y)},ge.centroid3=function(t,e,n,i){return i.x=t.x+e.x+n.x,i.y=t.y+e.y+n.y,null},ge.getCentroid=function(t){var e=new ge(t);return e.getCentroid()},de.prototype=new Error,de.prototype.name="EmptyStackException",pe.prototype=new y,pe.prototype.add=function(t){return this.array_.push(t),!0},pe.prototype.get=function(t){if(t<0||t>=this.size())throw new IndexOutOfBoundsException;return this.array_[t]},pe.prototype.push=function(t){return this.array_.push(t),t},pe.prototype.pop=function(t){if(0===this.array_.length)throw new de;return this.array_.pop()},pe.prototype.peek=function(){if(0===this.array_.length)throw new de;return this.array_[this.array_.length-1]},pe.prototype.empty=function(){return 0===this.array_.length},pe.prototype.isEmpty=function(){return this.empty()},pe.prototype.search=function(t){return this.array_.indexOf(t)},pe.prototype.size=function(){return this.array_.length},pe.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},e(ve.prototype,{filter:function(t){this.treeSet.contains(t)||(this.list.add(t),this.treeSet.add(t))},getCoordinates:function(){var t=new Array(this.list.size()).fill(null);return this.list.toArray(t)},interfaces_:function(){return[z]},getClass:function(){return ve}}),ve.filterCoordinates=function(t){for(var e=new ve,n=0;n<t.length;n++)e.filter(t[n]);return e.getCoordinates()},e(me.prototype,{preSort:function(t){for(var e=null,n=1;n<t.length;n++)(t[n].y<t[0].y||t[n].y===t[0].y&&t[n].x<t[0].x)&&(e=t[0],t[0]=t[n],t[n]=e);return ut.sort(t,1,t.length,new ye(t[0])),t},computeOctRing:function(t){var e=this.computeOctPts(t),n=new N;return n.add(e,!1),n.size()<3?null:(n.closeRing(),n.toCoordinateArray())},lineOrPolygon:function(t){if(t=this.cleanRing(t),3===t.length)return this.geomFactory.createLineString([t[0],t[1]]);var e=this.geomFactory.createLinearRing(t);return this.geomFactory.createPolygon(e,null)},cleanRing:function(t){f.equals(t[0],t[t.length-1]);for(var e=new I,n=null,i=0;i<=t.length-2;i++){var r=t[i],s=t[i+1];r.equals(s)||null!==n&&this.isBetween(n,r,s)||(e.add(r),n=r)}e.add(t[t.length-1]);var o=new Array(e.size()).fill(null);return e.toArray(o)},isBetween:function(t,e,n){if(0!==he.computeOrientation(t,e,n))return!1;if(t.x!==n.x){if(t.x<=e.x&&e.x<=n.x)return!0;if(n.x<=e.x&&e.x<=t.x)return!0}if(t.y!==n.y){if(t.y<=e.y&&e.y<=n.y)return!0;if(n.y<=e.y&&e.y<=t.y)return!0}return!1},reduce:function(t){var e=this.computeOctRing(t);if(null===e)return t;for(var n=new at,i=0;i<e.length;i++)n.add(e[i]);for(var i=0;i<t.length;i++)he.isPointInRing(t[i],e)||n.add(t[i]);var r=H.toCoordinateArray(n);return r.length<3?this.padArray3(r):r},getConvexHull:function(){if(0===this.inputPts.length)return this.geomFactory.createGeometryCollection(null);if(1===this.inputPts.length)return this.geomFactory.createPoint(this.inputPts[0]);if(2===this.inputPts.length)return this.geomFactory.createLineString(this.inputPts);var t=this.inputPts;this.inputPts.length>50&&(t=this.reduce(this.inputPts));var e=this.preSort(t),n=this.grahamScan(e),i=this.toCoordinateArray(n);return this.lineOrPolygon(i)},padArray3:function(t){for(var e=new Array(3).fill(null),n=0;n<e.length;n++)n<t.length?e[n]=t[n]:e[n]=t[0];return e},computeOctPts:function(t){for(var e=new Array(8).fill(null),n=0;n<e.length;n++)e[n]=t[0];for(var i=1;i<t.length;i++)t[i].x<e[0].x&&(e[0]=t[i]),t[i].x-t[i].y<e[1].x-e[1].y&&(e[1]=t[i]),t[i].y>e[2].y&&(e[2]=t[i]),t[i].x+t[i].y>e[3].x+e[3].y&&(e[3]=t[i]),t[i].x>e[4].x&&(e[4]=t[i]),t[i].x-t[i].y>e[5].x-e[5].y&&(e[5]=t[i]),t[i].y<e[6].y&&(e[6]=t[i]),t[i].x+t[i].y<e[7].x+e[7].y&&(e[7]=t[i]);return e},toCoordinateArray:function(t){for(var e=new Array(t.size()).fill(null),n=0;n<t.size();n++){var i=t.get(n);e[n]=i}return e},grahamScan:function(t){var e=null,n=new pe;e=n.push(t[0]),e=n.push(t[1]),e=n.push(t[2]);for(var i=3;i<t.length;i++){for(e=n.pop();!n.empty()&&he.computeOrientation(n.peek(),e,t[i])>0;)e=n.pop();e=n.push(e),e=n.push(t[i]);
}return e=n.push(t[0]),n},interfaces_:function(){return[]},getClass:function(){return me}}),me.extractCoordinates=function(t){var e=new ve;return t.apply(e),e.getCoordinates()},e(ye.prototype,{compare:function(t,e){var n=t,i=e;return ye.polarCompare(this.origin,n,i)},interfaces_:function(){return[a]},getClass:function(){return ye}}),ye.polarCompare=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,s=n.x-t.x,o=n.y-t.y,a=he.computeOrientation(t,e,n);if(a===he.COUNTERCLOCKWISE)return 1;if(a===he.CLOCKWISE)return-1;var u=i*i+r*r,l=s*s+o*o;return u<l?-1:u>l?1:0},me.RadialComparator=ye,e(xe.prototype,{transformPoint:function(t,e){return this.factory.createPoint(this.transformCoordinates(t.getCoordinateSequence(),t))},transformPolygon:function(t,e){var n=!0,i=this.transformLinearRing(t.getExteriorRing(),t);null!==i&&i instanceof bt&&!i.isEmpty()||(n=!1);for(var r=new I,s=0;s<t.getNumInteriorRing();s++){var o=this.transformLinearRing(t.getInteriorRingN(s),t);null===o||o.isEmpty()||(o instanceof bt||(n=!1),r.add(o))}if(n)return this.factory.createPolygon(i,r.toArray([]));var a=new I;return null!==i&&a.add(i),a.addAll(r),this.factory.buildGeometry(a)},createCoordinateSequence:function(t){return this.factory.getCoordinateSequenceFactory().create(t)},getInputGeometry:function(){return this.inputGeom},transformMultiLineString:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transformLineString(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this.factory.buildGeometry(n)},transformCoordinates:function(t,e){return this.copy(t)},transformLineString:function(t,e){return this.factory.createLineString(this.transformCoordinates(t.getCoordinateSequence(),t))},transformMultiPoint:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transformPoint(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this.factory.buildGeometry(n)},transformMultiPolygon:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transformPolygon(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this.factory.buildGeometry(n)},copy:function(t){return t.copy()},transformGeometryCollection:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transform(t.getGeometryN(i));null!==r&&(this.pruneEmptyGeometry&&r.isEmpty()||n.add(r))}return this.preserveGeometryCollectionType?this.factory.createGeometryCollection(ie.toGeometryArray(n)):this.factory.buildGeometry(n)},transform:function(t){if(this.inputGeom=t,this.factory=t.getFactory(),t instanceof Lt)return this.transformPoint(t,null);if(t instanceof Pt)return this.transformMultiPoint(t,null);if(t instanceof bt)return this.transformLinearRing(t,null);if(t instanceof St)return this.transformLineString(t,null);if(t instanceof gt)return this.transformMultiLineString(t,null);if(t instanceof Tt)return this.transformPolygon(t,null);if(t instanceof Ot)return this.transformMultiPolygon(t,null);if(t instanceof ft)return this.transformGeometryCollection(t,null);throw new i("Unknown Geometry subtype: "+t.getClass().getName())},transformLinearRing:function(t,e){var n=this.transformCoordinates(t.getCoordinateSequence(),t);if(null===n)return this.factory.createLinearRing(null);var i=n.size();return i>0&&i<4&&!this.preserveType?this.factory.createLineString(n):this.factory.createLinearRing(n)},interfaces_:function(){return[]},getClass:function(){return xe}}),e(Ee.prototype,{snapVertices:function(t,e){for(var n=this._isClosed?t.size()-1:t.size(),i=0;i<n;i++){var r=t.get(i),s=this.findSnapForVertex(r,e);null!==s&&(t.set(i,new g(s)),0===i&&this._isClosed&&t.set(t.size()-1,new g(s)))}},findSnapForVertex:function(t,e){for(var n=0;n<e.length;n++){if(t.equals2D(e[n]))return null;if(t.distance(e[n])<this.snapTolerance)return e[n]}return null},snapTo:function(t){var e=new N(this.srcPts);this.snapVertices(e,t),this.snapSegments(e,t);var n=e.toCoordinateArray();return n},snapSegments:function(t,e){if(0===e.length)return null;var n=e.length;e[0].equals2D(e[e.length-1])&&(n=e.length-1);for(var i=0;i<n;i++){var r=e[i],s=this.findSegmentIndexToSnap(r,t);s>=0&&t.add(s+1,new g(r),!1)}},findSegmentIndexToSnap:function(t,e){for(var n=r.MAX_VALUE,i=-1,s=0;s<e.size()-1;s++){if(this.seg.p0=e.get(s),this.seg.p1=e.get(s+1),this.seg.p0.equals2D(t)||this.seg.p1.equals2D(t)){if(this.allowSnappingToSourceVertices)continue;return-1}var o=this.seg.distance(t);o<this.snapTolerance&&o<n&&(n=o,i=s)}return i},setAllowSnappingToSourceVertices:function(t){this.allowSnappingToSourceVertices=t},interfaces_:function(){return[]},getClass:function(){return Ee}}),Ee.isClosed=function(t){return!(t.length<=1)&&t[0].equals2D(t[t.length-1])},e(Ie.prototype,{snapTo:function(t,e){var n=this.extractTargetCoordinates(t),i=new Ne(e,n);return i.transform(this.srcGeom)},snapToSelf:function(t,e){var n=this.extractTargetCoordinates(this.srcGeom),i=new Ne(t,n,(!0)),r=i.transform(this.srcGeom),s=r;return e&&R(s,Rt)&&(s=r.buffer(0)),s},computeSnapTolerance:function(t){var e=this.computeMinimumSegmentLength(t),n=e/10;return n},extractTargetCoordinates:function(t){for(var e=new at,n=t.getCoordinates(),i=0;i<n.length;i++)e.add(n[i]);return e.toArray(new Array(0).fill(null))},computeMinimumSegmentLength:function(t){for(var e=r.MAX_VALUE,n=0;n<t.length-1;n++){var i=t[n].distance(t[n+1]);i<e&&(e=i)}return e},interfaces_:function(){return[]},getClass:function(){return Ie}}),Ie.snap=function(t,e,n){var i=new Array(2).fill(null),r=new Ie(t);i[0]=r.snapTo(e,n);var s=new Ie(e);return i[1]=s.snapTo(i[0],n),i},Ie.computeOverlaySnapTolerance=function(){if(1===arguments.length){var t=arguments[0],e=Ie.computeSizeBasedSnapTolerance(t),n=t.getPrecisionModel();if(n.getType()===ee.FIXED){var i=1/n.getScale()*2/1.415;i>e&&(e=i)}return e}if(2===arguments.length){var r=arguments[0],s=arguments[1];return Math.min(Ie.computeOverlaySnapTolerance(r),Ie.computeOverlaySnapTolerance(s))}},Ie.computeSizeBasedSnapTolerance=function(t){var e=t.getEnvelopeInternal(),n=Math.min(e.getHeight(),e.getWidth()),i=n*Ie.SNAP_PRECISION_FACTOR;return i},Ie.snapToSelf=function(t,e,n){var i=new Ie(t);return i.snapToSelf(e,n)},Ie.SNAP_PRECISION_FACTOR=1e-9,h(Ne,xe),e(Ne.prototype,{snapLine:function(t,e){var n=new Ee(t,this.snapTolerance);return n.setAllowSnappingToSourceVertices(this.isSelfSnap),n.snapTo(e)},transformCoordinates:function(t,e){var n=t.toCoordinateArray(),i=this.snapLine(n,this.snapPts);return this.factory.getCoordinateSequenceFactory().create(i)},interfaces_:function(){return[]},getClass:function(){return Ne}}),e(Ce.prototype,{getCommon:function(){return r.longBitsToDouble(this.commonBits)},add:function(t){var e=r.doubleToLongBits(t);if(this.isFirst)return this.commonBits=e,this.commonSignExp=Ce.signExpBits(this.commonBits),this.isFirst=!1,null;var n=Ce.signExpBits(e);return n!==this.commonSignExp?(this.commonBits=0,null):(this.commonMantissaBitsCount=Ce.numCommonMostSigMantissaBits(this.commonBits,e),void(this.commonBits=Ce.zeroLowerBits(this.commonBits,64-(12+this.commonMantissaBitsCount))))},toString:function(){if(1===arguments.length){var t=arguments[0],e=r.longBitsToDouble(t),n=Long.toBinaryString(t),i="0000000000000000000000000000000000000000000000000000000000000000"+n,s=i.substring(i.length-64),o=s.substring(0,1)+"  "+s.substring(1,12)+"(exp) "+s.substring(12)+" [ "+e+" ]";return o}},interfaces_:function(){return[]},getClass:function(){return Ce}}),Ce.getBit=function(t,e){var n=1<<e;return 0!==(t&n)?1:0},Ce.signExpBits=function(t){return t>>52},Ce.zeroLowerBits=function(t,e){var n=(1<<e)-1,i=~n,r=t&i;return r},Ce.numCommonMostSigMantissaBits=function(t,e){for(var n=0,i=52;i>=0;i--){if(Ce.getBit(t,i)!==Ce.getBit(e,i))return n;n++}return 52},e(Se.prototype,{addCommonBits:function(t){var e=new Le(this.commonCoord);t.apply(e),t.geometryChanged()},removeCommonBits:function(t){if(0===this.commonCoord.x&&0===this.commonCoord.y)return t;var e=new g(this.commonCoord);e.x=-e.x,e.y=-e.y;var n=new Le(e);return t.apply(n),t.geometryChanged(),t},getCommonCoordinate:function(){return this.commonCoord},add:function(t){t.apply(this.ccFilter),this.commonCoord=this.ccFilter.getCommonCoordinate()},interfaces_:function(){return[]},getClass:function(){return Se}}),e(we.prototype,{filter:function(t){this.commonBitsX.add(t.x),this.commonBitsY.add(t.y)},getCommonCoordinate:function(){return new g(this.commonBitsX.getCommon(),this.commonBitsY.getCommon())},interfaces_:function(){return[z]},getClass:function(){return we}}),e(Le.prototype,{filter:function(t,e){var n=t.getOrdinate(e,0)+this.trans.x,i=t.getOrdinate(e,1)+this.trans.y;t.setOrdinate(e,0,n),t.setOrdinate(e,1,i)},isDone:function(){return!1},isGeometryChanged:function(){return!0},interfaces_:function(){return[ct]},getClass:function(){return Le}}),Se.CommonCoordinateFilter=we,Se.Translater=Le,e(Re.prototype,{next:function(){if(this.atStart)return this.atStart=!1,Re.isAtomic(this.parent)&&this.index++,this.parent;if(null!==this.subcollectionIterator){if(this.subcollectionIterator.hasNext())return this.subcollectionIterator.next();this.subcollectionIterator=null}if(this.index>=this.max)throw new x;var t=this.parent.getGeometryN(this.index++);return t instanceof ft?(this.subcollectionIterator=new Re(t),this.subcollectionIterator.next()):t},remove:function(){throw new UnsupportedOperationException(this.getClass().getName())},hasNext:function(){if(this.atStart)return!0;if(null!==this.subcollectionIterator){if(this.subcollectionIterator.hasNext())return!0;this.subcollectionIterator=null}return!(this.index>=this.max)},interfaces_:function(){return[p]},getClass:function(){return Re}}),Re.isAtomic=function(t){return!(t instanceof ft)},e(Te.prototype,{locateInternal:function(){if(arguments[0]instanceof g&&arguments[1]instanceof Tt){var t=arguments[0],e=arguments[1];if(e.isEmpty())return L.EXTERIOR;var n=e.getExteriorRing(),i=this.locateInPolygonRing(t,n);if(i===L.EXTERIOR)return L.EXTERIOR;if(i===L.BOUNDARY)return L.BOUNDARY;for(var r=0;r<e.getNumInteriorRing();r++){var s=e.getInteriorRingN(r),o=this.locateInPolygonRing(t,s);if(o===L.INTERIOR)return L.EXTERIOR;if(o===L.BOUNDARY)return L.BOUNDARY}return L.INTERIOR}if(arguments[0]instanceof g&&arguments[1]instanceof St){var a=arguments[0],u=arguments[1];if(!u.getEnvelopeInternal().intersects(a))return L.EXTERIOR;var l=u.getCoordinates();return u.isClosed()||!a.equals(l[0])&&!a.equals(l[l.length-1])?he.isOnLine(a,l)?L.INTERIOR:L.EXTERIOR:L.BOUNDARY}if(arguments[0]instanceof g&&arguments[1]instanceof Lt){var h=arguments[0],c=arguments[1],f=c.getCoordinate();return f.equals2D(h)?L.INTERIOR:L.EXTERIOR}},locateInPolygonRing:function(t,e){return e.getEnvelopeInternal().intersects(t)?he.locatePointInRing(t,e.getCoordinates()):L.EXTERIOR},intersects:function(t,e){return this.locate(t,e)!==L.EXTERIOR},updateLocationInfo:function(t){t===L.INTERIOR&&(this.isIn=!0),t===L.BOUNDARY&&this.numBoundaries++},computeLocation:function(t,e){if(e instanceof Lt&&this.updateLocationInfo(this.locateInternal(t,e)),e instanceof St)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof Tt)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof gt)for(var n=e,i=0;i<n.getNumGeometries();i++){var r=n.getGeometryN(i);this.updateLocationInfo(this.locateInternal(t,r))}else if(e instanceof Ot)for(var s=e,i=0;i<s.getNumGeometries();i++){var o=s.getGeometryN(i);this.updateLocationInfo(this.locateInternal(t,o))}else if(e instanceof ft)for(var a=new Re(e);a.hasNext();){var u=a.next();u!==e&&this.computeLocation(t,u)}},locate:function(t,e){return e.isEmpty()?L.EXTERIOR:e instanceof St?this.locateInternal(t,e):e instanceof Tt?this.locateInternal(t,e):(this.isIn=!1,this.numBoundaries=0,this.computeLocation(t,e),this.boundaryRule.isInBoundary(this.numBoundaries)?L.BOUNDARY:this.numBoundaries>0||this.isIn?L.INTERIOR:L.EXTERIOR)},interfaces_:function(){return[]},getClass:function(){return Te}}),e(Pe.prototype,{interfaces_:function(){return[]},getClass:function(){return Pe}}),Pe.octant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new i("Cannot compute the octant for point ( "+t+", "+e+" )");var n=Math.abs(t),r=Math.abs(e);return t>=0?e>=0?n>=r?0:1:n>=r?7:6:e>=0?n>=r?3:2:n>=r?4:5}if(arguments[0]instanceof g&&arguments[1]instanceof g){var s=arguments[0],o=arguments[1],a=o.x-s.x,u=o.y-s.y;if(0===a&&0===u)throw new i("Cannot compute the octant for two identical points "+s);return Pe.octant(a,u)}},e(be.prototype,{getCoordinates:function(){},size:function(){},getCoordinate:function(t){},isClosed:function(){},setData:function(t){},getData:function(){},interfaces_:function(){return[]},getClass:function(){return be}}),e(Oe.prototype,{getCoordinates:function(){return this.pts},size:function(){return this.pts.length},getCoordinate:function(t){return this.pts[t]},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getSegmentOctant:function(t){return t===this.pts.length-1?-1:Pe.octant(this.getCoordinate(t),this.getCoordinate(t+1))},setData:function(t){this.data=t},getData:function(){return this.data},toString:function(){return se.toLineString(new Gt(this.pts))},interfaces_:function(){return[be]},getClass:function(){return Oe}}),e(_e.prototype,{getBounds:function(){},interfaces_:function(){return[]},getClass:function(){return _e}}),e(Me.prototype,{getItem:function(){return this.item},getBounds:function(){return this.bounds},interfaces_:function(){return[_e,u]},getClass:function(){return Me}}),e(De.prototype,{poll:function(){if(this.isEmpty())return null;var t=this.items.get(1);return this.items.set(1,this.items.get(this._size)),this._size-=1,this.reorder(1),t},size:function(){return this._size},reorder:function(t){for(var e=null,n=this.items.get(t);2*t<=this._size&&(e=2*t,e!==this._size&&this.items.get(e+1).compareTo(this.items.get(e))<0&&e++,this.items.get(e).compareTo(n)<0);t=e)this.items.set(t,this.items.get(e));this.items.set(t,n)},clear:function(){this._size=0,this.items.clear()},isEmpty:function(){return 0===this._size},add:function(t){this.items.add(null),this._size+=1;var e=this._size;for(this.items.set(0,t);t.compareTo(this.items.get(Math.trunc(e/2)))<0;e/=2)this.items.set(e,this.items.get(Math.trunc(e/2)));this.items.set(e,t)},interfaces_:function(){return[]},getClass:function(){return De}}),e(Ae.prototype,{visitItem:function(t){},interfaces_:function(){return[]},getClass:function(){return Ae}}),e(Fe.prototype,{insert:function(t,e){},remove:function(t,e){},query:function(){if(1===arguments.length){arguments[0]}else if(2===arguments.length){arguments[0],arguments[1]}},interfaces_:function(){return[]},getClass:function(){return Fe}}),e(Ge.prototype,{getLevel:function(){return this.level},size:function(){return this.childBoundables.size()},getChildBoundables:function(){return this.childBoundables},addChildBoundable:function(t){f.isTrue(null===this.bounds),this.childBoundables.add(t)},isEmpty:function(){return this.childBoundables.isEmpty()},getBounds:function(){return null===this.bounds&&(this.bounds=this.computeBounds()),this.bounds},interfaces_:function(){return[_e,u]},getClass:function(){return Ge}}),Ge.serialVersionUID=0x5a1e55ec41369800;var ho={reverseOrder:function(){return{compare:function(t,e){return e.compareTo(t)}}},min:function(t){return ho.sort(t),t.get(0)},sort:function(t,e){var n=t.toArray();e?ut.sort(n,e):ut.sort(n);for(var i=t.iterator(),r=0,s=n.length;r<s;r++)i.next(),i.set(n[r])},singletonList:function(t){var e=new I;return e.add(t),e}};e(qe.prototype,{expandToQueue:function(t,e){var n=qe.isComposite(this.boundable1),r=qe.isComposite(this.boundable2);if(n&&r)return qe.area(this.boundable1)>qe.area(this.boundable2)?(this.expand(this.boundable1,this.boundable2,t,e),null):(this.expand(this.boundable2,this.boundable1,t,e),null);if(n)return this.expand(this.boundable1,this.boundable2,t,e),null;if(r)return this.expand(this.boundable2,this.boundable1,t,e),null;throw new i("neither boundable is composite")},isLeaves:function(){return!(qe.isComposite(this.boundable1)||qe.isComposite(this.boundable2))},compareTo:function(t){var e=t;return this._distance<e._distance?-1:this._distance>e._distance?1:0},expand:function(t,e,n,i){for(var r=t.getChildBoundables(),s=r.iterator();s.hasNext();){var o=s.next(),a=new qe(o,e,this.itemDistance);a.getDistance()<i&&n.add(a)}},getBoundable:function(t){return 0===t?this.boundable1:this.boundable2},getDistance:function(){return this._distance},distance:function(){return this.isLeaves()?this.itemDistance.distance(this.boundable1,this.boundable2):this.boundable1.getBounds().distance(this.boundable2.getBounds())},interfaces_:function(){return[s]},getClass:function(){return qe}}),qe.area=function(t){return t.getBounds().getArea()},qe.isComposite=function(t){return t instanceof Ge},e(Be.prototype,{getNodeCapacity:function(){return this.nodeCapacity},lastNode:function(t){return t.get(t.size()-1)},size:function t(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this.root));if(1===arguments.length){for(var e=arguments[0],t=0,n=e.getChildBoundables().iterator();n.hasNext();){var i=n.next();i instanceof Ge?t+=this.size(i):i instanceof Me&&(t+=1)}return t}},removeItem:function(t,e){for(var n=null,i=t.getChildBoundables().iterator();i.hasNext();){var r=i.next();r instanceof Me&&r.getItem()===e&&(n=r)}return null!==n&&(t.getChildBoundables().remove(n),!0)},itemsTree:function(){if(0===arguments.length){this.build();var t=this.itemsTree(this.root);return null===t?new I:t}if(1===arguments.length){for(var e=arguments[0],n=new I,i=e.getChildBoundables().iterator();i.hasNext();){var r=i.next();if(r instanceof Ge){var s=this.itemsTree(r);null!==s&&n.add(s)}else r instanceof Me?n.add(r.getItem()):f.shouldNeverReachHere()}return n.size()<=0?null:n}},insert:function(t,e){f.isTrue(!this.built,"Cannot insert items into an STR packed R-tree after it has been built."),this.itemBoundables.add(new Me(t,e))},boundablesAtLevel:function(){if(1===arguments.length){var t=arguments[0],e=new I;return this.boundablesAtLevel(t,this.root,e),e}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];if(f.isTrue(n>-2),i.getLevel()===n)return r.add(i),null;for(var s=i.getChildBoundables().iterator();s.hasNext();){var o=s.next();o instanceof Ge?this.boundablesAtLevel(n,o,r):(f.isTrue(o instanceof Me),n===-1&&r.add(o))}return null}},query:function(){if(1===arguments.length){var t=arguments[0];this.build();var e=new I;return this.isEmpty()?e:(this.getIntersectsOp().intersects(this.root.getBounds(),t)&&this.query(t,this.root,e),e)}if(2===arguments.length){var n=arguments[0],i=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this.root.getBounds(),n)&&this.query(n,this.root,i)}else if(3===arguments.length)if(R(arguments[2],Ae)&&arguments[0]instanceof Object&&arguments[1]instanceof Ge)for(var r=arguments[0],s=arguments[1],o=arguments[2],a=s.getChildBoundables(),u=0;u<a.size();u++){var l=a.get(u);this.getIntersectsOp().intersects(l.getBounds(),r)&&(l instanceof Ge?this.query(r,l,o):l instanceof Me?o.visitItem(l.getItem()):f.shouldNeverReachHere())}else if(R(arguments[2],y)&&arguments[0]instanceof Object&&arguments[1]instanceof Ge)for(var h=arguments[0],c=arguments[1],g=arguments[2],a=c.getChildBoundables(),u=0;u<a.size();u++){var l=a.get(u);this.getIntersectsOp().intersects(l.getBounds(),h)&&(l instanceof Ge?this.query(h,l,g):l instanceof Me?g.add(l.getItem()):f.shouldNeverReachHere())}},build:function(){return this.built?null:(this.root=this.itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this.itemBoundables,-1),this.itemBoundables=null,void(this.built=!0))},getRoot:function(){return this.build(),this.root},remove:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this.root.getBounds(),t)&&this.remove(t,this.root,e)}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],s=this.removeItem(i,r);if(s)return!0;for(var o=null,a=i.getChildBoundables().iterator();a.hasNext();){var u=a.next();if(this.getIntersectsOp().intersects(u.getBounds(),n)&&u instanceof Ge&&(s=this.remove(n,u,r))){o=u;break}}return null!==o&&o.getChildBoundables().isEmpty()&&i.getChildBoundables().remove(o),s}},createHigherLevels:function(t,e){f.isTrue(!t.isEmpty());var n=this.createParentBoundables(t,e+1);return 1===n.size()?n.get(0):this.createHigherLevels(n,e+1)},depth:function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this.root));if(1===arguments.length){for(var t=arguments[0],e=0,n=t.getChildBoundables().iterator();n.hasNext();){var i=n.next();if(i instanceof Ge){var r=this.depth(i);r>e&&(e=r)}}return e+1}},createParentBoundables:function(t,e){f.isTrue(!t.isEmpty());var n=new I;n.add(this.createNode(e));var i=new I(t);ho.sort(i,this.getComparator());for(var r=i.iterator();r.hasNext();){var s=r.next();this.lastNode(n).getChildBoundables().size()===this.getNodeCapacity()&&n.add(this.createNode(e)),this.lastNode(n).addChildBoundable(s)}return n},isEmpty:function(){return this.built?this.root.isEmpty():this.itemBoundables.isEmpty()},interfaces_:function(){return[u]},getClass:function(){return Be}}),Be.compareDoubles=function(t,e){return t>e?1:t<e?-1:0},Be.IntersectsOp=ze,Be.serialVersionUID=-0x35ef64c82d4c5400,Be.DEFAULT_NODE_CAPACITY=10,e(Ve.prototype,{distance:function(t,e){},interfaces_:function(){return[]},getClass:function(){return Ve}}),h(ke,Be),e(ke.prototype,{createParentBoundablesFromVerticalSlices:function(t,e){f.isTrue(t.length>0);for(var n=new I,i=0;i<t.length;i++)n.addAll(this.createParentBoundablesFromVerticalSlice(t[i],e));return n},createNode:function(t){return new Ye(t)},size:function(){return 0===arguments.length?Be.prototype.size.call(this):Be.prototype.size.apply(this,arguments)},insert:function(){if(2!==arguments.length)return Be.prototype.insert.apply(this,arguments);var t=arguments[0],e=arguments[1];return t.isNull()?null:void Be.prototype.insert.call(this,t,e)},getIntersectsOp:function(){return ke.intersectsOp},verticalSlices:function(t,e){for(var n=Math.trunc(Math.ceil(t.size()/e)),i=new Array(e).fill(null),r=t.iterator(),s=0;s<e;s++){i[s]=new I;for(var o=0;r.hasNext()&&o<n;){var a=r.next();i[s].add(a),o++}}return i},query:function(){if(1===arguments.length){var t=arguments[0];return Be.prototype.query.call(this,t)}if(2===arguments.length){var e=arguments[0],n=arguments[1];Be.prototype.query.call(this,e,n)}else if(3===arguments.length)if(R(arguments[2],Ae)&&arguments[0]instanceof Object&&arguments[1]instanceof Ge){var i=arguments[0],r=arguments[1],s=arguments[2];Be.prototype.query.call(this,i,r,s)}else if(R(arguments[2],y)&&arguments[0]instanceof Object&&arguments[1]instanceof Ge){var o=arguments[0],a=arguments[1],u=arguments[2];Be.prototype.query.call(this,o,a,u)}},getComparator:function(){return ke.yComparator},createParentBoundablesFromVerticalSlice:function(t,e){return Be.prototype.createParentBoundables.call(this,t,e)},remove:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return Be.prototype.remove.call(this,t,e)}return Be.prototype.remove.apply(this,arguments)},depth:function(){return 0===arguments.length?Be.prototype.depth.call(this):Be.prototype.depth.apply(this,arguments)},createParentBoundables:function(t,e){f.isTrue(!t.isEmpty());var n=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),i=new I(t);ho.sort(i,ke.xComparator);var r=this.verticalSlices(i,Math.trunc(Math.ceil(Math.sqrt(n))));return this.createParentBoundablesFromVerticalSlices(r,e)},nearestNeighbour:function(){if(1===arguments.length){if(R(arguments[0],Ve)){var t=arguments[0],e=new qe(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(e)}if(arguments[0]instanceof qe){var n=arguments[0];return this.nearestNeighbour(n,r.POSITIVE_INFINITY)}}else if(2===arguments.length){if(arguments[0]instanceof ke&&R(arguments[1],Ve)){var i=arguments[0],s=arguments[1],e=new qe(this.getRoot(),i.getRoot(),s);return this.nearestNeighbour(e)}if(arguments[0]instanceof qe&&"number"==typeof arguments[1]){var o=arguments[0],a=arguments[1],u=a,l=null,h=new De;for(h.add(o);!h.isEmpty()&&u>0;){var c=h.poll(),f=c.getDistance();if(f>=u)break;c.isLeaves()?(u=f,l=c):c.expandToQueue(h,u)}return[l.getBoundable(0).getItem(),l.getBoundable(1).getItem()]}}else if(3===arguments.length){var g=arguments[0],d=arguments[1],p=arguments[2],v=new Me(g,d),e=new qe(this.getRoot(),v,p);return this.nearestNeighbour(e)[0]}},interfaces_:function(){return[Fe,u]},getClass:function(){return ke}}),ke.centreX=function(t){return ke.avg(t.getMinX(),t.getMaxX())},ke.avg=function(t,e){return(t+e)/2},ke.centreY=function(t){return ke.avg(t.getMinY(),t.getMaxY())},h(Ye,Ge),e(Ye.prototype,{computeBounds:function(){for(var t=null,e=this.getChildBoundables().iterator();e.hasNext();){var n=e.next();null===t?t=new C(n.getBounds()):t.expandToInclude(n.getBounds())}return t},interfaces_:function(){return[]},getClass:function(){return Ye}}),ke.STRtreeNode=Ye,ke.serialVersionUID=0x39920f7d5f261e0,ke.xComparator={interfaces_:function(){return[a]},compare:function(t,e){return Be.compareDoubles(ke.centreX(t.getBounds()),ke.centreX(e.getBounds()))}},ke.yComparator={interfaces_:function(){return[a]},compare:function(t,e){return Be.compareDoubles(ke.centreY(t.getBounds()),ke.centreY(e.getBounds()))}},ke.intersectsOp={interfaces_:function(){return[IntersectsOp]},intersects:function(t,e){return t.intersects(e)}},ke.DEFAULT_NODE_CAPACITY=10,e(Ue.prototype,{interfaces_:function(){return[]},getClass:function(){return Ue}}),Ue.relativeSign=function(t,e){return t<e?-1:t>e?1:0},Ue.compare=function(t,e,n){if(e.equals2D(n))return 0;var i=Ue.relativeSign(e.x,n.x),r=Ue.relativeSign(e.y,n.y);switch(t){case 0:return Ue.compareValue(i,r);case 1:return Ue.compareValue(r,i);case 2:return Ue.compareValue(r,-i);case 3:return Ue.compareValue(-i,r);case 4:return Ue.compareValue(-i,-r);case 5:return Ue.compareValue(-r,-i);case 6:return Ue.compareValue(-r,i);case 7:return Ue.compareValue(i,-r)}return f.shouldNeverReachHere("invalid octant value"),0},Ue.compareValue=function(t,e){return t<0?-1:t>0?1:e<0?-1:e>0?1:0},e(Xe.prototype,{getCoordinate:function(){return this.coord},print:function(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex)},compareTo:function(t){var e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:Ue.compare(this.segmentOctant,this.coord,e.coord)},isEndPoint:function(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t},isInterior:function(){return this._isInterior},interfaces_:function(){return[s]},getClass:function(){return Xe}}),e(He.prototype,{getSplitCoordinates:function(){var t=new N;this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next();this.addEdgeCoordinates(n,i,t),n=i}return t.toCoordinateArray()},addCollapsedNodes:function(){var t=new I;this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(var e=t.iterator();e.hasNext();){var n=e.next().intValue();this.add(this.edge.getCoordinate(n),n)}},print:function(t){t.println("Intersections:");for(var e=this.iterator();e.hasNext();){var n=e.next();n.print(t)}},findCollapsesFromExistingVertices:function(t){for(var e=0;e<this.edge.size()-2;e++){var n=this.edge.getCoordinate(e),i=(this.edge.getCoordinate(e+1),this.edge.getCoordinate(e+2));n.equals2D(i)&&t.add(new b(e+1))}},addEdgeCoordinates:function(t,e,n){var i=e.segmentIndex-t.segmentIndex+2,r=this.edge.getCoordinate(e.segmentIndex),s=e.isInterior()||!e.coord.equals2D(r);s||i--;n.add(new g(t.coord),!1);for(var o=t.segmentIndex+1;o<=e.segmentIndex;o++)n.add(this.edge.getCoordinate(o));s&&n.add(new g(e.coord))},iterator:function(){return this.nodeMap.values().iterator()},addSplitEdges:function(t){this.addEndpoints(),this.addCollapsedNodes();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}},findCollapseIndex:function(t,e,n){if(!t.coord.equals2D(e.coord))return!1;var i=e.segmentIndex-t.segmentIndex;return e.isInterior()||i--,1===i&&(n[0]=t.segmentIndex+1,!0)},findCollapsesFromInsertedNodes:function(t){for(var e=new Array(1).fill(null),n=this.iterator(),i=n.next();n.hasNext();){var r=n.next(),s=this.findCollapseIndex(i,r,e);s&&t.add(new b(e[0])),i=r}},getEdge:function(){return this.edge},addEndpoints:function(){var t=this.edge.size()-1;this.add(this.edge.getCoordinate(0),0),this.add(this.edge.getCoordinate(t),t)},createSplitEdge:function(t,e){var n=e.segmentIndex-t.segmentIndex+2,i=this.edge.getCoordinate(e.segmentIndex),r=e.isInterior()||!e.coord.equals2D(i);r||n--;var s=new Array(n).fill(null),o=0;s[o++]=new g(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)s[o++]=this.edge.getCoordinate(a);return r&&(s[o]=new g(e.coord)),new Ke(s,this.edge.getData())},add:function(t,e){var n=new Xe(this.edge,t,e,this.edge.getSegmentOctant(e)),i=this.nodeMap.get(n);return null!==i?(f.isTrue(i.coord.equals2D(t),"Found equal nodes with different coordinates"),i):(this.nodeMap.put(n,n),n)},checkSplitEdgesCorrectness:function(t){var e=this.edge.getCoordinates(),n=t.get(0),i=n.getCoordinate(0);if(!i.equals2D(e[0]))throw new l("bad split edge start point at "+i);var r=t.get(t.size()-1),s=r.getCoordinates(),o=s[s.length-1];if(!o.equals2D(e[e.length-1]))throw new l("bad split edge end point at "+o)},interfaces_:function(){return[]},getClass:function(){return He}}),e(We.prototype,{next:function(){return null===this.currNode?(this.currNode=this.nextNode,this.currSegIndex=this.currNode.segmentIndex,this.readNextNode(),this.currNode):null===this.nextNode?null:this.nextNode.segmentIndex===this.currNode.segmentIndex?(this.currNode=this.nextNode,this.currSegIndex=this.currNode.segmentIndex,this.readNextNode(),this.currNode):(this.nextNode.segmentIndex>this.currNode.segmentIndex,null)},remove:function(){throw new UnsupportedOperationException(this.getClass().getName())},hasNext:function(){return null!==this.nextNode},readNextNode:function(){this.nodeIt.hasNext()?this.nextNode=this.nodeIt.next():this.nextNode=null},interfaces_:function(){return[p]},getClass:function(){return We}}),e(je.prototype,{addIntersection:function(t,e){},interfaces_:function(){return[be]},getClass:function(){return je}}),e(Ke.prototype,{getCoordinates:function(){return this.pts},size:function(){return this.pts.length},getCoordinate:function(t){return this.pts[t]},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getSegmentOctant:function(t){return t===this.pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))},setData:function(t){this.data=t},safeOctant:function(t,e){return t.equals2D(e)?0:Pe.octant(t,e)},getData:function(){return this.data},addIntersection:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.addIntersectionNode(t,e)}else if(4===arguments.length){var n=arguments[0],i=arguments[1],r=(arguments[2],arguments[3]),s=new g(n.getIntersection(r));this.addIntersection(s,i)}},toString:function(){return se.toLineString(new Gt(this.pts))},getNodeList:function(){return this.nodeList},addIntersectionNode:function(t,e){var n=e,i=n+1;if(i<this.pts.length){var r=this.pts[i];t.equals2D(r)&&(n=i)}var s=this.nodeList.add(t,n);return s},addIntersections:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)},interfaces_:function(){return[je]},getClass:function(){return Ke}}),Ke.getNodedSubstrings=function(){if(1===arguments.length){var t=arguments[0],e=new I;return Ke.getNodedSubstrings(t,e),e}if(2===arguments.length)for(var n=arguments[0],i=arguments[1],r=n.iterator();r.hasNext();){var s=r.next();s.getNodeList().addSplitEdges(i)}},e(Ze.prototype,{overlap:function(){if(2===arguments.length){arguments[0],arguments[1]}else if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];t.getLineSegment(e,this.overlapSeg1),
n.getLineSegment(i,this.overlapSeg2),this.overlap(this.overlapSeg1,this.overlapSeg2)}},interfaces_:function(){return[]},getClass:function(){return Ze}}),e(Qe.prototype,{getLineSegment:function(t,e){e.p0=this.pts[t],e.p1=this.pts[t+1]},computeSelect:function(t,e,n,i){var r=this.pts[e],s=this.pts[n];if(i.tempEnv1.init(r,s),n-e===1)return i.select(this,e),null;if(!t.intersects(i.tempEnv1))return null;var o=Math.trunc((e+n)/2);e<o&&this.computeSelect(t,e,o,i),o<n&&this.computeSelect(t,o,n,i)},getCoordinates:function(){for(var t=new Array(this.end-this.start+1).fill(null),e=0,n=this.start;n<=this.end;n++)t[e++]=this.pts[n];return t},computeOverlaps:function(t,e){this.computeOverlapsInternal(this.start,this.end,t,t.start,t.end,e)},setId:function(t){this.id=t},select:function(t,e){this.computeSelect(t,this.start,this.end,e)},getEnvelope:function(){if(null===this.env){var t=this.pts[this.start],e=this.pts[this.end];this.env=new C(t,e)}return this.env},getEndIndex:function(){return this.end},getStartIndex:function(){return this.start},getContext:function(){return this.context},getId:function(){return this.id},computeOverlapsInternal:function(t,e,n,i,r,s){var o=this.pts[t],a=this.pts[e],u=n.pts[i],l=n.pts[r];if(e-t===1&&r-i===1)return s.overlap(this,t,n,i),null;if(s.tempEnv1.init(o,a),s.tempEnv2.init(u,l),!s.tempEnv1.intersects(s.tempEnv2))return null;var h=Math.trunc((t+e)/2),c=Math.trunc((i+r)/2);t<h&&(i<c&&this.computeOverlapsInternal(t,h,n,i,c,s),c<r&&this.computeOverlapsInternal(t,h,n,c,r,s)),h<e&&(i<c&&this.computeOverlapsInternal(h,e,n,i,c,s),c<r&&this.computeOverlapsInternal(h,e,n,c,r,s))},interfaces_:function(){return[]},getClass:function(){return Qe}}),e(Je.prototype,{interfaces_:function(){return[]},getClass:function(){return Je}}),Je.isNorthern=function(t){return t===Je.NE||t===Je.NW},Je.isOpposite=function(t,e){if(t===e)return!1;var n=(t-e+4)%4;return 2===n},Je.commonHalfPlane=function(t,e){if(t===e)return t;var n=(t-e+4)%4;if(2===n)return-1;var i=t<e?t:e,r=t>e?t:e;return 0===i&&3===r?3:i},Je.isInHalfPlane=function(t,e){return e===Je.SE?t===Je.SE||t===Je.SW:t===e||t===e+1},Je.quadrant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new i("Cannot compute the quadrant for point ( "+t+", "+e+" )");return t>=0?e>=0?Je.NE:Je.SE:e>=0?Je.NW:Je.SW}if(arguments[0]instanceof g&&arguments[1]instanceof g){var n=arguments[0],r=arguments[1];if(r.x===n.x&&r.y===n.y)throw new i("Cannot compute the quadrant for two identical points "+n);return r.x>=n.x?r.y>=n.y?Je.NE:Je.SE:r.y>=n.y?Je.NW:Je.SW}},Je.NE=0,Je.NW=1,Je.SW=2,Je.SE=3,e($e.prototype,{interfaces_:function(){return[]},getClass:function(){return $e}}),$e.getChainStartIndices=function(t){var e=0,n=new I;n.add(new b(e));do{var i=$e.findChainEnd(t,e);n.add(new b(i)),e=i}while(e<t.length-1);var r=$e.toIntArray(n);return r},$e.findChainEnd=function(t,e){for(var n=e;n<t.length-1&&t[n].equals2D(t[n+1]);)n++;if(n>=t.length-1)return t.length-1;for(var i=Je.quadrant(t[n],t[n+1]),r=e+1;r<t.length;){if(!t[r-1].equals2D(t[r])){var s=Je.quadrant(t[r-1],t[r]);if(s!==i)break}r++}return r-1},$e.getChains=function(){if(1===arguments.length){var t=arguments[0];return $e.getChains(t,null)}if(2===arguments.length){for(var e=arguments[0],n=arguments[1],i=new I,r=$e.getChainStartIndices(e),s=0;s<r.length-1;s++){var o=new Qe(e,r[s],r[s+1],n);i.add(o)}return i}},$e.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e},e(tn.prototype,{computeNodes:function(t){},getNodedSubstrings:function(){},interfaces_:function(){return[]},getClass:function(){return tn}}),e(en.prototype,{setSegmentIntersector:function(t){this.segInt=t},interfaces_:function(){return[tn]},getClass:function(){return en}}),h(nn,en),e(nn.prototype,{getMonotoneChains:function(){return this.monoChains},getNodedSubstrings:function(){return Ke.getNodedSubstrings(this.nodedSegStrings)},getIndex:function(){return this.index},add:function(t){for(var e=$e.getChains(t.getCoordinates(),t),n=e.iterator();n.hasNext();){var i=n.next();i.setId(this.idCounter++),this.index.insert(i.getEnvelope(),i),this.monoChains.add(i)}},computeNodes:function(t){this.nodedSegStrings=t;for(var e=t.iterator();e.hasNext();)this.add(e.next());this.intersectChains()},intersectChains:function(){for(var t=new rn(this.segInt),e=this.monoChains.iterator();e.hasNext();)for(var n=e.next(),i=this.index.query(n.getEnvelope()),r=i.iterator();r.hasNext();){var s=r.next();if(s.getId()>n.getId()&&(n.computeOverlaps(s,t),this.nOverlaps++),this.segInt.isDone())return null}},interfaces_:function(){return[]},getClass:function(){return nn}}),h(rn,Ze),e(rn.prototype,{overlap:function(){if(4!==arguments.length)return Ze.prototype.overlap.apply(this,arguments);var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],r=t.getContext(),s=n.getContext();this.si.processIntersections(r,e,s,i)},interfaces_:function(){return[]},getClass:function(){return rn}}),nn.SegmentOverlapAction=rn,h(sn,l),e(sn.prototype,{getCoordinate:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return sn}}),sn.msgWithCoord=function(t,e){return null!==e?t+" [ "+e+" ]":t},e(on.prototype,{processIntersections:function(t,e,n,i){},isDone:function(){},interfaces_:function(){return[]},getClass:function(){return on}}),e(an.prototype,{getInteriorIntersection:function(){return this.interiorIntersection},setCheckEndSegmentsOnly:function(t){this.isCheckEndSegmentsOnly=t},getIntersectionSegments:function(){return this.intSegments},count:function(){return this.intersectionCount},getIntersections:function(){return this.intersections},setFindAllIntersections:function(t){this.findAllIntersections=t},setKeepIntersections:function(t){this.keepIntersections=t},processIntersections:function(t,e,n,i){if(!this.findAllIntersections&&this.hasIntersection())return null;if(t===n&&e===i)return null;if(this.isCheckEndSegmentsOnly){var r=this.isEndSegment(t,e)||this.isEndSegment(n,i);if(!r)return null}var s=t.getCoordinates()[e],o=t.getCoordinates()[e+1],a=n.getCoordinates()[i],u=n.getCoordinates()[i+1];this.li.computeIntersection(s,o,a,u),this.li.hasIntersection()&&this.li.isInteriorIntersection()&&(this.intSegments=new Array(4).fill(null),this.intSegments[0]=s,this.intSegments[1]=o,this.intSegments[2]=a,this.intSegments[3]=u,this.interiorIntersection=this.li.getIntersection(0),this.keepIntersections&&this.intersections.add(this.interiorIntersection),this.intersectionCount++)},isEndSegment:function(t,e){return 0===e||e>=t.size()-2},hasIntersection:function(){return null!==this.interiorIntersection},isDone:function(){return!this.findAllIntersections&&null!==this.interiorIntersection},interfaces_:function(){return[on]},getClass:function(){return an}}),an.createAllIntersectionsFinder=function(t){var e=new an(t);return e.setFindAllIntersections(!0),e},an.createAnyIntersectionFinder=function(t){return new an(t)},an.createIntersectionCounter=function(t){var e=new an(t);return e.setFindAllIntersections(!0),e.setKeepIntersections(!1),e},e(un.prototype,{execute:function(){return null!==this.segInt?null:void this.checkInteriorIntersections()},getIntersections:function(){return this.segInt.getIntersections()},isValid:function(){return this.execute(),this._isValid},setFindAllIntersections:function(t){this.findAllIntersections=t},checkInteriorIntersections:function(){this._isValid=!0,this.segInt=new an(this.li),this.segInt.setFindAllIntersections(this.findAllIntersections);var t=new nn;if(t.setSegmentIntersector(this.segInt),t.computeNodes(this.segStrings),this.segInt.hasIntersection())return this._isValid=!1,null},checkValid:function(){if(this.execute(),!this._isValid)throw new sn(this.getErrorMessage(),this.segInt.getInteriorIntersection())},getErrorMessage:function(){if(this._isValid)return"no intersections found";var t=this.segInt.getIntersectionSegments();return"found non-noded intersection between "+se.toLineString(t[0],t[1])+" and "+se.toLineString(t[2],t[3])},interfaces_:function(){return[]},getClass:function(){return un}}),un.computeIntersections=function(t){var e=new un(t);return e.setFindAllIntersections(!0),e.isValid(),e.getIntersections()},e(ln.prototype,{checkValid:function(){this.nv.checkValid()},interfaces_:function(){return[]},getClass:function(){return ln}}),ln.toSegmentStrings=function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();e.add(new Oe(i.getCoordinates(),i))}return e},ln.checkValid=function(t){var e=new ln(t);e.checkValid()},e(hn.prototype,{map:function(t){for(var e=new I,n=0;n<t.getNumGeometries();n++){var i=this.mapOp.map(t.getGeometryN(n));i.isEmpty()||e.add(i)}return t.getFactory().createGeometryCollection(ie.toGeometryArray(e))},interfaces_:function(){return[]},getClass:function(){return hn}}),hn.map=function(t,e){var n=new hn(e);return n.map(t)},e(cn.prototype,{interfaces_:function(){return[]},getClass:function(){return cn}}),cn.opposite=function(t){return t===cn.LEFT?cn.RIGHT:t===cn.RIGHT?cn.LEFT:t},cn.ON=0,cn.LEFT=1,cn.RIGHT=2,e(fn.prototype,{setAllLocations:function(t){for(var e=0;e<this.location.length;e++)this.location[e]=t},isNull:function(){for(var t=0;t<this.location.length;t++)if(this.location[t]!==L.NONE)return!1;return!0},setAllLocationsIfNull:function(t){for(var e=0;e<this.location.length;e++)this.location[e]===L.NONE&&(this.location[e]=t)},isLine:function(){return 1===this.location.length},merge:function(t){if(t.location.length>this.location.length){var e=new Array(3).fill(null);e[cn.ON]=this.location[cn.ON],e[cn.LEFT]=L.NONE,e[cn.RIGHT]=L.NONE,this.location=e}for(var n=0;n<this.location.length;n++)this.location[n]===L.NONE&&n<t.location.length&&(this.location[n]=t.location[n])},getLocations:function(){return this.location},flip:function(){if(this.location.length<=1)return null;var t=this.location[cn.LEFT];this.location[cn.LEFT]=this.location[cn.RIGHT],this.location[cn.RIGHT]=t},toString:function(){var t=new P;return this.location.length>1&&t.append(L.toLocationSymbol(this.location[cn.LEFT])),t.append(L.toLocationSymbol(this.location[cn.ON])),this.location.length>1&&t.append(L.toLocationSymbol(this.location[cn.RIGHT])),t.toString()},setLocations:function(t,e,n){this.location[cn.ON]=t,this.location[cn.LEFT]=e,this.location[cn.RIGHT]=n},get:function(t){return t<this.location.length?this.location[t]:L.NONE},isArea:function(){return this.location.length>1},isAnyNull:function(){for(var t=0;t<this.location.length;t++)if(this.location[t]===L.NONE)return!0;return!1},setLocation:function(){if(1===arguments.length){var t=arguments[0];this.setLocation(cn.ON,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.location[e]=n}},init:function(t){this.location=new Array(t).fill(null),this.setAllLocations(L.NONE)},isEqualOnSide:function(t,e){return this.location[e]===t.location[e]},allPositionsEqual:function(t){for(var e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0},interfaces_:function(){return[]},getClass:function(){return fn}}),e(gn.prototype,{getGeometryCount:function(){var t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t},setAllLocations:function(t,e){this.elt[t].setAllLocations(e)},isNull:function(t){return this.elt[t].isNull()},setAllLocationsIfNull:function(){if(1===arguments.length){var t=arguments[0];this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.elt[e].setAllLocationsIfNull(n)}},isLine:function(t){return this.elt[t].isLine()},merge:function(t){for(var e=0;e<2;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new fn(t.elt[e]):this.elt[e].merge(t.elt[e])},flip:function(){this.elt[0].flip(),this.elt[1].flip()},getLocation:function(){if(1===arguments.length){var t=arguments[0];return this.elt[t].get(cn.ON)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return this.elt[e].get(n)}},toString:function(){var t=new P;return null!==this.elt[0]&&(t.append("A:"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(" B:"),t.append(this.elt[1].toString())),t.toString()},isArea:function(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){var t=arguments[0];return this.elt[t].isArea()}},isAnyNull:function(t){return this.elt[t].isAnyNull()},setLocation:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.elt[t].setLocation(cn.ON,e)}else if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];this.elt[n].setLocation(i,r)}},isEqualOnSide:function(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)},allPositionsEqual:function(t,e){return this.elt[t].allPositionsEqual(e)},toLine:function(t){this.elt[t].isArea()&&(this.elt[t]=new fn(this.elt[t].location[0]))},interfaces_:function(){return[]},getClass:function(){return gn}}),gn.toLineLabel=function(t){for(var e=new gn(L.NONE),n=0;n<2;n++)e.setLocation(n,t.getLocation(n));return e},e(dn.prototype,{computeRing:function(){if(null!==this.ring)return null;for(var t=new Array(this.pts.size()).fill(null),e=0;e<this.pts.size();e++)t[e]=this.pts.get(e);this.ring=this.geometryFactory.createLinearRing(t),this._isHole=he.isCCW(this.ring.getCoordinates())},isIsolated:function(){return 1===this.label.getGeometryCount()},computePoints:function(t){this.startDe=t;var e=t,n=!0;do{if(null===e)throw new sn("Found null DirectedEdge");if(e.getEdgeRing()===this)throw new sn("Directed Edge visited twice during ring-building at "+e.getCoordinate());this.edges.add(e);var i=e.getLabel();f.isTrue(i.isArea()),this.mergeLabel(i),this.addPoints(e.getEdge(),e.isForward(),n),n=!1,this.setEdgeRing(e,this),e=this.getNext(e)}while(e!==this.startDe)},getLinearRing:function(){return this.ring},getCoordinate:function(t){return this.pts.get(t)},computeMaxNodeDegree:function(){this.maxNodeDegree=0;var t=this.startDe;do{var e=t.getNode(),n=e.getEdges().getOutgoingDegree(this);n>this.maxNodeDegree&&(this.maxNodeDegree=n),t=this.getNext(t)}while(t!==this.startDe);this.maxNodeDegree*=2},addPoints:function(t,e,n){var i=t.getCoordinates();if(e){var r=1;n&&(r=0);for(var s=r;s<i.length;s++)this.pts.add(i[s])}else{var r=i.length-2;n&&(r=i.length-1);for(var s=r;s>=0;s--)this.pts.add(i[s])}},isHole:function(){return this._isHole},setInResult:function(){var t=this.startDe;do t.getEdge().setInResult(!0),t=t.getNext();while(t!==this.startDe)},containsPoint:function(t){var e=this.getLinearRing(),n=e.getEnvelopeInternal();if(!n.contains(t))return!1;if(!he.isPointInRing(t,e.getCoordinates()))return!1;for(var i=this.holes.iterator();i.hasNext();){var r=i.next();if(r.containsPoint(t))return!1}return!0},addHole:function(t){this.holes.add(t)},isShell:function(){return null===this.shell},getLabel:function(){return this.label},getEdges:function(){return this.edges},getMaxNodeDegree:function(){return this.maxNodeDegree<0&&this.computeMaxNodeDegree(),this.maxNodeDegree},getShell:function(){return this.shell},mergeLabel:function(){if(1===arguments.length){var t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=e.getLocation(n,cn.RIGHT);if(i===L.NONE)return null;if(this.label.getLocation(n)===L.NONE)return this.label.setLocation(n,i),null}},setShell:function(t){this.shell=t,null!==t&&t.addHole(this)},toPolygon:function(t){for(var e=new Array(this.holes.size()).fill(null),n=0;n<this.holes.size();n++)e[n]=this.holes.get(n).getLinearRing();var i=t.createPolygon(this.getLinearRing(),e);return i},interfaces_:function(){return[]},getClass:function(){return dn}}),h(pn,dn),e(pn.prototype,{setEdgeRing:function(t,e){t.setMinEdgeRing(e)},getNext:function(t){return t.getNextMin()},interfaces_:function(){return[]},getClass:function(){return pn}}),h(vn,dn),e(vn.prototype,{buildMinimalRings:function(){var t=new I,e=this.startDe;do{if(null===e.getMinEdgeRing()){var n=new pn(e,this.geometryFactory);t.add(n)}e=e.getNext()}while(e!==this.startDe);return t},setEdgeRing:function(t,e){t.setEdgeRing(e)},linkDirectedEdgesForMinimalEdgeRings:function(){var t=this.startDe;do{var e=t.getNode();e.getEdges().linkMinimalDirectedEdges(this),t=t.getNext()}while(t!==this.startDe)},getNext:function(t){return t.getNext()},interfaces_:function(){return[]},getClass:function(){return vn}}),e(mn.prototype,{setVisited:function(t){this._isVisited=t},setInResult:function(t){this._isInResult=t},isCovered:function(){return this._isCovered},isCoveredSet:function(){return this._isCoveredSet},setLabel:function(t){this.label=t},getLabel:function(){return this.label},setCovered:function(t){this._isCovered=t,this._isCoveredSet=!0},updateIM:function(t){f.isTrue(this.label.getGeometryCount()>=2,"found partial label"),this.computeIM(t)},isInResult:function(){return this._isInResult},isVisited:function(){return this._isVisited},interfaces_:function(){return[]},getClass:function(){return mn}}),h(yn,mn),e(yn.prototype,{isIncidentEdgeInResult:function(){for(var t=this.getEdges().getEdges().iterator();t.hasNext();){var e=t.next();if(e.getEdge().isInResult())return!0}return!1},isIsolated:function(){return 1===this.label.getGeometryCount()},getCoordinate:function(){return this.coord},print:function(t){t.println("node "+this.coord+" lbl: "+this.label)},computeIM:function(t){},computeMergedLocation:function(t,e){var n=L.NONE;if(n=this.label.getLocation(e),!t.isNull(e)){var i=t.getLocation(e);n!==L.BOUNDARY&&(n=i)}return n},setLabel:function(){if(2!==arguments.length)return mn.prototype.setLabel.apply(this,arguments);var t=arguments[0],e=arguments[1];null===this.label?this.label=new gn(t,e):this.label.setLocation(t,e)},getEdges:function(){return this.edges},mergeLabel:function(){if(arguments[0]instanceof yn){var t=arguments[0];this.mergeLabel(t.label)}else if(arguments[0]instanceof gn)for(var e=arguments[0],n=0;n<2;n++){var i=this.computeMergedLocation(e,n),r=this.label.getLocation(n);r===L.NONE&&this.label.setLocation(n,i)}},add:function(t){this.edges.insert(t),t.setNode(this)},setLabelBoundary:function(t){if(null===this.label)return null;var e=L.NONE;null!==this.label&&(e=this.label.getLocation(t));var n=null;switch(e){case L.BOUNDARY:n=L.INTERIOR;break;case L.INTERIOR:n=L.BOUNDARY;break;default:n=L.BOUNDARY}this.label.setLocation(t,n)},interfaces_:function(){return[]},getClass:function(){return yn}}),e(xn.prototype,{find:function(t){return this.nodeMap.get(t)},addNode:function(){if(arguments[0]instanceof g){var t=arguments[0],e=this.nodeMap.get(t);return null===e&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof yn){var n=arguments[0],e=this.nodeMap.get(n.getCoordinate());return null===e?(this.nodeMap.put(n.getCoordinate(),n),n):(e.mergeLabel(n),e)}},print:function(t){for(var e=this.iterator();e.hasNext();){var n=e.next();n.print(t)}},iterator:function(){return this.nodeMap.values().iterator()},values:function(){return this.nodeMap.values()},getBoundaryNodes:function(t){for(var e=new I,n=this.iterator();n.hasNext();){var i=n.next();i.getLabel().getLocation(t)===L.BOUNDARY&&e.add(i)}return e},add:function(t){var e=t.getCoordinate(),n=this.addNode(e);n.add(t)},interfaces_:function(){return[]},getClass:function(){return xn}}),e(En.prototype,{compareDirection:function(t){return this.dx===t.dx&&this.dy===t.dy?0:this.quadrant>t.quadrant?1:this.quadrant<t.quadrant?-1:he.computeOrientation(t.p0,t.p1,this.p1)},getDy:function(){return this.dy},getCoordinate:function(){return this.p0},setNode:function(t){this.node=t},print:function(t){var e=Math.atan2(this.dy,this.dx),n=this.getClass().getName(),i=n.lastIndexOf("."),r=n.substring(i+1);t.print("  "+r+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+e+"   "+this.label)},compareTo:function(t){var e=t;return this.compareDirection(e)},getDirectedCoordinate:function(){return this.p1},getDx:function(){return this.dx},getLabel:function(){return this.label},getEdge:function(){return this.edge},getQuadrant:function(){return this.quadrant},getNode:function(){return this.node},toString:function(){var t=Math.atan2(this.dy,this.dx),e=this.getClass().getName(),n=e.lastIndexOf("."),i=e.substring(n+1);return"  "+i+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+t+"   "+this.label},computeLabel:function(t){},init:function(t,e){this.p0=t,this.p1=e,this.dx=e.x-t.x,this.dy=e.y-t.y,this.quadrant=Je.quadrant(this.dx,this.dy),f.isTrue(!(0===this.dx&&0===this.dy),"EdgeEnd with identical endpoints found")},interfaces_:function(){return[s]},getClass:function(){return En}}),h(In,En),e(In.prototype,{getNextMin:function(){return this.nextMin},getDepth:function(t){return this.depth[t]},setVisited:function(t){this._isVisited=t},computeDirectedLabel:function(){this.label=new gn(this.edge.getLabel()),this._isForward||this.label.flip()},getNext:function(){return this.next},setDepth:function(t,e){if(this.depth[t]!==-999&&this.depth[t]!==e)throw new sn("assigned depths do not match",this.getCoordinate());this.depth[t]=e},isInteriorAreaEdge:function t(){for(var t=!0,e=0;e<2;e++)this.label.isArea(e)&&this.label.getLocation(e,cn.LEFT)===L.INTERIOR&&this.label.getLocation(e,cn.RIGHT)===L.INTERIOR||(t=!1);return t},setNextMin:function(t){this.nextMin=t},print:function(t){En.prototype.print.call(this,t),t.print(" "+this.depth[cn.LEFT]+"/"+this.depth[cn.RIGHT]),t.print(" ("+this.getDepthDelta()+")"),this._isInResult&&t.print(" inResult")},setMinEdgeRing:function(t){this.minEdgeRing=t},isLineEdge:function(){var t=this.label.isLine(0)||this.label.isLine(1),e=!this.label.isArea(0)||this.label.allPositionsEqual(0,L.EXTERIOR),n=!this.label.isArea(1)||this.label.allPositionsEqual(1,L.EXTERIOR);return t&&e&&n},setEdgeRing:function(t){this.edgeRing=t},getMinEdgeRing:function(){return this.minEdgeRing},getDepthDelta:function(){var t=this.edge.getDepthDelta();return this._isForward||(t=-t),t},setInResult:function(t){this._isInResult=t},getSym:function(){return this.sym},isForward:function(){return this._isForward},getEdge:function(){return this.edge},printEdge:function(t){this.print(t),t.print(" "),this._isForward?this.edge.print(t):this.edge.printReverse(t)},setSym:function(t){this.sym=t},setVisitedEdge:function(t){this.setVisited(t),this.sym.setVisited(t)},setEdgeDepths:function(t,e){var n=this.getEdge().getDepthDelta();this._isForward||(n=-n);var i=1;t===cn.LEFT&&(i=-1);var r=cn.opposite(t),s=n*i,o=e+s;this.setDepth(t,e),this.setDepth(r,o)},getEdgeRing:function(){return this.edgeRing},isInResult:function(){return this._isInResult},setNext:function(t){this.next=t},isVisited:function(){return this._isVisited},interfaces_:function(){return[]},getClass:function(){return In}}),In.depthFactor=function(t,e){return t===L.EXTERIOR&&e===L.INTERIOR?1:t===L.INTERIOR&&e===L.EXTERIOR?-1:0},e(Nn.prototype,{createNode:function(t){return new yn(t,null)},interfaces_:function(){return[]},getClass:function(){return Nn}}),e(Cn.prototype,{printEdges:function(t){t.println("Edges:");for(var e=0;e<this.edges.size();e++){t.println("edge "+e+":");var n=this.edges.get(e);n.print(t),n.eiList.print(t)}},find:function(t){return this.nodes.find(t)},addNode:function(){if(arguments[0]instanceof yn){var t=arguments[0];return this.nodes.addNode(t)}if(arguments[0]instanceof g){var e=arguments[0];return this.nodes.addNode(e)}},getNodeIterator:function(){return this.nodes.iterator()},linkResultDirectedEdges:function(){for(var t=this.nodes.iterator();t.hasNext();){var e=t.next();e.getEdges().linkResultDirectedEdges()}},debugPrintln:function(t){A.out.println(t)},isBoundaryNode:function(t,e){var n=this.nodes.find(e);if(null===n)return!1;var i=n.getLabel();return null!==i&&i.getLocation(t)===L.BOUNDARY},linkAllDirectedEdges:function(){for(var t=this.nodes.iterator();t.hasNext();){var e=t.next();e.getEdges().linkAllDirectedEdges()}},matchInSameDirection:function(t,e,n,i){return!!t.equals(n)&&(he.computeOrientation(t,e,i)===he.COLLINEAR&&Je.quadrant(t,e)===Je.quadrant(n,i))},getEdgeEnds:function(){return this.edgeEndList},debugPrint:function(t){A.out.print(t)},getEdgeIterator:function(){return this.edges.iterator()},findEdgeInSameDirection:function(t,e){for(var n=0;n<this.edges.size();n++){var i=this.edges.get(n),r=i.getCoordinates();if(this.matchInSameDirection(t,e,r[0],r[1]))return i;if(this.matchInSameDirection(t,e,r[r.length-1],r[r.length-2]))return i}return null},insertEdge:function(t){this.edges.add(t)},findEdgeEnd:function(t){for(var e=this.getEdgeEnds().iterator();e.hasNext();){var n=e.next();if(n.getEdge()===t)return n}return null},addEdges:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.edges.add(n);var i=new In(n,(!0)),r=new In(n,(!1));i.setSym(r),r.setSym(i),this.add(i),this.add(r)}},add:function(t){this.nodes.add(t),this.edgeEndList.add(t)},getNodes:function(){return this.nodes.values()},findEdge:function(t,e){for(var n=0;n<this.edges.size();n++){var i=this.edges.get(n),r=i.getCoordinates();if(t.equals(r[0])&&e.equals(r[1]))return i}return null},interfaces_:function(){return[]},getClass:function(){return Cn}}),Cn.linkResultDirectedEdges=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();n.getEdges().linkResultDirectedEdges()}},e(Sn.prototype,{sortShellsAndHoles:function(t,e,n){for(var i=t.iterator();i.hasNext();){var r=i.next();r.isHole()?n.add(r):e.add(r)}},computePolygons:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next(),r=i.toPolygon(this.geometryFactory);e.add(r)}return e},placeFreeHoles:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();if(null===i.getShell()){var r=this.findEdgeRingContaining(i,t);if(null===r)throw new sn("unable to assign hole to a shell",i.getCoordinate(0));i.setShell(r)}}},buildMinimalEdgeRings:function(t,e,n){for(var i=new I,r=t.iterator();r.hasNext();){var s=r.next();if(s.getMaxNodeDegree()>2){s.linkDirectedEdgesForMinimalEdgeRings();var o=s.buildMinimalRings(),a=this.findShell(o);null!==a?(this.placePolygonHoles(a,o),e.add(a)):n.addAll(o)}else i.add(s)}return i},containsPoint:function(t){for(var e=this.shellList.iterator();e.hasNext();){var n=e.next();if(n.containsPoint(t))return!0}return!1},buildMaximalEdgeRings:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();if(i.isInResult()&&i.getLabel().isArea()&&null===i.getEdgeRing()){var r=new vn(i,this.geometryFactory);e.add(r),r.setInResult()}}return e},placePolygonHoles:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();i.isHole()&&i.setShell(t)}},getPolygons:function(){var t=this.computePolygons(this.shellList);return t},findEdgeRingContaining:function(t,e){for(var n=t.getLinearRing(),i=n.getEnvelopeInternal(),r=n.getCoordinateN(0),s=null,o=null,a=e.iterator();a.hasNext();){var u=a.next(),l=u.getLinearRing(),h=l.getEnvelopeInternal();null!==s&&(o=s.getLinearRing().getEnvelopeInternal());var c=!1;h.contains(i)&&he.isPointInRing(r,l.getCoordinates())&&(c=!0),c&&(null===s||o.contains(h))&&(s=u)}return s},findShell:function(t){for(var e=0,n=null,i=t.iterator();i.hasNext();){var r=i.next();r.isHole()||(n=r,e++)}return f.isTrue(e<=1,"found two shells in MinimalEdgeRing list"),n},add:function(){if(1===arguments.length){var t=arguments[0];this.add(t.getEdgeEnds(),t.getNodes())}else if(2===arguments.length){var e=arguments[0],n=arguments[1];Cn.linkResultDirectedEdges(n);var i=this.buildMaximalEdgeRings(e),r=new I,s=this.buildMinimalEdgeRings(i,this.shellList,r);this.sortShellsAndHoles(s,this.shellList,r),this.placeFreeHoles(this.shellList,r)}},interfaces_:function(){return[]},getClass:function(){return Sn}}),e(wn.prototype,{collectLines:function(t){for(var e=this.op.getGraph().getEdgeEnds().iterator();e.hasNext();){var n=e.next();this.collectLineEdge(n,t,this.lineEdgesList),this.collectBoundaryTouchEdge(n,t,this.lineEdgesList)}},labelIsolatedLine:function(t,e){var n=this.ptLocator.locate(t.getCoordinate(),this.op.getArgGeometry(e));t.getLabel().setLocation(e,n)},build:function(t){return this.findCoveredLineEdges(),this.collectLines(t),this.buildLines(t),this.resultLineList},collectLineEdge:function(t,e,n){var i=t.getLabel(),r=t.getEdge();t.isLineEdge()&&(t.isVisited()||!ii.isResultOfOp(i,e)||r.isCovered()||(n.add(r),t.setVisitedEdge(!0)))},findCoveredLineEdges:function(){for(var t=this.op.getGraph().getNodes().iterator();t.hasNext();){var e=t.next();e.getEdges().findCoveredLineEdges()}for(var n=this.op.getGraph().getEdgeEnds().iterator();n.hasNext();){var i=n.next(),r=i.getEdge();if(i.isLineEdge()&&!r.isCoveredSet()){var s=this.op.isCoveredByA(i.getCoordinate());r.setCovered(s)}}},labelIsolatedLines:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=n.getLabel();n.isIsolated()&&(i.isNull(0)?this.labelIsolatedLine(n,0):this.labelIsolatedLine(n,1))}},buildLines:function(t){for(var e=this.lineEdgesList.iterator();e.hasNext();){var n=e.next(),i=(n.getLabel(),this.geometryFactory.createLineString(n.getCoordinates()));this.resultLineList.add(i),n.setInResult(!0)}},collectBoundaryTouchEdge:function(t,e,n){var i=t.getLabel();return t.isLineEdge()?null:t.isVisited()?null:t.isInteriorAreaEdge()?null:t.getEdge().isInResult()?null:(f.isTrue(!(t.isInResult()||t.getSym().isInResult())||!t.getEdge().isInResult()),void(ii.isResultOfOp(i,e)&&e===ii.INTERSECTION&&(n.add(t.getEdge()),t.setVisitedEdge(!0))))},interfaces_:function(){return[]},getClass:function(){return wn}}),e(Ln.prototype,{filterCoveredNodeToPoint:function(t){var e=t.getCoordinate();if(!this.op.isCoveredByLA(e)){var n=this.geometryFactory.createPoint(e);this.resultPointList.add(n)}},extractNonCoveredResultNodes:function(t){for(var e=this.op.getGraph().getNodes().iterator();e.hasNext();){var n=e.next();if(!(n.isInResult()||n.isIncidentEdgeInResult()||0!==n.getEdges().getDegree()&&t!==ii.INTERSECTION)){var i=n.getLabel();ii.isResultOfOp(i,t)&&this.filterCoveredNodeToPoint(n)}}},build:function(t){return this.extractNonCoveredResultNodes(t),this.resultPointList},interfaces_:function(){return[]},getClass:function(){return Ln}}),e(Rn.prototype,{locate:function(t){},interfaces_:function(){return[]},getClass:function(){return Rn}}),e(Tn.prototype,{locate:function(t){return Tn.locate(t,this.geom)},interfaces_:function(){return[Rn]},getClass:function(){return Tn}}),Tn.isPointInRing=function(t,e){return!!e.getEnvelopeInternal().intersects(t)&&he.isPointInRing(t,e.getCoordinates())},Tn.containsPointInPolygon=function(t,e){if(e.isEmpty())return!1;var n=e.getExteriorRing();if(!Tn.isPointInRing(t,n))return!1;for(var i=0;i<e.getNumInteriorRing();i++){var r=e.getInteriorRingN(i);if(Tn.isPointInRing(t,r))return!1}return!0},Tn.containsPoint=function(t,e){if(e instanceof Tt)return Tn.containsPointInPolygon(t,e);if(e instanceof ft)for(var n=new Re(e);n.hasNext();){var i=n.next();if(i!==e&&Tn.containsPoint(t,i))return!0}return!1},Tn.locate=function(t,e){return e.isEmpty()?L.EXTERIOR:Tn.containsPoint(t,e)?L.INTERIOR:L.EXTERIOR},e(Pn.prototype,{getNextCW:function(t){this.getEdges();var e=this.edgeList.indexOf(t),n=e-1;return 0===e&&(n=this.edgeList.size()-1),this.edgeList.get(n)},propagateSideLabels:function(t){for(var e=L.NONE,n=this.iterator();n.hasNext();){var i=n.next(),r=i.getLabel();r.isArea(t)&&r.getLocation(t,cn.LEFT)!==L.NONE&&(e=r.getLocation(t,cn.LEFT))}if(e===L.NONE)return null;for(var s=e,n=this.iterator();n.hasNext();){var i=n.next(),r=i.getLabel();if(r.getLocation(t,cn.ON)===L.NONE&&r.setLocation(t,cn.ON,s),r.isArea(t)){var o=r.getLocation(t,cn.LEFT),a=r.getLocation(t,cn.RIGHT);if(a!==L.NONE){if(a!==s)throw new sn("side location conflict",i.getCoordinate());o===L.NONE&&f.shouldNeverReachHere("found single null side (at "+i.getCoordinate()+")"),s=o}else f.isTrue(r.getLocation(t,cn.LEFT)===L.NONE,"found single null side"),r.setLocation(t,cn.RIGHT,s),r.setLocation(t,cn.LEFT,s)}}},getCoordinate:function(){var t=this.iterator();if(!t.hasNext())return null;var e=t.next();return e.getCoordinate()},print:function(t){A.out.println("EdgeEndStar:   "+this.getCoordinate());for(var e=this.iterator();e.hasNext();){var n=e.next();
n.print(t)}},isAreaLabelsConsistent:function(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)},checkAreaLabelsConsistent:function(t){var e=this.getEdges();if(e.size()<=0)return!0;var n=e.size()-1,i=e.get(n).getLabel(),r=i.getLocation(t,cn.LEFT);f.isTrue(r!==L.NONE,"Found unlabelled area edge");for(var s=r,o=this.iterator();o.hasNext();){var a=o.next(),u=a.getLabel();f.isTrue(u.isArea(t),"Found non-area edge");var l=u.getLocation(t,cn.LEFT),h=u.getLocation(t,cn.RIGHT);if(l===h)return!1;if(h!==s)return!1;s=l}return!0},findIndex:function(t){this.iterator();for(var e=0;e<this.edgeList.size();e++){var n=this.edgeList.get(e);if(n===t)return e}return-1},iterator:function(){return this.getEdges().iterator()},getEdges:function(){return null===this.edgeList&&(this.edgeList=new I(this.edgeMap.values())),this.edgeList},getLocation:function(t,e,n){return this.ptInAreaLocation[t]===L.NONE&&(this.ptInAreaLocation[t]=Tn.locate(e,n[t].getGeometry())),this.ptInAreaLocation[t]},toString:function(){var t=new P;t.append("EdgeEndStar:   "+this.getCoordinate()),t.append("\n");for(var e=this.iterator();e.hasNext();){var n=e.next();t.append(n),t.append("\n")}return t.toString()},computeEdgeEndLabels:function(t){for(var e=this.iterator();e.hasNext();){var n=e.next();n.computeLabel(t)}},computeLabelling:function(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var e=[!1,!1],n=this.iterator();n.hasNext();)for(var i=n.next(),r=i.getLabel(),s=0;s<2;s++)r.isLine(s)&&r.getLocation(s)===L.BOUNDARY&&(e[s]=!0);for(var n=this.iterator();n.hasNext();)for(var i=n.next(),r=i.getLabel(),s=0;s<2;s++)if(r.isAnyNull(s)){var o=L.NONE;if(e[s])o=L.EXTERIOR;else{var a=i.getCoordinate();o=this.getLocation(s,a,t)}r.setAllLocationsIfNull(s,o)}},getDegree:function(){return this.edgeMap.size()},insertEdgeEnd:function(t,e){this.edgeMap.put(t,e),this.edgeList=null},interfaces_:function(){return[]},getClass:function(){return Pn}}),h(bn,Pn),e(bn.prototype,{linkResultDirectedEdges:function(){this.getResultAreaEdges();for(var t=null,e=null,n=this.SCANNING_FOR_INCOMING,i=0;i<this.resultAreaEdgeList.size();i++){var r=this.resultAreaEdgeList.get(i),s=r.getSym();if(r.getLabel().isArea())switch(null===t&&r.isInResult()&&(t=r),n){case this.SCANNING_FOR_INCOMING:if(!s.isInResult())continue;e=s,n=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(!r.isInResult())continue;e.setNext(r),n=this.SCANNING_FOR_INCOMING}}if(n===this.LINKING_TO_OUTGOING){if(null===t)throw new sn("no outgoing dirEdge found",this.getCoordinate());f.isTrue(t.isInResult(),"unable to link last incoming dirEdge"),e.setNext(t)}},insert:function(t){var e=t;this.insertEdgeEnd(e,e)},getRightmostEdge:function(){var t=this.getEdges(),e=t.size();if(e<1)return null;var n=t.get(0);if(1===e)return n;var i=t.get(e-1),r=n.getQuadrant(),s=i.getQuadrant();if(Je.isNorthern(r)&&Je.isNorthern(s))return n;if(!Je.isNorthern(r)&&!Je.isNorthern(s))return i;return 0!==n.getDy()?n:0!==i.getDy()?i:(f.shouldNeverReachHere("found two horizontal edges incident on node"),null)},print:function(t){A.out.println("DirectedEdgeStar: "+this.getCoordinate());for(var e=this.iterator();e.hasNext();){var n=e.next();t.print("out "),n.print(t),t.println(),t.print("in "),n.getSym().print(t),t.println()}},getResultAreaEdges:function(){if(null!==this.resultAreaEdgeList)return this.resultAreaEdgeList;this.resultAreaEdgeList=new I;for(var t=this.iterator();t.hasNext();){var e=t.next();(e.isInResult()||e.getSym().isInResult())&&this.resultAreaEdgeList.add(e)}return this.resultAreaEdgeList},updateLabelling:function(t){for(var e=this.iterator();e.hasNext();){var n=e.next(),i=n.getLabel();i.setAllLocationsIfNull(0,t.getLocation(0)),i.setAllLocationsIfNull(1,t.getLocation(1))}},linkAllDirectedEdges:function(){this.getEdges();for(var t=null,e=null,n=this.edgeList.size()-1;n>=0;n--){var i=this.edgeList.get(n),r=i.getSym();null===e&&(e=r),null!==t&&r.setNext(t),t=i}e.setNext(t)},computeDepths:function(){if(1===arguments.length){var t=arguments[0],e=this.findIndex(t),n=(t.getLabel(),t.getDepth(cn.LEFT)),i=t.getDepth(cn.RIGHT),r=this.computeDepths(e+1,this.edgeList.size(),n),s=this.computeDepths(0,e,r);if(s!==i)throw new sn("depth mismatch at "+t.getCoordinate())}else if(3===arguments.length){for(var o=arguments[0],a=arguments[1],u=arguments[2],l=u,h=o;h<a;h++){var c=this.edgeList.get(h);c.getLabel();c.setEdgeDepths(cn.RIGHT,l),l=c.getDepth(cn.LEFT)}return l}},mergeSymLabels:function(){for(var t=this.iterator();t.hasNext();){var e=t.next(),n=e.getLabel();n.merge(e.getSym().getLabel())}},linkMinimalDirectedEdges:function(t){for(var e=null,n=null,i=this.SCANNING_FOR_INCOMING,r=this.resultAreaEdgeList.size()-1;r>=0;r--){var s=this.resultAreaEdgeList.get(r),o=s.getSym();switch(null===e&&s.getEdgeRing()===t&&(e=s),i){case this.SCANNING_FOR_INCOMING:if(o.getEdgeRing()!==t)continue;n=o,i=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(s.getEdgeRing()!==t)continue;n.setNextMin(s),i=this.SCANNING_FOR_INCOMING}}i===this.LINKING_TO_OUTGOING&&(f.isTrue(null!==e,"found null for first outgoing dirEdge"),f.isTrue(e.getEdgeRing()===t,"unable to link last incoming dirEdge"),n.setNextMin(e))},getOutgoingDegree:function(){if(0===arguments.length){for(var t=0,e=this.iterator();e.hasNext();){var n=e.next();n.isInResult()&&t++}return t}if(1===arguments.length){for(var i=arguments[0],t=0,e=this.iterator();e.hasNext();){var n=e.next();n.getEdgeRing()===i&&t++}return t}},getLabel:function(){return this.label},findCoveredLineEdges:function(){for(var t=L.NONE,e=this.iterator();e.hasNext();){var n=e.next(),i=n.getSym();if(!n.isLineEdge()){if(n.isInResult()){t=L.INTERIOR;break}if(i.isInResult()){t=L.EXTERIOR;break}}}if(t===L.NONE)return null;for(var r=t,e=this.iterator();e.hasNext();){var n=e.next(),i=n.getSym();n.isLineEdge()?n.getEdge().setCovered(r===L.INTERIOR):(n.isInResult()&&(r=L.EXTERIOR),i.isInResult()&&(r=L.INTERIOR))}},computeLabelling:function(t){Pn.prototype.computeLabelling.call(this,t),this.label=new gn(L.NONE);for(var e=this.iterator();e.hasNext();)for(var n=e.next(),i=n.getEdge(),r=i.getLabel(),s=0;s<2;s++){var o=r.getLocation(s);o!==L.INTERIOR&&o!==L.BOUNDARY||this.label.setLocation(s,L.INTERIOR)}},interfaces_:function(){return[]},getClass:function(){return bn}}),h(On,Nn),e(On.prototype,{createNode:function(t){return new yn(t,new bn)},interfaces_:function(){return[]},getClass:function(){return On}}),e(_n.prototype,{computeIntersections:function(t,e){this.mce.computeIntersectsForChain(this.chainIndex,t.mce,t.chainIndex,e)},interfaces_:function(){return[]},getClass:function(){return _n}}),e(Mn.prototype,{isDelete:function(){return this.eventType===Mn.DELETE},setDeleteEventIndex:function(t){this.deleteEventIndex=t},getObject:function(){return this.obj},compareTo:function(t){var e=t;return this.xValue<e.xValue?-1:this.xValue>e.xValue?1:this.eventType<e.eventType?-1:this.eventType>e.eventType?1:0},getInsertEvent:function(){return this.insertEvent},isInsert:function(){return this.eventType===Mn.INSERT},isSameLabel:function(t){return null!==this.label&&this.label===t.label},getDeleteEventIndex:function(){return this.deleteEventIndex},interfaces_:function(){return[s]},getClass:function(){return Mn}}),Mn.INSERT=1,Mn.DELETE=2,e(Dn.prototype,{interfaces_:function(){return[]},getClass:function(){return Dn}}),e(An.prototype,{isTrivialIntersection:function(t,e,n,i){if(t===n&&1===this.li.getIntersectionNum()){if(An.isAdjacentSegments(e,i))return!0;if(t.isClosed()){var r=t.getNumPoints()-1;if(0===e&&i===r||0===i&&e===r)return!0}}return!1},getProperIntersectionPoint:function(){return this.properIntersectionPoint},setIsDoneIfProperInt:function(t){this.isDoneWhenProperInt=t},hasProperInteriorIntersection:function(){return this.hasProperInterior},isBoundaryPointInternal:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next(),r=i.getCoordinate();if(t.isIntersection(r))return!0}return!1},hasProperIntersection:function(){return this.hasProper},hasIntersection:function(){return this._hasIntersection},isDone:function(){return this._isDone},isBoundaryPoint:function(t,e){return null!==e&&(!!this.isBoundaryPointInternal(t,e[0])||!!this.isBoundaryPointInternal(t,e[1]))},setBoundaryNodes:function(t,e){this.bdyNodes=new Array(2).fill(null),this.bdyNodes[0]=t,this.bdyNodes[1]=e},addIntersections:function(t,e,n,i){if(t===n&&e===i)return null;this.numTests++;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],o=n.getCoordinates()[i],a=n.getCoordinates()[i+1];this.li.computeIntersection(r,s,o,a),this.li.hasIntersection()&&(this.recordIsolated&&(t.setIsolated(!1),n.setIsolated(!1)),this.numIntersections++,this.isTrivialIntersection(t,e,n,i)||(this._hasIntersection=!0,!this.includeProper&&this.li.isProper()||(t.addIntersections(this.li,e,0),n.addIntersections(this.li,i,1)),this.li.isProper()&&(this.properIntersectionPoint=this.li.getIntersection(0).copy(),this.hasProper=!0,this.isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this.li,this.bdyNodes)||(this.hasProperInterior=!0))))},interfaces_:function(){return[]},getClass:function(){return An}}),An.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)},h(Fn,Dn),e(Fn.prototype,{prepareEvents:function(){ho.sort(this.events);for(var t=0;t<this.events.size();t++){var e=this.events.get(t);e.isDelete()&&e.getInsertEvent().setDeleteEventIndex(t)}},computeIntersections:function(){if(1===arguments.length){var t=arguments[0];this.nOverlaps=0,this.prepareEvents();for(var e=0;e<this.events.size();e++){var n=this.events.get(e);if(n.isInsert()&&this.processOverlaps(e,n.getDeleteEventIndex(),n,t),t.isDone())break}}else if(3===arguments.length)if(arguments[2]instanceof An&&R(arguments[0],y)&&R(arguments[1],y)){var i=arguments[0],r=arguments[1],s=arguments[2];this.addEdges(i,i),this.addEdges(r,r),this.computeIntersections(s)}else if("boolean"==typeof arguments[2]&&R(arguments[0],y)&&arguments[1]instanceof An){var o=arguments[0],a=arguments[1],u=arguments[2];u?this.addEdges(o,null):this.addEdges(o),this.computeIntersections(a)}},addEdge:function(t,e){for(var n=t.getMonotoneChainEdge(),i=n.getStartIndexes(),r=0;r<i.length-1;r++){var s=new _n(n,r),o=new Mn(e,n.getMinX(r),s);this.events.add(o),this.events.add(new Mn(n.getMaxX(r),o))}},processOverlaps:function(t,e,n,i){for(var r=n.getObject(),s=t;s<e;s++){var o=this.events.get(s);if(o.isInsert()){var a=o.getObject();n.isSameLabel(o)||(r.computeIntersections(a,i),this.nOverlaps++)}}},addEdges:function(){if(1===arguments.length)for(var t=arguments[0],e=t.iterator();e.hasNext();){var n=e.next();this.addEdge(n,n)}else if(2===arguments.length)for(var i=arguments[0],r=arguments[1],e=i.iterator();e.hasNext();){var n=e.next();this.addEdge(n,r)}},interfaces_:function(){return[]},getClass:function(){return Fn}}),e(Gn.prototype,{getMin:function(){return this.min},intersects:function(t,e){return!(this.min>e||this.max<t)},getMax:function(){return this.max},toString:function(){return se.toLineString(new g(this.min,0),new g(this.max,0))},interfaces_:function(){return[]},getClass:function(){return Gn}}),e(qn.prototype,{compare:function(t,e){var n=t,i=e,r=(n.min+n.max)/2,s=(i.min+i.max)/2;return r<s?-1:r>s?1:0},interfaces_:function(){return[a]},getClass:function(){return qn}}),Gn.NodeComparator=qn,h(Bn,Gn),e(Bn.prototype,{query:function(t,e,n){return this.intersects(t,e)?void n.visitItem(this.item):null},interfaces_:function(){return[]},getClass:function(){return Bn}}),h(zn,Gn),e(zn.prototype,{buildExtent:function(t,e){this.min=Math.min(t.min,e.min),this.max=Math.max(t.max,e.max)},query:function(t,e,n){return this.intersects(t,e)?(null!==this.node1&&this.node1.query(t,e,n),void(null!==this.node2&&this.node2.query(t,e,n))):null},interfaces_:function(){return[]},getClass:function(){return zn}}),e(Vn.prototype,{buildTree:function(){ho.sort(this.leaves,new IntervalRTreeNode.NodeComparator);for(var t=this.leaves,e=null,n=new I;;){if(this.buildLevel(t,n),1===n.size())return n.get(0);e=t,t=n,n=e}},insert:function(t,e,n){if(null!==this.root)throw new IllegalStateException("Index cannot be added to once it has been queried");this.leaves.add(new Bn(t,e,n))},query:function(t,e,n){this.init(),this.root.query(t,e,n)},buildRoot:function(){return null!==this.root?null:void(this.root=this.buildTree())},printNode:function(t){A.out.println(se.toLineString(new g(t.min,this.level),new g(t.max,this.level)))},init:function(){return null!==this.root?null:void this.buildRoot()},buildLevel:function(t,e){this.level++,e.clear();for(var n=0;n<t.size();n+=2){var i=t.get(n),r=n+1<t.size()?t.get(n):null;if(null===r)e.add(i);else{var s=new zn(t.get(n),t.get(n+1));e.add(s)}}},interfaces_:function(){return[]},getClass:function(){return Vn}}),e(kn.prototype,{filter:function(t){if(this.isForcedToLineString&&t instanceof bt){var e=t.getFactory().createLineString(t.getCoordinateSequence());return this.lines.add(e),null}t instanceof St&&this.lines.add(t)},setForceToLineString:function(t){this.isForcedToLineString=t},interfaces_:function(){return[q]},getClass:function(){return kn}}),kn.getGeometry=function(){if(1===arguments.length){var t=arguments[0];return t.getFactory().buildGeometry(kn.getLines(t))}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e.getFactory().buildGeometry(kn.getLines(e,n))}},kn.getLines=function(){if(1===arguments.length){var t=arguments[0];return kn.getLines(t,!1)}if(2===arguments.length){if(R(arguments[0],v)&&R(arguments[1],v)){for(var e=arguments[0],n=arguments[1],i=e.iterator();i.hasNext();){var r=i.next();kn.getLines(r,n)}return n}if(arguments[0]instanceof B&&"boolean"==typeof arguments[1]){var s=arguments[0],o=arguments[1],a=new I;return s.apply(new kn(a,o)),a}if(arguments[0]instanceof B&&R(arguments[1],v)){var u=arguments[0],l=arguments[1];return u instanceof St?l.add(u):u.apply(new kn(l)),l}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&R(arguments[0],v)&&R(arguments[1],v)){for(var h=arguments[0],c=arguments[1],f=arguments[2],i=h.iterator();i.hasNext();){var r=i.next();kn.getLines(r,c,f)}return c}if("boolean"==typeof arguments[2]&&arguments[0]instanceof B&&R(arguments[1],v)){var g=arguments[0],d=arguments[1],p=arguments[2];return g.apply(new kn(d,p)),d}}},e(Yn.prototype,{visitItem:function(t){this.items.add(t)},getItems:function(){return this.items},interfaces_:function(){return[Ae]},getClass:function(){return Yn}}),e(Un.prototype,{locate:function(t){var e=new le(t),n=new Xn(e);return this.index.query(t.y,t.y,n),e.getLocation()},interfaces_:function(){return[Rn]},getClass:function(){return Un}}),e(Xn.prototype,{visitItem:function(t){var e=t;this.counter.countSegment(e.getCoordinate(0),e.getCoordinate(1))},interfaces_:function(){return[Ae]},getClass:function(){return Xn}}),e(Hn.prototype,{init:function(t){for(var e=kn.getLines(t),n=e.iterator();n.hasNext();){var i=n.next(),r=i.getCoordinates();this.addLine(r)}},addLine:function(t){for(var e=1;e<t.length;e++){var n=new ce(t[e-1],t[e]),i=Math.min(n.p0.y,n.p1.y),r=Math.max(n.p0.y,n.p1.y);this.index.insert(i,r,n)}},query:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new Yn;return this.index.query(t,e,n),n.getItems()}if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];this.index.query(i,r,s)}},interfaces_:function(){return[]},getClass:function(){return Hn}}),Un.SegmentVisitor=Xn,Un.IntervalIndexedGeometry=Hn,e(Wn.prototype,{getSegmentIndex:function(){return this.segmentIndex},getCoordinate:function(){return this.coord},print:function(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex),t.println(" dist = "+this.dist)},compareTo:function(t){var e=t;return this.compare(e.segmentIndex,e.dist)},isEndPoint:function(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t},toString:function(){return this.coord+" seg # = "+this.segmentIndex+" dist = "+this.dist},getDistance:function(){return this.dist},compare:function(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0},interfaces_:function(){return[s]},getClass:function(){return Wn}}),e(jn.prototype,{print:function(t){t.println("Intersections:");for(var e=this.iterator();e.hasNext();){var n=e.next();n.print(t)}},iterator:function(){return this.nodeMap.values().iterator()},addSplitEdges:function(t){this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}},addEndpoints:function(){var t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)},createSplitEdge:function(t,e){var n=e.segmentIndex-t.segmentIndex+2,i=this.edge.pts[e.segmentIndex],r=e.dist>0||!e.coord.equals2D(i);r||n--;var s=new Array(n).fill(null),o=0;s[o++]=new g(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)s[o++]=this.edge.pts[a];return r&&(s[o]=e.coord),new Jn(s,new gn(this.edge.label))},add:function(t,e,n){var i=new Wn(t,e,n),r=this.nodeMap.get(i);return null!==r?r:(this.nodeMap.put(i,i),i)},isIntersection:function(t){for(var e=this.iterator();e.hasNext();){var n=e.next();if(n.coord.equals(t))return!0}return!1},interfaces_:function(){return[]},getClass:function(){return jn}}),e(Kn.prototype,{getChainStartIndices:function(t){var e=0,n=new I;n.add(new b(e));do{var i=this.findChainEnd(t,e);n.add(new b(i)),e=i}while(e<t.length-1);var r=Kn.toIntArray(n);return r},findChainEnd:function(t,e){for(var n=Je.quadrant(t[e],t[e+1]),i=e+1;i<t.length;){var r=Je.quadrant(t[i-1],t[i]);if(r!==n)break;i++}return i-1},interfaces_:function(){return[]},getClass:function(){return Kn}}),Kn.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e},e(Zn.prototype,{getCoordinates:function(){return this.pts},getMaxX:function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e>n?e:n},getMinX:function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e<n?e:n},computeIntersectsForChain:function(){if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[n],e.startIndex[n+1],i)}else if(6===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2],a=arguments[3],u=arguments[4],l=arguments[5],h=this.pts[r],c=this.pts[s],f=o.pts[a],g=o.pts[u];if(s-r===1&&u-a===1)return l.addIntersections(this.e,r,o.e,a),null;if(this.env1.init(h,c),this.env2.init(f,g),!this.env1.intersects(this.env2))return null;var d=Math.trunc((r+s)/2),p=Math.trunc((a+u)/2);r<d&&(a<p&&this.computeIntersectsForChain(r,d,o,a,p,l),p<u&&this.computeIntersectsForChain(r,d,o,p,u,l)),d<s&&(a<p&&this.computeIntersectsForChain(d,s,o,a,p,l),p<u&&this.computeIntersectsForChain(d,s,o,p,u,l))}},getStartIndexes:function(){return this.startIndex},computeIntersects:function(t,e){for(var n=0;n<this.startIndex.length-1;n++)for(var i=0;i<t.startIndex.length-1;i++)this.computeIntersectsForChain(n,t,i,e)},interfaces_:function(){return[]},getClass:function(){return Zn}}),e(Qn.prototype,{getDepth:function(t,e){return this.depth[t][e]},setDepth:function(t,e,n){this.depth[t][e]=n},isNull:function(){if(0===arguments.length){for(var t=0;t<2;t++)for(var e=0;e<3;e++)if(this.depth[t][e]!==Qn.NULL_VALUE)return!1;return!0}if(1===arguments.length){var n=arguments[0];return this.depth[n][1]===Qn.NULL_VALUE}if(2===arguments.length){var i=arguments[0],r=arguments[1];return this.depth[i][r]===Qn.NULL_VALUE}},normalize:function(){for(var t=0;t<2;t++)if(!this.isNull(t)){var e=this.depth[t][1];this.depth[t][2]<e&&(e=this.depth[t][2]),e<0&&(e=0);for(var n=1;n<3;n++){var i=0;this.depth[t][n]>e&&(i=1),this.depth[t][n]=i}}},getDelta:function(t){return this.depth[t][cn.RIGHT]-this.depth[t][cn.LEFT]},getLocation:function(t,e){return this.depth[t][e]<=0?L.EXTERIOR:L.INTERIOR},toString:function(){return"A: "+this.depth[0][1]+","+this.depth[0][2]+" B: "+this.depth[1][1]+","+this.depth[1][2]},add:function(){if(1===arguments.length)for(var t=arguments[0],e=0;e<2;e++)for(var n=1;n<3;n++){var i=t.getLocation(e,n);i!==L.EXTERIOR&&i!==L.INTERIOR||(this.isNull(e,n)?this.depth[e][n]=Qn.depthAtLocation(i):this.depth[e][n]+=Qn.depthAtLocation(i))}else if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2];o===L.INTERIOR&&this.depth[r][s]++}},interfaces_:function(){return[]},getClass:function(){return Qn}}),Qn.depthAtLocation=function(t){return t===L.EXTERIOR?0:t===L.INTERIOR?1:Qn.NULL_VALUE},Qn.NULL_VALUE=-1,h(Jn,mn),e(Jn.prototype,{getDepth:function(){return this.depth},getCollapsedEdge:function(){var t=new Array(2).fill(null);t[0]=this.pts[0],t[1]=this.pts[1];var e=new Jn(t,gn.toLineLabel(this.label));return e},isIsolated:function(){return this._isIsolated},getCoordinates:function(){return this.pts},setIsolated:function(t){this._isIsolated=t},setName:function(t){this.name=t},equals:function(t){if(!(t instanceof Jn))return!1;var e=t;if(this.pts.length!==e.pts.length)return!1;for(var n=!0,i=!0,r=this.pts.length,s=0;s<this.pts.length;s++)if(this.pts[s].equals2D(e.pts[s])||(n=!1),this.pts[s].equals2D(e.pts[--r])||(i=!1),!n&&!i)return!1;return!0},getCoordinate:function(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){var t=arguments[0];return this.pts[t]}},print:function(t){t.print("edge "+this.name+": "),t.print("LINESTRING (");for(var e=0;e<this.pts.length;e++)e>0&&t.print(","),t.print(this.pts[e].x+" "+this.pts[e].y);t.print(")  "+this.label+" "+this.depthDelta)},computeIM:function(t){Jn.updateIM(this.label,t)},isCollapsed:function(){return!!this.label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getMaximumSegmentIndex:function(){return this.pts.length-1},getDepthDelta:function(){return this.depthDelta},getNumPoints:function(){return this.pts.length},printReverse:function(t){t.print("edge "+this.name+": ");for(var e=this.pts.length-1;e>=0;e--)t.print(this.pts[e]+" ");t.println("")},getMonotoneChainEdge:function(){return null===this.mce&&(this.mce=new Zn(this)),this.mce},getEnvelope:function(){if(null===this.env){this.env=new C;for(var t=0;t<this.pts.length;t++)this.env.expandToInclude(this.pts[t])}return this.env},addIntersection:function(t,e,n,i){var r=new g(t.getIntersection(i)),s=e,o=t.getEdgeDistance(n,i),a=s+1;if(a<this.pts.length){var u=this.pts[a];r.equals2D(u)&&(s=a,o=0)}this.eiList.add(r,s,o)},toString:function(){var t=new P;t.append("edge "+this.name+": "),t.append("LINESTRING (");for(var e=0;e<this.pts.length;e++)e>0&&t.append(","),t.append(this.pts[e].x+" "+this.pts[e].y);return t.append(")  "+this.label+" "+this.depthDelta),t.toString()},isPointwiseEqual:function(t){if(this.pts.length!==t.pts.length)return!1;for(var e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0},setDepthDelta:function(t){this.depthDelta=t},getEdgeIntersectionList:function(){return this.eiList},addIntersections:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)},interfaces_:function(){return[]},getClass:function(){return Jn}}),Jn.updateIM=function(){if(2!==arguments.length)return mn.prototype.updateIM.apply(this,arguments);var t=arguments[0],e=arguments[1];e.setAtLeastIfValid(t.getLocation(0,cn.ON),t.getLocation(1,cn.ON),1),t.isArea()&&(e.setAtLeastIfValid(t.getLocation(0,cn.LEFT),t.getLocation(1,cn.LEFT),2),e.setAtLeastIfValid(t.getLocation(0,cn.RIGHT),t.getLocation(1,cn.RIGHT),2))},h($n,Cn),e($n.prototype,{insertBoundaryPoint:function(t,e){var n=this.nodes.addNode(e),i=n.getLabel(),r=1,s=L.NONE;s=i.getLocation(t,cn.ON),s===L.BOUNDARY&&r++;var o=$n.determineBoundary(this.boundaryNodeRule,r);i.setLocation(t,o)},computeSelfNodes:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.computeSelfNodes(t,e,!1)}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2],s=new An(n,(!0),(!1));s.setIsDoneIfProperInt(r);var o=this.createEdgeSetIntersector(),a=this.parentGeom instanceof bt||this.parentGeom instanceof Tt||this.parentGeom instanceof Ot,u=i||!a;return o.computeIntersections(this.edges,s,u),this.addSelfIntersectionNodes(this.argIndex),s}},computeSplitEdges:function(t){for(var e=this.edges.iterator();e.hasNext();){var n=e.next();n.eiList.addSplitEdges(t)}},computeEdgeIntersections:function(t,e,n){var i=new An(e,n,(!0));i.setBoundaryNodes(this.getBoundaryNodes(),t.getBoundaryNodes());var r=this.createEdgeSetIntersector();return r.computeIntersections(this.edges,t.edges,i),i},getGeometry:function(){return this.parentGeom},getBoundaryNodeRule:function(){return this.boundaryNodeRule},hasTooFewPoints:function(){return this._hasTooFewPoints},addPoint:function(){if(arguments[0]instanceof Lt){var t=arguments[0],e=t.getCoordinate();this.insertPoint(this.argIndex,e,L.INTERIOR)}else if(arguments[0]instanceof g){var n=arguments[0];this.insertPoint(this.argIndex,n,L.INTERIOR)}},addPolygon:function(t){this.addPolygonRing(t.getExteriorRing(),L.EXTERIOR,L.INTERIOR);for(var e=0;e<t.getNumInteriorRing();e++){var n=t.getInteriorRingN(e);this.addPolygonRing(n,L.INTERIOR,L.EXTERIOR)}},addEdge:function(t){this.insertEdge(t);var e=t.getCoordinates();this.insertPoint(this.argIndex,e[0],L.BOUNDARY),this.insertPoint(this.argIndex,e[e.length-1],L.BOUNDARY)},addLineString:function(t){var e=H.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return this._hasTooFewPoints=!0,this.invalidPoint=e[0],null;var n=new Jn(e,new gn(this.argIndex,L.INTERIOR));this.lineEdgeMap.put(t,n),this.insertEdge(n),f.isTrue(e.length>=2,"found LineString with single point"),this.insertBoundaryPoint(this.argIndex,e[0]),this.insertBoundaryPoint(this.argIndex,e[e.length-1])},getInvalidPoint:function(){return this.invalidPoint},getBoundaryPoints:function(){for(var t=this.getBoundaryNodes(),e=new Array(t.size()).fill(null),n=0,i=t.iterator();i.hasNext();){var r=i.next();e[n++]=r.getCoordinate().copy()}return e},getBoundaryNodes:function(){return null===this.boundaryNodes&&(this.boundaryNodes=this.nodes.getBoundaryNodes(this.argIndex)),this.boundaryNodes},addSelfIntersectionNode:function(t,e,n){return this.isBoundaryNode(t,e)?null:void(n===L.BOUNDARY&&this.useBoundaryDeterminationRule?this.insertBoundaryPoint(t,e):this.insertPoint(t,e,n))},addPolygonRing:function(t,e,n){if(t.isEmpty())return null;var i=H.removeRepeatedPoints(t.getCoordinates());if(i.length<4)return this._hasTooFewPoints=!0,this.invalidPoint=i[0],null;var r=e,s=n;he.isCCW(i)&&(r=n,s=e);var o=new Jn(i,new gn(this.argIndex,L.BOUNDARY,r,s));this.lineEdgeMap.put(t,o),this.insertEdge(o),this.insertPoint(this.argIndex,i[0],L.BOUNDARY)},insertPoint:function(t,e,n){var i=this.nodes.addNode(e),r=i.getLabel();null===r?i.label=new gn(t,n):r.setLocation(t,n)},createEdgeSetIntersector:function(){return new Fn},addSelfIntersectionNodes:function(t){for(var e=this.edges.iterator();e.hasNext();)for(var n=e.next(),i=n.getLabel().getLocation(t),r=n.eiList.iterator();r.hasNext();){var s=r.next();this.addSelfIntersectionNode(t,s.coord,i)}},add:function(){if(1!==arguments.length)return Cn.prototype.add.apply(this,arguments);var t=arguments[0];if(t.isEmpty())return null;if(t instanceof Ot&&(this.useBoundaryDeterminationRule=!1),t instanceof Tt)this.addPolygon(t);else if(t instanceof St)this.addLineString(t);else if(t instanceof Lt)this.addPoint(t);else if(t instanceof Pt)this.addCollection(t);else if(t instanceof gt)this.addCollection(t);else if(t instanceof Ot)this.addCollection(t);else{if(!(t instanceof ft))throw new UnsupportedOperationException(t.getClass().getName());this.addCollection(t)}},addCollection:function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},locate:function(t){return R(this.parentGeom,Rt)&&this.parentGeom.getNumGeometries()>50?(null===this.areaPtLocator&&(this.areaPtLocator=new Un(this.parentGeom)),this.areaPtLocator.locate(t)):this.ptLocator.locate(t,this.parentGeom)},findEdge:function(){if(1===arguments.length){var t=arguments[0];return this.lineEdgeMap.get(t)}return Cn.prototype.findEdge.apply(this,arguments)},interfaces_:function(){return[]},getClass:function(){return $n}}),$n.determineBoundary=function(t,e){return t.isInBoundary(e)?L.BOUNDARY:L.INTERIOR},e(ti.prototype,{getArgGeometry:function(t){return this.arg[t].getGeometry()},setComputationPrecision:function(t){this.resultPrecisionModel=t,this.li.setPrecisionModel(this.resultPrecisionModel)},interfaces_:function(){return[]},getClass:function(){return ti}}),e(ei.prototype,{compareTo:function(t){var e=t,n=ei.compareOriented(this.pts,this._orientation,e.pts,e._orientation);return n},interfaces_:function(){return[s]},getClass:function(){return ei}}),ei.orientation=function(t){return 1===H.increasingDirection(t)},ei.compareOriented=function(t,e,n,i){for(var r=e?1:-1,s=i?1:-1,o=e?t.length:-1,a=i?n.length:-1,u=e?0:t.length-1,l=i?0:n.length-1;;){var h=t[u].compareTo(n[l]);if(0!==h)return h;u+=r,l+=s;var c=u===o,f=l===a;if(c&&!f)return-1;if(!c&&f)return 1;if(c&&f)return 0}},e(ni.prototype,{print:function(t){t.print("MULTILINESTRING ( ");for(var e=0;e<this.edges.size();e++){var n=this.edges.get(e);e>0&&t.print(","),t.print("(");for(var i=n.getCoordinates(),r=0;r<i.length;r++)r>0&&t.print(","),t.print(i[r].x+" "+i[r].y);t.println(")")}t.print(")  ")},addAll:function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next())},findEdgeIndex:function(t){for(var e=0;e<this.edges.size();e++)if(this.edges.get(e).equals(t))return e;return-1},iterator:function(){return this.edges.iterator()},getEdges:function(){return this.edges},get:function(t){return this.edges.get(t)},findEqualEdge:function(t){var e=new ei(t.getCoordinates()),n=this.ocaMap.get(e);return n},add:function(t){this.edges.add(t);var e=new ei(t.getCoordinates());this.ocaMap.put(e,t)},interfaces_:function(){return[]},getClass:function(){return ni}}),h(ii,ti),e(ii.prototype,{insertUniqueEdge:function(t){var e=this.edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),i=t.getLabel();e.isPointwiseEqual(t)||(i=new gn(t.getLabel()),i.flip());var r=e.getDepth();r.isNull()&&r.add(n),r.add(i),n.merge(i)}else this.edgeList.add(t)},getGraph:function(){return this.graph},cancelDuplicateResultEdges:function(){for(var t=this.graph.getEdgeEnds().iterator();t.hasNext();){var e=t.next(),n=e.getSym();e.isInResult()&&n.isInResult()&&(e.setInResult(!1),n.setInResult(!1))}},isCoveredByLA:function(t){return!!this.isCovered(t,this.resultLineList)||!!this.isCovered(t,this.resultPolyList)},computeGeometry:function(t,e,n,i){var r=new I;return r.addAll(t),r.addAll(e),r.addAll(n),r.isEmpty()?ii.createEmptyResult(i,this.arg[0].getGeometry(),this.arg[1].getGeometry(),this.geomFact):this.geomFact.buildGeometry(r)},mergeSymLabels:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();e.getEdges().mergeSymLabels()}},isCovered:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next(),r=this.ptLocator.locate(t,i);if(r!==L.EXTERIOR)return!0}return!1},replaceCollapsedEdges:function(){for(var t=new I,e=this.edgeList.iterator();e.hasNext();){var n=e.next();n.isCollapsed()&&(e.remove(),t.add(n.getCollapsedEdge()))}this.edgeList.addAll(t)},updateNodeLabelling:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getEdges().getLabel();e.getLabel().merge(n)}},getResultGeometry:function(t){return this.computeOverlay(t),this.resultGeom},insertUniqueEdges:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertUniqueEdge(n)}},computeOverlay:function(t){this.copyPoints(0),this.copyPoints(1),this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1),this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!0);var e=new I;this.arg[0].computeSplitEdges(e),this.arg[1].computeSplitEdges(e);this.insertUniqueEdges(e),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),
ln.checkValid(this.edgeList.getEdges()),this.graph.addEdges(this.edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(t),this.cancelDuplicateResultEdges();var n=new Sn(this.geomFact);n.add(this.graph),this.resultPolyList=n.getPolygons();var i=new wn(this,this.geomFact,this.ptLocator);this.resultLineList=i.build(t);var r=new Ln(this,this.geomFact,this.ptLocator);this.resultPointList=r.build(t),this.resultGeom=this.computeGeometry(this.resultPointList,this.resultLineList,this.resultPolyList,t)},labelIncompleteNode:function(t,e){var n=this.ptLocator.locate(t.getCoordinate(),this.arg[e].getGeometry());t.getLabel().setLocation(e,n)},copyPoints:function(t){for(var e=this.arg[t].getNodeIterator();e.hasNext();){var n=e.next(),i=this.graph.addNode(n.getCoordinate());i.setLabel(t,n.getLabel().getLocation(t))}},findResultAreaEdges:function(t){for(var e=this.graph.getEdgeEnds().iterator();e.hasNext();){var n=e.next(),i=n.getLabel();i.isArea()&&!n.isInteriorAreaEdge()&&ii.isResultOfOp(i.getLocation(0,cn.RIGHT),i.getLocation(1,cn.RIGHT),t)&&n.setInResult(!0)}},computeLabelsFromDepths:function(){for(var t=this.edgeList.iterator();t.hasNext();){var e=t.next(),n=e.getLabel(),i=e.getDepth();if(!i.isNull()){i.normalize();for(var r=0;r<2;r++)n.isNull(r)||!n.isArea()||i.isNull(r)||(0===i.getDelta(r)?n.toLine(r):(f.isTrue(!i.isNull(r,cn.LEFT),"depth of LEFT side has not been initialized"),n.setLocation(r,cn.LEFT,i.getLocation(r,cn.LEFT)),f.isTrue(!i.isNull(r,cn.RIGHT),"depth of RIGHT side has not been initialized"),n.setLocation(r,cn.RIGHT,i.getLocation(r,cn.RIGHT))))}}},computeLabelling:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();e.getEdges().computeLabelling(this.arg)}this.mergeSymLabels(),this.updateNodeLabelling()},labelIncompleteNodes:function(){for(var t=0,e=this.graph.getNodes().iterator();e.hasNext();){var n=e.next(),i=n.getLabel();n.isIsolated()&&(t++,i.isNull(0)?this.labelIncompleteNode(n,0):this.labelIncompleteNode(n,1)),n.getEdges().updateLabelling(i)}},isCoveredByA:function(t){return!!this.isCovered(t,this.resultPolyList)},interfaces_:function(){return[]},getClass:function(){return ii}}),ii.overlayOp=function(t,e,n){var i=new ii(t,e),r=i.getResultGeometry(n);return r},ii.intersection=function(t,e){if(t.isEmpty()||e.isEmpty())return ii.createEmptyResult(ii.INTERSECTION,t,e,t.getFactory());if(t.isGeometryCollection()){var n=e;return hn.map(t,{interfaces_:function(){return[MapOp]},map:function(t){return t.intersection(n)}})}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),si.overlayOp(t,e,ii.INTERSECTION)},ii.symDifference=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return ii.createEmptyResult(ii.SYMDIFFERENCE,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),si.overlayOp(t,e,ii.SYMDIFFERENCE)},ii.resultDimension=function(t,e,n){var i=e.getDimension(),r=n.getDimension(),s=-1;switch(t){case ii.INTERSECTION:s=Math.min(i,r);break;case ii.UNION:s=Math.max(i,r);break;case ii.DIFFERENCE:s=i;break;case ii.SYMDIFFERENCE:s=Math.max(i,r)}return s},ii.createEmptyResult=function(t,e,n,i){var r=null;switch(ii.resultDimension(t,e,n)){case-1:r=i.createGeometryCollection(new Array(0).fill(null));break;case 0:r=i.createPoint();break;case 1:r=i.createLineString();break;case 2:r=i.createPolygon()}return r},ii.difference=function(t,e){return t.isEmpty()?ii.createEmptyResult(ii.DIFFERENCE,t,e,t.getFactory()):e.isEmpty()?t.copy():(t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),si.overlayOp(t,e,ii.DIFFERENCE))},ii.isResultOfOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=t.getLocation(0),i=t.getLocation(1);return ii.isResultOfOp(n,i,e)}if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2];switch(r===L.BOUNDARY&&(r=L.INTERIOR),s===L.BOUNDARY&&(s=L.INTERIOR),o){case ii.INTERSECTION:return r===L.INTERIOR&&s===L.INTERIOR;case ii.UNION:return r===L.INTERIOR||s===L.INTERIOR;case ii.DIFFERENCE:return r===L.INTERIOR&&s!==L.INTERIOR;case ii.SYMDIFFERENCE:return r===L.INTERIOR&&s!==L.INTERIOR||r!==L.INTERIOR&&s===L.INTERIOR}return!1}},ii.INTERSECTION=1,ii.UNION=2,ii.DIFFERENCE=3,ii.SYMDIFFERENCE=4,e(ri.prototype,{selfSnap:function(t){var e=new Ie(t),n=e.snapTo(t,this.snapTolerance);return n},removeCommonBits:function(t){this.cbr=new Se,this.cbr.add(t[0]),this.cbr.add(t[1]);var e=new Array(2).fill(null);return e[0]=this.cbr.removeCommonBits(t[0].copy()),e[1]=this.cbr.removeCommonBits(t[1].copy()),e},prepareResult:function(t){return this.cbr.addCommonBits(t),t},getResultGeometry:function(t){var e=this.snap(this.geom),n=ii.overlayOp(e[0],e[1],t);return this.prepareResult(n)},checkValid:function(t){t.isValid()||A.out.println("Snapped geometry is invalid")},computeSnapTolerance:function(){this.snapTolerance=Ie.computeOverlaySnapTolerance(this.geom[0],this.geom[1])},snap:function(t){var e=this.removeCommonBits(t),n=Ie.snap(e[0],e[1],this.snapTolerance);return n},interfaces_:function(){return[]},getClass:function(){return ri}}),ri.overlayOp=function(t,e,n){var i=new ri(t,e);return i.getResultGeometry(n)},ri.union=function(t,e){return ri.overlayOp(t,e,ii.UNION)},ri.intersection=function(t,e){return ri.overlayOp(t,e,ii.INTERSECTION)},ri.symDifference=function(t,e){return ri.overlayOp(t,e,ii.SYMDIFFERENCE)},ri.difference=function(t,e){return ri.overlayOp(t,e,ii.DIFFERENCE)},e(si.prototype,{getResultGeometry:function(t){var e=null,n=!1,i=null;try{e=ii.overlayOp(this.geom[0],this.geom[1],t);var r=!0;r&&(n=!0)}catch(t){if(!(t instanceof l))throw t;i=t}finally{}if(!n)try{e=ri.overlayOp(this.geom[0],this.geom[1],t)}catch(t){throw t instanceof l?i:t}finally{}return e},interfaces_:function(){return[]},getClass:function(){return si}}),si.overlayOp=function(t,e,n){var i=new si(t,e);return i.getResultGeometry(n)},si.union=function(t,e){return si.overlayOp(t,e,ii.UNION)},si.intersection=function(t,e){return si.overlayOp(t,e,ii.INTERSECTION)},si.symDifference=function(t,e){return si.overlayOp(t,e,ii.SYMDIFFERENCE)},si.difference=function(t,e){return si.overlayOp(t,e,ii.DIFFERENCE)},e(oi.prototype,{addPolygon:function(t){if(t.isEmpty())return null;var e=null,n=0,i=this.horizontalBisector(t);if(0===i.getLength())n=0,e=i.getCoordinate();else{var r=si.overlayOp(i,t,ii.INTERSECTION),s=this.widestGeometry(r);n=s.getEnvelopeInternal().getWidth(),e=oi.centre(s.getEnvelopeInternal())}(null===this.interiorPoint||n>this.maxWidth)&&(this.interiorPoint=e,this.maxWidth=n)},getInteriorPoint:function(){return this.interiorPoint},widestGeometry:function t(){if(arguments[0]instanceof ft){var e=arguments[0];if(e.isEmpty())return e;for(var t=e.getGeometryN(0),n=1;n<e.getNumGeometries();n++)e.getGeometryN(n).getEnvelopeInternal().getWidth()>t.getEnvelopeInternal().getWidth()&&(t=e.getGeometryN(n));return t}if(arguments[0]instanceof B){var i=arguments[0];return i instanceof ft?this.widestGeometry(i):i}},horizontalBisector:function(t){var e=t.getEnvelopeInternal(),n=ai.getBisectorY(t);return this.factory.createLineString([new g(e.getMinX(),n),new g(e.getMaxX(),n)])},add:function(t){if(t instanceof Tt)this.addPolygon(t);else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.add(e.getGeometryN(n))},interfaces_:function(){return[]},getClass:function(){return oi}}),oi.centre=function(t){return new g(oi.avg(t.getMinX(),t.getMaxX()),oi.avg(t.getMinY(),t.getMaxY()))},oi.avg=function(t,e){return(t+e)/2},e(ai.prototype,{updateInterval:function(t){t<=this.centreY?t>this.loY&&(this.loY=t):t>this.centreY&&t<this.hiY&&(this.hiY=t)},getBisectorY:function(){this.process(this.poly.getExteriorRing());for(var t=0;t<this.poly.getNumInteriorRing();t++)this.process(this.poly.getInteriorRingN(t));var e=oi.avg(this.hiY,this.loY);return e},process:function(t){for(var e=t.getCoordinateSequence(),n=0;n<e.size();n++){var i=e.getY(n);this.updateInterval(i)}},interfaces_:function(){return[]},getClass:function(){return ai}}),ai.getBisectorY=function(t){var e=new ai(t);return e.getBisectorY()},oi.SafeBisectorFinder=ai,e(ui.prototype,{addEndpoints:function(){if(arguments[0]instanceof B){var t=arguments[0];if(t instanceof St)this.addEndpoints(t.getCoordinates());else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.addEndpoints(e.getGeometryN(n))}else if(arguments[0]instanceof Array){var i=arguments[0];this.add(i[0]),this.add(i[i.length-1])}},getInteriorPoint:function(){return this.interiorPoint},addInterior:function(){if(arguments[0]instanceof B){var t=arguments[0];if(t instanceof St)this.addInterior(t.getCoordinates());else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.addInterior(e.getGeometryN(n))}else if(arguments[0]instanceof Array)for(var i=arguments[0],n=1;n<i.length-1;n++)this.add(i[n])},add:function(t){var e=t.distance(this.centroid);e<this.minDistance&&(this.interiorPoint=new g(t),this.minDistance=e)},interfaces_:function(){return[]},getClass:function(){return ui}}),e(li.prototype,{getInteriorPoint:function(){return this.interiorPoint},add:function(){if(arguments[0]instanceof B){var t=arguments[0];if(t instanceof Lt)this.add(t.getCoordinate());else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.add(e.getGeometryN(n))}else if(arguments[0]instanceof g){var i=arguments[0],r=i.distance(this.centroid);r<this.minDistance&&(this.interiorPoint=new g(i),this.minDistance=r)}},interfaces_:function(){return[]},getClass:function(){return li}}),e(hi.prototype,{select:function(){if(1===arguments.length){arguments[0]}else if(2===arguments.length){var t=arguments[0],e=arguments[1];t.getLineSegment(e,this.selectedSegment),this.select(this.selectedSegment)}},interfaces_:function(){return[]},getClass:function(){return hi}}),e(ci.prototype,{hasChildren:function(){for(var t=0;t<2;t++)if(null!==this.subnode[t])return!0;return!1},isPrunable:function(){return!(this.hasChildren()||this.hasItems())},addAllItems:function(t){t.addAll(this.items);for(var e=0;e<2;e++)null!==this.subnode[e]&&this.subnode[e].addAllItems(t);return t},size:function(){for(var t=0,e=0;e<2;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+this.items.size()},addAllItemsFromOverlapping:function(t,e){return null===t||this.isSearchMatch(t)?(e.addAll(this.items),null!==this.subnode[0]&&this.subnode[0].addAllItemsFromOverlapping(t,e),void(null!==this.subnode[1]&&this.subnode[1].addAllItemsFromOverlapping(t,e))):null},hasItems:function(){return!this.items.isEmpty()},remove:function(t,e){if(!this.isSearchMatch(t))return!1;for(var n=!1,i=0;i<2;i++)if(null!==this.subnode[i]&&(n=this.subnode[i].remove(t,e))){this.subnode[i].isPrunable()&&(this.subnode[i]=null);break}return n?n:n=this.items.remove(e)},getItems:function(){return this.items},depth:function(){for(var t=0,e=0;e<2;e++)if(null!==this.subnode[e]){var n=this.subnode[e].depth();n>t&&(t=n)}return t+1},nodeSize:function(){for(var t=0,e=0;e<2;e++)null!==this.subnode[e]&&(t+=this.subnode[e].nodeSize());return t+1},add:function(t){this.items.add(t)},interfaces_:function(){return[]},getClass:function(){return ci}}),ci.getSubnodeIndex=function(t,e){var n=-1;return t.min>=e&&(n=1),t.max<=e&&(n=0),n},e(fi.prototype,{expandToInclude:function(t){t.max>this.max&&(this.max=t.max),t.min<this.min&&(this.min=t.min)},getWidth:function(){return this.max-this.min},overlaps:function(){if(1===arguments.length){var t=arguments[0];return this.overlaps(t.min,t.max)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return!(this.min>n||this.max<e)}},getMin:function(){return this.min},toString:function(){return"["+this.min+", "+this.max+"]"},contains:function(){if(1===arguments.length){if(arguments[0]instanceof fi){var t=arguments[0];return this.contains(t.min,t.max)}if("number"==typeof arguments[0]){var e=arguments[0];return e>=this.min&&e<=this.max}}else if(2===arguments.length){var n=arguments[0],i=arguments[1];return n>=this.min&&i<=this.max}},init:function(t,e){this.min=t,this.max=e,t>e&&(this.min=e,this.max=t)},getMax:function(){return this.max},interfaces_:function(){return[]},getClass:function(){return fi}}),gi.exponent=function(t){return di(64,t)-1023},gi.powerOf2=function(t){return Math.pow(2,t)},e(pi.prototype,{getInterval:function(){return this.interval},getLevel:function(){return this.level},computeKey:function(t){for(this.level=pi.computeLevel(t),this.interval=new fi,this.computeInterval(this.level,t);!this.interval.contains(t);)this.level+=1,this.computeInterval(this.level,t)},computeInterval:function(t,e){var n=gi.powerOf2(t);this.pt=Math.floor(e.getMin()/n)*n,this.interval.init(this.pt,this.pt+n)},getPoint:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return pi}}),pi.computeLevel=function(t){var e=t.getWidth(),n=gi.exponent(e)+1;return n},h(vi,ci),e(vi.prototype,{getInterval:function(){return this.interval},find:function(t){var e=ci.getSubnodeIndex(t,this.centre);if(e===-1)return this;if(null!==this.subnode[e]){var n=this.subnode[e];return n.find(t)}return this},insert:function(t){f.isTrue(null===this.interval||this.interval.contains(t.interval));var e=ci.getSubnodeIndex(t.interval,this.centre);if(t.level===this.level-1)this.subnode[e]=t;else{var n=this.createSubnode(e);n.insert(t),this.subnode[e]=n}},isSearchMatch:function(t){return t.overlaps(this.interval)},getSubnode:function(t){return null===this.subnode[t]&&(this.subnode[t]=this.createSubnode(t)),this.subnode[t]},getNode:function(t){var e=ci.getSubnodeIndex(t,this.centre);if(e!==-1){var n=this.getSubnode(e);return n.getNode(t)}return this},createSubnode:function(t){var e=0,n=0;switch(t){case 0:e=this.interval.getMin(),n=this.centre;break;case 1:e=this.centre,n=this.interval.getMax()}var i=new fi(e,n),r=new vi(i,this.level-1);return r},interfaces_:function(){return[]},getClass:function(){return vi}}),vi.createNode=function(t){var e=new pi(t),n=new vi(e.getInterval(),e.getLevel());return n},vi.createExpanded=function(t,e){var n=new fi(e);null!==t&&n.expandToInclude(t.interval);var i=vi.createNode(n);return null!==t&&i.insert(t),i},e(mi.prototype,{interfaces_:function(){return[]},getClass:function(){return mi}});mi.isZeroWidth=function(t,e){var n=e-t;if(0===n)return!0;var i=Math.max(Math.abs(t),Math.abs(e)),r=n/i,s=gi.exponent(r);return s<=mi.MIN_BINARY_EXPONENT};mi.MIN_BINARY_EXPONENT=-50,h(yi,ci),e(yi.prototype,{insert:function(t,e){var n=ci.getSubnodeIndex(t,yi.origin);if(n===-1)return this.add(e),null;var i=this.subnode[n];if(null===i||!i.getInterval().contains(t)){var r=vi.createExpanded(i,t);this.subnode[n]=r}this.insertContained(this.subnode[n],t,e)},isSearchMatch:function(t){return!0},insertContained:function(t,e,n){f.isTrue(t.getInterval().contains(e));var i=mi.isZeroWidth(e.getMin(),e.getMax()),r=null;r=i?t.find(e):t.getNode(e),r.add(n)},interfaces_:function(){return[]},getClass:function(){return yi}}),yi.origin=0,e(xi.prototype,{size:function(){return null!==this.root?this.root.size():0},insert:function(t,e){this.collectStats(t);var n=xi.ensureExtent(t,this.minExtent);this.root.insert(n,e)},query:function(){if(1===arguments.length){if("number"==typeof arguments[0]){var t=arguments[0];return this.query(new fi(t,t))}if(arguments[0]instanceof fi){var e=arguments[0],n=new I;return this.query(e,n),n}}else if(2===arguments.length){var i=arguments[0],r=arguments[1];this.root.addAllItemsFromOverlapping(i,r)}},iterator:function(){var t=new I;return this.root.addAllItems(t),t.iterator()},remove:function(t,e){var n=xi.ensureExtent(t,this.minExtent);return this.root.remove(n,e)},collectStats:function(t){var e=t.getWidth();e<this.minExtent&&e>0&&(this.minExtent=e)},depth:function(){return null!==this.root?this.root.depth():0},nodeSize:function(){return null!==this.root?this.root.nodeSize():0},interfaces_:function(){return[]},getClass:function(){return xi}}),xi.ensureExtent=function(t,e){var n=t.getMin(),i=t.getMax();return n!==i?t:(n===i&&(n-=e/2,i=n+e/2),new fi(n,i))},e(Ei.prototype,{isInside:function(t){},interfaces_:function(){return[]},getClass:function(){return Ei}}),e(Ii.prototype,{testLineSegment:function(t,e){var n=null,i=null,r=null,s=null,o=null,a=e.p0,u=e.p1;i=a.x-t.x,r=a.y-t.y,s=u.x-t.x,o=u.y-t.y,(r>0&&o<=0||o>0&&r<=0)&&(n=ue.signOfDet2x2(i,r,s,o)/(o-r),0<n&&this.crossings++)},buildIndex:function(){this.tree=new xi;for(var t=H.removeRepeatedPoints(this.ring.getCoordinates()),e=$e.getChains(t),n=0;n<e.size();n++){var i=e.get(n),r=i.getEnvelope();this.interval.min=r.getMinY(),this.interval.max=r.getMaxY(),this.tree.insert(this.interval,i)}},testMonotoneChain:function(t,e,n){n.select(t,e)},isInside:function(t){this.crossings=0;var e=new C(r.NEGATIVE_INFINITY,r.POSITIVE_INFINITY,t.y,t.y);this.interval.min=t.y,this.interval.max=t.y;for(var n=this.tree.query(this.interval),i=new Ni(this,t),s=n.iterator();s.hasNext();){var o=s.next();this.testMonotoneChain(e,i,o)}return this.crossings%2===1},interfaces_:function(){return[Ei]},getClass:function(){return Ii}}),h(Ni,hi),e(Ni.prototype,{select:function(){if(1!==arguments.length)return hi.prototype.select.apply(this,arguments);var t=arguments[0];this.mcp.testLineSegment(this.p,t)},interfaces_:function(){return[]},getClass:function(){return Ni}}),Ii.MCSelecter=Ni,e(Ci.prototype,{interfaces_:function(){return[]},getClass:function(){return Ci}}),Ci.toDegrees=function(t){return 180*t/Math.PI},Ci.normalize=function(t){for(;t>Math.PI;)t-=Ci.PI_TIMES_2;for(;t<=-Math.PI;)t+=Ci.PI_TIMES_2;return t},Ci.angle=function(){if(1===arguments.length){var t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){var e=arguments[0],n=arguments[1],i=n.x-e.x,r=n.y-e.y;return Math.atan2(r,i)}},Ci.isAcute=function(t,e,n){var i=t.x-e.x,r=t.y-e.y,s=n.x-e.x,o=n.y-e.y,a=i*s+r*o;return a>0},Ci.isObtuse=function(t,e,n){var i=t.x-e.x,r=t.y-e.y,s=n.x-e.x,o=n.y-e.y,a=i*s+r*o;return a<0},Ci.interiorAngle=function(t,e,n){var i=Ci.angle(e,t),r=Ci.angle(e,n);return Math.abs(r-i)},Ci.normalizePositive=function(t){if(t<0){for(;t<0;)t+=Ci.PI_TIMES_2;t>=Ci.PI_TIMES_2&&(t=0)}else{for(;t>=Ci.PI_TIMES_2;)t-=Ci.PI_TIMES_2;t<0&&(t=0)}return t},Ci.angleBetween=function(t,e,n){var i=Ci.angle(e,t),r=Ci.angle(e,n);return Ci.diff(i,r)},Ci.diff=function(t,e){var n=null;return n=t<e?e-t:t-e,n>Math.PI&&(n=2*Math.PI-n),n},Ci.toRadians=function(t){return t*Math.PI/180},Ci.getTurn=function(t,e){var n=Math.sin(e-t);return n>0?Ci.COUNTERCLOCKWISE:n<0?Ci.CLOCKWISE:Ci.NONE},Ci.angleBetweenOriented=function(t,e,n){var i=Ci.angle(e,t),r=Ci.angle(e,n),s=r-i;return s<=-Math.PI?s+Ci.PI_TIMES_2:s>Math.PI?s-Ci.PI_TIMES_2:s},Ci.PI_TIMES_2=2*Math.PI,Ci.PI_OVER_2=Math.PI/2,Ci.PI_OVER_4=Math.PI/4,Ci.COUNTERCLOCKWISE=he.COUNTERCLOCKWISE,Ci.CLOCKWISE=he.CLOCKWISE,Ci.NONE=he.COLLINEAR,e(Si.prototype,{area:function(){return Si.area(this.p0,this.p1,this.p2)},signedArea:function(){return Si.signedArea(this.p0,this.p1,this.p2)},interpolateZ:function(t){if(null===t)throw new i("Supplied point is null.");return Si.interpolateZ(t,this.p0,this.p1,this.p2)},longestSideLength:function(){return Si.longestSideLength(this.p0,this.p1,this.p2)},isAcute:function(){return Si.isAcute(this.p0,this.p1,this.p2)},circumcentre:function(){return Si.circumcentre(this.p0,this.p1,this.p2)},area3D:function(){return Si.area3D(this.p0,this.p1,this.p2)},centroid:function(){return Si.centroid(this.p0,this.p1,this.p2)},inCentre:function(){return Si.inCentre(this.p0,this.p1,this.p2)},interfaces_:function(){return[]},getClass:function(){return Si}}),Si.area=function(t,e,n){return Math.abs(((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2)},Si.signedArea=function(t,e,n){return((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2},Si.det=function(t,e,n,i){return t*i-e*n},Si.interpolateZ=function(t,e,n,i){var r=e.x,s=e.y,o=n.x-r,a=i.x-r,u=n.y-s,l=i.y-s,h=o*l-a*u,c=t.x-r,f=t.y-s,g=(l*c-a*f)/h,d=(-u*c+o*f)/h,p=e.z+g*(n.z-e.z)+d*(i.z-e.z);return p},Si.longestSideLength=function(t,e,n){var i=t.distance(e),r=e.distance(n),s=n.distance(t),o=i;return r>o&&(o=r),s>o&&(o=s),o},Si.isAcute=function(t,e,n){return!!Ci.isAcute(t,e,n)&&(!!Ci.isAcute(e,n,t)&&!!Ci.isAcute(n,t,e))},Si.circumcentre=function(t,e,n){var i=n.x,r=n.y,s=t.x-i,o=t.y-r,a=e.x-i,u=e.y-r,l=2*Si.det(s,o,a,u),h=Si.det(o,s*s+o*o,u,a*a+u*u),c=Si.det(s,s*s+o*o,a,a*a+u*u),f=i-h/l,d=r+c/l;return new g(f,d)},Si.perpendicularBisector=function(t,e){var n=e.x-t.x,i=e.y-t.y,r=new F(t.x+n/2,t.y+i/2,1),s=new F(t.x-i+n/2,t.y+n+i/2,1);return new F(r,s)},Si.angleBisector=function(t,e,n){var i=e.distance(t),r=e.distance(n),s=i/(i+r),o=n.x-t.x,a=n.y-t.y,u=new g(t.x+s*o,t.y+s*a);return u},Si.area3D=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,s=e.z-t.z,o=n.x-t.x,a=n.y-t.y,u=n.z-t.z,l=r*u-s*a,h=s*o-i*u,c=i*a-r*o,f=l*l+h*h+c*c,g=Math.sqrt(f)/2;return g},Si.centroid=function(t,e,n){var i=(t.x+e.x+n.x)/3,r=(t.y+e.y+n.y)/3;return new g(i,r)},Si.inCentre=function(t,e,n){var i=e.distance(n),r=t.distance(n),s=t.distance(e),o=i+r+s,a=(i*t.x+r*e.x+s*n.x)/o,u=(i*t.y+r*e.y+s*n.y)/o;return new g(a,u)},e(wi.prototype,{getRadius:function(){return this.compute(),this.radius},getDiameter:function(){switch(this.compute(),this.extremalPts.length){case 0:return this.input.getFactory().createLineString();case 1:return this.input.getFactory().createPoint(this.centre)}var t=this.extremalPts[0],e=this.extremalPts[1];return this.input.getFactory().createLineString([t,e])},getExtremalPoints:function(){return this.compute(),this.extremalPts},computeCirclePoints:function(){if(this.input.isEmpty())return this.extremalPts=new Array(0).fill(null),null;if(1===this.input.getNumPoints()){var t=this.input.getCoordinates();return this.extremalPts=[new g(t[0])],null}var e=this.input.convexHull(),n=e.getCoordinates(),t=n;if(n[0].equals2D(n[n.length-1])&&(t=new Array(n.length-1).fill(null),H.copyDeep(n,0,t,0,n.length-1)),t.length<=2)return this.extremalPts=H.copyDeep(t),null;for(var i=wi.lowestPoint(t),r=wi.pointWitMinAngleWithX(t,i),s=0;s<t.length;s++){var o=wi.pointWithMinAngleWithSegment(t,i,r);if(Ci.isObtuse(i,o,r))return this.extremalPts=[new g(i),new g(r)],null;if(Ci.isObtuse(o,i,r))i=o;else{if(!Ci.isObtuse(o,r,i))return this.extremalPts=[new g(i),new g(r),new g(o)],null;r=o}}f.shouldNeverReachHere("Logic failure in Minimum Bounding Circle algorithm!")},compute:function(){return null!==this.extremalPts?null:(this.computeCirclePoints(),this.computeCentre(),void(null!==this.centre&&(this.radius=this.centre.distance(this.extremalPts[0]))))},getFarthestPoints:function(){switch(this.compute(),this.extremalPts.length){case 0:return this.input.getFactory().createLineString();case 1:return this.input.getFactory().createPoint(this.centre)}var t=this.extremalPts[0],e=this.extremalPts[this.extremalPts.length-1];return this.input.getFactory().createLineString([t,e])},getCircle:function(){if(this.compute(),null===this.centre)return this.input.getFactory().createPolygon();var t=this.input.getFactory().createPoint(this.centre);return 0===this.radius?t:t.buffer(this.radius)},getCentre:function(){return this.compute(),this.centre},computeCentre:function(){switch(this.extremalPts.length){case 0:this.centre=null;break;case 1:this.centre=this.extremalPts[0];break;case 2:this.centre=new g((this.extremalPts[0].x+this.extremalPts[1].x)/2,(this.extremalPts[0].y+this.extremalPts[1].y)/2);break;case 3:this.centre=Si.circumcentre(this.extremalPts[0],this.extremalPts[1],this.extremalPts[2])}},interfaces_:function(){return[]},getClass:function(){return wi}}),wi.pointWitMinAngleWithX=function(t,e){for(var n=r.MAX_VALUE,i=null,s=0;s<t.length;s++){var o=t[s];if(o!==e){var a=o.x-e.x,u=o.y-e.y;u<0&&(u=-u);var l=Math.sqrt(a*a+u*u),h=u/l;h<n&&(n=h,i=o)}}return i},wi.lowestPoint=function(t){for(var e=t[0],n=1;n<t.length;n++)t[n].y<e.y&&(e=t[n]);return e},wi.pointWithMinAngleWithSegment=function(t,e,n){for(var i=r.MAX_VALUE,s=null,o=0;o<t.length;o++){var a=t[o];if(a!==e&&a!==n){var u=Ci.angleBetween(e,a,n);u<i&&(i=u,s=a)}}return s},e(Li.prototype,{getWidthCoordinate:function(){return this.computeMinimumDiameter(),this.minWidthPt},getSupportingSegment:function(){return this.computeMinimumDiameter(),this.inputGeom.getFactory().createLineString([this.minBaseSeg.p0,this.minBaseSeg.p1])},getDiameter:function(){if(this.computeMinimumDiameter(),null===this.minWidthPt)return this.inputGeom.getFactory().createLineString(null);var t=this.minBaseSeg.project(this.minWidthPt);return this.inputGeom.getFactory().createLineString([t,this.minWidthPt])},computeWidthConvex:function(t){t instanceof Tt?this.convexHullPts=t.getExteriorRing().getCoordinates():this.convexHullPts=t.getCoordinates(),0===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=null,this.minBaseSeg=null):1===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[0]):2===this.convexHullPts.length||3===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[1]):this.computeConvexRingMinDiameter(this.convexHullPts)},computeConvexRingMinDiameter:function(t){this.minWidth=r.MAX_VALUE;for(var e=1,n=new ce,i=0;i<t.length-1;i++)n.p0=t[i],n.p1=t[i+1],e=this.findMaxPerpDistance(t,n,e)},computeMinimumDiameter:function(){if(null!==this.minWidthPt)return null;if(this.isConvex)this.computeWidthConvex(this.inputGeom);else{var t=new me(this.inputGeom).getConvexHull();this.computeWidthConvex(t)}},getLength:function(){return this.computeMinimumDiameter(),this.minWidth},findMaxPerpDistance:function(t,e,n){for(var i=e.distancePerpendicular(t[n]),r=i,s=n,o=s;r>=i;)i=r,s=o,o=Li.nextIndex(t,s),r=e.distancePerpendicular(t[o]);return i<this.minWidth&&(this.minPtIndex=s,this.minWidth=i,this.minWidthPt=t[this.minPtIndex],this.minBaseSeg=new ce(e)),s},getMinimumRectangle:function(){if(this.computeMinimumDiameter(),0===this.minWidth)return this.minBaseSeg.p0.equals2D(this.minBaseSeg.p1)?this.inputGeom.getFactory().createPoint(this.minBaseSeg.p0):this.minBaseSeg.toGeometry(this.inputGeom.getFactory());for(var t=this.minBaseSeg.p1.x-this.minBaseSeg.p0.x,e=this.minBaseSeg.p1.y-this.minBaseSeg.p0.y,n=r.MAX_VALUE,i=-r.MAX_VALUE,s=r.MAX_VALUE,o=-r.MAX_VALUE,a=0;a<this.convexHullPts.length;a++){var u=Li.computeC(t,e,this.convexHullPts[a]);u>i&&(i=u),u<n&&(n=u);var l=Li.computeC(-e,t,this.convexHullPts[a]);l>o&&(o=l),l<s&&(s=l)}var h=Li.computeSegmentForLine(-t,-e,o),c=Li.computeSegmentForLine(-t,-e,s),f=Li.computeSegmentForLine(-e,t,i),g=Li.computeSegmentForLine(-e,t,n),d=f.lineIntersection(h),p=g.lineIntersection(h),v=g.lineIntersection(c),m=f.lineIntersection(c),y=this.inputGeom.getFactory().createLinearRing([d,p,v,m,d]);return this.inputGeom.getFactory().createPolygon(y,null)},interfaces_:function(){return[]},getClass:function(){return Li}}),Li.nextIndex=function(t,e){return e++,e>=t.length&&(e=0),e},Li.computeC=function(t,e,n){return t*n.y-e*n.x},Li.getMinimumDiameter=function(t){return new Li(t).getDiameter()},Li.getMinimumRectangle=function(t){return new Li(t).getMinimumRectangle()},Li.computeSegmentForLine=function(t,e,n){var i=null,r=null;return Math.abs(e)>Math.abs(t)?(i=new g(0,n/e),r=new g(1,n/e-t/e)):(i=new g(n/t,0),r=new g(n/t-e/t,1)),new ce(i,r)};var co=Object.freeze({Centroid:ge,CGAlgorithms:he,ConvexHull:me,InteriorPointArea:oi,InteriorPointLine:ui,InteriorPointPoint:li,RobustLineIntersector:ae,MCPointInRing:Ii,MinimumBoundingCircle:wi,MinimumDiameter:Li});e(Ri.prototype,{getResultGeometry:function(){return new Ti(this.distanceTolerance).transform(this.inputGeom)},setDistanceTolerance:function(t){if(t<=0)throw new i("Tolerance must be positive");this.distanceTolerance=t},interfaces_:function(){return[]},getClass:function(){return Ri}}),Ri.densifyPoints=function(t,e,n){for(var i=new ce,r=new N,s=0;s<t.length-1;s++){i.p0=t[s],i.p1=t[s+1],r.add(i.p0,!1);var o=i.getLength(),a=Math.trunc(o/e)+1;if(a>1)for(var u=o/a,l=1;l<a;l++){var h=l*u/o,c=i.pointAlong(h);n.makePrecise(c),r.add(c,!1)}}return r.add(t[t.length-1],!1),r.toCoordinateArray()},Ri.densify=function(t,e){var n=new Ri(t);return n.setDistanceTolerance(e),n.getResultGeometry()},h(Ti,xe),e(Ti.prototype,{transformMultiPolygon:function(t,e){var n=xe.prototype.transformMultiPolygon.call(this,t,e);return this.createValidArea(n)},transformPolygon:function(t,e){var n=xe.prototype.transformPolygon.call(this,t,e);return e instanceof Ot?n:this.createValidArea(n)},transformCoordinates:function(t,e){var n=t.toCoordinateArray(),i=Ri.densifyPoints(n,this.distanceTolerance,e.getPrecisionModel());return e instanceof St&&1===i.length&&(i=new Array(0).fill(null)),this.factory.getCoordinateSequenceFactory().create(i)},createValidArea:function(t){return t.buffer(0)},interfaces_:function(){return[]},getClass:function(){return Ti}}),Ri.DensifyTransformer=Ti;var fo=Object.freeze({Densifier:Ri});e(Pi.prototype,{find:function(t){var e=this;do{if(null===e)return null;if(e.dest().equals2D(t))return e;e=e.oNext()}while(e!==this);return null},dest:function(){return this._sym._orig},oNext:function(){return this._sym._next},insert:function(t){if(this.oNext()===this)return this.insertAfter(t),null;var e=this.compareTo(t),n=this;do{var i=n.oNext(),r=i.compareTo(t);if(r!==e||i===this)return n.insertAfter(t),null;n=i}while(n!==this);f.shouldNeverReachHere()},insertAfter:function(t){f.equals(this._orig,t.orig());var e=this.oNext();this._sym.setNext(t),t.sym().setNext(e)},degree:function t(){var t=0,e=this;do t++,e=e.oNext();while(e!==this);return t},equals:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this._orig.equals2D(t)&&this._sym._orig.equals(e)}},deltaY:function(){return this._sym._orig.y-this._orig.y},sym:function(){return this._sym},prev:function(){return this._sym.next()._sym},compareAngularDirection:function(t){var e=this.deltaX(),n=this.deltaY(),i=t.deltaX(),r=t.deltaY();if(e===i&&n===r)return 0;var s=Je.quadrant(e,n),o=Je.quadrant(i,r);return s>o?1:s<o?-1:he.computeOrientation(t._orig,t.dest(),this.dest())},prevNode:function(){for(var t=this;2===t.degree();)if(t=t.prev(),t===this)return null;return t},compareTo:function(t){var e=t,n=this.compareAngularDirection(e);return n},next:function(){return this._next},setSym:function(t){this._sym=t},orig:function(){return this._orig},toString:function(){return"HE("+this._orig.x+" "+this._orig.y+", "+this._sym._orig.x+" "+this._sym._orig.y+")"},setNext:function(t){this._next=t},init:function(t){this.setSym(t),t.setSym(this),this.setNext(t),t.setNext(this)},deltaX:function(){return this._sym._orig.x-this._orig.x},interfaces_:function(){return[]},getClass:function(){return Pi}}),Pi.init=function(t,e){if(null!==t._sym||null!==e._sym||null!==t._next||null!==e._next)throw new IllegalStateException("Edges are already initialized");return t.init(e),t},Pi.create=function(t,e){var n=new Pi(t),i=new Pi(e);return n.init(i),n},h(bi,Pi),e(bi.prototype,{mark:function(){this._isMarked=!0},setMark:function(t){this._isMarked=t},isMarked:function(){return this._isMarked},interfaces_:function(){return[]},getClass:function(){return bi}}),bi.setMarkBoth=function(t,e){t.setMark(e),t.sym().setMark(e)},bi.isMarked=function(t){return t.isMarked()},bi.setMark=function(t,e){t.setMark(e)},bi.markBoth=function(t){t.mark(),t.sym().mark()},bi.mark=function(t){t.mark()},e(Oi.prototype,{insert:function(t,e,n){var i=this.create(t,e);null!==n?n.insert(i):this.vertexMap.put(t,i);var r=this.vertexMap.get(e);return null!==r?r.insert(i.sym()):this.vertexMap.put(e,i.sym()),i},create:function(t,e){var n=this.createEdge(t),i=this.createEdge(e);return Pi.init(n,i),n},createEdge:function(t){return new Pi(t)},addEdge:function(t,e){if(!Oi.isValidEdge(t,e))return null;var n=this.vertexMap.get(t),i=null;if(null!==n&&(i=n.find(e)),null!==i)return i;var r=this.insert(t,e,n);return r},getVertexEdges:function(){return this.vertexMap.values()},findEdge:function(t,e){var n=this.vertexMap.get(t);return null===n?null:n.find(e)},interfaces_:function(){
return[]},getClass:function(){return Oi}}),Oi.isValidEdge=function(t,e){var n=e.compareTo(t);return 0!==n},h(_i,bi),e(_i.prototype,{setStart:function(){this._isStart=!0},isStart:function(){return this._isStart},interfaces_:function(){return[]},getClass:function(){return _i}}),h(Mi,Oi),e(Mi.prototype,{createEdge:function(t){return new _i(t)},interfaces_:function(){return[]},getClass:function(){return Mi}}),e(Di.prototype,{addLine:function(t){this.lines.add(this.factory.createLineString(t.toCoordinateArray()))},updateRingStartEdge:function(t){return t.isStart()||(t=t.sym(),t.isStart())?null===this.ringStartEdge?(this.ringStartEdge=t,null):void(t.orig().compareTo(this.ringStartEdge.orig())<0&&(this.ringStartEdge=t)):null},getResult:function(){return null===this.result&&this.computeResult(),this.result},process:function(t){var e=t.prevNode();null===e&&(e=t),this.stackEdges(e),this.buildLines()},buildRing:function(t){var e=new N,n=t;for(e.add(n.orig().copy(),!1);2===n.sym().degree();){var i=n.next();if(i===t)break;e.add(i.orig().copy(),!1),n=i}e.add(n.dest().copy(),!1),this.addLine(e)},buildLine:function(t){var e=new N,n=t;for(this.ringStartEdge=null,bi.markBoth(n),e.add(n.orig().copy(),!1);2===n.sym().degree();){this.updateRingStartEdge(n);var i=n.next();if(i===t)return this.buildRing(this.ringStartEdge),null;e.add(i.orig().copy(),!1),n=i,bi.markBoth(n)}e.add(n.dest().copy(),!1),this.stackEdges(n.sym()),this.addLine(e)},stackEdges:function(t){var e=t;do bi.isMarked(e)||this.nodeEdgeStack.add(e),e=e.oNext();while(e!==t)},computeResult:function(){for(var t=this.graph.getVertexEdges(),e=t.iterator();e.hasNext();){var n=e.next();bi.isMarked(n)||this.process(n)}this.result=this.factory.buildGeometry(this.lines)},buildLines:function(){for(;!this.nodeEdgeStack.empty();){var t=this.nodeEdgeStack.pop();bi.isMarked(t)||this.buildLine(t)}},add:function(){if(arguments[0]instanceof B){var t=arguments[0];t.apply({interfaces_:function(){return[q]},filter:function(t){t instanceof St&&this.add(t)}})}else if(R(arguments[0],v))for(var e=arguments[0],n=e.iterator();n.hasNext();){var i=n.next();this.add(i)}else if(arguments[0]instanceof St){var r=arguments[0];null===this.factory&&(this.factory=r.getFactory());for(var s=r.getCoordinateSequence(),o=!1,n=1;n<s.size();n++){var a=this.graph.addEdge(s.getCoordinate(n-1),s.getCoordinate(n));null!==a&&(o||(a.setStart(),o=!0))}}},interfaces_:function(){return[]},getClass:function(){return Di}}),Di.dissolve=function(t){var e=new Di;return e.add(t),e.getResult()};var go=Object.freeze({LineDissolver:Di}),po=Object.freeze({GeometryGraph:$n});e(Ai.prototype,{hasChildren:function(){for(var t=0;t<4;t++)if(null!==this.subnode[t])return!0;return!1},isPrunable:function(){return!(this.hasChildren()||this.hasItems())},addAllItems:function(t){t.addAll(this.items);for(var e=0;e<4;e++)null!==this.subnode[e]&&this.subnode[e].addAllItems(t);return t},getNodeCount:function(){for(var t=0,e=0;e<4;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+1},size:function(){for(var t=0,e=0;e<4;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+this.items.size()},addAllItemsFromOverlapping:function(t,e){if(!this.isSearchMatch(t))return null;e.addAll(this.items);for(var n=0;n<4;n++)null!==this.subnode[n]&&this.subnode[n].addAllItemsFromOverlapping(t,e)},visitItems:function(t,e){for(var n=this.items.iterator();n.hasNext();)e.visitItem(n.next())},hasItems:function(){return!this.items.isEmpty()},remove:function(t,e){if(!this.isSearchMatch(t))return!1;for(var n=!1,i=0;i<4;i++)if(null!==this.subnode[i]&&(n=this.subnode[i].remove(t,e))){this.subnode[i].isPrunable()&&(this.subnode[i]=null);break}return n?n:n=this.items.remove(e)},visit:function(t,e){if(!this.isSearchMatch(t))return null;this.visitItems(t,e);for(var n=0;n<4;n++)null!==this.subnode[n]&&this.subnode[n].visit(t,e)},getItems:function(){return this.items},depth:function(){for(var t=0,e=0;e<4;e++)if(null!==this.subnode[e]){var n=this.subnode[e].depth();n>t&&(t=n)}return t+1},isEmpty:function t(){var t=!0;this.items.isEmpty()||(t=!1);for(var e=0;e<4;e++)null!==this.subnode[e]&&(this.subnode[e].isEmpty()||(t=!1));return t},add:function(t){this.items.add(t)},interfaces_:function(){return[u]},getClass:function(){return Ai}}),Ai.getSubnodeIndex=function(t,e,n){var i=-1;return t.getMinX()>=e&&(t.getMinY()>=n&&(i=3),t.getMaxY()<=n&&(i=1)),t.getMaxX()<=e&&(t.getMinY()>=n&&(i=2),t.getMaxY()<=n&&(i=0)),i},e(Fi.prototype,{getLevel:function(){return this.level},computeKey:function(){if(1===arguments.length){var t=arguments[0];for(this.level=Fi.computeQuadLevel(t),this.env=new C,this.computeKey(this.level,t);!this.env.contains(t);)this.level+=1,this.computeKey(this.level,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=gi.powerOf2(e);this.pt.x=Math.floor(n.getMinX()/i)*i,this.pt.y=Math.floor(n.getMinY()/i)*i,this.env.init(this.pt.x,this.pt.x+i,this.pt.y,this.pt.y+i)}},getEnvelope:function(){return this.env},getCentre:function(){return new g((this.env.getMinX()+this.env.getMaxX())/2,(this.env.getMinY()+this.env.getMaxY())/2)},getPoint:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return Fi}}),Fi.computeQuadLevel=function(t){var e=t.getWidth(),n=t.getHeight(),i=e>n?e:n,r=gi.exponent(i)+1;return r},h(Gi,Ai),e(Gi.prototype,{find:function(t){var e=Ai.getSubnodeIndex(t,this.centrex,this.centrey);if(e===-1)return this;if(null!==this.subnode[e]){var n=this.subnode[e];return n.find(t)}return this},isSearchMatch:function(t){return this.env.intersects(t)},getSubnode:function(t){return null===this.subnode[t]&&(this.subnode[t]=this.createSubnode(t)),this.subnode[t]},getEnvelope:function(){return this.env},getNode:function(t){var e=Ai.getSubnodeIndex(t,this.centrex,this.centrey);if(e!==-1){var n=this.getSubnode(e);return n.getNode(t)}return this},createSubnode:function(t){var e=0,n=0,i=0,r=0;switch(t){case 0:e=this.env.getMinX(),n=this.centrex,i=this.env.getMinY(),r=this.centrey;break;case 1:e=this.centrex,n=this.env.getMaxX(),i=this.env.getMinY(),r=this.centrey;break;case 2:e=this.env.getMinX(),n=this.centrex,i=this.centrey,r=this.env.getMaxY();break;case 3:e=this.centrex,n=this.env.getMaxX(),i=this.centrey,r=this.env.getMaxY()}var s=new C(e,n,i,r),o=new Gi(s,this.level-1);return o},insertNode:function(t){f.isTrue(null===this.env||this.env.contains(t.env));var e=Ai.getSubnodeIndex(t.env,this.centrex,this.centrey);if(t.level===this.level-1)this.subnode[e]=t;else{var n=this.createSubnode(e);n.insertNode(t),this.subnode[e]=n}},interfaces_:function(){return[]},getClass:function(){return Gi}}),Gi.createNode=function(t){var e=new Fi(t),n=new Gi(e.getEnvelope(),e.getLevel());return n},Gi.createExpanded=function(t,e){var n=new C(e);null!==t&&n.expandToInclude(t.env);var i=Gi.createNode(n);return null!==t&&i.insertNode(t),i},h(qi,Ai),e(qi.prototype,{insert:function(t,e){var n=Ai.getSubnodeIndex(t,qi.origin.x,qi.origin.y);if(n===-1)return this.add(e),null;var i=this.subnode[n];if(null===i||!i.getEnvelope().contains(t)){var r=Gi.createExpanded(i,t);this.subnode[n]=r}this.insertContained(this.subnode[n],t,e)},isSearchMatch:function(t){return!0},insertContained:function(t,e,n){f.isTrue(t.getEnvelope().contains(e));var i=mi.isZeroWidth(e.getMinX(),e.getMaxX()),r=mi.isZeroWidth(e.getMinY(),e.getMaxY()),s=null;s=i||r?t.find(e):t.getNode(e),s.add(n)},interfaces_:function(){return[]},getClass:function(){return qi}}),qi.origin=new g(0,0),e(Bi.prototype,{size:function(){return null!==this.root?this.root.size():0},insert:function(t,e){this.collectStats(t);var n=Bi.ensureExtent(t,this.minExtent);this.root.insert(n,e)},query:function(){if(1===arguments.length){var t=arguments[0],e=new Yn;return this.query(t,e),e.getItems()}if(2===arguments.length){var n=arguments[0],i=arguments[1];this.root.visit(n,i)}},queryAll:function(){var t=new I;return this.root.addAllItems(t),t},remove:function(t,e){var n=Bi.ensureExtent(t,this.minExtent);return this.root.remove(n,e)},collectStats:function(t){var e=t.getWidth();e<this.minExtent&&e>0&&(this.minExtent=e);var n=t.getHeight();n<this.minExtent&&n>0&&(this.minExtent=n)},depth:function(){return null!==this.root?this.root.depth():0},isEmpty:function(){return null===this.root},interfaces_:function(){return[Fe,u]},getClass:function(){return Bi}}),Bi.ensureExtent=function(t,e){var n=t.getMinX(),i=t.getMaxX(),r=t.getMinY(),s=t.getMaxY();return n!==i&&r!==s?t:(n===i&&(n-=e/2,i=n+e/2),r===s&&(r-=e/2,s=r+e/2),new C(n,i,r,s))},Bi.serialVersionUID=-0x678b60c967a25400;var vo=Object.freeze({Quadtree:Bi}),mo=Object.freeze({STRtree:ke}),yo=Object.freeze({quadtree:vo,strtree:mo}),xo=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"];e(zi.prototype,{read:function(t){var e=void 0;e="string"==typeof t?JSON.parse(t):t;var n=e.type;if(!Eo[n])throw new Error("Unknown GeoJSON type: "+e.type);return xo.indexOf(n)!==-1?Eo[n].apply(this,[e.coordinates]):"GeometryCollection"===n?Eo[n].apply(this,[e.geometries]):Eo[n].apply(this,[e])},write:function(t){var e=t.getGeometryType();if(!Io[e])throw new Error("Geometry is not supported");return Io[e].apply(this,[t])}});var Eo={Feature:function(t){var e={};for(var n in t)e[n]=t[n];if(t.geometry){var i=t.geometry.type;if(!Eo[i])throw new Error("Unknown GeoJSON type: "+t.type);e.geometry=this.read(t.geometry)}return t.bbox&&(e.bbox=Eo.bbox.apply(this,[t.bbox])),e},FeatureCollection:function(t){var e={};if(t.features){e.features=[];for(var n=0;n<t.features.length;++n)e.features.push(this.read(t.features[n]))}return t.bbox&&(e.bbox=this.parse.bbox.apply(this,[t.bbox])),e},coordinates:function t(e){for(var t=[],n=0;n<e.length;++n){var i=e[n];t.push(new g(i[0],i[1]))}return t},bbox:function(t){return this.geometryFactory.createLinearRing([new g(t[0],t[1]),new g(t[2],t[1]),new g(t[2],t[3]),new g(t[0],t[3]),new g(t[0],t[1])])},Point:function(t){var e=new g(t[0],t[1]);return this.geometryFactory.createPoint(e)},MultiPoint:function(t){for(var e=[],n=0;n<t.length;++n)e.push(Eo.Point.apply(this,[t[n]]));return this.geometryFactory.createMultiPoint(e)},LineString:function(t){var e=Eo.coordinates.apply(this,[t]);return this.geometryFactory.createLineString(e)},MultiLineString:function(t){for(var e=[],n=0;n<t.length;++n)e.push(Eo.LineString.apply(this,[t[n]]));return this.geometryFactory.createMultiLineString(e)},Polygon:function(t){for(var e=Eo.coordinates.apply(this,[t[0]]),n=this.geometryFactory.createLinearRing(e),i=[],r=1;r<t.length;++r){var s=t[r],o=Eo.coordinates.apply(this,[s]),a=this.geometryFactory.createLinearRing(o);i.push(a)}return this.geometryFactory.createPolygon(n,i)},MultiPolygon:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(Eo.Polygon.apply(this,[i]))}return this.geometryFactory.createMultiPolygon(e)},GeometryCollection:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(this.read(i))}return this.geometryFactory.createGeometryCollection(e)}},Io={coordinate:function(t){return[t.x,t.y]},Point:function(t){var e=Io.coordinate.apply(this,[t.getCoordinate()]);return{type:"Point",coordinates:e}},MultiPoint:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],r=Io.Point.apply(this,[i]);e.push(r.coordinates)}return{type:"MultiPoint",coordinates:e}},LineString:function(t){for(var e=[],n=t.getCoordinates(),i=0;i<n.length;++i){var r=n[i];e.push(Io.coordinate.apply(this,[r]))}return{type:"LineString",coordinates:e}},MultiLineString:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],r=Io.LineString.apply(this,[i]);e.push(r.coordinates)}return{type:"MultiLineString",coordinates:e}},Polygon:function(t){var e=[],n=Io.LineString.apply(this,[t.shell]);e.push(n.coordinates);for(var i=0;i<t.holes.length;++i){var r=t.holes[i],s=Io.LineString.apply(this,[r]);e.push(s.coordinates)}return{type:"Polygon",coordinates:e}},MultiPolygon:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],r=Io.Polygon.apply(this,[i]);e.push(r.coordinates)}return{type:"MultiPolygon",coordinates:e}},GeometryCollection:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],r=i.getGeometryType();e.push(Io[r].apply(this,[i]))}return{type:"GeometryCollection",geometries:e}}};e(Vi.prototype,{read:function(t){var e=this.parser.read(t);return this.precisionModel.getType()===ee.FIXED&&this.reducePrecision(e),e},reducePrecision:function(t){var e,n;if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(e=0,n=t.points.length;e<n;e++)this.precisionModel.makePrecise(t.points[e]);else if(t.geometries)for(e=0,n=t.geometries.length;e<n;e++)this.reducePrecision(t.geometries[e])}}),e(ki.prototype,{write:function(t){return this.parser.write(t)}}),e(Yi.prototype,{read:function(t){var e=this.parser.read(t);return this.precisionModel.getType()===ee.FIXED&&this.reducePrecision(e),e},reducePrecision:function(t){if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(var e=0,n=t.points.coordinates.length;e<n;e++)this.precisionModel.makePrecise(t.points.coordinates[e]);else if(t.geometries)for(var i=0,r=t.geometries.length;i<r;i++)this.reducePrecision(t.geometries[i])}}),e(Xi.prototype,{read:function(t){var e=this.ol;return t instanceof e.geom.Point?this.convertFromPoint(t):t instanceof e.geom.LineString?this.convertFromLineString(t):t instanceof e.geom.LinearRing?this.convertFromLinearRing(t):t instanceof e.geom.Polygon?this.convertFromPolygon(t):t instanceof e.geom.MultiPoint?this.convertFromMultiPoint(t):t instanceof e.geom.MultiLineString?this.convertFromMultiLineString(t):t instanceof e.geom.MultiPolygon?this.convertFromMultiPolygon(t):t instanceof e.geom.GeometryCollection?this.convertFromCollection(t):void 0},convertFromPoint:function(t){var e=t.getCoordinates();return this.geometryFactory.createPoint(new g(e[0],e[1]))},convertFromLineString:function(t){return this.geometryFactory.createLineString(t.getCoordinates().map(function(t){return new g(t[0],t[1])}))},convertFromLinearRing:function(t){return this.geometryFactory.createLinearRing(t.getCoordinates().map(function(t){return new g(t[0],t[1])}))},convertFromPolygon:function(t){for(var e=t.getLinearRings(),n=null,i=[],r=0;r<e.length;r++){var s=this.convertFromLinearRing(e[r]);0===r?n=s:i.push(s)}return this.geometryFactory.createPolygon(n,i)},convertFromMultiPoint:function(t){var e=t.getPoints().map(function(t){return this.convertFromPoint(t)},this);return this.geometryFactory.createMultiPoint(e)},convertFromMultiLineString:function(t){var e=t.getLineStrings().map(function(t){return this.convertFromLineString(t)},this);return this.geometryFactory.createMultiLineString(e)},convertFromMultiPolygon:function(t){var e=t.getPolygons().map(function(t){return this.convertFromPolygon(t)},this);return this.geometryFactory.createMultiPolygon(e)},convertFromCollection:function(t){var e=t.getGeometries().map(function(t){return this.read(t)},this);return this.geometryFactory.createGeometryCollection(e)},write:function(t){return"Point"===t.getGeometryType()?this.convertToPoint(t.getCoordinate()):"LineString"===t.getGeometryType()?this.convertToLineString(t):"LinearRing"===t.getGeometryType()?this.convertToLinearRing(t):"Polygon"===t.getGeometryType()?this.convertToPolygon(t):"MultiPoint"===t.getGeometryType()?this.convertToMultiPoint(t):"MultiLineString"===t.getGeometryType()?this.convertToMultiLineString(t):"MultiPolygon"===t.getGeometryType()?this.convertToMultiPolygon(t):"GeometryCollection"===t.getGeometryType()?this.convertToCollection(t):void 0},convertToPoint:function(t){return new this.ol.geom.Point([t.x,t.y])},convertToLineString:function(t){var e=t.points.coordinates.map(Ui);return new this.ol.geom.LineString(e)},convertToLinearRing:function(t){var e=t.points.coordinates.map(Ui);return new this.ol.geom.LinearRing(e)},convertToPolygon:function(t){for(var e=[t.shell.points.coordinates.map(Ui)],n=0;n<t.holes.length;n++)e.push(t.holes[n].points.coordinates.map(Ui));return new this.ol.geom.Polygon(e)},convertToMultiPoint:function(t){return new this.ol.geom.MultiPoint(t.getCoordinates().map(Ui))},convertToMultiLineString:function(t){for(var e=[],n=0;n<t.geometries.length;n++)e.push(this.convertToLineString(t.geometries[n]).getCoordinates());return new this.ol.geom.MultiLineString(e)},convertToMultiPolygon:function(t){for(var e=[],n=0;n<t.geometries.length;n++)e.push(this.convertToPolygon(t.geometries[n]).getCoordinates());return new this.ol.geom.MultiPolygon(e)},convertToCollection:function(t){for(var e=[],n=0;n<t.geometries.length;n++){var i=t.geometries[n];e.push(this.write(i))}return new this.ol.geom.GeometryCollection(e)}});var No=Object.freeze({GeoJSONReader:Vi,GeoJSONWriter:ki,OL3Parser:Xi,WKTReader:Yi,WKTWriter:se});e(Hi.prototype,{rescale:function(){if(R(arguments[0],v))for(var t=arguments[0],e=t.iterator();e.hasNext();){var n=e.next();this.rescale(n.getCoordinates())}else if(arguments[0]instanceof Array){var i=arguments[0],r=null,s=null;2===i.length&&(r=new g(i[0]),s=new g(i[1]));for(var e=0;e<i.length;e++)i[e].x=i[e].x/this.scaleFactor+this.offsetX,i[e].y=i[e].y/this.scaleFactor+this.offsetY;2===i.length&&i[0].equals2D(i[1])&&A.out.println(i)}},scale:function(){if(R(arguments[0],v)){for(var t=arguments[0],e=new I,n=t.iterator();n.hasNext();){var i=n.next();e.add(new Ke(this.scale(i.getCoordinates()),i.getData()))}return e}if(arguments[0]instanceof Array){for(var r=arguments[0],s=new Array(r.length).fill(null),n=0;n<r.length;n++)s[n]=new g(Math.round((r[n].x-this.offsetX)*this.scaleFactor),Math.round((r[n].y-this.offsetY)*this.scaleFactor),r[n].z);var o=H.removeRepeatedPoints(s);return o}},isIntegerPrecision:function(){return 1===this.scaleFactor},getNodedSubstrings:function(){var t=this.noder.getNodedSubstrings();return this.isScaled&&this.rescale(t),t},computeNodes:function(t){var e=t;this.isScaled&&(e=this.scale(t)),this.noder.computeNodes(e)},interfaces_:function(){return[tn]},getClass:function(){return Hi}});var Co=Object.freeze({MCIndexNoder:nn,ScaledNoder:Hi,SegmentString:be});e(Wi.prototype,{isSimpleMultiPoint:function(t){if(t.isEmpty())return!0;for(var e=new at,n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n),r=i.getCoordinate();if(e.contains(r))return this.nonSimpleLocation=r,!1;e.add(r)}return!0},isSimplePolygonal:function(t){for(var e=kn.getLines(t),n=e.iterator();n.hasNext();){var i=n.next();if(!this.isSimpleLinearGeometry(i))return!1}return!0},hasClosedEndpointIntersection:function(t){for(var e=new rt,n=t.getEdgeIterator();n.hasNext();){var i=n.next(),r=(i.getMaximumSegmentIndex(),i.isClosed()),s=i.getCoordinate(0);this.addEndpoint(e,s,r);var o=i.getCoordinate(i.getNumPoints()-1);this.addEndpoint(e,o,r)}for(var n=e.values().iterator();n.hasNext();){var a=n.next();if(a.isClosed&&2!==a.degree)return this.nonSimpleLocation=a.getCoordinate(),!0}return!1},getNonSimpleLocation:function(){return this.nonSimpleLocation},isSimpleLinearGeometry:function(t){if(t.isEmpty())return!0;var e=new $n(0,t),n=new ae,i=e.computeSelfNodes(n,!0);return!i.hasIntersection()||(i.hasProperIntersection()?(this.nonSimpleLocation=i.getProperIntersectionPoint(),!1):!this.hasNonEndpointIntersection(e)&&(!this.isClosedEndpointsInInterior||!this.hasClosedEndpointIntersection(e)))},hasNonEndpointIntersection:function(t){for(var e=t.getEdgeIterator();e.hasNext();)for(var n=e.next(),i=n.getMaximumSegmentIndex(),r=n.getEdgeIntersectionList().iterator();r.hasNext();){var s=r.next();if(!s.isEndPoint(i))return this.nonSimpleLocation=s.getCoordinate(),!0}return!1},addEndpoint:function(t,e,n){var i=t.get(e);null===i&&(i=new ji(e),t.put(e,i)),i.addEndpoint(n)},computeSimple:function(t){return this.nonSimpleLocation=null,!!t.isEmpty()||(t instanceof St?this.isSimpleLinearGeometry(t):t instanceof gt?this.isSimpleLinearGeometry(t):t instanceof Pt?this.isSimpleMultiPoint(t):R(t,Rt)?this.isSimplePolygonal(t):!(t instanceof ft)||this.isSimpleGeometryCollection(t))},isSimple:function(){return this.nonSimpleLocation=null,this.computeSimple(this.inputGeom)},isSimpleGeometryCollection:function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);if(!this.computeSimple(n))return!1}return!0},interfaces_:function(){return[]},getClass:function(){return Wi}}),e(ji.prototype,{addEndpoint:function(t){this.degree++,this.isClosed|=t},getCoordinate:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return ji}}),Wi.EndpointInfo=ji,e(Ki.prototype,{getEndCapStyle:function(){return this.endCapStyle},isSingleSided:function(){return this._isSingleSided},setQuadrantSegments:function(t){this.quadrantSegments=t,0===this.quadrantSegments&&(this.joinStyle=Ki.JOIN_BEVEL),this.quadrantSegments<0&&(this.joinStyle=Ki.JOIN_MITRE,this.mitreLimit=Math.abs(this.quadrantSegments)),t<=0&&(this.quadrantSegments=1),this.joinStyle!==Ki.JOIN_ROUND&&(this.quadrantSegments=Ki.DEFAULT_QUADRANT_SEGMENTS)},getJoinStyle:function(){return this.joinStyle},setJoinStyle:function(t){this.joinStyle=t},setSimplifyFactor:function(t){this.simplifyFactor=t<0?0:t},getSimplifyFactor:function(){return this.simplifyFactor},getQuadrantSegments:function(){return this.quadrantSegments},setEndCapStyle:function(t){this.endCapStyle=t},getMitreLimit:function(){return this.mitreLimit},setMitreLimit:function(t){this.mitreLimit=t},setSingleSided:function(t){this._isSingleSided=t},interfaces_:function(){return[]},getClass:function(){return Ki}}),Ki.bufferDistanceError=function(t){var e=Math.PI/2/t;return 1-Math.cos(e/2)},Ki.CAP_ROUND=1,Ki.CAP_FLAT=2,Ki.CAP_SQUARE=3,Ki.JOIN_ROUND=1,Ki.JOIN_MITRE=2,Ki.JOIN_BEVEL=3,Ki.DEFAULT_QUADRANT_SEGMENTS=8,Ki.DEFAULT_MITRE_LIMIT=5,Ki.DEFAULT_SIMPLIFY_FACTOR=.01,e(Zi.prototype,{getCoordinate:function(){return this.minCoord},getRightmostSide:function(t,e){var n=this.getRightmostSideOfSegment(t,e);return n<0&&(n=this.getRightmostSideOfSegment(t,e-1)),n<0&&(this.minCoord=null,this.checkForRightmostCoordinate(t)),n},findRightmostEdgeAtVertex:function(){var t=this.minDe.getEdge().getCoordinates();f.isTrue(this.minIndex>0&&this.minIndex<t.length,"rightmost point expected to be interior vertex of edge");var e=t[this.minIndex-1],n=t[this.minIndex+1],i=he.computeOrientation(this.minCoord,n,e),r=!1;e.y<this.minCoord.y&&n.y<this.minCoord.y&&i===he.COUNTERCLOCKWISE?r=!0:e.y>this.minCoord.y&&n.y>this.minCoord.y&&i===he.CLOCKWISE&&(r=!0),r&&(this.minIndex=this.minIndex-1)},getRightmostSideOfSegment:function(t,e){var n=t.getEdge(),i=n.getCoordinates();if(e<0||e+1>=i.length)return-1;if(i[e].y===i[e+1].y)return-1;var r=cn.LEFT;return i[e].y<i[e+1].y&&(r=cn.RIGHT),r},getEdge:function(){return this.orientedDe},checkForRightmostCoordinate:function(t){for(var e=t.getEdge().getCoordinates(),n=0;n<e.length-1;n++)(null===this.minCoord||e[n].x>this.minCoord.x)&&(this.minDe=t,this.minIndex=n,this.minCoord=e[n])},findRightmostEdgeAtNode:function(){var t=this.minDe.getNode(),e=t.getEdges();this.minDe=e.getRightmostEdge(),this.minDe.isForward()||(this.minDe=this.minDe.getSym(),this.minIndex=this.minDe.getEdge().getCoordinates().length-1)},findEdge:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();n.isForward()&&this.checkForRightmostCoordinate(n)}f.isTrue(0!==this.minIndex||this.minCoord.equals(this.minDe.getCoordinate()),"inconsistency in rightmost processing"),0===this.minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this.orientedDe=this.minDe;var i=this.getRightmostSide(this.minDe,this.minIndex);i===cn.LEFT&&(this.orientedDe=this.minDe.getSym())},interfaces_:function(){return[]},getClass:function(){return Zi}}),Qi.prototype.addLast=function(t){this.array_.push(t)},Qi.prototype.removeFirst=function(){return this.array_.shift()},Qi.prototype.isEmpty=function(){return 0===this.array_.length},e(Ji.prototype,{clearVisitedEdges:function(){for(var t=this.dirEdgeList.iterator();t.hasNext();){var e=t.next();e.setVisited(!1)}},getRightmostCoordinate:function(){return this.rightMostCoord},computeNodeDepth:function(t){for(var e=null,n=t.getEdges().iterator();n.hasNext();){var i=n.next();if(i.isVisited()||i.getSym().isVisited()){e=i;break}}if(null===e)throw new sn("unable to find edge to compute depths at "+t.getCoordinate());t.getEdges().computeDepths(e);for(var n=t.getEdges().iterator();n.hasNext();){var i=n.next();i.setVisited(!0),this.copySymDepths(i)}},computeDepth:function(t){this.clearVisitedEdges();var e=this.finder.getEdge();e.getNode(),e.getLabel();e.setEdgeDepths(cn.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)},create:function(t){this.addReachable(t),this.finder.findEdge(this.dirEdgeList),this.rightMostCoord=this.finder.getCoordinate()},findResultEdges:function(){for(var t=this.dirEdgeList.iterator();t.hasNext();){var e=t.next();e.getDepth(cn.RIGHT)>=1&&e.getDepth(cn.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}},computeDepths:function(t){var e=new J,n=new Qi,i=t.getNode();for(n.addLast(i),e.add(i),t.setVisited(!0);!n.isEmpty();){var r=n.removeFirst();e.add(r),this.computeNodeDepth(r);for(var s=r.getEdges().iterator();s.hasNext();){var o=s.next(),a=o.getSym();if(!a.isVisited()){var u=a.getNode();e.contains(u)||(n.addLast(u),e.add(u))}}}},compareTo:function(t){var e=t;return this.rightMostCoord.x<e.rightMostCoord.x?-1:this.rightMostCoord.x>e.rightMostCoord.x?1:0},getEnvelope:function(){if(null===this.env){for(var t=new C,e=this.dirEdgeList.iterator();e.hasNext();)for(var n=e.next(),i=n.getEdge().getCoordinates(),r=0;r<i.length-1;r++)t.expandToInclude(i[r]);this.env=t}return this.env},addReachable:function(t){var e=new pe;for(e.add(t);!e.empty();){var n=e.pop();this.add(n,e)}},copySymDepths:function(t){var e=t.getSym();e.setDepth(cn.LEFT,t.getDepth(cn.RIGHT)),e.setDepth(cn.RIGHT,t.getDepth(cn.LEFT))},add:function(t,e){t.setVisited(!0),this.nodes.add(t);for(var n=t.getEdges().iterator();n.hasNext();){var i=n.next();this.dirEdgeList.add(i);var r=i.getSym(),s=r.getNode();s.isVisited()||e.push(s)}},getNodes:function(){return this.nodes},getDirectedEdges:function(){return this.dirEdgeList},interfaces_:function(){return[s]},getClass:function(){return Ji}}),e($i.prototype,{isDeletable:function(t,e,n,i){var r=this.inputLine[t],s=this.inputLine[e],o=this.inputLine[n];return!!this.isConcave(r,s,o)&&(!!this.isShallow(r,s,o,i)&&this.isShallowSampled(r,s,t,n,i))},deleteShallowConcavities:function(){for(var t=1,e=(this.inputLine.length-1,this.findNextNonDeletedIndex(t)),n=this.findNextNonDeletedIndex(e),i=!1;n<this.inputLine.length;){var r=!1;this.isDeletable(t,e,n,this.distanceTol)&&(this.isDeleted[e]=$i.DELETE,r=!0,i=!0),t=r?n:e,e=this.findNextNonDeletedIndex(t),n=this.findNextNonDeletedIndex(e)}return i},isShallowConcavity:function(t,e,n,i){var r=he.computeOrientation(t,e,n),s=r===this.angleOrientation;if(!s)return!1;var o=he.distancePointLine(e,t,n);return o<i},isShallowSampled:function(t,e,n,i,r){var s=Math.trunc((i-n)/$i.NUM_PTS_TO_CHECK);s<=0&&(s=1);for(var o=n;o<i;o+=s)if(!this.isShallow(t,e,this.inputLine[o],r))return!1;return!0},isConcave:function t(e,n,i){var r=he.computeOrientation(e,n,i),t=r===this.angleOrientation;return t},simplify:function(t){this.distanceTol=Math.abs(t),t<0&&(this.angleOrientation=he.CLOCKWISE),this.isDeleted=new Array(this.inputLine.length).fill(null);var e=!1;do e=this.deleteShallowConcavities();while(e);return this.collapseLine()},findNextNonDeletedIndex:function(t){for(var e=t+1;e<this.inputLine.length&&this.isDeleted[e]===$i.DELETE;)e++;return e},isShallow:function(t,e,n,i){var r=he.distancePointLine(e,t,n);return r<i},collapseLine:function(){for(var t=new N,e=0;e<this.inputLine.length;e++)this.isDeleted[e]!==$i.DELETE&&t.add(this.inputLine[e]);return t.toCoordinateArray()},interfaces_:function(){return[]},getClass:function(){return $i}}),$i.simplify=function(t,e){var n=new $i(t);return n.simplify(e)},$i.INIT=0,$i.DELETE=1,$i.KEEP=1,$i.NUM_PTS_TO_CHECK=10,e(tr.prototype,{getCoordinates:function(){var t=this.ptList.toArray(tr.COORDINATE_ARRAY_TYPE);return t},setPrecisionModel:function(t){this.precisionModel=t},addPt:function(t){var e=new g(t);return this.precisionModel.makePrecise(e),this.isRedundant(e)?null:void this.ptList.add(e)},reverse:function(){},addPts:function(t,e){if(e)for(var n=0;n<t.length;n++)this.addPt(t[n]);else for(var n=t.length-1;n>=0;n--)this.addPt(t[n])},isRedundant:function(t){if(this.ptList.size()<1)return!1;var e=this.ptList.get(this.ptList.size()-1),n=t.distance(e);return n<this.minimimVertexDistance},toString:function(){var t=new ie,e=t.createLineString(this.getCoordinates());return e.toString()},closeRing:function(){if(this.ptList.size()<1)return null;var t=new g(this.ptList.get(0)),e=this.ptList.get(this.ptList.size()-1),n=null;return this.ptList.size()>=2&&(n=this.ptList.get(this.ptList.size()-2)),t.equals(e)?null:void this.ptList.add(t)},setMinimumVertexDistance:function(t){this.minimimVertexDistance=t},interfaces_:function(){return[]},getClass:function(){return tr}}),tr.COORDINATE_ARRAY_TYPE=new Array(0).fill(null),e(er.prototype,{addNextSegment:function(t,e){if(this.s0=this.s1,this.s1=this.s2,this.s2=t,this.seg0.setCoordinates(this.s0,this.s1),this.computeOffsetSegment(this.seg0,this.side,this.distance,this.offset0),this.seg1.setCoordinates(this.s1,this.s2),this.computeOffsetSegment(this.seg1,this.side,this.distance,this.offset1),this.s1.equals(this.s2))return null;var n=he.computeOrientation(this.s0,this.s1,this.s2),i=n===he.CLOCKWISE&&this.side===cn.LEFT||n===he.COUNTERCLOCKWISE&&this.side===cn.RIGHT;0===n?this.addCollinear(e):i?this.addOutsideTurn(n,e):this.addInsideTurn(n,e)},addLineEndCap:function(t,e){var n=new ce(t,e),i=new ce;this.computeOffsetSegment(n,cn.LEFT,this.distance,i);var r=new ce;this.computeOffsetSegment(n,cn.RIGHT,this.distance,r);var s=e.x-t.x,o=e.y-t.y,a=Math.atan2(o,s);switch(this.bufParams.getEndCapStyle()){case Ki.CAP_ROUND:this.segList.addPt(i.p1),this.addFilletArc(e,a+Math.PI/2,a-Math.PI/2,he.CLOCKWISE,this.distance),this.segList.addPt(r.p1);break;case Ki.CAP_FLAT:this.segList.addPt(i.p1),this.segList.addPt(r.p1);break;case Ki.CAP_SQUARE:var u=new g;u.x=Math.abs(this.distance)*Math.cos(a),u.y=Math.abs(this.distance)*Math.sin(a);var l=new g(i.p1.x+u.x,i.p1.y+u.y),h=new g(r.p1.x+u.x,r.p1.y+u.y);this.segList.addPt(l),this.segList.addPt(h)}},getCoordinates:function(){var t=this.segList.getCoordinates();return t},addMitreJoin:function(t,e,n,i){var r=!0,s=null;try{s=F.intersection(e.p0,e.p1,n.p0,n.p1);var o=i<=0?1:s.distance(t)/Math.abs(i);o>this.bufParams.getMitreLimit()&&(r=!1)}catch(t){if(!(t instanceof w))throw t;s=new g(0,0),r=!1}finally{}r?this.segList.addPt(s):this.addLimitedMitreJoin(e,n,i,this.bufParams.getMitreLimit())},addFilletCorner:function(t,e,n,i,r){var s=e.x-t.x,o=e.y-t.y,a=Math.atan2(o,s),u=n.x-t.x,l=n.y-t.y,h=Math.atan2(l,u);i===he.CLOCKWISE?a<=h&&(a+=2*Math.PI):a>=h&&(a-=2*Math.PI),this.segList.addPt(e),this.addFilletArc(t,a,h,i,r),this.segList.addPt(n)},addOutsideTurn:function(t,e){return this.offset0.p1.distance(this.offset1.p0)<this.distance*er.OFFSET_SEGMENT_SEPARATION_FACTOR?(this.segList.addPt(this.offset0.p1),null):void(this.bufParams.getJoinStyle()===Ki.JOIN_MITRE?this.addMitreJoin(this.s1,this.offset0,this.offset1,this.distance):this.bufParams.getJoinStyle()===Ki.JOIN_BEVEL?this.addBevelJoin(this.offset0,this.offset1):(e&&this.segList.addPt(this.offset0.p1),this.addFilletCorner(this.s1,this.offset0.p1,this.offset1.p0,t,this.distance),this.segList.addPt(this.offset1.p0)))},createSquare:function(t){this.segList.addPt(new g(t.x+this.distance,t.y+this.distance)),this.segList.addPt(new g(t.x+this.distance,t.y-this.distance)),this.segList.addPt(new g(t.x-this.distance,t.y-this.distance)),this.segList.addPt(new g(t.x-this.distance,t.y+this.distance)),this.segList.closeRing()},addSegments:function(t,e){this.segList.addPts(t,e)},addFirstSegment:function(){this.segList.addPt(this.offset1.p0)},addLastSegment:function(){this.segList.addPt(this.offset1.p1)},initSideSegments:function(t,e,n){this.s1=t,this.s2=e,this.side=n,this.seg1.setCoordinates(t,e),this.computeOffsetSegment(this.seg1,n,this.distance,this.offset1);
},addLimitedMitreJoin:function(t,e,n,i){var r=this.seg0.p1,s=Ci.angle(r,this.seg0.p0),o=(Ci.angle(r,this.seg1.p1),Ci.angleBetweenOriented(this.seg0.p0,r,this.seg1.p1)),a=o/2,u=Ci.normalize(s+a),l=Ci.normalize(u+Math.PI),h=i*n,c=h*Math.abs(Math.sin(a)),f=n-c,d=r.x+h*Math.cos(l),p=r.y+h*Math.sin(l),v=new g(d,p),m=new ce(r,v),y=m.pointAlongOffset(1,f),x=m.pointAlongOffset(1,-f);this.side===cn.LEFT?(this.segList.addPt(y),this.segList.addPt(x)):(this.segList.addPt(x),this.segList.addPt(y))},computeOffsetSegment:function(t,e,n,i){var r=e===cn.LEFT?1:-1,s=t.p1.x-t.p0.x,o=t.p1.y-t.p0.y,a=Math.sqrt(s*s+o*o),u=r*n*s/a,l=r*n*o/a;i.p0.x=t.p0.x-l,i.p0.y=t.p0.y+u,i.p1.x=t.p1.x-l,i.p1.y=t.p1.y+u},addFilletArc:function(t,e,n,i,r){var s=i===he.CLOCKWISE?-1:1,o=Math.abs(e-n),a=Math.trunc(o/this.filletAngleQuantum+.5);if(a<1)return null;var u=null,l=null;u=0,l=o/a;for(var h=u,c=new g;h<o;){var f=e+s*h;c.x=t.x+r*Math.cos(f),c.y=t.y+r*Math.sin(f),this.segList.addPt(c),h+=l}},addInsideTurn:function(t,e){if(this.li.computeIntersection(this.offset0.p0,this.offset0.p1,this.offset1.p0,this.offset1.p1),this.li.hasIntersection())this.segList.addPt(this.li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this.offset0.p1.distance(this.offset1.p0)<this.distance*er.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this.segList.addPt(this.offset0.p1);else{if(this.segList.addPt(this.offset0.p1),this.closingSegLengthFactor>0){var n=new g((this.closingSegLengthFactor*this.offset0.p1.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset0.p1.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(n);var i=new g((this.closingSegLengthFactor*this.offset1.p0.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset1.p0.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(i)}else this.segList.addPt(this.s1);this.segList.addPt(this.offset1.p0)}},createCircle:function(t){var e=new g(t.x+this.distance,t.y);this.segList.addPt(e),this.addFilletArc(t,0,2*Math.PI,-1,this.distance),this.segList.closeRing()},addBevelJoin:function(t,e){this.segList.addPt(t.p1),this.segList.addPt(e.p0)},init:function(t){this.distance=t,this.maxCurveSegmentError=t*(1-Math.cos(this.filletAngleQuantum/2)),this.segList=new tr,this.segList.setPrecisionModel(this.precisionModel),this.segList.setMinimumVertexDistance(t*er.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)},addCollinear:function(t){this.li.computeIntersection(this.s0,this.s1,this.s1,this.s2);var e=this.li.getIntersectionNum();e>=2&&(this.bufParams.getJoinStyle()===Ki.JOIN_BEVEL||this.bufParams.getJoinStyle()===Ki.JOIN_MITRE?(t&&this.segList.addPt(this.offset0.p1),this.segList.addPt(this.offset1.p0)):this.addFilletCorner(this.s1,this.offset0.p1,this.offset1.p0,he.CLOCKWISE,this.distance))},closeRing:function(){this.segList.closeRing()},hasNarrowConcaveAngle:function(){return this._hasNarrowConcaveAngle},interfaces_:function(){return[]},getClass:function(){return er}}),er.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,er.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,er.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,er.MAX_CLOSING_SEG_LEN_FACTOR=80,e(nr.prototype,{getOffsetCurve:function(t,e){if(this.distance=e,0===e)return null;var n=e<0,i=Math.abs(e),r=this.getSegGen(i);t.length<=1?this.computePointCurve(t[0],r):this.computeOffsetCurve(t,n,r);var s=r.getCoordinates();return n&&H.reverse(s),s},computeSingleSidedBufferCurve:function(t,e,n){var i=this.simplifyTolerance(this.distance);if(e){n.addSegments(t,!0);var r=$i.simplify(t,-i),s=r.length-1;n.initSideSegments(r[s],r[s-1],cn.LEFT),n.addFirstSegment();for(var o=s-2;o>=0;o--)n.addNextSegment(r[o],!0)}else{n.addSegments(t,!1);var a=$i.simplify(t,i),u=a.length-1;n.initSideSegments(a[0],a[1],cn.LEFT),n.addFirstSegment();for(var o=2;o<=u;o++)n.addNextSegment(a[o],!0)}n.addLastSegment(),n.closeRing()},computeRingBufferCurve:function(t,e,n){var i=this.simplifyTolerance(this.distance);e===cn.RIGHT&&(i=-i);var r=$i.simplify(t,i),s=r.length-1;n.initSideSegments(r[s-1],r[0],e);for(var o=1;o<=s;o++){var a=1!==o;n.addNextSegment(r[o],a)}n.closeRing()},computeLineBufferCurve:function(t,e){var n=this.simplifyTolerance(this.distance),i=$i.simplify(t,n),r=i.length-1;e.initSideSegments(i[0],i[1],cn.LEFT);for(var s=2;s<=r;s++)e.addNextSegment(i[s],!0);e.addLastSegment(),e.addLineEndCap(i[r-1],i[r]);var o=$i.simplify(t,-n),a=o.length-1;e.initSideSegments(o[a],o[a-1],cn.LEFT);for(var s=a-2;s>=0;s--)e.addNextSegment(o[s],!0);e.addLastSegment(),e.addLineEndCap(o[1],o[0]),e.closeRing()},computePointCurve:function(t,e){switch(this.bufParams.getEndCapStyle()){case Ki.CAP_ROUND:e.createCircle(t);break;case Ki.CAP_SQUARE:e.createSquare(t)}},getLineCurve:function(t,e){if(this.distance=e,e<0&&!this.bufParams.isSingleSided())return null;if(0===e)return null;var n=Math.abs(e),i=this.getSegGen(n);if(t.length<=1)this.computePointCurve(t[0],i);else if(this.bufParams.isSingleSided()){var r=e<0;this.computeSingleSidedBufferCurve(t,r,i)}else this.computeLineBufferCurve(t,i);var s=i.getCoordinates();return s},getBufferParameters:function(){return this.bufParams},simplifyTolerance:function(t){return t*this.bufParams.getSimplifyFactor()},getRingCurve:function(t,e,n){if(this.distance=n,t.length<=2)return this.getLineCurve(t,n);if(0===n)return nr.copyCoordinates(t);var i=this.getSegGen(n);return this.computeRingBufferCurve(t,e,i),i.getCoordinates()},computeOffsetCurve:function(t,e,n){var i=this.simplifyTolerance(this.distance);if(e){var r=$i.simplify(t,-i),s=r.length-1;n.initSideSegments(r[s],r[s-1],cn.LEFT),n.addFirstSegment();for(var o=s-2;o>=0;o--)n.addNextSegment(r[o],!0)}else{var a=$i.simplify(t,i),u=a.length-1;n.initSideSegments(a[0],a[1],cn.LEFT),n.addFirstSegment();for(var o=2;o<=u;o++)n.addNextSegment(a[o],!0)}n.addLastSegment()},getSegGen:function(t){return new er(this.precisionModel,this.bufParams,t)},interfaces_:function(){return[]},getClass:function(){return nr}}),nr.copyCoordinates=function(t){for(var e=new Array(t.length).fill(null),n=0;n<e.length;n++)e[n]=new g(t[n]);return e},e(ir.prototype,{findStabbedSegments:function(){if(1===arguments.length){for(var t=arguments[0],e=new I,n=this.subgraphs.iterator();n.hasNext();){var i=n.next(),r=i.getEnvelope();t.y<r.getMinY()||t.y>r.getMaxY()||this.findStabbedSegments(t,i.getDirectedEdges(),e)}return e}if(3===arguments.length)if(R(arguments[2],y)&&arguments[0]instanceof g&&arguments[1]instanceof In)for(var s=arguments[0],o=arguments[1],a=arguments[2],u=o.getEdge().getCoordinates(),n=0;n<u.length-1;n++){this.seg.p0=u[n],this.seg.p1=u[n+1],this.seg.p0.y>this.seg.p1.y&&this.seg.reverse();var l=Math.max(this.seg.p0.x,this.seg.p1.x);if(!(l<s.x||this.seg.isHorizontal()||s.y<this.seg.p0.y||s.y>this.seg.p1.y||he.computeOrientation(this.seg.p0,this.seg.p1,s)===he.RIGHT)){var h=o.getDepth(cn.LEFT);this.seg.p0.equals(u[n])||(h=o.getDepth(cn.RIGHT));var c=new rr(this.seg,h);a.add(c)}}else if(R(arguments[2],y)&&arguments[0]instanceof g&&R(arguments[1],y))for(var f=arguments[0],d=arguments[1],p=arguments[2],n=d.iterator();n.hasNext();){var v=n.next();v.isForward()&&this.findStabbedSegments(f,v,p)}},getDepth:function(t){var e=this.findStabbedSegments(t);if(0===e.size())return 0;var n=ho.min(e);return n.leftDepth},interfaces_:function(){return[]},getClass:function(){return ir}}),e(rr.prototype,{compareTo:function(t){var e=t;if(this.upwardSeg.minX()>=e.upwardSeg.maxX())return 1;if(this.upwardSeg.maxX()<=e.upwardSeg.minX())return-1;var n=this.upwardSeg.orientationIndex(e.upwardSeg);return 0!==n?n:(n=-1*e.upwardSeg.orientationIndex(this.upwardSeg),0!==n?n:this.upwardSeg.compareTo(e.upwardSeg))},compareX:function(t,e){var n=t.p0.compareTo(e.p0);return 0!==n?n:t.p1.compareTo(e.p1)},toString:function(){return this.upwardSeg.toString()},interfaces_:function(){return[s]},getClass:function(){return rr}}),ir.DepthSegment=rr,e(sr.prototype,{addPoint:function(t){if(this.distance<=0)return null;var e=t.getCoordinates(),n=this.curveBuilder.getLineCurve(e,this.distance);this.addCurve(n,L.EXTERIOR,L.INTERIOR)},addPolygon:function(t){var e=this.distance,n=cn.LEFT;this.distance<0&&(e=-this.distance,n=cn.RIGHT);var i=t.getExteriorRing(),r=H.removeRepeatedPoints(i.getCoordinates());if(this.distance<0&&this.isErodedCompletely(i,this.distance))return null;if(this.distance<=0&&r.length<3)return null;this.addPolygonRing(r,e,n,L.EXTERIOR,L.INTERIOR);for(var s=0;s<t.getNumInteriorRing();s++){var o=t.getInteriorRingN(s),a=H.removeRepeatedPoints(o.getCoordinates());this.distance>0&&this.isErodedCompletely(o,-this.distance)||this.addPolygonRing(a,e,cn.opposite(n),L.INTERIOR,L.EXTERIOR)}},isTriangleErodedCompletely:function(t,e){var n=new Si(t[0],t[1],t[2]),i=n.inCentre(),r=he.distancePointLine(i,n.p0,n.p1);return r<Math.abs(e)},addLineString:function(t){if(this.distance<=0&&!this.curveBuilder.getBufferParameters().isSingleSided())return null;var e=H.removeRepeatedPoints(t.getCoordinates()),n=this.curveBuilder.getLineCurve(e,this.distance);this.addCurve(n,L.EXTERIOR,L.INTERIOR)},addCurve:function(t,e,n){if(null===t||t.length<2)return null;var i=new Ke(t,new gn(0,L.BOUNDARY,e,n));this.curveList.add(i)},getCurves:function(){return this.add(this.inputGeom),this.curveList},addPolygonRing:function(t,e,n,i,r){if(0===e&&t.length<bt.MINIMUM_VALID_SIZE)return null;var s=i,o=r;t.length>=bt.MINIMUM_VALID_SIZE&&he.isCCW(t)&&(s=r,o=i,n=cn.opposite(n));var a=this.curveBuilder.getRingCurve(t,n,e);this.addCurve(a,s,o)},add:function(t){if(t.isEmpty())return null;if(t instanceof Tt)this.addPolygon(t);else if(t instanceof St)this.addLineString(t);else if(t instanceof Lt)this.addPoint(t);else if(t instanceof Pt)this.addCollection(t);else if(t instanceof gt)this.addCollection(t);else if(t instanceof Ot)this.addCollection(t);else{if(!(t instanceof ft))throw new UnsupportedOperationException(t.getClass().getName());this.addCollection(t)}},isErodedCompletely:function(t,e){var n=t.getCoordinates();if(n.length<4)return e<0;if(4===n.length)return this.isTriangleErodedCompletely(n,e);var i=t.getEnvelopeInternal(),r=Math.min(i.getHeight(),i.getWidth());return e<0&&2*Math.abs(e)>r},addCollection:function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},interfaces_:function(){return[]},getClass:function(){return sr}}),e(or.prototype,{isTrivialIntersection:function(t,e,n,i){if(t===n&&1===this.li.getIntersectionNum()){if(or.isAdjacentSegments(e,i))return!0;if(t.isClosed()){var r=t.size()-1;if(0===e&&i===r||0===i&&e===r)return!0}}return!1},getProperIntersectionPoint:function(){return this.properIntersectionPoint},hasProperInteriorIntersection:function(){return this.hasProperInterior},getLineIntersector:function(){return this.li},hasProperIntersection:function(){return this.hasProper},processIntersections:function(t,e,n,i){if(t===n&&e===i)return null;this.numTests++;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],o=n.getCoordinates()[i],a=n.getCoordinates()[i+1];this.li.computeIntersection(r,s,o,a),this.li.hasIntersection()&&(this.numIntersections++,this.li.isInteriorIntersection()&&(this.numInteriorIntersections++,this.hasInterior=!0),this.isTrivialIntersection(t,e,n,i)||(this._hasIntersection=!0,t.addIntersections(this.li,e,0),n.addIntersections(this.li,i,1),this.li.isProper()&&(this.numProperIntersections++,this.hasProper=!0,this.hasProperInterior=!0)))},hasIntersection:function(){return this._hasIntersection},isDone:function(){return!1},hasInteriorIntersection:function(){return this.hasInterior},interfaces_:function(){return[on]},getClass:function(){return or}}),or.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)},e(ar.prototype,{setWorkingPrecisionModel:function(t){this.workingPrecisionModel=t},insertUniqueEdge:function(t){var e=this.edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),i=t.getLabel();e.isPointwiseEqual(t)||(i=new gn(t.getLabel()),i.flip()),n.merge(i);var r=ar.depthDelta(i),s=e.getDepthDelta(),o=s+r;e.setDepthDelta(o)}else this.edgeList.add(t),t.setDepthDelta(ar.depthDelta(t.getLabel()))},buildSubgraphs:function(t,e){for(var n=new I,i=t.iterator();i.hasNext();){var r=i.next(),s=r.getRightmostCoordinate(),o=new ir(n),a=o.getDepth(s);r.computeDepth(a),r.findResultEdges(),n.add(r),e.add(r.getDirectedEdges(),r.getNodes())}},createSubgraphs:function(t){for(var e=new I,n=t.getNodes().iterator();n.hasNext();){var i=n.next();if(!i.isVisited()){var r=new Ji;r.create(i),e.add(r)}}return ho.sort(e,ho.reverseOrder()),e},createEmptyResultGeometry:function(){var t=this.geomFact.createPolygon();return t},getNoder:function(t){if(null!==this.workingNoder)return this.workingNoder;var e=new nn,n=new ae;return n.setPrecisionModel(t),e.setSegmentIntersector(new or(n)),e},buffer:function(t,e){var n=this.workingPrecisionModel;null===n&&(n=t.getPrecisionModel()),this.geomFact=t.getFactory();var i=new nr(n,this.bufParams),r=new sr(t,e,i),s=r.getCurves();if(s.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(s,n),this.graph=new Cn(new On),this.graph.addEdges(this.edgeList.getEdges());var o=this.createSubgraphs(this.graph),a=new Sn(this.geomFact);this.buildSubgraphs(o,a);var u=a.getPolygons();if(u.size()<=0)return this.createEmptyResultGeometry();var l=this.geomFact.buildGeometry(u);return l},computeNodedEdges:function(t,e){var n=this.getNoder(e);n.computeNodes(t);for(var i=n.getNodedSubstrings(),r=i.iterator();r.hasNext();){var s=r.next(),o=s.getCoordinates();if(2!==o.length||!o[0].equals2D(o[1])){var a=s.getData(),u=new Jn(s.getCoordinates(),new gn(a));this.insertUniqueEdge(u)}}},setNoder:function(t){this.workingNoder=t},interfaces_:function(){return[]},getClass:function(){return ar}}),ar.depthDelta=function(t){var e=t.getLocation(0,cn.LEFT),n=t.getLocation(0,cn.RIGHT);return e===L.INTERIOR&&n===L.EXTERIOR?1:e===L.EXTERIOR&&n===L.INTERIOR?-1:0},ar.convertSegStrings=function(t){for(var e=new ie,n=new I;t.hasNext();){var i=t.next(),r=e.createLineString(i.getCoordinates());n.add(r)}return e.buildGeometry(n)},e(ur.prototype,{checkEndPtVertexIntersections:function(){if(0===arguments.length)for(var t=this.segStrings.iterator();t.hasNext();){var e=t.next(),n=e.getCoordinates();this.checkEndPtVertexIntersections(n[0],this.segStrings),this.checkEndPtVertexIntersections(n[n.length-1],this.segStrings)}else if(2===arguments.length)for(var i=arguments[0],r=arguments[1],t=r.iterator();t.hasNext();)for(var e=t.next(),n=e.getCoordinates(),s=1;s<n.length-1;s++)if(n[s].equals(i))throw new l("found endpt/interior pt intersection at index "+s+" :pt "+i)},checkInteriorIntersections:function(){if(0===arguments.length)for(var t=this.segStrings.iterator();t.hasNext();)for(var e=t.next(),n=this.segStrings.iterator();n.hasNext();){var i=n.next();this.checkInteriorIntersections(e,i)}else if(2===arguments.length)for(var r=arguments[0],s=arguments[1],o=r.getCoordinates(),a=s.getCoordinates(),u=0;u<o.length-1;u++)for(var h=0;h<a.length-1;h++)this.checkInteriorIntersections(r,u,s,h);else if(4===arguments.length){var c=arguments[0],f=arguments[1],g=arguments[2],d=arguments[3];if(c===g&&f===d)return null;var p=c.getCoordinates()[f],v=c.getCoordinates()[f+1],m=g.getCoordinates()[d],y=g.getCoordinates()[d+1];if(this.li.computeIntersection(p,v,m,y),this.li.hasIntersection()&&(this.li.isProper()||this.hasInteriorIntersection(this.li,p,v)||this.hasInteriorIntersection(this.li,m,y)))throw new l("found non-noded intersection at "+p+"-"+v+" and "+m+"-"+y)}},checkValid:function(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()},checkCollapses:function(){if(0===arguments.length)for(var t=this.segStrings.iterator();t.hasNext();){var e=t.next();this.checkCollapses(e)}else if(1===arguments.length)for(var n=arguments[0],i=n.getCoordinates(),t=0;t<i.length-2;t++)this.checkCollapse(i[t],i[t+1],i[t+2])},hasInteriorIntersection:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++){var r=t.getIntersection(i);if(!r.equals(e)&&!r.equals(n))return!0}return!1},checkCollapse:function(t,e,n){if(t.equals(n))throw new l("found non-noded collapse at "+ur.fact.createLineString([t,e,n]))},interfaces_:function(){return[]},getClass:function(){return ur}}),ur.fact=new ie,e(lr.prototype,{intersectsScaled:function(t,e){var n=Math.min(t.x,e.x),i=Math.max(t.x,e.x),r=Math.min(t.y,e.y),s=Math.max(t.y,e.y),o=this.maxx<n||this.minx>i||this.maxy<r||this.miny>s;if(o)return!1;var a=this.intersectsToleranceSquare(t,e);return f.isTrue(!(o&&a),"Found bad envelope test"),a},initCorners:function(t){var e=.5;this.minx=t.x-e,this.maxx=t.x+e,this.miny=t.y-e,this.maxy=t.y+e,this.corner[0]=new g(this.maxx,this.maxy),this.corner[1]=new g(this.minx,this.maxy),this.corner[2]=new g(this.minx,this.miny),this.corner[3]=new g(this.maxx,this.miny)},intersects:function(t,e){return 1===this.scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this.p0Scaled),this.copyScaled(e,this.p1Scaled),this.intersectsScaled(this.p0Scaled,this.p1Scaled))},scale:function(t){return Math.round(t*this.scaleFactor)},getCoordinate:function(){return this.originalPt},copyScaled:function(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)},getSafeEnvelope:function(){if(null===this.safeEnv){var t=lr.SAFE_ENV_EXPANSION_FACTOR/this.scaleFactor;this.safeEnv=new C(this.originalPt.x-t,this.originalPt.x+t,this.originalPt.y-t,this.originalPt.y+t)}return this.safeEnv},intersectsPixelClosure:function(t,e){return this.li.computeIntersection(t,e,this.corner[0],this.corner[1]),!!this.li.hasIntersection()||(this.li.computeIntersection(t,e,this.corner[1],this.corner[2]),!!this.li.hasIntersection()||(this.li.computeIntersection(t,e,this.corner[2],this.corner[3]),!!this.li.hasIntersection()||(this.li.computeIntersection(t,e,this.corner[3],this.corner[0]),!!this.li.hasIntersection())))},intersectsToleranceSquare:function(t,e){var n=!1,i=!1;return this.li.computeIntersection(t,e,this.corner[0],this.corner[1]),!!this.li.isProper()||(this.li.computeIntersection(t,e,this.corner[1],this.corner[2]),!!this.li.isProper()||(this.li.hasIntersection()&&(n=!0),this.li.computeIntersection(t,e,this.corner[2],this.corner[3]),!!this.li.isProper()||(this.li.hasIntersection()&&(i=!0),this.li.computeIntersection(t,e,this.corner[3],this.corner[0]),!!this.li.isProper()||(!(!n||!i)||(!!t.equals(this.pt)||!!e.equals(this.pt))))))},addSnappedNode:function(t,e){var n=t.getCoordinate(e),i=t.getCoordinate(e+1);return!!this.intersects(n,i)&&(t.addIntersection(this.getCoordinate(),e),!0)},interfaces_:function(){return[]},getClass:function(){return lr}}),lr.SAFE_ENV_EXPANSION_FACTOR=.75,e(hr.prototype,{snap:function(){if(1===arguments.length){var t=arguments[0];return this.snap(t,null,-1)}if(3===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2],r=e.getSafeEnvelope(),s=new cr(e,n,i);return this.index.query(r,{interfaces_:function(){return[Ae]},visitItem:function(t){var e=t;e.select(r,s)}}),s.isNodeAdded()}},interfaces_:function(){return[]},getClass:function(){return hr}}),h(cr,hi),e(cr.prototype,{isNodeAdded:function(){return this._isNodeAdded},select:function(){if(2!==arguments.length)return hi.prototype.select.apply(this,arguments);var t=arguments[0],e=arguments[1],n=t.getContext();return null!==this.parentEdge&&n===this.parentEdge&&e===this.hotPixelVertexIndex?null:void(this._isNodeAdded=this.hotPixel.addSnappedNode(n,e))},interfaces_:function(){return[]},getClass:function(){return cr}}),hr.HotPixelSnapAction=cr,e(fr.prototype,{processIntersections:function(t,e,n,i){if(t===n&&e===i)return null;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],o=n.getCoordinates()[i],a=n.getCoordinates()[i+1];if(this.li.computeIntersection(r,s,o,a),this.li.hasIntersection()&&this.li.isInteriorIntersection()){for(var u=0;u<this.li.getIntersectionNum();u++)this.interiorIntersections.add(this.li.getIntersection(u));t.addIntersections(this.li,e,0),n.addIntersections(this.li,i,1)}},isDone:function(){return!1},getInteriorIntersections:function(){return this.interiorIntersections},interfaces_:function(){return[on]},getClass:function(){return fr}}),e(gr.prototype,{checkCorrectness:function(t){var e=Ke.getNodedSubstrings(t),n=new ur(e);try{n.checkValid()}catch(t){if(!(t instanceof S))throw t;t.printStackTrace()}finally{}},getNodedSubstrings:function(){return Ke.getNodedSubstrings(this.nodedSegStrings)},snapRound:function(t,e){var n=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(n),this.computeVertexSnaps(t)},findInteriorIntersections:function(t,e){var n=new fr(e);return this.noder.setSegmentIntersector(n),this.noder.computeNodes(t),n.getInteriorIntersections()},computeVertexSnaps:function(){if(R(arguments[0],v))for(var t=arguments[0],e=t.iterator();e.hasNext();){var n=e.next();this.computeVertexSnaps(n)}else if(arguments[0]instanceof Ke)for(var i=arguments[0],r=i.getCoordinates(),s=0;s<r.length;s++){var o=new lr(r[s],this.scaleFactor,this.li),a=this.pointSnapper.snap(o,i,s);a&&i.addIntersection(r[s],s)}},computeNodes:function(t){this.nodedSegStrings=t,this.noder=new nn,this.pointSnapper=new hr(this.noder.getIndex()),this.snapRound(t,this.li)},computeIntersectionSnaps:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=new lr(n,this.scaleFactor,this.li);this.pointSnapper.snap(i)}},interfaces_:function(){return[tn]},getClass:function(){return gr}}),e(dr.prototype,{bufferFixedPrecision:function(t){var e=new Hi(new gr(new ee(1)),t.getScale()),n=new ar(this.bufParams);n.setWorkingPrecisionModel(t),n.setNoder(e),this.resultGeometry=n.buffer(this.argGeom,this.distance)},bufferReducedPrecision:function(){if(0===arguments.length){for(var t=dr.MAX_PRECISION_DIGITS;t>=0;t--){try{this.bufferReducedPrecision(t)}catch(t){if(!(t instanceof sn))throw t;this.saveException=t}finally{}if(null!==this.resultGeometry)return null}throw this.saveException}if(1===arguments.length){var e=arguments[0],n=dr.precisionScaleFactor(this.argGeom,this.distance,e),i=new ee(n);this.bufferFixedPrecision(i)}},computeGeometry:function(){if(this.bufferOriginalPrecision(),null!==this.resultGeometry)return null;var t=this.argGeom.getFactory().getPrecisionModel();t.getType()===ee.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()},setQuadrantSegments:function(t){this.bufParams.setQuadrantSegments(t)},bufferOriginalPrecision:function(){try{var t=new ar(this.bufParams);this.resultGeometry=t.buffer(this.argGeom,this.distance)}catch(t){if(!(t instanceof l))throw t;this.saveException=t}finally{}},getResultGeometry:function(t){return this.distance=t,this.computeGeometry(),this.resultGeometry},setEndCapStyle:function(t){this.bufParams.setEndCapStyle(t)},interfaces_:function(){return[]},getClass:function(){return dr}}),dr.bufferOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new dr(t),i=n.getResultGeometry(e);return i}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof B&&"number"==typeof arguments[1]){var r=arguments[0],s=arguments[1],o=arguments[2],a=new dr(r);a.setQuadrantSegments(o);var i=a.getResultGeometry(s);return i}if(arguments[2]instanceof Ki&&arguments[0]instanceof B&&"number"==typeof arguments[1]){var u=arguments[0],l=arguments[1],h=arguments[2],a=new dr(u,h),i=a.getResultGeometry(l);return i}}else if(4===arguments.length){var c=arguments[0],f=arguments[1],g=arguments[2],d=arguments[3],a=new dr(c);a.setQuadrantSegments(g),a.setEndCapStyle(d);var i=a.getResultGeometry(f);return i}},dr.precisionScaleFactor=function(t,e,n){var i=t.getEnvelopeInternal(),r=T.max(Math.abs(i.getMaxX()),Math.abs(i.getMaxY()),Math.abs(i.getMinX()),Math.abs(i.getMinY())),s=e>0?e:0,o=r+2*s,a=Math.trunc(Math.log(o)/Math.log(10)+1),u=n-a,l=Math.pow(10,u);return l},dr.CAP_ROUND=Ki.CAP_ROUND,dr.CAP_BUTT=Ki.CAP_FLAT,dr.CAP_FLAT=Ki.CAP_FLAT,dr.CAP_SQUARE=Ki.CAP_SQUARE,dr.MAX_PRECISION_DIGITS=12;var So=Object.freeze({BufferOp:dr,BufferParameters:Ki});e(pr.prototype,{filter:function(t){t instanceof Tt&&this.comps.add(t)},interfaces_:function(){return[ht]},getClass:function(){return pr}}),pr.getPolygons=function(){if(1===arguments.length){var t=arguments[0];return pr.getPolygons(t,new I)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof Tt?n.add(e):e instanceof ft&&e.apply(new pr(n)),n}},e(vr.prototype,{isInsideArea:function(){return this.segIndex===vr.INSIDE_AREA},getCoordinate:function(){return this.pt},getGeometryComponent:function(){return this.component},getSegmentIndex:function(){return this.segIndex},interfaces_:function(){return[]},getClass:function(){return vr}}),vr.INSIDE_AREA=-1,e(mr.prototype,{filter:function(t){t instanceof Lt&&this.pts.add(t)},interfaces_:function(){return[ht]},getClass:function(){return mr}}),mr.getPoints=function(){if(1===arguments.length){var t=arguments[0];return t instanceof Lt?ho.singletonList(t):mr.getPoints(t,new I)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof Lt?n.add(e):e instanceof ft&&e.apply(new mr(n)),n}},e(yr.prototype,{filter:function(t){(t instanceof Lt||t instanceof St||t instanceof Tt)&&this.locations.add(new vr(t,0,t.getCoordinate()))},interfaces_:function(){return[ht]},getClass:function(){return yr}}),yr.getLocations=function(t){var e=new I;return t.apply(new yr(e)),e},e(xr.prototype,{computeContainmentDistance:function(){if(0===arguments.length){var t=new Array(2).fill(null);if(this.computeContainmentDistance(0,t),this.minDistance<=this.terminateDistance)return null;this.computeContainmentDistance(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=1-e,r=pr.getPolygons(this.geom[e]);if(r.size()>0){var s=yr.getLocations(this.geom[i]);if(this.computeContainmentDistance(s,r,n),this.minDistance<=this.terminateDistance)return this.minDistanceLocation[i]=n[0],this.minDistanceLocation[e]=n[1],null}}else if(3===arguments.length)if(arguments[2]instanceof Array&&R(arguments[0],y)&&R(arguments[1],y)){for(var o=arguments[0],a=arguments[1],u=arguments[2],l=0;l<o.size();l++)for(var h=o.get(l),c=0;c<a.size();c++)if(this.computeContainmentDistance(h,a.get(c),u),this.minDistance<=this.terminateDistance)return null}else if(arguments[2]instanceof Array&&arguments[0]instanceof vr&&arguments[1]instanceof Tt){var f=arguments[0],g=arguments[1],d=arguments[2],p=f.getCoordinate();if(L.EXTERIOR!==this.ptLocator.locate(p,g))return this.minDistance=0,d[0]=f,d[1]=new vr(g,p),null}},computeMinDistanceLinesPoints:function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),s=0;s<e.size();s++){var o=e.get(s);if(this.computeMinDistance(r,o,n),this.minDistance<=this.terminateDistance)return null}},computeFacetDistance:function(){var t=new Array(2).fill(null),e=kn.getLines(this.geom[0]),n=kn.getLines(this.geom[1]),i=mr.getPoints(this.geom[0]),r=mr.getPoints(this.geom[1]);return this.computeMinDistanceLines(e,n,t),this.updateMinDistance(t,!1),this.minDistance<=this.terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(e,r,t),this.updateMinDistance(t,!1),this.minDistance<=this.terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(n,i,t),this.updateMinDistance(t,!0),this.minDistance<=this.terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistancePoints(i,r,t),void this.updateMinDistance(t,!1))))},nearestLocations:function(){return this.computeMinDistance(),this.minDistanceLocation},updateMinDistance:function(t,e){return null===t[0]?null:void(e?(this.minDistanceLocation[0]=t[1],this.minDistanceLocation[1]=t[0]):(this.minDistanceLocation[0]=t[0],this.minDistanceLocation[1]=t[1]))},nearestPoints:function(){this.computeMinDistance();var t=[this.minDistanceLocation[0].getCoordinate(),this.minDistanceLocation[1].getCoordinate()];return t},computeMinDistance:function(){if(0===arguments.length){if(null!==this.minDistanceLocation)return null;if(this.minDistanceLocation=new Array(2).fill(null),this.computeContainmentDistance(),this.minDistance<=this.terminateDistance)return null;this.computeFacetDistance()}else if(3===arguments.length)if(arguments[2]instanceof Array&&arguments[0]instanceof St&&arguments[1]instanceof Lt){var t=arguments[0],e=arguments[1],n=arguments[2];if(t.getEnvelopeInternal().distance(e.getEnvelopeInternal())>this.minDistance)return null;for(var i=t.getCoordinates(),r=e.getCoordinate(),s=0;s<i.length-1;s++){var o=he.distancePointLine(r,i[s],i[s+1]);if(o<this.minDistance){this.minDistance=o;var a=new ce(i[s],i[s+1]),u=a.closestPoint(r);n[0]=new vr(t,s,u),n[1]=new vr(e,0,r)}if(this.minDistance<=this.terminateDistance)return null}}else if(arguments[2]instanceof Array&&arguments[0]instanceof St&&arguments[1]instanceof St){var l=arguments[0],h=arguments[1],c=arguments[2];if(l.getEnvelopeInternal().distance(h.getEnvelopeInternal())>this.minDistance)return null;for(var i=l.getCoordinates(),f=h.getCoordinates(),s=0;s<i.length-1;s++)for(var g=0;g<f.length-1;g++){var o=he.distanceLineLine(i[s],i[s+1],f[g],f[g+1]);if(o<this.minDistance){this.minDistance=o;var d=new ce(i[s],i[s+1]),p=new ce(f[g],f[g+1]),v=d.closestPoints(p);c[0]=new vr(l,s,v[0]),c[1]=new vr(h,g,v[1])}if(this.minDistance<=this.terminateDistance)return null}}},computeMinDistancePoints:function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),s=0;s<e.size();s++){var o=e.get(s),a=r.getCoordinate().distance(o.getCoordinate());if(a<this.minDistance&&(this.minDistance=a,n[0]=new vr(r,0,r.getCoordinate()),n[1]=new vr(o,0,o.getCoordinate())),this.minDistance<=this.terminateDistance)return null}},distance:function(){if(null===this.geom[0]||null===this.geom[1])throw new i("null geometries are not supported");return this.geom[0].isEmpty()||this.geom[1].isEmpty()?0:(this.computeMinDistance(),this.minDistance)},computeMinDistanceLines:function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),s=0;s<e.size();s++){var o=e.get(s);if(this.computeMinDistance(r,o,n),this.minDistance<=this.terminateDistance)return null}},interfaces_:function(){return[]},getClass:function(){return xr}}),xr.distance=function(t,e){var n=new xr(t,e);return n.distance()},xr.isWithinDistance=function(t,e,n){var i=new xr(t,e,n);return i.distance()<=n},xr.nearestPoints=function(t,e){var n=new xr(t,e);return n.nearestPoints()};var wo=Object.freeze({DistanceOp:xr});e(Er.prototype,{getCoordinates:function(){if(null===this.coordinates){for(var t=0,e=0,n=new N,i=this.directedEdges.iterator();i.hasNext();){var r=i.next();r.getEdgeDirection()?t++:e++,n.add(r.getEdge().getLine().getCoordinates(),!1,r.getEdgeDirection())}this.coordinates=n.toCoordinateArray(),e>t&&H.reverse(this.coordinates)}return this.coordinates},toLineString:function(){return this.factory.createLineString(this.getCoordinates())},add:function(t){this.directedEdges.add(t)},interfaces_:function(){return[]},getClass:function(){return Er}}),e(Ir.prototype,{setVisited:function(t){this._isVisited=t},isMarked:function(){return this._isMarked},setData:function(t){this.data=t},getData:function(){return this.data},setMarked:function(t){this._isMarked=t},getContext:function(){return this.data},isVisited:function(){return this._isVisited},setContext:function(t){this.data=t},interfaces_:function(){return[]},getClass:function(){return Ir}}),Ir.getComponentWithVisitedState=function(t,e){for(;t.hasNext();){var n=t.next();if(n.isVisited()===e)return n}return null},Ir.setVisited=function(t,e){for(;t.hasNext();){var n=t.next();n.setVisited(e)}},Ir.setMarked=function(t,e){for(;t.hasNext();){var n=t.next();n.setMarked(e)}},h(Nr,Ir),e(Nr.prototype,{isRemoved:function(){return null===this.parentEdge},compareDirection:function(t){return this.quadrant>t.quadrant?1:this.quadrant<t.quadrant?-1:he.computeOrientation(t.p0,t.p1,this.p1)},getCoordinate:function(){return this.from.getCoordinate()},print:function(t){var e=this.getClass().getName(),n=e.lastIndexOf("."),i=e.substring(n+1);t.print("  "+i+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+this.angle)},getDirectionPt:function(){return this.p1},getAngle:function(){return this.angle},compareTo:function(t){var e=t;return this.compareDirection(e)},getFromNode:function(){return this.from},getSym:function(){return this.sym;
},setEdge:function(t){this.parentEdge=t},remove:function(){this.sym=null,this.parentEdge=null},getEdge:function(){return this.parentEdge},getQuadrant:function(){return this.quadrant},setSym:function(t){this.sym=t},getToNode:function(){return this.to},getEdgeDirection:function(){return this.edgeDirection},interfaces_:function(){return[s]},getClass:function(){return Nr}}),Nr.toEdges=function(t){for(var e=new I,n=t.iterator();n.hasNext();)e.add(n.next().parentEdge);return e},h(Cr,Nr),e(Cr.prototype,{getNext:function(){return 2!==this.getToNode().getDegree()?null:this.getToNode().getOutEdges().getEdges().get(0)===this.getSym()?this.getToNode().getOutEdges().getEdges().get(1):(f.isTrue(this.getToNode().getOutEdges().getEdges().get(1)===this.getSym()),this.getToNode().getOutEdges().getEdges().get(0))},interfaces_:function(){return[]},getClass:function(){return Cr}}),h(Sr,Ir),e(Sr.prototype,{isRemoved:function(){return null===this.dirEdge},setDirectedEdges:function(t,e){this.dirEdge=[t,e],t.setEdge(this),e.setEdge(this),t.setSym(e),e.setSym(t),t.getFromNode().addOutEdge(t),e.getFromNode().addOutEdge(e)},getDirEdge:function(){if(Number.isInteger(arguments[0])){var t=arguments[0];return this.dirEdge[t]}if(arguments[0]instanceof Lr){var e=arguments[0];return this.dirEdge[0].getFromNode()===e?this.dirEdge[0]:this.dirEdge[1].getFromNode()===e?this.dirEdge[1]:null}},remove:function(){this.dirEdge=null},getOppositeNode:function(t){return this.dirEdge[0].getFromNode()===t?this.dirEdge[0].getToNode():this.dirEdge[1].getFromNode()===t?this.dirEdge[1].getToNode():null},interfaces_:function(){return[]},getClass:function(){return Sr}}),e(wr.prototype,{getNextEdge:function(t){var e=this.getIndex(t);return this.outEdges.get(this.getIndex(e+1))},getCoordinate:function(){var t=this.iterator();if(!t.hasNext())return null;var e=t.next();return e.getCoordinate()},iterator:function(){return this.sortEdges(),this.outEdges.iterator()},sortEdges:function(){this.sorted||(ho.sort(this.outEdges),this.sorted=!0)},remove:function(t){this.outEdges.remove(t)},getEdges:function(){return this.sortEdges(),this.outEdges},getNextCWEdge:function(t){var e=this.getIndex(t);return this.outEdges.get(this.getIndex(e-1))},getIndex:function(){if(arguments[0]instanceof Sr){var t=arguments[0];this.sortEdges();for(var e=0;e<this.outEdges.size();e++){var n=this.outEdges.get(e);if(n.getEdge()===t)return e}return-1}if(arguments[0]instanceof Nr){var i=arguments[0];this.sortEdges();for(var e=0;e<this.outEdges.size();e++){var n=this.outEdges.get(e);if(n===i)return e}return-1}if(Number.isInteger(arguments[0])){var r=arguments[0],s=r%this.outEdges.size();return s<0&&(s+=this.outEdges.size()),s}},add:function(t){this.outEdges.add(t),this.sorted=!1},getDegree:function(){return this.outEdges.size()},interfaces_:function(){return[]},getClass:function(){return wr}}),h(Lr,Ir),e(Lr.prototype,{isRemoved:function(){return null===this.pt},addOutEdge:function(t){this.deStar.add(t)},getCoordinate:function(){return this.pt},getOutEdges:function(){return this.deStar},remove:function(){if(0===arguments.length)this.pt=null;else if(1===arguments.length){var t=arguments[0];this.deStar.remove(t)}},getIndex:function(t){return this.deStar.getIndex(t)},getDegree:function(){return this.deStar.getDegree()},interfaces_:function(){return[]},getClass:function(){return Lr}}),Lr.getEdgesBetween=function(t,e){var n=Nr.toEdges(t.getOutEdges().getEdges()),i=new J(n),r=Nr.toEdges(e.getOutEdges().getEdges());return i.retainAll(r),i},h(Rr,Sr),e(Rr.prototype,{getLine:function(){return this.line},interfaces_:function(){return[]},getClass:function(){return Rr}}),e(Tr.prototype,{find:function(t){return this.nodeMap.get(t)},iterator:function(){return this.nodeMap.values().iterator()},remove:function(t){return this.nodeMap.remove(t)},values:function(){return this.nodeMap.values()},add:function(t){return this.nodeMap.put(t.getCoordinate(),t),t},interfaces_:function(){return[]},getClass:function(){return Tr}}),e(Pr.prototype,{findNodesOfDegree:function(t){for(var e=new I,n=this.nodeIterator();n.hasNext();){var i=n.next();i.getDegree()===t&&e.add(i)}return e},dirEdgeIterator:function(){return this.dirEdges.iterator()},edgeIterator:function(){return this.edges.iterator()},remove:function(){if(arguments[0]instanceof Sr){var t=arguments[0];this.remove(t.getDirEdge(0)),this.remove(t.getDirEdge(1)),this.edges.remove(t),t.remove()}else if(arguments[0]instanceof Nr){var e=arguments[0],n=e.getSym();null!==n&&n.setSym(null),e.getFromNode().remove(e),e.remove(),this.dirEdges.remove(e)}else if(arguments[0]instanceof Lr){for(var i=arguments[0],r=i.getOutEdges().getEdges(),s=r.iterator();s.hasNext();){var o=s.next(),n=o.getSym();null!==n&&this.remove(n),this.dirEdges.remove(o);var a=o.getEdge();null!==a&&this.edges.remove(a)}this.nodeMap.remove(i.getCoordinate()),i.remove()}},findNode:function(t){return this.nodeMap.find(t)},getEdges:function(){return this.edges},nodeIterator:function(){return this.nodeMap.iterator()},contains:function(){if(arguments[0]instanceof Sr){var t=arguments[0];return this.edges.contains(t)}if(arguments[0]instanceof Nr){var e=arguments[0];return this.dirEdges.contains(e)}},add:function(){if(arguments[0]instanceof Lr){var t=arguments[0];this.nodeMap.add(t)}else if(arguments[0]instanceof Sr){var e=arguments[0];this.edges.add(e),this.add(e.getDirEdge(0)),this.add(e.getDirEdge(1))}else if(arguments[0]instanceof Nr){var n=arguments[0];this.dirEdges.add(n)}},getNodes:function(){return this.nodeMap.values()},interfaces_:function(){return[]},getClass:function(){return Pr}}),h(br,Pr),e(br.prototype,{addEdge:function(t){if(t.isEmpty())return null;var e=H.removeRepeatedPoints(t.getCoordinates());if(e.length<=1)return null;var n=e[0],i=e[e.length-1],r=this.getNode(n),s=this.getNode(i),o=new Cr(r,s,e[1],(!0)),a=new Cr(s,r,e[e.length-2],(!1)),u=new Rr(t);u.setDirectedEdges(o,a),this.add(u)},getNode:function(t){var e=this.findNode(t);return null===e&&(e=new Lr(t),this.add(e)),e},interfaces_:function(){return[]},getClass:function(){return br}}),e(Or.prototype,{buildEdgeStringsForUnprocessedNodes:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();e.isMarked()||(f.isTrue(2===e.getDegree()),this.buildEdgeStringsStartingAt(e),e.setMarked(!0))}},buildEdgeStringsForNonDegree2Nodes:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();2!==e.getDegree()&&(this.buildEdgeStringsStartingAt(e),e.setMarked(!0))}},buildEdgeStringsForObviousStartNodes:function(){this.buildEdgeStringsForNonDegree2Nodes()},getMergedLineStrings:function(){return this.merge(),this.mergedLineStrings},buildEdgeStringsStartingAt:function(t){for(var e=t.getOutEdges().iterator();e.hasNext();){var n=e.next();n.getEdge().isMarked()||this.edgeStrings.add(this.buildEdgeStringStartingWith(n))}},merge:function(){if(null!==this.mergedLineStrings)return null;Ir.setMarked(this.graph.nodeIterator(),!1),Ir.setMarked(this.graph.edgeIterator(),!1),this.edgeStrings=new I,this.buildEdgeStringsForObviousStartNodes(),this.buildEdgeStringsForIsolatedLoops(),this.mergedLineStrings=new I;for(var t=this.edgeStrings.iterator();t.hasNext();){var e=t.next();this.mergedLineStrings.add(e.toLineString())}},buildEdgeStringStartingWith:function(t){var e=new Er(this.factory),n=t;do e.add(n),n.getEdge().setMarked(!0),n=n.getNext();while(null!==n&&n!==t);return e},add:function(){if(arguments[0]instanceof B){var t=arguments[0];t.apply({interfaces_:function(){return[q]},filter:function(t){t instanceof St&&this.add(t)}})}else if(R(arguments[0],v)){var e=arguments[0];this.mergedLineStrings=null;for(var n=e.iterator();n.hasNext();){var i=n.next();this.add(i)}}else if(arguments[0]instanceof St){var r=arguments[0];null===this.factory&&(this.factory=r.getFactory()),this.graph.addEdge(r)}},buildEdgeStringsForIsolatedLoops:function(){this.buildEdgeStringsForUnprocessedNodes()},interfaces_:function(){return[]},getClass:function(){return Or}});var Lo=Object.freeze({LineMerger:Or}),Ro=Object.freeze({OverlayOp:ii});h(_r,Nr),e(_r.prototype,{getNext:function(){return this.next},isInRing:function(){return null!==this.edgeRing},setRing:function(t){this.edgeRing=t},setLabel:function(t){this.label=t},getLabel:function(){return this.label},setNext:function(t){this.next=t},getRing:function(){return this.edgeRing},interfaces_:function(){return[]},getClass:function(){return _r}}),h(Mr,Sr),e(Mr.prototype,{getLine:function(){return this.line},interfaces_:function(){return[]},getClass:function(){return Mr}}),e(Dr.prototype,{visitInteriorRing:function(t,e){var n=t.getCoordinates(),i=n[0],r=Dr.findDifferentPoint(n,i),s=e.findEdgeInSameDirection(i,r),o=e.findEdgeEnd(s),a=null;o.getLabel().getLocation(0,cn.RIGHT)===L.INTERIOR?a=o:o.getSym().getLabel().getLocation(0,cn.RIGHT)===L.INTERIOR&&(a=o.getSym()),f.isTrue(null!==a,"unable to find dirEdge with Interior on RHS"),this.visitLinkedDirectedEdges(a)},visitShellInteriors:function(t,e){if(t instanceof Tt){var n=t;this.visitInteriorRing(n.getExteriorRing(),e)}if(t instanceof Ot)for(var i=t,r=0;r<i.getNumGeometries();r++){var n=i.getGeometryN(r);this.visitInteriorRing(n.getExteriorRing(),e)}},getCoordinate:function(){return this.disconnectedRingcoord},setInteriorEdgesInResult:function(t){for(var e=t.getEdgeEnds().iterator();e.hasNext();){var n=e.next();n.getLabel().getLocation(0,cn.RIGHT)===L.INTERIOR&&n.setInResult(!0)}},visitLinkedDirectedEdges:function(t){var e=t,n=t;do f.isTrue(null!==n,"found null Directed Edge"),n.setVisited(!0),n=n.getNext();while(n!==e)},buildEdgeRings:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();if(i.isInResult()&&null===i.getEdgeRing()){var r=new vn(i,this.geometryFactory);r.linkDirectedEdgesForMinimalEdgeRings();var s=r.buildMinimalRings();e.addAll(s)}}return e},hasUnvisitedShellEdge:function(t){for(var e=0;e<t.size();e++){var n=t.get(e);if(!n.isHole()){var i=n.getEdges(),r=i.get(0);if(r.getLabel().getLocation(0,cn.RIGHT)===L.INTERIOR)for(var s=0;s<i.size();s++)if(r=i.get(s),!r.isVisited())return this.disconnectedRingcoord=r.getCoordinate(),!0}}return!1},isInteriorsConnected:function(){var t=new I;this.geomGraph.computeSplitEdges(t);var e=new Cn(new On);e.addEdges(t),this.setInteriorEdgesInResult(e),e.linkResultDirectedEdges();var n=this.buildEdgeRings(e.getEdgeEnds());return this.visitShellInteriors(this.geomGraph.getGeometry(),e),!this.hasUnvisitedShellEdge(n)},interfaces_:function(){return[]},getClass:function(){return Dr}}),Dr.findDifferentPoint=function(t,e){for(var n=0;n<t.length;n++)if(!t[n].equals(e))return t[n];return null},e(Ar.prototype,{createEdgeEndForNext:function(t,e,n,i){var r=n.segmentIndex+1;if(r>=t.getNumPoints()&&null===i)return null;var s=t.getCoordinate(r);null!==i&&i.segmentIndex===n.segmentIndex&&(s=i.coord);var o=new En(t,n.coord,s,new gn(t.getLabel()));e.add(o)},createEdgeEndForPrev:function(t,e,n,i){var r=n.segmentIndex;if(0===n.dist){if(0===r)return null;r--}var s=t.getCoordinate(r);null!==i&&i.segmentIndex>=r&&(s=i.coord);var o=new gn(t.getLabel());o.flip();var a=new En(t,n.coord,s,o);e.add(a)},computeEdgeEnds:function(){if(1===arguments.length){for(var t=arguments[0],e=new I,n=t;n.hasNext();){var i=n.next();this.computeEdgeEnds(i,e)}return e}if(2===arguments.length){var r=arguments[0],s=arguments[1],o=r.getEdgeIntersectionList();o.addEndpoints();var a=o.iterator(),u=null,l=null;if(!a.hasNext())return null;var h=a.next();do u=l,l=h,h=null,a.hasNext()&&(h=a.next()),null!==l&&(this.createEdgeEndForPrev(r,s,l,u),this.createEdgeEndForNext(r,s,l,h));while(null!==l)}},interfaces_:function(){return[]},getClass:function(){return Ar}}),h(Fr,En),e(Fr.prototype,{insert:function(t){this.edgeEnds.add(t)},print:function(t){t.println("EdgeEndBundle--> Label: "+this.label);for(var e=this.iterator();e.hasNext();){var n=e.next();n.print(t),t.println()}},iterator:function(){return this.edgeEnds.iterator()},getEdgeEnds:function(){return this.edgeEnds},computeLabelOn:function(t,e){for(var n=0,i=!1,r=this.iterator();r.hasNext();){var s=r.next(),o=s.getLabel().getLocation(t);o===L.BOUNDARY&&n++,o===L.INTERIOR&&(i=!0)}var o=L.NONE;i&&(o=L.INTERIOR),n>0&&(o=$n.determineBoundary(e,n)),this.label.setLocation(t,o)},computeLabelSide:function(t,e){for(var n=this.iterator();n.hasNext();){var i=n.next();if(i.getLabel().isArea()){var r=i.getLabel().getLocation(t,e);if(r===L.INTERIOR)return this.label.setLocation(t,e,L.INTERIOR),null;r===L.EXTERIOR&&this.label.setLocation(t,e,L.EXTERIOR)}}},getLabel:function(){return this.label},computeLabelSides:function(t){this.computeLabelSide(t,cn.LEFT),this.computeLabelSide(t,cn.RIGHT)},updateIM:function(t){Jn.updateIM(this.label,t)},computeLabel:function(t){for(var e=!1,n=this.iterator();n.hasNext();){var i=n.next();i.getLabel().isArea()&&(e=!0)}e?this.label=new gn(L.NONE,L.NONE,L.NONE):this.label=new gn(L.NONE);for(var r=0;r<2;r++)this.computeLabelOn(r,t),e&&this.computeLabelSides(r)},interfaces_:function(){return[]},getClass:function(){return Fr}}),h(Gr,Pn),e(Gr.prototype,{updateIM:function(t){for(var e=this.iterator();e.hasNext();){var n=e.next();n.updateIM(t)}},insert:function(t){var e=this.edgeMap.get(t);null===e?(e=new Fr(t),this.insertEdgeEnd(t,e)):e.insert(t)},interfaces_:function(){return[]},getClass:function(){return Gr}}),h(qr,yn),e(qr.prototype,{updateIMFromEdges:function(t){this.edges.updateIM(t)},computeIM:function(t){t.setAtLeastIfValid(this.label.getLocation(0),this.label.getLocation(1),0)},interfaces_:function(){return[]},getClass:function(){return qr}}),h(Br,Nn),e(Br.prototype,{createNode:function(t){return new qr(t,new Gr)},interfaces_:function(){return[]},getClass:function(){return Br}}),e(zr.prototype,{insertEdgeEnds:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.nodes.add(n)}},getNodeIterator:function(){return this.nodes.iterator()},copyNodesAndLabels:function(t,e){for(var n=t.getNodeIterator();n.hasNext();){var i=n.next(),r=this.nodes.addNode(i.getCoordinate());r.setLabel(e,i.getLabel().getLocation(e))}},build:function(t){this.computeIntersectionNodes(t,0),this.copyNodesAndLabels(t,0);var e=new Ar,n=e.computeEdgeEnds(t.getEdgeIterator());this.insertEdgeEnds(n)},computeIntersectionNodes:function(t,e){for(var n=t.getEdgeIterator();n.hasNext();)for(var i=n.next(),r=i.getLabel().getLocation(e),s=i.getEdgeIntersectionList().iterator();s.hasNext();){var o=s.next(),a=this.nodes.addNode(o.coord);r===L.BOUNDARY?a.setLabelBoundary(e):a.getLabel().isNull(e)&&a.setLabel(e,L.INTERIOR)}},interfaces_:function(){return[]},getClass:function(){return zr}}),e(Vr.prototype,{isNodeEdgeAreaLabelsConsistent:function(){for(var t=this.nodeGraph.getNodeIterator();t.hasNext();){var e=t.next();if(!e.getEdges().isAreaLabelsConsistent(this.geomGraph))return this.invalidPoint=e.getCoordinate().copy(),!1}return!0},getInvalidPoint:function(){return this.invalidPoint},hasDuplicateRings:function(){for(var t=this.nodeGraph.getNodeIterator();t.hasNext();)for(var e=t.next(),n=e.getEdges().iterator();n.hasNext();){var i=n.next();if(i.getEdgeEnds().size()>1)return this.invalidPoint=i.getEdge().getCoordinate(0),!0}return!1},isNodeConsistentArea:function(){var t=this.geomGraph.computeSelfNodes(this.li,!0,!0);return t.hasProperIntersection()?(this.invalidPoint=t.getProperIntersectionPoint(),!1):(this.nodeGraph.build(this.geomGraph),this.isNodeEdgeAreaLabelsConsistent())},interfaces_:function(){return[]},getClass:function(){return Vr}}),e(kr.prototype,{buildIndex:function(){this.index=new ke;for(var t=0;t<this.rings.size();t++){var e=this.rings.get(t),n=e.getEnvelopeInternal();this.index.insert(n,e)}},getNestedPoint:function(){return this.nestedPt},isNonNested:function(){this.buildIndex();for(var t=0;t<this.rings.size();t++)for(var e=this.rings.get(t),n=e.getCoordinates(),i=this.index.query(e.getEnvelopeInternal()),r=0;r<i.size();r++){var s=i.get(r),o=s.getCoordinates();if(e!==s&&e.getEnvelopeInternal().intersects(s.getEnvelopeInternal())){var a=Ur.findPtNotNode(n,s,this.graph);if(null!==a){var u=he.isPointInRing(a,o);if(u)return this.nestedPt=a,!1}}}return!0},add:function(t){this.rings.add(t),this.totalEnv.expandToInclude(t.getEnvelopeInternal())},interfaces_:function(){return[]},getClass:function(){return kr}}),e(Yr.prototype,{getErrorType:function(){return this.errorType},getMessage:function(){return Yr.errMsg[this.errorType]},getCoordinate:function(){return this.pt},toString:function(){var t="";return null!==this.pt&&(t=" at or near point "+this.pt),this.getMessage()+t},interfaces_:function(){return[]},getClass:function(){return Yr}}),Yr.ERROR=0,Yr.REPEATED_POINT=1,Yr.HOLE_OUTSIDE_SHELL=2,Yr.NESTED_HOLES=3,Yr.DISCONNECTED_INTERIOR=4,Yr.SELF_INTERSECTION=5,Yr.RING_SELF_INTERSECTION=6,Yr.NESTED_SHELLS=7,Yr.DUPLICATE_RINGS=8,Yr.TOO_FEW_POINTS=9,Yr.INVALID_COORDINATE=10,Yr.RING_NOT_CLOSED=11,Yr.errMsg=["Topology Validation Error","Repeated Point","Hole lies outside shell","Holes are nested","Interior is disconnected","Self-intersection","Ring Self-intersection","Nested shells","Duplicate Rings","Too few distinct points in geometry component","Invalid Coordinate","Ring is not closed"],e(Ur.prototype,{checkInvalidCoordinates:function(){if(arguments[0]instanceof Array){for(var t=arguments[0],e=0;e<t.length;e++)if(!Ur.isValid(t[e]))return this.validErr=new Yr(Yr.INVALID_COORDINATE,t[e]),null}else if(arguments[0]instanceof Tt){var n=arguments[0];if(this.checkInvalidCoordinates(n.getExteriorRing().getCoordinates()),null!==this.validErr)return null;for(var e=0;e<n.getNumInteriorRing();e++)if(this.checkInvalidCoordinates(n.getInteriorRingN(e).getCoordinates()),null!==this.validErr)return null}},checkHolesNotNested:function(t,e){for(var n=new kr(e),i=0;i<t.getNumInteriorRing();i++){var r=t.getInteriorRingN(i);n.add(r)}var s=n.isNonNested();s||(this.validErr=new Yr(Yr.NESTED_HOLES,n.getNestedPoint()))},checkConsistentArea:function(t){var e=new Vr(t),n=e.isNodeConsistentArea();return n?void(e.hasDuplicateRings()&&(this.validErr=new Yr(Yr.DUPLICATE_RINGS,e.getInvalidPoint()))):(this.validErr=new Yr(Yr.SELF_INTERSECTION,e.getInvalidPoint()),null)},isValid:function(){return this.checkValid(this.parentGeometry),null===this.validErr},checkShellInsideHole:function(t,e,n){var i=t.getCoordinates(),r=e.getCoordinates(),s=Ur.findPtNotNode(i,e,n);if(null!==s){var o=he.isPointInRing(s,r);if(!o)return s}var a=Ur.findPtNotNode(r,t,n);if(null!==a){var u=he.isPointInRing(a,i);return u?a:null}return f.shouldNeverReachHere("points in shell and hole appear to be equal"),null},checkNoSelfIntersectingRings:function(t){for(var e=t.getEdgeIterator();e.hasNext();){var n=e.next();if(this.checkNoSelfIntersectingRing(n.getEdgeIntersectionList()),null!==this.validErr)return null}},checkConnectedInteriors:function(t){var e=new Dr(t);e.isInteriorsConnected()||(this.validErr=new Yr(Yr.DISCONNECTED_INTERIOR,e.getCoordinate()))},checkNoSelfIntersectingRing:function(t){for(var e=new at,n=!0,i=t.iterator();i.hasNext();){var r=i.next();if(n)n=!1;else{if(e.contains(r.coord))return this.validErr=new Yr(Yr.RING_SELF_INTERSECTION,r.coord),null;e.add(r.coord)}}},checkHolesInShell:function(t,e){for(var n=t.getExteriorRing(),i=new Ii(n),r=0;r<t.getNumInteriorRing();r++){var s=t.getInteriorRingN(r),o=Ur.findPtNotNode(s.getCoordinates(),n,e);if(null===o)return null;var a=!i.isInside(o);if(a)return this.validErr=new Yr(Yr.HOLE_OUTSIDE_SHELL,o),null}},checkTooFewPoints:function(t){if(t.hasTooFewPoints())return this.validErr=new Yr(Yr.TOO_FEW_POINTS,t.getInvalidPoint()),null},getValidationError:function(){return this.checkValid(this.parentGeometry),this.validErr},checkValid:function(){if(arguments[0]instanceof Lt){var t=arguments[0];this.checkInvalidCoordinates(t.getCoordinates())}else if(arguments[0]instanceof Pt){var e=arguments[0];this.checkInvalidCoordinates(e.getCoordinates())}else if(arguments[0]instanceof bt){var n=arguments[0];if(this.checkInvalidCoordinates(n.getCoordinates()),null!==this.validErr)return null;if(this.checkClosedRing(n),null!==this.validErr)return null;var i=new $n(0,n);if(this.checkTooFewPoints(i),null!==this.validErr)return null;var r=new ae;i.computeSelfNodes(r,!0,!0),this.checkNoSelfIntersectingRings(i)}else if(arguments[0]instanceof St){var s=arguments[0];if(this.checkInvalidCoordinates(s.getCoordinates()),null!==this.validErr)return null;var i=new $n(0,s);this.checkTooFewPoints(i)}else if(arguments[0]instanceof Tt){var o=arguments[0];if(this.checkInvalidCoordinates(o),null!==this.validErr)return null;if(this.checkClosedRings(o),null!==this.validErr)return null;var i=new $n(0,o);if(this.checkTooFewPoints(i),null!==this.validErr)return null;if(this.checkConsistentArea(i),null!==this.validErr)return null;if(!this.isSelfTouchingRingFormingHoleValid&&(this.checkNoSelfIntersectingRings(i),null!==this.validErr))return null;if(this.checkHolesInShell(o,i),null!==this.validErr)return null;if(this.checkHolesNotNested(o,i),null!==this.validErr)return null;this.checkConnectedInteriors(i)}else if(arguments[0]instanceof Ot){for(var a=arguments[0],u=0;u<a.getNumGeometries();u++){var l=a.getGeometryN(u);if(this.checkInvalidCoordinates(l),null!==this.validErr)return null;if(this.checkClosedRings(l),null!==this.validErr)return null}var i=new $n(0,a);if(this.checkTooFewPoints(i),null!==this.validErr)return null;if(this.checkConsistentArea(i),null!==this.validErr)return null;if(!this.isSelfTouchingRingFormingHoleValid&&(this.checkNoSelfIntersectingRings(i),null!==this.validErr))return null;for(var u=0;u<a.getNumGeometries();u++){var l=a.getGeometryN(u);if(this.checkHolesInShell(l,i),null!==this.validErr)return null}for(var u=0;u<a.getNumGeometries();u++){var l=a.getGeometryN(u);if(this.checkHolesNotNested(l,i),null!==this.validErr)return null}if(this.checkShellsNotNested(a,i),null!==this.validErr)return null;this.checkConnectedInteriors(i)}else if(arguments[0]instanceof ft)for(var h=arguments[0],u=0;u<h.getNumGeometries();u++){var c=h.getGeometryN(u);if(this.checkValid(c),null!==this.validErr)return null}else if(arguments[0]instanceof B){var f=arguments[0];if(this.validErr=null,f.isEmpty())return null;if(f instanceof Lt)this.checkValid(f);else if(f instanceof Pt)this.checkValid(f);else if(f instanceof bt)this.checkValid(f);else if(f instanceof St)this.checkValid(f);else if(f instanceof Tt)this.checkValid(f);else if(f instanceof Ot)this.checkValid(f);else{if(!(f instanceof ft))throw new UnsupportedOperationException(f.getClass().getName());this.checkValid(f)}}},setSelfTouchingRingFormingHoleValid:function(t){this.isSelfTouchingRingFormingHoleValid=t},checkShellNotNested:function(t,e,n){var i=t.getCoordinates(),r=e.getExteriorRing(),s=r.getCoordinates(),o=Ur.findPtNotNode(i,r,n);if(null===o)return null;var a=he.isPointInRing(o,s);if(!a)return null;if(e.getNumInteriorRing()<=0)return this.validErr=new Yr(Yr.NESTED_SHELLS,o),null;for(var u=null,l=0;l<e.getNumInteriorRing();l++){var h=e.getInteriorRingN(l);if(u=this.checkShellInsideHole(t,h,n),null===u)return null}this.validErr=new Yr(Yr.NESTED_SHELLS,u)},checkClosedRings:function(t){if(this.checkClosedRing(t.getExteriorRing()),null!==this.validErr)return null;for(var e=0;e<t.getNumInteriorRing();e++)if(this.checkClosedRing(t.getInteriorRingN(e)),null!==this.validErr)return null},checkClosedRing:function(t){if(!t.isClosed()){var e=null;t.getNumPoints()>=1&&(e=t.getCoordinateN(0)),this.validErr=new Yr(Yr.RING_NOT_CLOSED,e)}},checkShellsNotNested:function(t,e){for(var n=0;n<t.getNumGeometries();n++)for(var i=t.getGeometryN(n),r=i.getExteriorRing(),s=0;s<t.getNumGeometries();s++)if(n!==s){var o=t.getGeometryN(s);if(this.checkShellNotNested(r,o,e),null!==this.validErr)return null}},interfaces_:function(){return[]},getClass:function(){return Ur}}),Ur.findPtNotNode=function(t,e,n){for(var i=n.findEdge(e),r=i.getEdgeIntersectionList(),s=0;s<t.length;s++){var o=t[s];if(!r.isIntersection(o))return o}return null},Ur.isValid=function(){if(arguments[0]instanceof B){var t=arguments[0],e=new Ur(t);return e.isValid()}if(arguments[0]instanceof g){var n=arguments[0];return!r.isNaN(n.x)&&(!r.isInfinite(n.x)&&(!r.isNaN(n.y)&&!r.isInfinite(n.y)))}},e(Xr.prototype,{isIncluded:function(){return this._isIncluded},getCoordinates:function(){if(null===this.ringPts){for(var t=new N,e=this.deList.iterator();e.hasNext();){var n=e.next(),i=n.getEdge();Xr.addEdge(i.getLine().getCoordinates(),n.getEdgeDirection(),t)}this.ringPts=t.toCoordinateArray()}return this.ringPts},isIncludedSet:function(){return this._isIncludedSet},isValid:function(){return this.getCoordinates(),!(this.ringPts.length<=3)&&(this.getRing(),Ur.isValid(this.ring))},build:function(t){var e=t;do this.add(e),e.setRing(this),e=e.getNext(),f.isTrue(null!==e,"found null DE in ring"),f.isTrue(e===t||!e.isInRing(),"found DE already in ring");while(e!==t)},isOuterHole:function(){return!!this._isHole&&!this.hasShell()},getPolygon:function(){var t=null;if(null!==this.holes){t=new Array(this.holes.size()).fill(null);for(var e=0;e<this.holes.size();e++)t[e]=this.holes.get(e)}var n=this.factory.createPolygon(this.ring,t);return n},isHole:function(){return this._isHole},isProcessed:function(){return this._isProcessed},addHole:function(){if(arguments[0]instanceof bt){var t=arguments[0];null===this.holes&&(this.holes=new I),this.holes.add(t)}else if(arguments[0]instanceof Xr){var e=arguments[0];e.setShell(this);var n=e.getRing();null===this.holes&&(this.holes=new I),this.holes.add(n)}},setIncluded:function(t){this._isIncluded=t,this._isIncludedSet=!0},getOuterHole:function(){if(this.isHole())return null;for(var t=0;t<this.deList.size();t++){var e=this.deList.get(t),n=e.getSym().getRing();if(n.isOuterHole())return n}return null},computeHole:function(){var t=this.getRing();this._isHole=he.isCCW(t.getCoordinates())},hasShell:function(){return null!==this.shell},isOuterShell:function(){return null!==this.getOuterHole()},getLineString:function(){return this.getCoordinates(),this.factory.createLineString(this.ringPts)},toString:function(){return se.toLineString(new Gt(this.getCoordinates()))},getShell:function(){return this.isHole()?this.shell:this},add:function(t){this.deList.add(t)},getRing:function(){if(null!==this.ring)return this.ring;this.getCoordinates(),this.ringPts.length<3&&A.out.println(this.ringPts);try{this.ring=this.factory.createLinearRing(this.ringPts)}catch(t){if(!(t instanceof S))throw t;A.out.println(this.ringPts)}finally{}return this.ring},updateIncluded:function(){if(this.isHole())return null;for(var t=0;t<this.deList.size();t++){var e=this.deList.get(t),n=e.getSym().getRing().getShell();if(null!==n&&n.isIncludedSet())return this.setIncluded(!n.isIncluded()),null}},setShell:function(t){this.shell=t},setProcessed:function(t){this._isProcessed=t},interfaces_:function(){return[]},getClass:function(){return Xr}}),Xr.findDirEdgesInRing=function(t){var e=t,n=new I;do n.add(e),e=e.getNext(),f.isTrue(null!==e,"found null DE in ring"),f.isTrue(e===t||!e.isInRing(),"found DE already in ring");while(e!==t);return n},Xr.addEdge=function(t,e,n){if(e)for(var i=0;i<t.length;i++)n.add(t[i],!1);else for(var i=t.length-1;i>=0;i--)n.add(t[i],!1)},Xr.findEdgeRingContaining=function(t,e){for(var n=t.getRing(),i=n.getEnvelopeInternal(),r=n.getCoordinateN(0),s=null,o=null,a=e.iterator();a.hasNext();){var u=a.next(),l=u.getRing(),h=l.getEnvelopeInternal();if(!h.equals(i)&&h.contains(i)){r=H.ptNotInList(n.getCoordinates(),l.getCoordinates());var c=!1;he.isPointInRing(r,l.getCoordinates())&&(c=!0),c&&(null===s||o.contains(h))&&(s=u,o=s.getRing().getEnvelopeInternal())}}return s},e(Hr.prototype,{compare:function(t,e){var n=t,i=e;return n.getRing().getEnvelope().compareTo(i.getRing().getEnvelope())},interfaces_:function(){return[a]},getClass:function(){return Hr}}),Xr.EnvelopeComparator=Hr,h(Wr,Pr),e(Wr.prototype,{findEdgeRing:function(t){var e=new Xr(this.factory);return e.build(t),e},computeDepthParity:function(){if(0===arguments.length)for(;;){var t=null;if(null===t)return null;this.computeDepthParity(t)}else if(1===arguments.length){arguments[0]}},computeNextCWEdges:function(){for(var t=this.nodeIterator();t.hasNext();){var e=t.next();Wr.computeNextCWEdges(e)}},addEdge:function(t){if(t.isEmpty())return null;var e=H.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return null;var n=e[0],i=e[e.length-1],r=this.getNode(n),s=this.getNode(i),o=new _r(r,s,e[1],(!0)),a=new _r(s,r,e[e.length-2],(!1)),u=new Mr(t);u.setDirectedEdges(o,a),this.add(u)},deleteCutEdges:function(){this.computeNextCWEdges(),Wr.findLabeledEdgeRings(this.dirEdges);for(var t=new I,e=this.dirEdges.iterator();e.hasNext();){var n=e.next();if(!n.isMarked()){var i=n.getSym();if(n.getLabel()===i.getLabel()){n.setMarked(!0),i.setMarked(!0);var r=n.getEdge();t.add(r.getLine())}}}return t},getEdgeRings:function(){this.computeNextCWEdges(),Wr.label(this.dirEdges,-1);var t=Wr.findLabeledEdgeRings(this.dirEdges);this.convertMaximalToMinimalEdgeRings(t);for(var e=new I,n=this.dirEdges.iterator();n.hasNext();){var i=n.next();if(!i.isMarked()&&!i.isInRing()){var r=this.findEdgeRing(i);e.add(r)}}return e},getNode:function(t){var e=this.findNode(t);return null===e&&(e=new Lr(t),this.add(e)),e},convertMaximalToMinimalEdgeRings:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=n.getLabel(),r=Wr.findIntersectionNodes(n,i);if(null!==r)for(var s=r.iterator();s.hasNext();){var o=s.next();Wr.computeNextCCWEdges(o,i)}}},deleteDangles:function(){for(var t=this.findNodesOfDegree(1),e=new J,n=new pe,i=t.iterator();i.hasNext();)n.push(i.next());for(;!n.isEmpty();){var r=n.pop();Wr.deleteAllEdges(r);for(var s=r.getOutEdges().getEdges(),i=s.iterator();i.hasNext();){var o=i.next();o.setMarked(!0);var a=o.getSym();null!==a&&a.setMarked(!0);var u=o.getEdge();e.add(u.getLine());var l=o.getToNode();1===Wr.getDegreeNonDeleted(l)&&n.push(l)}}return e},interfaces_:function(){return[]},getClass:function(){return Wr}}),Wr.findLabeledEdgeRings=function(t){for(var e=new I,n=1,i=t.iterator();i.hasNext();){var r=i.next();if(!(r.isMarked()||r.getLabel()>=0)){e.add(r);var s=Xr.findDirEdgesInRing(r);Wr.label(s,n),n++}}return e},Wr.getDegreeNonDeleted=function(t){for(var e=t.getOutEdges().getEdges(),n=0,i=e.iterator();i.hasNext();){var r=i.next();r.isMarked()||n++}return n},Wr.deleteAllEdges=function(t){for(var e=t.getOutEdges().getEdges(),n=e.iterator();n.hasNext();){var i=n.next();i.setMarked(!0);var r=i.getSym();null!==r&&r.setMarked(!0)}},Wr.label=function(t,e){for(var n=t.iterator();n.hasNext();){var i=n.next();i.setLabel(e)}},Wr.computeNextCWEdges=function(t){for(var e=t.getOutEdges(),n=null,i=null,r=e.getEdges().iterator();r.hasNext();){var s=r.next();if(!s.isMarked()){if(null===n&&(n=s),null!==i){var o=i.getSym();o.setNext(s)}i=s}}if(null!==i){var o=i.getSym();o.setNext(n)}},Wr.computeNextCCWEdges=function(t,e){for(var n=t.getOutEdges(),i=null,r=null,s=n.getEdges(),o=s.size()-1;o>=0;o--){var a=s.get(o),u=a.getSym(),l=null;a.getLabel()===e&&(l=a);var h=null;u.getLabel()===e&&(h=u),null===l&&null===h||(null!==h&&(r=h),null!==l&&(null!==r&&(r.setNext(l),r=null),null===i&&(i=l)))}null!==r&&(f.isTrue(null!==i),r.setNext(i))},Wr.getDegree=function(t,e){for(var n=t.getOutEdges().getEdges(),i=0,r=n.iterator();r.hasNext();){var s=r.next();s.getLabel()===e&&i++}return i},Wr.findIntersectionNodes=function(t,e){var n=t,i=null;do{var r=n.getFromNode();Wr.getDegree(r,e)>1&&(null===i&&(i=new I),i.add(r)),n=n.getNext(),f.isTrue(null!==n,"found null DE in ring"),f.isTrue(n===t||!n.isInRing(),"found DE already in ring")}while(n!==t);return i},e(jr.prototype,{getGeometry:function(){return null===this.geomFactory&&(this.geomFactory=new ie),this.polygonize(),this.extractOnlyPolygonal?this.geomFactory.buildGeometry(this.polyList):this.geomFactory.createGeometryCollection(ie.toGeometryArray(this.polyList))},getInvalidRingLines:function(){return this.polygonize(),this.invalidRingLines},findValidRings:function(t,e,n){for(var i=t.iterator();i.hasNext();){var r=i.next();r.isValid()?e.add(r):n.add(r.getLineString())}},polygonize:function(){if(null!==this.polyList)return null;
if(this.polyList=new I,null===this.graph)return null;this.dangles=this.graph.deleteDangles(),this.cutEdges=this.graph.deleteCutEdges();var t=this.graph.getEdgeRings(),e=new I;this.invalidRingLines=new I,this.isCheckingRingsValid?this.findValidRings(t,e,this.invalidRingLines):e=t,this.findShellsAndHoles(e),jr.assignHolesToShells(this.holeList,this.shellList),ho.sort(this.shellList,new Xr.EnvelopeComparator);var n=!0;this.extractOnlyPolygonal&&(jr.findDisjointShells(this.shellList),n=!1),this.polyList=jr.extractPolygons(this.shellList,n)},getDangles:function(){return this.polygonize(),this.dangles},getCutEdges:function(){return this.polygonize(),this.cutEdges},getPolygons:function(){return this.polygonize(),this.polyList},add:function(){if(R(arguments[0],v))for(var t=arguments[0],e=t.iterator();e.hasNext();){var n=e.next();this.add(n)}else if(arguments[0]instanceof St){var i=arguments[0];this.geomFactory=i.getFactory(),null===this.graph&&(this.graph=new Wr(this.geomFactory)),this.graph.addEdge(i)}else if(arguments[0]instanceof B){var r=arguments[0];r.apply(this.lineStringAdder)}},setCheckRingsValid:function(t){this.isCheckingRingsValid=t},findShellsAndHoles:function(t){this.holeList=new I,this.shellList=new I;for(var e=t.iterator();e.hasNext();){var n=e.next();n.computeHole(),n.isHole()?this.holeList.add(n):this.shellList.add(n)}},interfaces_:function(){return[]},getClass:function(){return jr}}),jr.findOuterShells=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=n.getOuterHole();null===i||i.isProcessed()||(n.setIncluded(!0),i.setProcessed(!0))}},jr.extractPolygons=function(t,e){for(var n=new I,i=t.iterator();i.hasNext();){var r=i.next();(e||r.isIncluded())&&n.add(r.getPolygon())}return n},jr.assignHolesToShells=function(t,e){for(var n=t.iterator();n.hasNext();){var i=n.next();jr.assignHoleToShell(i,e)}},jr.assignHoleToShell=function(t,e){var n=Xr.findEdgeRingContaining(t,e);null!==n&&n.addHole(t)},jr.findDisjointShells=function(t){jr.findOuterShells(t);var e=null;do{e=!1;for(var n=t.iterator();n.hasNext();){var i=n.next();i.isIncludedSet()||(i.updateIncluded(),i.isIncludedSet()||(e=!0))}}while(e)},e(Kr.prototype,{filter:function(t){t instanceof St&&this.p.add(t)},interfaces_:function(){return[q]},getClass:function(){return Kr}}),jr.LineStringAdder=Kr;var To=Object.freeze({Polygonizer:jr});e(Zr.prototype,{insertEdgeEnds:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.nodes.add(n)}},computeProperIntersectionIM:function(t,e){var n=this.arg[0].getGeometry().getDimension(),i=this.arg[1].getGeometry().getDimension(),r=t.hasProperIntersection(),s=t.hasProperInteriorIntersection();2===n&&2===i?r&&e.setAtLeast("212101212"):2===n&&1===i?(r&&e.setAtLeast("FFF0FFFF2"),s&&e.setAtLeast("1FFFFF1FF")):1===n&&2===i?(r&&e.setAtLeast("F0FFFFFF2"),s&&e.setAtLeast("1F1FFFFFF")):1===n&&1===i&&s&&e.setAtLeast("0FFFFFFFF")},labelIsolatedEdges:function(t,e){for(var n=this.arg[t].getEdgeIterator();n.hasNext();){var i=n.next();i.isIsolated()&&(this.labelIsolatedEdge(i,e,this.arg[e].getGeometry()),this.isolatedEdges.add(i))}},labelIsolatedEdge:function(t,e,n){if(n.getDimension()>0){var i=this.ptLocator.locate(t.getCoordinate(),n);t.getLabel().setAllLocations(e,i)}else t.getLabel().setAllLocations(e,L.EXTERIOR)},computeIM:function(){var t=new fe;if(t.set(L.EXTERIOR,L.EXTERIOR,2),!this.arg[0].getGeometry().getEnvelopeInternal().intersects(this.arg[1].getGeometry().getEnvelopeInternal()))return this.computeDisjointIM(t),t;this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1);var e=this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!1);this.computeIntersectionNodes(0),this.computeIntersectionNodes(1),this.copyNodesAndLabels(0),this.copyNodesAndLabels(1),this.labelIsolatedNodes(),this.computeProperIntersectionIM(e,t);var n=new Ar,i=n.computeEdgeEnds(this.arg[0].getEdgeIterator());this.insertEdgeEnds(i);var r=n.computeEdgeEnds(this.arg[1].getEdgeIterator());return this.insertEdgeEnds(r),this.labelNodeEdges(),this.labelIsolatedEdges(0,1),this.labelIsolatedEdges(1,0),this.updateIM(t),t},labelNodeEdges:function(){for(var t=this.nodes.iterator();t.hasNext();){var e=t.next();e.getEdges().computeLabelling(this.arg)}},copyNodesAndLabels:function(t){for(var e=this.arg[t].getNodeIterator();e.hasNext();){var n=e.next(),i=this.nodes.addNode(n.getCoordinate());i.setLabel(t,n.getLabel().getLocation(t))}},labelIntersectionNodes:function(t){for(var e=this.arg[t].getEdgeIterator();e.hasNext();)for(var n=e.next(),i=n.getLabel().getLocation(t),r=n.getEdgeIntersectionList().iterator();r.hasNext();){var s=r.next(),o=this.nodes.find(s.coord);o.getLabel().isNull(t)&&(i===L.BOUNDARY?o.setLabelBoundary(t):o.setLabel(t,L.INTERIOR))}},labelIsolatedNode:function(t,e){var n=this.ptLocator.locate(t.getCoordinate(),this.arg[e].getGeometry());t.getLabel().setAllLocations(e,n)},computeIntersectionNodes:function(t){for(var e=this.arg[t].getEdgeIterator();e.hasNext();)for(var n=e.next(),i=n.getLabel().getLocation(t),r=n.getEdgeIntersectionList().iterator();r.hasNext();){var s=r.next(),o=this.nodes.addNode(s.coord);i===L.BOUNDARY?o.setLabelBoundary(t):o.getLabel().isNull(t)&&o.setLabel(t,L.INTERIOR)}},labelIsolatedNodes:function(){for(var t=this.nodes.iterator();t.hasNext();){var e=t.next(),n=e.getLabel();f.isTrue(n.getGeometryCount()>0,"node with empty label found"),e.isIsolated()&&(n.isNull(0)?this.labelIsolatedNode(e,0):this.labelIsolatedNode(e,1))}},updateIM:function(t){for(var e=this.isolatedEdges.iterator();e.hasNext();){var n=e.next();n.updateIM(t)}for(var i=this.nodes.iterator();i.hasNext();){var r=i.next();r.updateIM(t),r.updateIMFromEdges(t)}},computeDisjointIM:function(t){var e=this.arg[0].getGeometry();e.isEmpty()||(t.set(L.INTERIOR,L.EXTERIOR,e.getDimension()),t.set(L.BOUNDARY,L.EXTERIOR,e.getBoundaryDimension()));var n=this.arg[1].getGeometry();n.isEmpty()||(t.set(L.EXTERIOR,L.INTERIOR,n.getDimension()),t.set(L.EXTERIOR,L.BOUNDARY,n.getBoundaryDimension()))},interfaces_:function(){return[]},getClass:function(){return Zr}}),e(Qr.prototype,{isContainedInBoundary:function(t){if(t instanceof Tt)return!1;if(t instanceof Lt)return this.isPointContainedInBoundary(t);if(t instanceof St)return this.isLineStringContainedInBoundary(t);for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);if(!this.isContainedInBoundary(n))return!1}return!0},isLineSegmentContainedInBoundary:function(t,e){if(t.equals(e))return this.isPointContainedInBoundary(t);if(t.x===e.x){if(t.x===this.rectEnv.getMinX()||t.x===this.rectEnv.getMaxX())return!0}else if(t.y===e.y&&(t.y===this.rectEnv.getMinY()||t.y===this.rectEnv.getMaxY()))return!0;return!1},isLineStringContainedInBoundary:function(t){for(var e=t.getCoordinateSequence(),n=new g,i=new g,r=0;r<e.size()-1;r++)if(e.getCoordinate(r,n),e.getCoordinate(r+1,i),!this.isLineSegmentContainedInBoundary(n,i))return!1;return!0},isPointContainedInBoundary:function(){if(arguments[0]instanceof Lt){var t=arguments[0];return this.isPointContainedInBoundary(t.getCoordinate())}if(arguments[0]instanceof g){var e=arguments[0];return e.x===this.rectEnv.getMinX()||e.x===this.rectEnv.getMaxX()||e.y===this.rectEnv.getMinY()||e.y===this.rectEnv.getMaxY()}},contains:function(t){return!!this.rectEnv.contains(t.getEnvelopeInternal())&&!this.isContainedInBoundary(t)},interfaces_:function(){return[]},getClass:function(){return Qr}}),Qr.contains=function(t,e){var n=new Qr(t);return n.contains(e)},e(Jr.prototype,{intersects:function(t,e){var n=new C(t,e);if(!this.rectEnv.intersects(n))return!1;if(this.rectEnv.intersects(t))return!0;if(this.rectEnv.intersects(e))return!0;if(t.compareTo(e)>0){var i=t;t=e,e=i}var r=!1;return e.y>t.y&&(r=!0),r?this.li.computeIntersection(t,e,this.diagDown0,this.diagDown1):this.li.computeIntersection(t,e,this.diagUp0,this.diagUp1),!!this.li.hasIntersection()},interfaces_:function(){return[]},getClass:function(){return Jr}}),e($r.prototype,{applyTo:function(t){for(var e=0;e<t.getNumGeometries()&&!this._isDone;e++){var n=t.getGeometryN(e);if(n instanceof ft)this.applyTo(n);else if(this.visit(n),this.isDone())return this._isDone=!0,null}},interfaces_:function(){return[]},getClass:function(){return $r}}),e(ts.prototype,{intersects:function(t){if(!this.rectEnv.intersects(t.getEnvelopeInternal()))return!1;var e=new es(this.rectEnv);if(e.applyTo(t),e.intersects())return!0;var n=new ns(this.rectangle);if(n.applyTo(t),n.containsPoint())return!0;var i=new is(this.rectangle);return i.applyTo(t),!!i.intersects()},interfaces_:function(){return[]},getClass:function(){return ts}}),ts.intersects=function(t,e){var n=new ts(t);return n.intersects(e)},h(es,$r),e(es.prototype,{isDone:function(){return this._intersects===!0},visit:function(t){var e=t.getEnvelopeInternal();return this.rectEnv.intersects(e)?this.rectEnv.contains(e)?(this._intersects=!0,null):e.getMinX()>=this.rectEnv.getMinX()&&e.getMaxX()<=this.rectEnv.getMaxX()?(this._intersects=!0,null):e.getMinY()>=this.rectEnv.getMinY()&&e.getMaxY()<=this.rectEnv.getMaxY()?(this._intersects=!0,null):void 0:null},intersects:function(){return this._intersects},interfaces_:function(){return[]},getClass:function(){return es}}),h(ns,$r),e(ns.prototype,{isDone:function(){return this._containsPoint===!0},visit:function(t){if(!(t instanceof Tt))return null;var e=t.getEnvelopeInternal();if(!this.rectEnv.intersects(e))return null;for(var n=new g,i=0;i<4;i++)if(this.rectSeq.getCoordinate(i,n),e.contains(n)&&Tn.containsPointInPolygon(n,t))return this._containsPoint=!0,null},containsPoint:function(){return this._containsPoint},interfaces_:function(){return[]},getClass:function(){return ns}}),h(is,$r),e(is.prototype,{intersects:function(){return this.hasIntersection},isDone:function(){return this.hasIntersection===!0},visit:function(t){var e=t.getEnvelopeInternal();if(!this.rectEnv.intersects(e))return null;var n=kn.getLines(t);this.checkIntersectionWithLineStrings(n)},checkIntersectionWithLineStrings:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();if(this.checkIntersectionWithSegments(n),this.hasIntersection)return null}},checkIntersectionWithSegments:function(t){for(var e=t.getCoordinateSequence(),n=1;n<e.size();n++)if(e.getCoordinate(n-1,this.p0),e.getCoordinate(n,this.p1),this.rectIntersector.intersects(this.p0,this.p1))return this.hasIntersection=!0,null},interfaces_:function(){return[]},getClass:function(){return is}}),h(rs,ti),e(rs.prototype,{getIntersectionMatrix:function(){return this._relate.computeIM()},interfaces_:function(){return[]},getClass:function(){return rs}}),rs.covers=function(t,e){return!!t.getEnvelopeInternal().covers(e.getEnvelopeInternal())&&(!!t.isRectangle()||rs.relate(t,e).isCovers())},rs.intersects=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&(t.isRectangle()?ts.intersects(t,e):e.isRectangle()?ts.intersects(e,t):rs.relate(t,e).isIntersects())},rs.touches=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&rs.relate(t,e).isTouches(t.getDimension(),e.getDimension())},rs.within=function(t,e){return e.contains(t)},rs.coveredBy=function(t,e){return rs.covers(e,t)},rs.relate=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new rs(t,e),i=n.getIntersectionMatrix();return i}if(3===arguments.length){if("string"==typeof arguments[2]&&arguments[0]instanceof B&&arguments[1]instanceof B){var r=arguments[0],s=arguments[1],o=arguments[2];return rs.relateWithCheck(r,s).matches(o)}if(R(arguments[2],V)&&arguments[0]instanceof B&&arguments[1]instanceof B){var a=arguments[0],u=arguments[1],l=arguments[2],n=new rs(a,u,l),i=n.getIntersectionMatrix();return i}}},rs.overlaps=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&rs.relate(t,e).isOverlaps(t.getDimension(),e.getDimension())},rs.disjoint=function(t,e){return!t.intersects(e)},rs.relateWithCheck=function(t,e){return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),rs.relate(t,e)},rs.crosses=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&rs.relate(t,e).isCrosses(t.getDimension(),e.getDimension())},rs.contains=function(t,e){return!!t.getEnvelopeInternal().contains(e.getEnvelopeInternal())&&(t.isRectangle()?Qr.contains(t,e):rs.relate(t,e).isContains())};var Po=Object.freeze({RelateOp:rs});e(ss.prototype,{extractElements:function(t,e){if(null===t)return null;for(var n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n);this.skipEmpty&&i.isEmpty()||e.add(i)}},combine:function(){for(var t=new I,e=this.inputGeoms.iterator();e.hasNext();){var n=e.next();this.extractElements(n,t)}return 0===t.size()?null!==this.geomFactory?this.geomFactory.createGeometryCollection(null):null:this.geomFactory.buildGeometry(t)},interfaces_:function(){return[]},getClass:function(){return ss}}),ss.combine=function(){if(1===arguments.length){var t=arguments[0],e=new ss(t);return e.combine()}if(2===arguments.length){var n=arguments[0],i=arguments[1],e=new ss(ss.createList(n,i));return e.combine()}if(3===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2],e=new ss(ss.createList(r,s,o));return e.combine()}},ss.extractFactory=function(t){return t.isEmpty()?null:t.iterator().next().getFactory()},ss.createList=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new I;return n.add(t),n.add(e),n}if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2],n=new I;return n.add(i),n.add(r),n.add(s),n}},e(os.prototype,{union:function(){for(var t=new Te,e=new at,n=0;n<this.pointGeom.getNumGeometries();n++){var i=this.pointGeom.getGeometryN(n),r=i.getCoordinate(),s=t.locate(r,this.otherGeom);s===L.EXTERIOR&&e.add(r)}if(0===e.size())return this.otherGeom;var o=null,a=H.toCoordinateArray(e);return o=1===a.length?this.geomFact.createPoint(a[0]):this.geomFact.createMultiPointFromCoords(a),ss.combine(o,this.otherGeom)},interfaces_:function(){return[]},getClass:function(){return os}}),os.union=function(t,e){var n=new os(t,e);return n.union()},e(as.prototype,{filter:function(t){this.sortIndex!==-1&&t.getSortIndex()!==this.sortIndex||this.comps.add(t)},interfaces_:function(){return[ht]},getClass:function(){return as}}),as.extract=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return as.extract(t,e,new I)}if(3===arguments.length){var n=arguments[0],i=arguments[1],r=arguments[2];return n.getSortIndex()===i?r.add(n):n instanceof ft&&n.apply(new as(i,r)),r}},e(us.prototype,{reduceToGeometries:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next(),r=null;R(i,y)?r=this.unionTree(i):i instanceof B&&(r=i),e.add(r)}return e},extractByEnvelope:function(t,e,n){for(var i=new I,r=0;r<e.getNumGeometries();r++){var s=e.getGeometryN(r);s.getEnvelopeInternal().intersects(t)?i.add(s):n.add(s)}return this.geomFactory.buildGeometry(i)},unionOptimized:function(t,e){var n=t.getEnvelopeInternal(),i=e.getEnvelopeInternal();if(!n.intersects(i)){var r=ss.combine(t,e);return r}if(t.getNumGeometries()<=1&&e.getNumGeometries()<=1)return this.unionActual(t,e);var s=n.intersection(i);return this.unionUsingEnvelopeIntersection(t,e,s)},union:function(){if(null===this.inputPolys)throw new IllegalStateException("union() method cannot be called twice");if(this.inputPolys.isEmpty())return null;this.geomFactory=this.inputPolys.iterator().next().getFactory();for(var t=new ke(us.STRTREE_NODE_CAPACITY),e=this.inputPolys.iterator();e.hasNext();){var n=e.next();t.insert(n.getEnvelopeInternal(),n)}this.inputPolys=null;var i=t.itemsTree(),r=this.unionTree(i);return r},binaryUnion:function(){if(1===arguments.length){var t=arguments[0];return this.binaryUnion(t,0,t.size())}if(3===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2];if(i-n<=1){var r=us.getGeometry(e,n);return this.unionSafe(r,null)}if(i-n===2)return this.unionSafe(us.getGeometry(e,n),us.getGeometry(e,n+1));var s=Math.trunc((i+n)/2),r=this.binaryUnion(e,n,s),o=this.binaryUnion(e,s,i);return this.unionSafe(r,o)}},repeatedUnion:function(t){for(var e=null,n=t.iterator();n.hasNext();){var i=n.next();e=null===e?i.copy():e.union(i)}return e},unionSafe:function(t,e){return null===t&&null===e?null:null===t?e.copy():null===e?t.copy():this.unionOptimized(t,e)},unionActual:function(t,e){return us.restrictToPolygons(t.union(e))},unionTree:function(t){var e=this.reduceToGeometries(t),n=this.binaryUnion(e);return n},unionUsingEnvelopeIntersection:function(t,e,n){var i=new I,r=this.extractByEnvelope(n,t,i),s=this.extractByEnvelope(n,e,i),o=this.unionActual(r,s);i.add(o);var a=ss.combine(i);return a},bufferUnion:function(){if(1===arguments.length){var t=arguments[0],e=t.get(0).getFactory(),n=e.buildGeometry(t),i=n.buffer(0);return i}if(2===arguments.length){var r=arguments[0],s=arguments[1],e=r.getFactory(),n=e.createGeometryCollection([r,s]),i=n.buffer(0);return i}},interfaces_:function(){return[]},getClass:function(){return us}}),us.restrictToPolygons=function(t){if(R(t,Rt))return t;var e=pr.getPolygons(t);return 1===e.size()?e.get(0):t.getFactory().createMultiPolygon(ie.toPolygonArray(e))},us.getGeometry=function(t,e){return e>=t.size()?null:t.get(e)},us.union=function(t){var e=new us(t);return e.union()},us.STRTREE_NODE_CAPACITY=4,e(ls.prototype,{unionNoOpt:function(t){var e=this.geomFact.createPoint();return si.overlayOp(t,e,ii.UNION)},unionWithNull:function(t,e){return null===t&&null===e?null:null===e?t:null===t?e:t.union(e)},extract:function(){if(R(arguments[0],v))for(var t=arguments[0],e=t.iterator();e.hasNext();){var n=e.next();this.extract(n)}else if(arguments[0]instanceof B){var i=arguments[0];null===this.geomFact&&(this.geomFact=i.getFactory()),as.extract(i,B.SORTINDEX_POLYGON,this.polygons),as.extract(i,B.SORTINDEX_LINESTRING,this.lines),as.extract(i,B.SORTINDEX_POINT,this.points)}},union:function t(){if(null===this.geomFact)return null;var e=null;if(this.points.size()>0){var n=this.geomFact.buildGeometry(this.points);e=this.unionNoOpt(n)}var i=null;if(this.lines.size()>0){var r=this.geomFact.buildGeometry(this.lines);i=this.unionNoOpt(r)}var s=null;this.polygons.size()>0&&(s=us.union(this.polygons));var o=this.unionWithNull(i,s),t=null;return t=null===e?o:null===o?e:os.union(e,o),null===t?this.geomFact.createGeometryCollection():t},interfaces_:function(){return[]},getClass:function(){return ls}}),ls.union=function(){if(1===arguments.length){if(R(arguments[0],v)){var t=arguments[0],e=new ls(t);return e.union()}if(arguments[0]instanceof B){var n=arguments[0],e=new ls(n);return e.union()}}else if(2===arguments.length){var i=arguments[0],r=arguments[1],e=new ls(i,r);return e.union()}};var bo=Object.freeze({UnaryUnionOp:ls}),Oo=Object.freeze({IsValidOp:Ur,ConsistentAreaTester:Vr}),_o=Object.freeze({BoundaryOp:dt,IsSimpleOp:Wi,buffer:So,distance:wo,linemerge:Lo,overlay:Ro,polygonize:To,relate:Po,union:bo,valid:Oo});h(hs,_t.CoordinateOperation),e(hs.prototype,{editCoordinates:function(t,e){if(0===t.length)return null;for(var n=new Array(t.length).fill(null),i=0;i<t.length;i++){var r=new g(t[i]);this.targetPM.makePrecise(r),n[i]=r}var s=new N(n,(!1)),o=s.toCoordinateArray(),a=0;e instanceof St&&(a=2),e instanceof bt&&(a=4);var u=n;return this.removeCollapsed&&(u=null),o.length<a?u:o},interfaces_:function(){return[]},getClass:function(){return hs}}),e(cs.prototype,{fixPolygonalTopology:function(t){var e=t;this.changePrecisionModel||(e=this.changePM(t,this.targetPM));var n=e.buffer(0),i=n;return this.changePrecisionModel||(i=this.changePM(n,t.getPrecisionModel())),i},reducePointwise:function(t){var e=null;if(this.changePrecisionModel){var n=this.createFactory(t.getFactory(),this.targetPM);e=new _t(n)}else e=new _t;var i=this.removeCollapsed;t.getDimension()>=2&&(i=!0);var r=e.edit(t,new hs(this.targetPM,i));return r},changePM:function(t,e){var n=this.createEditor(t.getFactory(),e);return n.edit(t,new _t.NoOpGeometryOperation)},setRemoveCollapsedComponents:function(t){this.removeCollapsed=t},createFactory:function(t,e){var n=new ie(e,t.getSRID(),t.getCoordinateSequenceFactory());return n},setChangePrecisionModel:function(t){this.changePrecisionModel=t},reduce:function(t){var e=this.reducePointwise(t);return this.isPointwise?e:R(e,Rt)?e.isValid()?e:this.fixPolygonalTopology(e):e},setPointwise:function(t){this.isPointwise=t},createEditor:function(t,e){if(t.getPrecisionModel()===e)return new _t;var n=this.createFactory(t,e),i=new _t(n);return i},interfaces_:function(){return[]},getClass:function(){return cs}}),cs.reduce=function(t,e){var n=new cs(e);return n.reduce(t)},cs.reducePointwise=function(t,e){var n=new cs(e);return n.setPointwise(!0),n.reduce(t)};var Mo=Object.freeze({GeometryPrecisionReducer:cs});e(fs.prototype,{simplifySection:function(t,e){if(t+1===e)return null;this.seg.p0=this.pts[t],this.seg.p1=this.pts[e];for(var n=-1,i=t,r=t+1;r<e;r++){var s=this.seg.distance(this.pts[r]);s>n&&(n=s,i=r)}if(n<=this.distanceTolerance)for(var r=t+1;r<e;r++)this.usePt[r]=!1;else this.simplifySection(t,i),this.simplifySection(i,e)},setDistanceTolerance:function(t){this.distanceTolerance=t},simplify:function(){this.usePt=new Array(this.pts.length).fill(null);for(var t=0;t<this.pts.length;t++)this.usePt[t]=!0;this.simplifySection(0,this.pts.length-1);for(var e=new N,t=0;t<this.pts.length;t++)this.usePt[t]&&e.add(new g(this.pts[t]));return e.toCoordinateArray()},interfaces_:function(){return[]},getClass:function(){return fs}}),fs.simplify=function(t,e){var n=new fs(t);return n.setDistanceTolerance(e),n.simplify()},e(gs.prototype,{setEnsureValid:function(t){this.isEnsureValidTopology=t},getResultGeometry:function(){return this.inputGeom.isEmpty()?this.inputGeom.copy():new ds(this.isEnsureValidTopology,this.distanceTolerance).transform(this.inputGeom)},setDistanceTolerance:function(t){if(t<0)throw new i("Tolerance must be non-negative");this.distanceTolerance=t},interfaces_:function(){return[]},getClass:function(){return gs}}),gs.simplify=function(t,e){var n=new gs(t);return n.setDistanceTolerance(e),n.getResultGeometry()},h(ds,xe),e(ds.prototype,{transformPolygon:function(t,e){if(t.isEmpty())return null;var n=xe.prototype.transformPolygon.call(this,t,e);return e instanceof Ot?n:this.createValidArea(n)},createValidArea:function(t){return this.isEnsureValidTopology?t.buffer(0):t},transformCoordinates:function(t,e){var n=t.toCoordinateArray(),i=null;return i=0===n.length?new Array(0).fill(null):fs.simplify(n,this.distanceTolerance),this.factory.getCoordinateSequenceFactory().create(i)},transformMultiPolygon:function(t,e){var n=xe.prototype.transformMultiPolygon.call(this,t,e);return this.createValidArea(n)},transformLinearRing:function(t,e){var n=e instanceof Tt,i=xe.prototype.transformLinearRing.call(this,t,e);return!n||i instanceof bt?i:null},interfaces_:function(){return[]},getClass:function(){return ds}}),gs.DPTransformer=ds,h(ps,ce),e(ps.prototype,{getIndex:function(){return this.index},getParent:function(){return this.parent},interfaces_:function(){return[]},getClass:function(){return ps}}),e(vs.prototype,{addToResult:function(t){this.resultSegs.add(t)},asLineString:function(){return this.parentLine.getFactory().createLineString(vs.extractCoordinates(this.resultSegs))},getResultSize:function(){var t=this.resultSegs.size();return 0===t?0:t+1},getParent:function(){return this.parentLine},getSegment:function(t){return this.segs[t]},getParentCoordinates:function(){return this.parentLine.getCoordinates()},getMinimumSize:function(){return this.minimumSize},asLinearRing:function(){return this.parentLine.getFactory().createLinearRing(vs.extractCoordinates(this.resultSegs))},getSegments:function(){return this.segs},init:function(){var t=this.parentLine.getCoordinates();this.segs=new Array(t.length-1).fill(null);for(var e=0;e<t.length-1;e++){var n=new ps(t[e],t[e+1],this.parentLine,e);this.segs[e]=n}},getResultCoordinates:function(){return vs.extractCoordinates(this.resultSegs)},interfaces_:function(){return[]},getClass:function(){return vs}}),vs.extractCoordinates=function(t){for(var e=new Array(t.size()+1).fill(null),n=null,i=0;i<t.size();i++)n=t.get(i),e[i]=n.p0;return e[e.length-1]=n.p1,e},e(ms.prototype,{remove:function(t){this.index.remove(new C(t.p0,t.p1),t)},add:function(){if(arguments[0]instanceof vs)for(var t=arguments[0],e=t.getSegments(),n=0;n<e.length;n++){var i=e[n];this.add(i)}else if(arguments[0]instanceof ce){var r=arguments[0];this.index.insert(new C(r.p0,r.p1),r)}},query:function(t){var e=new C(t.p0,t.p1),n=new ys(t);this.index.query(e,n);var i=n.getItems();return i},interfaces_:function(){return[]},getClass:function(){return ms}}),e(ys.prototype,{visitItem:function(t){var e=t;C.intersects(e.p0,e.p1,this.querySeg.p0,this.querySeg.p1)&&this.items.add(t)},getItems:function(){return this.items},interfaces_:function(){return[Ae]},getClass:function(){return ys}}),e(xs.prototype,{flatten:function(t,e){var n=this.linePts[t],i=this.linePts[e],r=new ce(n,i);return this.remove(this.line,t,e),this.outputIndex.add(r),r},hasBadIntersection:function(t,e,n){return!!this.hasBadOutputIntersection(n)||!!this.hasBadInputIntersection(t,e,n)},setDistanceTolerance:function(t){this.distanceTolerance=t},simplifySection:function(t,e,n){n+=1;var i=new Array(2).fill(null);if(t+1===e){var r=this.line.getSegment(t);return this.line.addToResult(r),null}var s=!0;if(this.line.getResultSize()<this.line.getMinimumSize()){var o=n+1;o<this.line.getMinimumSize()&&(s=!1)}var a=new Array(1).fill(null),u=this.findFurthestPoint(this.linePts,t,e,a);a[0]>this.distanceTolerance&&(s=!1);var l=new ce;if(l.p0=this.linePts[t],l.p1=this.linePts[e],i[0]=t,i[1]=e,this.hasBadIntersection(this.line,i,l)&&(s=!1),s){var r=this.flatten(t,e);return this.line.addToResult(r),null}this.simplifySection(t,u,n),this.simplifySection(u,e,n)},hasBadOutputIntersection:function(t){for(var e=this.outputIndex.query(t),n=e.iterator();n.hasNext();){var i=n.next();if(this.hasInteriorIntersection(i,t))return!0}return!1},findFurthestPoint:function(t,e,n,i){var r=new ce;r.p0=t[e],r.p1=t[n];for(var s=-1,o=e,a=e+1;a<n;a++){var u=t[a],l=r.distance(u);l>s&&(s=l,o=a)}return i[0]=s,o},simplify:function(t){this.line=t,this.linePts=t.getParentCoordinates(),this.simplifySection(0,this.linePts.length-1,0)},remove:function(t,e,n){for(var i=e;i<n;i++){var r=t.getSegment(i);this.inputIndex.remove(r)}},hasInteriorIntersection:function(t,e){return this.li.computeIntersection(t.p0,t.p1,e.p0,e.p1),this.li.isInteriorIntersection()},hasBadInputIntersection:function(t,e,n){for(var i=this.inputIndex.query(n),r=i.iterator();r.hasNext();){var s=r.next();if(this.hasInteriorIntersection(s,n)){if(xs.isInLineSection(t,e,s))continue;return!0}}return!1},interfaces_:function(){return[]},getClass:function(){return xs}}),xs.isInLineSection=function(t,e,n){if(n.getParent()!==t.getParent())return!1;var i=n.getIndex();return i>=e[0]&&i<e[1]},e(Es.prototype,{setDistanceTolerance:function(t){this.distanceTolerance=t},simplify:function(t){for(var e=t.iterator();e.hasNext();)this.inputIndex.add(e.next());for(var e=t.iterator();e.hasNext();){var n=new xs(this.inputIndex,this.outputIndex);n.setDistanceTolerance(this.distanceTolerance),n.simplify(e.next())}},interfaces_:function(){return[]},getClass:function(){return Es}}),e(Is.prototype,{getResultGeometry:function(){if(this.inputGeom.isEmpty())return this.inputGeom.copy();this.linestringMap=new te,this.inputGeom.apply(new Cs(this)),this.lineSimplifier.simplify(this.linestringMap.values());var t=new Ns(this.linestringMap).transform(this.inputGeom);return t},setDistanceTolerance:function(t){if(t<0)throw new i("Tolerance must be non-negative");this.lineSimplifier.setDistanceTolerance(t)},interfaces_:function(){return[]},getClass:function(){return Is}}),Is.simplify=function(t,e){var n=new Is(t);return n.setDistanceTolerance(e),n.getResultGeometry()},h(Ns,xe),e(Ns.prototype,{transformCoordinates:function(t,e){if(0===t.size())return null;if(e instanceof St){var n=this.linestringMap.get(e);return this.createCoordinateSequence(n.getResultCoordinates())}return xe.prototype.transformCoordinates.call(this,t,e)},interfaces_:function(){return[]},getClass:function(){return Ns}}),e(Cs.prototype,{filter:function(t){if(t instanceof St){var e=t;if(e.isEmpty())return null;var n=e.isClosed()?4:2,i=new vs(e,n);this.tps.linestringMap.put(e,i)}},interfaces_:function(){return[q]},getClass:function(){return Cs}}),Is.LineStringTransformer=Ns,Is.LineStringMapBuilderFilter=Cs;var Do=Object.freeze({DouglasPeuckerSimplifier:gs,TopologyPreservingSimplifier:Is});e(Ss.prototype,{splitAt:function(){if(1===arguments.length){var t=arguments[0],e=this.minimumLen/this.segLen;if(t.distance(this.seg.p0)<this.minimumLen)return this.splitPt=this.seg.pointAlong(e),null;if(t.distance(this.seg.p1)<this.minimumLen)return this.splitPt=Ss.pointAlongReverse(this.seg,e),null;this.splitPt=t}else if(2===arguments.length){var n=arguments[0],i=arguments[1],r=this.getConstrainedLength(n),s=r/this.segLen;i.equals2D(this.seg.p0)?this.splitPt=this.seg.pointAlong(s):this.splitPt=Ss.pointAlongReverse(this.seg,s)}},setMinimumLength:function(t){this.minimumLen=t},getConstrainedLength:function(t){return t<this.minimumLen?this.minimumLen:t},getSplitPoint:function(){return this.splitPt},interfaces_:function(){return[]},getClass:function(){return Ss}}),Ss.pointAlongReverse=function(t,e){var n=new g;return n.x=t.p1.x-e*(t.p1.x-t.p0.x),n.y=t.p1.y-e*(t.p1.y-t.p0.y),n},e(ws.prototype,{findSplitPoint:function(t,e){},interfaces_:function(){return[]},getClass:function(){return ws}}),e(Ls.prototype,{findSplitPoint:function(t,e){var n=t.getLineSegment(),i=n.getLength(),r=i/2,s=new Ss(n),o=Ls.projectedSplitPoint(t,e),a=2*o.distance(e)*.8,u=a;return u>r&&(u=r),s.setMinimumLength(u),s.splitAt(o),s.getSplitPoint()},interfaces_:function(){return[ws]},getClass:function(){return Ls}}),Ls.projectedSplitPoint=function(t,e){var n=t.getLineSegment(),i=n.project(e);return i},e(Rs.prototype,{interfaces_:function(){return[]},getClass:function(){return Rs}}),Rs.triArea=function(t,e,n){return(e.x-t.x)*(n.y-t.y)-(e.y-t.y)*(n.x-t.x)},Rs.isInCircleDDNormalized=function(t,e,n,i){var r=_.valueOf(t.x).selfSubtract(i.x),s=_.valueOf(t.y).selfSubtract(i.y),o=_.valueOf(e.x).selfSubtract(i.x),a=_.valueOf(e.y).selfSubtract(i.y),u=_.valueOf(n.x).selfSubtract(i.x),l=_.valueOf(n.y).selfSubtract(i.y),h=r.multiply(a).selfSubtract(o.multiply(s)),c=o.multiply(l).selfSubtract(u.multiply(a)),f=u.multiply(s).selfSubtract(r.multiply(l)),g=r.multiply(r).selfAdd(s.multiply(s)),d=o.multiply(o).selfAdd(a.multiply(a)),p=u.multiply(u).selfAdd(l.multiply(l)),v=g.selfMultiply(c).selfAdd(d.selfMultiply(f)).selfAdd(p.selfMultiply(h)),m=v.doubleValue()>0;return m},Rs.checkRobustInCircle=function(t,e,n,i){var r=Rs.isInCircleNonRobust(t,e,n,i),s=Rs.isInCircleDDSlow(t,e,n,i),o=Rs.isInCircleCC(t,e,n,i),a=Si.circumcentre(t,e,n);A.out.println("p radius diff a = "+Math.abs(i.distance(a)-t.distance(a))/t.distance(a)),r===s&&r===o||(A.out.println("inCircle robustness failure (double result = "+r+", DD result = "+s+", CC result = "+o+")"),A.out.println(se.toLineString(new Gt([t,e,n,i]))),A.out.println("Circumcentre = "+se.toPoint(a)+" radius = "+t.distance(a)),A.out.println("p radius diff a = "+Math.abs(i.distance(a)/t.distance(a)-1)),A.out.println("p radius diff b = "+Math.abs(i.distance(a)/e.distance(a)-1)),A.out.println("p radius diff c = "+Math.abs(i.distance(a)/n.distance(a)-1)),A.out.println())},Rs.isInCircleDDFast=function(t,e,n,i){var r=_.sqr(t.x).selfAdd(_.sqr(t.y)).selfMultiply(Rs.triAreaDDFast(e,n,i)),s=_.sqr(e.x).selfAdd(_.sqr(e.y)).selfMultiply(Rs.triAreaDDFast(t,n,i)),o=_.sqr(n.x).selfAdd(_.sqr(n.y)).selfMultiply(Rs.triAreaDDFast(t,e,i)),a=_.sqr(i.x).selfAdd(_.sqr(i.y)).selfMultiply(Rs.triAreaDDFast(t,e,n)),u=r.selfSubtract(s).selfAdd(o).selfSubtract(a),l=u.doubleValue()>0;return l},Rs.isInCircleCC=function(t,e,n,i){var r=Si.circumcentre(t,e,n),s=t.distance(r),o=i.distance(r)-s;return o<=0},Rs.isInCircleNormalized=function(t,e,n,i){var r=t.x-i.x,s=t.y-i.y,o=e.x-i.x,a=e.y-i.y,u=n.x-i.x,l=n.y-i.y,h=r*a-o*s,c=o*l-u*a,f=u*s-r*l,g=r*r+s*s,d=o*o+a*a,p=u*u+l*l,v=g*c+d*f+p*h;
return v>0},Rs.isInCircleDDSlow=function(t,e,n,i){var r=_.valueOf(i.x),s=_.valueOf(i.y),o=_.valueOf(t.x),a=_.valueOf(t.y),u=_.valueOf(e.x),l=_.valueOf(e.y),h=_.valueOf(n.x),c=_.valueOf(n.y),f=o.multiply(o).add(a.multiply(a)).multiply(Rs.triAreaDDSlow(u,l,h,c,r,s)),g=u.multiply(u).add(l.multiply(l)).multiply(Rs.triAreaDDSlow(o,a,h,c,r,s)),d=h.multiply(h).add(c.multiply(c)).multiply(Rs.triAreaDDSlow(o,a,u,l,r,s)),p=r.multiply(r).add(s.multiply(s)).multiply(Rs.triAreaDDSlow(o,a,u,l,h,c)),v=f.subtract(g).add(d).subtract(p),m=v.doubleValue()>0;return m},Rs.isInCircleNonRobust=function(t,e,n,i){var r=(t.x*t.x+t.y*t.y)*Rs.triArea(e,n,i)-(e.x*e.x+e.y*e.y)*Rs.triArea(t,n,i)+(n.x*n.x+n.y*n.y)*Rs.triArea(t,e,i)-(i.x*i.x+i.y*i.y)*Rs.triArea(t,e,n)>0;return r},Rs.isInCircleRobust=function(t,e,n,i){return Rs.isInCircleNormalized(t,e,n,i)},Rs.triAreaDDSlow=function(t,e,n,i,r,s){return n.subtract(t).multiply(s.subtract(e)).subtract(i.subtract(e).multiply(r.subtract(t)))},Rs.triAreaDDFast=function(t,e,n){var i=_.valueOf(e.x).selfSubtract(t.x).selfMultiply(_.valueOf(n.y).selfSubtract(t.y)),r=_.valueOf(e.y).selfSubtract(t.y).selfMultiply(_.valueOf(n.x).selfSubtract(t.x));return i.selfSubtract(r)},e(Ts.prototype,{circleCenter:function(t,e){var n=new Ts(this.getX(),this.getY()),i=this.bisector(n,t),r=this.bisector(t,e),s=new F(i,r),o=null;try{o=new Ts(s.getX(),s.getY())}catch(i){if(!(i instanceof w))throw i;A.err.println("a: "+n+"  b: "+t+"  c: "+e),A.err.println(i)}finally{}return o},dot:function(t){return this.p.x*t.getX()+this.p.y*t.getY()},magn:function(){return Math.sqrt(this.p.x*this.p.x+this.p.y*this.p.y)},getZ:function(){return this.p.z},bisector:function(t,e){var n=e.getX()-t.getX(),i=e.getY()-t.getY(),r=new F(t.getX()+n/2,t.getY()+i/2,1),s=new F(t.getX()-i+n/2,t.getY()+n+i/2,1);return new F(r,s)},equals:function(){if(1===arguments.length){var t=arguments[0];return this.p.x===t.getX()&&this.p.y===t.getY()}if(2===arguments.length){var e=arguments[0],n=arguments[1];return this.p.distance(e.getCoordinate())<n}},getCoordinate:function(){return this.p},isInCircle:function(t,e,n){return Rs.isInCircleRobust(t.p,e.p,n.p,this.p)},interpolateZValue:function(t,e,n){var i=t.getX(),r=t.getY(),s=e.getX()-i,o=n.getX()-i,a=e.getY()-r,u=n.getY()-r,l=s*u-o*a,h=this.getX()-i,c=this.getY()-r,f=(u*h-o*c)/l,g=(-a*h+s*c)/l,d=t.getZ()+f*(e.getZ()-t.getZ())+g*(n.getZ()-t.getZ());return d},midPoint:function(t){var e=(this.p.x+t.getX())/2,n=(this.p.y+t.getY())/2,i=(this.p.z+t.getZ())/2;return new Ts(e,n,i)},rightOf:function(t){return this.isCCW(t.dest(),t.orig())},isCCW:function(t,e){return(t.p.x-this.p.x)*(e.p.y-this.p.y)-(t.p.y-this.p.y)*(e.p.x-this.p.x)>0},getX:function(){return this.p.x},crossProduct:function(t){return this.p.x*t.getY()-this.p.y*t.getX()},setZ:function(t){this.p.z=t},times:function(t){return new Ts(t*this.p.x,t*this.p.y)},cross:function(){return new Ts(this.p.y,(-this.p.x))},leftOf:function(t){return this.isCCW(t.orig(),t.dest())},toString:function(){return"POINT ("+this.p.x+" "+this.p.y+")"},sub:function(t){return new Ts(this.p.x-t.getX(),this.p.y-t.getY())},getY:function(){return this.p.y},classify:function(t,e){var n=this,i=e.sub(t),r=n.sub(t),s=i.crossProduct(r);return s>0?Ts.LEFT:s<0?Ts.RIGHT:i.getX()*r.getX()<0||i.getY()*r.getY()<0?Ts.BEHIND:i.magn()<r.magn()?Ts.BEYOND:t.equals(n)?Ts.ORIGIN:e.equals(n)?Ts.DESTINATION:Ts.BETWEEN},sum:function(t){return new Ts(this.p.x+t.getX(),this.p.y+t.getY())},distance:function(t,e){return Math.sqrt(Math.pow(e.getX()-t.getX(),2)+Math.pow(e.getY()-t.getY(),2))},circumRadiusRatio:function(t,e){var n=this.circleCenter(t,e),i=this.distance(n,t),r=this.distance(this,t),s=this.distance(t,e);return s<r&&(r=s),s=this.distance(e,this),s<r&&(r=s),i/r},interfaces_:function(){return[]},getClass:function(){return Ts}}),Ts.interpolateZ=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=e.distance(n),r=t.distance(e),s=n.z-e.z,o=e.z+s*(r/i);return o}if(4===arguments.length){var a=arguments[0],u=arguments[1],l=arguments[2],h=arguments[3],c=u.x,f=u.y,g=l.x-c,d=h.x-c,p=l.y-f,v=h.y-f,m=g*v-d*p,y=a.x-c,x=a.y-f,E=(v*y-d*x)/m,I=(-p*y+g*x)/m,N=u.z+E*(l.z-u.z)+I*(h.z-u.z);return N}},Ts.LEFT=0,Ts.RIGHT=1,Ts.BEYOND=2,Ts.BEHIND=3,Ts.BETWEEN=4,Ts.ORIGIN=5,Ts.DESTINATION=6,h(Ps,Ts),e(Ps.prototype,{getConstraint:function(){return this.constraint},setOnConstraint:function(t){this._isOnConstraint=t},merge:function(t){t._isOnConstraint&&(this._isOnConstraint=!0,this.constraint=t.constraint)},isOnConstraint:function(){return this._isOnConstraint},setConstraint:function(t){this._isOnConstraint=!0,this.constraint=t},interfaces_:function(){return[]},getClass:function(){return Ps}}),e(bs.prototype,{equalsNonOriented:function(t){return!!this.equalsOriented(t)||!!this.equalsOriented(t.sym())},toLineSegment:function(){return new ce(this.vertex.getCoordinate(),this.dest().getCoordinate())},dest:function(){return this.sym().orig()},oNext:function(){return this.next},equalsOriented:function(t){return!(!this.orig().getCoordinate().equals2D(t.orig().getCoordinate())||!this.dest().getCoordinate().equals2D(t.dest().getCoordinate()))},dNext:function(){return this.sym().oNext().sym()},lPrev:function(){return this.next.sym()},rPrev:function(){return this.sym().oNext()},rot:function(){return this._rot},oPrev:function(){return this._rot.next._rot},sym:function(){return this._rot._rot},setOrig:function(t){this.vertex=t},lNext:function(){return this.invRot().oNext().rot()},getLength:function(){return this.orig().getCoordinate().distance(this.dest().getCoordinate())},invRot:function(){return this._rot.sym()},setDest:function(t){this.sym().setOrig(t)},setData:function(t){this.data=t},getData:function(){return this.data},delete:function(){this._rot=null},orig:function(){return this.vertex},rNext:function(){return this._rot.next.invRot()},toString:function(){var t=this.vertex.getCoordinate(),e=this.dest().getCoordinate();return se.toLineString(t,e)},isLive:function(){return null!==this._rot},getPrimary:function(){return this.orig().getCoordinate().compareTo(this.dest().getCoordinate())<=0?this:this.sym()},dPrev:function(){return this.invRot().oNext().invRot()},setNext:function(t){this.next=t},interfaces_:function(){return[]},getClass:function(){return bs}}),bs.makeEdge=function(t,e){var n=new bs,i=new bs,r=new bs,s=new bs;n._rot=i,i._rot=r,r._rot=s,s._rot=n,n.setNext(n),i.setNext(s),r.setNext(r),s.setNext(i);var o=n;return o.setOrig(t),o.setDest(e),o},bs.swap=function(t){var e=t.oPrev(),n=t.sym().oPrev();bs.splice(t,e),bs.splice(t.sym(),n),bs.splice(t,e.lNext()),bs.splice(t.sym(),n.lNext()),t.setOrig(e.dest()),t.setDest(n.dest())},bs.splice=function(t,e){var n=t.oNext().rot(),i=e.oNext().rot(),r=e.oNext(),s=t.oNext(),o=i.oNext(),a=n.oNext();t.setNext(r),e.setNext(s),n.setNext(o),i.setNext(a)},bs.connect=function(t,e){var n=bs.makeEdge(t.dest(),e.orig());return bs.splice(n,t.lNext()),bs.splice(n.sym(),e),n},e(Os.prototype,{insertSite:function(t){var e=this.subdiv.locate(t);if(this.subdiv.isVertexOfEdge(e,t))return e;this.subdiv.isOnEdge(e,t.getCoordinate())&&(e=e.oPrev(),this.subdiv.delete(e.oNext()));var n=this.subdiv.makeEdge(e.orig(),t);bs.splice(n,e);var i=n;do n=this.subdiv.connect(e,n.sym()),e=n.oPrev();while(e.lNext()!==i);for(;;){var r=e.oPrev();if(r.dest().rightOf(e)&&t.isInCircle(e.orig(),r.dest(),e.dest()))bs.swap(e),e=e.oPrev();else{if(e.oNext()===i)return n;e=e.oNext().lPrev()}}},insertSites:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertSite(n)}},interfaces_:function(){return[]},getClass:function(){return Os}}),e(_s.prototype,{locate:function(t){},interfaces_:function(){return[]},getClass:function(){return _s}}),e(Ms.prototype,{init:function(){this.lastEdge=this.findEdge()},locate:function(t){this.lastEdge.isLive()||this.init();var e=this.subdiv.locateFromEdge(t,this.lastEdge);return this.lastEdge=e,e},findEdge:function(){var t=this.subdiv.getEdges();return t.iterator().next()},interfaces_:function(){return[_s]},getClass:function(){return Ms}}),h(Ds,l),e(Ds.prototype,{getSegment:function(){return this.seg},interfaces_:function(){return[]},getClass:function(){return Ds}}),Ds.msgWithSpatial=function(t,e){return null!==e?t+" [ "+e+" ]":t},e(As.prototype,{visit:function(t){},interfaces_:function(){return[]},getClass:function(){return As}}),e(Fs.prototype,{getTriangleVertices:function(t){var e=new Bs;return this.visitTriangles(e,t),e.getTriangleVertices()},isFrameVertex:function(t){return!!t.equals(this.frameVertex[0])||(!!t.equals(this.frameVertex[1])||!!t.equals(this.frameVertex[2]))},isVertexOfEdge:function(t,e){return!(!e.equals(t.orig(),this.tolerance)&&!e.equals(t.dest(),this.tolerance))},connect:function(t,e){var n=bs.connect(t,e);return this.quadEdges.add(n),n},getVoronoiCellPolygon:function(t,e){var n=new I,i=t;do{var r=t.rot().orig().getCoordinate();n.add(r),t=t.oPrev()}while(t!==i);var s=new N;s.addAll(n,!1),s.closeRing(),s.size()<4&&(A.out.println(s),s.add(s.get(s.size()-1),!0));var o=s.toCoordinateArray(),a=e.createPolygon(e.createLinearRing(o),null),u=i.orig();return a.setUserData(u.getCoordinate()),a},setLocator:function(t){this.locator=t},initSubdiv:function(){var t=this.makeEdge(this.frameVertex[0],this.frameVertex[1]),e=this.makeEdge(this.frameVertex[1],this.frameVertex[2]);bs.splice(t.sym(),e);var n=this.makeEdge(this.frameVertex[2],this.frameVertex[0]);return bs.splice(e.sym(),n),bs.splice(n.sym(),t),t},isFrameBorderEdge:function(t){var e=new Array(3).fill(null);Fs.getTriangleEdges(t,e);var n=new Array(3).fill(null);Fs.getTriangleEdges(t.sym(),n);var i=t.lNext().dest();if(this.isFrameVertex(i))return!0;var r=t.sym().lNext().dest();return!!this.isFrameVertex(r)},makeEdge:function(t,e){var n=bs.makeEdge(t,e);return this.quadEdges.add(n),n},visitTriangles:function(t,e){this.visitedKey++;var n=new pe;n.push(this.startingEdge);for(var i=new J;!n.empty();){var r=n.pop();if(!i.contains(r)){var s=this.fetchTriangleToVisit(r,n,e,i);null!==s&&t.visit(s)}}},isFrameEdge:function(t){return!(!this.isFrameVertex(t.orig())&&!this.isFrameVertex(t.dest()))},isOnEdge:function(t,e){this.seg.setCoordinates(t.orig().getCoordinate(),t.dest().getCoordinate());var n=this.seg.distance(e);return n<this.edgeCoincidenceTolerance},getEnvelope:function(){return new C(this.frameEnv)},createFrame:function(t){var e=t.getWidth(),n=t.getHeight(),i=0;i=e>n?10*e:10*n,this.frameVertex[0]=new Ts((t.getMaxX()+t.getMinX())/2,t.getMaxY()+i),this.frameVertex[1]=new Ts(t.getMinX()-i,t.getMinY()-i),this.frameVertex[2]=new Ts(t.getMaxX()+i,t.getMinY()-i),this.frameEnv=new C(this.frameVertex[0].getCoordinate(),this.frameVertex[1].getCoordinate()),this.frameEnv.expandToInclude(this.frameVertex[2].getCoordinate())},getTriangleCoordinates:function(t){var e=new zs;return this.visitTriangles(e,t),e.getTriangles()},getVertices:function(t){for(var e=new J,n=this.quadEdges.iterator();n.hasNext();){var i=n.next(),r=i.orig();!t&&this.isFrameVertex(r)||e.add(r);var s=i.dest();!t&&this.isFrameVertex(s)||e.add(s)}return e},fetchTriangleToVisit:function(t,e,n,i){var r=t,s=0,o=!1;do{this.triEdges[s]=r,this.isFrameEdge(r)&&(o=!0);var a=r.sym();i.contains(a)||e.push(a),i.add(r),s++,r=r.lNext()}while(r!==t);return o&&!n?null:this.triEdges},getEdges:function(){if(0===arguments.length)return this.quadEdges;if(1===arguments.length){for(var t=arguments[0],e=this.getPrimaryEdges(!1),n=new Array(e.size()).fill(null),i=0,r=e.iterator();r.hasNext();){var s=r.next();n[i++]=t.createLineString([s.orig().getCoordinate(),s.dest().getCoordinate()])}return t.createMultiLineString(n)}},getVertexUniqueEdges:function(t){for(var e=new I,n=new J,i=this.quadEdges.iterator();i.hasNext();){var r=i.next(),s=r.orig();n.contains(s)||(n.add(s),!t&&this.isFrameVertex(s)||e.add(r));var o=r.sym(),a=o.orig();n.contains(a)||(n.add(a),!t&&this.isFrameVertex(a)||e.add(o))}return e},getTriangleEdges:function(t){var e=new qs;return this.visitTriangles(e,t),e.getTriangleEdges()},getPrimaryEdges:function(t){this.visitedKey++;var e=new I,n=new pe;n.push(this.startingEdge);for(var i=new J;!n.empty();){var r=n.pop();if(!i.contains(r)){var s=r.getPrimary();!t&&this.isFrameEdge(s)||e.add(s),n.push(r.oNext()),n.push(r.sym().oNext()),i.add(r),i.add(r.sym())}}return e},delete:function(t){bs.splice(t,t.oPrev()),bs.splice(t.sym(),t.sym().oPrev());var e=t.sym(),n=t.rot(),i=t.rot().sym();this.quadEdges.remove(t),this.quadEdges.remove(e),this.quadEdges.remove(n),this.quadEdges.remove(i),t.delete(),e.delete(),n.delete(),i.delete()},locateFromEdge:function(t,e){for(var n=0,i=this.quadEdges.size(),r=e;;){if(n++,n>i)throw new Ds(r.toLineSegment());if(t.equals(r.orig())||t.equals(r.dest()))break;if(t.rightOf(r))r=r.sym();else if(t.rightOf(r.oNext())){if(t.rightOf(r.dPrev()))break;r=r.dPrev()}else r=r.oNext()}return r},getTolerance:function(){return this.tolerance},getVoronoiCellPolygons:function(t){this.visitTriangles(new Gs,!0);for(var e=new I,n=this.getVertexUniqueEdges(!1),i=n.iterator();i.hasNext();){var r=i.next();e.add(this.getVoronoiCellPolygon(r,t))}return e},getVoronoiDiagram:function(t){var e=this.getVoronoiCellPolygons(t);return t.createGeometryCollection(ie.toGeometryArray(e))},getTriangles:function(t){for(var e=this.getTriangleCoordinates(!1),n=new Array(e.size()).fill(null),i=0,r=e.iterator();r.hasNext();){var s=r.next();n[i++]=t.createPolygon(t.createLinearRing(s),null)}return t.createGeometryCollection(n)},insertSite:function(t){var e=this.locate(t);if(t.equals(e.orig(),this.tolerance)||t.equals(e.dest(),this.tolerance))return e;var n=this.makeEdge(e.orig(),t);bs.splice(n,e);var i=n;do n=this.connect(e,n.sym()),e=n.oPrev();while(e.lNext()!==i);return i},locate:function(){if(1===arguments.length){if(arguments[0]instanceof Ts){var t=arguments[0];return this.locator.locate(t)}if(arguments[0]instanceof g){var e=arguments[0];return this.locator.locate(new Ts(e))}}else if(2===arguments.length){var n=arguments[0],i=arguments[1],r=this.locator.locate(new Ts(n));if(null===r)return null;var s=r;r.dest().getCoordinate().equals2D(n)&&(s=r.sym());var o=s;do{if(o.dest().getCoordinate().equals2D(i))return o;o=o.oNext()}while(o!==s);return null}},interfaces_:function(){return[]},getClass:function(){return Fs}}),Fs.getTriangleEdges=function(t,e){if(e[0]=t,e[1]=e[0].lNext(),e[2]=e[1].lNext(),e[2].lNext()!==e[0])throw new i("Edges do not form a triangle")},e(Gs.prototype,{visit:function(t){for(var e=t[0].orig().getCoordinate(),n=t[1].orig().getCoordinate(),i=t[2].orig().getCoordinate(),r=Si.circumcentre(e,n,i),s=new Ts(r),o=0;o<3;o++)t[o].rot().setOrig(s)},interfaces_:function(){return[As]},getClass:function(){return Gs}}),e(qs.prototype,{getTriangleEdges:function(){return this.triList},visit:function(t){this.triList.add(t.clone())},interfaces_:function(){return[As]},getClass:function(){return qs}}),e(Bs.prototype,{visit:function(t){this.triList.add([t[0].orig(),t[1].orig(),t[2].orig()])},getTriangleVertices:function(){return this.triList},interfaces_:function(){return[As]},getClass:function(){return Bs}}),e(zs.prototype,{checkTriangleSize:function(t){var e="";t.length>=2?e=se.toLineString(t[0],t[1]):t.length>=1&&(e=se.toPoint(t[0]))},visit:function(t){this.coordList.clear();for(var e=0;e<3;e++){var n=t[e].orig();this.coordList.add(n.getCoordinate())}if(this.coordList.size()>0){this.coordList.closeRing();var i=this.coordList.toCoordinateArray();if(4!==i.length)return null;this.triCoords.add(i)}},getTriangles:function(){return this.triCoords},interfaces_:function(){return[As]},getClass:function(){return zs}}),Fs.TriangleCircumcentreVisitor=Gs,Fs.TriangleEdgesListVisitor=qs,Fs.TriangleVertexListVisitor=Bs,Fs.TriangleCoordinatesVisitor=zs,Fs.EDGE_COINCIDENCE_TOL_FACTOR=1e3,e(Vs.prototype,{getLineSegment:function(){return this.ls},getEndZ:function(){var t=this.ls.getCoordinate(1);return t.z},getStartZ:function(){var t=this.ls.getCoordinate(0);return t.z},intersection:function(t){return this.ls.intersection(t.getLineSegment())},getStart:function(){return this.ls.getCoordinate(0)},getEnd:function(){return this.ls.getCoordinate(1)},getEndY:function(){var t=this.ls.getCoordinate(1);return t.y},getStartX:function(){var t=this.ls.getCoordinate(0);return t.x},equalsTopo:function(t){return this.ls.equalsTopo(t.getLineSegment())},getStartY:function(){var t=this.ls.getCoordinate(0);return t.y},setData:function(t){this.data=t},getData:function(){return this.data},getEndX:function(){var t=this.ls.getCoordinate(1);return t.x},toString:function(){return this.ls.toString()},interfaces_:function(){return[]},getClass:function(){return Vs}}),e(ks.prototype,{visit:function(t){},interfaces_:function(){return[]},getClass:function(){return ks}}),e(Ys.prototype,{isRepeated:function(){return this.count>1},getRight:function(){return this.right},getCoordinate:function(){return this.p},setLeft:function(t){this.left=t},getX:function(){return this.p.x},getData:function(){return this.data},getCount:function(){return this.count},getLeft:function(){return this.left},getY:function(){return this.p.y},increment:function(){this.count=this.count+1},setRight:function(t){this.right=t},interfaces_:function(){return[]},getClass:function(){return Ys}}),e(Us.prototype,{insert:function(){if(1===arguments.length){var t=arguments[0];return this.insert(t,null)}if(2===arguments.length){var e=arguments[0],n=arguments[1];if(null===this.root)return this.root=new Ys(e,n),this.root;if(this.tolerance>0){var i=this.findBestMatchNode(e);if(null!==i)return i.increment(),i}return this.insertExact(e,n)}},query:function(){var t=arguments,e=this;if(1===arguments.length){var n=arguments[0],i=new I;return this.query(n,i),i}if(2===arguments.length)if(arguments[0]instanceof C&&R(arguments[1],y))!function(){var n=t[0],i=t[1];e.queryNode(e.root,n,!0,{interfaces_:function(){return[ks]},visit:function(t){i.add(t)}})}();else if(arguments[0]instanceof C&&R(arguments[1],ks)){var r=arguments[0],s=arguments[1];this.queryNode(this.root,r,!0,s)}},queryNode:function(t,e,n,i){if(null===t)return null;var r=null,s=null,o=null;n?(r=e.getMinX(),s=e.getMaxX(),o=t.getX()):(r=e.getMinY(),s=e.getMaxY(),o=t.getY());var a=r<o,u=o<=s;a&&this.queryNode(t.getLeft(),e,!n,i),e.contains(t.getCoordinate())&&i.visit(t),u&&this.queryNode(t.getRight(),e,!n,i)},findBestMatchNode:function(t){var e=new Xs(t,this.tolerance);return this.query(e.queryEnvelope(),e),e.getNode()},isEmpty:function(){return null===this.root},insertExact:function(t,e){for(var n=this.root,i=this.root,r=!0,s=!0;null!==n;){if(null!==n){var o=t.distance(n.getCoordinate())<=this.tolerance;if(o)return n.increment(),n}s=r?t.x<n.getX():t.y<n.getY(),i=n,n=s?n.getLeft():n.getRight(),r=!r}this.numberOfNodes=this.numberOfNodes+1;var a=new Ys(t,e);return s?i.setLeft(a):i.setRight(a),a},interfaces_:function(){return[]},getClass:function(){return Us}}),Us.toCoordinates=function(){if(1===arguments.length){var t=arguments[0];return Us.toCoordinates(t,!1)}if(2===arguments.length){for(var e=arguments[0],n=arguments[1],i=new N,r=e.iterator();r.hasNext();)for(var s=r.next(),o=n?s.getCount():1,a=0;a<o;a++)i.add(s.getCoordinate(),!0);return i.toCoordinateArray()}},e(Xs.prototype,{visit:function(t){var e=this.p.distance(t.getCoordinate()),n=e<=this.tolerance;if(!n)return null;var i=!1;(null===this.matchNode||e<this.matchDist||null!==this.matchNode&&e===this.matchDist&&t.getCoordinate().compareTo(this.matchNode.getCoordinate())<1)&&(i=!0),i&&(this.matchNode=t,this.matchDist=e)},queryEnvelope:function(){var t=new C(this.p);return t.expandBy(this.tolerance),t},getNode:function(){return this.matchNode},interfaces_:function(){return[ks]},getClass:function(){return Xs}}),Us.BestMatchVisitor=Xs,e(Hs.prototype,{getInitialVertices:function(){return this.initialVertices},getKDT:function(){return this.kdt},enforceConstraints:function(){this.addConstraintVertices();var t=0,e=0;do e=this.enforceGabriel(this.segments),t++;while(e>0&&t<Hs.MAX_SPLIT_ITER)},insertSites:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertSite(n)}},getVertexFactory:function(){return this.vertexFactory},getPointArray:function(){for(var t=new Array(this.initialVertices.size()+this.segVertices.size()).fill(null),e=0,n=this.initialVertices.iterator();n.hasNext();){var i=n.next();t[e++]=i.getCoordinate()}for(var r=this.segVertices.iterator();r.hasNext();){var i=r.next();t[e++]=i.getCoordinate()}return t},setConstraints:function(t,e){this.segments=t,this.segVertices=e},computeConvexHull:function(){var t=new ie,e=this.getPointArray(),n=new me(e,t);this.convexHull=n.getConvexHull()},addConstraintVertices:function(){this.computeConvexHull(),this.insertSites(this.segVertices)},findNonGabrielPoint:function(t){var e=t.getStart(),n=t.getEnd(),i=new g((e.x+n.x)/2,(e.y+n.y)/2),s=e.distance(i),o=new C(i);o.expandBy(s);for(var a=this.kdt.query(o),u=null,l=r.MAX_VALUE,h=a.iterator();h.hasNext();){var c=h.next(),f=c.getCoordinate();if(!f.equals2D(e)&&!f.equals2D(n)){var d=i.distance(f);if(d<s){var p=d;(null===u||p<l)&&(u=f,l=p)}}}return u},getConstraintSegments:function(){return this.segments},setSplitPointFinder:function(t){this.splitFinder=t},getConvexHull:function(){return this.convexHull},getTolerance:function(){return this.tolerance},enforceGabriel:function(t){for(var e=new I,n=0,i=new I,r=t.iterator();r.hasNext();){var s=r.next(),o=this.findNonGabrielPoint(s);if(null!==o){this.splitPt=this.splitFinder.findSplitPoint(s,o);var a=this.createVertex(this.splitPt,s),u=(this.insertSite(a),new Vs(s.getStartX(),s.getStartY(),s.getStartZ(),a.getX(),a.getY(),a.getZ(),s.getData())),l=new Vs(a.getX(),a.getY(),a.getZ(),s.getEndX(),s.getEndY(),s.getEndZ(),s.getData());e.add(u),e.add(l),i.add(s),n+=1}}return t.removeAll(i),t.addAll(e),n},createVertex:function(){if(1===arguments.length){var t=arguments[0],e=null;return e=null!==this.vertexFactory?this.vertexFactory.createVertex(t,null):new Ps(t)}if(2===arguments.length){var n=arguments[0],i=arguments[1],e=null;return e=null!==this.vertexFactory?this.vertexFactory.createVertex(n,i):new Ps(n),e.setOnConstraint(!0),e}},getSubdivision:function(){return this.subdiv},computeBoundingBox:function(){var t=Hs.computeVertexEnvelope(this.initialVertices),e=Hs.computeVertexEnvelope(this.segVertices),n=new C(t);n.expandToInclude(e);var i=.2*n.getWidth(),r=.2*n.getHeight(),s=Math.max(i,r);this.computeAreaEnv=new C(n),this.computeAreaEnv.expandBy(s)},setVertexFactory:function(t){this.vertexFactory=t},formInitialDelaunay:function(){this.computeBoundingBox(),this.subdiv=new Fs(this.computeAreaEnv,this.tolerance),this.subdiv.setLocator(new Ms(this.subdiv)),this.incDel=new Os(this.subdiv),this.insertSites(this.initialVertices)},insertSite:function(){if(arguments[0]instanceof Ps){var t=arguments[0],e=this.kdt.insert(t.getCoordinate(),t);if(e.isRepeated()){var n=e.getData();return n.merge(t),n}return this.incDel.insertSite(t),t}if(arguments[0]instanceof g){var i=arguments[0];this.insertSite(this.createVertex(i))}},interfaces_:function(){return[]},getClass:function(){return Hs}}),Hs.computeVertexEnvelope=function(t){for(var e=new C,n=t.iterator();n.hasNext();){var i=n.next();e.expandToInclude(i.getCoordinate())}return e},Hs.MAX_SPLIT_ITER=99,e(Ws.prototype,{create:function(){if(null!==this.subdiv)return null;var t=Ws.envelope(this.siteCoords),e=Ws.toVertices(this.siteCoords);this.subdiv=new Fs(t,this.tolerance);var n=new Os(this.subdiv);n.insertSites(e)},setTolerance:function(t){this.tolerance=t},setSites:function(){if(arguments[0]instanceof B){var t=arguments[0];this.siteCoords=Ws.extractUniqueCoordinates(t)}else if(R(arguments[0],v)){var e=arguments[0];this.siteCoords=Ws.unique(H.toCoordinateArray(e))}},getEdges:function(t){return this.create(),this.subdiv.getEdges(t)},getSubdivision:function(){return this.create(),this.subdiv},getTriangles:function(t){return this.create(),this.subdiv.getTriangles(t)},interfaces_:function(){return[]},getClass:function(){return Ws}}),Ws.extractUniqueCoordinates=function(t){if(null===t)return new N;var e=t.getCoordinates();return Ws.unique(e)},Ws.envelope=function(t){for(var e=new C,n=t.iterator();n.hasNext();){var i=n.next();e.expandToInclude(i)}return e},Ws.unique=function(t){var e=H.copyDeep(t);ut.sort(e);var n=new N(e,(!1));return n},Ws.toVertices=function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();e.add(new Ts(i))}return e},e(js.prototype,{createSiteVertices:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();this.constraintVertexMap.containsKey(i)||e.add(new Ps(i))}return e},create:function(){if(null!==this.subdiv)return null;var t=Ws.envelope(this.siteCoords),e=new I;null!==this.constraintLines&&(t.expandToInclude(this.constraintLines.getEnvelopeInternal()),this.createVertices(this.constraintLines),e=js.createConstraintSegments(this.constraintLines));var n=this.createSiteVertices(this.siteCoords),i=new Hs(n,this.tolerance);i.setConstraints(e,new I(this.constraintVertexMap.values())),i.formInitialDelaunay(),i.enforceConstraints(),this.subdiv=i.getSubdivision()},setTolerance:function(t){this.tolerance=t},setConstraints:function(t){this.constraintLines=t},setSites:function(t){this.siteCoords=Ws.extractUniqueCoordinates(t)},getEdges:function(t){return this.create(),this.subdiv.getEdges(t)},getSubdivision:function(){return this.create(),this.subdiv},getTriangles:function(t){return this.create(),this.subdiv.getTriangles(t)},createVertices:function(t){for(var e=t.getCoordinates(),n=0;n<e.length;n++){var i=new Ps(e[n]);this.constraintVertexMap.put(e[n],i)}},interfaces_:function(){return[]},getClass:function(){return js}}),js.createConstraintSegments=function(){if(1===arguments.length){for(var t=arguments[0],e=kn.getLines(t),n=new I,i=e.iterator();i.hasNext();){var r=i.next();js.createConstraintSegments(r,n)}return n}if(2===arguments.length)for(var s=arguments[0],o=arguments[1],a=s.getCoordinates(),i=1;i<a.length;i++)o.add(new Vs(a[i-1],a[i]))},e(Ks.prototype,{create:function(){if(null!==this.subdiv)return null;var t=Ws.envelope(this.siteCoords);this.diagramEnv=t;var e=Math.max(this.diagramEnv.getWidth(),this.diagramEnv.getHeight());this.diagramEnv.expandBy(e),null!==this.clipEnv&&this.diagramEnv.expandToInclude(this.clipEnv);var n=Ws.toVertices(this.siteCoords);this.subdiv=new Fs(t,this.tolerance);var i=new Os(this.subdiv);i.insertSites(n)},getDiagram:function(t){this.create();var e=this.subdiv.getVoronoiDiagram(t);return Ks.clipGeometryCollection(e,this.diagramEnv)},setTolerance:function(t){this.tolerance=t},setSites:function(){if(arguments[0]instanceof B){var t=arguments[0];this.siteCoords=Ws.extractUniqueCoordinates(t)}else if(R(arguments[0],v)){var e=arguments[0];this.siteCoords=Ws.unique(H.toCoordinateArray(e))}},setClipEnvelope:function(t){this.clipEnv=t},getSubdivision:function(){return this.create(),this.subdiv},interfaces_:function(){return[]},getClass:function(){return Ks}}),Ks.clipGeometryCollection=function(t,e){for(var n=t.getFactory().toGeometry(e),i=new I,r=0;r<t.getNumGeometries();r++){var s=t.getGeometryN(r),o=null;e.contains(s.getEnvelopeInternal())?o=s:e.intersects(s.getEnvelopeInternal())&&(o=n.intersection(s),o.setUserData(s.getUserData())),null===o||o.isEmpty()||i.add(o)}return t.getFactory().createGeometryCollection(ie.toGeometryArray(i))};var Ao=Object.freeze({Vertex:Ts}),Fo=Object.freeze({ConformingDelaunayTriangulationBuilder:js,DelaunayTriangulationBuilder:Ws,VoronoiDiagramBuilder:Ks,quadedge:Ao});e(Zs.prototype,{interfaces_:function(){return[]},getClass:function(){return Zs}}),Zs.union=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return ii.createEmptyResult(ii.UNION,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),si.overlayOp(t,e,ii.UNION)},e(B.prototype,{equalsTopo:function(t){return!!this.getEnvelopeInternal().equals(t.getEnvelopeInternal())&&rs.relate(this,t).isEquals(this.getDimension(),t.getDimension())},union:function(){if(0===arguments.length)return ls.union(this);if(1===arguments.length){var t=arguments[0];return Zs.union(this,t)}},isValid:function(){return Ur.isValid(this)},intersection:function(t){if(this.isEmpty()||t.isEmpty())return ii.createEmptyResult(ii.INTERSECTION,this,t,this.factory);if(this.isGeometryCollection()){var e=t;return hn.map(this,{interfaces_:function(){return[MapOp]},map:function(t){return t.intersection(e)}})}return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),si.overlayOp(this,t,ii.INTERSECTION)},covers:function(t){return rs.covers(this,t)},coveredBy:function(t){return rs.coveredBy(this,t)},touches:function(t){return rs.touches(this,t)},intersects:function(t){return rs.intersects(this,t)},within:function(t){return rs.within(this,t)},overlaps:function(t){return rs.overlaps(this,t)},disjoint:function(t){return rs.disjoint(this,t)},crosses:function(t){return rs.crosses(this,t)},buffer:function(){if(1===arguments.length){var t=arguments[0];return dr.bufferOp(this,t)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return dr.bufferOp(this,e,n)}if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];return dr.bufferOp(this,i,r,s)}},convexHull:function(){return new me(this).getConvexHull()},relate:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return rs.relate.apply(rs,[this].concat(e))},getCentroid:function(){if(this.isEmpty())return this.factory.createPoint();var t=ge.getCentroid(this);return this.createPointFromInternalCoord(t,this)},getInteriorPoint:function(){if(this.isEmpty())return this.factory.createPoint();var t=null,e=this.getDimension();if(0===e){var n=new li(this);t=n.getInteriorPoint()}else if(1===e){var n=new ui(this);t=n.getInteriorPoint()}else{var n=new oi(this);t=n.getInteriorPoint()}return this.createPointFromInternalCoord(t,this)},symDifference:function(t){if(this.isEmpty()||t.isEmpty()){if(this.isEmpty()&&t.isEmpty())return ii.createEmptyResult(ii.SYMDIFFERENCE,this,t,this.factory);if(this.isEmpty())return t.copy();if(t.isEmpty())return this.copy()}return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),si.overlayOp(this,t,ii.SYMDIFFERENCE)},createPointFromInternalCoord:function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},toText:function(){var t=new se;return t.write(this)},toString:function(){this.toText()},contains:function(t){return rs.contains(this,t)},difference:function(t){return this.isEmpty()?ii.createEmptyResult(ii.DIFFERENCE,this,t,this.factory):t.isEmpty()?this.copy():(this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),si.overlayOp(this,t,ii.DIFFERENCE))},isSimple:function(){var t=new Wi(this);return t.isSimple()},isWithinDistance:function(t,e){var n=this.getEnvelopeInternal().distance(t.getEnvelopeInternal());return!(n>e)&&xr.isWithinDistance(this,t,e)},distance:function(t){return xr.distance(this,t)},isEquivalentClass:function(t){return this.getClass()===t.getClass()}});var Go="1.3.0 (6e65adb)";t.version=Go,t.algorithm=co,t.densify=fo,t.dissolve=go,t.geom=lo,t.geomgraph=po,t.index=yo,t.io=No,t.noding=Co,t.operation=_o,t.precision=Mo,t.simplify=Do,t.triangulate=Fo,Object.defineProperty(t,"__esModule",{value:!0})});


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = rotateRadians;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__compose__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);



function rotationIdentity(lambda, phi) {
  return [lambda > __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda - __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda < -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda + __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */]) ? (deltaPhi || deltaGamma ? Object(__WEBPACK_IMPORTED_MODULE_0__compose__["a" /* default */])(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
    : rotationLambda(deltaLambda))
    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
    : rotationIdentity);
}

function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda - __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda < -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda + __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(deltaPhi),
      sinDeltaPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(deltaPhi),
      cosDeltaGamma = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(deltaGamma),
      sinDeltaGamma = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
        x = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(lambda) * cosPhi,
        y = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda) * cosPhi,
        z = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["c" /* asin */])(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }

  rotation.invert = function(lambda, phi) {
    var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
        x = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(lambda) * cosPhi,
        y = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda) * cosPhi,
        z = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["c" /* asin */])(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };

  return rotation;
}

/* harmony default export */ __webpack_exports__["a"] = (function(rotate) {
  rotate = rotateRadians(rotate[0] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], rotate[1] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], rotate.length > 2 ? rotate[2] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */] : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], coordinates[1] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */]);
    return coordinates[0] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates[1] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates;
  }

  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], coordinates[1] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */]);
    return coordinates[0] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates[1] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates;
  };

  return forward;
});


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = transformer;
/* harmony default export */ __webpack_exports__["a"] = (function(methods) {
  return {
    stream: transformer(methods)
  };
});

function transformer(methods) {
  return function(stream) {
    var s = new TransformStream;
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) { this.stream.point(x, y); },
  sphere: function() { this.stream.sphere(); },
  lineStart: function() { this.stream.lineStart(); },
  lineEnd: function() { this.stream.lineEnd(); },
  polygonStart: function() { this.stream.polygonStart(); },
  polygonEnd: function() { this.stream.polygonEnd(); }
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var bbox = __webpack_require__(10);
var point = __webpack_require__(13).point;

/**
 * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.
 *
 * @name center
 * @param {GeoJSON} geojson GeoJSON to be centered
 * @param {Object} [properties] an Object that is used as the {@link Feature}'s properties
 * @returns {Feature<Point>} a Point feature at the absolute center point of all input features
 * @example
 * var features = turf.featureCollection([
 *   turf.point( [-97.522259, 35.4691]),
 *   turf.point( [-97.502754, 35.463455]),
 *   turf.point( [-97.508269, 35.463245])
 * ]);
 *
 * var center = turf.center(features);
 *
 * //addToMap
 * var addToMap = [features, center]
 * center.properties['marker-size'] = 'large';
 * center.properties['marker-color'] = '#000';
 */
module.exports = function (geojson, properties) {
    var ext = bbox(geojson);
    var x = (ext[0] + ext[2]) / 2;
    var y = (ext[1] + ext[3]) / 2;
    return point([x, y], properties);
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var helpers = __webpack_require__(13);
var getCoords = __webpack_require__(14).getCoords;
var flattenEach = __webpack_require__(1).flattenEach;
var lineString = helpers.lineString;
var featureCollection = helpers.featureCollection;

/**
 * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.
 *
 * @name lineSegment
 * @param {Geometry|FeatureCollection|Feature<LineString|MultiLineString|MultiPolygon|Polygon>} geojson GeoJSON Polygon or LineString
 * @returns {FeatureCollection<LineString>} 2-vertex line segments
 * @example
 * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
 * var segments = turf.lineSegment(polygon);
 *
 * //addToMap
 * var addToMap = [polygon, segments]
 */
module.exports = function (geojson) {
    if (!geojson) throw new Error('geojson is required');

    var results = [];
    flattenEach(geojson, function (feature) {
        lineSegment(feature, results);
    });
    return featureCollection(results);
};

/**
 * Line Segment
 *
 * @private
 * @param {Feature<LineString|Polygon>} geojson Line or polygon feature
 * @param {Array} results push to results
 * @returns {void}
 */
function lineSegment(geojson, results) {
    var coords = [];
    var geometry = geojson.geometry;
    switch (geometry.type) {
    case 'Polygon':
        coords = getCoords(geometry);
        break;
    case 'LineString':
        coords = [getCoords(geometry)];
    }
    coords.forEach(function (coord) {
        var segments = createSegments(coord, geojson.properties);
        segments.forEach(function (segment) {
            segment.id = results.length;
            results.push(segment);
        });
    });
}

/**
 * Create Segments from LineString coordinates
 *
 * @private
 * @param {LineString} coords LineString coordinates
 * @param {*} properties GeoJSON properties
 * @returns {Array<Feature<LineString>>} line segments
 */
function createSegments(coords, properties) {
    var segments = [];
    coords.reduce(function (previousCoords, currentCoords) {
        var segment = lineString([previousCoords, currentCoords], properties);
        segment.bbox = bbox(previousCoords, currentCoords);
        segments.push(segment);
        return currentCoords;
    });
    return segments;
}

/**
 * Create BBox between two coordinates (faster than @turf/bbox)
 *
 * @private
 * @param {[number, number]} coords1 Point coordinate
 * @param {[number, number]} coords2 Point coordinate
 * @returns {BBox} [west, south, east, north]
 */
function bbox(coords1, coords2) {
    var x1 = coords1[0];
    var y1 = coords1[1];
    var x2 = coords2[0];
    var y2 = coords2[1];
    var west = (x1 < x2) ? x1 : x2;
    var south = (y1 < y2) ? y1 : y2;
    var east = (x1 > x2) ? x1 : x2;
    var north = (y1 > y2) ? y1 : y2;
    return [west, south, east, north];
}


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* Geodesy representation conversion functions                        (c) Chris Veness 2002-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong.html                                                    */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-dms.html                                    */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/* eslint no-irregular-whitespace: [2, { skipComments: true }] */


/**
 * Latitude/longitude points may be represented as decimal degrees, or subdivided into sexagesimal
 * minutes and seconds.
 *
 * @module dms
 */


/**
 * Functions for parsing and representing degrees / minutes / seconds.
 * @class Dms
 */
var Dms = {};

// note Unicode Degree = U+00B0. Prime = U+2032, Double prime = U+2033


/**
 * Parses string representing degrees/minutes/seconds into numeric degrees.
 *
 * This is very flexible on formats, allowing signed decimal degrees, or deg-min-sec optionally
 * suffixed by compass direction (NSEW). A variety of separators are accepted (eg 3° 37′ 09″W).
 * Seconds and minutes may be omitted.
 *
 * @param   {string|number} dmsStr - Degrees or deg/min/sec in variety of formats.
 * @returns {number} Degrees as decimal number.
 *
 * @example
 *     var lat = Dms.parseDMS('51° 28′ 40.12″ N');
 *     var lon = Dms.parseDMS('000° 00′ 05.31″ W');
 *     var p1 = new LatLon(lat, lon); // 51.4778°N, 000.0015°W
 */
Dms.parseDMS = function(dmsStr) {
    // check for signed decimal degrees without NSEW, if so return it directly
    if (typeof dmsStr == 'number' && isFinite(dmsStr)) return Number(dmsStr);

    // strip off any sign or compass dir'n & split out separate d/m/s
    var dms = String(dmsStr).trim().replace(/^-/, '').replace(/[NSEW]$/i, '').split(/[^0-9.,]+/);
    if (dms[dms.length-1]=='') dms.splice(dms.length-1);  // from trailing symbol

    if (dms == '') return NaN;

    // and convert to decimal degrees...
    var deg;
    switch (dms.length) {
        case 3:  // interpret 3-part result as d/m/s
            deg = dms[0]/1 + dms[1]/60 + dms[2]/3600;
            break;
        case 2:  // interpret 2-part result as d/m
            deg = dms[0]/1 + dms[1]/60;
            break;
        case 1:  // just d (possibly decimal) or non-separated dddmmss
            deg = dms[0];
            // check for fixed-width unseparated format eg 0033709W
            //if (/[NS]/i.test(dmsStr)) deg = '0' + deg;  // - normalise N/S to 3-digit degrees
            //if (/[0-9]{7}/.test(deg)) deg = deg.slice(0,3)/1 + deg.slice(3,5)/60 + deg.slice(5)/3600;
            break;
        default:
            return NaN;
    }
    if (/^-|[WS]$/i.test(dmsStr.trim())) deg = -deg; // take '-', west and south as -ve

    return Number(deg);
};


/**
 * Separator character to be used to separate degrees, minutes, seconds, and cardinal directions.
 *
 * Set to '\u202f' (narrow no-break space) for improved formatting.
 *
 * @example
 *   var p = new LatLon(51.2, 0.33);  // 51°12′00.0″N, 000°19′48.0″E
 *   Dms.separator = '\u202f';        // narrow no-break space
 *   var pʹ = new LatLon(51.2, 0.33); // 51° 12′ 00.0″ N, 000° 19′ 48.0″ E
 */
Dms.separator = '';


/**
 * Converts decimal degrees to deg/min/sec format
 *  - degree, prime, double-prime symbols are added, but sign is discarded, though no compass
 *    direction is added.
 *
 * @private
 * @param   {number} deg - Degrees to be formatted as specified.
 * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Degrees formatted as deg/min/secs according to specified format.
 */
Dms.toDMS = function(deg, format, dp) {
    if (isNaN(deg)) return null;  // give up here if we can't make a number from deg

    // default values
    if (format === undefined) format = 'dms';
    if (dp === undefined) {
        switch (format) {
            case 'd':    case 'deg':         dp = 4; break;
            case 'dm':   case 'deg+min':     dp = 2; break;
            case 'dms':  case 'deg+min+sec': dp = 0; break;
            default:    format = 'dms'; dp = 0;  // be forgiving on invalid format
        }
    }

    deg = Math.abs(deg);  // (unsigned result ready for appending compass dir'n)

    var dms, d, m, s;
    switch (format) {
        default: // invalid format spec!
        case 'd': case 'deg':
            d = deg.toFixed(dp);    // round degrees
            if (d<100) d = '0' + d; // pad with leading zeros
            if (d<10) d = '0' + d;
            dms = d + '°';
            break;
        case 'dm': case 'deg+min':
            var min = (deg*60).toFixed(dp); // convert degrees to minutes & round
            d = Math.floor(min / 60);       // get component deg/min
            m = (min % 60).toFixed(dp);     // pad with trailing zeros
            if (d<100) d = '0' + d;         // pad with leading zeros
            if (d<10) d = '0' + d;
            if (m<10) m = '0' + m;
            dms = d + '°'+Dms.separator + m + '′';
            break;
        case 'dms': case 'deg+min+sec':
            var sec = (deg*3600).toFixed(dp); // convert degrees to seconds & round
            d = Math.floor(sec / 3600);       // get component deg/min/sec
            m = Math.floor(sec/60) % 60;
            s = (sec % 60).toFixed(dp);       // pad with trailing zeros
            if (d<100) d = '0' + d;           // pad with leading zeros
            if (d<10) d = '0' + d;
            if (m<10) m = '0' + m;
            if (s<10) s = '0' + s;
            dms = d + '°'+Dms.separator + m + '′'+Dms.separator + s + '″';
            break;
    }

    return dms;
};


/**
 * Converts numeric degrees to deg/min/sec latitude (2-digit degrees, suffixed with N/S).
 *
 * @param   {number} deg - Degrees to be formatted as specified.
 * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Degrees formatted as deg/min/secs according to specified format.
 */
Dms.toLat = function(deg, format, dp) {
    var lat = Dms.toDMS(deg, format, dp);
    return lat===null ? '–' : lat.slice(1)+Dms.separator + (deg<0 ? 'S' : 'N');  // knock off initial '0' for lat!
};


/**
 * Convert numeric degrees to deg/min/sec longitude (3-digit degrees, suffixed with E/W)
 *
 * @param   {number} deg - Degrees to be formatted as specified.
 * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Degrees formatted as deg/min/secs according to specified format.
 */
Dms.toLon = function(deg, format, dp) {
    var lon = Dms.toDMS(deg, format, dp);
    return lon===null ? '–' : lon+Dms.separator + (deg<0 ? 'W' : 'E');
};


/**
 * Converts numeric degrees to deg/min/sec as a bearing (0°..360°)
 *
 * @param   {number} deg - Degrees to be formatted as specified.
 * @param   {string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use – default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Degrees formatted as deg/min/secs according to specified format.
 */
Dms.toBrng = function(deg, format, dp) {
    deg = (Number(deg)+360) % 360;  // normalise -ve values to 180°..360°
    var brng =  Dms.toDMS(deg, format, dp);
    return brng===null ? '–' : brng.replace('360', '0');  // just in case rounding took us up to 360°!
};


/**
 * Returns compass point (to given precision) for supplied bearing.
 *
 * @param   {number} bearing - Bearing in degrees from north.
 * @param   {number} [precision=3] - Precision (1:cardinal / 2:intercardinal / 3:secondary-intercardinal).
 * @returns {string} Compass point for supplied bearing.
 *
 * @example
 *   var point = Dms.compassPoint(24);    // point = 'NNE'
 *   var point = Dms.compassPoint(24, 1); // point = 'N'
 */
Dms.compassPoint = function(bearing, precision) {
    if (precision === undefined) precision = 3;
    // note precision = max length of compass point; it could be extended to 4 for quarter-winds
    // (eg NEbN), but I think they are little used

    bearing = ((bearing%360)+360)%360; // normalise to 0..360

    var point;

    switch (precision) {
        case 1: // 4 compass points
            switch (Math.round(bearing*4/360)%4) {
                case 0: point = 'N'; break;
                case 1: point = 'E'; break;
                case 2: point = 'S'; break;
                case 3: point = 'W'; break;
            }
            break;
        case 2: // 8 compass points
            switch (Math.round(bearing*8/360)%8) {
                case 0: point = 'N';  break;
                case 1: point = 'NE'; break;
                case 2: point = 'E';  break;
                case 3: point = 'SE'; break;
                case 4: point = 'S';  break;
                case 5: point = 'SW'; break;
                case 6: point = 'W';  break;
                case 7: point = 'NW'; break;
            }
            break;
        case 3: // 16 compass points
            switch (Math.round(bearing*16/360)%16) {
                case  0: point = 'N';   break;
                case  1: point = 'NNE'; break;
                case  2: point = 'NE';  break;
                case  3: point = 'ENE'; break;
                case  4: point = 'E';   break;
                case  5: point = 'ESE'; break;
                case  6: point = 'SE';  break;
                case  7: point = 'SSE'; break;
                case  8: point = 'S';   break;
                case  9: point = 'SSW'; break;
                case 10: point = 'SW';  break;
                case 11: point = 'WSW'; break;
                case 12: point = 'W';   break;
                case 13: point = 'WNW'; break;
                case 14: point = 'NW';  break;
                case 15: point = 'NNW'; break;
            }
            break;
        default:
            throw new RangeError('Precision must be between 1 and 3');
    }

    return point;
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Polyfill String.trim for old browsers
 *  (q.v. blog.stevenlevithan.com/archives/faster-trim-javascript) */
if (String.prototype.trim === undefined) {
    String.prototype.trim = function() {
        return String(this).replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = Dms; // ≡ export default Dms


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// https://en.wikipedia.org/wiki/Rhumb_line
// http://www.movable-type.co.uk/scripts/latlong.html#rhumblines
var helpers = __webpack_require__(13);
var getCoord = __webpack_require__(14).getCoord;
var GeodesyLatLon = __webpack_require__(58).LatLonSpherical;
var point = helpers.point;
var radiansToDistance = helpers.radiansToDistance;
var distanceToRadians = helpers.distanceToRadians;

/**
 * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the
 * origin Point with the (constant) given bearing.
 *
 * @name rhumbDestination
 * @param {Geometry|Feature<Point>|Array<number>} origin starting point
 * @param {number} distance distance from the starting point
 * @param {number} bearing constant bearing angle ranging from -180 to 180 degrees from north
 * @param {string} [units=kilometers] miles, kilometers, degrees, or radians
 * @returns {Feature<Point>} Destination point.
 * @example
 * var point = turf.point([-75.343, 39.984], {"marker-color": "F00"});
 * var distance = 50;
 * var bearing = 90;
 * var units = 'miles';
 *
 * var destination = turf.rhumbDestination(point, distance, bearing, units);
 *
 * //addToMap
 * var addToMap = [point, destination]
 * destination.properties['marker-color'] = '#00F';
 */
module.exports = function (origin, distance, bearing, units) {
    // validation
    if (!origin) throw new Error('origin is required');
    if (distance === undefined || distance === null) throw new Error('distance is required');
    if (bearing === undefined || bearing === null) throw new Error('bearing is required');
    if (!(distance >= 0)) throw new Error('distance must be greater than 0');

    units = units || 'kilometers';
    var distanceInMeters = radiansToDistance(distanceToRadians(distance, units), 'meters');
    var coords = getCoord(origin);
    var pt = new GeodesyLatLon(coords[1], coords[0]);
    var destination = pt.rhumbDestinationPoint(distanceInMeters, bearing);

    // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)
    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678
    destination.lon += (destination.lon - coords[0] > 180) ? -360 : (coords[0] - destination.lon > 180) ? 360 : 0;
    return point([destination.lon, destination.lat]);
};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

/**
 * Callback for coordEach
 *
 * @private
 * @callback coordEachCallback
 * @param {[number, number]} currentCoords The current coordinates being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
 *
 * @name coordEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentCoords, currentIndex)
 * @param {boolean} [excludeWrapCoord=false] whether or not to include
 * the final coordinate of LinearRings that wraps the ring in its iteration.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.coordEach(features, function (currentCoords, currentIndex) {
 *   //=currentCoords
 *   //=currentIndex
 * });
 */
function coordEach(layer, callback, excludeWrapCoord) {
    var i, j, k, g, l, geometry, stopG, coords,
        geometryMaybeCollection,
        wrapShrink = 0,
        currentIndex = 0,
        isGeometryCollection,
        isFeatureCollection = layer.type === 'FeatureCollection',
        isFeature = layer.type === 'Feature',
        stop = isFeatureCollection ? layer.features.length : 1;

  // This logic may look a little weird. The reason why it is that way
  // is because it's trying to be fast. GeoJSON supports multiple kinds
  // of objects at its root: FeatureCollection, Features, Geometries.
  // This function has the responsibility of handling all of them, and that
  // means that some of the `for` loops you see below actually just don't apply
  // to certain inputs. For instance, if you give this just a
  // Point geometry, then both loops are short-circuited and all we do
  // is gradually rename the input until it's called 'geometry'.
  //
  // This also aims to allocate as few resources as possible: just a
  // few numbers and booleans, rather than any temporary arrays as would
  // be required with the normalization approach.
    for (i = 0; i < stop; i++) {

        geometryMaybeCollection = (isFeatureCollection ? layer.features[i].geometry :
        (isFeature ? layer.geometry : layer));
        isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (g = 0; g < stopG; g++) {
            geometry = isGeometryCollection ?
            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;
            coords = geometry.coordinates;

            wrapShrink = (excludeWrapCoord &&
                (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon')) ?
                1 : 0;

            if (geometry.type === 'Point') {
                callback(coords, currentIndex);
                currentIndex++;
            } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {
                for (j = 0; j < coords.length; j++) {
                    callback(coords[j], currentIndex);
                    currentIndex++;
                }
            } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {
                for (j = 0; j < coords.length; j++)
                    for (k = 0; k < coords[j].length - wrapShrink; k++) {
                        callback(coords[j][k], currentIndex);
                        currentIndex++;
                    }
            } else if (geometry.type === 'MultiPolygon') {
                for (j = 0; j < coords.length; j++)
                    for (k = 0; k < coords[j].length; k++)
                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                            callback(coords[j][k][l], currentIndex);
                            currentIndex++;
                        }
            } else if (geometry.type === 'GeometryCollection') {
                for (j = 0; j < geometry.geometries.length; j++)
                    coordEach(geometry.geometries[j], callback, excludeWrapCoord);
            } else {
                throw new Error('Unknown Geometry Type');
            }
        }
    }
}
module.exports.coordEach = coordEach;

/**
 * Callback for coordReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback coordReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {[number, number]} currentCoords The current coordinate being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
 *
 * @name coordReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentCoords, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @param {boolean} [excludeWrapCoord=false] whether or not to include
 * the final coordinate of LinearRings that wraps the ring in its iteration.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.coordReduce(features, function (previousValue, currentCoords, currentIndex) {
 *   //=previousValue
 *   //=currentCoords
 *   //=currentIndex
 *   return currentCoords;
 * });
 */
function coordReduce(layer, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach(layer, function (currentCoords, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentCoords;
        } else {
            previousValue = callback(previousValue, currentCoords, currentIndex);
        }
    }, excludeWrapCoord);
    return previousValue;
}
module.exports.coordReduce = coordReduce;

/**
 * Callback for propEach
 *
 * @private
 * @callback propEachCallback
 * @param {*} currentProperties The current properties being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over properties in any GeoJSON object, similar to Array.forEach()
 *
 * @name propEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentProperties, currentIndex)
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.propEach(features, function (currentProperties, currentIndex) {
 *   //=currentProperties
 *   //=currentIndex
 * });
 */
function propEach(layer, callback) {
    var i;
    switch (layer.type) {
    case 'FeatureCollection':
        for (i = 0; i < layer.features.length; i++) {
            callback(layer.features[i].properties, i);
        }
        break;
    case 'Feature':
        callback(layer.properties, 0);
        break;
    }
}
module.exports.propEach = propEach;


/**
 * Callback for propReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback propReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {*} currentProperties The current properties being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce properties in any GeoJSON object into a single value,
 * similar to how Array.reduce works. However, in this case we lazily run
 * the reduction, so an array of all properties is unnecessary.
 *
 * @name propReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentProperties, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.propReduce(features, function (previousValue, currentProperties, currentIndex) {
 *   //=previousValue
 *   //=currentProperties
 *   //=currentIndex
 *   return currentProperties
 * });
 */
function propReduce(layer, callback, initialValue) {
    var previousValue = initialValue;
    propEach(layer, function (currentProperties, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentProperties;
        } else {
            previousValue = callback(previousValue, currentProperties, currentIndex);
        }
    });
    return previousValue;
}
module.exports.propReduce = propReduce;

/**
 * Callback for featureEach
 *
 * @private
 * @callback featureEachCallback
 * @param {Feature<any>} currentFeature The current feature being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over features in any GeoJSON object, similar to
 * Array.forEach.
 *
 * @name featureEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentFeature, currentIndex)
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.featureEach(features, function (currentFeature, currentIndex) {
 *   //=currentFeature
 *   //=currentIndex
 * });
 */
function featureEach(layer, callback) {
    if (layer.type === 'Feature') {
        callback(layer, 0);
    } else if (layer.type === 'FeatureCollection') {
        for (var i = 0; i < layer.features.length; i++) {
            callback(layer.features[i], i);
        }
    }
}
module.exports.featureEach = featureEach;

/**
 * Callback for featureReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback featureReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature<any>} currentFeature The current Feature being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce features in any GeoJSON object, similar to Array.reduce().
 *
 * @name featureReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentFeature, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.featureReduce(features, function (previousValue, currentFeature, currentIndex) {
 *   //=previousValue
 *   //=currentFeature
 *   //=currentIndex
 *   return currentFeature
 * });
 */
function featureReduce(layer, callback, initialValue) {
    var previousValue = initialValue;
    featureEach(layer, function (currentFeature, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentFeature;
        } else {
            previousValue = callback(previousValue, currentFeature, currentIndex);
        }
    });
    return previousValue;
}
module.exports.featureReduce = featureReduce;

/**
 * Get all coordinates from any GeoJSON object.
 *
 * @name coordAll
 * @param {Object} layer any GeoJSON object
 * @returns {Array<Array<number>>} coordinate position array
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * var coords = turf.coordAll(features);
 * //=coords
 */
function coordAll(layer) {
    var coords = [];
    coordEach(layer, function (coord) {
        coords.push(coord);
    });
    return coords;
}
module.exports.coordAll = coordAll;

/**
 * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
 *
 * @name geomEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentGeometry, currentIndex)
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.geomEach(features, function (currentGeometry, currentIndex) {
 *   //=currentGeometry
 *   //=currentIndex
 * });
 */
function geomEach(layer, callback) {
    var i, j, g, geometry, stopG,
        geometryMaybeCollection,
        isGeometryCollection,
        currentIndex = 0,
        isFeatureCollection = layer.type === 'FeatureCollection',
        isFeature = layer.type === 'Feature',
        stop = isFeatureCollection ? layer.features.length : 1;

  // This logic may look a little weird. The reason why it is that way
  // is because it's trying to be fast. GeoJSON supports multiple kinds
  // of objects at its root: FeatureCollection, Features, Geometries.
  // This function has the responsibility of handling all of them, and that
  // means that some of the `for` loops you see below actually just don't apply
  // to certain inputs. For instance, if you give this just a
  // Point geometry, then both loops are short-circuited and all we do
  // is gradually rename the input until it's called 'geometry'.
  //
  // This also aims to allocate as few resources as possible: just a
  // few numbers and booleans, rather than any temporary arrays as would
  // be required with the normalization approach.
    for (i = 0; i < stop; i++) {

        geometryMaybeCollection = (isFeatureCollection ? layer.features[i].geometry :
        (isFeature ? layer.geometry : layer));
        isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (g = 0; g < stopG; g++) {
            geometry = isGeometryCollection ?
            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;

            if (geometry.type === 'Point' ||
                geometry.type === 'LineString' ||
                geometry.type === 'MultiPoint' ||
                geometry.type === 'Polygon' ||
                geometry.type === 'MultiLineString' ||
                geometry.type === 'MultiPolygon') {
                callback(geometry, currentIndex);
                currentIndex++;
            } else if (geometry.type === 'GeometryCollection') {
                for (j = 0; j < geometry.geometries.length; j++) {
                    callback(geometry.geometries[j], currentIndex);
                    currentIndex++;
                }
            } else {
                throw new Error('Unknown Geometry Type');
            }
        }
    }
}
module.exports.geomEach = geomEach;

/**
 * Callback for geomReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback geomReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {*} currentGeometry The current Feature being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce geometry in any GeoJSON object, similar to Array.reduce().
 *
 * @name geomReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentGeometry, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.geomReduce(features, function (previousValue, currentGeometry, currentIndex) {
 *   //=previousValue
 *   //=currentGeometry
 *   //=currentIndex
 *   return currentGeometry
 * });
 */
function geomReduce(layer, callback, initialValue) {
    var previousValue = initialValue;
    geomEach(layer, function (currentGeometry, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentGeometry;
        } else {
            previousValue = callback(previousValue, currentGeometry, currentIndex);
        }
    });
    return previousValue;
}
module.exports.geomReduce = geomReduce;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var twoProduct = __webpack_require__(66)
var robustSum = __webpack_require__(117)
var robustScale = __webpack_require__(118)
var robustSubtract = __webpack_require__(120)

var NUM_EXPAND = 5

var EPSILON     = 1.1102230246251565e-16
var ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON
var ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON

function cofactor(m, c) {
  var result = new Array(m.length-1)
  for(var i=1; i<m.length; ++i) {
    var r = result[i-1] = new Array(m.length-1)
    for(var j=0,k=0; j<m.length; ++j) {
      if(j === c) {
        continue
      }
      r[k++] = m[i][j]
    }
  }
  return result
}

function matrix(n) {
  var result = new Array(n)
  for(var i=0; i<n; ++i) {
    result[i] = new Array(n)
    for(var j=0; j<n; ++j) {
      result[i][j] = ["m", j, "[", (n-i-1), "]"].join("")
    }
  }
  return result
}

function sign(n) {
  if(n & 1) {
    return "-"
  }
  return ""
}

function generateSum(expr) {
  if(expr.length === 1) {
    return expr[0]
  } else if(expr.length === 2) {
    return ["sum(", expr[0], ",", expr[1], ")"].join("")
  } else {
    var m = expr.length>>1
    return ["sum(", generateSum(expr.slice(0, m)), ",", generateSum(expr.slice(m)), ")"].join("")
  }
}

function determinant(m) {
  if(m.length === 2) {
    return [["sum(prod(", m[0][0], ",", m[1][1], "),prod(-", m[0][1], ",", m[1][0], "))"].join("")]
  } else {
    var expr = []
    for(var i=0; i<m.length; ++i) {
      expr.push(["scale(", generateSum(determinant(cofactor(m, i))), ",", sign(i), m[0][i], ")"].join(""))
    }
    return expr
  }
}

function orientation(n) {
  var pos = []
  var neg = []
  var m = matrix(n)
  var args = []
  for(var i=0; i<n; ++i) {
    if((i&1)===0) {
      pos.push.apply(pos, determinant(cofactor(m, i)))
    } else {
      neg.push.apply(neg, determinant(cofactor(m, i)))
    }
    args.push("m" + i)
  }
  var posExpr = generateSum(pos)
  var negExpr = generateSum(neg)
  var funcName = "orientation" + n + "Exact"
  var code = ["function ", funcName, "(", args.join(), "){var p=", posExpr, ",n=", negExpr, ",d=sub(p,n);\
return d[d.length-1];};return ", funcName].join("")
  var proc = new Function("sum", "prod", "scale", "sub", code)
  return proc(robustSum, twoProduct, robustScale, robustSubtract)
}

var orientation3Exact = orientation(3)
var orientation4Exact = orientation(4)

var CACHED = [
  function orientation0() { return 0 },
  function orientation1() { return 0 },
  function orientation2(a, b) { 
    return b[0] - a[0]
  },
  function orientation3(a, b, c) {
    var l = (a[1] - c[1]) * (b[0] - c[0])
    var r = (a[0] - c[0]) * (b[1] - c[1])
    var det = l - r
    var s
    if(l > 0) {
      if(r <= 0) {
        return det
      } else {
        s = l + r
      }
    } else if(l < 0) {
      if(r >= 0) {
        return det
      } else {
        s = -(l + r)
      }
    } else {
      return det
    }
    var tol = ERRBOUND3 * s
    if(det >= tol || det <= -tol) {
      return det
    }
    return orientation3Exact(a, b, c)
  },
  function orientation4(a,b,c,d) {
    var adx = a[0] - d[0]
    var bdx = b[0] - d[0]
    var cdx = c[0] - d[0]
    var ady = a[1] - d[1]
    var bdy = b[1] - d[1]
    var cdy = c[1] - d[1]
    var adz = a[2] - d[2]
    var bdz = b[2] - d[2]
    var cdz = c[2] - d[2]
    var bdxcdy = bdx * cdy
    var cdxbdy = cdx * bdy
    var cdxady = cdx * ady
    var adxcdy = adx * cdy
    var adxbdy = adx * bdy
    var bdxady = bdx * ady
    var det = adz * (bdxcdy - cdxbdy) 
            + bdz * (cdxady - adxcdy)
            + cdz * (adxbdy - bdxady)
    var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)
                  + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)
                  + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)
    var tol = ERRBOUND4 * permanent
    if ((det > tol) || (-det > tol)) {
      return det
    }
    return orientation4Exact(a,b,c,d)
  }
]

function slowOrient(args) {
  var proc = CACHED[args.length]
  if(!proc) {
    proc = CACHED[args.length] = orientation(args.length)
  }
  return proc.apply(undefined, args)
}

function generateOrientationProc() {
  while(CACHED.length <= NUM_EXPAND) {
    CACHED.push(orientation(CACHED.length))
  }
  var args = []
  var procArgs = ["slow"]
  for(var i=0; i<=NUM_EXPAND; ++i) {
    args.push("a" + i)
    procArgs.push("o" + i)
  }
  var code = [
    "function getOrientation(", args.join(), "){switch(arguments.length){case 0:case 1:return 0;"
  ]
  for(var i=2; i<=NUM_EXPAND; ++i) {
    code.push("case ", i, ":return o", i, "(", args.slice(0, i).join(), ");")
  }
  code.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation")
  procArgs.push(code.join(""))

  var proc = Function.apply(undefined, procArgs)
  module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))
  for(var i=0; i<=NUM_EXPAND; ++i) {
    module.exports[i] = CACHED[i]
  }
}

generateOrientationProc()

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var wgs84 = __webpack_require__(130);

module.exports.geometry = geometry;
module.exports.ring = ringArea;

function geometry(_) {
    var area = 0, i;
    switch (_.type) {
        case 'Polygon':
            return polygonArea(_.coordinates);
        case 'MultiPolygon':
            for (i = 0; i < _.coordinates.length; i++) {
                area += polygonArea(_.coordinates[i]);
            }
            return area;
        case 'Point':
        case 'MultiPoint':
        case 'LineString':
        case 'MultiLineString':
            return 0;
        case 'GeometryCollection':
            for (i = 0; i < _.geometries.length; i++) {
                area += geometry(_.geometries[i]);
            }
            return area;
    }
}

function polygonArea(coords) {
    var area = 0;
    if (coords && coords.length > 0) {
        area += Math.abs(ringArea(coords[0]));
        for (var i = 1; i < coords.length; i++) {
            area -= Math.abs(ringArea(coords[i]));
        }
    }
    return area;
}

/**
 * Calculate the approximate area of the polygon were it projected onto
 *     the earth.  Note that this area will be positive if ring is oriented
 *     clockwise, otherwise it will be negative.
 *
 * Reference:
 * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
 *     Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
 *     Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409
 *
 * Returns:
 * {float} The approximate signed geodesic area of the polygon in square
 *     meters.
 */

function ringArea(coords) {
    var p1, p2, p3, lowerIndex, middleIndex, upperIndex, i,
    area = 0,
    coordsLength = coords.length;

    if (coordsLength > 2) {
        for (i = 0; i < coordsLength; i++) {
            if (i === coordsLength - 2) {// i = N-2
                lowerIndex = coordsLength - 2;
                middleIndex = coordsLength -1;
                upperIndex = 0;
            } else if (i === coordsLength - 1) {// i = N-1
                lowerIndex = coordsLength - 1;
                middleIndex = 0;
                upperIndex = 1;
            } else { // i = 0 to N-3
                lowerIndex = i;
                middleIndex = i+1;
                upperIndex = i+2;
            }
            p1 = coords[lowerIndex];
            p2 = coords[middleIndex];
            p3 = coords[upperIndex];
            area += ( rad(p3[0]) - rad(p1[0]) ) * Math.sin( rad(p2[1]));
        }

        area = area * wgs84.RADIUS * wgs84.RADIUS / 2;
    }

    return area;
}

function rad(_) {
    return _ * Math.PI / 180;
}

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var destination = __webpack_require__(20);
var polygon = __webpack_require__(13).polygon;

/**
 * Takes a {@link Point} and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.
 *
 * @name circle
 * @param {Feature<Point>|number[]} center center point
 * @param {number} radius radius of the circle
 * @param {number} [steps=64] number of steps
 * @param {string} [units=kilometers] miles, kilometers, degrees, or radians
 * @param {Object} [properties={}] properties
 * @returns {Feature<Polygon>} circle polygon
 * @example
 * var center = [-75.343, 39.984];
 * var radius = 5;
 * var steps = 10;
 * var units = 'kilometers';
 * var properties = {foo: 'bar'};
 *
 * var circle = turf.circle(center, radius, steps, units, properties);
 *
 * //addToMap
 * var addToMap = [turf.point(center), circle]
 */
module.exports = function (center, radius, steps, units, properties) {
    // validation
    if (!center) throw new Error('center is required');
    if (!radius) throw new Error('radius is required');

    // default params
    steps = steps || 64;
    properties = properties || center.properties || {};

    var coordinates = [];
    for (var i = 0; i < steps; i++) {
        coordinates.push(destination(center, radius, i * 360 / steps, units).geometry.coordinates);
    }
    coordinates.push(coordinates[0]);

    return polygon([coordinates], properties);
};


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = clipExtent;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__buffer__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__line__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__polygon__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_d3_array__ = __webpack_require__(45);






var clipMax = 1e9, clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipExtent(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
        || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(p[0] - x0) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] ? direction > 0 ? 0 : 3
        : Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(p[0] - x1) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] ? direction > 0 ? 2 : 1
        : Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(p[1] - y0) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] ? direction > 0 ? 1 : 0
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb
        : ca === 0 ? b[1] - a[1]
        : ca === 1 ? a[0] - b[0]
        : ca === 2 ? a[1] - b[1]
        : b[0] - a[0];
  }

  return function(stream) {
    var activeStream = stream,
        bufferStream = Object(__WEBPACK_IMPORTED_MODULE_1__buffer__["a" /* default */])(),
        segments,
        polygon,
        ring,
        x__, y__, v__, // first point
        x_, y_, v_, // previous point
        first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = Object(__WEBPACK_IMPORTED_MODULE_4_d3_array__["a" /* merge */])(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          Object(__WEBPACK_IMPORTED_MODULE_3__polygon__["a" /* default */])(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (Object(__WEBPACK_IMPORTED_MODULE_2__line__["a" /* default */])(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

/* harmony default export */ __webpack_exports__["b"] = (function() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
});


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_bisect__ = __webpack_require__(78);
/* unused harmony reexport bisect */
/* unused harmony reexport bisectRight */
/* unused harmony reexport bisectLeft */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_ascending__ = __webpack_require__(24);
/* unused harmony reexport ascending */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_bisector__ = __webpack_require__(79);
/* unused harmony reexport bisector */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_cross__ = __webpack_require__(152);
/* unused harmony reexport cross */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_descending__ = __webpack_require__(153);
/* unused harmony reexport descending */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_deviation__ = __webpack_require__(81);
/* unused harmony reexport deviation */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_extent__ = __webpack_require__(83);
/* unused harmony reexport extent */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_histogram__ = __webpack_require__(154);
/* unused harmony reexport histogram */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_threshold_freedmanDiaconis__ = __webpack_require__(157);
/* unused harmony reexport thresholdFreedmanDiaconis */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_threshold_scott__ = __webpack_require__(158);
/* unused harmony reexport thresholdScott */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_threshold_sturges__ = __webpack_require__(87);
/* unused harmony reexport thresholdSturges */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_max__ = __webpack_require__(159);
/* unused harmony reexport max */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_mean__ = __webpack_require__(160);
/* unused harmony reexport mean */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_median__ = __webpack_require__(161);
/* unused harmony reexport median */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_merge__ = __webpack_require__(162);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_14__src_merge__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_min__ = __webpack_require__(88);
/* unused harmony reexport min */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_pairs__ = __webpack_require__(80);
/* unused harmony reexport pairs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_permute__ = __webpack_require__(163);
/* unused harmony reexport permute */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__src_quantile__ = __webpack_require__(46);
/* unused harmony reexport quantile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__src_range__ = __webpack_require__(85);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_19__src_range__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__src_scan__ = __webpack_require__(164);
/* unused harmony reexport scan */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__src_shuffle__ = __webpack_require__(165);
/* unused harmony reexport shuffle */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__src_sum__ = __webpack_require__(166);
/* unused harmony reexport sum */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__src_ticks__ = __webpack_require__(86);
/* unused harmony reexport ticks */
/* unused harmony reexport tickIncrement */
/* unused harmony reexport tickStep */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__src_transpose__ = __webpack_require__(89);
/* unused harmony reexport transpose */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__src_variance__ = __webpack_require__(82);
/* unused harmony reexport variance */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__src_zip__ = __webpack_require__(167);
/* unused harmony reexport zip */





























/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(27);


/* harmony default export */ __webpack_exports__["a"] = (function(values, p, valueof) {
  if (valueof == null) valueof = __WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */];
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
});


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = conicEqualAreaRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__conic__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cylindricalEqualArea__ = __webpack_require__(180);




function conicEqualAreaRaw(y0, y1) {
  var sy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0), n = (sy0 + Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y1)) / 2;

  // Are the parallels symmetrical around the Equator?
  if (Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(n) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) return Object(__WEBPACK_IMPORTED_MODULE_2__cylindricalEqualArea__["a" /* cylindricalEqualAreaRaw */])(y0);

  var c = 1 + sy0 * (2 * n - sy0), r0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(c) / n;

  function project(x, y) {
    var r = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(c - 2 * n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y)) / n;
    return [r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x *= n), r0 - r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x)];
  }

  project.invert = function(x, y) {
    var r0y = r0 - y;
    return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x, Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(r0y)) / n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(r0y), Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

/* harmony default export */ __webpack_exports__["b"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_1__conic__["a" /* conicProjection */])(conicEqualAreaRaw)
      .scale(155.424)
      .center([0, 33.6442]);
});


/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = conicProjection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(18);



function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = __WEBPACK_IMPORTED_MODULE_0__math__["o" /* pi */] / 3,
      m = Object(__WEBPACK_IMPORTED_MODULE_1__index__["b" /* projectionMutator */])(projectAt),
      p = m(phi0, phi1);

  p.parallels = function(_) {
    return arguments.length ? m(phi0 = _[0] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi1 = _[1] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */]) : [phi0 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */], phi1 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]];
  };

  return p;
}


/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fitExtent;
/* harmony export (immutable) */ __webpack_exports__["b"] = fitSize;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__stream__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__path_bounds__ = __webpack_require__(93);



function fitExtent(projection, extent, object) {
  var w = extent[1][0] - extent[0][0],
      h = extent[1][1] - extent[0][1],
      clip = projection.clipExtent && projection.clipExtent();

  projection
      .scale(150)
      .translate([0, 0]);

  if (clip != null) projection.clipExtent(null);

  Object(__WEBPACK_IMPORTED_MODULE_0__stream__["a" /* default */])(object, projection.stream(__WEBPACK_IMPORTED_MODULE_1__path_bounds__["a" /* default */]));

  var b = __WEBPACK_IMPORTED_MODULE_1__path_bounds__["a" /* default */].result(),
      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

  if (clip != null) projection.clipExtent(clip);

  return projection
      .scale(k * 150)
      .translate([x, y]);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = mercatorRaw;
/* harmony export (immutable) */ __webpack_exports__["b"] = mercatorProjection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rotation__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(18);




function mercatorRaw(lambda, phi) {
  return [lambda, Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["v" /* tan */])((__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + phi) / 2))];
}

mercatorRaw.invert = function(x, y) {
  return [x, 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["k" /* exp */])(y)) - __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */]];
};

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return mercatorProjection(mercatorRaw)
      .scale(961 / __WEBPACK_IMPORTED_MODULE_0__math__["w" /* tau */]);
});

function mercatorProjection(project) {
  var m = Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null, y0, x1, y1; // clip extent

  m.scale = function(_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function(_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function(_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function(_) {
    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = __WEBPACK_IMPORTED_MODULE_0__math__["o" /* pi */] * scale(),
        t = m(Object(__WEBPACK_IMPORTED_MODULE_1__rotation__["a" /* default */])(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null
        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var helpers = __webpack_require__(13);
var point = helpers.point;
var coordEach = meta.coordEach;
var featureEach = meta.featureEach;
var featureCollection = helpers.featureCollection;

/**
 * Takes a feature or set of features and returns all positions as {@link Point|points}.
 *
 * @name explode
 * @param {FeatureCollection|Feature<any>} geojson input features
 * @returns {FeatureCollection<point>} points representing the exploded input features
 * @throws {Error} if it encounters an unknown geometry type
 * @example
 * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
 *
 * var explode = turf.explode(polygon);
 *
 * //addToMap
 * var addToMap = [polygon, explode]
 */
module.exports = function (geojson) {
    var points = [];
    if (geojson.type === 'FeatureCollection') {
        featureEach(geojson, function (feature) {
            coordEach(feature, function (coord) {
                points.push(point(coord, feature.properties));
            });
        });
    } else {
        coordEach(geojson, function (coord) {
            points.push(point(coord, geojson.properties));
        });
    }
    return featureCollection(points);
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var helpers = __webpack_require__(13);
var bearing = __webpack_require__(25);
var distance = __webpack_require__(16);
var invariant = __webpack_require__(14);
var destination = __webpack_require__(20);
var lineIntersects = __webpack_require__(30);
var point = helpers.point;
var getCoords = invariant.getCoords;
var lineString = helpers.lineString;
var flattenEach = meta.flattenEach;

/**
 * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.
 *
 * @name pointOnLine
 * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to
 * @param {Geometry|Feature<Point>|number[]} pt point to snap from
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.
 * @example
 * var line = turf.lineString([
 *     [-77.031669, 38.878605],
 *     [-77.029609, 38.881946],
 *     [-77.020339, 38.884084],
 *     [-77.025661, 38.885821],
 *     [-77.021884, 38.889563],
 *     [-77.019824, 38.892368]
 * ]);
 * var pt = turf.point([-77.037076, 38.884017]);
 *
 * var snapped = turf.pointOnLine(line, pt, 'miles');
 *
 * //addToMap
 * var addToMap = [line, pt, snapped];
 * snapped.properties['marker-color'] = '#00f';
 */
module.exports = function (lines, pt, units) {
    // validation
    var type = (lines.geometry) ? lines.geometry.type : lines.type;
    if (type !== 'LineString' && type !== 'MultiLineString') {
        throw new Error('lines must be LineString or MultiLineString');
    }

    var closestPt = point([Infinity, Infinity], {
        dist: Infinity
    });

    var length = 0.0;
    flattenEach(lines, function (line) {
        var coords = getCoords(line);

        for (var i = 0; i < coords.length - 1; i++) {
            //start
            var start = point(coords[i]);
            start.properties.dist = distance(pt, start, units);
            //stop
            var stop = point(coords[i + 1]);
            stop.properties.dist = distance(pt, stop, units);
            // sectionLength
            var sectionLength = distance(start, stop, units);
            //perpendicular
            var heightDistance = Math.max(start.properties.dist, stop.properties.dist);
            var direction = bearing(start, stop);
            var perpendicularPt1 = destination(pt, heightDistance, direction + 90, units);
            var perpendicularPt2 = destination(pt, heightDistance, direction - 90, units);
            var intersect = lineIntersects(lineString([perpendicularPt1.geometry.coordinates, perpendicularPt2.geometry.coordinates]), lineString([start.geometry.coordinates, stop.geometry.coordinates]));
            var intersectPt = null;
            if (intersect.features.length > 0) {
                intersectPt = intersect.features[0];
                intersectPt.properties.dist = distance(pt, intersectPt, units);
                intersectPt.properties.location = length + distance(start, intersectPt, units);
            }

            if (start.properties.dist < closestPt.properties.dist) {
                closestPt = start;
                closestPt.properties.index = i;
                closestPt.properties.location = length;
            }
            if (stop.properties.dist < closestPt.properties.dist) {
                closestPt = stop;
                closestPt.properties.index = i + 1;
                closestPt.properties.location = length + sectionLength;
            }
            if (intersectPt && intersectPt.properties.dist < closestPt.properties.dist) {
                closestPt = intersectPt;
                closestPt.properties.index = i;
            }
            // update length
            length += sectionLength;
        }

    });

    return closestPt;
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var rbush = __webpack_require__(22);
var meta = __webpack_require__(1);
var featureEach = meta.featureEach;
var coordEach = meta.coordEach;

/**
 * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.
 *
 * @name rbush
 * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a
 * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.
 * @returns {RBush} GeoJSON RBush
 * @example
 * var rbush = require('geojson-rbush')
 * var tree = rbush()
 */
module.exports = function (maxEntries) {
    var tree = rbush(maxEntries);
    /**
     * [insert](https://github.com/mourner/rbush#data-format)
     *
     * @param {Feature<any>} feature insert single GeoJSON Feature
     * @returns {RBush} GeoJSON RBush
     * @example
     * var polygon = {
     *   "type": "Feature",
     *   "properties": {},
     *   "geometry": {
     *     "type": "Polygon",
     *     "coordinates": [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]
     *   }
     * }
     * tree.insert(polygon)
     */
    tree.insert = function (feature) {
        if (Array.isArray(feature)) {
            var bbox = feature;
            feature = bboxPolygon(bbox);
            feature.bbox = bbox;
        } else {
            feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
        }
        return rbush.prototype.insert.call(this, feature);
    };

    /**
     * [load](https://github.com/mourner/rbush#bulk-inserting-data)
     *
     * @param {BBox[]|FeatureCollection<any>} features load entire GeoJSON FeatureCollection
     * @returns {RBush} GeoJSON RBush
     * @example
     * var polygons = {
     *   "type": "FeatureCollection",
     *   "features": [
     *     {
     *       "type": "Feature",
     *       "properties": {},
     *       "geometry": {
     *         "type": "Polygon",
     *         "coordinates": [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]
     *       }
     *     },
     *     {
     *       "type": "Feature",
     *       "properties": {},
     *       "geometry": {
     *         "type": "Polygon",
     *         "coordinates": [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]
     *       }
     *     }
     *   ]
     * }
     * tree.load(polygons)
     */
    tree.load = function (features) {
        var load = [];
        // Load an Array of BBox
        if (Array.isArray(features)) {
            features.forEach(function (bbox) {
                var feature = bboxPolygon(bbox);
                feature.bbox = bbox;
                load.push(feature);
            });
        } else {
            // Load FeatureCollection
            featureEach(features, function (feature) {
                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
                load.push(feature);
            });
        }
        return rbush.prototype.load.call(this, load);
    };

    /**
     * [remove](https://github.com/mourner/rbush#removing-data)
     *
     * @param {BBox|Feature<any>} feature remove single GeoJSON Feature
     * @returns {RBush} GeoJSON RBush
     * @example
     * var polygon = {
     *   "type": "Feature",
     *   "properties": {},
     *   "geometry": {
     *     "type": "Polygon",
     *     "coordinates": [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]
     *   }
     * }
     * tree.remove(polygon)
     */
    tree.remove = function (feature) {
        if (Array.isArray(feature)) {
            var bbox = feature;
            feature = bboxPolygon(bbox);
            feature.bbox = bbox;
        }
        return rbush.prototype.remove.call(this, feature);
    };

    /**
     * [clear](https://github.com/mourner/rbush#removing-data)
     *
     * @returns {RBush} GeoJSON Rbush
     * @example
     * tree.clear()
     */
    tree.clear = function () {
        return rbush.prototype.clear.call(this);
    };

    /**
     * [search](https://github.com/mourner/rbush#search)
     *
     * @param {BBox|FeatureCollection|Feature<any>} geojson search with GeoJSON
     * @returns {FeatureCollection<any>} all features that intersects with the given GeoJSON.
     * @example
     * var polygon = {
     *   "type": "Feature",
     *   "properties": {},
     *   "geometry": {
     *     "type": "Polygon",
     *     "coordinates": [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]
     *   }
     * }
     * tree.search(polygon)
     */
    tree.search = function (geojson) {
        var features = rbush.prototype.search.call(this, this.toBBox(geojson));
        return {
            type: 'FeatureCollection',
            features: features
        };
    };

    /**
     * [collides](https://github.com/mourner/rbush#collisions)
     *
     * @param {BBox|FeatureCollection|Feature<any>} geojson collides with GeoJSON
     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.
     * @example
     * var polygon = {
     *   "type": "Feature",
     *   "properties": {},
     *   "geometry": {
     *     "type": "Polygon",
     *     "coordinates": [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]
     *   }
     * }
     * tree.collides(polygon)
     */
    tree.collides = function (geojson) {
        return rbush.prototype.collides.call(this, this.toBBox(geojson));
    };

    /**
     * [all](https://github.com/mourner/rbush#search)
     *
     * @returns {FeatureCollection<any>} all the features in RBush
     * @example
     * tree.all()
     * //=FeatureCollection
     */
    tree.all = function () {
        var features = rbush.prototype.all.call(this);
        return {
            type: 'FeatureCollection',
            features: features
        };
    };

    /**
     * [toJSON](https://github.com/mourner/rbush#export-and-import)
     *
     * @returns {any} export data as JSON object
     * @example
     * var exported = tree.toJSON()
     * //=JSON object
     */
    tree.toJSON = function () {
        return rbush.prototype.toJSON.call(this);
    };

    /**
     * [fromJSON](https://github.com/mourner/rbush#export-and-import)
     *
     * @param {any} json import previously exported data
     * @returns {RBush} GeoJSON RBush
     * @example
     * var exported = {
     *   "children": [
     *     {
     *       "type": "Feature",
     *       "geometry": {
     *         "type": "Point",
     *         "coordinates": [110, 50]
     *       },
     *       "properties": {},
     *       "bbox": [110, 50, 110, 50]
     *     }
     *   ],
     *   "height": 1,
     *   "leaf": true,
     *   "minX": 110,
     *   "minY": 50,
     *   "maxX": 110,
     *   "maxY": 50
     * }
     * tree.fromJSON(exported)
     */
    tree.fromJSON = function (json) {
        return rbush.prototype.fromJSON.call(this, json);
    };

    /**
     * Converts GeoJSON to {minX, minY, maxX, maxY} schema
     *
     * @private
     * @param {BBox|FeatureCollectio|Feature<any>} geojson feature(s) to retrieve BBox from
     * @returns {Object} converted to {minX, minY, maxX, maxY}
     */
    tree.toBBox = function (geojson) {
        var bbox;
        if (geojson.bbox) bbox = geojson.bbox;
        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;
        else bbox = turfBBox(geojson);

        return {
            minX: bbox[0],
            minY: bbox[1],
            maxX: bbox[2],
            maxY: bbox[3]
        };
    };
    return tree;
};

/**
 * Takes a bbox and returns an equivalent {@link Polygon|polygon}.
 *
 * @private
 * @name bboxPolygon
 * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @returns {Feature<Polygon>} a Polygon representation of the bounding box
 * @example
 * var bbox = [0, 0, 10, 10];
 *
 * var poly = turf.bboxPolygon(bbox);
 *
 * //addToMap
 * var addToMap = [poly]
 */
function bboxPolygon(bbox) {
    var lowLeft = [bbox[0], bbox[1]];
    var topLeft = [bbox[0], bbox[3]];
    var topRight = [bbox[2], bbox[3]];
    var lowRight = [bbox[2], bbox[1]];
    var coordinates = [[lowLeft, lowRight, topRight, topLeft, lowLeft]];

    return {
        type: 'Feature',
        bbox: bbox,
        properties: {},
        geometry: {
            type: 'Polygon',
            coordinates: coordinates
        }
    };
}

/**
 * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
 *
 * @private
 * @name bbox
 * @param {FeatureCollection|Feature<any>} geojson input features
 * @returns {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @example
 * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
 * var bbox = turf.bbox(line);
 * var bboxPolygon = turf.bboxPolygon(bbox);
 *
 * //addToMap
 * var addToMap = [line, bboxPolygon]
 */
function turfBBox(geojson) {
    var bbox = [Infinity, Infinity, -Infinity, -Infinity];
    coordEach(geojson, function (coord) {
        if (bbox[0] > coord[0]) bbox[0] = coord[0];
        if (bbox[1] > coord[1]) bbox[1] = coord[1];
        if (bbox[2] < coord[0]) bbox[2] = coord[0];
        if (bbox[3] < coord[1]) bbox[3] = coord[1];
    });
    return bbox;
}


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var flattenEach = __webpack_require__(1).flattenEach;
var featureCollection = __webpack_require__(13).featureCollection;

/**
 * Flattens any {@link GeoJSON} to a {@link FeatureCollection} inspired by [geojson-flatten](https://github.com/tmcw/geojson-flatten).
 *
 * @name flatten
 * @param {FeatureCollection|Geometry|Feature<any>} geojson any valid GeoJSON Object
 * @returns {FeatureCollection<any>} all Multi-Geometries are flattened into single Features
 * @example
 * var multiGeometry = turf.multiPolygon([
 *   [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],
 *   [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],
 *   [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]
 * ]);
 *
 * var flatten = turf.flatten(multiGeometry);
 *
 * //addToMap
 * var addToMap = [flatten]
 */
module.exports = function (geojson) {
    if (!geojson) throw new Error('geojson is required');

    var results = [];
    flattenEach(geojson, function (feature) {
        results.push(feature);
    });
    return featureCollection(results);
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var getCoords = __webpack_require__(14).getCoords;
var helpers = __webpack_require__(13);
var lineString = helpers.lineString;
var multiLineString = helpers.multiLineString;
var featureCollection = helpers.featureCollection;

/**
 * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a {@link FeatureCollection} of {@link LineString|(Multi)LineString}.
 *
 * @name polygonToLineString
 * @param {Feature<Polygon|MultiPolygon>} polygon Feature to convert
 * @param {Object} [properties] translates GeoJSON properties to Feature
 * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString
 * @example
 * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);
 *
 * var line = turf.polygonToLineString(poly);
 *
 * //addToMap
 * var addToMap = [line];
 */
module.exports = function (polygon, properties) {
    var geom = getGeomType(polygon);
    var coords = getCoords(polygon);
    properties = properties || polygon.properties || {};

    if (!coords.length) throw new Error('polygon must contain coordinates');

    switch (geom) {
    case 'Polygon':
        return coordsToLine(coords, properties);
    case 'MultiPolygon':
        var lines = [];
        coords.forEach(function (coord) {
            lines.push(coordsToLine(coord, properties));
        });
        return featureCollection(lines);
    default:
        throw new Error('geom ' + geom + ' not supported');
    }
};

function coordsToLine(coords, properties) {
    if (coords.length > 1) return multiLineString(coords, properties);
    return lineString(coords[0], properties);
}

function getGeomType(feature) {
    return (feature.geometry) ? feature.geometry.type : feature.type;
}


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

// https://en.wikipedia.org/wiki/Rhumb_line
// http://www.movable-type.co.uk/scripts/latlong.html#rhumblines
var getCoord = __webpack_require__(14).getCoord;
var GeodesyLatLon = __webpack_require__(58).LatLonSpherical;

/**
 * Takes two {@link Point|points} and finds the bearing angle between them along a Rhumb line
 * i.e. the angle measured in degrees start the north line (0 degrees)
 *
 * @name rhumbBearing
 * @param {Geometry|Feature<Point>|Array<number>} start starting Point
 * @param {Geometry|Feature<Point>|Array<number>} end ending Point
 * @param {boolean} [final=false] calculates the final bearing if true
 * @returns {number} bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)
 * @example
 * var point1 = turf.point([-75.343, 39.984], {"marker-color": "#F00"});
 * var point2 = turf.point([-75.534, 39.123], {"marker-color": "#00F"});
 *
 * var bearing = turf.rhumbBearing(point1, point2);
 *
 * //addToMap
 * var addToMap = [point1, point2]
 * point1.properties.bearing = bearing
 * point2.properties.bearing = bearing
 */
module.exports = function (start, end, final) {
    // validation
    if (!start) throw new Error('start point is required');
    if (!end) throw new Error('end point is required');

    var coordsStart = getCoord(start);
    var coordsEnd = getCoord(end);
    var origin = new GeodesyLatLon(coordsStart[1], coordsStart[0]);
    var destination = new GeodesyLatLon(coordsEnd[1], coordsEnd[0]);
    var bear360;

    if (final) bear360 = destination.rhumbBearingTo(origin);
    else bear360 = origin.rhumbBearingTo(destination);

    var bear180 = (bear360 > 180) ? -(360 - bear360) : bear360;

    return bear180;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* npm main module */

exports.LatLonSpherical   = __webpack_require__(228);
exports.LatLonEllipsoidal = __webpack_require__(31);
// merge vincenty methods into LatLonEllipsoidal
var V = __webpack_require__(229);
for (var prop in V) exports.LatLonEllipsoidal[prop] = V[prop];
exports.LatLonVectors     = __webpack_require__(230);
exports.Vector3d          = __webpack_require__(59);
exports.Utm               = __webpack_require__(104);
exports.Mgrs              = __webpack_require__(231);
exports.OsGridRef         = __webpack_require__(232);
exports.Dms               = __webpack_require__(38);


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* Vector handling functions                                          (c) Chris Veness 2011-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-vector3d.html                               */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */




/**
 * Library of 3-d vector manipulation routines.
 *
 * In a geodesy context, these vectors may be used to represent:
 *  - n-vector representing a normal to point on Earth's surface
 *  - earth-centered, earth fixed vector (≡ Gade’s ‘p-vector’)
 *  - great circle normal to vector (on spherical earth model)
 *  - motion vector on Earth's surface
 *  - etc
 *
 * Functions return vectors as return results, so that operations can be chained.
 * @example var v = v1.cross(v2).dot(v3) // ≡ v1×v2⋅v3
 *
 * @module vector3d
 */


/**
 * Creates a 3-d vector.
 *
 * The vector may be normalised, or use x/y/z values for eg height relative to the sphere or
 * ellipsoid, distance from earth centre, etc.
 *
 * @constructor
 * @param {number} x - X component of vector.
 * @param {number} y - Y component of vector.
 * @param {number} z - Z component of vector.
 */
function Vector3d(x, y, z) {
    // allow instantiation without 'new'
    if (!(this instanceof Vector3d)) return new Vector3d(x, y, z);

    this.x = Number(x);
    this.y = Number(y);
    this.z = Number(z);
}


/**
 * Adds supplied vector to ‘this’ vector.
 *
 * @param   {Vector3d} v - Vector to be added to this vector.
 * @returns {Vector3d} Vector representing sum of this and v.
 */
Vector3d.prototype.plus = function(v) {
    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');

    return new Vector3d(this.x + v.x, this.y + v.y, this.z + v.z);
};


/**
 * Subtracts supplied vector from ‘this’ vector.
 *
 * @param   {Vector3d} v - Vector to be subtracted from this vector.
 * @returns {Vector3d} Vector representing difference between this and v.
 */
Vector3d.prototype.minus = function(v) {
    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');

    return new Vector3d(this.x - v.x, this.y - v.y, this.z - v.z);
};


/**
 * Multiplies ‘this’ vector by a scalar value.
 *
 * @param   {number}   x - Factor to multiply this vector by.
 * @returns {Vector3d} Vector scaled by x.
 */
Vector3d.prototype.times = function(x) {
    x = Number(x);

    return new Vector3d(this.x * x, this.y * x, this.z * x);
};


/**
 * Divides ‘this’ vector by a scalar value.
 *
 * @param   {number}   x - Factor to divide this vector by.
 * @returns {Vector3d} Vector divided by x.
 */
Vector3d.prototype.dividedBy = function(x) {
    x = Number(x);

    return new Vector3d(this.x / x, this.y / x, this.z / x);
};


/**
 * Multiplies ‘this’ vector by the supplied vector using dot (scalar) product.
 *
 * @param   {Vector3d} v - Vector to be dotted with this vector.
 * @returns {number} Dot product of ‘this’ and v.
 */
Vector3d.prototype.dot = function(v) {
    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');

    return this.x*v.x + this.y*v.y + this.z*v.z;
};


/**
 * Multiplies ‘this’ vector by the supplied vector using cross (vector) product.
 *
 * @param   {Vector3d} v - Vector to be crossed with this vector.
 * @returns {Vector3d} Cross product of ‘this’ and v.
 */
Vector3d.prototype.cross = function(v) {
    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');

    var x = this.y*v.z - this.z*v.y;
    var y = this.z*v.x - this.x*v.z;
    var z = this.x*v.y - this.y*v.x;

    return new Vector3d(x, y, z);
};


/**
 * Negates a vector to point in the opposite direction
 *
 * @returns {Vector3d} Negated vector.
 */
Vector3d.prototype.negate = function() {
    return new Vector3d(-this.x, -this.y, -this.z);
};


/**
 * Length (magnitude or norm) of ‘this’ vector
 *
 * @returns {number} Magnitude of this vector.
 */
Vector3d.prototype.length = function() {
    return Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);
};


/**
 * Normalizes a vector to its unit vector
 * – if the vector is already unit or is zero magnitude, this is a no-op.
 *
 * @returns {Vector3d} Normalised version of this vector.
 */
Vector3d.prototype.unit = function() {
    var norm = this.length();
    if (norm == 1) return this;
    if (norm == 0) return this;

    var x = this.x/norm;
    var y = this.y/norm;
    var z = this.z/norm;

    return new Vector3d(x, y, z);
};


/**
 * Calculates the angle between ‘this’ vector and supplied vector.
 *
 * @param   {Vector3d} v
 * @param   {Vector3d} [vSign] - If supplied (and out of plane of this and v), angle is signed +ve if
 *     this->v is clockwise looking along vSign, -ve in opposite direction (otherwise unsigned angle).
 * @returns {number} Angle (in radians) between this vector and supplied vector.
 */
Vector3d.prototype.angleTo = function(v, vSign) {
    if (!(v instanceof Vector3d)) throw new TypeError('v is not Vector3d object');

    var sinθ = this.cross(v).length();
    var cosθ = this.dot(v);

    if (vSign !== undefined) {
        if (!(vSign instanceof Vector3d)) throw new TypeError('vSign is not Vector3d object');
        // use vSign as reference to get sign of sinθ
        sinθ = this.cross(v).dot(vSign)<0 ? -sinθ : sinθ;
    }

    return Math.atan2(sinθ, cosθ);
};


/**
 * Rotates ‘this’ point around an axis by a specified angle.
 *
 * @param   {Vector3d} axis - The axis being rotated around.
 * @param   {number}   theta - The angle of rotation (in radians).
 * @returns {Vector3d} The rotated point.
 */
Vector3d.prototype.rotateAround = function(axis, theta) {
    if (!(axis instanceof Vector3d)) throw new TypeError('axis is not Vector3d object');

    // en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle
    // en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix
    var p1 = this.unit();
    var p = [ p1.x, p1.y, p1.z ]; // the point being rotated
    var a = axis.unit();          // the axis being rotated around
    var s = Math.sin(theta);
    var c = Math.cos(theta);
    // quaternion-derived rotation matrix
    var q = [
        [ a.x*a.x*(1-c) + c,     a.x*a.y*(1-c) - a.z*s, a.x*a.z*(1-c) + a.y*s],
        [ a.y*a.x*(1-c) + a.z*s, a.y*a.y*(1-c) + c,     a.y*a.z*(1-c) - a.x*s],
        [ a.z*a.x*(1-c) - a.y*s, a.z*a.y*(1-c) + a.x*s, a.z*a.z*(1-c) + c    ],
    ];
    // multiply q × p
    var qp = [0, 0, 0];
    for (var i=0; i<3; i++) {
        for (var j=0; j<3; j++) {
            qp[i] += q[i][j] * p[j];
        }
    }
    var p2 = new Vector3d(qp[0], qp[1], qp[2]);
    return p2;
    // qv en.wikipedia.org/wiki/Rodrigues'_rotation_formula...
};


/**
 * String representation of vector.
 *
 * @param   {number} [precision=3] - Number of decimal places to be used.
 * @returns {string} Vector represented as [x,y,z].
 */
Vector3d.prototype.toString = function(precision) {
    var p = (precision === undefined) ? 3 : Number(precision);

    var str = '[' + this.x.toFixed(p) + ',' + this.y.toFixed(p) + ',' + this.z.toFixed(p) + ']';

    return str;
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = Vector3d; // ≡ export default Vector3d


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

// https://en.wikipedia.org/wiki/Rhumb_line
// http://www.movable-type.co.uk/scripts/latlong.html#rhumblines
var helpers = __webpack_require__(13);
var getCoord = __webpack_require__(14).getCoord;
var GeodesyLatLon = __webpack_require__(58).LatLonSpherical;
var radiansToDistance = helpers.radiansToDistance;
var distanceToRadians = helpers.distanceToRadians;

/**
 * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,
 * miles, or kilometers.
 *
 * @name rhumbDistance
 * @param {Geometry|Feature<Point>|Array<number>} from origin point
 * @param {Geometry|Feature<Point>|Array<number>} to destination point
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * @returns {number} distance between the two points
 * @example
 * var from = turf.point([-75.343, 39.984]);
 * var to = turf.point([-75.534, 39.123]);
 *
 * var distance = turf.rhumbDistance(from, to, "miles");
 *
 * //addToMap
 * var addToMap = [from, to];
 * from.properties.distance = distance;
 * to.properties.distance = distance;
 */
module.exports = function (from, to, units) {
    // validation
    if (!from) throw new Error('from point is required');
    if (!to) throw new Error('to point is required');

    units = units || 'kilometers';

    var coordsFrom = getCoord(from);
    var coordsTo = getCoord(to);
    var origin = new GeodesyLatLon(coordsFrom[1], coordsFrom[0]);
    var destination = new GeodesyLatLon(coordsTo[1], coordsTo[0]);

    // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)
    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678
    destination[0] += (destination[0] - origin[0] > 180) ? -360 : (origin[0] - destination[0] > 180) ? 360 : 0;
    var distanceInMeters = origin.rhumbDistanceTo(destination);
    var distance = radiansToDistance(distanceToRadians(distanceInMeters, 'meters'), units);
    return distance;
};


/***/ }),
/* 61 */
/***/ (function(module, exports) {

/**
 * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
 *
 * @name feature
 * @param {Geometry} geometry input geometry
 * @param {Object} properties properties
 * @returns {FeatureCollection} a FeatureCollection of input features
 * @example
 * var geometry = {
 *      "type": "Point",
 *      "coordinates": [
 *        67.5,
 *        32.84267363195431
 *      ]
 *    }
 *
 * var feature = turf.feature(geometry);
 *
 * //=feature
 */
function feature(geometry, properties) {
    if (!geometry) throw new Error('No geometry passed');

    return {
        type: 'Feature',
        properties: properties || {},
        geometry: geometry
    };
}
module.exports.feature = feature;

/**
 * Takes coordinates and properties (optional) and returns a new {@link Point} feature.
 *
 * @name point
 * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
 * @param {Object=} properties an Object that is used as the {@link Feature}'s
 * properties
 * @returns {Feature<Point>} a Point feature
 * @example
 * var pt1 = turf.point([-75.343, 39.984]);
 *
 * //=pt1
 */
module.exports.point = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');
    if (coordinates.length === undefined) throw new Error('Coordinates must be an array');
    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');
    if (typeof coordinates[0] !== 'number' || typeof coordinates[1] !== 'number') throw new Error('Coordinates must numbers');

    return feature({
        type: 'Point',
        coordinates: coordinates
    }, properties);
};

/**
 * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.
 *
 * @name polygon
 * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
 * @param {Object=} properties a properties object
 * @returns {Feature<Polygon>} a Polygon feature
 * @throws {Error} throw an error if a LinearRing of the polygon has too few positions
 * or if a LinearRing of the Polygon does not have matching Positions at the
 * beginning & end.
 * @example
 * var polygon = turf.polygon([[
 *  [-2.275543, 53.464547],
 *  [-2.275543, 53.489271],
 *  [-2.215118, 53.489271],
 *  [-2.215118, 53.464547],
 *  [-2.275543, 53.464547]
 * ]], { name: 'poly1', population: 400});
 *
 * //=polygon
 */
module.exports.polygon = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    for (var i = 0; i < coordinates.length; i++) {
        var ring = coordinates[i];
        if (ring.length < 4) {
            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');
        }
        for (var j = 0; j < ring[ring.length - 1].length; j++) {
            if (ring[ring.length - 1][j] !== ring[0][j]) {
                throw new Error('First and last Position are not equivalent.');
            }
        }
    }

    return feature({
        type: 'Polygon',
        coordinates: coordinates
    }, properties);
};

/**
 * Creates a {@link LineString} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name lineString
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<LineString>} a LineString feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var linestring1 = turf.lineString([
 *   [-21.964416, 64.148203],
 *   [-21.956176, 64.141316],
 *   [-21.93901, 64.135924],
 *   [-21.927337, 64.136673]
 * ]);
 * var linestring2 = turf.lineString([
 *   [-21.929054, 64.127985],
 *   [-21.912918, 64.134726],
 *   [-21.916007, 64.141016],
 *   [-21.930084, 64.14446]
 * ], {name: 'line 1', distance: 145});
 *
 * //=linestring1
 *
 * //=linestring2
 */
module.exports.lineString = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'LineString',
        coordinates: coordinates
    }, properties);
};

/**
 * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
 *
 * @name featureCollection
 * @param {Feature[]} features input features
 * @returns {FeatureCollection} a FeatureCollection of input features
 * @example
 * var features = [
 *  turf.point([-75.343, 39.984], {name: 'Location A'}),
 *  turf.point([-75.833, 39.284], {name: 'Location B'}),
 *  turf.point([-75.534, 39.123], {name: 'Location C'})
 * ];
 *
 * var fc = turf.featureCollection(features);
 *
 * //=fc
 */
module.exports.featureCollection = function (features) {
    if (!features) throw new Error('No features passed');

    return {
        type: 'FeatureCollection',
        features: features
    };
};

/**
 * Creates a {@link Feature<MultiLineString>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiLineString
 * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<MultiLineString>} a MultiLineString feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
 *
 * //=multiLine
 *
 */
module.exports.multiLineString = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiLineString',
        coordinates: coordinates
    }, properties);
};

/**
 * Creates a {@link Feature<MultiPoint>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPoint
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<MultiPoint>} a MultiPoint feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPt = turf.multiPoint([[0,0],[10,10]]);
 *
 * //=multiPt
 *
 */
module.exports.multiPoint = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiPoint',
        coordinates: coordinates
    }, properties);
};


/**
 * Creates a {@link Feature<MultiPolygon>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPolygon
 * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<MultiPolygon>} a multipolygon feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
 *
 * //=multiPoly
 *
 */
module.exports.multiPolygon = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiPolygon',
        coordinates: coordinates
    }, properties);
};

/**
 * Creates a {@link Feature<GeometryCollection>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name geometryCollection
 * @param {Array<{Geometry}>} geometries an array of GeoJSON Geometries
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
 * @example
 * var pt = {
 *     "type": "Point",
 *       "coordinates": [100, 0]
 *     };
 * var line = {
 *     "type": "LineString",
 *     "coordinates": [ [101, 0], [102, 1] ]
 *   };
 * var collection = turf.geometryCollection([pt, line]);
 *
 * //=collection
 */
module.exports.geometryCollection = function (geometries, properties) {
    if (!geometries) throw new Error('No geometries passed');

    return feature({
        type: 'GeometryCollection',
        geometries: geometries
    }, properties);
};

var factors = {
    miles: 3960,
    nauticalmiles: 3441.145,
    degrees: 57.2957795,
    radians: 1,
    inches: 250905600,
    yards: 6969600,
    meters: 6373000,
    metres: 6373000,
    kilometers: 6373,
    kilometres: 6373,
    feet: 20908792.65
};

/*
 * Convert a distance measurement from radians to a more friendly unit.
 *
 * @name radiansToDistance
 * @param {number} distance in radians across the sphere
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} distance
 */
module.exports.radiansToDistance = function (radians, units) {
    var factor = factors[units || 'kilometers'];
    if (factor === undefined) throw new Error('Invalid unit');

    return radians * factor;
};

/*
 * Convert a distance measurement from a real-world unit into radians
 *
 * @name distanceToRadians
 * @param {number} distance in real units
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} radians
 */
module.exports.distanceToRadians = function (distance, units) {
    var factor = factors[units || 'kilometers'];
    if (factor === undefined) throw new Error('Invalid unit');

    return distance / factor;
};

/*
 * Convert a distance measurement from a real-world unit into degrees
 *
 * @name distanceToRadians
 * @param {number} distance in real units
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} degrees
 */
module.exports.distanceToDegrees = function (distance, units) {
    var factor = factors[units || 'kilometers'];
    if (factor === undefined) throw new Error('Invalid unit');

    return (distance / factor) * 57.2958;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inside = __webpack_require__(17),
    _require = __webpack_require__(13),
    point = _require.point;

/** Returns the direction of the point q relative to the vector p1 -> p2.
 * Implementation of geos::algorithm::CGAlgorithm::orientationIndex()
 * (same as geos::algorithm::CGAlgorithm::computeOrientation())
 *
 * @param {Number[]} p1 - the origin point of the vector
 * @param {Number[]} p2 - the final point of the vector
 * @param {Number[]} q - the point to compute the direction to
 *
 * @returns {Number} - 1 if q is ccw (left) from p1->p2,
 *    -1 if q is cw (right) from p1->p2,
 *     0 if q is colinear with p1->p2
 */
function orientationIndex(p1, p2, q) {
  var dx1 = p2[0] - p1[0],
      dy1 = p2[1] - p1[1],
      dx2 = q[0] - p2[0],
      dy2 = q[1] - p2[1];

  return Math.sign(dx1 * dy2 - dx2 * dy1);
}

/** Checks if two envelopes are equal.
 * The function assumes that the arguments are envelopes, i.e.: Rectangular polygon
 *
 * @param {Feature<Polygon>} env1 - Envelope
 * @param {Feature<Polygon>} env2 - Envelope
 * @returns {Boolean} - True if the envelopes are equal
 */
function envelopeIsEqual(env1, env2) {
  var envX1 = env1.geometry.coordinates.map(function (c) {
    return c[0];
  }),
      envY1 = env1.geometry.coordinates.map(function (c) {
    return c[1];
  }),
      envX2 = env2.geometry.coordinates.map(function (c) {
    return c[0];
  }),
      envY2 = env2.geometry.coordinates.map(function (c) {
    return c[1];
  });

  return Math.max(null, envX1) === Math.max(null, envX2) && Math.max(null, envY1) === Math.max(null, envY2) && Math.min(null, envX1) === Math.min(null, envX2) && Math.min(null, envY1) === Math.min(null, envY2);
}

/** Check if a envelope is contained in other one.
 * The function assumes that the arguments are envelopes, i.e.: Convex polygon
 * XXX: Envelopes are rectangular, checking if a point is inside a rectangule is something easy,
 * this could be further improved.
 *
 * @param {Feature<Polygon>} self - Envelope
 * @param {Feature<Polygon>} env - Envelope
 * @returns {Boolean} - True if env is contained in self
 */
function envelopeContains(self, env) {
  return env.geometry.coordinates[0].every(function (c) {
    return inside(point(c), self);
  });
}

/** Checks if two coordinates are equal.
 *
 * @param {Number[]} coord1 - First coordinate
 * @param {Number[]} coord2 - Second coordinate
 * @returns {Boolean} - True if coordinates are equal
 */
function coordinatesEqual(coord1, coord2) {
  return coord1[0] === coord2[0] && coord1[1] === coord2[1];
}

module.exports = {
  orientationIndex: orientationIndex,
  envelopeIsEqual: envelopeIsEqual,
  envelopeContains: envelopeContains,
  coordinatesEqual: coordinatesEqual
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var invariant = __webpack_require__(14);
var getCoords = invariant.getCoords;
var featureEach = __webpack_require__(1).featureEach;

/**
 * Takes a {@link Point} grid and returns a correspondent matrix {Array<Array<number>>}
 * of the 'property' values
 *
 * @name gridToMatrix
 * @param {FeatureCollection<Point>} grid of points
 * @param {string} [property='elevation'] the property name in `points` from which z-values will be pulled
 * @param {boolean} [flip=false] returns the matrix upside-down
 * @returns {Array<Array<number>>} matrix of property values
 * @example
 *   var pointGrid = require('@turf/point-grid');
 *   var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
 *   var cellSize = 3;
 *   var grid = pointGrid(extent, cellSize);
 *   // add a random property to each point between 0 and 60
 *   for (var i = 0; i < grid.features.length; i++) {
 *     grid.features[i].properties.elevation = (Math.random() * 60);
 *   }
 *   gridToMatrix(grid);
 *   //= [
 *     [ 1, 13, 10,  9, 10, 13, 18],
 *     [34,  8,  5,  4,  5,  8, 13],
 *     [10,  5,  2,  1,  2,  5,  4],
 *     [ 0,  4, 56, 19,  1,  4,  9],
 *     [10,  5,  2,  1,  2,  5, 10],
 *     [57,  8,  5,  4,  5,  0, 57],
 *     [ 3, 13, 10,  9,  5, 13, 18],
 *     [18, 13, 10,  9, 78, 13, 18]
 *   ]
 */
module.exports = function (grid, property, flip) {
    // validation
    invariant.collectionOf(grid, 'Point', 'input must contain Points');
    property = property || 'elevation';

    var pointsMatrix = sortPointsByLatLng(grid, flip);

    var matrix = [];

    // create property matrix from sorted points
    // looping order matters here
    for (var r = 0; r < pointsMatrix.length; r++) {
        var pointRow = pointsMatrix[r];
        var row = [];
        for (var c = 0; c < pointRow.length; c++) {
            var point = pointRow[c];
            // property exist
            if (point.properties[property]) {
                row.push(point.properties[property]);
            } else {
                row.push(0);
            }
        }
        matrix.push(row);
    }

    return matrix;
};

/**
 * Sorts points by latitude and longitude, creating a 2-dimensional array of points
 *
 * @private
 * @param {FeatureCollection<Point>} points GeoJSON Point features
 * @param {boolean} [flip=false] returns the matrix upside-down
 * @returns {Array<Array<Point>>} points by latitude and longitude
 */
function sortPointsByLatLng(points, flip) {
    var pointsByLatitude = {};

    // divide points by rows with the same latitude
    featureEach(points, function (point) {
        var lat = getCoords(point)[1];
        if (!pointsByLatitude[lat]) { pointsByLatitude[lat] = []; }
        pointsByLatitude[lat].push(point);
    });

    // sort points (with the same latitude) by longitude
    var orderedRowsByLatitude = Object.keys(pointsByLatitude).map(function (lat) {
        var row = pointsByLatitude[lat];
        var rowOrderedByLongitude = row.sort(function (a, b) {
            return getCoords(a)[0] - getCoords(b)[0];
        });
        return rowOrderedByLongitude;
    });

    // sort rows (of points with the same latitude) by latitude
    var pointMatrix = orderedRowsByLatitude.sort(function (a, b) {
        if (flip) {
            return getCoords(a[0])[1] - getCoords(b[0])[1];
        } else {
            return getCoords(b[0])[1] - getCoords(a[0])[1];
        }
    });
    return pointMatrix;
}


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
* @license GNU Affero General Public License.
* Copyright (c) 2015, 2015 Ronny Lorenz <ronny@tbi.univie.ac.at>
* v. 1.2.0
* https://github.com/RaumZeit/MarchingSquares.js
*/

(function (root, factory) {
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(111), __webpack_require__(112)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory(require('./marchingsquares-isobands'),require('./marchingsquares-isocontours'));
    } else {
        // Browser globals (root is window)
        root.MarchingSquaresJS = factory(
                                    (root.MarchingSquaresJS) ? root.MarchingSquaresJS.isoBands : null,
                                    (root.MarchingSquaresJS) ? root.MarchingSquaresJS.isoContours : null
                                  );
    }
}(this, function (isoBands, isoContours) {
  return {
      isoBands : (typeof isoBands === 'function') ? isoBands : (((typeof isoBands === 'object') && (typeof isoBands.isoBands === 'function')) ? isoBands.isoBands : null),
      isoContours: (typeof isoContours === 'function') ? isoContours : (((typeof isoContours === 'object') && (typeof isoContours.isoContours === 'function')) ? isoContours.isoContours : null)
  };
}));


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var each = __webpack_require__(1).coordEach,
    convexHull = __webpack_require__(113),
    polygon = __webpack_require__(13).polygon;

/**
 * Takes a {@link Feature} or a {@link FeatureCollection} and returns a convex hull {@link Polygon}.
 *
 * Internally this uses
 * the [convex-hull](https://github.com/mikolalysenko/convex-hull) module that
 * implements a [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).
 *
 * @name convex
 * @param {Feature|FeatureCollection} feature input Feature or FeatureCollection
 * @returns {Feature<Polygon>} a convex hull
 * @example
 * var points = turf.featureCollection([
 *   turf.point([10.195312, 43.755225]),
 *   turf.point([10.404052, 43.8424511]),
 *   turf.point([10.579833, 43.659924]),
 *   turf.point([10.360107, 43.516688]),
 *   turf.point([10.14038, 43.588348]),
 *   turf.point([10.195312, 43.755225])
 * ]);
 *
 * var hull = turf.convex(points);
 *
 * //addToMap
 * var addToMap = [points, hull]
 */
module.exports = function (feature) {
    var points = [];

    // Remove Z in coordinates because it breaks the convexHull algorithm
    each(feature, function (coord) {
        points.push([coord[0], coord[1]]);
    });

    var hull = convexHull(points);

    // Hull should have at least 3 different vertices in order to create a valid polygon
    if (hull.length >= 3) {
        var ring = [];
        for (var i = 0; i < hull.length; i++) {
            ring.push(points[hull[i][0]]);
        }
        ring.push(points[hull[hull.length - 1][1]]);
        return polygon([ring]);
    }
    return undefined;
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = twoProduct

var SPLITTER = +(Math.pow(2, 27) + 1.0)

function twoProduct(a, b, result) {
  var x = a * b

  var c = SPLITTER * a
  var abig = c - a
  var ahi = c - abig
  var alo = a - ahi

  var d = SPLITTER * b
  var bbig = d - b
  var bhi = d - bbig
  var blo = b - bhi

  var err1 = x - (ahi * bhi)
  var err2 = err1 - (alo * bhi)
  var err3 = err2 - (ahi * blo)

  var y = alo * blo - err3

  if(result) {
    result[0] = y
    result[1] = x
    return result
  }

  return [ y, x ]
}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

//http://en.wikipedia.org/wiki/Delaunay_triangulation
//https://github.com/ironwallaby/delaunay
var helpers = __webpack_require__(13);
var polygon = helpers.polygon;
var featurecollection = helpers.featureCollection;

/**
 * Takes a set of {@link Point|points} and creates a
 * [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),
 * or a TIN for short, returned as a collection of Polygons. These are often used
 * for developing elevation contour maps or stepped heat visualizations.
 *
 * If an optional z-value property is provided then it is added as properties called `a`, `b`,
 * and `c` representing its value at each of the points that represent the corners of the
 * triangle.
 *
 * @name tin
 * @param {FeatureCollection<Point>} points input points
 * @param {String} [z] name of the property from which to pull z values
 * This is optional: if not given, then there will be no extra data added to the derived triangles.
 * @returns {FeatureCollection<Polygon>} TIN output
 * @example
 * // generate some random point data
 * var points = turf.random('points', 30, {
 *   bbox: [50, 30, 70, 50]
 * });
 * // add a random property to each point between 0 and 9
 * for (var i = 0; i < points.features.length; i++) {
 *   points.features[i].properties.z = ~~(Math.random() * 9);
 * }
 * var tin = turf.tin(points, 'z');
 *
 * //addToMap
 * var addToMap = [tin, points]
 * for (var i = 0; i < tin.features.length; i++) {
 *   var properties  = tin.features[i].properties;
 *   properties.fill = '#' + properties.a + properties.b + properties.c;
 * }
 */
module.exports = function (points, z) {
    if (points.type !== 'FeatureCollection') throw new Error('points must be a FeatureCollection');
    //break down points
    var isPointZ = false;
    return featurecollection(triangulate(points.features.map(function (p) {
        var point = {
            x: p.geometry.coordinates[0],
            y: p.geometry.coordinates[1]
        };
        if (z) {
            point.z = p.properties[z];
        } else if (p.geometry.coordinates.length === 3) {
            isPointZ = true;
            point.z = p.geometry.coordinates[2];
        }
        return point;
    })).map(function (triangle) {

        var a = [triangle.a.x, triangle.a.y];
        var b = [triangle.b.x, triangle.b.y];
        var c = [triangle.c.x, triangle.c.y];
        var properties = {};

        // Add z coordinates to triangle points if user passed
        // them in that way otherwise add it as a property.
        if (isPointZ) {
            a.push(triangle.a.z);
            b.push(triangle.b.z);
            c.push(triangle.c.z);
        } else {
            properties = {
                a: triangle.a.z,
                b: triangle.b.z,
                c: triangle.c.z
            };
        }

        return polygon([[a, b, c, a]], properties);

    }));
};

function Triangle(a, b, c) {
    this.a = a;
    this.b = b;
    this.c = c;

    var A = b.x - a.x,
        B = b.y - a.y,
        C = c.x - a.x,
        D = c.y - a.y,
        E = A * (a.x + b.x) + B * (a.y + b.y),
        F = C * (a.x + c.x) + D * (a.y + c.y),
        G = 2 * (A * (c.y - b.y) - B * (c.x - b.x)),
        dx, dy;

    // If the points of the triangle are collinear, then just find the
    // extremes and use the midpoint as the center of the circumcircle.
    this.x = (D * E - B * F) / G;
    this.y = (A * F - C * E) / G;
    dx = this.x - a.x;
    dy = this.y - a.y;
    this.r = dx * dx + dy * dy;
}

function byX(a, b) {
    return b.x - a.x;
}

function dedup(edges) {
    var j = edges.length,
        a, b, i, m, n;

    outer:
  while (j) {
      b = edges[--j];
      a = edges[--j];
      i = j;
      while (i) {
          n = edges[--i];
          m = edges[--i];
          if ((a === m && b === n) || (a === n && b === m)) {
              edges.splice(j, 2);
              edges.splice(i, 2);
              j -= 2;
              continue outer;
          }
      }
  }
}

function triangulate(vertices) {
    // Bail if there aren't enough vertices to form any triangles.
    if (vertices.length < 3)
        return [];

    // Ensure the vertex array is in order of descending X coordinate
    // (which is needed to ensure a subquadratic runtime), and then find
    // the bounding box around the points.
    vertices.sort(byX);

    var i = vertices.length - 1,
        xmin = vertices[i].x,
        xmax = vertices[0].x,
        ymin = vertices[i].y,
        ymax = ymin,
        epsilon = 1e-12;

    var a,
        b,
        c,
        A,
        B,
        G;

    while (i--) {
        if (vertices[i].y < ymin)
            ymin = vertices[i].y;
        if (vertices[i].y > ymax)
            ymax = vertices[i].y;
    }

    //Find a supertriangle, which is a triangle that surrounds all the
    //vertices. This is used like something of a sentinel value to remove
    //cases in the main algorithm, and is removed before we return any
    // results.

    // Once found, put it in the "open" list. (The "open" list is for
    // triangles who may still need to be considered; the "closed" list is
    // for triangles which do not.)
    var dx = xmax - xmin,
        dy = ymax - ymin,
        dmax = (dx > dy) ? dx : dy,
        xmid = (xmax + xmin) * 0.5,
        ymid = (ymax + ymin) * 0.5,
        open = [
            new Triangle({
                x: xmid - 20 * dmax,
                y: ymid - dmax,
                __sentinel: true
            }, {
                x: xmid,
                y: ymid + 20 * dmax,
                __sentinel: true
            }, {
                x: xmid + 20 * dmax,
                y: ymid - dmax,
                __sentinel: true
            }
        )],
        closed = [],
        edges = [],
        j;

    // Incrementally add each vertex to the mesh.
    i = vertices.length;
    while (i--) {
        // For each open triangle, check to see if the current point is
        // inside it's circumcircle. If it is, remove the triangle and add
        // it's edges to an edge list.
        edges.length = 0;
        j = open.length;
        while (j--) {
            // If this point is to the right of this triangle's circumcircle,
            // then this triangle should never get checked again. Remove it
            // from the open list, add it to the closed list, and skip.
            dx = vertices[i].x - open[j].x;
            if (dx > 0 && dx * dx > open[j].r) {
                closed.push(open[j]);
                open.splice(j, 1);
                continue;
            }

            // If not, skip this triangle.
            dy = vertices[i].y - open[j].y;
            if (dx * dx + dy * dy > open[j].r)
                continue;

            // Remove the triangle and add it's edges to the edge list.
            edges.push(
        open[j].a, open[j].b,
        open[j].b, open[j].c,
        open[j].c, open[j].a
      );
            open.splice(j, 1);
        }

        // Remove any doubled edges.
        dedup(edges);

        // Add a new triangle for each edge.
        j = edges.length;
        while (j) {
            b = edges[--j];
            a = edges[--j];
            c = vertices[i];
            // Avoid adding colinear triangles (which have error-prone
            // circumcircles)
            A = b.x - a.x;
            B = b.y - a.y;
            G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));
            if (Math.abs(G) > epsilon) {
                open.push(new Triangle(a, b, c));
            }
        }
    }

    // Copy any remaining open triangles to the closed list, and then
    // remove any triangles that share a vertex with the supertriangle.
    Array.prototype.push.apply(closed, open);

    i = closed.length;
    while (i--)
        if (closed[i].a.__sentinel ||
      closed[i].b.__sentinel ||
      closed[i].c.__sentinel)
            closed.splice(i, 1);

    return closed;
}


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var area = __webpack_require__(42).geometry;
var geomReduce = __webpack_require__(1).geomReduce;

/**
 * Takes one or more features and returns their area in square meters.
 *
 * @name area
 * @param {FeatureCollection|Feature<any>} geojson input GeoJSON feature(s)
 * @returns {number} area in square meters
 * @example
 * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);
 *
 * var area = turf.area(polygon);
 *
 * //addToMap
 * var addToMap = [polygon]
 * polygon.properties.area = area
 */
module.exports = function (geojson) {
    return geomReduce(geojson, function (value, geometry) {
        return value + area(geometry);
    }, 0);
};


/***/ }),
/* 69 */
/***/ (function(module, exports) {

module.exports = function(ring){
  var sum = 0;
  var i = 1;
  var len = ring.length;
  var prev,cur;
  while(i<len){
    prev = cur||ring[0];
    cur = ring[i];
    sum += ((cur[0]-prev[0])*(cur[1]+prev[1]));
    i++;
  }
  return sum > 0;
}

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var bbox = __webpack_require__(10);
var bboxPolygon = __webpack_require__(71);

/**
 * Takes any number of features and returns a rectangular {@link Polygon} that encompasses all vertices.
 *
 * @name envelope
 * @param {FeatureCollection|Feature<any>} geojson input features
 * @returns {Feature<Polygon>} a rectangular Polygon feature that encompasses all vertices
 * @example
 * var features = turf.featureCollection([
 *   turf.point([-75.343, 39.984], {"name": "Location A"}),
 *   turf.point([-75.833, 39.284], {"name": "Location B"}),
 *   turf.point([-75.534, 39.123], {"name": "Location C"})
 * ]);
 *
 * var enveloped = turf.envelope(features);
 *
 * //addToMap
 * var addToMap = [features, enveloped];
 */
module.exports = function (geojson) {
    return bboxPolygon(bbox(geojson));
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var polygon = __webpack_require__(13).polygon;

/**
 * Takes a bbox and returns an equivalent {@link Polygon|polygon}.
 *
 * @name bboxPolygon
 * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @returns {Feature<Polygon>} a Polygon representation of the bounding box
 * @example
 * var bbox = [0, 0, 10, 10];
 *
 * var poly = turf.bboxPolygon(bbox);
 *
 * //addToMap
 * var addToMap = [poly]
 */
module.exports = function (bbox) {
    var lowLeft = [bbox[0], bbox[1]];
    var topLeft = [bbox[0], bbox[3]];
    var topRight = [bbox[2], bbox[3]];
    var lowRight = [bbox[2], bbox[1]];

    return polygon([[
        lowLeft,
        lowRight,
        topRight,
        topLeft,
        lowLeft
    ]]);
};


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return areaRingSum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return areaStream; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__stream__ = __webpack_require__(21);





var areaRingSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])();

var areaSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;

var areaStream = {
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonStart: function() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
  },
  sphere: function() {
    areaSum.add(__WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */]);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  lambda0 = lambda, cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi = phi / 2 + __WEBPACK_IMPORTED_MODULE_1__math__["q" /* quarterPi */]), sinPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi);
}

function areaPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  phi = phi / 2 + __WEBPACK_IMPORTED_MODULE_1__math__["q" /* quarterPi */]; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
      sinPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(adLambda),
      v = k * sdLambda * Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(adLambda);
  areaRingSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

/* harmony default export */ __webpack_exports__["c"] = (function(object) {
  areaSum.reset();
  Object(__WEBPACK_IMPORTED_MODULE_3__stream__["a" /* default */])(object, areaStream);
  return areaSum * 2;
});


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = circleStream;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cartesian__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constant__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rotation__ = __webpack_require__(34);





// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(radius),
      sinRadius = Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */];
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */];
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["g" /* spherical */])([cosRadius, -sinRadius * Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(t), -sinRadius * Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])(point), point[0] -= cosRadius;
  Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["e" /* cartesianNormalizeInPlace */])(point);
  var radius = Object(__WEBPACK_IMPORTED_MODULE_2__math__["b" /* acos */])(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */] - __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */]) % __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */];
}

/* harmony default export */ __webpack_exports__["b"] = (function() {
  var center = Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])([0, 0]),
      radius = Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(90),
      precision = Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(6),
      ring,
      rotate,
      stream = {point: point};

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= __WEBPACK_IMPORTED_MODULE_2__math__["h" /* degrees */], x[1] *= __WEBPACK_IMPORTED_MODULE_2__math__["h" /* degrees */];
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */],
        p = precision.apply(this, arguments) * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */];
    ring = [];
    rotate = Object(__WEBPACK_IMPORTED_MODULE_3__rotation__["b" /* rotateRadians */])(-c[0] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */], -c[1] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */], 0).invert;
    circleStream(stream, r, p, 1);
    c = {type: "Polygon", coordinates: [ring]};
    ring = rotate = null;
    return c;
  }

  circle.center = function(_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(+_), circle) : radius;
  };

  circle.precision = function(_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(+_), circle) : precision;
  };

  return circle;
});


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
});


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__noop__ = __webpack_require__(19);


/* harmony default export */ __webpack_exports__["a"] = (function() {
  var lines = [],
      line;
  return {
    point: function(x, y) {
      line.push([x, y]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
});


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pointEqual__ = __webpack_require__(77);


function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
/* harmony default export */ __webpack_exports__["a"] = (function(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function(segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n, p0 = segment[0], p1 = segment[n], x;

    // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.
    if (Object(__WEBPACK_IMPORTED_MODULE_0__pointEqual__["a" /* default */])(p0, p1)) {
      stream.lineStart();
      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
});

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);


/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(a[0] - b[0]) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] && Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(a[1] - b[1]) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */];
});


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export bisectRight */
/* unused harmony export bisectLeft */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bisector__ = __webpack_require__(79);



var ascendingBisect = Object(__WEBPACK_IMPORTED_MODULE_1__bisector__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */]);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
/* harmony default export */ __webpack_exports__["a"] = (bisectRight);


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(24);


/* harmony default export */ __webpack_exports__["a"] = (function(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
});

function ascendingComparator(f) {
  return function(d, x) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */])(f(d), x);
  };
}


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pair;
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
});

function pair(a, b) {
  return [a, b];
}


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__variance__ = __webpack_require__(82);


/* harmony default export */ __webpack_exports__["a"] = (function(array, f) {
  var v = Object(__WEBPACK_IMPORTED_MODULE_0__variance__["a" /* default */])(array, f);
  return v ? Math.sqrt(v) : v;
});


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(27);


/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
});


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
});


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return slice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return map; });
var array = Array.prototype;

var slice = array.slice;
var map = array.map;


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
});


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export tickIncrement */
/* harmony export (immutable) */ __webpack_exports__["a"] = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

/* unused harmony default export */ var _unused_webpack_default_export = (function(start, stop, count) {
  var reverse = stop < start,
      i = -1,
      n,
      ticks,
      step;

  if (reverse) n = start, start = stop, stop = n;

  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
});

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
});


/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
});


/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__min__ = __webpack_require__(88);


/* harmony default export */ __webpack_exports__["a"] = (function(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = Object(__WEBPACK_IMPORTED_MODULE_0__min__["a" /* default */])(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
});

function length(d) {
  return d.length;
}


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cartesian__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(15);




var sum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])();

/* harmony default export */ __webpack_exports__["a"] = (function(polygon, point) {
  var lambda = point[0],
      phi = point[1],
      normal = [Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(lambda), -Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(lambda), 0],
      angle = 0,
      winding = 0;

  sum.reset();

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = point0[0],
        phi0 = point0[1] / 2 + __WEBPACK_IMPORTED_MODULE_2__math__["q" /* quarterPi */],
        sinPhi0 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(phi0),
        cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = point1[0],
          phi1 = point1[1] / 2 + __WEBPACK_IMPORTED_MODULE_2__math__["q" /* quarterPi */],
          sinPhi1 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(phi1),
          cosPhi1 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */],
          k = sinPhi0 * sinPhi1;

      sum.add(Object(__WEBPACK_IMPORTED_MODULE_2__math__["e" /* atan2 */])(k * sign * Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(absDelta), cosPhi0 * cosPhi1 + k * Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(absDelta)));
      angle += antimeridian ? delta + sign * __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */] : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["c" /* cartesianCross */])(Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["a" /* cartesian */])(point0), Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["a" /* cartesian */])(point1));
        Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["e" /* cartesianNormalizeInPlace */])(arc);
        var intersection = Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["c" /* cartesianCross */])(normal, arc);
        Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["e" /* cartesianNormalizeInPlace */])(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * Object(__WEBPACK_IMPORTED_MODULE_2__math__["c" /* asin */])(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -__WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] || angle < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] && sum < -__WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */]) ^ (winding & 1);
});


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__length__ = __webpack_require__(92);


var coordinates = [null, null],
    object = {type: "LineString", coordinates: coordinates};

/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return Object(__WEBPACK_IMPORTED_MODULE_0__length__["a" /* default */])(object);
});


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__stream__ = __webpack_require__(21);





var lengthSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    lambda0,
    sinPhi0,
    cosPhi0;

var lengthStream = {
  sphere: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: lengthLineStart,
  lineEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonStart: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */]
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
}

function lengthPointFirst(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  lambda0 = lambda, sinPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi), cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  var sinPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
      cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
      delta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda - lambda0),
      cosDelta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(delta),
      sinDelta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["u" /* sqrt */])(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

/* harmony default export */ __webpack_exports__["a"] = (function(object) {
  lengthSum.reset();
  Object(__WEBPACK_IMPORTED_MODULE_3__stream__["a" /* default */])(object, lengthStream);
  return +lengthSum;
});


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__noop__ = __webpack_require__(19);


var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;

var boundsStream = {
  point: boundsPoint,
  lineStart: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  lineEnd: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  polygonStart: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  polygonEnd: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  result: function() {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

/* harmony default export */ __webpack_exports__["a"] = (boundsStream);


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__conicEqualArea__ = __webpack_require__(48);


/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__conicEqualArea__["b" /* default */])()
      .parallels([29.5, 45.5])
      .scale(1070)
      .translate([480, 250])
      .rotate([96, 0])
      .center([-0.6, 38.7]);
});


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__buffer__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__polygon__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__polygonContains__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_d3_array__ = __webpack_require__(45);






/* harmony default export */ __webpack_exports__["a"] = (function(pointVisible, clipLine, interpolate, start) {
  return function(rotate, sink) {
    var line = clipLine(sink),
        rotatedStart = rotate.invert(start[0], start[1]),
        ringBuffer = Object(__WEBPACK_IMPORTED_MODULE_0__buffer__["a" /* default */])(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = Object(__WEBPACK_IMPORTED_MODULE_4_d3_array__["a" /* merge */])(segments);
        var startInside = Object(__WEBPACK_IMPORTED_MODULE_3__polygonContains__["a" /* default */])(polygon, rotatedStart);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          Object(__WEBPACK_IMPORTED_MODULE_1__polygon__["a" /* default */])(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      var point = rotate(lambda, phi);
      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      var point = rotate(lambda, phi);
      line.point(point[0], point[1]);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      var point = rotate(lambda, phi);
      ringSink.point(point[0], point[1]);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i, n = ringSegments.length, m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
          sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
});

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] : __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - a[1])
       - ((b = b.x)[0] < 0 ? b[1] - __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] : __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - b[1]);
}


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = equirectangularRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(18);


function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */])(equirectangularRaw)
      .scale(152.63);
});


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var distance = __webpack_require__(16);
var segmentReduce = __webpack_require__(1).segmentReduce;

/**
 * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point|Point}'s distance are ignored.
 *
 * @name lineDistance
 * @param {FeatureCollection|Feature|Geometry} geojson GeoJSON to measure
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * @returns {number} length of GeoJSON
 * @example
 * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);
 * var length = turf.lineDistance(line, 'miles');
 *
 * //addToMap
 * var addToMap = [line];
 * line.properties.distance = length;
 */
module.exports = function lineDistance(geojson, units) {
    // Input Validation
    if (!geojson) throw new Error('geojson is required');

    // Calculate distance from 2-vertex line segements
    return segmentReduce(geojson, function (previousValue, segment) {
        var coords = segment.geometry.coordinates;
        return previousValue + distance(coords[0], coords[1], units);
    }, 0);
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var bearing = __webpack_require__(25);
var distance = __webpack_require__(16);
var destination = __webpack_require__(20);
var lineString = __webpack_require__(13).lineString;

/**
 * Takes a {@link LineString|line}, a specified distance along the line to a start {@link Point},
 * and a specified  distance along the line to a stop point
 * and returns a subsection of the line in-between those points.
 *
 * This can be useful for extracting only the part of a route between two distances.
 *
 * @name lineSliceAlong
 * @param {Feature<LineString>|LineString} line input line
 * @param {number} startDist distance along the line to starting point
 * @param {number} stopDist distance along the line to ending point
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * @returns {Feature<LineString>} sliced line
 * @example
 * var line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);
 * var start = 12.5;
 * var stop = 25;
 * var sliced = turf.lineSliceAlong(line, start, stop, 'miles');
 *
 * //addToMap
 * var addToMap = [line, start, stop, sliced]
 */
module.exports = function (line, startDist, stopDist, units) {
    var coords;
    var slice = [];
    if (line.type === 'Feature') coords = line.geometry.coordinates;
    else if (line.type === 'LineString') coords = line.coordinates;
    else throw new Error('input must be a LineString Feature or Geometry');

    var travelled = 0;
    var overshot, direction, interpolated;
    for (var i = 0; i < coords.length; i++) {
        if (startDist >= travelled && i === coords.length - 1) break;
        else if (travelled > startDist && slice.length === 0) {
            overshot = startDist - travelled;
            if (!overshot) {
                slice.push(coords[i]);
                return lineString(slice);
            }
            direction = bearing(coords[i], coords[i - 1]) - 180;
            interpolated = destination(coords[i], overshot, direction, units);
            slice.push(interpolated.geometry.coordinates);
        }

        if (travelled >= stopDist) {
            overshot = stopDist - travelled;
            if (!overshot) {
                slice.push(coords[i]);
                return lineString(slice);
            }
            direction = bearing(coords[i], coords[i - 1]) - 180;
            interpolated = destination(coords[i], overshot, direction, units);
            slice.push(interpolated.geometry.coordinates);
            return lineString(slice);
        }

        if (travelled >= startDist) {
            slice.push(coords[i]);
        }

        if (i === coords.length - 1) {
            return lineString(slice);
        }

        travelled += distance(coords[i], coords[i + 1], units);
    }
    return lineString(coords[coords.length - 1]);
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var distance = __webpack_require__(16);
var turfBBox = __webpack_require__(10);
var helpers = __webpack_require__(13);
var point = helpers.point;
var polygon = helpers.polygon;
var featureCollection = helpers.featureCollection;

/**
 * Creates a square grid from a bounding box, {@link Feature} or {@link FeatureCollection}.
 *
 * @name squareGrid
 * @param {Array<number>|FeatureCollection|Feature<any>} bbox extent in [minX, minY, maxX, maxY] order
 * @param {number} cellSize width of each cell
 * @param {string} [units=kilometers] used in calculating cellSize, can be degrees, radians, miles, or kilometers
 * @param {boolean} [completelyWithin=false] adjust width & height cellSize to fit exactly within bbox
 * @returns {FeatureCollection<Polygon>} grid a grid of polygons
 * @example
 * var bbox = [-95, 30 ,-85, 40];
 * var cellSize = 50;
 * var units = 'miles';
 *
 * var squareGrid = turf.squareGrid(bbox, cellSize, units);
 *
 * //addToMap
 * var addToMap = [squareGrid]
 */
module.exports = function squareGrid(bbox, cellSize, units, completelyWithin) {
    var results = [];

    // validation
    if (!bbox) throw new Error('bbox is required');
    if (!Array.isArray(bbox)) bbox = turfBBox(bbox); // Convert GeoJSON to bbox
    if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');

    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];

    // distance
    var xDistance = distance(point([west, south]), point([east, south]), units);
    var yDistance = distance(point([west, south]), point([west, north]), units);

    // rows & columns
    var columns = Math.ceil(xDistance / cellSize);
    var rows = Math.ceil(yDistance / cellSize);

    // columns | width | x
    var xFraction = cellSize / xDistance;
    var cellWidth = xFraction * (east - west);
    if (completelyWithin === true) cellWidth = cellWidth * ((xDistance / cellSize) / columns);

    // rows | height | y
    var yFraction = cellSize / yDistance;
    var cellHeight = yFraction * (north - south);
    if (completelyWithin === true) cellHeight = cellHeight * ((yDistance / cellSize) / rows);

    // iterate over columns & rows
    var currentX = west;
    for (var column = 0; column < columns; column++) {
        var currentY = south;
        for (var row = 0; row < rows; row++) {
            var cellPoly = polygon([[
                [currentX, currentY],
                [currentX, currentY + cellHeight],
                [currentX + cellWidth, currentY + cellHeight],
                [currentX + cellWidth, currentY],
                [currentX, currentY]
            ]]);
            results.push(cellPoly);

            currentY += cellHeight;
        }
        currentX += cellWidth;
    }
    return featureCollection(results);
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var coordEach = __webpack_require__(1).coordEach;

/**
 * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.
 *
 * @name truncate
 * @param {FeatureCollection|Feature<any>} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.
 * @param {number} [precision=6] coordinate decimal precision
 * @param {number} [coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)
 * @param {boolean} [mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
 * @returns {FeatureCollection|Feature<any>} layer with truncated geometry
 * @example
 * var point = turf.point([
 *     70.46923055566859,
 *     58.11088890802906,
 *     1508
 * ]);
 *
 * var truncated = turf.truncate(point);
 *
 * //addToMap
 * var addToMap = [truncated];
 */
module.exports = function (geojson, precision, coordinates, mutate) {
    // default params
    precision = (precision === undefined || precision === null || isNaN(precision)) ? 6 : precision;
    coordinates = (coordinates === undefined || coordinates === null || isNaN(coordinates)) ? 3 : coordinates;

    // validation
    if (!geojson) throw new Error('<geojson> is required');
    if (typeof precision !== 'number') throw new Error('<precision> must be a number');
    if (typeof coordinates !== 'number') throw new Error('<coordinates> must be a number');

    // prevent input mutation
    if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));

    var factor = Math.pow(10, precision);

    // Truncate Coordinates
    coordEach(geojson, function (coords) {
        truncate(coords, factor, coordinates);
    });
    return geojson;
};

/**
 * Truncate Coordinates - Mutates coordinates in place
 *
 * @private
 * @param {Array<any>} coords Geometry Coordinates
 * @param {number} factor rounding factor for coordinate decimal precision
 * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)
 * @returns {Array<any>} mutated coordinates
 */
function truncate(coords, factor, coordinates) {
    // Remove extra coordinates (usually elevation coordinates and more)
    if (coords.length > coordinates) coords.splice(coordinates, coords.length);

    // Truncate coordinate decimals
    for (var i = 0; i < coords.length; i++) {
        coords[i] = Math.round(coords[i] * factor) / factor;
    }
    return coords;
}


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(216);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var destination = __webpack_require__(20);
var circle = __webpack_require__(43);
var lineString = __webpack_require__(13).lineString;

/**
 * Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;
 * 0 bearing is North of center point, positive clockwise.
 *
 * @name lineArc
 * @param {Feature<Point>} center center point
 * @param {number} radius radius of the circle
 * @param {number} bearing1 angle, in decimal degrees, of the first radius of the arc
 * @param {number} bearing2 angle, in decimal degrees, of the second radius of the arc
 * @param {number} [steps=64] number of steps
 * @param {string} [units=kilometers] miles, kilometers, degrees, or radians
 * @returns {Feature<LineString>} line arc
 * @example
 * var center = turf.point([-75, 40]);
 * var radius = 5;
 * var bearing1 = 25;
 * var bearing2 = 47;
 *
 * var arc = turf.lineArc(center, radius, bearing1, bearing2);
 *
 * //addToMap
 * var addToMap = [center, arc]
 */
module.exports = function (center, radius, bearing1, bearing2, steps, units) {
    // validation
    if (!center) throw new Error('center is required');
    if (bearing1 === undefined || bearing1 === null) throw new Error('bearing1 is required');
    if (bearing2 === undefined || bearing2 === null) throw new Error('bearing2 is required');
    if (!radius) throw new Error('radius is required');

    // default params
    steps = steps || 64;

    var angle1 = convertAngleTo360(bearing1);
    var angle2 = convertAngleTo360(bearing2);
    var properties = center.properties;

    // handle angle parameters
    if (angle1 === angle2) {
        return lineString(circle(center, radius, steps, units).geometry.coordinates[0], properties);
    }
    var arcStartDegree = angle1;
    var arcEndDegree = (angle1 < angle2) ? angle2 : angle2 + 360;

    var alfa = arcStartDegree;
    var coordinates = [];
    var i = 0;

    while (alfa < arcEndDegree) {
        coordinates.push(destination(center, radius, alfa, units).geometry.coordinates);
        i++;
        alfa = arcStartDegree + i * 360 / steps;
    }
    if (alfa > arcEndDegree) {
        coordinates.push(destination(center, radius, arcEndDegree, units).geometry.coordinates);
    }
    return lineString(coordinates, properties);
};


/**
 * Takes any angle in  degrees
 * and returns a valid angle between 0-360 degrees
 *
 * @private
 * @param {number} alfa angle between -180-180 degrees
 * @returns {number} angle between 0-360 degrees
 */
function convertAngleTo360(alfa) {
    var beta = alfa % 360;
    if (beta < 0) {
        beta += 360;
    }
    return beta;
}


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var pSlice = Array.prototype.slice;
var objectKeys = __webpack_require__(225);
var isArguments = __webpack_require__(226);

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* UTM / WGS-84 Conversion Functions                                  (c) Chris Veness 2014-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong-utm-mgrs.html                                           */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-utm.html                                    */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


if (typeof module!='undefined' && module.exports) var LatLon = __webpack_require__(31); // ≡ import LatLon from 'latlon-ellipsoidal.js'


/**
 * Convert between Universal Transverse Mercator coordinates and WGS 84 latitude/longitude points.
 *
 * Method based on Karney 2011 ‘Transverse Mercator with an accuracy of a few nanometers’,
 * building on Krüger 1912 ‘Konforme Abbildung des Erdellipsoids in der Ebene’.
 *
 * @module   utm
 * @requires latlon-ellipsoidal
 */


/**
 * Creates a Utm coordinate object.
 *
 * @constructor
 * @param  {number} zone - UTM 6° longitudinal zone (1..60 covering 180°W..180°E).
 * @param  {string} hemisphere - N for northern hemisphere, S for southern hemisphere.
 * @param  {number} easting - Easting in metres from false easting (-500km from central meridian).
 * @param  {number} northing - Northing in metres from equator (N) or from false northing -10,000km (S).
 * @param  {LatLon.datum} [datum=WGS84] - Datum UTM coordinate is based on.
 * @param  {number} [convergence] - Meridian convergence (bearing of grid north clockwise from true
 *                  north), in degrees
 * @param  {number} [scale] - Grid scale factor
 * @throws {Error}  Invalid UTM coordinate
 *
 * @example
 *   var utmCoord = new Utm(31, 'N', 448251, 5411932);
 */
function Utm(zone, hemisphere, easting, northing, datum, convergence, scale) {
    if (!(this instanceof Utm)) { // allow instantiation without 'new'
        return new Utm(zone, hemisphere, easting, northing, datum, convergence, scale);
    }

    if (datum === undefined) datum = LatLon.datum.WGS84; // default if not supplied
    if (convergence === undefined) convergence = null;   // default if not supplied
    if (scale === undefined) scale = null;               // default if not supplied

    if (!(1<=zone && zone<=60)) throw new Error('Invalid UTM zone '+zone);
    if (!hemisphere.match(/[NS]/i)) throw new Error('Invalid UTM hemisphere '+hemisphere);
    // range-check easting/northing (with 40km overlap between zones) - is this worthwhile?
    //if (!(120e3<=easting && easting<=880e3)) throw new Error('Invalid UTM easting '+ easting);
    //if (!(0<=northing && northing<=10000e3)) throw new Error('Invalid UTM northing '+ northing);

    this.zone = Number(zone);
    this.hemisphere = hemisphere.toUpperCase();
    this.easting = Number(easting);
    this.northing = Number(northing);
    this.datum = datum;
    this.convergence = convergence===null ? null : Number(convergence);
    this.scale = scale===null ? null : Number(scale);
}


/**
 * Converts latitude/longitude to UTM coordinate.
 *
 * Implements Karney’s method, using Krüger series to order n^6, giving results accurate to 5nm for
 * distances up to 3900km from the central meridian.
 *
 * @returns {Utm}   UTM coordinate.
 * @throws  {Error} If point not valid, if point outside latitude range.
 *
 * @example
 *   var latlong = new LatLon(48.8582, 2.2945);
 *   var utmCoord = latlong.toUtm(); // utmCoord.toString(): '31 N 448252 5411933'
 */
LatLon.prototype.toUtm = function() {
    if (isNaN(this.lat) || isNaN(this.lon)) throw new Error('Invalid point');
    if (!(-80<this.lat && this.lat<84)) throw new Error('Outside UTM limits ('+this.lat+','+this.lon+')');

    var falseEasting = 500e3, falseNorthing = 10000e3;

    var zone = Math.floor((this.lon+180)/6) + 1; // longitudinal zone
    var λ0 = ((zone-1)*6 - 180 + 3).toRadians(); // longitude of central meridian

    // ---- handle Norway/Svalbard exceptions
    // grid zones are 8° tall; 0°N is offset 10 into latitude bands array
    var mgrsLatBands = 'CDEFGHJKLMNPQRSTUVWXX'; // X is repeated for 80-84°N
    var latBand = mgrsLatBands.charAt(Math.floor(this.lat/8+10));
    // adjust zone & central meridian for Norway
    if (zone==31 && latBand=='V' && this.lon>= 3) { zone++; λ0 += (6).toRadians(); }
    // adjust zone & central meridian for Svalbard
    if (zone==32 && latBand=='X' && this.lon<  9) { zone--; λ0 -= (6).toRadians(); }
    if (zone==32 && latBand=='X' && this.lon>= 9) { zone++; λ0 += (6).toRadians(); }
    if (zone==34 && latBand=='X' && this.lon< 21) { zone--; λ0 -= (6).toRadians(); }
    if (zone==34 && latBand=='X' && this.lon>=21) { zone++; λ0 += (6).toRadians(); }
    if (zone==36 && latBand=='X' && this.lon< 33) { zone--; λ0 -= (6).toRadians(); }
    if (zone==36 && latBand=='X' && this.lon>=33) { zone++; λ0 += (6).toRadians(); }

    var φ = this.lat.toRadians();      // latitude ± from equator
    var λ = this.lon.toRadians() - λ0; // longitude ± from central meridian

    var a = this.datum.ellipsoid.a, f = this.datum.ellipsoid.f;
    // WGS 84: a = 6378137, b = 6356752.314245, f = 1/298.257223563;

    var k0 = 0.9996; // UTM scale on the central meridian

    // ---- easting, northing: Karney 2011 Eq 7-14, 29, 35:

    var e = Math.sqrt(f*(2-f)); // eccentricity
    var n = f / (2 - f);        // 3rd flattening
    var n2 = n*n, n3 = n*n2, n4 = n*n3, n5 = n*n4, n6 = n*n5; // TODO: compare Horner-form accuracy?

    var cosλ = Math.cos(λ), sinλ = Math.sin(λ), tanλ = Math.tan(λ);

    var τ = Math.tan(φ); // τ ≡ tanφ, τʹ ≡ tanφʹ; prime (ʹ) indicates angles on the conformal sphere
    var σ = Math.sinh(e*Math.atanh(e*τ/Math.sqrt(1+τ*τ)));

    var τʹ = τ*Math.sqrt(1+σ*σ) - σ*Math.sqrt(1+τ*τ);

    var ξʹ = Math.atan2(τʹ, cosλ);
    var ηʹ = Math.asinh(sinλ / Math.sqrt(τʹ*τʹ + cosλ*cosλ));

    var A = a/(1+n) * (1 + 1/4*n2 + 1/64*n4 + 1/256*n6); // 2πA is the circumference of a meridian

    var α = [ null, // note α is one-based array (6th order Krüger expressions)
        1/2*n - 2/3*n2 + 5/16*n3 +   41/180*n4 -     127/288*n5 +      7891/37800*n6,
              13/48*n2 -  3/5*n3 + 557/1440*n4 +     281/630*n5 - 1983433/1935360*n6,
                       61/240*n3 -  103/140*n4 + 15061/26880*n5 +   167603/181440*n6,
                               49561/161280*n4 -     179/168*n5 + 6601661/7257600*n6,
                                                 34729/80640*n5 - 3418889/1995840*n6,
                                                              212378941/319334400*n6 ];

    var ξ = ξʹ;
    for (var j=1; j<=6; j++) ξ += α[j] * Math.sin(2*j*ξʹ) * Math.cosh(2*j*ηʹ);

    var η = ηʹ;
    for (var j=1; j<=6; j++) η += α[j] * Math.cos(2*j*ξʹ) * Math.sinh(2*j*ηʹ);

    var x = k0 * A * η;
    var y = k0 * A * ξ;

    // ---- convergence: Karney 2011 Eq 23, 24

    var pʹ = 1;
    for (var j=1; j<=6; j++) pʹ += 2*j*α[j] * Math.cos(2*j*ξʹ) * Math.cosh(2*j*ηʹ);
    var qʹ = 0;
    for (var j=1; j<=6; j++) qʹ += 2*j*α[j] * Math.sin(2*j*ξʹ) * Math.sinh(2*j*ηʹ);

    var γʹ = Math.atan(τʹ / Math.sqrt(1+τʹ*τʹ)*tanλ);
    var γʺ = Math.atan2(qʹ, pʹ);

    var γ = γʹ + γʺ;

    // ---- scale: Karney 2011 Eq 25

    var sinφ = Math.sin(φ);
    var kʹ = Math.sqrt(1 - e*e*sinφ*sinφ) * Math.sqrt(1 + τ*τ) / Math.sqrt(τʹ*τʹ + cosλ*cosλ);
    var kʺ = A / a * Math.sqrt(pʹ*pʹ + qʹ*qʹ);

    var k = k0 * kʹ * kʺ;

    // ------------

    // shift x/y to false origins
    x = x + falseEasting;             // make x relative to false easting
    if (y < 0) y = y + falseNorthing; // make y in southern hemisphere relative to false northing

    // round to reasonable precision
    x = Number(x.toFixed(6)); // nm precision
    y = Number(y.toFixed(6)); // nm precision
    var convergence = Number(γ.toDegrees().toFixed(9));
    var scale = Number(k.toFixed(12));

    var h = this.lat>=0 ? 'N' : 'S'; // hemisphere

    return new Utm(zone, h, x, y, this.datum, convergence, scale);
};


/**
 * Converts UTM zone/easting/northing coordinate to latitude/longitude
 *
 * @param   {Utm}    utmCoord - UTM coordinate to be converted to latitude/longitude.
 * @returns {LatLon} Latitude/longitude of supplied grid reference.
 *
 * @example
 *   var grid = new Utm(31, 'N', 448251.795, 5411932.678);
 *   var latlong = grid.toLatLonE(); // latlong.toString(): 48°51′29.52″N, 002°17′40.20″E
 */
Utm.prototype.toLatLonE = function() {
    var z = this.zone;
    var h = this.hemisphere;
    var x = this.easting;
    var y = this.northing;

    if (isNaN(z) || isNaN(x) || isNaN(y)) throw new Error('Invalid coordinate');

    var falseEasting = 500e3, falseNorthing = 10000e3;

    var a = this.datum.ellipsoid.a, f = this.datum.ellipsoid.f;
    // WGS 84:  a = 6378137, b = 6356752.314245, f = 1/298.257223563;

    var k0 = 0.9996; // UTM scale on the central meridian

    x = x - falseEasting;               // make x ± relative to central meridian
    y = h=='S' ? y - falseNorthing : y; // make y ± relative to equator

    // ---- from Karney 2011 Eq 15-22, 36:

    var e = Math.sqrt(f*(2-f)); // eccentricity
    var n = f / (2 - f);        // 3rd flattening
    var n2 = n*n, n3 = n*n2, n4 = n*n3, n5 = n*n4, n6 = n*n5;

    var A = a/(1+n) * (1 + 1/4*n2 + 1/64*n4 + 1/256*n6); // 2πA is the circumference of a meridian

    var η = x / (k0*A);
    var ξ = y / (k0*A);

    var β = [ null, // note β is one-based array (6th order Krüger expressions)
        1/2*n - 2/3*n2 + 37/96*n3 -    1/360*n4 -   81/512*n5 +    96199/604800*n6,
               1/48*n2 +  1/15*n3 - 437/1440*n4 +   46/105*n5 - 1118711/3870720*n6,
                        17/480*n3 -   37/840*n4 - 209/4480*n5 +      5569/90720*n6,
                                 4397/161280*n4 -   11/504*n5 -  830251/7257600*n6,
                                               4583/161280*n5 -  108847/3991680*n6,
                                                             20648693/638668800*n6 ];

    var ξʹ = ξ;
    for (var j=1; j<=6; j++) ξʹ -= β[j] * Math.sin(2*j*ξ) * Math.cosh(2*j*η);

    var ηʹ = η;
    for (var j=1; j<=6; j++) ηʹ -= β[j] * Math.cos(2*j*ξ) * Math.sinh(2*j*η);

    var sinhηʹ = Math.sinh(ηʹ);
    var sinξʹ = Math.sin(ξʹ), cosξʹ = Math.cos(ξʹ);

    var τʹ = sinξʹ / Math.sqrt(sinhηʹ*sinhηʹ + cosξʹ*cosξʹ);

    var τi = τʹ;
    do {
        var σi = Math.sinh(e*Math.atanh(e*τi/Math.sqrt(1+τi*τi)));
        var τiʹ = τi * Math.sqrt(1+σi*σi) - σi * Math.sqrt(1+τi*τi);
        var δτi = (τʹ - τiʹ)/Math.sqrt(1+τiʹ*τiʹ)
            * (1 + (1-e*e)*τi*τi) / ((1-e*e)*Math.sqrt(1+τi*τi));
        τi += δτi;
    } while (Math.abs(δτi) > 1e-12); // using IEEE 754 δτi -> 0 after 2-3 iterations
    // note relatively large convergence test as δτi toggles on ±1.12e-16 for eg 31 N 400000 5000000
    var τ = τi;

    var φ = Math.atan(τ);

    var λ = Math.atan2(sinhηʹ, cosξʹ);

    // ---- convergence: Karney 2011 Eq 26, 27

    var p = 1;
    for (var j=1; j<=6; j++) p -= 2*j*β[j] * Math.cos(2*j*ξ) * Math.cosh(2*j*η);
    var q = 0;
    for (var j=1; j<=6; j++) q += 2*j*β[j] * Math.sin(2*j*ξ) * Math.sinh(2*j*η);

    var γʹ = Math.atan(Math.tan(ξʹ) * Math.tanh(ηʹ));
    var γʺ = Math.atan2(q, p);

    var γ = γʹ + γʺ;

    // ---- scale: Karney 2011 Eq 28

    var sinφ = Math.sin(φ);
    var kʹ = Math.sqrt(1 - e*e*sinφ*sinφ) * Math.sqrt(1 + τ*τ) * Math.sqrt(sinhηʹ*sinhηʹ + cosξʹ*cosξʹ);
    var kʺ = A / a / Math.sqrt(p*p + q*q);

    var k = k0 * kʹ * kʺ;

    // ------------

    var λ0 = ((z-1)*6 - 180 + 3).toRadians(); // longitude of central meridian
    λ += λ0; // move λ from zonal to global coordinates

    // round to reasonable precision
    var lat = Number(φ.toDegrees().toFixed(11)); // nm precision (1nm = 10^-11°)
    var lon = Number(λ.toDegrees().toFixed(11)); // (strictly lat rounding should be φ⋅cosφ!)
    var convergence = Number(γ.toDegrees().toFixed(9));
    var scale = Number(k.toFixed(12));

    var latLong = new LatLon(lat, lon, this.datum);
    // ... and add the convergence and scale into the LatLon object ... wonderful JavaScript!
    latLong.convergence = convergence;
    latLong.scale = scale;

    return latLong;
};


/**
 * Parses string representation of UTM coordinate.
 *
 * A UTM coordinate comprises (space-separated)
 *  - zone
 *  - hemisphere
 *  - easting
 *  - northing.
 *
 * @param   {string} utmCoord - UTM coordinate (WGS 84).
 * @param   {Datum}  [datum=WGS84] - Datum coordinate is defined in (default WGS 84).
 * @returns {Utm}
 * @throws  {Error}  Invalid UTM coordinate.
 *
 * @example
 *   var utmCoord = Utm.parse('31 N 448251 5411932');
 *   // utmCoord: {zone: 31, hemisphere: 'N', easting: 448251, northing: 5411932 }
 */
Utm.parse = function(utmCoord, datum) {
    if (datum === undefined) datum = LatLon.datum.WGS84; // default if not supplied

    // match separate elements (separated by whitespace)
    utmCoord = utmCoord.trim().match(/\S+/g);

    if (utmCoord==null || utmCoord.length!=4) throw new Error('Invalid UTM coordinate ‘'+utmCoord+'’');

    var zone = utmCoord[0], hemisphere = utmCoord[1], easting = utmCoord[2], northing = utmCoord[3];

    return new Utm(zone, hemisphere, easting, northing, datum);
};


/**
 * Returns a string representation of a UTM coordinate.
 *
 * To distinguish from MGRS grid zone designators, a space is left between the zone and the
 * hemisphere.
 *
 * Note that UTM coordinates get rounded, not truncated (unlike MGRS grid references).
 *
 * @param   {number} [digits=0] - Number of digits to appear after the decimal point (3 ≡ mm).
 * @returns {string} A string representation of the coordinate.
 *
 * @example
 *   var utm = Utm.parse('31 N 448251 5411932').toString(4);  // 31 N 448251.0000 5411932.0000
 */
Utm.prototype.toString = function(digits) {
    digits = Number(digits||0); // default 0 if not supplied

    var z = this.zone<10 ? '0'+this.zone : this.zone; // leading zero
    var h = this.hemisphere;
    var e = this.easting;
    var n = this.northing;
    if (isNaN(z) || !h.match(/[NS]/) || isNaN(e) || isNaN(n)) return '';

    return z+' '+h+' '+e.toFixed(digits)+' '+n.toFixed(digits);
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Polyfill Math.sinh for old browsers / IE */
if (Math.sinh === undefined) {
    Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
    };
}

/** Polyfill Math.cosh for old browsers / IE */
if (Math.cosh === undefined) {
    Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
    };
}

/** Polyfill Math.tanh for old browsers / IE */
if (Math.tanh === undefined) {
    Math.tanh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
    };
}

/** Polyfill Math.asinh for old browsers / IE */
if (Math.asinh === undefined) {
    Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(1 + x*x));
    };
}

/** Polyfill Math.atanh for old browsers / IE */
if (Math.atanh === undefined) {
    Math.atanh = function(x) {
        return Math.log((1+x) / (1-x)) / 2;
    };
}

/** Polyfill String.trim for old browsers
 *  (q.v. blog.stevenlevithan.com/archives/faster-trim-javascript) */
if (String.prototype.trim === undefined) {
    String.prototype.trim = function() {
        return String(this).replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = Utm; // ≡ export default Utm


/***/ }),
/* 105 */
/***/ (function(module, exports) {

/**
 * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.
 *
 * @param {Array<any>|Geometry|Feature<Point>} obj any value
 * @returns {Array<number>} coordinates
 */
function getCoord(obj) {
    if (!obj) throw new Error('No obj passed');

    var coordinates = getCoords(obj);

    // getCoord() must contain at least two numbers (Point)
    if (coordinates.length > 1 &&
        typeof coordinates[0] === 'number' &&
        typeof coordinates[1] === 'number') {
        return coordinates;
    } else {
        throw new Error('Coordinate is not a valid Point');
    }
}

/**
 * Unwrap coordinates from a Feature, Geometry Object or an Array of numbers
 *
 * @param {Array<any>|Geometry|Feature<any>} obj any value
 * @returns {Array<any>} coordinates
 */
function getCoords(obj) {
    if (!obj) throw new Error('No obj passed');
    var coordinates;

    // Array of numbers
    if (obj.length) {
        coordinates = obj;

    // Geometry Object
    } else if (obj.coordinates) {
        coordinates = obj.coordinates;

    // Feature
    } else if (obj.geometry && obj.geometry.coordinates) {
        coordinates = obj.geometry.coordinates;
    }
    // Checks if coordinates contains a number
    if (coordinates) {
        containsNumber(coordinates);
        return coordinates;
    }
    throw new Error('No valid coordinates');
}

/**
 * Checks if coordinates contains a number
 *
 * @private
 * @param {Array<any>} coordinates GeoJSON Coordinates
 * @returns {boolean} true if Array contains a number
 */
function containsNumber(coordinates) {
    if (coordinates.length > 1 &&
        typeof coordinates[0] === 'number' &&
        typeof coordinates[1] === 'number') {
        return true;
    }
    if (coordinates[0].length) {
        return containsNumber(coordinates[0]);
    }
    throw new Error('coordinates must only contain numbers');
}

/**
 * Enforce expectations about types of GeoJSON objects for Turf.
 *
 * @alias geojsonType
 * @param {GeoJSON} value any GeoJSON object
 * @param {string} type expected GeoJSON type
 * @param {string} name name of calling function
 * @throws {Error} if value is not the expected type.
 */
function geojsonType(value, type, name) {
    if (!type || !name) throw new Error('type and name required');

    if (!value || value.type !== type) {
        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);
    }
}

/**
 * Enforce expectations about types of {@link Feature} inputs for Turf.
 * Internally this uses {@link geojsonType} to judge geometry types.
 *
 * @alias featureOf
 * @param {Feature} feature a feature with an expected geometry type
 * @param {string} type expected GeoJSON type
 * @param {string} name name of calling function
 * @throws {Error} error if value is not the expected type.
 */
function featureOf(feature, type, name) {
    if (!feature) throw new Error('No feature passed');
    if (!name) throw new Error('.featureOf() requires a name');
    if (!feature || feature.type !== 'Feature' || !feature.geometry) {
        throw new Error('Invalid input to ' + name + ', Feature with geometry required');
    }
    if (!feature.geometry || feature.geometry.type !== type) {
        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);
    }
}

/**
 * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.
 * Internally this uses {@link geojsonType} to judge geometry types.
 *
 * @alias collectionOf
 * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged
 * @param {string} type expected GeoJSON type
 * @param {string} name name of calling function
 * @throws {Error} if value is not the expected type.
 */
function collectionOf(featureCollection, type, name) {
    if (!featureCollection) throw new Error('No featureCollection passed');
    if (!name) throw new Error('.collectionOf() requires a name');
    if (!featureCollection || featureCollection.type !== 'FeatureCollection') {
        throw new Error('Invalid input to ' + name + ', FeatureCollection required');
    }
    for (var i = 0; i < featureCollection.features.length; i++) {
        var feature = featureCollection.features[i];
        if (!feature || feature.type !== 'Feature' || !feature.geometry) {
            throw new Error('Invalid input to ' + name + ', Feature with geometry required');
        }
        if (!feature.geometry || feature.geometry.type !== type) {
            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);
        }
    }
}

module.exports.geojsonType = geojsonType;
module.exports.collectionOf = collectionOf;
module.exports.featureOf = featureOf;
module.exports.getCoord = getCoord;
module.exports.getCoords = getCoords;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(62),
    orientationIndex = _require.orientationIndex,
    envelopeIsEqual = _require.envelopeIsEqual,
    envelopeContains = _require.envelopeContains,
    coordinatesEqual = _require.coordinatesEqual,
    _require2 = __webpack_require__(13),
    multiPoint = _require2.multiPoint,
    polygon = _require2.polygon,
    point = _require2.point,
    envelope = __webpack_require__(70),
    _inside = __webpack_require__(17);

/** Ring of edges which form a polygon.
 * The ring may be either an outer shell or a hole.
 *
 * This class is inspired in GEOS's geos::operation::polygonize::EdgeRing
 */


var EdgeRing = function () {
  function EdgeRing() {
    _classCallCheck(this, EdgeRing);

    this.edges = [];
    this.polygon = undefined; //< Caches Polygon representation
    this.envelope = undefined; //< Caches Envelope representation
  }

  /** Add an edge to the ring, inserting it in the last position.
   *
   * @param {Edge} edge - Edge to be inserted
   */


  _createClass(EdgeRing, [{
    key: 'push',
    value: function push(edge) {
      // Emulate Array getter ([]) behaviour
      this[this.edges.length] = edge;
      this.edges.push(edge);
      this.polygon = this.envelope = undefined;
    }

    /** Get Edge.
     *
     * @param {Number} i - Index
     * @returns {Edge} - Edge in the i position
     */

  }, {
    key: 'get',
    value: function get(i) {
      return this.edges[i];
    }

    /** Getter of length property.
     *
     * @returns {Number} - Length of the edge ring.
     */

  }, {
    key: 'forEach',


    /** Similar to Array.prototype.forEach for the list of Edges in the EdgeRing.
     *
     * @param {Function} f - The same function to be passed to Array.prototype.forEach
     */
    value: function forEach(f) {
      this.edges.forEach(f);
    }

    /** Similar to Array.prototype.map for the list of Edges in the EdgeRing.
     *
     * @param {Function} f - The same function to be passed to Array.prototype.map
     * @returns {Array} - The mapped values in the function
     */

  }, {
    key: 'map',
    value: function map(f) {
      return this.edges.map(f);
    }

    /** Similar to Array.prototype.some for the list of Edges in the EdgeRing.
     *
     * @param {Function} f - The same function to be passed to Array.prototype.some
     * @returns {Boolean} - True if an Edge check the condition
     */

  }, {
    key: 'some',
    value: function some(f) {
      return this.edges.some(f);
    }

    /** Check if the ring is valid in geomtry terms.
     * A ring must have either 0 or 4 or more points. The first and the last must be
     * equal (in 2D)
     * geos::geom::LinearRing::validateConstruction
     *
     * @returns {Boolean} - Validity of the EdgeRing
     */

  }, {
    key: 'isValid',
    value: function isValid() {
      // TODO: stub
      return true;
    }

    /** Tests whether this ring is a hole.
     * A ring is a hole if it is oriented counter-clockwise.
     * Similar implementation of geos::algorithm::CGAlgorithms::isCCW
     * @returns {Boolean} - true: if it is a hole
     */

  }, {
    key: 'isHole',
    value: function isHole() {
      var _this = this;

      // XXX: Assuming Ring is valid
      // Find highest point
      var hiIndex = this.edges.reduce(function (high, edge, i) {
        if (edge.from.coordinates[1] > _this.edges[high].from.coordinates[1]) high = i;
        return high;
      }, 0),
          iPrev = (hiIndex === 0 ? this.length : hiIndex) - 1,
          iNext = (hiIndex + 1) % this.length,
          disc = orientationIndex(this.edges[iPrev].from.coordinates, this.edges[hiIndex].from.coordinates, this.edges[iNext].from.coordinates);

      if (disc === 0) return this.edges[iPrev].from.coordinates[0] > this.edges[iNext].from.coordinates[0];
      return disc > 0;
    }

    /** Creates a MultiPoint representing the EdgeRing (discarts edges directions).
     * @returns {Feature<MultiPoint>} - Multipoint representation of the EdgeRing
     */

  }, {
    key: 'toMultiPoint',
    value: function toMultiPoint() {
      return multiPoint(this.edges.map(function (edge) {
        return edge.from.coordinates;
      }));
    }

    /** Creates a Polygon representing the EdgeRing.
     * @returns {Feature<Polygon>} - Polygon representation of the Edge Ring
     */

  }, {
    key: 'toPolygon',
    value: function toPolygon() {
      if (this.polygon) return this.polygon;
      var coordinates = this.edges.map(function (edge) {
        return edge.from.coordinates;
      });
      coordinates.push(this.edges[0].from.coordinates);
      return this.polygon = polygon([coordinates]);
    }

    /** Calculates the envelope of the EdgeRing.
     * @returns {Feature<Polygon>} - envelope
     */

  }, {
    key: 'getEnvelope',
    value: function getEnvelope() {
      if (this.envelope) return this.envelope;
      return this.envelope = envelope(this.toPolygon());
    }

    /**
     * `geos::operation::polygonize::EdgeRing::findEdgeRingContaining`
     *
     * @param {EdgeRing} testEdgeRing - EdgeRing to look in the list
     * @param {EdgeRing[]} shellList - List of EdgeRing in which to search
     *
     * @returns {EdgeRing} - EdgeRing which contains the testEdgeRing
     */

  }, {
    key: 'inside',


    /** Checks if the point is inside the edgeRing
     *
     * @param {Feature<Point>} point - Point to check if it is inside the edgeRing
     * @returns {Boolean} - True if it is inside, False otherwise
     */
    value: function inside(point) {
      return _inside(point, this.toPolygon());
    }
  }, {
    key: 'length',
    get: function get() {
      return this.edges.length;
    }
  }], [{
    key: 'findEdgeRingContaining',
    value: function findEdgeRingContaining(testEdgeRing, shellList) {
      var testEnvelope = testEdgeRing.getEnvelope();

      var minEnvelope = void 0,
          minShell = void 0;
      shellList.forEach(function (shell) {
        var tryEnvelope = shell.getEnvelope();

        if (minShell) minEnvelope = minShell.getEnvelope();

        // the hole envelope cannot equal the shell envelope
        if (envelopeIsEqual(tryEnvelope, testEnvelope)) return;

        if (envelopeContains(tryEnvelope, testEnvelope)) {
          var testPoint = testEdgeRing.map(function (edge) {
            return edge.from.coordinates;
          }).find(function (pt) {
            return !shell.some(function (edge) {
              return coordinatesEqual(pt, edge.from.coordinates);
            });
          });

          if (testPoint && shell.inside(point(testPoint))) {
            if (!minShell || envelopeContains(minEnvelope, tryEnvelope)) minShell = shell;
          }
        }
      });

      return minShell;
    }
  }]);

  return EdgeRing;
}();

module.exports = EdgeRing;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var helpers = __webpack_require__(13);
var invariant = __webpack_require__(14);
var getCoords = invariant.getCoords;
var getGeomType = invariant.getGeomType;

/**
 * Removes redundant coordinates from any GeoJSON Geometry.
 *
 * @name cleanCoords
 * @param {Geometry|Feature} geojson Feature or Geometry
 * @param {boolean} [mutate=false] allows GeoJSON input to be mutated
 * @returns {Geometry|Feature} the cleaned input Feature/Geometry
 * @example
 * var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);
 * var multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);
 *
 * turf.cleanCoords(line).geometry.coordinates;
 * //= [[0, 0], [0, 10]]
 *
 * turf.cleanCoords(multiPoint).geometry.coordinates;
 * //= [[0, 0], [2, 2]]
 */
module.exports = function (geojson, mutate) {
    if (!geojson) throw new Error('geojson is required');
    var type = getGeomType(geojson);

    // Store new "clean" points in this Array
    var newCoords = [];

    switch (type) {
    case 'LineString':
        newCoords = cleanCoords(geojson);
        break;
    case 'MultiLineString':
    case 'Polygon':
        getCoords(geojson).forEach(function (line) {
            newCoords.push(cleanCoords(line));
        });
        break;
    case 'MultiPolygon':
        getCoords(geojson).forEach(function (polygons) {
            var polyPoints = [];
            polygons.forEach(function (ring) {
                polyPoints.push(cleanCoords(ring));
            });
            newCoords.push(polyPoints);
        });
        break;
    case 'Point':
        return geojson;
    case 'MultiPoint':
        var existing = {};
        getCoords(geojson).forEach(function (coord) {
            var key = coord.join('-');
            if (!existing.hasOwnProperty(key)) {
                newCoords.push(coord);
                existing[key] = true;
            }
        });
        break;
    default:
        throw new Error(type + ' geometry not supported');
    }

    // Support input mutation
    if (geojson.coordinates) {
        if (mutate === true) {
            geojson.coordinates = newCoords;
            return geojson;
        }
        return geometry(geojson, type, newCoords);
    } else {
        if (mutate === true) {
            geojson.geometry.coordinates = newCoords;
            return geojson;
        }
        return feature(geojson, type, newCoords);
    }
};

/**
 * Create Geometry from existing Geometry
 *
 * @param {Geometry} geojson Existing Geometry
 * @param {string} type Geometry Type
 * @param {Array<number>} coordinates Coordinates
 * @returns {Geometry} Geometry
 */
function geometry(geojson, type, coordinates) {
    var geom = {
        type: type,
        coordinates: coordinates
    };
    if (geojson.bbox) geom.bbox = geojson.bbox;
    return geom;
}

/**
 * Create Feature from existing Feature
 *
 * @param {Feature} geojson Existing Feature
 * @param {string} type Feature Type
 * @param {Array<number>} coordinates Coordinates
 * @returns {Feature} Feature
 */
function feature(geojson, type, coordinates) {
    var feat = helpers.feature(geometry(geojson.geometry, type, coordinates), geojson.properties);
    if (geojson.id) feat.id = geojson.id;
    if (geojson.bbox) feat.bbox = geojson.bbox;
    return feat;
}

/**
 * Clean Coords
 *
 * @private
 * @param {Array<number>|LineString} line Line
 * @returns {Array<number>} Cleaned coordinates
 */
function cleanCoords(line) {
    var points = getCoords(line);
    // handle "clean" segment
    if (points.length === 2 && !equals(points[0], points[1])) return points;

    var prevPoint, point, nextPoint;
    var newPoints = [];
    var secondToLast = points.length - 1;

    newPoints.push(points[0]);
    for (var i = 1; i < secondToLast; i++) {
        prevPoint = points[i - 1];
        point = points[i];
        nextPoint = points[i + 1];

        if (!isPointOnLineSegment(prevPoint, nextPoint, point)) {
            newPoints.push(point);
        }
    }
    newPoints.push(nextPoint);
    return newPoints;
}

/**
 * Compares two points and returns if they are equals
 *
 * @private
 * @param {Array<number>} pt1 point
 * @param {Array<number>} pt2 point
 * @returns {boolean} true if they are equals
 */
function equals(pt1, pt2) {
    return pt1[0] === pt2[0] && pt1[1] === pt2[1];
}

/**
 * Returns if `point` is on the segment between `start` and `end`.
 * Borrowed from `@turf/boolean-point-on-line` to speed up the evaluation (instead of using the module as dependency)
 *
 * @private
 * @param {Array<number>} start coord pair of start of line
 * @param {Array<number>} end coord pair of end of line
 * @param {Array<number>} point coord pair of point to check
 * @returns {boolean} true/false
 */
function isPointOnLineSegment(start, end, point) {
    var x = point[0], y = point[1];
    var startX = start[0], startY = start[1];
    var endX = end[0], endY = end[1];

    var dxc = x - startX;
    var dyc = y - startY;
    var dxl = endX - startX;
    var dyl = endY - startY;
    var cross = dxc * dyl - dyc * dxl;

    if (cross !== 0) return false;
    else if (Math.abs(dxl) >= Math.abs(dyl)) return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;
    else return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;
}


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _turf = __webpack_require__(109);

function sendMessage(m) {
  postMessage({ message: m });
} /* jshint esversion:6 */

function sendProgress(m) {
  postMessage({ progress: m });
}
function sendEnd(m) {
  postMessage({ end: m });
}

// Inital message
postMessage({
  progress: 0,
  message: "start"
});

// handle message send from the main thread
onmessage = function onmessage(e) {
  var data = e.data;
  var out = 0;
  var g = data.geojson;
  var featuresLength = g.features.length;
  // get all abject in one
  sendMessage("Extracting geometry from " + featuresLength + " features ...");

  sendMessage("Combine " + featuresLength + " features ...");
  g = (0, _turf.combine)(g);

  sendMessage("Calculating enveloppe ...");
  g = (0, _turf.buffer)(g, 0);

  sendMessage("Clipping data to selected extent ...");
  g = (0, _turf.bboxClip)(g.features[0], data.bbox);

  sendMessage("Calculating area ...");
  out = (0, _turf.area)(g) * 1e-6;

  sendEnd(Math.round(out));
};

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_helpers__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_helpers___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__turf_invariant__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__turf_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__turf_meta__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__turf_meta___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__turf_meta__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__turf_isolines__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__turf_isolines___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__turf_isolines__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__turf_convex__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__turf_convex___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__turf_convex__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__turf_within__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__turf_within___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__turf_within__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__turf_concave__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__turf_concave___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__turf_concave__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__turf_difference__ = __webpack_require__(129);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__turf_difference___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__turf_difference__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__turf_dissolve__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__turf_dissolve___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__turf_dissolve__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__turf_collect__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__turf_collect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__turf_collect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__turf_flip__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__turf_flip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__turf_flip__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__turf_simplify__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__turf_simplify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__turf_simplify__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__turf_bezier__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__turf_bezier___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__turf_bezier__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__turf_tag__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__turf_tag___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__turf_tag__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__turf_sample__ = __webpack_require__(143);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__turf_sample___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14__turf_sample__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__turf_envelope__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__turf_envelope___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__turf_envelope__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__turf_square__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__turf_square___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__turf_square__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__turf_circle__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__turf_circle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17__turf_circle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__turf_midpoint__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__turf_midpoint___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18__turf_midpoint__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__turf_buffer__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__turf_buffer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19__turf_buffer__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__turf_center__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__turf_center___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20__turf_center__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__turf_center_of_mass__ = __webpack_require__(191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__turf_center_of_mass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21__turf_center_of_mass__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__turf_centroid__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__turf_centroid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22__turf_centroid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__turf_combine__ = __webpack_require__(192);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__turf_combine___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_23__turf_combine__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__turf_distance__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__turf_distance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_24__turf_distance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__turf_explode__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__turf_explode___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25__turf_explode__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__turf_bbox__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__turf_bbox___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_26__turf_bbox__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__turf_tesselate__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__turf_tesselate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_27__turf_tesselate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__turf_bbox_polygon__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__turf_bbox_polygon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_28__turf_bbox_polygon__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__turf_inside__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__turf_inside___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_29__turf_inside__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__turf_intersect__ = __webpack_require__(195);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__turf_intersect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_30__turf_intersect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__turf_nearest__ = __webpack_require__(196);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__turf_nearest___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_31__turf_nearest__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__turf_planepoint__ = __webpack_require__(197);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__turf_planepoint___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_32__turf_planepoint__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__turf_random__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__turf_random___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_33__turf_random__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__turf_tin__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__turf_tin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_34__turf_tin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__turf_union__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__turf_union___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_35__turf_union__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__turf_bearing__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__turf_bearing___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_36__turf_bearing__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__turf_destination__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__turf_destination___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_37__turf_destination__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__turf_kinks__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__turf_kinks___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_38__turf_kinks__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__turf_point_on_surface__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__turf_point_on_surface___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_39__turf_point_on_surface__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__turf_area__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__turf_area___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_40__turf_area__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__turf_along__ = __webpack_require__(202);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__turf_along___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_41__turf_along__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__turf_line_distance__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__turf_line_distance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_42__turf_line_distance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__turf_line_slice__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__turf_line_slice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_43__turf_line_slice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__turf_line_slice_along__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__turf_line_slice_along___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_44__turf_line_slice_along__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__turf_point_on_line__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__turf_point_on_line___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_45__turf_point_on_line__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__turf_point_grid__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__turf_point_grid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_46__turf_point_grid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__turf_square_grid__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__turf_square_grid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_47__turf_square_grid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__turf_triangle_grid__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__turf_triangle_grid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_48__turf_triangle_grid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__turf_hex_grid__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__turf_hex_grid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_49__turf_hex_grid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__turf_idw__ = __webpack_require__(207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__turf_idw___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_50__turf_idw__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__turf_truncate__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__turf_truncate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_51__turf_truncate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__turf_flatten__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__turf_flatten___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_52__turf_flatten__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__turf_line_intersect__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__turf_line_intersect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_53__turf_line_intersect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__turf_mask__ = __webpack_require__(208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__turf_mask___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_54__turf_mask__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__turf_line_chunk__ = __webpack_require__(209);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__turf_line_chunk___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_55__turf_line_chunk__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__turf_unkink_polygon__ = __webpack_require__(210);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__turf_unkink_polygon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_56__turf_unkink_polygon__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__turf_great_circle__ = __webpack_require__(218);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__turf_great_circle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_57__turf_great_circle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__turf_line_segment__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__turf_line_segment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_58__turf_line_segment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__turf_line_split__ = __webpack_require__(220);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__turf_line_split___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_59__turf_line_split__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__turf_line_arc__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__turf_line_arc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_60__turf_line_arc__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__turf_polygon_to_linestring__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__turf_polygon_to_linestring___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_61__turf_polygon_to_linestring__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__turf_linestring_to_polygon__ = __webpack_require__(221);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__turf_linestring_to_polygon___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_62__turf_linestring_to_polygon__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__turf_bbox_clip__ = __webpack_require__(222);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__turf_bbox_clip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_63__turf_bbox_clip__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__turf_line_overlap__ = __webpack_require__(224);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__turf_line_overlap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_64__turf_line_overlap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__turf_sector__ = __webpack_require__(227);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__turf_sector___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_65__turf_sector__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__turf_rhumb_bearing__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__turf_rhumb_bearing___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_66__turf_rhumb_bearing__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__turf_rhumb_distance__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__turf_rhumb_distance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_67__turf_rhumb_distance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__turf_rhumb_destination__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__turf_rhumb_destination___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_68__turf_rhumb_destination__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__turf_polygon_tangents__ = __webpack_require__(233);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__turf_polygon_tangents___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_69__turf_polygon_tangents__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__turf_rewind__ = __webpack_require__(234);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__turf_rewind___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_70__turf_rewind__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__turf_isobands__ = __webpack_require__(235);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__turf_isobands___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_71__turf_isobands__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__turf_transform_rotate__ = __webpack_require__(240);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__turf_transform_rotate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_72__turf_transform_rotate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__turf_transform_scale__ = __webpack_require__(241);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__turf_transform_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_73__turf_transform_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__turf_transform_translate__ = __webpack_require__(242);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__turf_transform_translate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_74__turf_transform_translate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__turf_line_offset__ = __webpack_require__(243);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__turf_line_offset___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_75__turf_line_offset__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_76__turf_polygonize__ = __webpack_require__(245);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_76__turf_polygonize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_76__turf_polygonize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_77__turf_boolean_disjoint__ = __webpack_require__(250);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_77__turf_boolean_disjoint___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_77__turf_boolean_disjoint__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_78__turf_boolean_contains__ = __webpack_require__(251);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_78__turf_boolean_contains___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_78__turf_boolean_contains__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_79__turf_boolean_crosses__ = __webpack_require__(252);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_79__turf_boolean_crosses___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_79__turf_boolean_crosses__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_80__turf_boolean_clockwise__ = __webpack_require__(253);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_80__turf_boolean_clockwise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_80__turf_boolean_clockwise__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_81__turf_boolean_equal__ = __webpack_require__(254);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_81__turf_boolean_equal___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_81__turf_boolean_equal__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_82__turf_clone__ = __webpack_require__(256);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_82__turf_clone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_82__turf_clone__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_83__turf_clean_coords__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_83__turf_clean_coords___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_83__turf_clean_coords__);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "isolines", function() { return __WEBPACK_IMPORTED_MODULE_3__turf_isolines__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "convex", function() { return __WEBPACK_IMPORTED_MODULE_4__turf_convex__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "within", function() { return __WEBPACK_IMPORTED_MODULE_5__turf_within__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "concave", function() { return __WEBPACK_IMPORTED_MODULE_6__turf_concave__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "difference", function() { return __WEBPACK_IMPORTED_MODULE_7__turf_difference__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "dissolve", function() { return __WEBPACK_IMPORTED_MODULE_8__turf_dissolve__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "collect", function() { return __WEBPACK_IMPORTED_MODULE_9__turf_collect__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return __WEBPACK_IMPORTED_MODULE_10__turf_flip__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "simplify", function() { return __WEBPACK_IMPORTED_MODULE_11__turf_simplify__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "bezier", function() { return __WEBPACK_IMPORTED_MODULE_12__turf_bezier__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "tag", function() { return __WEBPACK_IMPORTED_MODULE_13__turf_tag__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "sample", function() { return __WEBPACK_IMPORTED_MODULE_14__turf_sample__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "envelope", function() { return __WEBPACK_IMPORTED_MODULE_15__turf_envelope__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "square", function() { return __WEBPACK_IMPORTED_MODULE_16__turf_square__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "circle", function() { return __WEBPACK_IMPORTED_MODULE_17__turf_circle__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "midpoint", function() { return __WEBPACK_IMPORTED_MODULE_18__turf_midpoint__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return __WEBPACK_IMPORTED_MODULE_19__turf_buffer__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "center", function() { return __WEBPACK_IMPORTED_MODULE_20__turf_center__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "centerOfMass", function() { return __WEBPACK_IMPORTED_MODULE_21__turf_center_of_mass__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "centroid", function() { return __WEBPACK_IMPORTED_MODULE_22__turf_centroid__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "combine", function() { return __WEBPACK_IMPORTED_MODULE_23__turf_combine__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return __WEBPACK_IMPORTED_MODULE_24__turf_distance__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "explode", function() { return __WEBPACK_IMPORTED_MODULE_25__turf_explode__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "bbox", function() { return __WEBPACK_IMPORTED_MODULE_26__turf_bbox__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "tesselate", function() { return __WEBPACK_IMPORTED_MODULE_27__turf_tesselate__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "bboxPolygon", function() { return __WEBPACK_IMPORTED_MODULE_28__turf_bbox_polygon__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "inside", function() { return __WEBPACK_IMPORTED_MODULE_29__turf_inside__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "intersect", function() { return __WEBPACK_IMPORTED_MODULE_30__turf_intersect__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "nearest", function() { return __WEBPACK_IMPORTED_MODULE_31__turf_nearest__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "planepoint", function() { return __WEBPACK_IMPORTED_MODULE_32__turf_planepoint__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "random", function() { return __WEBPACK_IMPORTED_MODULE_33__turf_random__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "tin", function() { return __WEBPACK_IMPORTED_MODULE_34__turf_tin__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "union", function() { return __WEBPACK_IMPORTED_MODULE_35__turf_union__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "bearing", function() { return __WEBPACK_IMPORTED_MODULE_36__turf_bearing__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "destination", function() { return __WEBPACK_IMPORTED_MODULE_37__turf_destination__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "kinks", function() { return __WEBPACK_IMPORTED_MODULE_38__turf_kinks__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "pointOnSurface", function() { return __WEBPACK_IMPORTED_MODULE_39__turf_point_on_surface__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "area", function() { return __WEBPACK_IMPORTED_MODULE_40__turf_area__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "along", function() { return __WEBPACK_IMPORTED_MODULE_41__turf_along__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineDistance", function() { return __WEBPACK_IMPORTED_MODULE_42__turf_line_distance__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineSlice", function() { return __WEBPACK_IMPORTED_MODULE_43__turf_line_slice__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineSliceAlong", function() { return __WEBPACK_IMPORTED_MODULE_44__turf_line_slice_along__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "pointOnLine", function() { return __WEBPACK_IMPORTED_MODULE_45__turf_point_on_line__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "pointGrid", function() { return __WEBPACK_IMPORTED_MODULE_46__turf_point_grid__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "squareGrid", function() { return __WEBPACK_IMPORTED_MODULE_47__turf_square_grid__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "triangleGrid", function() { return __WEBPACK_IMPORTED_MODULE_48__turf_triangle_grid__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "hexGrid", function() { return __WEBPACK_IMPORTED_MODULE_49__turf_hex_grid__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "idw", function() { return __WEBPACK_IMPORTED_MODULE_50__turf_idw__; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "point")) __webpack_require__.d(__webpack_exports__, "point", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["point"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "polygon")) __webpack_require__.d(__webpack_exports__, "polygon", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["polygon"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "lineString")) __webpack_require__.d(__webpack_exports__, "lineString", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["lineString"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "multiPoint")) __webpack_require__.d(__webpack_exports__, "multiPoint", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["multiPoint"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "multiPolygon")) __webpack_require__.d(__webpack_exports__, "multiPolygon", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["multiPolygon"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "multiLineString")) __webpack_require__.d(__webpack_exports__, "multiLineString", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["multiLineString"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "feature")) __webpack_require__.d(__webpack_exports__, "feature", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["feature"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "geometry")) __webpack_require__.d(__webpack_exports__, "geometry", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["geometry"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "featureCollection")) __webpack_require__.d(__webpack_exports__, "featureCollection", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["featureCollection"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "geometryCollection")) __webpack_require__.d(__webpack_exports__, "geometryCollection", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["geometryCollection"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "radiansToDistance")) __webpack_require__.d(__webpack_exports__, "radiansToDistance", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["radiansToDistance"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "distanceToRadians")) __webpack_require__.d(__webpack_exports__, "distanceToRadians", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["distanceToRadians"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "distanceToDegrees")) __webpack_require__.d(__webpack_exports__, "distanceToDegrees", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["distanceToDegrees"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "getCoord")) __webpack_require__.d(__webpack_exports__, "getCoord", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["getCoord"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "getCoords")) __webpack_require__.d(__webpack_exports__, "getCoords", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["getCoords"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "getGeom")) __webpack_require__.d(__webpack_exports__, "getGeom", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["getGeom"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "getGeomType")) __webpack_require__.d(__webpack_exports__, "getGeomType", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["getGeomType"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "geojsonType")) __webpack_require__.d(__webpack_exports__, "geojsonType", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["geojsonType"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "featureOf")) __webpack_require__.d(__webpack_exports__, "featureOf", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["featureOf"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "collectionOf")) __webpack_require__.d(__webpack_exports__, "collectionOf", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["collectionOf"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_1__turf_invariant__, "containsNumber")) __webpack_require__.d(__webpack_exports__, "containsNumber", function() { return __WEBPACK_IMPORTED_MODULE_1__turf_invariant__["containsNumber"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "truncate", function() { return __WEBPACK_IMPORTED_MODULE_51__turf_truncate__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return __WEBPACK_IMPORTED_MODULE_52__turf_flatten__; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "coordEach")) __webpack_require__.d(__webpack_exports__, "coordEach", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["coordEach"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "coordReduce")) __webpack_require__.d(__webpack_exports__, "coordReduce", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["coordReduce"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "propEach")) __webpack_require__.d(__webpack_exports__, "propEach", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["propEach"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "propReduce")) __webpack_require__.d(__webpack_exports__, "propReduce", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["propReduce"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "featureEach")) __webpack_require__.d(__webpack_exports__, "featureEach", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["featureEach"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "coordAll")) __webpack_require__.d(__webpack_exports__, "coordAll", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["coordAll"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "geomEach")) __webpack_require__.d(__webpack_exports__, "geomEach", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["geomEach"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineIntersect", function() { return __WEBPACK_IMPORTED_MODULE_53__turf_line_intersect__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mask", function() { return __WEBPACK_IMPORTED_MODULE_54__turf_mask__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineChunk", function() { return __WEBPACK_IMPORTED_MODULE_55__turf_line_chunk__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "unkinkPolygon", function() { return __WEBPACK_IMPORTED_MODULE_56__turf_unkink_polygon__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "greatCircle", function() { return __WEBPACK_IMPORTED_MODULE_57__turf_great_circle__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineSegment", function() { return __WEBPACK_IMPORTED_MODULE_58__turf_line_segment__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineSplit", function() { return __WEBPACK_IMPORTED_MODULE_59__turf_line_split__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineArc", function() { return __WEBPACK_IMPORTED_MODULE_60__turf_line_arc__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "polygonToLineString", function() { return __WEBPACK_IMPORTED_MODULE_61__turf_polygon_to_linestring__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineStringToPolygon", function() { return __WEBPACK_IMPORTED_MODULE_62__turf_linestring_to_polygon__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "bboxClip", function() { return __WEBPACK_IMPORTED_MODULE_63__turf_bbox_clip__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineOverlap", function() { return __WEBPACK_IMPORTED_MODULE_64__turf_line_overlap__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "sector", function() { return __WEBPACK_IMPORTED_MODULE_65__turf_sector__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "rhumbBearing", function() { return __WEBPACK_IMPORTED_MODULE_66__turf_rhumb_bearing__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "rhumbDistance", function() { return __WEBPACK_IMPORTED_MODULE_67__turf_rhumb_distance__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "rhumbDestination", function() { return __WEBPACK_IMPORTED_MODULE_68__turf_rhumb_destination__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "polygonTangents", function() { return __WEBPACK_IMPORTED_MODULE_69__turf_polygon_tangents__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "rewind", function() { return __WEBPACK_IMPORTED_MODULE_70__turf_rewind__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "isobands", function() { return __WEBPACK_IMPORTED_MODULE_71__turf_isobands__; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "radians2degrees")) __webpack_require__.d(__webpack_exports__, "radians2degrees", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["radians2degrees"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "degrees2radians")) __webpack_require__.d(__webpack_exports__, "degrees2radians", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["degrees2radians"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "round")) __webpack_require__.d(__webpack_exports__, "round", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["round"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "flattenEach")) __webpack_require__.d(__webpack_exports__, "flattenEach", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["flattenEach"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "flattenReduce")) __webpack_require__.d(__webpack_exports__, "flattenReduce", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["flattenReduce"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "convertDistance")) __webpack_require__.d(__webpack_exports__, "convertDistance", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["convertDistance"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "convertArea")) __webpack_require__.d(__webpack_exports__, "convertArea", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["convertArea"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "transformRotate", function() { return __WEBPACK_IMPORTED_MODULE_72__turf_transform_rotate__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "transformScale", function() { return __WEBPACK_IMPORTED_MODULE_73__turf_transform_scale__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "transformTranslate", function() { return __WEBPACK_IMPORTED_MODULE_74__turf_transform_translate__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "lineOffset", function() { return __WEBPACK_IMPORTED_MODULE_75__turf_line_offset__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "polygonize", function() { return __WEBPACK_IMPORTED_MODULE_76__turf_polygonize__; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__turf_helpers__, "bearingToAngle")) __webpack_require__.d(__webpack_exports__, "bearingToAngle", function() { return __WEBPACK_IMPORTED_MODULE_0__turf_helpers__["bearingToAngle"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "featureReduce")) __webpack_require__.d(__webpack_exports__, "featureReduce", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["featureReduce"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "geomReduce")) __webpack_require__.d(__webpack_exports__, "geomReduce", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["geomReduce"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "booleanDisjoint", function() { return __WEBPACK_IMPORTED_MODULE_77__turf_boolean_disjoint__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "booleanContains", function() { return __WEBPACK_IMPORTED_MODULE_78__turf_boolean_contains__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "booleanCrosses", function() { return __WEBPACK_IMPORTED_MODULE_79__turf_boolean_crosses__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "booleanClockwise", function() { return __WEBPACK_IMPORTED_MODULE_80__turf_boolean_clockwise__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "booleanEqual", function() { return __WEBPACK_IMPORTED_MODULE_81__turf_boolean_equal__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return __WEBPACK_IMPORTED_MODULE_82__turf_clone__; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "segmentEach")) __webpack_require__.d(__webpack_exports__, "segmentEach", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["segmentEach"]; });
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_2__turf_meta__, "segmentReduce")) __webpack_require__.d(__webpack_exports__, "segmentReduce", function() { return __WEBPACK_IMPORTED_MODULE_2__turf_meta__["segmentReduce"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "cleanCoords", function() { return __WEBPACK_IMPORTED_MODULE_83__turf_clean_coords__; });























































































/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var bbox = __webpack_require__(10);
var meta = __webpack_require__(1);
var helpers = __webpack_require__(13);
var invariant = __webpack_require__(14);
var gridToMatrix = __webpack_require__(63);
var marchingsquares = __webpack_require__(64);
var multiLineString = helpers.multiLineString;
var coordEach = meta.coordEach;
var collectionOf = invariant.collectionOf;
var featureCollection = helpers.featureCollection;

/**
 * Takes a grid {@link FeatureCollection} of {@link Point} features with z-values and an array of
 * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).
 *
 * @name isolines
 * @param {FeatureCollection<Point>} pointGrid input points
 * @param {Array<number>} breaks values of `zProperty` where to draw isolines
 * @param {string} [zProperty='elevation'] the property name in `points` from which z-values will be pulled
 * @param {Object} [propertiesToAllIsolines={}] GeoJSON properties passed to ALL isolines
 * @param {Array<Object>} [propertiesPerIsoline=[]] GeoJSON properties passed, in order, to the correspondent isoline;
 * the breaks array will define the order in which the isolines are created
 * @returns {FeatureCollection<MultiLineString>} a FeatureCollection of {@link MultiLineString} features representing isolines
 * @example
 * // create a grid of points with random z-values in their properties
 * var extent = [0, 30, 20, 50];
 * var cellWidth = 100;
 * var units = 'miles';
 * var pointGrid = turf.pointGrid(extent, cellWidth, units);
 * for (var i = 0; i < pointGrid.features.length; i++) {
 *     pointGrid.features[i].properties.temperature = Math.random() * 10;
 * }
 * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
 *
 * var isolines = turf.isolines(pointGrid, breaks, 'temperature');
 *
 * //addToMap
 * var addToMap = [isolines];
 */
module.exports = function (pointGrid, breaks, zProperty, propertiesToAllIsolines, propertiesPerIsoline) {
    // Default Params
    zProperty = zProperty || 'elevation';
    propertiesToAllIsolines = propertiesToAllIsolines || {};
    propertiesPerIsoline = propertiesPerIsoline || [];

    // Input validation
    collectionOf(pointGrid, 'Point', 'Input must contain Points');
    if (!breaks) throw new Error('breaks is required');
    if (!Array.isArray(breaks)) throw new Error('breaks must be an Array');
    if (!isObject(propertiesToAllIsolines)) throw new Error('propertiesToAllIsolines must be an Object');
    if (!Array.isArray(propertiesPerIsoline)) throw new Error('propertiesPerIsoline must be an Array');
    if (typeof zProperty !== 'string') throw new Error('zProperty must be a string');

    // Isoline methods
    var matrix = gridToMatrix(pointGrid, zProperty, true);
    var isolines = createIsoLines(matrix, breaks, zProperty, propertiesToAllIsolines, propertiesPerIsoline);
    var scaledIsolines = rescaleIsolines(isolines, matrix, pointGrid);

    return featureCollection(scaledIsolines);
};

/**
 * Creates the isolines lines (featuresCollection of MultiLineString features) from the 2D data grid
 *
 * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it
 * assumes the points (x-y coordinates) are one 'unit' distance. The result of the isolines function needs to be
 * rescaled, with turfjs, to the original area and proportions on the map
 *
 * @private
 * @param {Array<Array<number>>} matrix Grid Data
 * @param {Array<number>} breaks Breaks
 * @param {string} zProperty name of the z-values property
 * @param {Object} [propertiesToAllIsolines={}] GeoJSON properties passed to ALL isolines
 * @param {Object} [propertiesPerIsoline=[]] GeoJSON properties passed to the correspondent isoline
 * @returns {Array<MultiLineString>} isolines
 */
function createIsoLines(matrix, breaks, zProperty, propertiesToAllIsolines, propertiesPerIsoline) {
    var isolines = [];
    for (var i = 1; i < breaks.length; i++) {
        var threshold = +breaks[i]; // make sure it's a number

        var properties = Object.assign(
            {},
            propertiesToAllIsolines,
            propertiesPerIsoline[i]
        );
        properties[zProperty] = threshold;
        var isoline = multiLineString(marchingsquares.isoContours(matrix, threshold), properties);

        isolines.push(isoline);
    }
    return isolines;
}

/**
 * Translates and scales isolines
 *
 * @private
 * @param {Array<MultiLineString>} isolines to be rescaled
 * @param {Array<Array<number>>} matrix Grid Data
 * @param {Object} points Points by Latitude
 * @returns {Array<MultiLineString>} isolines
 */
function rescaleIsolines(isolines, matrix, points) {

    // get dimensions (on the map) of the original grid
    var gridBbox = bbox(points); // [ minX, minY, maxX, maxY ]
    var originalWidth = gridBbox[2] - gridBbox[0];
    var originalHeigth = gridBbox[3] - gridBbox[1];

    // get origin, which is the first point of the last row on the rectangular data on the map
    var x0 = gridBbox[0];
    var y0 = gridBbox[1];

    // get number of cells per side
    var matrixWidth = matrix[0].length - 1;
    var matrixHeight = matrix.length - 1;

    // calculate the scaling factor between matrix and rectangular grid on the map
    var scaleX = originalWidth / matrixWidth;
    var scaleY = originalHeigth / matrixHeight;

    var resize = function (point) {
        point[0] = point[0] * scaleX + x0;
        point[1] = point[1] * scaleY + y0;
    };

    // resize and shift each point/line of the isolines
    isolines.forEach(function (isoline) {
        coordEach(isoline, resize);
    });
    return isolines;
}

/**
 * Checks input type
 *
 * @private
 * @param {*} input to be checked
 * @returns {boolean} true if the input is an Object
 */
function isObject(input) {
    return (!!input) && (input.constructor === Object);
}


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
* @license GNU Affero General Public License.
* Copyright (c) 2015, 2015 Ronny Lorenz <ronny@tbi.univie.ac.at>
* v. 1.2.0
* https://github.com/RaumZeit/MarchingSquares.js
*/

(function (root, factory) {
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return { isoBands : factory() }; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = { isoBands : factory() };
    } else {
        // Browser globals (root is window)
        root.MarchingSquaresJS = {
                                    isoBands : factory(),
                                    isoContours : (root.MarchingSquaresJS) ? root.MarchingSquaresJS.isoContours : null
                                 };
    }
}(this, function () {

  var defaultSettings = {
    successCallback:  null,
    verbose:          false,
    polygons:         false
  };
    
  var settings = {};
    
    /*
      Compute isobands(s) of a scalar 2D field given a certain
      threshold and a bandwidth by applying the Marching Squares
      Algorithm. The function returns a list of path coordinates
      either for individual polygons within each grid cell, or the
      outline of connected polygons.
    */
  function isoBands(data, minV, bandwidth, options){
    /* process options */
    options = options ? options : {};

    var optionKeys = Object.keys(defaultSettings);

    for(var i = 0; i < optionKeys.length; i++){
      var key = optionKeys[i];
      var val = options[key];
      val = ((typeof val !== 'undefined') && (val !== null)) ? val : defaultSettings[key];

      settings[key] = val;
    }

    if(settings.verbose)
      console.log("MarchingSquaresJS-isoBands: computing isobands for [" + minV + ":" + (minV + bandwidth) + "]");

    var grid = computeBandGrid(data, minV, bandwidth);

    var ret;
    if(settings.polygons){
      if (settings.verbose)
        console.log("MarchingSquaresJS-isoBands: returning single polygons for each grid cell");
      ret = BandGrid2Areas(grid);
    } else {
      if (settings.verbose)
        console.log("MarchingSquaresJS-isoBands: returning polygon paths for entire data grid");
      ret = BandGrid2AreaPaths(grid);
    }

    if(typeof settings.successCallback === 'function')
      settings.successCallback(ret);

    return ret;
  }

  /*
    Thats all for the public interface, below follows the actual
    implementation
  */

  /* Some private variables */
  var Node0 = 64,
      Node1 = 16,
      Node2 = 4,
      Node3 = 1;

  /*  For isoBands, each square is defined by the three states
      of its corner points. However, since computers use power-2
      values, we use 2bits per trit, i.e.:

      00 ... below minV
      01 ... between minV and maxV
      10 ... above maxV

      Hence we map the 4-trit configurations as follows:

      0000 => 0
      0001 => 1
      0002 => 2
      0010 => 4
      0011 => 5
      0012 => 6
      0020 => 8
      0021 => 9
      0022 => 10
      0100 => 16
      0101 => 17
      0102 => 18
      0110 => 20
      0111 => 21
      0112 => 22
      0120 => 24
      0121 => 25
      0122 => 26
      0200 => 32
      0201 => 33
      0202 => 34
      0210 => 36
      0211 => 37
      0212 => 38
      0220 => 40
      0221 => 41
      0222 => 42
      1000 => 64
      1001 => 65
      1002 => 66
      1010 => 68
      1011 => 69
      1012 => 70
      1020 => 72
      1021 => 73
      1022 => 74
      1100 => 80
      1101 => 81
      1102 => 82
      1110 => 84
      1111 => 85
      1112 => 86
      1120 => 88
      1121 => 89
      1122 => 90
      1200 => 96
      1201 => 97
      1202 => 98
      1210 => 100
      1211 => 101
      1212 => 102
      1220 => 104
      1221 => 105
      1222 => 106
      2000 => 128
      2001 => 129
      2002 => 130
      2010 => 132
      2011 => 133
      2012 => 134
      2020 => 136
      2021 => 137
      2022 => 138
      2100 => 144
      2101 => 145
      2102 => 146
      2110 => 148
      2111 => 149
      2112 => 150
      2120 => 152
      2121 => 153
      2122 => 154
      2200 => 160
      2201 => 161
      2202 => 162
      2210 => 164
      2211 => 165
      2212 => 166
      2220 => 168
      2221 => 169
      2222 => 170
  */

  /*
    The look-up tables for tracing back the contour path
    of isoBands
  */

  var isoBandNextXTL = [];
  var isoBandNextYTL = [];
  var isoBandNextOTL = [];

  var isoBandNextXTR = [];
  var isoBandNextYTR = [];
  var isoBandNextOTR = [];

  var isoBandNextXRT = [];
  var isoBandNextYRT = [];
  var isoBandNextORT = [];

  var isoBandNextXRB = [];
  var isoBandNextYRB = [];
  var isoBandNextORB = [];

  var isoBandNextXBL = [];
  var isoBandNextYBL = [];
  var isoBandNextOBL = [];

  var isoBandNextXBR = [];
  var isoBandNextYBR = [];
  var isoBandNextOBR = [];

  var isoBandNextXLT = [];
  var isoBandNextYLT = [];
  var isoBandNextOLT = [];

  var isoBandNextXLB = [];
  var isoBandNextYLB = [];
  var isoBandNextOLB = [];

  isoBandNextXRT[85] = isoBandNextXRB[85] = -1;
  isoBandNextYRT[85] = isoBandNextYRB[85] = 0;
  isoBandNextORT[85] = isoBandNextORB[85] = 1;
  isoBandNextXLT[85] = isoBandNextXLB[85] = 1;
  isoBandNextYLT[85] = isoBandNextYLB[85] = 0;
  isoBandNextOLT[85] = isoBandNextOLB[85] = 1;

  isoBandNextXTL[85] = isoBandNextXTR[85] = 0;
  isoBandNextYTL[85] = isoBandNextYTR[85] = -1;
  isoBandNextOTL[85] = isoBandNextOBL[85] = 0;
  isoBandNextXBR[85] = isoBandNextXBL[85] = 0;
  isoBandNextYBR[85] = isoBandNextYBL[85] = 1;
  isoBandNextOTR[85] = isoBandNextOBR[85] = 1;


  /* triangle cases */
  isoBandNextXLB[1] = isoBandNextXLB[169] = 0;
  isoBandNextYLB[1] = isoBandNextYLB[169] = -1;
  isoBandNextOLB[1] = isoBandNextOLB[169] = 0;
  isoBandNextXBL[1] = isoBandNextXBL[169] = -1;
  isoBandNextYBL[1] = isoBandNextYBL[169] = 0;
  isoBandNextOBL[1] = isoBandNextOBL[169] = 0;

  isoBandNextXRB[4] = isoBandNextXRB[166] = 0;
  isoBandNextYRB[4] = isoBandNextYRB[166] = -1;
  isoBandNextORB[4] = isoBandNextORB[166] = 1;
  isoBandNextXBR[4] = isoBandNextXBR[166] = 1;
  isoBandNextYBR[4] = isoBandNextYBR[166] = 0;
  isoBandNextOBR[4] = isoBandNextOBR[166] = 0;

  isoBandNextXRT[16] = isoBandNextXRT[154] = 0;
  isoBandNextYRT[16] = isoBandNextYRT[154] = 1;
  isoBandNextORT[16] = isoBandNextORT[154] = 1;
  isoBandNextXTR[16] = isoBandNextXTR[154] = 1;
  isoBandNextYTR[16] = isoBandNextYTR[154] = 0;
  isoBandNextOTR[16] = isoBandNextOTR[154] = 1;

  isoBandNextXLT[64] = isoBandNextXLT[106] = 0;
  isoBandNextYLT[64] = isoBandNextYLT[106] = 1;
  isoBandNextOLT[64] = isoBandNextOLT[106] = 0;
  isoBandNextXTL[64] = isoBandNextXTL[106] = -1;
  isoBandNextYTL[64] = isoBandNextYTL[106] = 0;
  isoBandNextOTL[64] = isoBandNextOTL[106] = 1;

  /* single trapezoid cases */
  isoBandNextXLT[2] = isoBandNextXLT[168] = 0;
  isoBandNextYLT[2] = isoBandNextYLT[168] = -1;
  isoBandNextOLT[2] = isoBandNextOLT[168] = 1;
  isoBandNextXLB[2] = isoBandNextXLB[168] = 0;
  isoBandNextYLB[2] = isoBandNextYLB[168] = -1;
  isoBandNextOLB[2] = isoBandNextOLB[168] = 0;
  isoBandNextXBL[2] = isoBandNextXBL[168] = -1;
  isoBandNextYBL[2] = isoBandNextYBL[168] = 0;
  isoBandNextOBL[2] = isoBandNextOBL[168] = 0;
  isoBandNextXBR[2] = isoBandNextXBR[168] = -1;
  isoBandNextYBR[2] = isoBandNextYBR[168] = 0;
  isoBandNextOBR[2] = isoBandNextOBR[168] = 1;

  isoBandNextXRT[8] = isoBandNextXRT[162] = 0;
  isoBandNextYRT[8] = isoBandNextYRT[162] = -1;
  isoBandNextORT[8] = isoBandNextORT[162] = 0;
  isoBandNextXRB[8] = isoBandNextXRB[162] = 0;
  isoBandNextYRB[8] = isoBandNextYRB[162] = -1;
  isoBandNextORB[8] = isoBandNextORB[162] = 1;
  isoBandNextXBL[8] = isoBandNextXBL[162] = 1;
  isoBandNextYBL[8] = isoBandNextYBL[162] = 0;
  isoBandNextOBL[8] = isoBandNextOBL[162] = 1;
  isoBandNextXBR[8] = isoBandNextXBR[162] = 1;
  isoBandNextYBR[8] = isoBandNextYBR[162] = 0;
  isoBandNextOBR[8] = isoBandNextOBR[162] = 0;

  isoBandNextXRT[32] = isoBandNextXRT[138] = 0;
  isoBandNextYRT[32] = isoBandNextYRT[138] = 1;
  isoBandNextORT[32] = isoBandNextORT[138] = 1;
  isoBandNextXRB[32] = isoBandNextXRB[138] = 0;
  isoBandNextYRB[32] = isoBandNextYRB[138] = 1;
  isoBandNextORB[32] = isoBandNextORB[138] = 0;
  isoBandNextXTL[32] = isoBandNextXTL[138] = 1;
  isoBandNextYTL[32] = isoBandNextYTL[138] = 0;
  isoBandNextOTL[32] = isoBandNextOTL[138] = 0;
  isoBandNextXTR[32] = isoBandNextXTR[138] = 1;
  isoBandNextYTR[32] = isoBandNextYTR[138] = 0;
  isoBandNextOTR[32] = isoBandNextOTR[138] = 1;

  isoBandNextXLB[128] = isoBandNextXLB[42] = 0;
  isoBandNextYLB[128] = isoBandNextYLB[42] = 1;
  isoBandNextOLB[128] = isoBandNextOLB[42] = 1;
  isoBandNextXLT[128] = isoBandNextXLT[42] = 0;
  isoBandNextYLT[128] = isoBandNextYLT[42] = 1;
  isoBandNextOLT[128] = isoBandNextOLT[42] = 0;
  isoBandNextXTL[128] = isoBandNextXTL[42] = -1;
  isoBandNextYTL[128] = isoBandNextYTL[42] = 0;
  isoBandNextOTL[128] = isoBandNextOTL[42] = 1;
  isoBandNextXTR[128] = isoBandNextXTR[42] = -1;
  isoBandNextYTR[128] = isoBandNextYTR[42] = 0;
  isoBandNextOTR[128] = isoBandNextOTR[42] = 0;

  /* single rectangle cases */
  isoBandNextXRB[5] = isoBandNextXRB[165] = -1;
  isoBandNextYRB[5] = isoBandNextYRB[165] = 0;
  isoBandNextORB[5] = isoBandNextORB[165] = 0;
  isoBandNextXLB[5] = isoBandNextXLB[165] = 1;
  isoBandNextYLB[5] = isoBandNextYLB[165] = 0;
  isoBandNextOLB[5] = isoBandNextOLB[165] = 0;

  isoBandNextXBR[20] = isoBandNextXBR[150] = 0;
  isoBandNextYBR[20] = isoBandNextYBR[150] = 1;
  isoBandNextOBR[20] = isoBandNextOBR[150] = 1;
  isoBandNextXTR[20] = isoBandNextXTR[150] = 0;
  isoBandNextYTR[20] = isoBandNextYTR[150] = -1;
  isoBandNextOTR[20] = isoBandNextOTR[150] = 1;

  isoBandNextXRT[80] = isoBandNextXRT[90] = -1;
  isoBandNextYRT[80] = isoBandNextYRT[90] = 0;
  isoBandNextORT[80] = isoBandNextORT[90] = 1;
  isoBandNextXLT[80] = isoBandNextXLT[90] = 1;
  isoBandNextYLT[80] = isoBandNextYLT[90] = 0;
  isoBandNextOLT[80] = isoBandNextOLT[90] = 1;

  isoBandNextXBL[65] = isoBandNextXBL[105] = 0;
  isoBandNextYBL[65] = isoBandNextYBL[105] = 1;
  isoBandNextOBL[65] = isoBandNextOBL[105] = 0;
  isoBandNextXTL[65] = isoBandNextXTL[105] = 0;
  isoBandNextYTL[65] = isoBandNextYTL[105] = -1;
  isoBandNextOTL[65] = isoBandNextOTL[105] = 0;

  isoBandNextXRT[160] = isoBandNextXRT[10] = -1;
  isoBandNextYRT[160] = isoBandNextYRT[10] = 0;
  isoBandNextORT[160] = isoBandNextORT[10] = 1;
  isoBandNextXRB[160] = isoBandNextXRB[10] = -1;
  isoBandNextYRB[160] = isoBandNextYRB[10] = 0;
  isoBandNextORB[160] = isoBandNextORB[10] = 0;
  isoBandNextXLB[160] = isoBandNextXLB[10] = 1;
  isoBandNextYLB[160] = isoBandNextYLB[10] = 0;
  isoBandNextOLB[160] = isoBandNextOLB[10] = 0;
  isoBandNextXLT[160] = isoBandNextXLT[10] = 1;
  isoBandNextYLT[160] = isoBandNextYLT[10] = 0;
  isoBandNextOLT[160] = isoBandNextOLT[10] = 1;

  isoBandNextXBR[130] = isoBandNextXBR[40] = 0;
  isoBandNextYBR[130] = isoBandNextYBR[40] = 1;
  isoBandNextOBR[130] = isoBandNextOBR[40] = 1;
  isoBandNextXBL[130] = isoBandNextXBL[40] = 0;
  isoBandNextYBL[130] = isoBandNextYBL[40] = 1;
  isoBandNextOBL[130] = isoBandNextOBL[40] = 0;
  isoBandNextXTL[130] = isoBandNextXTL[40] = 0;
  isoBandNextYTL[130] = isoBandNextYTL[40] = -1;
  isoBandNextOTL[130] = isoBandNextOTL[40] = 0;
  isoBandNextXTR[130] = isoBandNextXTR[40] = 0;
  isoBandNextYTR[130] = isoBandNextYTR[40] = -1;
  isoBandNextOTR[130] = isoBandNextOTR[40] = 1;

  /* single hexagon cases */
  isoBandNextXRB[37] = isoBandNextXRB[133] = 0;
  isoBandNextYRB[37] = isoBandNextYRB[133] = 1;
  isoBandNextORB[37] = isoBandNextORB[133] = 1;
  isoBandNextXLB[37] = isoBandNextXLB[133] = 0;
  isoBandNextYLB[37] = isoBandNextYLB[133] = 1;
  isoBandNextOLB[37] = isoBandNextOLB[133] = 0;
  isoBandNextXTL[37] = isoBandNextXTL[133] = -1;
  isoBandNextYTL[37] = isoBandNextYTL[133] = 0;
  isoBandNextOTL[37] = isoBandNextOTL[133] = 0;
  isoBandNextXTR[37] = isoBandNextXTR[133] = 1;
  isoBandNextYTR[37] = isoBandNextYTR[133] = 0;
  isoBandNextOTR[37] = isoBandNextOTR[133] = 0;

  isoBandNextXBR[148] = isoBandNextXBR[22] = -1;
  isoBandNextYBR[148] = isoBandNextYBR[22] = 0;
  isoBandNextOBR[148] = isoBandNextOBR[22] = 0;
  isoBandNextXLB[148] = isoBandNextXLB[22] = 0;
  isoBandNextYLB[148] = isoBandNextYLB[22] = -1;
  isoBandNextOLB[148] = isoBandNextOLB[22] = 1;
  isoBandNextXLT[148] = isoBandNextXLT[22] = 0;
  isoBandNextYLT[148] = isoBandNextYLT[22] = 1;
  isoBandNextOLT[148] = isoBandNextOLT[22] = 1;
  isoBandNextXTR[148] = isoBandNextXTR[22] = -1;
  isoBandNextYTR[148] = isoBandNextYTR[22] = 0;
  isoBandNextOTR[148] = isoBandNextOTR[22] = 1;

  isoBandNextXRT[82] = isoBandNextXRT[88] = 0;
  isoBandNextYRT[82] = isoBandNextYRT[88] = -1;
  isoBandNextORT[82] = isoBandNextORT[88] = 1;
  isoBandNextXBR[82] = isoBandNextXBR[88] = 1;
  isoBandNextYBR[82] = isoBandNextYBR[88] = 0;
  isoBandNextOBR[82] = isoBandNextOBR[88] = 1;
  isoBandNextXBL[82] = isoBandNextXBL[88] = -1;
  isoBandNextYBL[82] = isoBandNextYBL[88] = 0;
  isoBandNextOBL[82] = isoBandNextOBL[88] = 1;
  isoBandNextXLT[82] = isoBandNextXLT[88] = 0;
  isoBandNextYLT[82] = isoBandNextYLT[88] = -1;
  isoBandNextOLT[82] = isoBandNextOLT[88] = 0;

  isoBandNextXRT[73] = isoBandNextXRT[97] = 0;
  isoBandNextYRT[73] = isoBandNextYRT[97] = 1;
  isoBandNextORT[73] = isoBandNextORT[97] = 0;
  isoBandNextXRB[73] = isoBandNextXRB[97] = 0;
  isoBandNextYRB[73] = isoBandNextYRB[97] = -1;
  isoBandNextORB[73] = isoBandNextORB[97] = 0;
  isoBandNextXBL[73] = isoBandNextXBL[97] = 1;
  isoBandNextYBL[73] = isoBandNextYBL[97] = 0;
  isoBandNextOBL[73] = isoBandNextOBL[97] = 0;
  isoBandNextXTL[73] = isoBandNextXTL[97] = 1;
  isoBandNextYTL[73] = isoBandNextYTL[97] = 0;
  isoBandNextOTL[73] = isoBandNextOTL[97] = 1;

  isoBandNextXRT[145] = isoBandNextXRT[25] = 0;
  isoBandNextYRT[145] = isoBandNextYRT[25] = -1;
  isoBandNextORT[145] = isoBandNextORT[25] = 0;
  isoBandNextXBL[145] = isoBandNextXBL[25] = 1;
  isoBandNextYBL[145] = isoBandNextYBL[25] = 0;
  isoBandNextOBL[145] = isoBandNextOBL[25] = 1;
  isoBandNextXLB[145] = isoBandNextXLB[25] = 0;
  isoBandNextYLB[145] = isoBandNextYLB[25] = 1;
  isoBandNextOLB[145] = isoBandNextOLB[25] = 1;
  isoBandNextXTR[145] = isoBandNextXTR[25] = -1;
  isoBandNextYTR[145] = isoBandNextYTR[25] = 0;
  isoBandNextOTR[145] = isoBandNextOTR[25] = 0;

  isoBandNextXRB[70] = isoBandNextXRB[100] = 0;
  isoBandNextYRB[70] = isoBandNextYRB[100] = 1;
  isoBandNextORB[70] = isoBandNextORB[100] = 0;
  isoBandNextXBR[70] = isoBandNextXBR[100] = -1;
  isoBandNextYBR[70] = isoBandNextYBR[100] = 0;
  isoBandNextOBR[70] = isoBandNextOBR[100] = 1;
  isoBandNextXLT[70] = isoBandNextXLT[100] = 0;
  isoBandNextYLT[70] = isoBandNextYLT[100] = -1;
  isoBandNextOLT[70] = isoBandNextOLT[100] = 1;
  isoBandNextXTL[70] = isoBandNextXTL[100] = 1;
  isoBandNextYTL[70] = isoBandNextYTL[100] = 0;
  isoBandNextOTL[70] = isoBandNextOTL[100] = 0;

  /* single pentagon cases */
  isoBandNextXRB[101] = isoBandNextXRB[69] = 0;
  isoBandNextYRB[101] = isoBandNextYRB[69] = 1;
  isoBandNextORB[101] = isoBandNextORB[69] = 0;
  isoBandNextXTL[101] = isoBandNextXTL[69] = 1;
  isoBandNextYTL[101] = isoBandNextYTL[69] = 0;
  isoBandNextOTL[101] = isoBandNextOTL[69] = 0;

  isoBandNextXLB[149] = isoBandNextXLB[21] = 0;
  isoBandNextYLB[149] = isoBandNextYLB[21] = 1;
  isoBandNextOLB[149] = isoBandNextOLB[21] = 1;
  isoBandNextXTR[149] = isoBandNextXTR[21] = -1;
  isoBandNextYTR[149] = isoBandNextYTR[21] = 0;
  isoBandNextOTR[149] = isoBandNextOTR[21] = 0;

  isoBandNextXBR[86] = isoBandNextXBR[84] = -1;
  isoBandNextYBR[86] = isoBandNextYBR[84] = 0;
  isoBandNextOBR[86] = isoBandNextOBR[84] = 1;
  isoBandNextXLT[86] = isoBandNextXLT[84] = 0;
  isoBandNextYLT[86] = isoBandNextYLT[84] = -1;
  isoBandNextOLT[86] = isoBandNextOLT[84] = 1;

  isoBandNextXRT[89] = isoBandNextXRT[81] = 0;
  isoBandNextYRT[89] = isoBandNextYRT[81] = -1;
  isoBandNextORT[89] = isoBandNextORT[81] = 0;
  isoBandNextXBL[89] = isoBandNextXBL[81] = 1;
  isoBandNextYBL[89] = isoBandNextYBL[81] = 0;
  isoBandNextOBL[89] = isoBandNextOBL[81] = 1;

  isoBandNextXRT[96] = isoBandNextXRT[74] = 0;
  isoBandNextYRT[96] = isoBandNextYRT[74] = 1;
  isoBandNextORT[96] = isoBandNextORT[74] = 0;
  isoBandNextXRB[96] = isoBandNextXRB[74] = -1;
  isoBandNextYRB[96] = isoBandNextYRB[74] = 0;
  isoBandNextORB[96] = isoBandNextORB[74] = 1;
  isoBandNextXLT[96] = isoBandNextXLT[74] = 1;
  isoBandNextYLT[96] = isoBandNextYLT[74] = 0;
  isoBandNextOLT[96] = isoBandNextOLT[74] = 0;
  isoBandNextXTL[96] = isoBandNextXTL[74] = 1;
  isoBandNextYTL[96] = isoBandNextYTL[74] = 0;
  isoBandNextOTL[96] = isoBandNextOTL[74] = 1;

  isoBandNextXRT[24] = isoBandNextXRT[146] = 0;
  isoBandNextYRT[24] = isoBandNextYRT[146] = -1;
  isoBandNextORT[24] = isoBandNextORT[146] = 1;
  isoBandNextXBR[24] = isoBandNextXBR[146] = 1;
  isoBandNextYBR[24] = isoBandNextYBR[146] = 0;
  isoBandNextOBR[24] = isoBandNextOBR[146] = 1;
  isoBandNextXBL[24] = isoBandNextXBL[146] = 0;
  isoBandNextYBL[24] = isoBandNextYBL[146] = 1;
  isoBandNextOBL[24] = isoBandNextOBL[146] = 1;
  isoBandNextXTR[24] = isoBandNextXTR[146] = 0;
  isoBandNextYTR[24] = isoBandNextYTR[146] = -1;
  isoBandNextOTR[24] = isoBandNextOTR[146] = 0;

  isoBandNextXRB[6] = isoBandNextXRB[164] = -1;
  isoBandNextYRB[6] = isoBandNextYRB[164] = 0;
  isoBandNextORB[6] = isoBandNextORB[164] = 1;
  isoBandNextXBR[6] = isoBandNextXBR[164] = -1;
  isoBandNextYBR[6] = isoBandNextYBR[164] = 0;
  isoBandNextOBR[6] = isoBandNextOBR[164] = 0;
  isoBandNextXLB[6] = isoBandNextXLB[164] = 0;
  isoBandNextYLB[6] = isoBandNextYLB[164] = -1;
  isoBandNextOLB[6] = isoBandNextOLB[164] = 1;
  isoBandNextXLT[6] = isoBandNextXLT[164] = 1;
  isoBandNextYLT[6] = isoBandNextYLT[164] = 0;
  isoBandNextOLT[6] = isoBandNextOLT[164] = 0;

  isoBandNextXBL[129] = isoBandNextXBL[41] = 0;
  isoBandNextYBL[129] = isoBandNextYBL[41] = 1;
  isoBandNextOBL[129] = isoBandNextOBL[41] = 1;
  isoBandNextXLB[129] = isoBandNextXLB[41] = 0;
  isoBandNextYLB[129] = isoBandNextYLB[41] = 1;
  isoBandNextOLB[129] = isoBandNextOLB[41] = 0;
  isoBandNextXTL[129] = isoBandNextXTL[41] = -1;
  isoBandNextYTL[129] = isoBandNextYTL[41] = 0;
  isoBandNextOTL[129] = isoBandNextOTL[41] = 0;
  isoBandNextXTR[129] = isoBandNextXTR[41] = 0;
  isoBandNextYTR[129] = isoBandNextYTR[41] = -1;
  isoBandNextOTR[129] = isoBandNextOTR[41] = 0;

  isoBandNextXBR[66] = isoBandNextXBR[104] = 0;
  isoBandNextYBR[66] = isoBandNextYBR[104] = 1;
  isoBandNextOBR[66] = isoBandNextOBR[104] = 0;
  isoBandNextXBL[66] = isoBandNextXBL[104] = -1;
  isoBandNextYBL[66] = isoBandNextYBL[104] = 0;
  isoBandNextOBL[66] = isoBandNextOBL[104] = 1;
  isoBandNextXLT[66] = isoBandNextXLT[104] = 0;
  isoBandNextYLT[66] = isoBandNextYLT[104] = -1;
  isoBandNextOLT[66] = isoBandNextOLT[104] = 0;
  isoBandNextXTL[66] = isoBandNextXTL[104] = 0;
  isoBandNextYTL[66] = isoBandNextYTL[104] = -1;
  isoBandNextOTL[66] = isoBandNextOTL[104] = 1;

  isoBandNextXRT[144] = isoBandNextXRT[26] = -1;
  isoBandNextYRT[144] = isoBandNextYRT[26] = 0;
  isoBandNextORT[144] = isoBandNextORT[26] = 0;
  isoBandNextXLB[144] = isoBandNextXLB[26] = 1;
  isoBandNextYLB[144] = isoBandNextYLB[26] = 0;
  isoBandNextOLB[144] = isoBandNextOLB[26] = 1;
  isoBandNextXLT[144] = isoBandNextXLT[26] = 0;
  isoBandNextYLT[144] = isoBandNextYLT[26] = 1;
  isoBandNextOLT[144] = isoBandNextOLT[26] = 1;
  isoBandNextXTR[144] = isoBandNextXTR[26] = -1;
  isoBandNextYTR[144] = isoBandNextYTR[26] = 0;
  isoBandNextOTR[144] = isoBandNextOTR[26] = 1;

  isoBandNextXRB[36] = isoBandNextXRB[134] = 0;
  isoBandNextYRB[36] = isoBandNextYRB[134] = 1;
  isoBandNextORB[36] = isoBandNextORB[134] = 1;
  isoBandNextXBR[36] = isoBandNextXBR[134] = 0;
  isoBandNextYBR[36] = isoBandNextYBR[134] = 1;
  isoBandNextOBR[36] = isoBandNextOBR[134] = 0;
  isoBandNextXTL[36] = isoBandNextXTL[134] = 0;
  isoBandNextYTL[36] = isoBandNextYTL[134] = -1;
  isoBandNextOTL[36] = isoBandNextOTL[134] = 1;
  isoBandNextXTR[36] = isoBandNextXTR[134] = 1;
  isoBandNextYTR[36] = isoBandNextYTR[134] = 0;
  isoBandNextOTR[36] = isoBandNextOTR[134] = 0;

  isoBandNextXRT[9] = isoBandNextXRT[161] = -1;
  isoBandNextYRT[9] = isoBandNextYRT[161] = 0;
  isoBandNextORT[9] = isoBandNextORT[161] = 0;
  isoBandNextXRB[9] = isoBandNextXRB[161] = 0;
  isoBandNextYRB[9] = isoBandNextYRB[161] = -1;
  isoBandNextORB[9] = isoBandNextORB[161] = 0;
  isoBandNextXBL[9] = isoBandNextXBL[161] = 1;
  isoBandNextYBL[9] = isoBandNextYBL[161] = 0;
  isoBandNextOBL[9] = isoBandNextOBL[161] = 0;
  isoBandNextXLB[9] = isoBandNextXLB[161] = 1;
  isoBandNextYLB[9] = isoBandNextYLB[161] = 0;
  isoBandNextOLB[9] = isoBandNextOLB[161] = 1;

  /* 8-sided cases */
  isoBandNextXRT[136] = 0;
  isoBandNextYRT[136] = 1;
  isoBandNextORT[136] = 1;
  isoBandNextXRB[136] = 0;
  isoBandNextYRB[136] = 1;
  isoBandNextORB[136] = 0;
  isoBandNextXBR[136] = -1;
  isoBandNextYBR[136] = 0;
  isoBandNextOBR[136] = 1;
  isoBandNextXBL[136] = -1;
  isoBandNextYBL[136] = 0;
  isoBandNextOBL[136] = 0;
  isoBandNextXLB[136] = 0;
  isoBandNextYLB[136] = -1;
  isoBandNextOLB[136] = 0;
  isoBandNextXLT[136] = 0;
  isoBandNextYLT[136] = -1;
  isoBandNextOLT[136] = 1;
  isoBandNextXTL[136] = 1;
  isoBandNextYTL[136] = 0;
  isoBandNextOTL[136] = 0;
  isoBandNextXTR[136] = 1;
  isoBandNextYTR[136] = 0;
  isoBandNextOTR[136] = 1;

  isoBandNextXRT[34] = 0;
  isoBandNextYRT[34] = -1;
  isoBandNextORT[34] = 0;
  isoBandNextXRB[34] = 0;
  isoBandNextYRB[34] = -1;
  isoBandNextORB[34] = 1;
  isoBandNextXBR[34] = 1;
  isoBandNextYBR[34] = 0;
  isoBandNextOBR[34] = 0;
  isoBandNextXBL[34] = 1;
  isoBandNextYBL[34] = 0;
  isoBandNextOBL[34] = 1;
  isoBandNextXLB[34] = 0;
  isoBandNextYLB[34] = 1;
  isoBandNextOLB[34] = 1;
  isoBandNextXLT[34] = 0;
  isoBandNextYLT[34] = 1;
  isoBandNextOLT[34] = 0;
  isoBandNextXTL[34] = -1;
  isoBandNextYTL[34] = 0;
  isoBandNextOTL[34] = 1;
  isoBandNextXTR[34] = -1;
  isoBandNextYTR[34] = 0;
  isoBandNextOTR[34] = 0;

  isoBandNextXRT[35] = 0;
  isoBandNextYRT[35] = 1;
  isoBandNextORT[35] = 1;
  isoBandNextXRB[35] = 0;
  isoBandNextYRB[35] = -1;
  isoBandNextORB[35] = 1;
  isoBandNextXBR[35] = 1;
  isoBandNextYBR[35] = 0;
  isoBandNextOBR[35] = 0;
  isoBandNextXBL[35] = -1;
  isoBandNextYBL[35] = 0;
  isoBandNextOBL[35] = 0;
  isoBandNextXLB[35] = 0;
  isoBandNextYLB[35] = -1;
  isoBandNextOLB[35] = 0;
  isoBandNextXLT[35] = 0;
  isoBandNextYLT[35] = 1;
  isoBandNextOLT[35] = 0;
  isoBandNextXTL[35] = -1;
  isoBandNextYTL[35] = 0;
  isoBandNextOTL[35] = 1;
  isoBandNextXTR[35] = 1;
  isoBandNextYTR[35] = 0;
  isoBandNextOTR[35] = 1;

  /* 6-sided cases */
  isoBandNextXRT[153] = 0;
  isoBandNextYRT[153] = 1;
  isoBandNextORT[153] = 1;
  isoBandNextXBL[153] = -1;
  isoBandNextYBL[153] = 0;
  isoBandNextOBL[153] = 0;
  isoBandNextXLB[153] = 0;
  isoBandNextYLB[153] = -1;
  isoBandNextOLB[153] = 0;
  isoBandNextXTR[153] = 1;
  isoBandNextYTR[153] = 0;
  isoBandNextOTR[153] = 1;

  isoBandNextXRB[102] = 0;
  isoBandNextYRB[102] = -1;
  isoBandNextORB[102] = 1;
  isoBandNextXBR[102] = 1;
  isoBandNextYBR[102] = 0;
  isoBandNextOBR[102] = 0;
  isoBandNextXLT[102] = 0;
  isoBandNextYLT[102] = 1;
  isoBandNextOLT[102] = 0;
  isoBandNextXTL[102] = -1;
  isoBandNextYTL[102] = 0;
  isoBandNextOTL[102] = 1;

  isoBandNextXRT[155] = 0;
  isoBandNextYRT[155] = -1;
  isoBandNextORT[155] = 0;
  isoBandNextXBL[155] = 1;
  isoBandNextYBL[155] = 0;
  isoBandNextOBL[155] = 1;
  isoBandNextXLB[155] = 0;
  isoBandNextYLB[155] = 1;
  isoBandNextOLB[155] = 1;
  isoBandNextXTR[155] = -1;
  isoBandNextYTR[155] = 0;
  isoBandNextOTR[155] = 0;

  isoBandNextXRB[103] = 0;
  isoBandNextYRB[103] = 1;
  isoBandNextORB[103] = 0;
  isoBandNextXBR[103] = -1;
  isoBandNextYBR[103] = 0;
  isoBandNextOBR[103] = 1;
  isoBandNextXLT[103] = 0;
  isoBandNextYLT[103] = -1;
  isoBandNextOLT[103] = 1;
  isoBandNextXTL[103] = 1;
  isoBandNextYTL[103] = 0;
  isoBandNextOTL[103] = 0;

  /* 7-sided cases */
  isoBandNextXRT[152] = 0;
  isoBandNextYRT[152] = 1;
  isoBandNextORT[152] = 1;
  isoBandNextXBR[152] = -1;
  isoBandNextYBR[152] = 0;
  isoBandNextOBR[152] = 1;
  isoBandNextXBL[152] = -1;
  isoBandNextYBL[152] = 0;
  isoBandNextOBL[152] = 0;
  isoBandNextXLB[152] = 0;
  isoBandNextYLB[152] = -1;
  isoBandNextOLB[152] = 0;
  isoBandNextXLT[152] = 0;
  isoBandNextYLT[152] = -1;
  isoBandNextOLT[152] = 1;
  isoBandNextXTR[152] = 1;
  isoBandNextYTR[152] = 0;
  isoBandNextOTR[152] = 1;

  isoBandNextXRT[156] = 0;
  isoBandNextYRT[156] = -1;
  isoBandNextORT[156] = 1;
  isoBandNextXBR[156] = 1;
  isoBandNextYBR[156] = 0;
  isoBandNextOBR[156] = 1;
  isoBandNextXBL[156] = -1;
  isoBandNextYBL[156] = 0;
  isoBandNextOBL[156] = 0;
  isoBandNextXLB[156] = 0;
  isoBandNextYLB[156] = -1;
  isoBandNextOLB[156] = 0;
  isoBandNextXLT[156] = 0;
  isoBandNextYLT[156] = 1;
  isoBandNextOLT[156] = 1;
  isoBandNextXTR[156] = -1;
  isoBandNextYTR[156] = 0;
  isoBandNextOTR[156] = 1;

  isoBandNextXRT[137] = 0;
  isoBandNextYRT[137] = 1;
  isoBandNextORT[137] = 1;
  isoBandNextXRB[137] = 0;
  isoBandNextYRB[137] = 1;
  isoBandNextORB[137] = 0;
  isoBandNextXBL[137] = -1;
  isoBandNextYBL[137] = 0;
  isoBandNextOBL[137] = 0;
  isoBandNextXLB[137] = 0;
  isoBandNextYLB[137] = -1;
  isoBandNextOLB[137] = 0;
  isoBandNextXTL[137] = 1;
  isoBandNextYTL[137] = 0;
  isoBandNextOTL[137] = 0;
  isoBandNextXTR[137] = 1;
  isoBandNextYTR[137] = 0;
  isoBandNextOTR[137] = 1;

  isoBandNextXRT[139] = 0;
  isoBandNextYRT[139] = 1;
  isoBandNextORT[139] = 1;
  isoBandNextXRB[139] = 0;
  isoBandNextYRB[139] = -1;
  isoBandNextORB[139] = 0;
  isoBandNextXBL[139] = 1;
  isoBandNextYBL[139] = 0;
  isoBandNextOBL[139] = 0;
  isoBandNextXLB[139] = 0;
  isoBandNextYLB[139] = 1;
  isoBandNextOLB[139] = 0;
  isoBandNextXTL[139] = -1;
  isoBandNextYTL[139] = 0;
  isoBandNextOTL[139] = 0;
  isoBandNextXTR[139] = 1;
  isoBandNextYTR[139] = 0;
  isoBandNextOTR[139] = 1;

  isoBandNextXRT[98] = 0;
  isoBandNextYRT[98] = -1;
  isoBandNextORT[98] = 0;
  isoBandNextXRB[98] = 0;
  isoBandNextYRB[98] = -1;
  isoBandNextORB[98] = 1;
  isoBandNextXBR[98] = 1;
  isoBandNextYBR[98] = 0;
  isoBandNextOBR[98] = 0;
  isoBandNextXBL[98] = 1;
  isoBandNextYBL[98] = 0;
  isoBandNextOBL[98] = 1;
  isoBandNextXLT[98] = 0;
  isoBandNextYLT[98] = 1;
  isoBandNextOLT[98] = 0;
  isoBandNextXTL[98] = -1;
  isoBandNextYTL[98] = 0;
  isoBandNextOTL[98] = 1;

  isoBandNextXRT[99] = 0;
  isoBandNextYRT[99] = 1;
  isoBandNextORT[99] = 0;
  isoBandNextXRB[99] = 0;
  isoBandNextYRB[99] = -1;
  isoBandNextORB[99] = 1;
  isoBandNextXBR[99] = 1;
  isoBandNextYBR[99] = 0;
  isoBandNextOBR[99] = 0;
  isoBandNextXBL[99] = -1;
  isoBandNextYBL[99] = 0;
  isoBandNextOBL[99] = 1;
  isoBandNextXLT[99] = 0;
  isoBandNextYLT[99] = -1;
  isoBandNextOLT[99] = 0;
  isoBandNextXTL[99] = 1;
  isoBandNextYTL[99] = 0;
  isoBandNextOTL[99] = 1;

  isoBandNextXRB[38] = 0;
  isoBandNextYRB[38] = -1;
  isoBandNextORB[38] = 1;
  isoBandNextXBR[38] = 1;
  isoBandNextYBR[38] = 0;
  isoBandNextOBR[38] = 0;
  isoBandNextXLB[38] = 0;
  isoBandNextYLB[38] = 1;
  isoBandNextOLB[38] = 1;
  isoBandNextXLT[38] = 0;
  isoBandNextYLT[38] = 1;
  isoBandNextOLT[38] = 0;
  isoBandNextXTL[38] = -1;
  isoBandNextYTL[38] = 0;
  isoBandNextOTL[38] = 1;
  isoBandNextXTR[38] = -1;
  isoBandNextYTR[38] = 0;
  isoBandNextOTR[38] = 0;

  isoBandNextXRB[39] = 0;
  isoBandNextYRB[39] = 1;
  isoBandNextORB[39] = 1;
  isoBandNextXBR[39] = -1;
  isoBandNextYBR[39] = 0;
  isoBandNextOBR[39] = 0;
  isoBandNextXLB[39] = 0;
  isoBandNextYLB[39] = -1;
  isoBandNextOLB[39] = 1;
  isoBandNextXLT[39] = 0;
  isoBandNextYLT[39] = 1;
  isoBandNextOLT[39] = 0;
  isoBandNextXTL[39] = -1;
  isoBandNextYTL[39] = 0;
  isoBandNextOTL[39] = 1;
  isoBandNextXTR[39] = 1;
  isoBandNextYTR[39] = 0;
  isoBandNextOTR[39] = 0;


  /*
   Define helper functions for the polygon_table
   */

  /* triangle cases */
  var p00 = function (cell) {
    return [[cell.bottomleft, 0], [0, 0], [0, cell.leftbottom]];
  };
  var p01 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0]];
  };
  var p02 = function (cell) {
    return [[cell.topright, 1], [1, 1], [1, cell.righttop]];
  };
  var p03 = function (cell) {
    return [[0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* trapezoid cases */
  var p04 = function (cell) {
    return [[cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop]];
  };
  var p05 = function (cell) {
    return [[cell.bottomright, 0], [cell.bottomleft, 0], [1, cell.righttop], [1, cell.rightbottom]];
  };
  var p06 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.topleft, 1], [cell.topright, 1]];
  };
  var p07 = function (cell) {
    return [[0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* rectangle cases */
  var p08 = function (cell) {
    return [[0, 0], [0, cell.leftbottom], [1, cell.rightbottom], [1, 0]];
  };
  var p09 = function (cell) {
    return [[1, 0], [cell.bottomright, 0], [cell.topright, 1], [1, 1]];
  };
  var p10 = function (cell) {
    return [[1, 1], [1, cell.righttop], [0, cell.lefttop], [0, 1]];
  };
  var p11 = function (cell) {
    return [[cell.bottomleft, 0], [0, 0], [0, 1], [cell.topleft, 1]];
  };
  var p12 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [0, cell.leftbottom], [0, cell.lefttop]];
  };
  var p13 = function (cell) {
    return [[cell.topleft, 1], [cell.topright, 1], [cell.bottomright, 0], [cell.bottomleft, 0]];
  };
  /* square case */
  var p14 = function () {
    return [[0, 0], [0, 1], [1, 1], [1, 0]];
  };
  /* pentagon cases */
  var p15 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [0, 0], [0, 1], [cell.topleft, 1]];
  };
  /* 1211 || 1011 */
  var p16 = function (cell) {
    return [[cell.topright, 1], [1, 1], [1, 0], [0, 0], [0, cell.leftbottom]];
  };
  /* 2111 || 0111 */
  var p17 = function (cell) {
    return [[1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [1, 1]];
  };
  /* 1112 || 1110 */
  var p18 = function (cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, 1]];
  };
  /* 1121 || 1101 */
  var p19 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1200 || 1022 */
  var p20 = function (cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [cell.topright, 1]];
  };
  /* 0120 || 2102 */
  var p21 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop]];
  };
  /* 0012 || 2210 */
  var p22 = function (cell) {
    return [[cell.topright, 1], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1]];
  };
  /* 2001 || 0221 */
  var p23 = function (cell) {
    return [[cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1002 || 1220 */
  var p24 = function (cell) {
    return [[1, 1], [1, cell.righttop], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
  };
  /* 2100 || 0122 */
  var p25 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 0210 || 2012 */
  var p26 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom]];
  };
  /* 0021 || 2201 */
  /*hexagon cases */
  var p27 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 0211 || 2011 */
  var p28 = function (cell) {
    return [[1, 1], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
  };
  /* 2110 || 0112 */
  var p29 = function (cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1]];
  };
  /* 1102 || 1120 */
  var p30 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, 1], [cell.topleft, 1]];
  };
  /* 1021 || 1201 */
  var p31 = function (cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topright, 1]];
  };
  /* 2101 || 0121 */
  var p32 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1012 || 1210 */
  /* 8-sided cases */
  var p33 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* flipped == 1 state for 0202 and 2020 */
  /* 6-sided cases */
  var p34 = function (cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topright, 1]];
  };
  /* 0101 with flipped == 1 || 2121 with flipped == 1 */
  var p35 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1010 with flipped == 1 || 1212 with flipped == 1 */
  /* 7-sided cases */
  var p36 = function (cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
  };
  /* 2120 with flipped == 1 || 0102 with flipped == 1 */
  var p37 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 2021 with flipped == 1 || 0201 with flipped == 1 */
  var p38 = function (cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1202 with flipped == 1 || 1020 with flipped == 1 */
  var p39 = function (cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 0212 with flipped == 1 || 2010 with flipped == 1 */



  /*
    The lookup tables for edge number given the polygon
    is entered at a specific location
  */

  var isoBandEdgeRT = [];
  var isoBandEdgeRB = [];
  var isoBandEdgeBR = [];
  var isoBandEdgeBL = [];
  var isoBandEdgeLB = [];
  var isoBandEdgeLT = [];
  var isoBandEdgeTL = [];
  var isoBandEdgeTR = [];

  /* triangle cases */
  isoBandEdgeBL[1]    = isoBandEdgeLB[1]    = 18;
  isoBandEdgeBL[169]  = isoBandEdgeLB[169]  = 18;
  isoBandEdgeBR[4]    = isoBandEdgeRB[4]    = 12;
  isoBandEdgeBR[166]  = isoBandEdgeRB[166]  = 12;
  isoBandEdgeRT[16]   = isoBandEdgeTR[16]   = 4;
  isoBandEdgeRT[154]  = isoBandEdgeTR[154]  = 4;
  isoBandEdgeLT[64]   = isoBandEdgeTL[64]   = 22;
  isoBandEdgeLT[106]  = isoBandEdgeTL[106]  = 22;

  /* trapezoid cases */
  isoBandEdgeBR[2]    = isoBandEdgeLT[2]    = 17;
  isoBandEdgeBL[2]    = isoBandEdgeLB[2]    = 18;
  isoBandEdgeBR[168]  = isoBandEdgeLT[168]  = 17;
  isoBandEdgeBL[168]  = isoBandEdgeLB[168]  = 18;
  isoBandEdgeRT[8]    = isoBandEdgeBL[8]    = 9;
  isoBandEdgeRB[8]    = isoBandEdgeBR[8]    = 12;
  isoBandEdgeRT[162]  = isoBandEdgeBL[162]  = 9;
  isoBandEdgeRB[162]  = isoBandEdgeBR[162]  = 12;
  isoBandEdgeRT[32]   = isoBandEdgeTR[32]   = 4;
  isoBandEdgeRB[32]   = isoBandEdgeTL[32]   = 1;
  isoBandEdgeRT[138]  = isoBandEdgeTR[138]  = 4;
  isoBandEdgeRB[138]  = isoBandEdgeTL[138]  = 1;
  isoBandEdgeLB[128]  = isoBandEdgeTR[128]  = 21;
  isoBandEdgeLT[128]  = isoBandEdgeTL[128]  = 22;
  isoBandEdgeLB[42]   = isoBandEdgeTR[42]   = 21;
  isoBandEdgeLT[42]   = isoBandEdgeTL[42]   = 22;

  /* rectangle cases */
  isoBandEdgeRB[5] = isoBandEdgeLB[5] = 14;
  isoBandEdgeRB[165] = isoBandEdgeLB[165] = 14;
  isoBandEdgeBR[20] = isoBandEdgeTR[20] = 6;
  isoBandEdgeBR[150] = isoBandEdgeTR[150] = 6;
  isoBandEdgeRT[80] = isoBandEdgeLT[80] = 11;
  isoBandEdgeRT[90] = isoBandEdgeLT[90] = 11;
  isoBandEdgeBL[65] = isoBandEdgeTL[65] = 3;
  isoBandEdgeBL[105] = isoBandEdgeTL[105] = 3;
  isoBandEdgeRT[160] = isoBandEdgeLT[160] = 11;
  isoBandEdgeRB[160] = isoBandEdgeLB[160] = 14;
  isoBandEdgeRT[10] = isoBandEdgeLT[10] = 11;
  isoBandEdgeRB[10] = isoBandEdgeLB[10] = 14;
  isoBandEdgeBR[130] = isoBandEdgeTR[130] = 6;
  isoBandEdgeBL[130] = isoBandEdgeTL[130] = 3;
  isoBandEdgeBR[40] = isoBandEdgeTR[40] = 6;
  isoBandEdgeBL[40] = isoBandEdgeTL[40] = 3;

  /* pentagon cases */
  isoBandEdgeRB[101] = isoBandEdgeTL[101] = 1;
  isoBandEdgeRB[69] = isoBandEdgeTL[69] = 1;
  isoBandEdgeLB[149] = isoBandEdgeTR[149] = 21;
  isoBandEdgeLB[21] = isoBandEdgeTR[21] = 21;
  isoBandEdgeBR[86] = isoBandEdgeLT[86] = 17;
  isoBandEdgeBR[84] = isoBandEdgeLT[84] = 17;
  isoBandEdgeRT[89] = isoBandEdgeBL[89] = 9;
  isoBandEdgeRT[81] = isoBandEdgeBL[81] = 9;
  isoBandEdgeRT[96] = isoBandEdgeTL[96] = 0;
  isoBandEdgeRB[96] = isoBandEdgeLT[96] = 15;
  isoBandEdgeRT[74] = isoBandEdgeTL[74] = 0;
  isoBandEdgeRB[74] = isoBandEdgeLT[74] = 15;
  isoBandEdgeRT[24] = isoBandEdgeBR[24] = 8;
  isoBandEdgeBL[24] = isoBandEdgeTR[24] = 7;
  isoBandEdgeRT[146] = isoBandEdgeBR[146] = 8;
  isoBandEdgeBL[146] = isoBandEdgeTR[146] = 7;
  isoBandEdgeRB[6] = isoBandEdgeLT[6] = 15;
  isoBandEdgeBR[6] = isoBandEdgeLB[6] = 16;
  isoBandEdgeRB[164] = isoBandEdgeLT[164] = 15;
  isoBandEdgeBR[164] = isoBandEdgeLB[164] = 16;
  isoBandEdgeBL[129] = isoBandEdgeTR[129] = 7;
  isoBandEdgeLB[129] = isoBandEdgeTL[129] = 20;
  isoBandEdgeBL[41] = isoBandEdgeTR[41] = 7;
  isoBandEdgeLB[41] = isoBandEdgeTL[41] = 20;
  isoBandEdgeBR[66] = isoBandEdgeTL[66] = 2;
  isoBandEdgeBL[66] = isoBandEdgeLT[66] = 19;
  isoBandEdgeBR[104] = isoBandEdgeTL[104] = 2;
  isoBandEdgeBL[104] = isoBandEdgeLT[104] = 19;
  isoBandEdgeRT[144] = isoBandEdgeLB[144] = 10;
  isoBandEdgeLT[144] = isoBandEdgeTR[144] = 23;
  isoBandEdgeRT[26] = isoBandEdgeLB[26] = 10;
  isoBandEdgeLT[26] = isoBandEdgeTR[26] = 23;
  isoBandEdgeRB[36] = isoBandEdgeTR[36] = 5;
  isoBandEdgeBR[36] = isoBandEdgeTL[36] = 2;
  isoBandEdgeRB[134] = isoBandEdgeTR[134] = 5;
  isoBandEdgeBR[134] = isoBandEdgeTL[134] = 2;
  isoBandEdgeRT[9] = isoBandEdgeLB[9] = 10;
  isoBandEdgeRB[9] = isoBandEdgeBL[9] = 13;
  isoBandEdgeRT[161] = isoBandEdgeLB[161] = 10;
  isoBandEdgeRB[161] = isoBandEdgeBL[161] = 13;

  /* hexagon cases */
  isoBandEdgeRB[37] = isoBandEdgeTR[37] = 5;
  isoBandEdgeLB[37] = isoBandEdgeTL[37] = 20;
  isoBandEdgeRB[133] = isoBandEdgeTR[133] = 5;
  isoBandEdgeLB[133] = isoBandEdgeTL[133] = 20;
  isoBandEdgeBR[148] = isoBandEdgeLB[148] = 16;
  isoBandEdgeLT[148] = isoBandEdgeTR[148] = 23;
  isoBandEdgeBR[22] = isoBandEdgeLB[22] = 16;
  isoBandEdgeLT[22] = isoBandEdgeTR[22] = 23;
  isoBandEdgeRT[82] = isoBandEdgeBR[82] = 8;
  isoBandEdgeBL[82] = isoBandEdgeLT[82] = 19;
  isoBandEdgeRT[88] = isoBandEdgeBR[88] = 8;
  isoBandEdgeBL[88] = isoBandEdgeLT[88] = 19;
  isoBandEdgeRT[73] = isoBandEdgeTL[73] = 0;
  isoBandEdgeRB[73] = isoBandEdgeBL[73] = 13;
  isoBandEdgeRT[97] = isoBandEdgeTL[97] = 0;
  isoBandEdgeRB[97] = isoBandEdgeBL[97] = 13;
  isoBandEdgeRT[145] = isoBandEdgeBL[145] = 9;
  isoBandEdgeLB[145] = isoBandEdgeTR[145] = 21;
  isoBandEdgeRT[25] = isoBandEdgeBL[25] = 9;
  isoBandEdgeLB[25] = isoBandEdgeTR[25] = 21;
  isoBandEdgeRB[70] = isoBandEdgeTL[70] = 1;
  isoBandEdgeBR[70] = isoBandEdgeLT[70] = 17;
  isoBandEdgeRB[100] = isoBandEdgeTL[100] = 1;
  isoBandEdgeBR[100] = isoBandEdgeLT[100] = 17;

  /* 8-sided cases */
  isoBandEdgeRT[34] = isoBandEdgeBL[34] = 9;
  isoBandEdgeRB[34] = isoBandEdgeBR[34] = 12;
  isoBandEdgeLB[34] = isoBandEdgeTR[34] = 21;
  isoBandEdgeLT[34] = isoBandEdgeTL[34] = 22;
  isoBandEdgeRT[136] = isoBandEdgeTR[136] = 4;
  isoBandEdgeRB[136] = isoBandEdgeTL[136] = 1;
  isoBandEdgeBR[136] = isoBandEdgeLT[136] = 17;
  isoBandEdgeBL[136] = isoBandEdgeLB[136] = 18;
  isoBandEdgeRT[35] = isoBandEdgeTR[35] = 4;
  isoBandEdgeRB[35] = isoBandEdgeBR[35] = 12;
  isoBandEdgeBL[35] = isoBandEdgeLB[35] = 18;
  isoBandEdgeLT[35] = isoBandEdgeTL[35] = 22;

  /* 6-sided cases */
  isoBandEdgeRT[153] = isoBandEdgeTR[153] = 4;
  isoBandEdgeBL[153] = isoBandEdgeLB[153] = 18;
  isoBandEdgeRB[102] = isoBandEdgeBR[102] = 12;
  isoBandEdgeLT[102] = isoBandEdgeTL[102] = 22;
  isoBandEdgeRT[155] = isoBandEdgeBL[155] = 9;
  isoBandEdgeLB[155] = isoBandEdgeTR[155] = 23;
  isoBandEdgeRB[103] = isoBandEdgeTL[103] = 1;
  isoBandEdgeBR[103] = isoBandEdgeLT[103] = 17;

  /* 7-sided cases */
  isoBandEdgeRT[152] = isoBandEdgeTR[152] = 4;
  isoBandEdgeBR[152] = isoBandEdgeLT[152] = 17;
  isoBandEdgeBL[152] = isoBandEdgeLB[152] = 18;
  isoBandEdgeRT[156] = isoBandEdgeBR[156] = 8;
  isoBandEdgeBL[156] = isoBandEdgeLB[156] = 18;
  isoBandEdgeLT[156] = isoBandEdgeTR[156] = 23;
  isoBandEdgeRT[137] = isoBandEdgeTR[137] = 4;
  isoBandEdgeRB[137] = isoBandEdgeTL[137] = 1;
  isoBandEdgeBL[137] = isoBandEdgeLB[137] = 18;
  isoBandEdgeRT[139] = isoBandEdgeTR[139] = 4;
  isoBandEdgeRB[139] = isoBandEdgeBL[139] = 13;
  isoBandEdgeLB[139] = isoBandEdgeTL[139] = 20;
  isoBandEdgeRT[98] = isoBandEdgeBL[98] = 9;
  isoBandEdgeRB[98] = isoBandEdgeBR[98] = 12;
  isoBandEdgeLT[98] = isoBandEdgeTL[98] = 22;
  isoBandEdgeRT[99] = isoBandEdgeTL[99] = 0;
  isoBandEdgeRB[99] = isoBandEdgeBR[99] = 12;
  isoBandEdgeBL[99] = isoBandEdgeLT[99] = 19;
  isoBandEdgeRB[38] = isoBandEdgeBR[38] = 12;
  isoBandEdgeLB[38] = isoBandEdgeTR[38] = 21;
  isoBandEdgeLT[38] = isoBandEdgeTL[38] = 22;
  isoBandEdgeRB[39] = isoBandEdgeTR[39] = 5;
  isoBandEdgeBR[39] = isoBandEdgeLB[39] = 16;
  isoBandEdgeLT[39] = isoBandEdgeTL[39] = 22;

  /*
    The lookup tables for all different polygons that
    may appear within a grid cell
  */

  var polygon_table = [];

  /* triangle cases */
  polygon_table[1] = polygon_table[169] = p00; /* 2221 || 0001 */
  polygon_table[4] = polygon_table[166] = p01; /* 2212 || 0010 */
  polygon_table[16] = polygon_table[154] = p02; /* 2122 || 0100 */
  polygon_table[64] = polygon_table[106] = p03; /* 1222 || 1000 */

  /* trapezoid cases */
  polygon_table[168] = polygon_table[2] = p04; /* 2220 || 0002 */
  polygon_table[162] = polygon_table[8] = p05; /* 2202 || 0020 */
  polygon_table[138] = polygon_table[32] = p06; /* 2022 || 0200 */
  polygon_table[42] = polygon_table[128] = p07; /* 0222 || 2000 */

  /* rectangle cases */
  polygon_table[5] = polygon_table[165] = p08; /* 0011 || 2211 */
  polygon_table[20] = polygon_table[150] = p09; /* 0110 || 2112 */
  polygon_table[80] = polygon_table[90] = p10; /* 1100 || 1122 */
  polygon_table[65] = polygon_table[105] = p11; /* 1001 || 1221 */
  polygon_table[160] = polygon_table[10] = p12; /* 2200 || 0022 */
  polygon_table[130] = polygon_table[40] = p13; /* 2002 || 0220 */

  /* square case */
  polygon_table[85] = p14; /* 1111 */

  /* pentagon cases */
  polygon_table[101] = polygon_table[69] = p15; /* 1211 || 1011 */
  polygon_table[149] = polygon_table[21] = p16; /* 2111 || 0111 */
  polygon_table[86] = polygon_table[84] = p17; /* 1112 || 1110 */
  polygon_table[89] = polygon_table[81] = p18; /* 1121 || 1101 */
  polygon_table[96] = polygon_table[74] = p19; /* 1200 || 1022 */
  polygon_table[24] = polygon_table[146] = p20; /* 0120 || 2102 */
  polygon_table[6] = polygon_table[164] = p21; /* 0012 || 2210 */
  polygon_table[129] = polygon_table[41] = p22; /* 2001 || 0221 */
  polygon_table[66] = polygon_table[104] = p23; /* 1002 || 1220 */
  polygon_table[144] = polygon_table[26] = p24; /* 2100 || 0122 */
  polygon_table[36] = polygon_table[134] = p25; /* 0210 || 2012 */
  polygon_table[9] = polygon_table[161] = p26; /* 0021 || 2201 */

  /* hexagon cases */
  polygon_table[37] = polygon_table[133] = p27; /* 0211 || 2011 */
  polygon_table[148] = polygon_table[22] = p28; /* 2110 || 0112 */
  polygon_table[82] = polygon_table[88] = p29; /* 1102 || 1120 */
  polygon_table[73] = polygon_table[97] = p30; /* 1021 || 1201 */
  polygon_table[145] = polygon_table[25] = p31; /* 2101 || 0121 */
  polygon_table[70] = polygon_table[100] = p32; /* 1012 || 1210 */

  /* 8-sided cases */
  polygon_table[34] = function(c){ return [ p07(c), p05(c) ];}; /* 0202 || 2020 with flipped == 0 */
  polygon_table[35] = p33; /* flipped == 1 state for 0202 and 2020 */
  polygon_table[136] = function(c){ return [ p06(c), p04(c) ];}; /* 2020 || 0202 with flipped == 0 */

  /* 6-sided cases */
  polygon_table[153] = function(c){ return [ p02(c), p00(c) ];}; /* 0101 with flipped == 0 || 2121 with flipped == 2 */
  polygon_table[102] = function(c){ return [ p01(c), p03(c) ];}; /* 1010 with flipped == 0 || 1212 with flipped == 2 */
  polygon_table[155] = p34; /* 0101 with flipped == 1 || 2121 with flipped == 1 */
  polygon_table[103] = p35; /* 1010 with flipped == 1 || 1212 with flipped == 1 */

  /* 7-sided cases */
  polygon_table[152] = function(c){ return [ p02(c), p04(c) ];}; /* 2120 with flipped == 2 || 0102 with flipped == 0 */
  polygon_table[156] = p36; /* 2120 with flipped == 1 || 0102 with flipped == 1 */
  polygon_table[137] = function(c){ return [ p06(c), p00(c) ];}; /* 2021 with flipped == 2 || 0201 with flipped == 0 */
  polygon_table[139] = p37; /* 2021 with flipped == 1 || 0201 with flipped == 1 */
  polygon_table[98] = function(c){ return [ p05(c), p03(c) ];}; /* 1202 with flipped == 2 || 1020 with flipped == 0 */
  polygon_table[99] = p38; /* 1202 with flipped == 1 || 1020 with flipped == 1 */
  polygon_table[38] = function(c){ return [ p01(c), p07(c) ];}; /* 0212 with flipped == 2 || 2010 with flipped == 0 */
  polygon_table[39] = p39; /* 0212 with flipped == 1 || 2010 with flipped == 1 */
  
  
  /*
  ####################################
  Some small helper functions
  ####################################
  */

  /* assume that x1 == 1 &&  x0 == 0 */
  function interpolateX(y, y0, y1){
    return (y - y0) / (y1 - y0);
  }

  function isArray(myArray) {
    return myArray.constructor.toString().indexOf("Array") > -1;
  }

  /*
  ####################################
  Below is the actual Marching Squares implementation
  ####################################
  */

  function computeBandGrid(data, minV, bandwidth){
    var rows = data.length - 1;
    var cols = data[0].length - 1;
    var BandGrid = { rows: rows, cols: cols, cells: [] };

    var maxV = minV + Math.abs(bandwidth);

    for(var j = 0; j < rows; ++j){
      BandGrid.cells[j] = [];
      for(var i = 0; i < cols; ++i){
        /*  compose the 4-trit corner representation */
        var cval = 0;

        var tl = data[j+1][i];
        var tr = data[j+1][i+1];
        var br = data[j][i+1];
        var bl = data[j][i];

        if(isNaN(tl) || isNaN(tr) || isNaN(br) || isNaN(bl)){
          continue;
        }

        cval |= (tl < minV) ? 0 : (tl > maxV) ? 128 : 64;
        cval |= (tr < minV) ? 0 : (tr > maxV) ? 32 : 16;
        cval |= (br < minV) ? 0 : (br > maxV) ? 8 : 4;
        cval |= (bl < minV) ? 0 : (bl > maxV) ? 2 : 1;

        var cval_real = +cval;

        /* resolve ambiguity via averaging */
        var flipped = 0;
        if(     (cval === 17) /* 0101 */
            ||  (cval === 18) /* 0102 */
            ||  (cval === 33) /* 0201 */
            ||  (cval === 34) /* 0202 */
            ||  (cval === 38) /* 0212 */
            ||  (cval === 68) /* 1010 */
            ||  (cval === 72) /* 1020 */
            ||  (cval === 98) /* 1202 */
            ||  (cval === 102) /* 1212 */
            ||  (cval === 132) /* 2010 */
            ||  (cval === 136) /* 2020 */
            ||  (cval === 137) /* 2021 */
            ||  (cval === 152) /* 2120 */
            ||  (cval === 153) /* 2121 */
        ){
          var average = (tl + tr + br + bl) / 4;
          /* set flipped state */
          flipped = (average > maxV) ? 2 : (average < minV) ? 0 : 1;

          /* adjust cval for flipped cases */

          /* 8-sided cases */
          if(cval === 34){
            if(flipped === 1){
              cval = 35;
            } else if(flipped === 0){
              cval = 136;
            }
          } else if(cval === 136){
            if(flipped === 1){
              cval = 35;
              flipped = 4;
            } else if(flipped === 0){
              cval = 34;
            }
          }

          /* 6-sided polygon cases */
          else if(cval === 17){
            if(flipped === 1){
              cval = 155;
              flipped = 4;
            } else if(flipped === 0){
              cval = 153;
            }
          } else if(cval === 68){
            if(flipped === 1){
              cval = 103;
              flipped = 4;
            } else if(flipped === 0){
              cval = 102;
            }
          } else if(cval === 153){
            if(flipped === 1)
              cval = 155;
          } else if(cval === 102){
            if(flipped === 1)
              cval = 103;
          }

          /* 7-sided polygon cases */
          else if(cval === 152){
            if(flipped < 2){
              cval    = 156;
              flipped = 1;
            }
          } else if(cval === 137){
            if(flipped < 2){
              cval = 139;
              flipped = 1;
            }
          } else if(cval === 98){
            if(flipped < 2){
              cval    = 99;
              flipped = 1;
            }
          } else if(cval === 38){
            if(flipped < 2){
              cval    = 39;
              flipped = 1;
            }
          } else if(cval === 18){
            if(flipped > 0){
              cval = 156;
              flipped = 4;
            } else {
              cval = 152;
            }
          } else if(cval === 33){
            if(flipped > 0){
              cval = 139;
              flipped = 4;
            } else {
              cval = 137;
            }
          } else if(cval === 72){
            if(flipped > 0){
              cval = 99;
              flipped = 4;
            } else {
              cval = 98;
            }
          } else if(cval === 132){
            if(flipped > 0){
              cval = 39;
              flipped = 4;
            } else {
              cval = 38;
            }
          }
        }

        /* add cell to BandGrid if it contains at least one polygon-side */
        if((cval != 0) && (cval != 170)){
          var topleft, topright, bottomleft, bottomright,
              righttop, rightbottom, lefttop, leftbottom;

          topleft = topright = bottomleft = bottomright = righttop
                  = rightbottom = lefttop = leftbottom = 0.5;

          var edges = [];

          /* do interpolation here */
          /* 1st Triangles */
          if(cval === 1){ /* 0001 */
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 169){ /* 2221 */
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 4){ /* 0010 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = interpolateX(minV, bl, br);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 166){ /* 2212 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = 1 - interpolateX(maxV, br, bl);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 16){ /* 0100 */
            righttop = interpolateX(minV, br, tr);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
          } else if(cval === 154){ /* 2122 */
            righttop = 1 - interpolateX(maxV, tr, br);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
          } else if(cval === 64){ /* 1000 */
            lefttop = interpolateX(minV, bl, tl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 106){ /* 1222 */
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeLT[cval]);
          }
          /* 2nd Trapezoids */
          else if(cval === 168){ /* 2220 */
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 2){ /* 0002 */
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 162){ /* 2202 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 8){ /* 0020 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 138){ /* 2022 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 32){ /* 0200 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 42){ /* 0222 */
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 128){ /* 2000 */
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          }

          /* 3rd rectangle cases */
          if(cval === 5){ /* 0011 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 165){ /* 2211 */
            rightbottom = interpolateX(maxV, br, tr);
            leftbottom = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 20){ /* 0110 */
            bottomright = interpolateX(minV, bl, br);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 150){ /* 2112 */
            bottomright = 1 - interpolateX(maxV, br, bl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 80){ /* 1100 */
            righttop = interpolateX(minV, br, tr);
            lefttop = interpolateX(minV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
          } else if(cval === 90){ /* 1122 */
            righttop = 1 - interpolateX(maxV, tr, br);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
          } else if(cval === 65){ /* 1001 */
            bottomleft = 1 - interpolateX(minV, br, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 105){ /* 1221 */
            bottomleft = interpolateX(maxV, bl, br);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 160){ /* 2200 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 10){ /* 0022 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 130){ /* 2002 */
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 40){ /* 0220 */
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          }

          /* 4th single pentagon cases */
          else if(cval === 101){ /* 1211 */
            rightbottom = interpolateX(maxV, br, tr);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 69){ /* 1011 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 149){ /* 2111 */
            leftbottom = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 21){ /* 0111 */
            leftbottom = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 86){ /* 1112 */
            bottomright = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 84){ /* 1110 */
            bottomright = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 89){ /* 1121 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 81){ /* 1101 */
            righttop = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 96){ /* 1200 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            lefttop = interpolateX(minV, bl, tl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 74){ /* 1022 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1- interpolateX(maxV, tr, br);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 24){ /* 0120 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 146){ /* 2102 */
            righttop = interpolateX(minV, br, tr);
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 6){ /* 0012 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = 1 - interpolateX(maxV, br, bl);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 164){ /* 2210 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = interpolateX(minV, bl, br);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 129){ /* 2001 */
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = interpolateX(maxV, bl, tl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 41){ /* 0221 */
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 66){ /* 1002 */
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 104){ /* 1220 */
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeTL[cval]);
          } else if(cval === 144){ /* 2100 */
            righttop = interpolateX(minV, br, tr);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 26){ /* 0122 */
            righttop = 1 - interpolateX(maxV, tr, br);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 36){ /* 0210 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = interpolateX(minV, bl, br);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 134){ /* 2012 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = 1 - interpolateX(maxV, br, bl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 9){ /* 0021 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 161){ /* 2201 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          }

          /* 5th single hexagon cases */
          else if(cval === 37){ /* 0211 */
            rightbottom = interpolateX(maxV, br, tr);
            leftbottom = 1- interpolateX(minV, tl, bl);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 133){ /* 2011 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            leftbottom = interpolateX(maxV, bl, tl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 148){ /* 2110 */
            bottomright = interpolateX(minV, bl, br);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 22){ /* 0112 */
            bottomright = 1 - interpolateX(maxV, br, bl);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 82){ /* 1102 */
            righttop = interpolateX(minV, br, tr);
            bottomright = 1- interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 88){ /* 1120 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 73){ /* 1021 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 97){ /* 1201 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if(cval === 145){ /* 2101 */
            righttop = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 25){ /* 0121 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 70){ /* 1012 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if(cval === 100){ /* 1210 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          }

          /* 8-sided cases */
          else if(cval === 34){ /* 0202 || 2020 with flipped == 0 */
            if(flipped === 0){
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 35){ /* flipped == 1 state for 0202, and 2020 with flipped == 4*/
            if(flipped === 4){
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 136){ /* 2020 || 0202 with flipped == 0 */
            if(flipped === 0){
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            } else {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          }

          /* 6-sided polygon cases */
          else if(cval === 153){ /* 0101 with flipped == 0 || 2121 with flipped == 2 */
            if(flipped === 0){
              righttop = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 102){ /* 1010 with flipped == 0 || 1212 with flipped == 2 */
            if(flipped === 0){
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 155){ /* 0101 with flipped == 4 || 2121 with flipped == 1 */
            if(flipped === 4){
              righttop = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 103){ /* 1010 with flipped == 4 || 1212 with flipped == 1 */
            if(flipped === 4){
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          }

          /* 7-sided polygon cases */
          else if(cval === 152){ /* 2120 with flipped == 2 || 0102 with flipped == 0 */
            if(flipped === 0){
              righttop = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 156){ /* 2120 with flipped == 1 || 0102 with flipped == 4 */
            if(flipped === 4){
              righttop = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 137){ /* 2021 with flipped == 2 || 0201 with flipped == 0 */
            if(flipped === 0){
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            } else {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 139){ /* 2021 with flipped == 1 || 0201 with flipped == 4 */
            if(flipped === 4){
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            } else {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if(cval === 98){ /* 1202 with flipped == 2 || 1020 with flipped == 0 */
            if(flipped === 0){
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 99){ /* 1202 with flipped == 1 || 1020 with flipped == 4 */
            if(flipped === 4){
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if(cval === 38){ /* 0212 with flipped == 2 || 2010 with flipped == 0 */
            if(flipped === 0){
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if(cval === 39){ /* 0212 with flipped == 1 || 2010 with flipped == 4 */
            if(flipped === 4){
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeLT[cval]);
          }

          else if(cval === 85){
            righttop = 1;
            rightbottom = 0;
            bottomright = 1;
            bottomleft = 0;
            leftbottom = 0;
            lefttop = 1;
            topleft = 0;
            topright = 1;
          }

          if(topleft < 0 || topleft > 1 || topright < 0 || topright > 1 || righttop < 0 || righttop > 1 || bottomright < 0 || bottomright > 1 || leftbottom < 0 || leftbottom > 1 || lefttop < 0 || lefttop > 1){
            console.log("MarchingSquaresJS-isoBands: " + cval + " " + cval_real + " " + tl + "," + tr + "," + br + "," + bl + " " + flipped + " " + topleft + " " + topright + " " + righttop + " " + rightbottom + " " + bottomright + " " + bottomleft + " " + leftbottom + " " + lefttop);
          }

          BandGrid.cells[j][i] = {
                                    cval:         cval,
                                    cval_real:    cval_real,
                                    flipped:      flipped,
                                    topleft:      topleft,
                                    topright:     topright,
                                    righttop:     righttop,
                                    rightbottom:  rightbottom,
                                    bottomright:  bottomright,
                                    bottomleft:   bottomleft,
                                    leftbottom:   leftbottom,
                                    lefttop:      lefttop,
                                    edges:        edges
                                };
        }
      }
    }

    return BandGrid;
  }

  function BandGrid2AreaPaths(grid){
    var areas = [];
    var rows = grid.rows;
    var cols = grid.cols;
    var currentPolygon = [];

    for(var j = 0; j < rows; j++){
      for(var i = 0; i < cols; i++){
        if((typeof grid.cells[j][i] !== 'undefined') && (grid.cells[j][i].edges.length > 0)){
          /* trace back polygon path starting from this cell */

          var cell = grid.cells[j][i];

          /* get start coordinates */

          var prev  = getStartXY(cell),
              next  = null,
              p     = i,
              q     = j;

          if(prev !== null){
            currentPolygon.push([ prev.p[0] + p, prev.p[1] + q ]);
            //console.log(cell);
            //console.log("coords: " + (prev.p[0] + p) + " " + (prev.p[1] + q));
          }

          do{
            //console.log(p + "," + q);
            //console.log(grid.cells[q][p]);
            //console.log(grid.cells[q][p].edges);
            //console.log("from : " + prev.x + " " + prev.y + " " + prev.o);

            next = getExitXY(grid.cells[q][p], prev.x, prev.y, prev.o);
            if(next !== null){
              //console.log("coords: " + (next.p[0] + p) + " " + (next.p[1] + q));
              currentPolygon.push([ next.p[0] + p, next.p[1] + q ]);
              p += next.x;
              q += next.y;
              prev = next;
            } else {
              //console.log("getExitXY() returned null!");
              break;
            }
            //console.log("to : " + next.x + " " + next.y + " " + next.o);
            /* special case, where we've reached the grid boundaries */
            if((q < 0) || (q >= rows) || (p < 0) || (p >= cols) || (typeof grid.cells[q][p] === 'undefined')){
              /* to create a closed path, we need to trace our way
                  arround the missing data, until we find an entry
                  point again
              */

              /* set back coordinates of current cell */
              p -= next.x;
              q -= next.y;

              //console.log("reached boundary at " + p + " " + q);

              var missing = traceOutOfGridPath(grid, p, q, next.x, next.y, next.o);
              if(missing !== null){
                missing.path.forEach(function(pp){
                  //console.log("coords: " + (pp[0]) + " " + (pp[1]));
                  currentPolygon.push(pp);
                });
                p = missing.i;
                q = missing.j;
                prev = missing;
              } else {
                break;
              }
              //console.log(grid.cells[q][p]);
            }
          } while(    (typeof grid.cells[q][p] !== 'undefined')
                   && (grid.cells[q][p].edges.length > 0));

          areas.push(currentPolygon);
          //console.log("next polygon");
          //console.log(currentPolygon);
          currentPolygon = [];
          if(grid.cells[j][i].edges.length > 0)
            i--;
        }
      }
    }
    return areas;
  }

  function traceOutOfGridPath(grid, i, j, d_x, d_y, d_o){
    var cell = grid.cells[j][i];
    var cval = cell.cval_real;
    var p = i + d_x,
        q = j + d_y;
    var path = [];
    var closed = false;

    while(!closed){
      //console.log("processing cell " + p + "," + q + " " + d_x + " " + d_y + " " + d_o);
      if((typeof grid.cells[q] === 'undefined') || (typeof grid.cells[q][p] === 'undefined')){
        //console.log("which is undefined");
        /* we can't move on, so we have to change direction to proceed further */

        /* go back to previous cell */
        q -= d_y;
        p -= d_x;
        cell = grid.cells[q][p];
        cval = cell.cval_real;

        /* check where we've left defined cells of the grid... */
        if(d_y === -1){ /* we came from top */
          if(d_o === 0){  /* exit left */
            if(cval & Node3){ /* lower left node is within range, so we move left */
              path.push([p, q]);
              d_x = -1;
              d_y = 0;
              d_o = 0;
            } else if(cval & Node2){ /* lower right node is within range, so we move right */
              path.push([p + 1, q]);
              d_x = 1;
              d_y = 0;
              d_o = 0;
            } else { /* close the path */
              path.push([p + cell.bottomright, q]);
              d_x = 0;
              d_y = 1;
              d_o = 1;
              closed = true;
              break;
            }
          } else {
            if(cval & Node3){
              path.push([p, q]);
              d_x = -1;
              d_y = 0;
              d_o = 0;
            } else if(cval & Node2){
              path.push([p + cell.bottomright, q]);
              d_x = 0;
              d_y = 1;
              d_o = 1;
              closed = true;
              break;
            } else {
              path.push([p + cell.bottomleft, q]);
              d_x = 0;
              d_y = 1;
              d_o = 0;
              closed = true;
              break;
            }
          }
        } else if(d_y === 1){ /* we came from bottom */
          //console.log("we came from bottom and hit a non-existing cell " + (p + d_x) + "," + (q + d_y) + "!");
          if(d_o === 0){ /* exit left */
            if(cval & Node1){ /* top right node is within range, so we move right */
              path.push([p+1,q+1]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
            } else if(!(cval & Node0)){ /* found entry within same cell */
              path.push([p + cell.topright, q + 1]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
              closed = true;
              //console.log("found entry from bottom at " + p + "," + q);
              break;
            } else {
              path.push([p + cell.topleft, q + 1]);
              d_x = 0;
              d_y = -1;
              d_o = 0;
              closed = true;
              break;
            }
          } else {
            if(cval & Node1){
              path.push([p+1, q+1]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
            } else { /* move right */
              path.push([p+1, q+1]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
              //console.log("wtf");
              //break;
            }
          }
        } else if(d_x === -1){ /* we came from right */
          //console.log("we came from right and hit a non-existing cell at " + (p + d_x) + "," + (q + d_y) + "!");
          if(d_o === 0){
            //console.log("continue at bottom");
            if(cval & Node0){
              path.push([p,q+1]);
              d_x = 0;
              d_y = 1;
              d_o = 0;
              //console.log("moving upwards to " + (p + d_x) + "," + (q + d_y) + "!");
            } else if(!(cval & Node3)){ /* there has to be an entry into the regular grid again! */
              //console.log("exiting top");
              path.push([p, q + cell.lefttop]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
              closed = true;
              break;
            } else {
              //console.log("exiting bottom");
              path.push([p, q + cell.leftbottom]);
              d_x = 1;
              d_y = 0;
              d_o = 0;
              closed = true;
              break;
            }
          } else {
            //console.log("continue at top");
            if(cval & Node0){
              path.push([p,q+1]);
              d_x = 0;
              d_y = 1;
              d_o = 0;
              //console.log("moving upwards to " + (p + d_x) + "," + (q + d_y) + "!");
            } else { /* */
              console.log("MarchingSquaresJS-isoBands: wtf");
              break;
            }
          }
        } else if(d_x === 1){ /* we came from left */
          //console.log("we came from left and hit a non-existing cell " + (p + d_x) + "," + (q + d_y) + "!");
          if(d_o === 0){ /* exit bottom */
            if(cval & Node2){
              path.push([p+1,q]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else {
              path.push([p+1,q+cell.rightbottom]);
              d_x = -1;
              d_y = 0;
              d_o = 0;
              closed = true;
              break;
            }
          } else { /* exit top */
            if(cval & Node2){
              path.push([p+1,q]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else if(!(cval & Node1)){
              path.push([p + 1, q + cell.rightbottom]);
              d_x = -1;
              d_y = 0;
              d_o = 0;
              closed = true;
              break;
            } else {
              path.push([p+1,q+cell.righttop]);
              d_x = -1;
              d_y = 0;
              d_o = 1;
              break;
            }
          }
        } else { /* we came from the same cell */
          console.log("MarchingSquaresJS-isoBands: we came from nowhere!");
          break;
        }

      } else { /* try to find an entry into the regular grid again! */
        cell = grid.cells[q][p];
        cval = cell.cval_real;
        //console.log("which is defined");

        if(d_x === -1){
          if(d_o === 0){
            /* try to go downwards */
            if((typeof grid.cells[q - 1] !== 'undefined') && (typeof grid.cells[q - 1][p] !== 'undefined')){
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else if(cval & Node3){ /* proceed searching in x-direction */
              //console.log("proceeding in x-direction!");
              path.push([p, q]);
            } else { /* we must have found an entry into the regular grid */
              path.push([p + cell.bottomright, q]);
              d_x = 0;
              d_y = 1;
              d_o = 1;
              closed = true;
              //console.log("found entry from bottom at " + p + "," + q);
              break;
            }
          } else {
            if(cval & Node0) { /* proceed searchin in x-direction */
              console.log("MarchingSquaresJS-isoBands: proceeding in x-direction!");
            } else { /* we must have found an entry into the regular grid */
              console.log("MarchingSquaresJS-isoBands: found entry from top at " + p + "," + q);
              break;
            }
          }
        } else if(d_x === 1){
          if(d_o === 0){
            console.log("MarchingSquaresJS-isoBands: wtf");
            break;
          } else {
            /* try to go upwards */
            if((typeof grid.cells[q+1] !== 'undefined') && (typeof grid.cells[q+1][p] !== 'undefined')){
              d_x = 0;
              d_y = 1;
              d_o = 0;
            } else if(cval & Node1){
              path.push([p+1,q+1]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
            } else { /* found an entry point into regular grid! */
              path.push([p+cell.topleft, q + 1]);
              d_x = 0;
              d_y = -1;
              d_o = 0;
              closed = true;
              //console.log("found entry from bottom at " + p + "," + q);
              break;
            }
          }
        } else if(d_y === -1){
          if(d_o === 1){
            /* try to go right */
            if(typeof grid.cells[q][p+1] !== 'undefined'){
              d_x = 1;
              d_y = 0;
              d_o = 1;
            } else if(cval & Node2){
              path.push([p+1,q]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else { /* found entry into regular grid! */
              path.push([p+1, q + cell.righttop]);
              d_x = -1;
              d_y = 0;
              d_o = 1;
              closed = true;
              //console.log("found entry from top at " + p + "," + q);
              break;
            }
          } else {
            console.log("MarchingSquaresJS-isoBands: wtf");
            break;
          }
        } else if(d_y === 1){
          if(d_o === 0){
            //console.log("we came from bottom left and proceed to the left");
            /* try to go left */
            if(typeof grid.cells[q][p - 1] !== 'undefined'){
              d_x = -1;
              d_y = 0;
              d_o = 0;
            } else if(cval & Node0){
              path.push([p,q+1]);
              d_x = 0;
              d_y = 1;
              d_o = 0;
            } else { /* found an entry point into regular grid! */
              path.push([p, q + cell.leftbottom]);
              d_x = 1;
              d_y = 0;
              d_o = 0;
              closed = true;
              //console.log("found entry from bottom at " + p + "," + q);
              break;
            }
          } else {
            //console.log("we came from bottom right and proceed to the right");
            console.log("MarchingSquaresJS-isoBands: wtf");
            break;
          }
        } else {
          console.log("MarchingSquaresJS-isoBands: where did we came from???");
          break;
        }

      }

      p += d_x;
      q += d_y;
      //console.log("going on to  " + p + "," + q + " via " + d_x + " " + d_y + " " + d_o);

      if((p === i) && (q === j)){ /* bail out, once we've closed a circle path */
        break;
      }

    }

    //console.log("exit with " + p + "," + q + " " + d_x + " " + d_y + " " + d_o);
    return { path: path, i: p, j: q, x: d_x, y: d_y, o: d_o };
  }

  function deleteEdge(cell, edgeIdx){
    delete cell.edges[edgeIdx];
    for(var k = edgeIdx + 1; k < cell.edges.length; k++){
      cell.edges[k-1] = cell.edges[k];
    }
    cell.edges.pop();
  }

  function getStartXY(cell){

    if(cell.edges.length > 0){
      var e = cell.edges[cell.edges.length - 1];
      //console.log("starting with edge " + e);
      var cval = cell.cval_real;
      switch(e){
        case 0:   if(cval & Node1){ /* node 1 within range */
                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};
                  } else { /* node 1 below or above threshold */
                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};
                  }
        case 1:   if(cval & Node2){
                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};
                  } else {
                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};
                  }
        case 2:   if(cval & Node2){
                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};
                  } else {
                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};
                  }
        case 3:   if(cval & Node3){
                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};
                  } else {
                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};
                  }
        case 4:   if(cval & Node1){
                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};
                  } else {
                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};
                  }
        case 5:   if(cval & Node2){
                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};
                  } else {
                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};
                  }
        case 6:   if(cval & Node2){
                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};
                  } else {
                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};
                  }
        case 7:   if(cval & Node3){
                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};
                  } else {
                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};
                  }
        case 8:   if(cval & Node2){
                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};
                  } else {
                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};
                  }
        case 9:   if(cval & Node3){
                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};
                  } else {
                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};
                  }
        case 10:  if(cval & Node3){
                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};
                  } else {
                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};
                  }
        case 11:  if(cval & Node0){
                    return {p: [1, cell.righttop], x: -1, y: 0, o: 1};
                  } else {
                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};
                  }
        case 12:  if(cval & Node2){
                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};
                  } else {
                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};
                  }
        case 13:  if(cval & Node3){
                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};
                  } else {
                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};
                  }
        case 14:  if(cval & Node3){
                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};
                  } else {
                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};
                  }
        case 15:  if(cval & Node0){
                    return {p: [1, cell.rightbottom], x: -1, y: 0, o: 0};
                  } else {
                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};
                  }
        case 16:  if(cval & Node2){
                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};
                  } else {
                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};
                  }
        case 17:  if(cval & Node0){
                    return {p: [cell.bottomright, 0], x: 0, y: 1, o: 1};
                  } else {
                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};
                  }
        case 18:  if(cval & Node3){
                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};
                  } else {
                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};
                  }
        case 19:  if(cval & Node0){
                    return {p: [cell.bottomleft, 0], x: 0, y: 1, o: 0};
                  } else {
                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};
                  }
        case 20:  if(cval & Node0){
                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};
                  } else {
                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};
                  }
        case 21:  if(cval & Node1){
                    return {p: [0, cell.leftbottom], x: 1, y: 0, o: 0};
                  } else {
                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};
                  }
        case 22:  if(cval & Node0){
                    return {p: [cell.topleft, 1], x: 0, y: -1, o: 0};
                  } else {
                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};
                  }
        case 23:  if(cval & Node1){
                    return {p: [0, cell.lefttop], x: 1, y: 0, o: 1};
                  } else {
                    return {p: [cell.topright, 1], x: 0, y: -1, o: 1};
                  }
        default:  console.log("MarchingSquaresJS-isoBands: edge index out of range!");
                  console.log(cell);
                  break;
      }
    }

    return null;
  }

  function getExitXY(cell, x, y, o){

    var e, id_x, d_x, d_y, cval = cell.cval;
    var d_o;

    switch(x){
      case -1:  switch(o){
                  case 0:   e = isoBandEdgeRB[cval];
                            d_x = isoBandNextXRB[cval];
                            d_y = isoBandNextYRB[cval];
                            d_o = isoBandNextORB[cval];
                            break;
                  default:  e = isoBandEdgeRT[cval];
                            d_x = isoBandNextXRT[cval];
                            d_y = isoBandNextYRT[cval];
                            d_o = isoBandNextORT[cval];
                            break;
                }
                break;
      case 1:   switch(o){
                  case 0:   e = isoBandEdgeLB[cval];
                            d_x = isoBandNextXLB[cval];
                            d_y = isoBandNextYLB[cval];
                            d_o = isoBandNextOLB[cval];
                            break;
                  default:  e = isoBandEdgeLT[cval];
                            d_x = isoBandNextXLT[cval];
                            d_y = isoBandNextYLT[cval];
                            d_o = isoBandNextOLT[cval];
                            break;
                }
                break;
      default:  switch(y){
                  case -1:  switch(o){
                              case 0:   e = isoBandEdgeTL[cval];
                                        d_x = isoBandNextXTL[cval];
                                        d_y = isoBandNextYTL[cval];
                                        d_o = isoBandNextOTL[cval];
                                        break;
                              default:  e = isoBandEdgeTR[cval];
                                        d_x = isoBandNextXTR[cval];
                                        d_y = isoBandNextYTR[cval];
                                        d_o = isoBandNextOTR[cval];
                                        break;
                            }
                            break;
                  case 1:   switch(o){
                              case 0:   e = isoBandEdgeBL[cval];
                                        d_x = isoBandNextXBL[cval];
                                        d_y = isoBandNextYBL[cval];
                                        d_o = isoBandNextOBL[cval];
                                        break;
                              default:  e = isoBandEdgeBR[cval];
                                        d_x = isoBandNextXBR[cval];
                                        d_y = isoBandNextYBR[cval];
                                        d_o = isoBandNextOBR[cval];
                                        break;
                            }
                            break;
                  default:  break;
                }
                break;
    }

    id_x = cell.edges.indexOf(e);
    if(typeof cell.edges[id_x] !== 'undefined'){
      deleteEdge(cell, id_x);
    } else {
      //console.log("wrong edges...");
      //console.log(x + " " + y + " " + o);
      //console.log(cell);
      return null;
    }

    cval = cell.cval_real;

    switch(e){
        case 0:   if(cval & Node1){ /* node 1 within range */
                    x = cell.topleft;
                    y = 1;
                  } else { /* node 1 below or above threshold */
                    x = 1;
                    y = cell.righttop;
                  }
                  break;
        case 1:   if(cval & Node2){
                    x = 1;
                    y = cell.rightbottom;
                  } else {
                    x = cell.topleft;
                    y = 1;
                  }
                  break;
        case 2:   if(cval & Node2){
                    x = cell.topleft;
                    y = 1;
                  } else {
                    x = cell.bottomright;
                    y = 0;
                  }
                  break;
        case 3:   if(cval & Node3){
                    x = cell.bottomleft;
                    y = 0;
                  } else {
                    x = cell.topleft;
                    y = 1;
                  }
                  break;
        case 4:   if(cval & Node1){
                    x = cell.topright;
                    y = 1;
                  } else {
                    x = 1;
                    y = cell.righttop;
                  }
                  break;
        case 5:   if(cval & Node2){
                    x = 1;
                    y = cell.rightbottom;
                  } else {
                    x = cell.topright;
                    y = 1;
                  }
                  break;
        case 6:   if(cval & Node2){
                    x = cell.topright;
                    y = 1;
                  } else {
                    x = cell.bottomright;
                    y = 0;
                  }
                  break;
        case 7:   if(cval & Node3){
                    x = cell.bottomleft;
                    y = 0;
                  } else {
                    x = cell.topright;
                    y = 1;
                  }
                  break;
        case 8:   if(cval & Node2){
                    x = 1;
                    y = cell.righttop;
                  } else {
                    x = cell.bottomright;
                    y = 0;
                  }
                  break;
        case 9:   if(cval & Node3){
                    x = cell.bottomleft;
                    y = 0;
                  } else {
                    x = 1;
                    y = cell.righttop;
                  }
                  break;
        case 10:  if(cval & Node3){
                    x = 1;
                    y = cell.righttop;
                  } else {
                    x = 0;
                    y = cell.leftbottom;
                  }
                  break;
        case 11:  if(cval & Node0){
                    x = 0;
                    y = cell.lefttop;
                  } else {
                    x = 1;
                    y = cell.righttop;
                  }
                  break;
        case 12:  if(cval & Node2){
                    x = 1;
                    y = cell.rightbottom;
                  } else {
                    x = cell.bottomright;
                    y = 0;
                  }
                  break;
        case 13:  if(cval & Node3){
                    x = cell.bottomleft;
                    y = 0;
                  } else {
                    x = 1;
                    y = cell.rightbottom;
                  }
                  break;
        case 14:  if(cval & Node3){
                    x = 1;
                    y = cell.rightbottom;
                  } else {
                    x = 0;
                    y = cell.leftbottom;
                  }
                  break;
        case 15:  if(cval & Node0){
                    x = 0;
                    y = cell.lefttop;
                  } else {
                    x = 1;
                    y = cell.rightbottom;
                  }
                  break;
        case 16:  if(cval & Node2){
                    x = 0;
                    y = cell.leftbottom;
                  } else {
                    x = cell.bottomright;
                    y = 0;
                  }
                  break;
        case 17:  if(cval & Node0){
                    x = 0;
                    y = cell.lefttop;
                  } else {
                    x = cell.bottomright;
                    y = 0;
                  }
                  break;
        case 18:  if(cval & Node3){
                    x = cell.bottomleft;
                    y = 0;
                  } else {
                    x = 0;
                    y = cell.leftbottom;
                  }
                  break;
        case 19:  if(cval & Node0){
                    x = 0;
                    y = cell.lefttop;
                  } else {
                    x = cell.bottomleft;
                    y = 0;
                  }
                  break;
        case 20:  if(cval & Node0){
                    x = 0;
                    y = cell.leftbottom;
                  } else {
                    x = cell.topleft;
                    y = 1;
                  }
                  break;
        case 21:  if(cval & Node1){
                    x = cell.topright;
                    y = 1;
                  } else {
                    x = 0;
                    y = cell.leftbottom;
                  }
                  break;
        case 22:  if(cval & Node0){
                    x = 0;
                    y = cell.lefttop;
                  } else {
                    x = cell.topleft;
                    y = 1;
                  }
                  break;
        case 23:  if(cval & Node1){
                    x = cell.topright;
                    y = 1;
                  } else {
                    x = 0;
                    y = cell.lefttop;
                  }
                  break;
        default:  console.log("MarchingSquaresJS-isoBands: edge index out of range!");
                  console.log(cell);
                  return null;
    }

    if((typeof x === 'undefined') || (typeof y === 'undefined') ||
        (typeof d_x === 'undefined') || (typeof d_y === 'undefined') ||
        (typeof d_o === 'undefined')){
      console.log("MarchingSquaresJS-isoBands: undefined value!");
      console.log(cell);
      console.log(x + " " + y + " " + d_x + " " + d_y + " " + d_o);
    }
    return {p: [x, y], x: d_x, y: d_y, o: d_o};
  }

  function BandGrid2Areas(grid){
    var areas = [];
    var area_idx = 0;

    grid.cells.forEach(function(g, j){
      g.forEach(function(gg, i){
        if(typeof gg !== 'undefined'){
          var a = polygon_table[gg.cval](gg);
          if((typeof a === 'object') && isArray(a)){
            if((typeof a[0] === 'object') && isArray(a[0])){
              if((typeof a[0][0] === 'object') && isArray(a[0][0])){
                a.forEach(function(aa){
                  aa.forEach(function(aaa){
                    aaa[0] += i;
                    aaa[1] += j;
                  });
                  areas[area_idx++] = aa;
                });
              } else {
                a.forEach(function(aa){
                  aa[0] += i;
                  aa[1] += j;
                });
                areas[area_idx++] = a;
              }
            } else {
              console.log("MarchingSquaresJS-isoBands: bandcell polygon with malformed coordinates");
            }
          } else {
            console.log("MarchingSquaresJS-isoBands: bandcell polygon with null coordinates");
          }
        }
      });
    });

    return areas;
  }

  return isoBands;

}));


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
* @license GNU Affero General Public License.
* Copyright (c) 2015, 2015 Ronny Lorenz <ronny@tbi.univie.ac.at>
* v. 1.2.0
* https://github.com/RaumZeit/MarchingSquares.js
*/

(function (root, factory) {
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return { isoContours : factory() }; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = { isoContours : factory() };
    } else {
        // Browser globals (root is window)
        root.MarchingSquaresJS = {
                                    isoContours : factory(),
                                    isoBands : (root.MarchingSquaresJS) ? root.MarchingSquaresJS.isoBands : null
                                 };
    }
}(this, function () {

  /*
    Compute the isocontour(s) of a scalar 2D field given
    a certain threshold by applying the Marching Squares
    Algorithm. The function returns a list of path coordinates
  */
  var defaultSettings = {
    successCallback:  null,
    verbose:          false
  };

  var settings = {};

  function isoContours(data, threshold, options){
    /* process options */
    options = options ? options : {};

    var optionKeys = Object.keys(defaultSettings);

    for(var i = 0; i < optionKeys.length; i++){
      var key = optionKeys[i];
      var val = options[key];
      val = ((typeof val !== 'undefined') && (val !== null)) ? val : defaultSettings[key];

      settings[key] = val;
    }

    if(settings.verbose)
      console.log("MarchingSquaresJS-isoContours: computing isocontour for " + threshold);

    var ret = ContourGrid2Paths(computeContourGrid(data, threshold));

    if(typeof settings.successCallback === 'function')
      settings.successCallback(ret);

    return ret;
  }

  /*
    Thats all for the public interface, below follows the actual
    implementation
  */

  /*
  ################################
  Isocontour implementation below
  ################################
  */

  /* assume that x1 == 1 &&  x0 == 0 */
  function interpolateX(y, y0, y1){
    return (y - y0) / (y1 - y0);
  }

  /* compute the isocontour 4-bit grid */
  function computeContourGrid(data, threshold){
    var rows = data.length - 1;
    var cols = data[0].length - 1;
    var ContourGrid = { rows: rows, cols: cols, cells: [] };

    for(var j = 0; j < rows; ++j){
      ContourGrid.cells[j] = [];
      for(var i = 0; i < cols; ++i){
        /* compose the 4-bit corner representation */
        var cval = 0;

        var tl = data[j+1][i];
        var tr = data[j+1][i+1];
        var br = data[j][i+1];
        var bl = data[j][i];

        if(isNaN(tl) || isNaN(tr) || isNaN(br) || isNaN(bl)){
          continue;
        }
        cval |= ((tl >= threshold) ? 8 : 0);
        cval |= ((tr >= threshold) ? 4 : 0);
        cval |= ((br >= threshold) ? 2 : 0);
        cval |= ((bl >= threshold) ? 1 : 0);

        /* resolve ambiguity for cval == 5 || 10 via averaging */
        var flipped = false;
        if(cval === 5 || cval === 10){
          var average = (tl + tr + br + bl) / 4;
          if(cval === 5 && (average < threshold)){
            cval = 10;
            flipped = true;
          } else if(cval === 10 && (average < threshold)){
            cval = 5;
            flipped = true;
          }
        }

        /* add cell to ContourGrid if it contains edges */
        if(cval != 0 && cval != 15){
          var top, bottom, left, right;
          top = bottom = left = right = 0.5;
          /* interpolate edges of cell */
          if(cval === 1){
            left    = 1 - interpolateX(threshold, tl, bl);
            bottom  = 1 - interpolateX(threshold, br, bl);
          } else if(cval === 2){
            bottom  = interpolateX(threshold, bl, br);
            right   = 1 - interpolateX(threshold, tr, br);
          } else if(cval === 3){
            left    = 1 - interpolateX(threshold, tl, bl);
            right   = 1 - interpolateX(threshold, tr, br);
          } else if(cval === 4){
            top     = interpolateX(threshold, tl, tr);
            right   = interpolateX(threshold, br, tr);
          } else if(cval === 5){
            top     = interpolateX(threshold, tl, tr);
            right   = interpolateX(threshold, br, tr);
            bottom  = 1 - interpolateX(threshold, br, bl);
            left    = 1 - interpolateX(threshold, tl, bl);
          } else if(cval === 6){
            bottom  = interpolateX(threshold, bl, br);
            top     = interpolateX(threshold, tl, tr);
          } else if(cval === 7){
            left    = 1 - interpolateX(threshold, tl, bl);
            top     = interpolateX(threshold, tl, tr);
          } else if(cval === 8){
            left    = interpolateX(threshold, bl, tl);
            top     = 1 - interpolateX(threshold, tr, tl);
          } else if(cval === 9){
            bottom  = 1 - interpolateX(threshold, br, bl);
            top     = 1 - interpolateX(threshold, tr, tl);
          } else if(cval === 10){
            top     = 1 - interpolateX(threshold, tr, tl);
            right   = 1 - interpolateX(threshold, tr, br);
            bottom  = interpolateX(threshold, bl, br);
            left    = interpolateX(threshold, bl, tl);
          } else if(cval === 11){
            top     = 1 - interpolateX(threshold, tr, tl);
            right   = 1 - interpolateX(threshold, tr, br);
          } else if(cval === 12){
            left    = interpolateX(threshold, bl, tl);
            right   = interpolateX(threshold, br, tr);
          } else if(cval === 13){
            bottom  = 1 - interpolateX(threshold, br, bl);
            right   = interpolateX(threshold, br, tr);
          } else if(cval === 14){
            left    = interpolateX(threshold, bl, tl);
            bottom  = interpolateX(threshold, bl, br);
          } else {
            console.log("MarchingSquaresJS-isoContours: Illegal cval detected: " + cval);
          }
          ContourGrid.cells[j][i] = {
                                      cval:     cval,
                                      flipped:  flipped,
                                      top:      top,
                                      right:    right,
                                      bottom:   bottom,
                                      left:     left
                                    };
        }

      }
    }

    return ContourGrid;
  }

  function isSaddle(cell){
    return cell.cval === 5 || cell.cval === 10;
  }

  function isTrivial(cell){
    return cell.cval === 0 || cell.cval === 15;
  }

  function clearCell(cell){
    if((!isTrivial(cell)) && (cell.cval !== 5) && (cell.cval !== 10)){
      cell.cval = 15;
    }
  }

  function getXY(cell, edge){
    if(edge === "top"){
      return [cell.top, 1.0];
    } else if(edge === "bottom"){
      return [cell.bottom, 0.0];
    } else if(edge === "right"){
      return [1.0, cell.right];
    } else if(edge === "left"){
      return [0.0, cell.left];
    }
  }

  function ContourGrid2Paths(grid){
    var paths = [];
    var path_idx = 0;
    var rows = grid.rows;
    var cols = grid.cols;
    var epsilon = 1e-7;

    grid.cells.forEach(function(g, j){
      g.forEach(function(gg, i){
        if((typeof gg !== 'undefined') && (!isSaddle(gg)) && (!isTrivial(gg))){
          var p = tracePath(grid.cells, j, i);
          var merged = false;
          /* we may try to merge paths at this point */
          if(p.info === "mergeable"){
            /*
              search backwards through the path array to find an entry
              that starts with where the current path ends...
            */
            var x = p.path[p.path.length - 1][0],
                y = p.path[p.path.length - 1][1];

            for(var k = path_idx - 1; k >= 0; k--){
              if((Math.abs(paths[k][0][0] - x) <= epsilon) && (Math.abs(paths[k][0][1] - y) <= epsilon)){
                for(var l = p.path.length - 2; l >= 0; --l){
                  paths[k].unshift(p.path[l]);
                }
                merged = true;
                break;
              }
            }
          }
          if(!merged)
            paths[path_idx++] = p.path;
        }
      });
    });

    return paths;
  }

  /*
    construct consecutive line segments from starting cell by
    walking arround the enclosed area clock-wise
   */
  function tracePath(grid, j, i){
    var maxj = grid.length;
    var p = [];
    var dxContour = [0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 1, 1, -1, 0, -1, 0];
    var dyContour = [0, -1, 0, 0, 1, 1, 1, 1, 0, -1, 0, 0, 0, -1, 0, 0];
    var dx, dy;
    var startEdge = ["none", "left", "bottom", "left", "right", "none", "bottom", "left", "top", "top", "none", "top", "right", "right", "bottom", "none"];
    var nextEdge  = ["none", "bottom", "right", "right", "top", "top", "top", "top", "left", "bottom", "right", "right", "left", "bottom", "left", "none"];
    var edge;

    var startCell   = grid[j][i];
    var currentCell = grid[j][i];

    var cval = currentCell.cval;
    var edge = startEdge[cval];

    var pt = getXY(currentCell, edge);

    /* push initial segment */
    p.push([i + pt[0], j + pt[1]]);
    edge = nextEdge[cval];
    pt = getXY(currentCell, edge);
    p.push([i + pt[0], j + pt[1]]);
    clearCell(currentCell);

    /* now walk arround the enclosed area in clockwise-direction */
    var k = i + dxContour[cval];
    var l = j + dyContour[cval];
    var prev_cval = cval;

    while((k >= 0) && (l >= 0) && (l < maxj) && ((k != i) || (l != j))){
      currentCell = grid[l][k];
      if(typeof currentCell === 'undefined'){ /* path ends here */
        //console.log(k + " " + l + " is undefined, stopping path!");
        break;
      }
      cval = currentCell.cval;
      if((cval === 0) || (cval === 15)){
        return { path: p, info: "mergeable" };
      }
      edge  = nextEdge[cval];
      dx    = dxContour[cval];
      dy    = dyContour[cval];
      if((cval === 5) || (cval === 10)){
        /* select upper or lower band, depending on previous cells cval */
        if(cval === 5){
          if(currentCell.flipped){ /* this is actually a flipped case 10 */
            if(dyContour[prev_cval] === -1){
              edge  = "left";
              dx    = -1;
              dy    = 0;
            } else {
              edge  = "right";
              dx    = 1;
              dy    = 0;
            }
          } else { /* real case 5 */
            if(dxContour[prev_cval] === -1){
              edge  = "bottom";
              dx    = 0;
              dy    = -1;
            }
          }
        } else if(cval === 10){
          if(currentCell.flipped){ /* this is actually a flipped case 5 */
            if(dxContour[prev_cval] === -1){
              edge  = "top";
              dx    = 0;
              dy    = 1;
            } else {
              edge  = "bottom";
              dx    = 0;
              dy    = -1;
            }
          } else {  /* real case 10 */
            if(dyContour[prev_cval] === 1){
              edge  = "left";
              dx    = -1;
              dy    = 0;
            }
          }
        }
      }
      pt = getXY(currentCell, edge);
      p.push([k + pt[0], l + pt[1]]);
      clearCell(currentCell);
      k += dx;
      l += dy;
      prev_cval = cval;
    }

    return { path: p, info: "closed" };
  }

  return isoContours;

}));


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var convexHull1d = __webpack_require__(114)
var convexHull2d = __webpack_require__(115)
var convexHullnd = __webpack_require__(121)

module.exports = convexHull

function convexHull(points) {
  var n = points.length
  if(n === 0) {
    return []
  } else if(n === 1) {
    return [[0]]
  }
  var d = points[0].length
  if(d === 0) {
    return []
  } else if(d === 1) {
    return convexHull1d(points)
  } else if(d === 2) {
    return convexHull2d(points)
  }
  return convexHullnd(points, d)
}

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = convexHull1d

function convexHull1d(points) {
  var lo = 0
  var hi = 0
  for(var i=1; i<points.length; ++i) {
    if(points[i][0] < points[lo][0]) {
      lo = i
    }
    if(points[i][0] > points[hi][0]) {
      hi = i
    }
  }
  if(lo < hi) {
    return [[lo], [hi]]
  } else if(lo > hi) {
    return [[hi], [lo]]
  } else {
    return [[lo]]
  }
}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = convexHull2D

var monotoneHull = __webpack_require__(116)

function convexHull2D(points) {
  var hull = monotoneHull(points)
  var h = hull.length
  if(h <= 2) {
    return []
  }
  var edges = new Array(h)
  var a = hull[h-1]
  for(var i=0; i<h; ++i) {
    var b = hull[i]
    edges[i] = [a,b]
    a = b
  }
  return edges
}


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = monotoneConvexHull2D

var orient = __webpack_require__(41)[3]

function monotoneConvexHull2D(points) {
  var n = points.length

  if(n < 3) {
    var result = new Array(n)
    for(var i=0; i<n; ++i) {
      result[i] = i
    }

    if(n === 2 &&
       points[0][0] === points[1][0] &&
       points[0][1] === points[1][1]) {
      return [0]
    }

    return result
  }

  //Sort point indices along x-axis
  var sorted = new Array(n)
  for(var i=0; i<n; ++i) {
    sorted[i] = i
  }
  sorted.sort(function(a,b) {
    var d = points[a][0]-points[b][0]
    if(d) {
      return d
    }
    return points[a][1] - points[b][1]
  })

  //Construct upper and lower hulls
  var lower = [sorted[0], sorted[1]]
  var upper = [sorted[0], sorted[1]]

  for(var i=2; i<n; ++i) {
    var idx = sorted[i]
    var p   = points[idx]

    //Insert into lower list
    var m = lower.length
    while(m > 1 && orient(
        points[lower[m-2]], 
        points[lower[m-1]], 
        p) <= 0) {
      m -= 1
      lower.pop()
    }
    lower.push(idx)

    //Insert into upper list
    m = upper.length
    while(m > 1 && orient(
        points[upper[m-2]], 
        points[upper[m-1]], 
        p) >= 0) {
      m -= 1
      upper.pop()
    }
    upper.push(idx)
  }

  //Merge lists together
  var result = new Array(upper.length + lower.length - 2)
  var ptr    = 0
  for(var i=0, nl=lower.length; i<nl; ++i) {
    result[ptr++] = lower[i]
  }
  for(var j=upper.length-2; j>0; --j) {
    result[ptr++] = upper[j]
  }

  //Return result
  return result
}

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = linearExpansionSum

//Easy case: Add two scalars
function scalarScalar(a, b) {
  var x = a + b
  var bv = x - a
  var av = x - bv
  var br = b - bv
  var ar = a - av
  var y = ar + br
  if(y) {
    return [y, x]
  }
  return [x]
}

function linearExpansionSum(e, f) {
  var ne = e.length|0
  var nf = f.length|0
  if(ne === 1 && nf === 1) {
    return scalarScalar(e[0], f[0])
  }
  var n = ne + nf
  var g = new Array(n)
  var count = 0
  var eptr = 0
  var fptr = 0
  var abs = Math.abs
  var ei = e[eptr]
  var ea = abs(ei)
  var fi = f[fptr]
  var fa = abs(fi)
  var a, b
  if(ea < fa) {
    b = ei
    eptr += 1
    if(eptr < ne) {
      ei = e[eptr]
      ea = abs(ei)
    }
  } else {
    b = fi
    fptr += 1
    if(fptr < nf) {
      fi = f[fptr]
      fa = abs(fi)
    }
  }
  if((eptr < ne && ea < fa) || (fptr >= nf)) {
    a = ei
    eptr += 1
    if(eptr < ne) {
      ei = e[eptr]
      ea = abs(ei)
    }
  } else {
    a = fi
    fptr += 1
    if(fptr < nf) {
      fi = f[fptr]
      fa = abs(fi)
    }
  }
  var x = a + b
  var bv = x - a
  var y = b - bv
  var q0 = y
  var q1 = x
  var _x, _bv, _av, _br, _ar
  while(eptr < ne && fptr < nf) {
    if(ea < fa) {
      a = ei
      eptr += 1
      if(eptr < ne) {
        ei = e[eptr]
        ea = abs(ei)
      }
    } else {
      a = fi
      fptr += 1
      if(fptr < nf) {
        fi = f[fptr]
        fa = abs(fi)
      }
    }
    b = q0
    x = a + b
    bv = x - a
    y = b - bv
    if(y) {
      g[count++] = y
    }
    _x = q1 + x
    _bv = _x - q1
    _av = _x - _bv
    _br = x - _bv
    _ar = q1 - _av
    q0 = _ar + _br
    q1 = _x
  }
  while(eptr < ne) {
    a = ei
    b = q0
    x = a + b
    bv = x - a
    y = b - bv
    if(y) {
      g[count++] = y
    }
    _x = q1 + x
    _bv = _x - q1
    _av = _x - _bv
    _br = x - _bv
    _ar = q1 - _av
    q0 = _ar + _br
    q1 = _x
    eptr += 1
    if(eptr < ne) {
      ei = e[eptr]
    }
  }
  while(fptr < nf) {
    a = fi
    b = q0
    x = a + b
    bv = x - a
    y = b - bv
    if(y) {
      g[count++] = y
    } 
    _x = q1 + x
    _bv = _x - q1
    _av = _x - _bv
    _br = x - _bv
    _ar = q1 - _av
    q0 = _ar + _br
    q1 = _x
    fptr += 1
    if(fptr < nf) {
      fi = f[fptr]
    }
  }
  if(q0) {
    g[count++] = q0
  }
  if(q1) {
    g[count++] = q1
  }
  if(!count) {
    g[count++] = 0.0  
  }
  g.length = count
  return g
}

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var twoProduct = __webpack_require__(66)
var twoSum = __webpack_require__(119)

module.exports = scaleLinearExpansion

function scaleLinearExpansion(e, scale) {
  var n = e.length
  if(n === 1) {
    var ts = twoProduct(e[0], scale)
    if(ts[0]) {
      return ts
    }
    return [ ts[1] ]
  }
  var g = new Array(2 * n)
  var q = [0.1, 0.1]
  var t = [0.1, 0.1]
  var count = 0
  twoProduct(e[0], scale, q)
  if(q[0]) {
    g[count++] = q[0]
  }
  for(var i=1; i<n; ++i) {
    twoProduct(e[i], scale, t)
    var pq = q[1]
    twoSum(pq, t[0], q)
    if(q[0]) {
      g[count++] = q[0]
    }
    var a = t[1]
    var b = q[1]
    var x = a + b
    var bv = x - a
    var y = b - bv
    q[1] = x
    if(y) {
      g[count++] = y
    }
  }
  if(q[1]) {
    g[count++] = q[1]
  }
  if(count === 0) {
    g[count++] = 0.0
  }
  g.length = count
  return g
}

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = fastTwoSum

function fastTwoSum(a, b, result) {
	var x = a + b
	var bv = x - a
	var av = x - bv
	var br = b - bv
	var ar = a - av
	if(result) {
		result[0] = ar + br
		result[1] = x
		return result
	}
	return [ar+br, x]
}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = robustSubtract

//Easy case: Add two scalars
function scalarScalar(a, b) {
  var x = a + b
  var bv = x - a
  var av = x - bv
  var br = b - bv
  var ar = a - av
  var y = ar + br
  if(y) {
    return [y, x]
  }
  return [x]
}

function robustSubtract(e, f) {
  var ne = e.length|0
  var nf = f.length|0
  if(ne === 1 && nf === 1) {
    return scalarScalar(e[0], -f[0])
  }
  var n = ne + nf
  var g = new Array(n)
  var count = 0
  var eptr = 0
  var fptr = 0
  var abs = Math.abs
  var ei = e[eptr]
  var ea = abs(ei)
  var fi = -f[fptr]
  var fa = abs(fi)
  var a, b
  if(ea < fa) {
    b = ei
    eptr += 1
    if(eptr < ne) {
      ei = e[eptr]
      ea = abs(ei)
    }
  } else {
    b = fi
    fptr += 1
    if(fptr < nf) {
      fi = -f[fptr]
      fa = abs(fi)
    }
  }
  if((eptr < ne && ea < fa) || (fptr >= nf)) {
    a = ei
    eptr += 1
    if(eptr < ne) {
      ei = e[eptr]
      ea = abs(ei)
    }
  } else {
    a = fi
    fptr += 1
    if(fptr < nf) {
      fi = -f[fptr]
      fa = abs(fi)
    }
  }
  var x = a + b
  var bv = x - a
  var y = b - bv
  var q0 = y
  var q1 = x
  var _x, _bv, _av, _br, _ar
  while(eptr < ne && fptr < nf) {
    if(ea < fa) {
      a = ei
      eptr += 1
      if(eptr < ne) {
        ei = e[eptr]
        ea = abs(ei)
      }
    } else {
      a = fi
      fptr += 1
      if(fptr < nf) {
        fi = -f[fptr]
        fa = abs(fi)
      }
    }
    b = q0
    x = a + b
    bv = x - a
    y = b - bv
    if(y) {
      g[count++] = y
    }
    _x = q1 + x
    _bv = _x - q1
    _av = _x - _bv
    _br = x - _bv
    _ar = q1 - _av
    q0 = _ar + _br
    q1 = _x
  }
  while(eptr < ne) {
    a = ei
    b = q0
    x = a + b
    bv = x - a
    y = b - bv
    if(y) {
      g[count++] = y
    }
    _x = q1 + x
    _bv = _x - q1
    _av = _x - _bv
    _br = x - _bv
    _ar = q1 - _av
    q0 = _ar + _br
    q1 = _x
    eptr += 1
    if(eptr < ne) {
      ei = e[eptr]
    }
  }
  while(fptr < nf) {
    a = fi
    b = q0
    x = a + b
    bv = x - a
    y = b - bv
    if(y) {
      g[count++] = y
    } 
    _x = q1 + x
    _bv = _x - q1
    _av = _x - _bv
    _br = x - _bv
    _ar = q1 - _av
    q0 = _ar + _br
    q1 = _x
    fptr += 1
    if(fptr < nf) {
      fi = -f[fptr]
    }
  }
  if(q0) {
    g[count++] = q0
  }
  if(q1) {
    g[count++] = q1
  }
  if(!count) {
    g[count++] = 0.0  
  }
  g.length = count
  return g
}

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = convexHullnD

var ich = __webpack_require__(122)
var aff = __webpack_require__(126)

function permute(points, front) {
  var n = points.length
  var npoints = new Array(n)
  for(var i=0; i<front.length; ++i) {
    npoints[i] = points[front[i]]
  }
  var ptr = front.length
  for(var i=0; i<n; ++i) {
    if(front.indexOf(i) < 0) {
      npoints[ptr++] = points[i]
    }
  }
  return npoints
}

function invPermute(cells, front) {
  var nc = cells.length
  var nf = front.length
  for(var i=0; i<nc; ++i) {
    var c = cells[i]
    for(var j=0; j<c.length; ++j) {
      var x = c[j]
      if(x < nf) {
        c[j] = front[x]
      } else {
        x = x - nf
        for(var k=0; k<nf; ++k) {
          if(x >= front[k]) {
            x += 1
          }
        }
        c[j] = x
      }
    }
  }
  return cells
}

function convexHullnD(points, d) {
  try {
    return ich(points, true)
  } catch(e) {
    //If point set is degenerate, try to find a basis and rerun it
    var ah = aff(points)
    if(ah.length <= d) {
      //No basis, no try
      return []
    }
    var npoints = permute(points, ah)
    var nhull   = ich(npoints, true)
    return invPermute(nhull, ah)
  }
}

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//High level idea:
// 1. Use Clarkson's incremental construction to find convex hull
// 2. Point location in triangulation by jump and walk

module.exports = incrementalConvexHull

var orient = __webpack_require__(41)
var compareCell = __webpack_require__(123).compareCells

function compareInt(a, b) {
  return a - b
}

function Simplex(vertices, adjacent, boundary) {
  this.vertices = vertices
  this.adjacent = adjacent
  this.boundary = boundary
  this.lastVisited = -1
}

Simplex.prototype.flip = function() {
  var t = this.vertices[0]
  this.vertices[0] = this.vertices[1]
  this.vertices[1] = t
  var u = this.adjacent[0]
  this.adjacent[0] = this.adjacent[1]
  this.adjacent[1] = u
}

function GlueFacet(vertices, cell, index) {
  this.vertices = vertices
  this.cell = cell
  this.index = index
}

function compareGlue(a, b) {
  return compareCell(a.vertices, b.vertices)
}

function bakeOrient(d) {
  var code = ["function orient(){var tuple=this.tuple;return test("]
  for(var i=0; i<=d; ++i) {
    if(i > 0) {
      code.push(",")
    }
    code.push("tuple[", i, "]")
  }
  code.push(")}return orient")
  var proc = new Function("test", code.join(""))
  var test = orient[d+1]
  if(!test) {
    test = orient
  }
  return proc(test)
}

var BAKED = []

function Triangulation(dimension, vertices, simplices) {
  this.dimension = dimension
  this.vertices = vertices
  this.simplices = simplices
  this.interior = simplices.filter(function(c) {
    return !c.boundary
  })

  this.tuple = new Array(dimension+1)
  for(var i=0; i<=dimension; ++i) {
    this.tuple[i] = this.vertices[i]
  }

  var o = BAKED[dimension]
  if(!o) {
    o = BAKED[dimension] = bakeOrient(dimension)
  }
  this.orient = o
}

var proto = Triangulation.prototype

//Degenerate situation where we are on boundary, but coplanar to face
proto.handleBoundaryDegeneracy = function(cell, point) {
  var d = this.dimension
  var n = this.vertices.length - 1
  var tuple = this.tuple
  var verts = this.vertices

  //Dumb solution: Just do dfs from boundary cell until we find any peak, or terminate
  var toVisit = [ cell ]
  cell.lastVisited = -n
  while(toVisit.length > 0) {
    cell = toVisit.pop()
    var cellVerts = cell.vertices
    var cellAdj = cell.adjacent
    for(var i=0; i<=d; ++i) {
      var neighbor = cellAdj[i]
      if(!neighbor.boundary || neighbor.lastVisited <= -n) {
        continue
      }
      var nv = neighbor.vertices
      for(var j=0; j<=d; ++j) {
        var vv = nv[j]
        if(vv < 0) {
          tuple[j] = point
        } else {
          tuple[j] = verts[vv]
        }
      }
      var o = this.orient()
      if(o > 0) {
        return neighbor
      }
      neighbor.lastVisited = -n
      if(o === 0) {
        toVisit.push(neighbor)
      }
    }
  }
  return null
}

proto.walk = function(point, random) {
  //Alias local properties
  var n = this.vertices.length - 1
  var d = this.dimension
  var verts = this.vertices
  var tuple = this.tuple

  //Compute initial jump cell
  var initIndex = random ? (this.interior.length * Math.random())|0 : (this.interior.length-1)
  var cell = this.interior[ initIndex ]

  //Start walking
outerLoop:
  while(!cell.boundary) {
    var cellVerts = cell.vertices
    var cellAdj = cell.adjacent

    for(var i=0; i<=d; ++i) {
      tuple[i] = verts[cellVerts[i]]
    }
    cell.lastVisited = n

    //Find farthest adjacent cell
    for(var i=0; i<=d; ++i) {
      var neighbor = cellAdj[i]
      if(neighbor.lastVisited >= n) {
        continue
      }
      var prev = tuple[i]
      tuple[i] = point
      var o = this.orient()
      tuple[i] = prev
      if(o < 0) {
        cell = neighbor
        continue outerLoop
      } else {
        if(!neighbor.boundary) {
          neighbor.lastVisited = n
        } else {
          neighbor.lastVisited = -n
        }
      }
    }
    return
  }

  return cell
}

proto.addPeaks = function(point, cell) {
  var n = this.vertices.length - 1
  var d = this.dimension
  var verts = this.vertices
  var tuple = this.tuple
  var interior = this.interior
  var simplices = this.simplices

  //Walking finished at boundary, time to add peaks
  var tovisit = [ cell ]

  //Stretch initial boundary cell into a peak
  cell.lastVisited = n
  cell.vertices[cell.vertices.indexOf(-1)] = n
  cell.boundary = false
  interior.push(cell)

  //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done
  var glueFacets = []

  //Do a traversal of the boundary walking outward from starting peak
  while(tovisit.length > 0) {
    //Pop off peak and walk over adjacent cells
    var cell = tovisit.pop()
    var cellVerts = cell.vertices
    var cellAdj = cell.adjacent
    var indexOfN = cellVerts.indexOf(n)
    if(indexOfN < 0) {
      continue
    }

    for(var i=0; i<=d; ++i) {
      if(i === indexOfN) {
        continue
      }

      //For each boundary neighbor of the cell
      var neighbor = cellAdj[i]
      if(!neighbor.boundary || neighbor.lastVisited >= n) {
        continue
      }

      var nv = neighbor.vertices

      //Test if neighbor is a peak
      if(neighbor.lastVisited !== -n) {      
        //Compute orientation of p relative to each boundary peak
        var indexOfNeg1 = 0
        for(var j=0; j<=d; ++j) {
          if(nv[j] < 0) {
            indexOfNeg1 = j
            tuple[j] = point
          } else {
            tuple[j] = verts[nv[j]]
          }
        }
        var o = this.orient()

        //Test if neighbor cell is also a peak
        if(o > 0) {
          nv[indexOfNeg1] = n
          neighbor.boundary = false
          interior.push(neighbor)
          tovisit.push(neighbor)
          neighbor.lastVisited = n
          continue
        } else {
          neighbor.lastVisited = -n
        }
      }

      var na = neighbor.adjacent

      //Otherwise, replace neighbor with new face
      var vverts = cellVerts.slice()
      var vadj = cellAdj.slice()
      var ncell = new Simplex(vverts, vadj, true)
      simplices.push(ncell)

      //Connect to neighbor
      var opposite = na.indexOf(cell)
      if(opposite < 0) {
        continue
      }
      na[opposite] = ncell
      vadj[indexOfN] = neighbor

      //Connect to cell
      vverts[i] = -1
      vadj[i] = cell
      cellAdj[i] = ncell

      //Flip facet
      ncell.flip()

      //Add to glue list
      for(var j=0; j<=d; ++j) {
        var uu = vverts[j]
        if(uu < 0 || uu === n) {
          continue
        }
        var nface = new Array(d-1)
        var nptr = 0
        for(var k=0; k<=d; ++k) {
          var vv = vverts[k]
          if(vv < 0 || k === j) {
            continue
          }
          nface[nptr++] = vv
        }
        glueFacets.push(new GlueFacet(nface, ncell, j))
      }
    }
  }

  //Glue boundary facets together
  glueFacets.sort(compareGlue)

  for(var i=0; i+1<glueFacets.length; i+=2) {
    var a = glueFacets[i]
    var b = glueFacets[i+1]
    var ai = a.index
    var bi = b.index
    if(ai < 0 || bi < 0) {
      continue
    }
    a.cell.adjacent[a.index] = b.cell
    b.cell.adjacent[b.index] = a.cell
  }
}

proto.insert = function(point, random) {
  //Add point
  var verts = this.vertices
  verts.push(point)

  var cell = this.walk(point, random)
  if(!cell) {
    return
  }

  //Alias local properties
  var d = this.dimension
  var tuple = this.tuple

  //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary
  for(var i=0; i<=d; ++i) {
    var vv = cell.vertices[i]
    if(vv < 0) {
      tuple[i] = point
    } else {
      tuple[i] = verts[vv]
    }
  }
  var o = this.orient(tuple)
  if(o < 0) {
    return
  } else if(o === 0) {
    cell = this.handleBoundaryDegeneracy(cell, point)
    if(!cell) {
      return
    }
  }

  //Add peaks
  this.addPeaks(point, cell)
}

//Extract all boundary cells
proto.boundary = function() {
  var d = this.dimension
  var boundary = []
  var cells = this.simplices
  var nc = cells.length
  for(var i=0; i<nc; ++i) {
    var c = cells[i]
    if(c.boundary) {
      var bcell = new Array(d)
      var cv = c.vertices
      var ptr = 0
      var parity = 0
      for(var j=0; j<=d; ++j) {
        if(cv[j] >= 0) {
          bcell[ptr++] = cv[j]
        } else {
          parity = j&1
        }
      }
      if(parity === (d&1)) {
        var t = bcell[0]
        bcell[0] = bcell[1]
        bcell[1] = t
      }
      boundary.push(bcell)
    }
  }
  return boundary
}

function incrementalConvexHull(points, randomSearch) {
  var n = points.length
  if(n === 0) {
    throw new Error("Must have at least d+1 points")
  }
  var d = points[0].length
  if(n <= d) {
    throw new Error("Must input at least d+1 points")
  }

  //FIXME: This could be degenerate, but need to select d+1 non-coplanar points to bootstrap process
  var initialSimplex = points.slice(0, d+1)

  //Make sure initial simplex is positively oriented
  var o = orient.apply(void 0, initialSimplex)
  if(o === 0) {
    throw new Error("Input not in general position")
  }
  var initialCoords = new Array(d+1)
  for(var i=0; i<=d; ++i) {
    initialCoords[i] = i
  }
  if(o < 0) {
    initialCoords[0] = 1
    initialCoords[1] = 0
  }

  //Create initial topological index, glue pointers together (kind of messy)
  var initialCell = new Simplex(initialCoords, new Array(d+1), false)
  var boundary = initialCell.adjacent
  var list = new Array(d+2)
  for(var i=0; i<=d; ++i) {
    var verts = initialCoords.slice()
    for(var j=0; j<=d; ++j) {
      if(j === i) {
        verts[j] = -1
      }
    }
    var t = verts[0]
    verts[0] = verts[1]
    verts[1] = t
    var cell = new Simplex(verts, new Array(d+1), true)
    boundary[i] = cell
    list[i] = cell
  }
  list[d+1] = initialCell
  for(var i=0; i<=d; ++i) {
    var verts = boundary[i].vertices
    var adj = boundary[i].adjacent
    for(var j=0; j<=d; ++j) {
      var v = verts[j]
      if(v < 0) {
        adj[j] = initialCell
        continue
      }
      for(var k=0; k<=d; ++k) {
        if(boundary[k].vertices.indexOf(v) < 0) {
          adj[j] = boundary[k]
        }
      }
    }
  }

  //Initialize triangles
  var triangles = new Triangulation(d, initialSimplex, list)

  //Insert remaining points
  var useRandom = !!randomSearch
  for(var i=d+1; i<n; ++i) {
    triangles.insert(points[i], useRandom)
  }
  
  //Extract boundary cells
  return triangles.boundary()
}

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 "use restrict";

var bits      = __webpack_require__(124)
  , UnionFind = __webpack_require__(125)

//Returns the dimension of a cell complex
function dimension(cells) {
  var d = 0
    , max = Math.max
  for(var i=0, il=cells.length; i<il; ++i) {
    d = max(d, cells[i].length)
  }
  return d-1
}
exports.dimension = dimension

//Counts the number of vertices in faces
function countVertices(cells) {
  var vc = -1
    , max = Math.max
  for(var i=0, il=cells.length; i<il; ++i) {
    var c = cells[i]
    for(var j=0, jl=c.length; j<jl; ++j) {
      vc = max(vc, c[j])
    }
  }
  return vc+1
}
exports.countVertices = countVertices

//Returns a deep copy of cells
function cloneCells(cells) {
  var ncells = new Array(cells.length)
  for(var i=0, il=cells.length; i<il; ++i) {
    ncells[i] = cells[i].slice(0)
  }
  return ncells
}
exports.cloneCells = cloneCells

//Ranks a pair of cells up to permutation
function compareCells(a, b) {
  var n = a.length
    , t = a.length - b.length
    , min = Math.min
  if(t) {
    return t
  }
  switch(n) {
    case 0:
      return 0;
    case 1:
      return a[0] - b[0];
    case 2:
      var d = a[0]+a[1]-b[0]-b[1]
      if(d) {
        return d
      }
      return min(a[0],a[1]) - min(b[0],b[1])
    case 3:
      var l1 = a[0]+a[1]
        , m1 = b[0]+b[1]
      d = l1+a[2] - (m1+b[2])
      if(d) {
        return d
      }
      var l0 = min(a[0], a[1])
        , m0 = min(b[0], b[1])
        , d  = min(l0, a[2]) - min(m0, b[2])
      if(d) {
        return d
      }
      return min(l0+a[2], l1) - min(m0+b[2], m1)
    
    //TODO: Maybe optimize n=4 as well?
    
    default:
      var as = a.slice(0)
      as.sort()
      var bs = b.slice(0)
      bs.sort()
      for(var i=0; i<n; ++i) {
        t = as[i] - bs[i]
        if(t) {
          return t
        }
      }
      return 0
  }
}
exports.compareCells = compareCells

function compareZipped(a, b) {
  return compareCells(a[0], b[0])
}

//Puts a cell complex into normal order for the purposes of findCell queries
function normalize(cells, attr) {
  if(attr) {
    var len = cells.length
    var zipped = new Array(len)
    for(var i=0; i<len; ++i) {
      zipped[i] = [cells[i], attr[i]]
    }
    zipped.sort(compareZipped)
    for(var i=0; i<len; ++i) {
      cells[i] = zipped[i][0]
      attr[i] = zipped[i][1]
    }
    return cells
  } else {
    cells.sort(compareCells)
    return cells
  }
}
exports.normalize = normalize

//Removes all duplicate cells in the complex
function unique(cells) {
  if(cells.length === 0) {
    return []
  }
  var ptr = 1
    , len = cells.length
  for(var i=1; i<len; ++i) {
    var a = cells[i]
    if(compareCells(a, cells[i-1])) {
      if(i === ptr) {
        ptr++
        continue
      }
      cells[ptr++] = a
    }
  }
  cells.length = ptr
  return cells
}
exports.unique = unique;

//Finds a cell in a normalized cell complex
function findCell(cells, c) {
  var lo = 0
    , hi = cells.length-1
    , r  = -1
  while (lo <= hi) {
    var mid = (lo + hi) >> 1
      , s   = compareCells(cells[mid], c)
    if(s <= 0) {
      if(s === 0) {
        r = mid
      }
      lo = mid + 1
    } else if(s > 0) {
      hi = mid - 1
    }
  }
  return r
}
exports.findCell = findCell;

//Builds an index for an n-cell.  This is more general than dual, but less efficient
function incidence(from_cells, to_cells) {
  var index = new Array(from_cells.length)
  for(var i=0, il=index.length; i<il; ++i) {
    index[i] = []
  }
  var b = []
  for(var i=0, n=to_cells.length; i<n; ++i) {
    var c = to_cells[i]
    var cl = c.length
    for(var k=1, kn=(1<<cl); k<kn; ++k) {
      b.length = bits.popCount(k)
      var l = 0
      for(var j=0; j<cl; ++j) {
        if(k & (1<<j)) {
          b[l++] = c[j]
        }
      }
      var idx=findCell(from_cells, b)
      if(idx < 0) {
        continue
      }
      while(true) {
        index[idx++].push(i)
        if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {
          break
        }
      }
    }
  }
  return index
}
exports.incidence = incidence

//Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices
function dual(cells, vertex_count) {
  if(!vertex_count) {
    return incidence(unique(skeleton(cells, 0)), cells, 0)
  }
  var res = new Array(vertex_count)
  for(var i=0; i<vertex_count; ++i) {
    res[i] = []
  }
  for(var i=0, len=cells.length; i<len; ++i) {
    var c = cells[i]
    for(var j=0, cl=c.length; j<cl; ++j) {
      res[c[j]].push(i)
    }
  }
  return res
}
exports.dual = dual

//Enumerates all cells in the complex
function explode(cells) {
  var result = []
  for(var i=0, il=cells.length; i<il; ++i) {
    var c = cells[i]
      , cl = c.length|0
    for(var j=1, jl=(1<<cl); j<jl; ++j) {
      var b = []
      for(var k=0; k<cl; ++k) {
        if((j >>> k) & 1) {
          b.push(c[k])
        }
      }
      result.push(b)
    }
  }
  return normalize(result)
}
exports.explode = explode

//Enumerates all of the n-cells of a cell complex
function skeleton(cells, n) {
  if(n < 0) {
    return []
  }
  var result = []
    , k0     = (1<<(n+1))-1
  for(var i=0; i<cells.length; ++i) {
    var c = cells[i]
    for(var k=k0; k<(1<<c.length); k=bits.nextCombination(k)) {
      var b = new Array(n+1)
        , l = 0
      for(var j=0; j<c.length; ++j) {
        if(k & (1<<j)) {
          b[l++] = c[j]
        }
      }
      result.push(b)
    }
  }
  return normalize(result)
}
exports.skeleton = skeleton;

//Computes the boundary of all cells, does not remove duplicates
function boundary(cells) {
  var res = []
  for(var i=0,il=cells.length; i<il; ++i) {
    var c = cells[i]
    for(var j=0,cl=c.length; j<cl; ++j) {
      var b = new Array(c.length-1)
      for(var k=0, l=0; k<cl; ++k) {
        if(k !== j) {
          b[l++] = c[k]
        }
      }
      res.push(b)
    }
  }
  return normalize(res)
}
exports.boundary = boundary;

//Computes connected components for a dense cell complex
function connectedComponents_dense(cells, vertex_count) {
  var labels = new UnionFind(vertex_count)
  for(var i=0; i<cells.length; ++i) {
    var c = cells[i]
    for(var j=0; j<c.length; ++j) {
      for(var k=j+1; k<c.length; ++k) {
        labels.link(c[j], c[k])
      }
    }
  }
  var components = []
    , component_labels = labels.ranks
  for(var i=0; i<component_labels.length; ++i) {
    component_labels[i] = -1
  }
  for(var i=0; i<cells.length; ++i) {
    var l = labels.find(cells[i][0])
    if(component_labels[l] < 0) {
      component_labels[l] = components.length
      components.push([cells[i].slice(0)])
    } else {
      components[component_labels[l]].push(cells[i].slice(0))
    }
  }
  return components
}

//Computes connected components for a sparse graph
function connectedComponents_sparse(cells) {
  var vertices  = unique(normalize(skeleton(cells, 0)))
    , labels    = new UnionFind(vertices.length)
  for(var i=0; i<cells.length; ++i) {
    var c = cells[i]
    for(var j=0; j<c.length; ++j) {
      var vj = findCell(vertices, [c[j]])
      for(var k=j+1; k<c.length; ++k) {
        labels.link(vj, findCell(vertices, [c[k]]))
      }
    }
  }
  var components        = []
    , component_labels  = labels.ranks
  for(var i=0; i<component_labels.length; ++i) {
    component_labels[i] = -1
  }
  for(var i=0; i<cells.length; ++i) {
    var l = labels.find(findCell(vertices, [cells[i][0]]));
    if(component_labels[l] < 0) {
      component_labels[l] = components.length
      components.push([cells[i].slice(0)])
    } else {
      components[component_labels[l]].push(cells[i].slice(0))
    }
  }
  return components
}

//Computes connected components for a cell complex
function connectedComponents(cells, vertex_count) {
  if(vertex_count) {
    return connectedComponents_dense(cells, vertex_count)
  }
  return connectedComponents_sparse(cells)
}
exports.connectedComponents = connectedComponents


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Bit twiddling hacks for JavaScript.
 *
 * Author: Mikola Lysenko
 *
 * Ported from Stanford bit twiddling hack library:
 *    http://graphics.stanford.edu/~seander/bithacks.html
 */

 "use restrict";

//Number of bits in an integer
var INT_BITS = 32;

//Constants
exports.INT_BITS  = INT_BITS;
exports.INT_MAX   =  0x7fffffff;
exports.INT_MIN   = -1<<(INT_BITS-1);

//Returns -1, 0, +1 depending on sign of x
exports.sign = function(v) {
  return (v > 0) - (v < 0);
}

//Computes absolute value of integer
exports.abs = function(v) {
  var mask = v >> (INT_BITS-1);
  return (v ^ mask) - mask;
}

//Computes minimum of integers x and y
exports.min = function(x, y) {
  return y ^ ((x ^ y) & -(x < y));
}

//Computes maximum of integers x and y
exports.max = function(x, y) {
  return x ^ ((x ^ y) & -(x < y));
}

//Checks if a number is a power of two
exports.isPow2 = function(v) {
  return !(v & (v-1)) && (!!v);
}

//Computes log base 2 of v
exports.log2 = function(v) {
  var r, shift;
  r =     (v > 0xFFFF) << 4; v >>>= r;
  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
  return r | (v >> 1);
}

//Computes log base 10 of v
exports.log10 = function(v) {
  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
}

//Counts number of bits
exports.popCount = function(v) {
  v = v - ((v >>> 1) & 0x55555555);
  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
}

//Counts number of trailing zeros
function countTrailingZeros(v) {
  var c = 32;
  v &= -v;
  if (v) c--;
  if (v & 0x0000FFFF) c -= 16;
  if (v & 0x00FF00FF) c -= 8;
  if (v & 0x0F0F0F0F) c -= 4;
  if (v & 0x33333333) c -= 2;
  if (v & 0x55555555) c -= 1;
  return c;
}
exports.countTrailingZeros = countTrailingZeros;

//Rounds to next power of 2
exports.nextPow2 = function(v) {
  v += v === 0;
  --v;
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v + 1;
}

//Rounds down to previous power of 2
exports.prevPow2 = function(v) {
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v - (v>>>1);
}

//Computes parity of word
exports.parity = function(v) {
  v ^= v >>> 16;
  v ^= v >>> 8;
  v ^= v >>> 4;
  v &= 0xf;
  return (0x6996 >>> v) & 1;
}

var REVERSE_TABLE = new Array(256);

(function(tab) {
  for(var i=0; i<256; ++i) {
    var v = i, r = i, s = 7;
    for (v >>>= 1; v; v >>>= 1) {
      r <<= 1;
      r |= v & 1;
      --s;
    }
    tab[i] = (r << s) & 0xff;
  }
})(REVERSE_TABLE);

//Reverse bits in a 32 bit word
exports.reverse = function(v) {
  return  (REVERSE_TABLE[ v         & 0xff] << 24) |
          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
           REVERSE_TABLE[(v >>> 24) & 0xff];
}

//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
exports.interleave2 = function(x, y) {
  x &= 0xFFFF;
  x = (x | (x << 8)) & 0x00FF00FF;
  x = (x | (x << 4)) & 0x0F0F0F0F;
  x = (x | (x << 2)) & 0x33333333;
  x = (x | (x << 1)) & 0x55555555;

  y &= 0xFFFF;
  y = (y | (y << 8)) & 0x00FF00FF;
  y = (y | (y << 4)) & 0x0F0F0F0F;
  y = (y | (y << 2)) & 0x33333333;
  y = (y | (y << 1)) & 0x55555555;

  return x | (y << 1);
}

//Extracts the nth interleaved component
exports.deinterleave2 = function(v, n) {
  v = (v >>> n) & 0x55555555;
  v = (v | (v >>> 1))  & 0x33333333;
  v = (v | (v >>> 2))  & 0x0F0F0F0F;
  v = (v | (v >>> 4))  & 0x00FF00FF;
  v = (v | (v >>> 16)) & 0x000FFFF;
  return (v << 16) >> 16;
}


//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
exports.interleave3 = function(x, y, z) {
  x &= 0x3FF;
  x  = (x | (x<<16)) & 4278190335;
  x  = (x | (x<<8))  & 251719695;
  x  = (x | (x<<4))  & 3272356035;
  x  = (x | (x<<2))  & 1227133513;

  y &= 0x3FF;
  y  = (y | (y<<16)) & 4278190335;
  y  = (y | (y<<8))  & 251719695;
  y  = (y | (y<<4))  & 3272356035;
  y  = (y | (y<<2))  & 1227133513;
  x |= (y << 1);
  
  z &= 0x3FF;
  z  = (z | (z<<16)) & 4278190335;
  z  = (z | (z<<8))  & 251719695;
  z  = (z | (z<<4))  & 3272356035;
  z  = (z | (z<<2))  & 1227133513;
  
  return x | (z << 2);
}

//Extracts nth interleaved component of a 3-tuple
exports.deinterleave3 = function(v, n) {
  v = (v >>> n)       & 1227133513;
  v = (v | (v>>>2))   & 3272356035;
  v = (v | (v>>>4))   & 251719695;
  v = (v | (v>>>8))   & 4278190335;
  v = (v | (v>>>16))  & 0x3FF;
  return (v<<22)>>22;
}

//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
exports.nextCombination = function(v) {
  var t = v | (v - 1);
  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
}



/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 "use restrict";

module.exports = UnionFind;

function UnionFind(count) {
  this.roots = new Array(count);
  this.ranks = new Array(count);
  
  for(var i=0; i<count; ++i) {
    this.roots[i] = i;
    this.ranks[i] = 0;
  }
}

var proto = UnionFind.prototype

Object.defineProperty(proto, "length", {
  "get": function() {
    return this.roots.length
  }
})

proto.makeSet = function() {
  var n = this.roots.length;
  this.roots.push(n);
  this.ranks.push(0);
  return n;
}

proto.find = function(x) {
  var x0 = x
  var roots = this.roots;
  while(roots[x] !== x) {
    x = roots[x]
  }
  while(roots[x0] !== x) {
    var y = roots[x0]
    roots[x0] = x
    x0 = y
  }
  return x;
}

proto.link = function(x, y) {
  var xr = this.find(x)
    , yr = this.find(y);
  if(xr === yr) {
    return;
  }
  var ranks = this.ranks
    , roots = this.roots
    , xd    = ranks[xr]
    , yd    = ranks[yr];
  if(xd < yd) {
    roots[xr] = yr;
  } else if(yd < xd) {
    roots[yr] = xr;
  } else {
    roots[yr] = xr;
    ++ranks[xr];
  }
}

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = affineHull

var orient = __webpack_require__(41)

function linearlyIndependent(points, d) {
  var nhull = new Array(d+1)
  for(var i=0; i<points.length; ++i) {
    nhull[i] = points[i]
  }
  for(var i=0; i<=points.length; ++i) {
    for(var j=points.length; j<=d; ++j) {
      var x = new Array(d)
      for(var k=0; k<d; ++k) {
        x[k] = Math.pow(j+1-i, k)
      }
      nhull[j] = x
    }
    var o = orient.apply(void 0, nhull)
    if(o) {
      return true
    }
  }
  return false
}

function affineHull(points) {
  var n = points.length
  if(n === 0) {
    return []
  }
  if(n === 1) {
    return [0]
  }
  var d = points[0].length
  var frame = [ points[0] ]
  var index = [ 0 ]
  for(var i=1; i<n; ++i) {
    frame.push(points[i])
    if(!linearlyIndependent(frame, d)) {
      frame.pop()
      continue
    }
    index.push(i)
    if(index.length === d+1) {
      return index
    }
  }
  return index
}

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var inside = __webpack_require__(17);
var featureCollection = __webpack_require__(13).featureCollection;

/**
 * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and returns the points that fall within the polygons.
 *
 * @name within
 * @param {FeatureCollection<Point>} points input points
 * @param {FeatureCollection<Polygon>} polygons input polygons
 * @returns {FeatureCollection<Point>} points that land within at least one polygon
 * @example
 * var searchWithin = turf.featureCollection([
 *     turf.polygon([[
 *         [-46.653,-23.543],
 *         [-46.634,-23.5346],
 *         [-46.613,-23.543],
 *         [-46.614,-23.559],
 *         [-46.631,-23.567],
 *         [-46.653,-23.560],
 *         [-46.653,-23.543]
 *     ]])
 * ]);
 * var points = turf.featureCollection([
 *     turf.point([-46.6318, -23.5523]),
 *     turf.point([-46.6246, -23.5325]),
 *     turf.point([-46.6062, -23.5513]),
 *     turf.point([-46.663, -23.554]),
 *     turf.point([-46.643, -23.557])
 * ]);
 *
 * var ptsWithin = turf.within(points, searchWithin);
 *
 * //addToMap
 * var addToMap = [points, searchWithin, ptsWithin]
 * turf.featureEach(ptsWithin, function (currentFeature) {
 *   currentFeature.properties['marker-size'] = 'large';
 *   currentFeature.properties['marker-color'] = '#000';
 * });
 */
module.exports = function (points, polygons) {
    var pointsWithin = featureCollection([]);
    for (var i = 0; i < polygons.features.length; i++) {
        for (var j = 0; j < points.features.length; j++) {
            var isInside = inside(points.features[j], polygons.features[i]);
            if (isInside) {
                pointsWithin.features.push(points.features[j]);
            }
        }
    }
    return pointsWithin;
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

// 1. run tin on points
// 2. calculate lenth of all edges and area of all triangles
// 3. remove triangles that fail the max length test
// 4. buffer the results slightly
// 5. merge the results
var tin = __webpack_require__(67);
var union = __webpack_require__(32);
var distance = __webpack_require__(16);

/**
 * Takes a set of {@link Point|points} and returns a concave hull polygon.
 * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.
 *
 * @param {FeatureCollection<Point>} points input points
 * @param {number} maxEdge the size of an edge necessary for part of the hull to become concave (in miles)
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * @returns {Feature<Polygon>} a concave hull
 * @throws {Error} if maxEdge parameter is missing or unable to compute hull
 * @example
 * var points = turf.featureCollection([
 *   turf.point([-63.601226, 44.642643]),
 *   turf.point([-63.591442, 44.651436]),
 *   turf.point([-63.580799, 44.648749]),
 *   turf.point([-63.573589, 44.641788]),
 *   turf.point([-63.587665, 44.64533]),
 *   turf.point([-63.595218, 44.64765])
 * ]);
 *
 * var hull = turf.concave(points, 1, 'miles');
 *
 * //addToMap
 * var addToMap = [points, hull]
 */
function concave(points, maxEdge, units) {
    if (typeof maxEdge !== 'number') throw new Error('maxEdge parameter is required');

    var tinPolys = tin(points);
    var filteredPolys = tinPolys.features.filter(filterTriangles);
    tinPolys.features = filteredPolys;
    if (tinPolys.features.length < 1) {
        throw new Error('too few polygons found to compute concave hull');
    }

    function filterTriangles(triangle) {
        var pt1 = triangle.geometry.coordinates[0][0];
        var pt2 = triangle.geometry.coordinates[0][1];
        var pt3 = triangle.geometry.coordinates[0][2];
        var dist1 = distance(pt1, pt2, units);
        var dist2 = distance(pt2, pt3, units);
        var dist3 = distance(pt1, pt3, units);
        return (dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge);
    }

    return merge(tinPolys);
}

function merge(polygons) {
    var merged = JSON.parse(JSON.stringify(polygons.features[0])),
        features = polygons.features;

    for (var i = 0, len = features.length; i < len; i++) {
        var poly = features[i];
        if (poly.geometry) {
            merged = union(merged, poly);
        }
    }
    return merged;
}

module.exports = concave;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// depend on jsts for now https://github.com/bjornharrtell/jsts/blob/master/examples/overlay.html
var jsts = __webpack_require__(33);
var area = __webpack_require__(68);
var feature = __webpack_require__(13).feature;
var getGeom = __webpack_require__(14).getGeom;
var flattenEach = __webpack_require__(1).flattenEach;

/**
 * Finds the difference between two {@link Polygon|polygons} by clipping the second polygon from the first.
 *
 * @name difference
 * @param {Feature<Polygon|MultiPolygon>} polygon1 input Polygon feature
 * @param {Feature<Polygon|MultiPolygon>} polygon2 Polygon feature to difference from polygon1
 * @returns {Feature<Polygon|MultiPolygon>|undefined} a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `undefined`)
 * @example
 * var polygon1 = turf.polygon([[
 *   [128, -26],
 *   [141, -26],
 *   [141, -21],
 *   [128, -21],
 *   [128, -26]
 * ]], {
 *   "fill": "#F00",
 *   "fill-opacity": 0.1
 * });
 * var polygon2 = turf.polygon([[
 *   [126, -28],
 *   [140, -28],
 *   [140, -20],
 *   [126, -20],
 *   [126, -28]
 * ]], {
 *   "fill": "#00F",
 *   "fill-opacity": 0.1
 * });
 *
 * var difference = turf.difference(polygon1, polygon2);
 *
 * //addToMap
 * var addToMap = [polygon1, polygon2, difference];
 */
module.exports = function (polygon1, polygon2) {
    var geom1 = getGeom(polygon1);
    var geom2 = getGeom(polygon2);
    var properties = polygon1.properties || {};

    // Issue #721 - JSTS can't handle empty polygons
    geom1 = removeEmptyPolygon(geom1);
    geom2 = removeEmptyPolygon(geom2);
    if (!geom1) return undefined;
    if (!geom2) return feature(geom1, properties);

    // JSTS difference operation
    var reader = new jsts.io.GeoJSONReader();
    var a = reader.read(geom1);
    var b = reader.read(geom2);
    var differenced = a.difference(b);
    if (differenced.isEmpty()) return undefined;
    var writer = new jsts.io.GeoJSONWriter();
    var geom = writer.write(differenced);

    return feature(geom, properties);
};

/**
 * Detect Empty Polygon
 *
 * @param {Geometry<Polygon|MultiPolygon>} geom Geometry Object
 * @returns {Geometry<Polygon|MultiPolygon>|undefined} removed any polygons with no areas
 */
function removeEmptyPolygon(geom) {
    switch (geom.type) {
    case 'Polygon':
        if (area(geom) > 1) return geom;
        return undefined;
    case 'MultiPolygon':
        var coordinates = [];
        flattenEach(geom, function (feature) {
            if (area(feature) > 1) coordinates.push(feature.geometry.coordinates);
        });
        if (coordinates.length) return {type: 'MultiPolygon', coordinates: coordinates};
    }
}


/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports.RADIUS = 6378137;
module.exports.FLATTENING = 1/298.257223563;
module.exports.POLAR_RADIUS = 6356752.3142;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var turfUnion = __webpack_require__(32);
var turfOverlaps = __webpack_require__(132);
var turfbbox = __webpack_require__(10);
var Rbush = __webpack_require__(22);
var gju = __webpack_require__(134);
var getClosest = __webpack_require__(135);

/**
 * Dissolves a FeatureCollection of polygons based on a property. Note that multipart features within the collection are not supported
 *
 * @name dissolve
 * @param {FeatureCollection<Polygon>} featureCollection input feature collection to be dissolved
 * @param {string} [propertyName] property name on which to dissolve features
 * @returns {FeatureCollection<Polygon>} a FeatureCollection containing the dissolved polygons
 * @example
 * var features = turf.featureCollection([
 *   turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {"combine": "yes"}),
 *   turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {"combine": "yes"}),
 *   turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {"combine": "no"}),
 * ]);
 *
 * var dissolved = turf.dissolve(features, 'combine');
 *
 * //addToMap
 * var addToMap = [features, dissolved]
 */
module.exports = function (featureCollection, propertyName) {

    var originalIndexOfItemsRemoved = [];
    var treeItems = [];
    var rtree = new Rbush();
    for (var polyIndex = 0; polyIndex < featureCollection.features.length; polyIndex++) {
        var inputFeatureBbox = turfbbox(featureCollection.features[polyIndex]);
        var treeObj = {
            minX: inputFeatureBbox[0],
            minY: inputFeatureBbox[1],
            maxX: inputFeatureBbox[2],
            maxY: inputFeatureBbox[3],
            origIndexPosition: polyIndex
        };
        treeItems.push(treeObj);
    }
    rtree.load(treeItems);

    for (var i = 0; i < featureCollection.features.length; i++) {
        var polygon = featureCollection.features[i];

        var polyBoundingBox = turfbbox(polygon);
        var searchObj = {
            minX: polyBoundingBox[0],
            minY: polyBoundingBox[1],
            maxX: polyBoundingBox[2],
            maxY: polyBoundingBox[3]
        };
        var potentialMatchingFeatures = rtree.search(searchObj);

        var featureChanged = false;

        for (var searchIndex = 0; searchIndex < potentialMatchingFeatures.length; searchIndex++) {
            polygon = featureCollection.features[i];

            var matchFeaturePosition = potentialMatchingFeatures[searchIndex].origIndexPosition;

            if (originalIndexOfItemsRemoved.length > 0 && matchFeaturePosition !== 0) {
                if (matchFeaturePosition > originalIndexOfItemsRemoved[originalIndexOfItemsRemoved.length - 1]) {
                    matchFeaturePosition = matchFeaturePosition - (originalIndexOfItemsRemoved.length);
                } else {
                    var closestNumber = getClosest.greaterNumber(matchFeaturePosition, originalIndexOfItemsRemoved);
                    if (closestNumber !== 0) {
                        matchFeaturePosition = matchFeaturePosition - closestNumber;
                    }
                }
            }

            if (matchFeaturePosition === i) {
                continue;
            }
            var matchFeature = featureCollection.features[matchFeaturePosition];

            if (typeof propertyName !== undefined) {
                if (matchFeature.properties[propertyName] !== polygon.properties[propertyName]) {
                    continue;
                }
            }

            var overlapCheck = turfOverlaps(polygon, matchFeature);

            if (!overlapCheck) {
                var polyClone = JSON.stringify(polygon);
                var polyBeingCheckedClone = JSON.stringify(matchFeature);
                var linestring1 = toLinestring(JSON.parse(polyClone));
                var linestring2 = toLinestring(JSON.parse(polyBeingCheckedClone));
                overlapCheck = gju.lineStringsIntersect(linestring1.geometry, linestring2.geometry);
            }
            if (!overlapCheck) {
                continue;
            }

            featureCollection.features[i] = turfUnion(polygon, matchFeature);
            originalIndexOfItemsRemoved.push(potentialMatchingFeatures[searchIndex].origIndexPosition);
            originalIndexOfItemsRemoved.sort(function (a, b) {
                return a - b;
            });

            rtree.remove(potentialMatchingFeatures[searchIndex]);
            featureCollection.features.splice(matchFeaturePosition, 1);
            searchObj.origIndexPosition = i;
            rtree.remove(searchObj, function (a, b) {
                return a.origIndexPosition === b.origIndexPosition;
            });
            featureChanged = true;
        }
        if (featureChanged) {
            var newBoundingBox = turfbbox(polygon);
            rtree.insert({
                minX: newBoundingBox[0],
                minY: newBoundingBox[1],
                maxX: newBoundingBox[2],
                maxY: newBoundingBox[3],
                origIndexPosition: i
            });
            i--;
        }
    }
    return featureCollection;
};

function toLinestring(polygon) {
    if (polygon === null || polygon === undefined) throw new Error('No polygon was passed');
    polygon.geometry.type = 'LineString';
    var flat_arr = [].concat.apply([], polygon.geometry.coordinates);
    polygon.geometry.coordinates = flat_arr;
    return polygon;
}


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var clockwise = __webpack_require__(69);

function doLinesIntersect(line1, line2) {
  var p1 = line1[0],
    p2 = line1[1],
    p3 = line2[0],
    p4 = line2[1];

  return (clockwise([p1, p3, p4, p1]) != clockwise([p2, p3, p4, p2]))
    && (clockwise([p1, p2, p3, p1]) != clockwise([p1, p2, p4, p1]));
}

function testLines(ring1, ring2) {
  for (var p1_ind = 0; p1_ind < (ring1.length - 1); p1_ind++) {
    var p1_line = [ring1[p1_ind], ring1[p1_ind + 1]];
    for (var p2_ind = 0; p2_ind < (ring2.length - 1); p2_ind++) {
      var p2_line = [ring2[p2_ind], ring2[p2_ind + 1]];

      if (doLinesIntersect(p1_line, p2_line)) {
        return true;
      }
    }
  }
  return false;
}

function getCoordinates(polygon) {
  var coords = [[[]]];

  switch (polygon.geometry.type) {
    case 'LineString':
      coords = [[polygon.geometry.coordinates]];
      break;
    case 'Polygon':
      coords = [polygon.geometry.coordinates];
      break;
    case 'MultiPolygon':
      coords = polygon.geometry.coordinates;
      break;
  }
  return coords;
}

/**
 * Since we don't care about the overlap amount,
 * or it's geometry, but rather just whether overlap
 * occurs, polygon overlap can most simply be expressed
 * by testing whether any pair of edges on the two polygons
 * intersect. If there are any edge intersections, the
 * polygons overlap.
 *
 * @param  {[type]} poly1 [description]
 * @param  {[type]} poly2 [description]
 * @return {[type]}       [description]
 */
module.exports = function (poly1, poly2) {
  var coords1 = getCoordinates(poly1),
    coords2 = getCoordinates(poly2);

  // This looks completely stupid ridiculous to
  // have so many nested loops, but it supports
  // multipolygons nicely. In the case of polygons
  // or linestrings, the outer loops are only one
  // iteration.
  return coords1.some(function (rings1) {
    return coords2.some(function (rings2) {
      return rings1.some(function(ring1) {
        return rings2.some(function(ring2) {
          return testLines(ring1, ring2);
        });
      });
    });
  });
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = partialSort;

// Floyd-Rivest selection algorithm:
// Rearrange items so that all items in the [left, k] range are smaller than all items in (k, right];
// The k-th element will have the (k - left + 1)th smallest value in [left, right]

function partialSort(arr, k, left, right, compare) {
    left = left || 0;
    right = right || (arr.length - 1);
    compare = compare || defaultCompare;

    while (right > left) {
        if (right - left > 600) {
            var n = right - left + 1;
            var m = k - left + 1;
            var z = Math.log(n);
            var s = 0.5 * Math.exp(2 * z / 3);
            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            partialSort(arr, k, newLeft, newRight, compare);
        }

        var t = arr[k];
        var i = left;
        var j = right;

        swap(arr, left, k);
        if (compare(arr[right], t) > 0) swap(arr, left, right);

        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
            while (compare(arr[i], t) < 0) i++;
            while (compare(arr[j], t) > 0) j--;
        }

        if (compare(arr[left], t) === 0) swap(arr, left, j);
        else {
            j++;
            swap(arr, j, right);
        }

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
}

function swap(arr, i, j) {
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}


/***/ }),
/* 134 */
/***/ (function(module, exports) {

(function () {
  var gju = this.gju = {};

  // Export the geojson object for **CommonJS**
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = gju;
  }

  // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js
  gju.lineStringsIntersect = function (l1, l2) {
    var intersects = [];
    for (var i = 0; i <= l1.coordinates.length - 2; ++i) {
      for (var j = 0; j <= l2.coordinates.length - 2; ++j) {
        var a1 = {
          x: l1.coordinates[i][1],
          y: l1.coordinates[i][0]
        },
          a2 = {
            x: l1.coordinates[i + 1][1],
            y: l1.coordinates[i + 1][0]
          },
          b1 = {
            x: l2.coordinates[j][1],
            y: l2.coordinates[j][0]
          },
          b2 = {
            x: l2.coordinates[j + 1][1],
            y: l2.coordinates[j + 1][0]
          },
          ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
          ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
          u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
        if (u_b != 0) {
          var ua = ua_t / u_b,
            ub = ub_t / u_b;
          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
            intersects.push({
              'type': 'Point',
              'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]
            });
          }
        }
      }
    }
    if (intersects.length == 0) intersects = false;
    return intersects;
  }

  // Bounding Box

  function boundingBoxAroundPolyCoords (coords) {
    var xAll = [], yAll = []

    for (var i = 0; i < coords[0].length; i++) {
      xAll.push(coords[0][i][1])
      yAll.push(coords[0][i][0])
    }

    xAll = xAll.sort(function (a,b) { return a - b })
    yAll = yAll.sort(function (a,b) { return a - b })

    return [ [xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]] ]
  }

  gju.pointInBoundingBox = function (point, bounds) {
    return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]) 
  }

  // Point in Polygon
  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices

  function pnpoly (x,y,coords) {
    var vert = [ [0,0] ]

    for (var i = 0; i < coords.length; i++) {
      for (var j = 0; j < coords[i].length; j++) {
        vert.push(coords[i][j])
      }
	  vert.push(coords[i][0])
      vert.push([0,0])
    }

    var inside = false
    for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {
      if (((vert[i][0] > y) != (vert[j][0] > y)) && (x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1])) inside = !inside
    }

    return inside
  }

  gju.pointInPolygon = function (p, poly) {
    var coords = (poly.type == "Polygon") ? [ poly.coordinates ] : poly.coordinates

    var insideBox = false
    for (var i = 0; i < coords.length; i++) {
      if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true
    }
    if (!insideBox) return false

    var insidePoly = false
    for (var i = 0; i < coords.length; i++) {
      if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true
    }

    return insidePoly
  }

  // support multi (but not donut) polygons
  gju.pointInMultiPolygon = function (p, poly) {
    var coords_array = (poly.type == "MultiPolygon") ? [ poly.coordinates ] : poly.coordinates

    var insideBox = false
    var insidePoly = false
    for (var i = 0; i < coords_array.length; i++){
      var coords = coords_array[i];
      for (var j = 0; j < coords.length; j++) {
        if (!insideBox){
          if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[j]))) {
            insideBox = true
          }
        }
      }
      if (!insideBox) return false
      for (var j = 0; j < coords.length; j++) {
        if (!insidePoly){
          if (pnpoly(p.coordinates[1], p.coordinates[0], coords[j])) {
            insidePoly = true
          }
        }
      }
    }

    return insidePoly
  }

  gju.numberToRadius = function (number) {
    return number * Math.PI / 180;
  }

  gju.numberToDegree = function (number) {
    return number * 180 / Math.PI;
  }

  // written with help from @tautologe
  gju.drawCircle = function (radiusInMeters, centerPoint, steps) {
    var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],
      dist = (radiusInMeters / 1000) / 6371,
      // convert meters to radiant
      radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],
      steps = steps || 15,
      // 15 sided circle
      poly = [[center[0], center[1]]];
    for (var i = 0; i < steps; i++) {
      var brng = 2 * Math.PI * i / steps;
      var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist)
              + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));
      var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]),
                                          Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));
      poly[i] = [];
      poly[i][1] = gju.numberToDegree(lat);
      poly[i][0] = gju.numberToDegree(lng);
    }
    return {
      "type": "Polygon",
      "coordinates": [poly]
    };
  }

  // assumes rectangle starts at lower left point
  gju.rectangleCentroid = function (rectangle) {
    var bbox = rectangle.coordinates[0];
    var xmin = bbox[0][0],
      ymin = bbox[0][1],
      xmax = bbox[2][0],
      ymax = bbox[2][1];
    var xwidth = xmax - xmin;
    var ywidth = ymax - ymin;
    return {
      'type': 'Point',
      'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]
    };
  }

  // from http://www.movable-type.co.uk/scripts/latlong.html
  gju.pointDistance = function (pt1, pt2) {
    var lon1 = pt1.coordinates[0],
      lat1 = pt1.coordinates[1],
      lon2 = pt2.coordinates[0],
      lat2 = pt2.coordinates[1],
      dLat = gju.numberToRadius(lat2 - lat1),
      dLon = gju.numberToRadius(lon2 - lon1),
      a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1))
        * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return (6371 * c) * 1000; // returns meters
  },

  // checks if geometry lies entirely within a circle
  // works with Point, LineString, Polygon
  gju.geometryWithinRadius = function (geometry, center, radius) {
    if (geometry.type == 'Point') {
      return gju.pointDistance(geometry, center) <= radius;
    } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {
      var point = {};
      var coordinates;
      if (geometry.type == 'Polygon') {
        // it's enough to check the exterior ring of the Polygon
        coordinates = geometry.coordinates[0];
      } else {
        coordinates = geometry.coordinates;
      }
      for (var i in coordinates) {
        point.coordinates = coordinates[i];
        if (gju.pointDistance(point, center) > radius) {
          return false;
        }
      }
    }
    return true;
  }

  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
  gju.area = function (polygon) {
    var area = 0;
    // TODO: polygon holes at coordinates[1]
    var points = polygon.coordinates[0];
    var j = points.length - 1;
    var p1, p2;

    for (var i = 0; i < points.length; j = i++) {
      var p1 = {
        x: points[i][1],
        y: points[i][0]
      };
      var p2 = {
        x: points[j][1],
        y: points[j][0]
      };
      area += p1.x * p2.y;
      area -= p1.y * p2.x;
    }

    area /= 2;
    return area;
  },

  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
  gju.centroid = function (polygon) {
    var f, x = 0,
      y = 0;
    // TODO: polygon holes at coordinates[1]
    var points = polygon.coordinates[0];
    var j = points.length - 1;
    var p1, p2;

    for (var i = 0; i < points.length; j = i++) {
      var p1 = {
        x: points[i][1],
        y: points[i][0]
      };
      var p2 = {
        x: points[j][1],
        y: points[j][0]
      };
      f = p1.x * p2.y - p2.x * p1.y;
      x += (p1.x + p2.x) * f;
      y += (p1.y + p2.y) * f;
    }

    f = gju.area(polygon) * 6;
    return {
      'type': 'Point',
      'coordinates': [y / f, x / f]
    };
  },

  gju.simplify = function (source, kink) { /* source[] array of geojson points */
    /* kink	in metres, kinks above this depth kept  */
    /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
    kink = kink || 20;
    source = source.map(function (o) {
      return {
        lng: o.coordinates[0],
        lat: o.coordinates[1]
      }
    });

    var n_source, n_stack, n_dest, start, end, i, sig;
    var dev_sqr, max_dev_sqr, band_sqr;
    var x12, y12, d12, x13, y13, d13, x23, y23, d23;
    var F = (Math.PI / 180.0) * 0.5;
    var index = new Array(); /* aray of indexes of source points to include in the reduced line */
    var sig_start = new Array(); /* indices of start & end of working section */
    var sig_end = new Array();

    /* check for simple cases */

    if (source.length < 3) return (source); /* one or two points */

    /* more complex case. initialize stack */

    n_source = source.length;
    band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */
    band_sqr *= band_sqr;
    n_dest = 0;
    sig_start[0] = 0;
    sig_end[0] = n_source - 1;
    n_stack = 1;

    /* while the stack is not empty  ... */
    while (n_stack > 0) {

      /* ... pop the top-most entries off the stacks */

      start = sig_start[n_stack - 1];
      end = sig_end[n_stack - 1];
      n_stack--;

      if ((end - start) > 1) { /* any intermediate points ? */

        /* ... yes, so find most deviant intermediate point to
        either side of line joining start & end points */

        x12 = (source[end].lng() - source[start].lng());
        y12 = (source[end].lat() - source[start].lat());
        if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);
        x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */
        d12 = (x12 * x12) + (y12 * y12);

        for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {

          x13 = source[i].lng() - source[start].lng();
          y13 = source[i].lat() - source[start].lat();
          if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);
          x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));
          d13 = (x13 * x13) + (y13 * y13);

          x23 = source[i].lng() - source[end].lng();
          y23 = source[i].lat() - source[end].lat();
          if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);
          x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));
          d23 = (x23 * x23) + (y23 * y23);

          if (d13 >= (d12 + d23)) dev_sqr = d23;
          else if (d23 >= (d12 + d13)) dev_sqr = d13;
          else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle
          if (dev_sqr > max_dev_sqr) {
            sig = i;
            max_dev_sqr = dev_sqr;
          }
        }

        if (max_dev_sqr < band_sqr) { /* is there a sig. intermediate point ? */
          /* ... no, so transfer current start point */
          index[n_dest] = start;
          n_dest++;
        } else { /* ... yes, so push two sub-sections on stack for further processing */
          n_stack++;
          sig_start[n_stack - 1] = sig;
          sig_end[n_stack - 1] = end;
          n_stack++;
          sig_start[n_stack - 1] = start;
          sig_end[n_stack - 1] = sig;
        }
      } else { /* ... no intermediate points, so transfer current start point */
        index[n_dest] = start;
        n_dest++;
      }
    }

    /* transfer last point */
    index[n_dest] = n_source - 1;
    n_dest++;

    /* make return array */
    var r = new Array();
    for (var i = 0; i < n_dest; i++)
      r.push(source[index[i]]);

    return r.map(function (o) {
      return {
        type: "Point",
        coordinates: [o.lng, o.lat]
      }
    });
  }

  // http://www.movable-type.co.uk/scripts/latlong.html#destPoint
  gju.destinationPoint = function (pt, brng, dist) {
    dist = dist/6371;  // convert dist to angular distance in radians
    brng = gju.numberToRadius(brng);

    var lon1 = gju.numberToRadius(pt.coordinates[0]);
    var lat1 = gju.numberToRadius(pt.coordinates[1]);

    var lat2 = Math.asin( Math.sin(lat1)*Math.cos(dist) +
                          Math.cos(lat1)*Math.sin(dist)*Math.cos(brng) );
    var lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(dist)*Math.cos(lat1),
                                 Math.cos(dist)-Math.sin(lat1)*Math.sin(lat2));
    lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º

    return {
      'type': 'Point',
      'coordinates': [gju.numberToDegree(lon2), gju.numberToDegree(lat2)]
    };
  };

})();


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
* @license get-closest https://github.com/cosmosio/get-closest
*
* The MIT License (MIT)
*
* Copyright (c) 2014-2017 Olivier Scherrer <pode.fr@gmail.com>
*/


/**
 * Get the closest number in an array
 * @param {Number} item the base number
 * @param {Array} array the array to search into
 * @param {Function} getDiff returns the difference between the base number and
 *   and the currently read item in the array. The item which returned the smallest difference wins.
 * @private
 */
function _getClosest(item, array, getDiff) {
    var closest,
        diff;

    if (!Array.isArray(array)) {
        throw new Error("Get closest expects an array as second argument");
    }

    array.forEach(function (comparedItem, comparedItemIndex) {
        var thisDiff = getDiff(comparedItem, item);

        if (thisDiff >= 0 && (typeof diff == "undefined" || thisDiff < diff)) {
            diff = thisDiff;
            closest = comparedItemIndex;
        }
    });

    return closest;
}

module.exports = {

  /**
   * Get the closest number in an array given a base number
   * Example: closest(30, [20, 0, 50, 29]) will return 3 as 29 is the closest item
   * @param {Number} item the base number
   * @param {Array} array the array of numbers to search into
   * @returns {Number} the index of the closest item in the array
   */
  number: function closestNumber(item, array) {
      return _getClosest(item, array, function (comparedItem, item) {
          return Math.abs(comparedItem - item);
      });
  },

  /**
   * Get the closest greater number in an array given a base number
   * Example: closest(30, [20, 0, 50, 29]) will return 2 as 50 is the closest greater item
   * @param {Number} item the base number
   * @param {Array} array the array of numbers to search into
   * @returns {Number} the index of the closest item in the array
   */
  greaterNumber: function closestGreaterNumber(item, array) {
      return _getClosest(item, array, function (comparedItem, item) {
          return comparedItem - item;
      });
  },

  /**
   * Get the closest lower number in an array given a base number
   * Example: closest(30, [20, 0, 50, 29]) will return 0 as 20 is the closest lower item
   * @param {Number} item the base number
   * @param {Array} array the array of numbers to search into
   * @returns {Number} the index of the closest item in the array
   */
  lowerNumber: function closestLowerNumber(item, array) {
    return _getClosest(item, array, function (comparedItem, item) {
        return item - comparedItem;
    });
  },

  /**
   * Get the closest item in an array given a base item and a comparator function
   * Example (closest("lundi", ["mundi", "mardi"], getLevenshteinDistance)) will return 0 for "lundi"
   * @param {*} item the base item
   * @param {Array} array an array of items
   * @param {Function} comparator a comparatof function to compare the items
   *
   * The function looks like:
   *
   * // comparedItem comes from the array
   * // baseItem is the item to compare the others to
   * // It returns a number
   * function comparator(comparedItem, baseItem) {
   *     return comparedItem - baseItem;
   * }
   */
  custom: function closestCustom(item, array, comparator) {
    return _getClosest(item, array, comparator);
  }

};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var turfbbox = __webpack_require__(10);
var inside = __webpack_require__(17);
var rbush = __webpack_require__(22);

/**
 * Merges a specified property from a FeatureCollection of points into a
 * FeatureCollection of polygons. Given an `inProperty` on points and an `outProperty`
 * for polygons, this finds every point that lies within each polygon, collects the
 * `inProperty` values from those points, and adds them as an array to `outProperty`
 * on the polygon.
 *
 * @name collect
 * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate
 * @param {FeatureCollection<Point>} points points to be aggregated
 * @param {string} inProperty property to be nested from
 * @param {string} outProperty property to be nested into
 * @returns {FeatureCollection<Polygon>} polygons with properties listed based on `outField`
 * @example
 * var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);
 * var poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);
 * var polyFC = turf.featureCollection([poly1, poly2]);
 * var pt1 = turf.point([5,5], {population: 200});
 * var pt2 = turf.point([1,3], {population: 600});
 * var pt3 = turf.point([14,2], {population: 100});
 * var pt4 = turf.point([13,1], {population: 200});
 * var pt5 = turf.point([19,7], {population: 300});
 * var pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);
 * var collected = turf.collect(polyFC, pointFC, 'population', 'values');
 * var values = collected.features[0].properties.values
 * //=values => [200, 600]
 *
 * //addToMap
 * var addToMap = [pointFC, collected]
 */
module.exports = function (polygons, points, inProperty, outProperty) {
    var rtree = rbush(6);

    var treeItems = points.features.map(function (item) {
        return {
            minX: item.geometry.coordinates[0],
            minY: item.geometry.coordinates[1],
            maxX: item.geometry.coordinates[0],
            maxY: item.geometry.coordinates[1],
            property: item.properties[inProperty]
        };
    });

    rtree.load(treeItems);
    polygons.features.forEach(function (poly) {

        if (!poly.properties) {
            poly.properties = {};
        }
        var bbox = turfbbox(poly);
        var potentialPoints = rtree.search({minX: bbox[0], minY: bbox[1], maxX: bbox[2], maxY: bbox[3]});
        var values = [];
        potentialPoints.forEach(function (pt) {
            if (inside({'type': 'Point', 'coordinates': [pt.minX, pt.minY]}, poly)) {
                values.push(pt.property);
            }
        });

        poly.properties[outProperty] = values;
    });

    return polygons;
};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var coordEach = __webpack_require__(1).coordEach;

/**
 * Takes input features and flips all of their coordinates from `[x, y]` to `[y, x]`.
 *
 * @name flip
 * @param {FeatureCollection|Feature<any>} geojson input features
 * @param {boolean} [mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
 * @returns {FeatureCollection|Feature<any>} a feature or set of features of the same type as `input` with flipped coordinates
 * @example
 * var serbia = turf.point([20.566406, 43.421008]);
 *
 * var saudiArabia = turf.flip(serbia);
 *
 * //addToMap
 * var addToMap = [serbia, saudiArabia];
 */
module.exports = function (geojson, mutate) {
    if (!geojson) throw new Error('geojson is required');
    // ensure that we don't modify features in-place and changes to the
    // output do not change the previous feature, including changes to nested
    // properties.
    if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));

    coordEach(geojson, function (coord) {
        var x = coord[0];
        var y = coord[1];
        coord[0] = y;
        coord[1] = x;
    });
    return geojson;
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var simplify = __webpack_require__(139);

// supported GeoJSON geometries, used to check whether to wrap in simpleFeature()
var supportedTypes = ['LineString', 'MultiLineString', 'Polygon', 'MultiPolygon'];

/**
 * Takes a {@link LineString} or {@link Polygon} and returns a simplified version. Internally uses [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification.
 *
 * @name simplify
 * @param {Feature<(LineString|Polygon|MultiLineString|MultiPolygon)>|FeatureCollection|GeometryCollection} feature feature to be simplified
 * @param {number} [tolerance=1] simplification tolerance
 * @param {boolean} [highQuality=false] whether or not to spend more time to create
 * a higher-quality simplification with a different algorithm
 * @returns {Feature<(LineString|Polygon|MultiLineString|MultiPolygon)>|FeatureCollection|GeometryCollection} a simplified feature
 * @example
 * var feature = turf.polygon([[
 *   [-70.603637, -33.399918],
 *   [-70.614624, -33.395332],
 *   [-70.639343, -33.392466],
 *   [-70.659942, -33.394759],
 *   [-70.683975, -33.404504],
 *   [-70.697021, -33.419406],
 *   [-70.701141, -33.434306],
 *   [-70.700454, -33.446339],
 *   [-70.694274, -33.458369],
 *   [-70.682601, -33.465816],
 *   [-70.668869, -33.472117],
 *   [-70.646209, -33.473835],
 *   [-70.624923, -33.472117],
 *   [-70.609817, -33.468107],
 *   [-70.595397, -33.458369],
 *   [-70.587158, -33.442901],
 *   [-70.587158, -33.426283],
 *   [-70.590591, -33.414248],
 *   [-70.594711, -33.406224],
 *   [-70.603637, -33.399918]
 * ]]);
 * var tolerance = 0.01;
 *
 * var simplified = turf.simplify(feature, tolerance, false);
 *
 * //addToMap
 * var addToMap = [feature, simplified]
 */
module.exports = function (feature, tolerance, highQuality) {
    if (feature.type === 'Feature') {
        return simpleFeature(
            simplifyHelper(feature, tolerance, highQuality),
            feature.properties);
    } else if (feature.type === 'FeatureCollection') {
        return {
            type: 'FeatureCollection',
            features: feature.features.map(function (f) {
                var simplified = simplifyHelper(f, tolerance, highQuality);

                // we create simpleFeature here because it doesn't apply to GeometryCollection
                // so we can't create it at simplifyHelper()
                if (supportedTypes.indexOf(simplified.type) > -1) {
                    return simpleFeature(simplified, f.properties);
                } else {
                    return simplified;
                }
            })
        };
    } else if (feature.type === 'GeometryCollection') {
        return {
            type: 'GeometryCollection',
            geometries: feature.geometries.map(function (g) {
                if (supportedTypes.indexOf(g.type) > -1) {
                    return simplifyHelper({
                        type: 'Feature',
                        geometry: g
                    }, tolerance, highQuality);
                }
                return g;
            })
        };
    } else {
        return feature;
    }
};


function simplifyHelper(feature, tolerance, highQuality) {
    if (feature.geometry.type === 'LineString') {
        return {
            type: 'LineString',
            coordinates: simplifyLine(feature.geometry.coordinates, tolerance, highQuality)
        };
    } else if (feature.geometry.type === 'MultiLineString') {
        return {
            type: 'MultiLineString',
            coordinates: feature.geometry.coordinates.map(function (lines) {
                return simplifyLine(lines, tolerance, highQuality);
            })
        };
    } else if (feature.geometry.type === 'Polygon') {
        return {
            type: 'Polygon',
            coordinates: simplifyPolygon(feature.geometry.coordinates, tolerance, highQuality)
        };
    } else if (feature.geometry.type === 'MultiPolygon') {
        return {
            type: 'MultiPolygon',
            coordinates: feature.geometry.coordinates.map(function (rings) {
                return simplifyPolygon(rings, tolerance, highQuality);
            })
        };
    } else {
        // unsupported geometry type supplied
        return feature;
    }
}

/*
* returns true if ring's first coordinate is the same as its last
*/
function checkValidity(ring) {
    if (ring.length < 3) {
        return false;
    //if the last point is the same as the first, it's not a triangle
    } else if (ring.length === 3 &&
      ((ring[2][0] === ring[0][0]) && (ring[2][1] === ring[0][1]))) {
        return false;
    } else {
        return true;
    }
}

function simpleFeature(geom, properties) {
    return {
        type: 'Feature',
        geometry: geom,
        properties: properties
    };
}

function simplifyLine(coordinates, tolerance, highQuality) {
    return simplify(coordinates.map(function (coord) {
        return {x: coord[0], y: coord[1], z: coord[2]};
    }), tolerance, highQuality).map(function (coords) {
        return (coords.z) ? [coords.x, coords.y, coords.z] : [coords.x, coords.y];
    });
}

function simplifyPolygon(coordinates, tolerance, highQuality) {
    return coordinates.map(function (ring) {
        var pts = ring.map(function (coord) {
            return {x: coord[0], y: coord[1]};
        });
        if (pts.length < 4) {
            throw new Error('Invalid polygon');
        }
        var simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {
            return [coords.x, coords.y];
        });
        //remove 1 percent of tolerance until enough points to make a triangle
        while (!checkValidity(simpleRing)) {
            tolerance -= tolerance * 0.01;
            simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {
                return [coords.x, coords.y];
            });
        }
        if (
            (simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0]) ||
                (simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1])) {
            simpleRing.push(simpleRing[0]);
        }
        return simpleRing;
    });
}


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
 (c) 2013, Vladimir Agafonkin
 Simplify.js, a high-performance JS polyline simplification library
 mourner.github.io/simplify-js
*/

(function () { 'use strict';

// to suit your point format, run search/replace for '.x' and '.y';
// for 3D version, see 3d branch (configurability would draw significant performance overhead)

// square distance between 2 points
function getSqDist(p1, p2) {

    var dx = p1.x - p2.x,
        dy = p1.y - p2.y;

    return dx * dx + dy * dy;
}

// square distance from a point to a segment
function getSqSegDist(p, p1, p2) {

    var x = p1.x,
        y = p1.y,
        dx = p2.x - x,
        dy = p2.y - y;

    if (dx !== 0 || dy !== 0) {

        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);

        if (t > 1) {
            x = p2.x;
            y = p2.y;

        } else if (t > 0) {
            x += dx * t;
            y += dy * t;
        }
    }

    dx = p.x - x;
    dy = p.y - y;

    return dx * dx + dy * dy;
}
// rest of the code doesn't care about point format

// basic distance-based simplification
function simplifyRadialDist(points, sqTolerance) {

    var prevPoint = points[0],
        newPoints = [prevPoint],
        point;

    for (var i = 1, len = points.length; i < len; i++) {
        point = points[i];

        if (getSqDist(point, prevPoint) > sqTolerance) {
            newPoints.push(point);
            prevPoint = point;
        }
    }

    if (prevPoint !== point) newPoints.push(point);

    return newPoints;
}

// simplification using optimized Douglas-Peucker algorithm with recursion elimination
function simplifyDouglasPeucker(points, sqTolerance) {

    var len = points.length,
        MarkerArray = typeof Uint8Array !== 'undefined' ? Uint8Array : Array,
        markers = new MarkerArray(len),
        first = 0,
        last = len - 1,
        stack = [],
        newPoints = [],
        i, maxSqDist, sqDist, index;

    markers[first] = markers[last] = 1;

    while (last) {

        maxSqDist = 0;

        for (i = first + 1; i < last; i++) {
            sqDist = getSqSegDist(points[i], points[first], points[last]);

            if (sqDist > maxSqDist) {
                index = i;
                maxSqDist = sqDist;
            }
        }

        if (maxSqDist > sqTolerance) {
            markers[index] = 1;
            stack.push(first, index, index, last);
        }

        last = stack.pop();
        first = stack.pop();
    }

    for (i = 0; i < len; i++) {
        if (markers[i]) newPoints.push(points[i]);
    }

    return newPoints;
}

// both algorithms combined for awesome performance
function simplify(points, tolerance, highestQuality) {

    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;

    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);
    points = simplifyDouglasPeucker(points, sqTolerance);

    return points;
}

// export as AMD module / Node module / browser or worker variable
if (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return simplify; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
else if (typeof module !== 'undefined') module.exports = simplify;
else if (typeof self !== 'undefined') self.simplify = simplify;
else window.simplify = simplify;

})();


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var linestring = __webpack_require__(13).lineString;
var Spline = __webpack_require__(141);

/**
 * Takes a {@link LineString|line} and returns a curved version
 * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)
 * algorithm.
 *
 * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).
 *
 * @name bezier
 * @param {Feature<LineString>} line input LineString
 * @param {number} [resolution=10000] time in milliseconds between points
 * @param {number} [sharpness=0.85] a measure of how curvy the path should be between splines
 * @returns {Feature<LineString>} curved line
 * @example
 * var line = turf.lineString([
 *   [-76.091308, 18.427501],
 *   [-76.695556, 18.729501],
 *   [-76.552734, 19.40443],
 *   [-74.61914, 19.134789],
 *   [-73.652343, 20.07657],
 *   [-73.157958, 20.210656]
 * ]);
 *
 * var curved = turf.bezier(line);
 *
 * //addToMap
 * var addToMap = [line, curved]
 * curved.properties = { stroke: '#0F0' };
 */
module.exports = function (line, resolution, sharpness) {
    var coords = [];

    var spline = new Spline({
        points: line.geometry.coordinates.map(function (pt) {
            return {x: pt[0], y: pt[1]};
        }),
        duration: resolution,
        sharpness: sharpness
    });

    for (var i = 0; i < spline.duration; i += 10) {
        var pos = spline.pos(i);
        if (Math.floor(i / 100) % 2 === 0) {
            coords.push([pos.x, pos.y]);
        }
    }

    return linestring(coords, line.properties);
};


/***/ }),
/* 141 */
/***/ (function(module, exports) {

/* eslint-disable */

 /**
   * BezierSpline
   * https://github.com/leszekr/bezier-spline-js
   *
   * @private
   * @copyright
   * Copyright (c) 2013 Leszek Rybicki
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
var Spline = function (options) {
    this.points = options.points || [];
    this.duration = options.duration || 10000;
    this.sharpness = options.sharpness || 0.85;
    this.centers = [];
    this.controls = [];
    this.stepLength = options.stepLength || 60;
    this.length = this.points.length;
    this.delay = 0;
    // this is to ensure compatibility with the 2d version
    for (var i = 0; i < this.length; i++) this.points[i].z = this.points[i].z || 0;
    for (var i = 0; i < this.length - 1; i++) {
        var p1 = this.points[i];
        var p2 = this.points[i + 1];
        this.centers.push({
            x: (p1.x + p2.x) / 2,
            y: (p1.y + p2.y) / 2,
            z: (p1.z + p2.z) / 2
        });
    }
    this.controls.push([this.points[0], this.points[0]]);
    for (var i = 0; i < this.centers.length - 1; i++) {
        var p1 = this.centers[i];
        var p2 = this.centers[i + 1];
        var dx = this.points[i + 1].x - (this.centers[i].x + this.centers[i + 1].x) / 2;
        var dy = this.points[i + 1].y - (this.centers[i].y + this.centers[i + 1].y) / 2;
        var dz = this.points[i + 1].z - (this.centers[i].y + this.centers[i + 1].z) / 2;
        this.controls.push([{
            x: (1.0 - this.sharpness) * this.points[i + 1].x + this.sharpness * (this.centers[i].x + dx),
            y: (1.0 - this.sharpness) * this.points[i + 1].y + this.sharpness * (this.centers[i].y + dy),
            z: (1.0 - this.sharpness) * this.points[i + 1].z + this.sharpness * (this.centers[i].z + dz)},
            {
                x: (1.0 - this.sharpness) * this.points[i + 1].x + this.sharpness * (this.centers[i + 1].x + dx),
                y: (1.0 - this.sharpness) * this.points[i + 1].y + this.sharpness * (this.centers[i + 1].y + dy),
                z: (1.0 - this.sharpness) * this.points[i + 1].z + this.sharpness * (this.centers[i + 1].z + dz)}]);
    }
    this.controls.push([this.points[this.length - 1], this.points[this.length - 1]]);
    this.steps = this.cacheSteps(this.stepLength);
    return this;
};

  /*
    Caches an array of equidistant (more or less) points on the curve.
  */
Spline.prototype.cacheSteps = function (mindist) {
    var steps = [];
    var laststep = this.pos(0);
    steps.push(0);
    for (var t = 0; t < this.duration; t += 10) {
        var step = this.pos(t);
        var dist = Math.sqrt((step.x - laststep.x) * (step.x - laststep.x) + (step.y - laststep.y) * (step.y - laststep.y) + (step.z - laststep.z) * (step.z - laststep.z));
        if (dist > mindist) {
            steps.push(t);
            laststep = step;
        }
    }
    return steps;
};

  /*
    returns angle and speed in the given point in the curve
  */
Spline.prototype.vector = function (t) {
    var p1 = this.pos(t + 10);
    var p2 = this.pos(t - 10);
    return {
        angle:180 * Math.atan2(p1.y - p2.y, p1.x - p2.x) / 3.14,
        speed:Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y) + (p2.z - p1.z) * (p2.z - p1.z))
    };
};

  /*
    Gets the position of the point, given time.

    WARNING: The speed is not constant. The time it takes between control points is constant.

    For constant speed, use Spline.steps[i];
  */
Spline.prototype.pos = function (time) {

    function bezier(t, p1, c1, c2, p2) {
        var B = function (t) {
            var t2 = t * t, t3 = t2 * t;
            return [(t3), (3 * t2 * (1 - t)), (3 * t * (1 - t) * (1 - t)), ((1 - t) * (1 - t) * (1 - t))];
        };
        var b = B(t);
        var pos = {
            x : p2.x * b[0] + c2.x * b[1] + c1.x * b[2] + p1.x * b[3],
            y : p2.y * b[0] + c2.y * b[1] + c1.y * b[2] + p1.y * b[3],
            z : p2.z * b[0] + c2.z * b[1] + c1.z * b[2] + p1.z * b[3]
        };
        return pos;
    }
    var t = time - this.delay;
    if (t < 0) t = 0;
    if (t > this.duration) t = this.duration - 1;
    //t = t-this.delay;
    var t2 = (t) / this.duration;
    if (t2 >= 1) return this.points[this.length - 1];

    var n = Math.floor((this.points.length - 1) * t2);
    var t1 = (this.length - 1) * t2 - n;
    return bezier(t1, this.points[n], this.controls[n][1], this.controls[n + 1][0], this.points[n + 1]);
};

module.exports = Spline;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var inside = __webpack_require__(17);

/**
 * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and performs a spatial join.
 *
 * @name tag
 * @param {FeatureCollection<Point>} points input points
 * @param {FeatureCollection<Polygon>} polygons input polygons
 * @param {string} field property in `polygons` to add to joined {<Point>} features
 * @param {string} outField property in `points` in which to store joined property from `polygons`
 * @returns {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`
 * @example
 * var pt1 = turf.point([-77, 44]);
 * var pt2 = turf.point([-77, 38]);
 * var poly1 = turf.polygon([[
 *   [-81, 41],
 *   [-81, 47],
 *   [-72, 47],
 *   [-72, 41],
 *   [-81, 41]
 * ]], {pop: 3000});
 * var poly2 = turf.polygon([[
 *   [-81, 35],
 *   [-81, 41],
 *   [-72, 41],
 *   [-72, 35],
 *   [-81, 35]
 * ]], {pop: 1000});
 *
 * var points = turf.featureCollection([pt1, pt2]);
 * var polygons = turf.featureCollection([poly1, poly2]);
 *
 * var tagged = turf.tag(points, polygons, 'pop', 'population');
 *
 * //addToMap
 * var addToMap = [tagged, polygons]
 */
module.exports = function (points, polygons, field, outField) {
    // prevent mutations
    points = JSON.parse(JSON.stringify(points));
    polygons = JSON.parse(JSON.stringify(polygons));
    points.features.forEach(function (pt) {
        if (!pt.properties) {
            pt.properties = {};
        }
        polygons.features.forEach(function (poly) {
            if (pt.properties[outField] === undefined) {
                var isInside = inside(pt, poly);
                if (isInside) {
                    pt.properties[outField] = poly.properties[field];
                }
            }
        });
    });
    return points;
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

// http://stackoverflow.com/questions/11935175/sampling-a-random-subset-from-an-array
var featureCollection = __webpack_require__(13).featureCollection;

/**
 * Takes a {@link FeatureCollection} and returns a FeatureCollection with given number of {@link Feature|features} at random.
 *
 * @name sample
 * @param {FeatureCollection} featurecollection set of input features
 * @param {number} num number of features to select
 * @returns {FeatureCollection} a FeatureCollection with `n` features
 * @example
 * var points = turf.random('points', 100, {
 *   bbox: [-80, 30, -60, 60]
 * });
 *
 * var sample = turf.sample(points, 5);
 *
 * //addToMap
 * var addToMap = [points, sample]
 * turf.featureEach(sample, function (currentFeature) {
 *   currentFeature.properties['marker-size'] = 'large';
 *   currentFeature.properties['marker-color'] = '#000';
 * });
 */
module.exports = function (featurecollection, num) {
    var outFC = featureCollection(getRandomSubarray(featurecollection.features, num));
    return outFC;
};

function getRandomSubarray(arr, size) {
    var shuffled = arr.slice(0), i = arr.length, min = i - size, temp, index;
    while (i-- > min) {
        index = Math.floor((i + 1) * Math.random());
        temp = shuffled[index];
        shuffled[index] = shuffled[i];
        shuffled[i] = temp;
    }
    return shuffled.slice(min);
}


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var distance = __webpack_require__(16);

/**
 * Takes a bounding box and calculates the minimum square bounding box that
 * would contain the input.
 *
 * @name square
 * @param {Array<number>} bbox extent in [west, south, east, north] order
 * @returns {Array<number>} a square surrounding `bbox`
 * @example
 * var bbox = [-20,-20,-15,0];
 * var squared = turf.square(bbox);
 * var features = turf.featureCollection([
 *   turf.bboxPolygon(bbox),
 *   turf.bboxPolygon(squared)
 * ]);
 *
 * //addToMap
 * var addToMap = [features]
 */
module.exports = function (bbox) {
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];

    var horizontalDistance = distance(bbox.slice(0, 2), [east, south]);
    var verticalDistance = distance(bbox.slice(0, 2), [west, north]);
    if (horizontalDistance >= verticalDistance) {
        var verticalMidpoint = (south + north) / 2;
        return [
            west,
            verticalMidpoint - ((east - west) / 2),
            east,
            verticalMidpoint + ((east - west) / 2)
        ];
    } else {
        var horizontalMidpoint = (west + east) / 2;
        return [
            horizontalMidpoint - ((north - south) / 2),
            south,
            horizontalMidpoint + ((north - south) / 2),
            north
        ];
    }
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var bearing = __webpack_require__(25);
var destination = __webpack_require__(20);
var distance = __webpack_require__(16);

/**
 * Takes two {@link Point|points} and returns a point midway between them.
 * The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.
 *
 * @name midpoint
 * @param {Geometry|Feature<Point>|Array<number>} point1 first point
 * @param {Geometry|Feature<Point>|Array<number>} point2 second point
 * @returns {Feature<Point>} a point midway between `pt1` and `pt2`
 * @example
 * var point1 = turf.point([144.834823, -37.771257]);
 * var point2 = turf.point([145.14244, -37.830937]);
 *
 * var midpoint = turf.midpoint(point1, point2);
 *
 * //addToMap
 * var addToMap = [point1, point2, midpoint];
 * midpoint.properties['marker-color'] = '#f00';
 */
module.exports = function (point1, point2) {
    var dist = distance(point1, point2, 'miles');
    var heading = bearing(point1, point2);
    var midpoint = destination(point1, dist / 2, heading, 'miles');

    return midpoint;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var d3 = __webpack_require__(147);
var jsts = __webpack_require__(33);
var meta = __webpack_require__(1);
var center = __webpack_require__(36);
var helpers = __webpack_require__(13);
var feature = helpers.feature;
var geomEach = meta.geomEach;
var featureEach = meta.featureEach;
var featureCollection = helpers.featureCollection;
var radiansToDistance = helpers.radiansToDistance;
var distanceToRadians = helpers.distanceToRadians;

/**
 * Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.
 *
 * When using a negative radius, the resulting geometry may be invalid if
 * it's too small compared to the radius magnitude. If the input is a
 * FeatureCollection, only valid members will be returned in the output
 * FeatureCollection - i.e., the output collection may have fewer members than
 * the input, or even be empty.
 *
 * @name buffer
 * @param {FeatureCollection|Geometry|Feature<any>} geojson input to be buffered
 * @param {number} radius distance to draw the buffer (negative values are allowed)
 * @param {string} [units=kilometers] any of the options supported by turf units
 * @param {number} [steps=64] number of steps
 * @returns {FeatureCollection|Feature<Polygon|MultiPolygon>|undefined} buffered features
 * @example
 * var point = turf.point([-90.548630, 14.616599]);
 * var buffered = turf.buffer(point, 500, 'miles');
 *
 * //addToMap
 * var addToMap = [point, buffered]
 */
module.exports = function (geojson, radius, units, steps) {
    // validation
    if (!geojson) throw new Error('geojson is required');
    // Allow negative buffers ("erosion") or zero-sized buffers ("repair geometry")
    if (radius === undefined) throw new Error('radius is required');
    if (steps <= 0) throw new Error('steps must be greater than 0');

    // prevent input mutation
    // geojson = JSON.parse(JSON.stringify(geojson));

    // default params
    steps = steps || 64;
    units = units || 'kilometers';

    var results = [];
    switch (geojson.type) {
    case 'GeometryCollection':
        geomEach(geojson, function (geometry) {
            var buffered = buffer(geometry, radius, units, steps);
            if (buffered) results.push(buffered);
        });
        return featureCollection(results);
    case 'FeatureCollection':
        featureEach(geojson, function (feature) {
            var multiBuffered = buffer(feature, radius, units, steps);
            if (multiBuffered) {
                featureEach(multiBuffered, function (buffered) {
                    if (buffered) results.push(buffered);
                });
            }
        });
        return featureCollection(results);
    }
    return buffer(geojson, radius, units, steps);
};

/**
 * Buffer single Feature/Geometry
 *
 * @private
 * @param {Feature<any>} geojson input to be buffered
 * @param {number} radius distance to draw the buffer
 * @param {string} [units='kilometers'] any of the options supported by turf units
 * @param {number} [steps=64] number of steps
 * @returns {Feature<Polygon|MultiPolygon>} buffered feature
 */
function buffer(geojson, radius, units, steps) {
    var properties = geojson.properties || {};
    var geometry = (geojson.type === 'Feature') ? geojson.geometry : geojson;

    // Geometry Types faster than jsts
    switch (geometry.type) {
    case 'GeometryCollection':
        var results = [];
        geomEach(geojson, function (geometry) {
            var buffered = buffer(geometry, radius, units, steps);
            if (buffered) results.push(buffered);
        });
        return featureCollection(results);
    }

    // Project GeoJSON to Transverse Mercator projection (convert to Meters)
    var distance = radiansToDistance(distanceToRadians(radius, units), 'meters');
    var projection = defineProjection(geojson);
    var projected = {
        type: geometry.type,
        coordinates: projectCoords(geometry.coordinates, projection)
    };

    // JSTS buffer operation
    var reader = new jsts.io.GeoJSONReader();
    var geom = reader.read(projected);
    var buffered = geom.buffer(distance);
    var writer = new jsts.io.GeoJSONWriter();
    buffered = writer.write(buffered);

    // Detect if empty geometries
    if (coordsIsNaN(buffered.coordinates)) return undefined;

    // Unproject coordinates (convert to Degrees)
    buffered.coordinates = unprojectCoords(buffered.coordinates, projection);
    return feature(buffered, properties);
}

/**
 * Coordinates isNaN
 *
 * @private
 * @param {Array<any>} coords GeoJSON Coordinates
 * @returns {Boolean} if NaN exists
 */
function coordsIsNaN(coords) {
    if (Array.isArray(coords[0])) return coordsIsNaN(coords[0]);
    return isNaN(coords[0]);
}

/**
 * Project coordinates to projection
 *
 * @private
 * @param {Array<any>} coords to project
 * @param {GeoProjection} projection D3 Geo Projection
 * @returns {Array<any>} projected coordinates
 */
function projectCoords(coords, projection) {
    if (typeof coords[0] !== 'object') return projection(coords);
    return coords.map(function (coord) {
        return projectCoords(coord, projection);
    });
}

/**
 * Un-Project coordinates to projection
 *
 * @private
 * @param {Array<any>} coords to un-project
 * @param {GeoProjection} projection D3 Geo Projection
 * @returns {Array<any>} un-projected coordinates
 */
function unprojectCoords(coords, projection) {
    if (typeof coords[0] !== 'object') return projection.invert(coords);
    return coords.map(function (coord) {
        return unprojectCoords(coord, projection);
    });
}

/**
 * Define Transverse Mercator projection
 *
 * @private
 * @param {Geometry|Feature<any>} geojson Base projection on center of GeoJSON
 * @returns {GeoProjection} D3 Geo Transverse Mercator Projection
 */
function defineProjection(geojson) {
    var coords = center(geojson).geometry.coordinates.reverse();
    var rotate = coords.map(function (coord) { return -coord; });
    var projection = d3.geoTransverseMercator()
        .center(coords)
        .rotate(rotate)
        .scale(6373000);

    return projection;
}


/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_area__ = __webpack_require__(72);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoArea", function() { return __WEBPACK_IMPORTED_MODULE_0__src_area__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_bounds__ = __webpack_require__(148);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoBounds", function() { return __WEBPACK_IMPORTED_MODULE_1__src_bounds__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_centroid__ = __webpack_require__(149);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoCentroid", function() { return __WEBPACK_IMPORTED_MODULE_2__src_centroid__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_circle__ = __webpack_require__(73);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoCircle", function() { return __WEBPACK_IMPORTED_MODULE_3__src_circle__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_clip_extent__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoClipExtent", function() { return __WEBPACK_IMPORTED_MODULE_4__src_clip_extent__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_contains__ = __webpack_require__(168);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoContains", function() { return __WEBPACK_IMPORTED_MODULE_5__src_contains__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_distance__ = __webpack_require__(91);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoDistance", function() { return __WEBPACK_IMPORTED_MODULE_6__src_distance__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_graticule__ = __webpack_require__(169);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoGraticule", function() { return __WEBPACK_IMPORTED_MODULE_7__src_graticule__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoGraticule10", function() { return __WEBPACK_IMPORTED_MODULE_7__src_graticule__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_interpolate__ = __webpack_require__(170);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoInterpolate", function() { return __WEBPACK_IMPORTED_MODULE_8__src_interpolate__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_length__ = __webpack_require__(92);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoLength", function() { return __WEBPACK_IMPORTED_MODULE_9__src_length__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_path_index__ = __webpack_require__(171);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoPath", function() { return __WEBPACK_IMPORTED_MODULE_10__src_path_index__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_projection_albers__ = __webpack_require__(94);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoAlbers", function() { return __WEBPACK_IMPORTED_MODULE_11__src_projection_albers__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_projection_albersUsa__ = __webpack_require__(181);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoAlbersUsa", function() { return __WEBPACK_IMPORTED_MODULE_12__src_projection_albersUsa__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_projection_azimuthalEqualArea__ = __webpack_require__(182);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoAzimuthalEqualArea", function() { return __WEBPACK_IMPORTED_MODULE_13__src_projection_azimuthalEqualArea__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoAzimuthalEqualAreaRaw", function() { return __WEBPACK_IMPORTED_MODULE_13__src_projection_azimuthalEqualArea__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_projection_azimuthalEquidistant__ = __webpack_require__(183);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoAzimuthalEquidistant", function() { return __WEBPACK_IMPORTED_MODULE_14__src_projection_azimuthalEquidistant__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoAzimuthalEquidistantRaw", function() { return __WEBPACK_IMPORTED_MODULE_14__src_projection_azimuthalEquidistant__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_projection_conicConformal__ = __webpack_require__(184);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoConicConformal", function() { return __WEBPACK_IMPORTED_MODULE_15__src_projection_conicConformal__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoConicConformalRaw", function() { return __WEBPACK_IMPORTED_MODULE_15__src_projection_conicConformal__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_projection_conicEqualArea__ = __webpack_require__(48);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoConicEqualArea", function() { return __WEBPACK_IMPORTED_MODULE_16__src_projection_conicEqualArea__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoConicEqualAreaRaw", function() { return __WEBPACK_IMPORTED_MODULE_16__src_projection_conicEqualArea__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_projection_conicEquidistant__ = __webpack_require__(185);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoConicEquidistant", function() { return __WEBPACK_IMPORTED_MODULE_17__src_projection_conicEquidistant__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoConicEquidistantRaw", function() { return __WEBPACK_IMPORTED_MODULE_17__src_projection_conicEquidistant__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__src_projection_equirectangular__ = __webpack_require__(96);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoEquirectangular", function() { return __WEBPACK_IMPORTED_MODULE_18__src_projection_equirectangular__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoEquirectangularRaw", function() { return __WEBPACK_IMPORTED_MODULE_18__src_projection_equirectangular__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__src_projection_gnomonic__ = __webpack_require__(186);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoGnomonic", function() { return __WEBPACK_IMPORTED_MODULE_19__src_projection_gnomonic__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoGnomonicRaw", function() { return __WEBPACK_IMPORTED_MODULE_19__src_projection_gnomonic__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__src_projection_identity__ = __webpack_require__(187);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoIdentity", function() { return __WEBPACK_IMPORTED_MODULE_20__src_projection_identity__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__src_projection_index__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoProjection", function() { return __WEBPACK_IMPORTED_MODULE_21__src_projection_index__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoProjectionMutator", function() { return __WEBPACK_IMPORTED_MODULE_21__src_projection_index__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__src_projection_mercator__ = __webpack_require__(51);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoMercator", function() { return __WEBPACK_IMPORTED_MODULE_22__src_projection_mercator__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoMercatorRaw", function() { return __WEBPACK_IMPORTED_MODULE_22__src_projection_mercator__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__src_projection_orthographic__ = __webpack_require__(188);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoOrthographic", function() { return __WEBPACK_IMPORTED_MODULE_23__src_projection_orthographic__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoOrthographicRaw", function() { return __WEBPACK_IMPORTED_MODULE_23__src_projection_orthographic__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__src_projection_stereographic__ = __webpack_require__(189);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoStereographic", function() { return __WEBPACK_IMPORTED_MODULE_24__src_projection_stereographic__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoStereographicRaw", function() { return __WEBPACK_IMPORTED_MODULE_24__src_projection_stereographic__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__src_projection_transverseMercator__ = __webpack_require__(190);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoTransverseMercator", function() { return __WEBPACK_IMPORTED_MODULE_25__src_projection_transverseMercator__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoTransverseMercatorRaw", function() { return __WEBPACK_IMPORTED_MODULE_25__src_projection_transverseMercator__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__src_rotation__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoRotation", function() { return __WEBPACK_IMPORTED_MODULE_26__src_rotation__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__src_stream__ = __webpack_require__(21);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoStream", function() { return __WEBPACK_IMPORTED_MODULE_27__src_stream__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__src_transform__ = __webpack_require__(35);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "geoTransform", function() { return __WEBPACK_IMPORTED_MODULE_28__src_transform__["a"]; });




 // DEPRECATED! Use d3.geoIdentity().clipExtent(…).


























/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__area__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cartesian__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__stream__ = __webpack_require__(21);






var lambda0, phi0, lambda1, phi1, // bounds
    lambda2, // previous lambda-coordinate
    lambda00, phi00, // first point
    p0, // previous 3D point
    deltaSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    ranges,
    range;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].polygonStart();
  },
  polygonEnd: function() {
    __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (__WEBPACK_IMPORTED_MODULE_1__area__["a" /* areaRingSum */] < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > __WEBPACK_IMPORTED_MODULE_3__math__["i" /* epsilon */]) phi1 = 90;
    else if (deltaSum < -__WEBPACK_IMPORTED_MODULE_3__math__["i" /* epsilon */]) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["a" /* cartesian */])([lambda * __WEBPACK_IMPORTED_MODULE_3__math__["r" /* radians */], phi * __WEBPACK_IMPORTED_MODULE_3__math__["r" /* radians */]]);
  if (p0) {
    var normal = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["c" /* cartesianCross */])(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["c" /* cartesianCross */])(equatorial, normal);
    Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["e" /* cartesianNormalizeInPlace */])(inflection);
    inflection = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["g" /* spherical */])(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * __WEBPACK_IMPORTED_MODULE_3__math__["h" /* degrees */] * sign,
        phii,
        antimeridian = Object(__WEBPACK_IMPORTED_MODULE_3__math__["a" /* abs */])(delta) > 180;
    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * __WEBPACK_IMPORTED_MODULE_3__math__["h" /* degrees */];
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * __WEBPACK_IMPORTED_MODULE_3__math__["h" /* degrees */];
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(Object(__WEBPACK_IMPORTED_MODULE_3__math__["a" /* abs */])(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }
  __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);
  __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].lineEnd();
  if (Object(__WEBPACK_IMPORTED_MODULE_3__math__["a" /* abs */])(deltaSum) > __WEBPACK_IMPORTED_MODULE_3__math__["i" /* epsilon */]) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

/* harmony default export */ __webpack_exports__["a"] = (function(feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  Object(__WEBPACK_IMPORTED_MODULE_4__stream__["a" /* default */])(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;

  return lambda0 === Infinity || phi0 === Infinity
      ? [[NaN, NaN], [NaN, NaN]]
      : [[lambda0, phi0], [lambda1, phi1]];
});


/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__noop__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__stream__ = __webpack_require__(21);




var W0, W1,
    X0, Y0, Z0,
    X1, Y1, Z1,
    X2, Y2, Z2,
    lambda00, phi00, // first point
    x0, y0, z0; // previous point

var centroidStream = {
  sphere: __WEBPACK_IMPORTED_MODULE_1__noop__["a" /* default */],
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  centroidPointCartesian(cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda), cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda), Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  x0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda);
  y0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda);
  z0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi),
      x = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda),
      y = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda),
      z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi),
      w = Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  centroidStream.point = centroidRingPoint;
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  x0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda);
  y0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda);
  z0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi),
      x = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda),
      y = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda),
      z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(cx * cx + cy * cy + cz * cz),
      w = Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(m), // line weight = angle
      v = m && -w / m; // area weight multiplier
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

/* harmony default export */ __webpack_exports__["a"] = (function(object) {
  W0 = W1 =
  X0 = Y0 = Z0 =
  X1 = Y1 = Z1 =
  X2 = Y2 = Z2 = 0;
  Object(__WEBPACK_IMPORTED_MODULE_2__stream__["a" /* default */])(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < __WEBPACK_IMPORTED_MODULE_0__math__["j" /* epsilon2 */]) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < __WEBPACK_IMPORTED_MODULE_0__math__["j" /* epsilon2 */]) return [NaN, NaN];
  }

  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(y, x) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */], Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(z / Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(m)) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]];
});


/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
});


/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pairs__ = __webpack_require__(80);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = __WEBPACK_IMPORTED_MODULE_0__pairs__["a" /* pair */];

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
});


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
});


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bisect__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__extent__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__identity__ = __webpack_require__(156);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__range__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ticks__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__threshold_sturges__ = __webpack_require__(87);









/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var value = __WEBPACK_IMPORTED_MODULE_4__identity__["a" /* default */],
      domain = __WEBPACK_IMPORTED_MODULE_3__extent__["a" /* default */],
      threshold = __WEBPACK_IMPORTED_MODULE_7__threshold_sturges__["a" /* default */];

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = Object(__WEBPACK_IMPORTED_MODULE_6__ticks__["a" /* tickStep */])(x0, x1, tz);
      tz = Object(__WEBPACK_IMPORTED_MODULE_5__range__["a" /* default */])(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[Object(__WEBPACK_IMPORTED_MODULE_1__bisect__["a" /* default */])(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__array__["b" /* slice */].call(_)) : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(_), histogram) : threshold;
  };

  return histogram;
});


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ascending__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__number__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__quantile__ = __webpack_require__(46);





/* unused harmony default export */ var _unused_webpack_default_export = (function(values, min, max) {
  values = __WEBPACK_IMPORTED_MODULE_0__array__["a" /* map */].call(values, __WEBPACK_IMPORTED_MODULE_2__number__["a" /* default */]).sort(__WEBPACK_IMPORTED_MODULE_1__ascending__["a" /* default */]);
  return Math.ceil((max - min) / (2 * (Object(__WEBPACK_IMPORTED_MODULE_3__quantile__["a" /* default */])(values, 0.75) - Object(__WEBPACK_IMPORTED_MODULE_3__quantile__["a" /* default */])(values, 0.25)) * Math.pow(values.length, -1 / 3)));
});


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deviation__ = __webpack_require__(81);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, min, max) {
  return Math.ceil((max - min) / (3.5 * Object(__WEBPACK_IMPORTED_MODULE_0__deviation__["a" /* default */])(values) * Math.pow(values.length, -1 / 3)));
});


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
});


/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(27);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
});


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__number__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__quantile__ = __webpack_require__(46);




/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_1__number__["a" /* default */])(values[i]))) {
        numbers.push(value);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_1__number__["a" /* default */])(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return Object(__WEBPACK_IMPORTED_MODULE_2__quantile__["a" /* default */])(numbers.sort(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */]), 0.5);
});


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
});


/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
});


/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(24);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = __WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */];

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
});


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
});


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  }

  else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
});


/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transpose__ = __webpack_require__(89);


/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__transpose__["a" /* default */])(arguments);
});


/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polygonContains__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__distance__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(15);




var containsObjectType = {
  Feature: function(object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function(object, point) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
    return false;
  }
};

var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
    return false;
  },
  LineString: function(object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsLine(coordinates[i], point)) return true;
    return false;
  },
  Polygon: function(object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
    return false;
  },
  GeometryCollection: function(object, point) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
      ? containsGeometryType[geometry.type](geometry, point)
      : false;
}

function containsPoint(coordinates, point) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ab = Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(coordinates[0], coordinates[1]),
      ao = Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(coordinates[0], point),
      ob = Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(point, coordinates[1]);
  return ao + ob <= ab + __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];
}

function containsPolygon(coordinates, point) {
  return !!Object(__WEBPACK_IMPORTED_MODULE_0__polygonContains__["a" /* default */])(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */], point[1] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */]];
}

/* harmony default export */ __webpack_exports__["a"] = (function(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type)
      ? containsObjectType[object.type]
      : containsGeometry)(object, point);
});


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = graticule;
/* harmony export (immutable) */ __webpack_exports__["b"] = graticule10;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);



function graticuleX(y0, y1, dy) {
  var y = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(y0, y1 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */], dy).concat(y1);
  return function(x) { return y.map(function(y) { return [x, y]; }); };
}

function graticuleY(x0, x1, dx) {
  var x = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(x0, x1 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */], dx).concat(x1);
  return function(y) { return x.map(function(x) { return [x, y]; }); };
}

function graticule() {
  var x1, x0, X1, X0,
      y1, y0, Y1, Y0,
      dx = 10, dy = dx, DX = 90, DY = 360,
      x, y, X, Y,
      precision = 2.5;

  function graticule() {
    return {type: "MultiLineString", coordinates: lines()};
  }

  function lines() {
    return Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(X0 / DX) * DX, X1, DX).map(X)
        .concat(Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(Y0 / DY) * DY, Y1, DY).map(Y))
        .concat(Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(x0 / dx) * dx, x1, dx).filter(function(x) { return Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(x % DX) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]; }).map(x))
        .concat(Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(y0 / dy) * dy, y1, dy).filter(function(y) { return Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(y % DY) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]; }).map(y));
  }

  graticule.lines = function() {
    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
  };

  graticule.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X0).concat(
        Y(Y1).slice(1),
        X(X1).reverse().slice(1),
        Y(Y0).reverse().slice(1))
      ]
    };
  };

  graticule.extent = function(_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function(_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function(_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function(_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule
      .extentMajor([[-180, -90 + __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]], [180, 90 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]]])
      .extentMinor([[-180, -80 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]], [180, 80 + __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]]]);
}

function graticule10() {
  return graticule()();
}


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);


/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var x0 = a[0] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      y0 = a[1] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      x1 = b[0] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      y1 = b[1] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      cy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y0),
      sy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0),
      cy1 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y1),
      sy1 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y1),
      kx0 = cy0 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x0),
      ky0 = cy0 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x0),
      kx1 = cy1 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x1),
      ky1 = cy1 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x1),
      d = 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["m" /* haversin */])(y1 - y0) + cy0 * cy1 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["m" /* haversin */])(x1 - x0))),
      k = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(d);

  var interpolate = d ? function(t) {
    var B = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(t *= d) / k,
        A = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(y, x) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */],
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(z, Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + y * y)) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]
    ];
  } : function() {
    return [x0 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */], y0 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]];
  };

  interpolate.distance = d;

  return interpolate;
});


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__identity__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__stream__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__area__ = __webpack_require__(172);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__bounds__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__centroid__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__context__ = __webpack_require__(174);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__measure__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__string__ = __webpack_require__(176);









/* harmony default export */ __webpack_exports__["a"] = (function(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_2__area__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_2__area__["a" /* default */].result();
  };

  path.measure = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_6__measure__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_6__measure__["a" /* default */].result();
  };

  path.bounds = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_3__bounds__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_3__bounds__["a" /* default */].result();
  };

  path.centroid = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_4__centroid__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_4__centroid__["a" /* default */].result();
  };

  path.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, __WEBPACK_IMPORTED_MODULE_0__identity__["a" /* default */]) : (projection = _).stream, path) : projection;
  };

  path.context = function(_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new __WEBPACK_IMPORTED_MODULE_7__string__["a" /* default */]) : new __WEBPACK_IMPORTED_MODULE_5__context__["a" /* default */](context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
});


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(19);




var areaSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    areaRingSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    x00,
    y00,
    x0,
    y0;

var areaStream = {
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonStart: function() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
    areaSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(areaRingSum));
    areaRingSum.reset();
  },
  result: function() {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

/* harmony default export */ __webpack_exports__["a"] = (areaStream);


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);


// TODO Enforce positive area for exterior, negative area for interior?

var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;

var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
        : Z1 ? [X1 / Z1, Y1 / Z1]
        : Z0 ? [X0 / Z0, Y0 / Z0]
        : [NaN, NaN];
    X0 = Y0 = Z0 =
    X1 = Y1 = Z1 =
    X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0, dy = y - y0, z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(dx * dx + dy * dy);

  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;

  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

/* harmony default export */ __webpack_exports__["a"] = (centroidStream);


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = PathContext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__noop__ = __webpack_require__(19);



function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, __WEBPACK_IMPORTED_MODULE_0__math__["w" /* tau */]);
        break;
      }
    }
  },
  result: __WEBPACK_IMPORTED_MODULE_1__noop__["a" /* default */]
};


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(19);




var lengthSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;

var lengthStream = {
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: function() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function() {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["u" /* sqrt */])(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

/* harmony default export */ __webpack_exports__["a"] = (lengthStream);


/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = PathString;
function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null) this._circle = circle(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
      + "z";
}


/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);



/* harmony default export */ __webpack_exports__["a"] = (Object(__WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */])(
  function() { return true; },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], -__WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */]]
));

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] : -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */],
          delta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda1 - lambda0);
      if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(delta - __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */]) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) { // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? __WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */] : -__WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */]);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */]) { // line crosses antimeridian
        if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda0 - sign0) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) lambda0 -= sign0 * __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]; // handle degeneracies
        if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda1 - sign1) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) lambda1 -= sign1 * __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */];
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda0 - lambda1);
  return Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(sinLambda0Lambda1) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]
      ? Object(__WEBPACK_IMPORTED_MODULE_1__math__["d" /* atan */])((Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi0) * (cosPhi1 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi1)) * Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda1)
          - Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi1) * (cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi0)) * Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda0))
          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
      : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * __WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */];
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], phi);
    stream.point(0, phi);
    stream.point(__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], phi);
    stream.point(__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], 0);
    stream.point(__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], -phi);
    stream.point(0, -phi);
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], -phi);
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], 0);
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], phi);
  } else if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(from[0] - to[0]) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) {
    var lambda = from[0] < to[0] ? __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] : -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */];
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}


/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cartesian__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__circle__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pointEqual__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__index__ = __webpack_require__(95);






/* harmony default export */ __webpack_exports__["a"] = (function(radius, delta) {
  var cr = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(radius),
      smallRadius = cr > 0,
      notHemisphere = Object(__WEBPACK_IMPORTED_MODULE_2__math__["a" /* abs */])(cr) > __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */]; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    Object(__WEBPACK_IMPORTED_MODULE_1__circle__["a" /* circleStream */])(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(lambda) * Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
        c0, // code for previous point
        v0, // visibility of previous point
        v00, // visibility of first point
        clean; // no intersections
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius
              ? v ? 0 : code(lambda, phi)
              : v ? code(lambda + (lambda < 0 ? __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */] : -__WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */]), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        // Handle degeneracies.
        // TODO ignore if not clipping polygons.
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || Object(__WEBPACK_IMPORTED_MODULE_3__pointEqual__["a" /* default */])(point0, point2) || Object(__WEBPACK_IMPORTED_MODULE_3__pointEqual__["a" /* default */])(point1, point2)) {
            point1[0] += __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];
            point1[1] += __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];
            v = visible(point1[0], point1[1]);
          }
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }
        if (v && (!point0 || !Object(__WEBPACK_IMPORTED_MODULE_3__pointEqual__["a" /* default */])(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | ((v00 && v0) << 1);
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])(a),
        pb = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0], // normal
        n2 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["c" /* cartesianCross */])(pa, pb),
        n2n2 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(n2, n2),
        n1n2 = n2[0], // cartesianDot(n1, n2),
        determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 =  cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["c" /* cartesianCross */])(n1, n2),
        A = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(n1, c1),
        B = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(n2, c2);
    Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["b" /* cartesianAddInPlace */])(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(A, u),
        uu = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(u, u),
        t2 = w * w - uu * (Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(A, A) - 1);

    if (t2 < 0) return;

    var t = Object(__WEBPACK_IMPORTED_MODULE_2__math__["u" /* sqrt */])(t2),
        q = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(u, (-w - t) / uu);
    Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["b" /* cartesianAddInPlace */])(q, A);
    q = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["g" /* spherical */])(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = Object(__WEBPACK_IMPORTED_MODULE_2__math__["a" /* abs */])(delta - __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */]) < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */],
        meridian = polar || delta < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian
        ? polar
          ? phi0 + phi1 > 0 ^ q[1] < (Object(__WEBPACK_IMPORTED_MODULE_2__math__["a" /* abs */])(q[0] - lambda0) < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] ? phi0 : phi1)
          : phi0 <= q[1] && q[1] <= phi1
        : delta > __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */] ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(u, (-w + t) / uu);
      Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["b" /* cartesianAddInPlace */])(q1, A);
      return [q, Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["g" /* spherical */])(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */] - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return Object(__WEBPACK_IMPORTED_MODULE_4__index__["a" /* default */])(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-__WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */], radius - __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */]]);
});


/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cartesian__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transform__ = __webpack_require__(35);




var maxDepth = 16, // maximum depth of subdivision
    cosMinDistance = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(30 * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */]); // cos(minimum angular distance)

/* harmony default export */ __webpack_exports__["a"] = (function(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
});

function resampleNone(project) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__transform__["b" /* transformer */])({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = Object(__WEBPACK_IMPORTED_MODULE_1__math__["u" /* sqrt */])(a * a + b * b + c * c),
          phi2 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["c" /* asin */])(c /= m),
          lambda2 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(c) - 1) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */] || Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda0 - lambda1) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */] ? (lambda0 + lambda1) / 2 : Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
          || Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
        lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}


/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = cylindricalEqualAreaRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);


function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi) / cosPhi0];
  }

  forward.invert = function(x, y) {
    return [x / cosPhi0, Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(y * cosPhi0)];
  };

  return forward;
}


/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__albers__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__conicEqualArea__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fit__ = __webpack_require__(50);





// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
/* harmony default export */ __webpack_exports__["a"] = (function() {
  var cache,
      cacheStream,
      lower48 = Object(__WEBPACK_IMPORTED_MODULE_1__albers__["a" /* default */])(), lower48Point,
      alaska = Object(__WEBPACK_IMPORTED_MODULE_2__conicEqualArea__["b" /* default */])().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
      hawaii = Object(__WEBPACK_IMPORTED_MODULE_2__conicEqualArea__["b" /* default */])().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
      point, pointStream = {point: function(x, y) { point = [x, y]; }};

  function albersUsa(coordinates) {
    var x = coordinates[0], y = coordinates[1];
    return point = null,
        (lower48Point.point(x, y), point)
        || (alaskaPoint.point(x, y), point)
        || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function(coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
        : lower48).invert(coordinates);
  };

  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function(_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function(_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function(_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(), x = +_[0], y = +_[1];

    lower48Point = lower48
        .translate(_)
        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
        .stream(pointStream);

    alaskaPoint = alaska
        .translate([x - 0.307 * k, y + 0.201 * k])
        .clipExtent([[x - 0.425 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.120 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]], [x - 0.214 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.234 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]]])
        .stream(pointStream);

    hawaiiPoint = hawaii
        .translate([x - 0.205 * k, y + 0.212 * k])
        .clipExtent([[x - 0.214 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.166 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]], [x - 0.115 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.234 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]]])
        .stream(pointStream);

    return reset();
  };

  albersUsa.fitExtent = function(extent, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["a" /* fitExtent */])(albersUsa, extent, object);
  };

  albersUsa.fitSize = function(size, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["b" /* fitSize */])(albersUsa, size, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
});


/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return azimuthalEqualAreaRaw; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(18);




var azimuthalEqualAreaRaw = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["b" /* azimuthalRaw */])(function(cxcy) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(function(z) {
  return 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(z / 2);
});

/* harmony default export */ __webpack_exports__["b"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(azimuthalEqualAreaRaw)
      .scale(124.75)
      .clipAngle(180 - 1e-3);
});


/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return azimuthalEquidistantRaw; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(18);




var azimuthalEquidistantRaw = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["b" /* azimuthalRaw */])(function(c) {
  return (c = Object(__WEBPACK_IMPORTED_MODULE_0__math__["b" /* acos */])(c)) && c / Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(c);
});

azimuthalEquidistantRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(function(z) {
  return z;
});

/* harmony default export */ __webpack_exports__["b"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(azimuthalEquidistantRaw)
      .scale(79.4188)
      .clipAngle(180 - 1e-3);
});


/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = conicConformalRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__conic__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mercator__ = __webpack_require__(51);




function tany(y) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__math__["v" /* tan */])((__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y0),
      n = y0 === y1 ? Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0) : Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(cy0 / Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y1)) / Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(tany(y1) / tany(y0)),
      f = cy0 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["p" /* pow */])(tany(y0), n) / n;

  if (!n) return __WEBPACK_IMPORTED_MODULE_2__mercator__["c" /* mercatorRaw */];

  function project(x, y) {
    if (f > 0) { if (y < -__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) y = -__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]; }
    else { if (y > __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) y = __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]; }
    var r = f / Object(__WEBPACK_IMPORTED_MODULE_0__math__["p" /* pow */])(tany(y), n);
    return [r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(n * x), f - r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(n * x)];
  }

  project.invert = function(x, y) {
    var fy = f - y, r = Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(n) * Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + fy * fy);
    return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x, Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(fy)) / n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(fy), 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["p" /* pow */])(f / r, 1 / n)) - __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */]];
  };

  return project;
}

/* harmony default export */ __webpack_exports__["b"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_1__conic__["a" /* conicProjection */])(conicConformalRaw)
      .scale(109.5)
      .parallels([30, 30]);
});


/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = conicEquidistantRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__conic__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__equirectangular__ = __webpack_require__(96);




function conicEquidistantRaw(y0, y1) {
  var cy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y0),
      n = y0 === y1 ? Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0) : (cy0 - Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if (Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(n) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) return __WEBPACK_IMPORTED_MODULE_2__equirectangular__["b" /* equirectangularRaw */];

  function project(x, y) {
    var gy = g - y, nx = n * x;
    return [gy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(nx), g - gy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(nx)];
  }

  project.invert = function(x, y) {
    var gy = g - y;
    return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x, Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(gy)) / n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(gy), g - Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(n) * Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + gy * gy)];
  };

  return project;
}

/* harmony default export */ __webpack_exports__["b"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_1__conic__["a" /* conicProjection */])(conicEquidistantRaw)
      .scale(131.154)
      .center([0, 13.9389]);
});


/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = gnomonicRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(18);




function gnomonicRaw(x, y) {
  var cy = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y), k = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x) * cy;
  return [cy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x) / k, Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y) / k];
}

gnomonicRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */]);

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(gnomonicRaw)
      .scale(144.049)
      .clipAngle(60);
});


/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clip_extent__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__identity__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transform__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fit__ = __webpack_require__(50);





function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */] : Object(__WEBPACK_IMPORTED_MODULE_2__transform__["b" /* transformer */])({
    point: function(x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */], // scale, translate and reflect
      x0 = null, y0, x1, y1, clip = __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */], // clip extent
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));
    },
    clipExtent: function(_) {
      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */]) : Object(__WEBPACK_IMPORTED_MODULE_0__clip_extent__["a" /* clipExtent */])(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function(_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function(extent, object) {
      return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["a" /* fitExtent */])(projection, extent, object);
    },
    fitSize: function(size, object) {
      return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["b" /* fitSize */])(projection, size, object);
    }
  };
});


/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = orthographicRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(18);




function orthographicRaw(x, y) {
  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y) * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x), Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y)];
}

orthographicRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */]);

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(orthographicRaw)
      .scale(249.5)
      .clipAngle(90 + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]);
});


/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = stereographicRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(18);




function stereographicRaw(x, y) {
  var cy = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y), k = 1 + Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x) * cy;
  return [cy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x) / k, Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y) / k];
}

stereographicRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(function(z) {
  return 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(z);
});

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(stereographicRaw)
      .scale(250)
      .clipAngle(142);
});


/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = transverseMercatorRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mercator__ = __webpack_require__(51);



function transverseMercatorRaw(lambda, phi) {
  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["v" /* tan */])((__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["k" /* exp */])(x)) - __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */]];
};

/* harmony default export */ __webpack_exports__["a"] = (function() {
  var m = Object(__WEBPACK_IMPORTED_MODULE_1__mercator__["b" /* mercatorProjection */])(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function(_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function(_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90])
      .scale(159.155);
});


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var point = __webpack_require__(13).point;
var convex = __webpack_require__(65);
var explode = __webpack_require__(52);
var centroid = __webpack_require__(29);
var getCoord = __webpack_require__(14).getCoord;
var coordEach = __webpack_require__(1).coordEach;

/**
 * Takes any {@link Feature} or a {@link FeatureCollection} and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).
 *
 * @name centerOfMass
 * @param {GeoJSON} geojson GeoJSON to be centered
 * @param {Object} [properties] an Object that is used as the {@link Feature}'s properties
 * @returns {Feature<Point>} the center of mass
 * @example
 * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
 *
 * var center = turf.centerOfMass(polygon);
 *
 * //addToMap
 * var addToMap = [polygon, center]
 */
function centerOfMass(geojson, properties) {
    var type = (geojson.geometry) ? geojson.geometry.type : geojson.type;

    switch (type) {
    case 'Point':
        return point(getCoord(geojson), properties);
    case 'Polygon':
        var coords = [];
        coordEach(geojson, function (coord) {
            coords.push(coord);
        });

        // First, we neutralize the feature (set it around coordinates [0,0]) to prevent rounding errors
        // We take any point to translate all the points around 0
        var centre = centroid(geojson, properties);
        var translation = centre.geometry.coordinates;
        var sx = 0;
        var sy = 0;
        var sArea = 0;
        var i, pi, pj, xi, xj, yi, yj, a;

        var neutralizedPoints = coords.map(function (point) {
            return [
                point[0] - translation[0],
                point[1] - translation[1]
            ];
        });

        for (i = 0; i < coords.length - 1; i++) {
            // pi is the current point
            pi = neutralizedPoints[i];
            xi = pi[0];
            yi = pi[1];

            // pj is the next point (pi+1)
            pj = neutralizedPoints[i + 1];
            xj = pj[0];
            yj = pj[1];

            // a is the common factor to compute the signed area and the final coordinates
            a = xi * yj - xj * yi;

            // sArea is the sum used to compute the signed area
            sArea += a;

            // sx and sy are the sums used to compute the final coordinates
            sx += (xi + xj) * a;
            sy += (yi + yj) * a;
        }

        // Shape has no area: fallback on turf.centroid
        if (sArea === 0) {
            return centre;
        } else {
            // Compute the signed area, and factorize 1/6A
            var area = sArea * 0.5;
            var areaFactor = 1 / (6 * area);

            // Compute the final coordinates, adding back the values that have been neutralized
            return point([
                translation[0] + areaFactor * sx,
                translation[1] + areaFactor * sy
            ], properties);
        }
    default:
        // Not a polygon: Compute the convex hull and work with that
        var hull = convex(explode(geojson));

        if (hull) {
            return centerOfMass(hull, properties);
        } else {
            // Hull is empty: fallback on the centroid
            return centroid(geojson, properties);
        }
    }
}

module.exports = centerOfMass;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);

/**
 * Combines a {@link FeatureCollection} of {@link Point}, {@link LineString}, or {@link Polygon} features
 * into {@link MultiPoint}, {@link MultiLineString}, or {@link MultiPolygon} features.
 *
 * @name combine
 * @param {FeatureCollection<Point|LineString|Polygon>} fc a FeatureCollection of any type
 * @returns {FeatureCollection<MultiPoint|MultiLineString|MultiPolygon>} a FeatureCollection of corresponding type to input
 * @example
 * var fc = turf.featureCollection([
 *   turf.point([19.026432, 47.49134]),
 *   turf.point([19.074497, 47.509548])
 * ]);
 *
 * var combined = turf.combine(fc);
 *
 * //addToMap
 * var addToMap = [combined]
 */
module.exports = function (fc) {
    var groups = {
        MultiPoint: {coordinates: [], properties: []},
        MultiLineString: {coordinates: [], properties: []},
        MultiPolygon: {coordinates: [], properties: []}
    };

    var multiMapping = Object.keys(groups).reduce(function (memo, item) {
        memo[item.replace('Multi', '')] = item;
        return memo;
    }, {});

    function addToGroup(feature, key, multi) {
        if (!multi) {
            groups[key].coordinates.push(feature.geometry.coordinates);
        } else {
            groups[key].coordinates = groups[key].coordinates.concat(feature.geometry.coordinates);
        }
        groups[key].properties.push(feature.properties);
    }

    meta.featureEach(fc, function (feature) {
        if (!feature.geometry) return;
        if (groups[feature.geometry.type]) {
            addToGroup(feature, feature.geometry.type, true);
        } else if (multiMapping[feature.geometry.type]) {
            addToGroup(feature, multiMapping[feature.geometry.type], false);
        }
    });

    return {
        type: 'FeatureCollection',
        features: Object.keys(groups)
            .filter(function (key) {
                return groups[key].coordinates.length;
            })
            .sort()
            .map(function (key) {
                return {
                    type: 'Feature',
                    properties: {
                        collectedProperties: groups[key].properties
                    },
                    geometry: {
                        type: key,
                        coordinates: groups[key].coordinates
                    }
                };
            })
    };
};


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var polygon = __webpack_require__(13).polygon;
var earcut = __webpack_require__(194);


/**
 * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles
 * using [earcut](https://github.com/mapbox/earcut).
 *
 * @name tesselate
 * @param {Feature<Polygon>} poly the polygon to tesselate
 * @returns {FeatureCollection<Polygon>} a geometrycollection feature
 * @example
 * var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);
 * var triangles = turf.tesselate(poly);
 *
 * //addToMap
 * var addToMap = [poly, triangles]
 */
module.exports = function (poly) {
    if (!poly.geometry || (poly.geometry.type !== 'Polygon' && poly.geometry.type !== 'MultiPolygon')) {
        throw new Error('input must be a Polygon or MultiPolygon');
    }

    var fc = {type: 'FeatureCollection', features: []};

    if (poly.geometry.type === 'Polygon') {
        fc.features = processPolygon(poly.geometry.coordinates);
    } else {
        poly.geometry.coordinates.forEach(function (coordinates) {
            fc.features = fc.features.concat(processPolygon(coordinates));
        });
    }

    return fc;
};

function processPolygon(coordinates) {
    var data = flattenCoords(coordinates);
    var dim = 2;
    var result = earcut(data.vertices, data.holes, dim);

    var features = [];
    var vertices = [];

    result.forEach(function (vert, i) {
        var index = result[i];
        vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);
    });

    for (var i = 0; i < vertices.length; i += 3) {
        var coords = vertices.slice(i, i + 3);
        coords.push(vertices[i]);
        features.push(polygon([coords]));
    }

    return features;
}

function flattenCoords(data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }

    return result;
}


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode) return triangles;

    var minX, minY, maxX, maxY, x, y, size;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and size are later used to transform coords into integers for z-order calculation
        size = Math.max(maxX - minX, maxY - minY);
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, size);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) return null;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && size) indexCurve(ear, minX, minY, size);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            removeNode(ear);

            // skipping the next vertice leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(ear, triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, size, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, size);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var p = ear.next.next;

    while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, size) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // triangle bbox; min & max are calculated like this for speed
    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(minTX, minTY, minX, minY, size),
        maxZ = zOrder(maxTX, maxTY, minX, minY, size);

    // first look for points inside the triangle in increasing z-order
    var p = ear.nextZ;

    while (p && p.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.nextZ;
    }

    // then look for points in decreasing z-order
    p = ear.prevZ;

    while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return p;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, size) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, size);
                earcutLinked(c, triangles, dim, minX, minY, size);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, hole);
        filterPoints(b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m.next;

    while (p !== stop) {
        if (hx >= p.x && p.x >= mx &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    }

    return m;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, size) {
    var p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }

            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize === 0) {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                } else if (qSize === 0 || !q) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else if (p.z <= q.z) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and size of the data bounding box
function zOrder(x, y, minX, minY, size) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) / size;
    y = 32767 * (y - minY) / size;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    if ((equals(p1, q1) && equals(p2, q2)) ||
        (equals(p1, q2) && equals(p2, q1))) return true;
    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertice index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertice nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

// depend on jsts for now http://bjornharrtell.github.io/jsts/
var jsts = __webpack_require__(33);

/**
 * Takes two {@link Polygon|polygons} and finds their intersection. If they share a border, returns the border; if they don't intersect, returns undefined.
 *
 * @name intersect
 * @param {Feature<Polygon>} poly1 the first polygon
 * @param {Feature<Polygon>} poly2 the second polygon
 * @returns {Feature|undefined} returns a feature representing the point(s) they share (in case of a {@link Point}  or {@link MultiPoint}), the borders they share (in case of a {@link LineString} or a {@link MultiLineString}), the area they share (in case of {@link Polygon} or {@link MultiPolygon}). If they do not share any point, returns `undefined`.
 * @example
 * var poly1 = turf.polygon([[
 *   [-122.801742, 45.48565],
 *   [-122.801742, 45.60491],
 *   [-122.584762, 45.60491],
 *   [-122.584762, 45.48565],
 *   [-122.801742, 45.48565]
 * ]]);
 *
 * var poly2 = turf.polygon([[
 *   [-122.520217, 45.535693],
 *   [-122.64038, 45.553967],
 *   [-122.720031, 45.526554],
 *   [-122.669906, 45.507309],
 *   [-122.723464, 45.446643],
 *   [-122.532577, 45.408574],
 *   [-122.487258, 45.477466],
 *   [-122.520217, 45.535693]
 * ]]);
 *
 * var intersection = turf.intersect(poly1, poly2);
 *
 * //addToMap
 * var addToMap = [poly1, poly2, intersection];
 */
module.exports = function (poly1, poly2) {
    var geom1, geom2;
    if (poly1.type === 'Feature') geom1 = poly1.geometry;
    else geom1 = poly1;
    if (poly2.type === 'Feature') geom2 = poly2.geometry;
    else geom2 = poly2;
    var reader = new jsts.io.GeoJSONReader();
    var a = reader.read(JSON.stringify(geom1));
    var b = reader.read(JSON.stringify(geom2));
    var intersection = a.intersection(b);

    if (intersection.isEmpty()) {
        return undefined;
    }

    var writer = new jsts.io.GeoJSONWriter();

    var geojsonGeometry = writer.write(intersection);
    return {
        type: 'Feature',
        properties: {},
        geometry: geojsonGeometry
    };
};


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var distance = __webpack_require__(16);

/**
 * Takes a reference {@link Point|point} and a FeatureCollection of Features
 * with Point geometries and returns the
 * point from the FeatureCollection closest to the reference. This calculation
 * is geodesic.
 *
 * @name nearest
 * @param {Geometry|Feature<Point>|Array<number>} targetPoint the reference point
 * @param {FeatureCollection<Point>} points against input point set
 * @returns {Feature<Point>} the closest point in the set to the reference point
 * @example
 * var targetPoint = turf.point([28.965797, 41.010086], {"marker-color": "#0F0"});
 * var points = turf.featureCollection([
 *     turf.point([28.973865, 41.011122]),
 *     turf.point([28.948459, 41.024204]),
 *     turf.point([28.938674, 41.013324])
 * ]);
 *
 * var nearest = turf.nearest(targetPoint, points);
 *
 * //addToMap
 * var addToMap = [targetPoint, points, nearest];
 * nearest.properties['marker-color'] = '#F00';
 */
module.exports = function (targetPoint, points) {
    var nearestPoint, minDist = Infinity;
    for (var i = 0; i < points.features.length; i++) {
        var distanceToPoint = distance(targetPoint, points.features[i], 'miles');
        if (distanceToPoint < minDist) {
            nearestPoint = points.features[i];
            minDist = distanceToPoint;
        }
    }
    return nearestPoint;
};


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var invariant = __webpack_require__(14);
var getCoord = invariant.getCoord;
var getGeom = invariant.getGeom;

/**
 * Takes a triangular plane as a {@link Polygon}
 * and a {@link Point} within that triangle and returns the z-value
 * at that point. The Polygon should have properties `a`, `b`, and `c`
 * that define the values at its three corners. Alternatively, the z-values
 * of each triangle point can be provided by their respective 3rd coordinate
 * if their values are not provided as properties.
 *
 * @name planepoint
 * @param {Geometry|Feature<Point>|Array<number>} point the Point for which a z-value will be calculated
 * @param {Geometry|Feature<Polygon>} triangle a Polygon feature with three vertices
 * @returns {number} the z-value for `interpolatedPoint`
 * @example
 * var point = turf.point([-75.3221, 39.529]);
 * // "a", "b", and "c" values represent the values of the coordinates in order.
 * var triangle = turf.polygon([[
 *   [-75.1221, 39.57],
 *   [-75.58, 39.18],
 *   [-75.97, 39.86],
 *   [-75.1221, 39.57]
 * ]], {
 *   "a": 11,
 *   "b": 122,
 *   "c": 44
 * });
 *
 * var zValue = turf.planepoint(point, triangle);
 * point.properties.zValue = zValue;
 *
 * //addToMap
 * var addToMap = [triangle, point];
 */
module.exports = function (point, triangle) {
    // Normalize input
    var coord = getCoord(point);
    var geom = getGeom(triangle);
    var coords = geom.coordinates;
    var outer = coords[0];
    if (outer.length < 4) throw new Error('OuterRing of a Polygon must have 4 or more Positions.');
    var properties = triangle.properties || {};
    var a = properties.a;
    var b = properties.b;
    var c = properties.c;

    // Planepoint
    var x = coord[0];
    var y = coord[1];
    var x1 = outer[0][0];
    var y1 = outer[0][1];
    var z1 = (a !== undefined ? a : outer[0][2]);
    var x2 = outer[1][0];
    var y2 = outer[1][1];
    var z2 = (b !== undefined ? b : outer[1][2]);
    var x3 = outer[2][0];
    var y3 = outer[2][1];
    var z3 = (c !== undefined ? c : outer[2][2]);
    var z = (z3 * (x - x1) * (y - y2) + z1 * (x - x2) * (y - y3) + z2 * (x - x3) * (y - y1) -
             z2 * (x - x1) * (y - y3) - z3 * (x - x2) * (y - y1) - z1 * (x - x3) * (y - y2)) /
           ((x - x1) * (y - y2) + (x - x2) * (y - y3) + (x - x3) * (y - y1) -
            (x - x1) * (y - y3) - (x - x2) * (y - y1) - (x - x3) * (y - y2));

    return z;
};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var random = __webpack_require__(199);

/**
 * Generates random {@link GeoJSON} data, including {@link Point|Points} and {@link Polygon|Polygons}, for testing
 * and experimentation.
 *
 * @name random
 * @param {string} [type='point'] type of features desired: 'points' or 'polygons'
 * @param {number} [count=1] how many geometries should be generated.
 * @param {Object} options options relevant to the feature desired. Can include:
 * @param {Array<number>} options.bbox a bounding box inside of which geometries
 * are placed. In the case of {@link Point} features, they are guaranteed to be within this bounds,
 * while {@link Polygon} features have their centroid within the bounds.
 * @param {number} [options.num_vertices=10] options.vertices the number of vertices added
 * to polygon features.
 * @param {Number} [options.max_radial_length=10] the total number of decimal
 * degrees longitude or latitude that a polygon can extent outwards to
 * from its center.
 * @returns {FeatureCollection} generated random features
 * @example
 * var points = turf.random('points', 100, {
 *   bbox: [-70, 40, -60, 60]
 * });
 *
 * var polygons = turf.random('polygons', 4, {
 *   bbox: [-70, 40, -60, 60]
 * });
 *
 * //addToMap
 * var addToMap = [points, polygons]
 */
module.exports = function (type, count, options) {
    options = options || {};
    count = count || 1;
    switch (type) {
    case 'point':
    case 'points':
    case undefined:
        return random.point(count, options.bbox);
    case 'polygon':
    case 'polygons':
        return random.polygon(
                count,
                options.num_vertices,
                options.max_radial_length,
                options.bbox);
    default:
        throw new Error('Unknown type given: valid options are points and polygons');
    }
};


/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports = function() {
    throw new Error('call .point() or .polygon() instead');
};

function position(bbox) {
    if (bbox) return coordInBBBOX(bbox);
    else return [lon(), lat()];
}

module.exports.position = position;

module.exports.point = function(count, bbox) {
    var features = [];
    for (i = 0; i < count; i++) {
        features.push(feature(bbox ? point(position(bbox)) : point()));
    }
    return collection(features);
};

module.exports.polygon = function(count, num_vertices, max_radial_length, bbox) {
    if (typeof num_vertices !== 'number') num_vertices = 10;
    if (typeof max_radial_length !== 'number') max_radial_length = 10;
    var features = [];
    for (i = 0; i < count; i++) {
        var vertices = [],
            circle_offsets = Array.apply(null,
                new Array(num_vertices + 1)).map(Math.random);

        circle_offsets.forEach(sumOffsets);
        circle_offsets.forEach(scaleOffsets);
        vertices[vertices.length - 1] = vertices[0]; // close the ring

        // center the polygon around something
        vertices = vertices.map(vertexToCoordinate(position(bbox)));
        features.push(feature(polygon([vertices])));
    }

    function sumOffsets(cur, index, arr) {
        arr[index] = (index > 0) ? cur + arr[index - 1] : cur;
    }

    function scaleOffsets(cur, index) {
        cur = cur * 2 * Math.PI / circle_offsets[circle_offsets.length - 1];
        var radial_scaler = Math.random();
        vertices.push([
            radial_scaler * max_radial_length * Math.sin(cur),
            radial_scaler * max_radial_length * Math.cos(cur)
        ]);
    }

    return collection(features);
};


function vertexToCoordinate(hub) {
    return function(cur, index) { return [cur[0] + hub[0], cur[1] + hub[1]]; };
}

function rnd() { return Math.random() - 0.5; }
function lon() { return rnd() * 360; }
function lat() { return rnd() * 180; }

function point(coordinates) {
    return {
        type: 'Point',
        coordinates: coordinates || [lon(), lat()]
    };
}

function coordInBBBOX(bbox) {
    return [
        (Math.random() * (bbox[2] - bbox[0])) + bbox[0],
        (Math.random() * (bbox[3] - bbox[1])) + bbox[1]];
}

function pointInBBBOX() {
    return {
        type: 'Point',
        coordinates: [lon(), lat()]
    };
}

function polygon(coordinates) {
    return {
        type: 'Polygon',
        coordinates: coordinates
    };
}

function feature(geom) {
    return {
        type: 'Feature',
        geometry: geom,
        properties: {}
    };
}

function collection(f) {
    return {
        type: 'FeatureCollection',
        features: f
    };
}


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var point = __webpack_require__(13).point;

/**
 * Takes a {@link LineString|linestring}, {@link MultiLineString|multi-linestring}, {@link MultiPolygon|multi-polygon}, or {@link Polygon|polygon} and returns {@link Point|points} at all self-intersections.
 *
 * @name kinks
 * @param {Feature<LineString|MultiLineString|MultiPolygon|Polygon>} featureIn input feature
 * @returns {FeatureCollection<Point>} self-intersections
 * @example
 * var poly = turf.polygon([[
 *   [-12.034835, 8.901183],
 *   [-12.060413, 8.899826],
 *   [-12.03638, 8.873199],
 *   [-12.059383, 8.871418],
 *   [-12.034835, 8.901183]
 * ]]);
 *
 * var kinks = turf.kinks(poly);
 *
 * //addToMap
 * var addToMap = [poly, kinks]
 */
module.exports = function (featureIn) {
    var coordinates;
    var feature;
    var results = {
        type: 'FeatureCollection',
        features: []
    };
    if (featureIn.type === 'Feature') {
        feature = featureIn.geometry;
    } else {
        feature = featureIn;
    }
    if (feature.type === 'LineString') {
        coordinates = [feature.coordinates];
    } else if (feature.type === 'MultiLineString') {
        coordinates = feature.coordinates;
    } else if (feature.type === 'MultiPolygon') {
        coordinates = [].concat.apply([], feature.coordinates);
    } else if (feature.type === 'Polygon') {
        coordinates = feature.coordinates;
    } else {
        throw new Error('Input must be a LineString, MultiLineString, ' +
            'Polygon, or MultiPolygon Feature or Geometry');
    }
    coordinates.forEach(function (segment1) {
        coordinates.forEach(function (segment2) {
            for (var i = 0; i < segment1.length - 1; i++) {
                for (var k = 0; k < segment2.length - 1; k++) {
                    // don't check adjacent sides of a given segment, since of course they intersect in a vertex.
                    if (segment1 === segment2 && (Math.abs(i - k) === 1 || Math.abs(i - k) === segment1.length - 2)) {
                        continue;
                    }

                    var intersection = lineIntersects(segment1[i][0], segment1[i][1], segment1[i + 1][0], segment1[i + 1][1],
                        segment2[k][0], segment2[k][1], segment2[k + 1][0], segment2[k + 1][1]);
                    if (intersection) {
                        results.features.push(point([intersection[0], intersection[1]]));
                    }
                }
            }
        });
    });
    return results;
};


// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/
function lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {
    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point
    var denominator, a, b, numerator1, numerator2,
        result = {
            x: null,
            y: null,
            onLine1: false,
            onLine2: false
        };
    denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));
    if (denominator === 0) {
        if (result.x !== null && result.y !== null) {
            return result;
        } else {
            return false;
        }
    }
    a = line1StartY - line2StartY;
    b = line1StartX - line2StartX;
    numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);
    numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);
    a = numerator1 / denominator;
    b = numerator2 / denominator;

    // if we cast these lines infinitely in both directions, they intersect here:
    result.x = line1StartX + (a * (line1EndX - line1StartX));
    result.y = line1StartY + (a * (line1EndY - line1StartY));

    // if line1 is a segment and line2 is infinite, they intersect if:
    if (a >= 0 && a <= 1) {
        result.onLine1 = true;
    }
    // if line2 is a segment and line1 is infinite, they intersect if:
    if (b >= 0 && b <= 1) {
        result.onLine2 = true;
    }
    // if line1 and line2 are segments, they intersect if both of the above are true
    if (result.onLine1 && result.onLine2) {
        return [result.x, result.y];
    } else {
        return false;
    }
}


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var featureCollection = __webpack_require__(13).featureCollection;
var centroid = __webpack_require__(36);
var distance = __webpack_require__(16);
var inside = __webpack_require__(17);
var explode = __webpack_require__(52);

/**
 * Takes a feature and returns a {@link Point} guaranteed to be on the surface of the feature.
 *
 * * Given a {@link Polygon}, the point will be in the area of the polygon
 * * Given a {@link LineString}, the point will be along the string
 * * Given a {@link Point}, the point will the same as the input
 *
 * @param {(Feature|FeatureCollection)} fc any feature or set of features
 * @returns {Feature} a point on the surface of `input`
 * @example
 * // create a random polygon
 * var polygon = turf.random('polygon');
 *
 * var pointOnPolygon = turf.pointOnSurface(polygon);
 *
 * //addToMap
 * var addToMap = [polygon, pointOnPolygon];
 */
function pointOnSurface(fc) {
    // normalize
    if (fc.type !== 'FeatureCollection') {
        if (fc.type !== 'Feature') {
            fc = {
                type: 'Feature',
                geometry: fc,
                properties: {}
            };
        }
        fc = featureCollection([fc]);
    }

    //get centroid
    var cent = centroid(fc);

    // check to see if centroid is on surface
    var onSurface = false;
    var i = 0;
    while (!onSurface && i < fc.features.length) {
        var geom = fc.features[i].geometry;
        var x, y, x1, y1, x2, y2, k;
        var onLine = false;
        if (geom.type === 'Point') {
            if (cent.geometry.coordinates[0] === geom.coordinates[0] &&
        cent.geometry.coordinates[1] === geom.coordinates[1]) {
                onSurface = true;
            }
        } else if (geom.type === 'MultiPoint') {
            var onMultiPoint = false;
            k = 0;
            while (!onMultiPoint && k < geom.coordinates.length) {
                if (cent.geometry.coordinates[0] === geom.coordinates[k][0] &&
          cent.geometry.coordinates[1] === geom.coordinates[k][1]) {
                    onSurface = true;
                    onMultiPoint = true;
                }
                k++;
            }
        } else if (geom.type === 'LineString') {
            k = 0;
            while (!onLine && k < geom.coordinates.length - 1) {
                x = cent.geometry.coordinates[0];
                y = cent.geometry.coordinates[1];
                x1 = geom.coordinates[k][0];
                y1 = geom.coordinates[k][1];
                x2 = geom.coordinates[k + 1][0];
                y2 = geom.coordinates[k + 1][1];
                if (pointOnSegment(x, y, x1, y1, x2, y2)) {
                    onLine = true;
                    onSurface = true;
                }
                k++;
            }
        } else if (geom.type === 'MultiLineString') {
            var j = 0;
            while (j < geom.coordinates.length) {
                onLine = false;
                k = 0;
                var line = geom.coordinates[j];
                while (!onLine && k < line.length - 1) {
                    x = cent.geometry.coordinates[0];
                    y = cent.geometry.coordinates[1];
                    x1 = line[k][0];
                    y1 = line[k][1];
                    x2 = line[k + 1][0];
                    y2 = line[k + 1][1];
                    if (pointOnSegment(x, y, x1, y1, x2, y2)) {
                        onLine = true;
                        onSurface = true;
                    }
                    k++;
                }
                j++;
            }
        } else if (geom.type === 'Polygon' || geom.type === 'MultiPolygon') {
            var f = {
                type: 'Feature',
                geometry: geom,
                properties: {}
            };
            if (inside(cent, f)) {
                onSurface = true;
            }
        }
        i++;
    }
    if (onSurface) {
        return cent;
    } else {
        var vertices = featureCollection([]);
        for (i = 0; i < fc.features.length; i++) {
            vertices.features = vertices.features.concat(explode(fc.features[i]).features);
        }
        var closestVertex;
        var closestDistance = Infinity;
        for (i = 0; i < vertices.features.length; i++) {
            var dist = distance(cent, vertices.features[i], 'miles');
            if (dist < closestDistance) {
                closestDistance = dist;
                closestVertex = vertices.features[i];
            }
        }
        return closestVertex;
    }
}

function pointOnSegment(x, y, x1, y1, x2, y2) {
    var ab = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    var ap = Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));
    var pb = Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y));
    if (ab === ap + pb) {
        return true;
    }
}

module.exports = pointOnSurface;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var measureDistance = __webpack_require__(16);
var point = __webpack_require__(13).point;
var bearing = __webpack_require__(25);
var destination = __webpack_require__(20);

/**
 * Takes a {@link LineString|line} and returns a {@link Point|point} at a specified distance along the line.
 *
 * @name along
 * @param {Feature<LineString>} line input line
 * @param {number} distance distance along the line
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * @returns {Feature<Point>} Point `distance` `units` along the line
 * @example
 * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);
 *
 * var along = turf.along(line, 200, 'miles');
 *
 * //addToMap
 * var addToMap = [along, line]
 */
module.exports = function (line, distance, units) {
    var coords;
    if (line.type === 'Feature') coords = line.geometry.coordinates;
    else if (line.type === 'LineString') coords = line.coordinates;
    else throw new Error('input must be a LineString Feature or Geometry');

    var travelled = 0;
    for (var i = 0; i < coords.length; i++) {
        if (distance >= travelled && i === coords.length - 1) break;
        else if (travelled >= distance) {
            var overshot = distance - travelled;
            if (!overshot) return point(coords[i]);
            else {
                var direction = bearing(coords[i], coords[i - 1]) - 180;
                var interpolated = destination(coords[i], overshot, direction, units);
                return interpolated;
            }
        } else {
            travelled += measureDistance(coords[i], coords[i + 1], units);
        }
    }
    return point(coords[coords.length - 1]);
};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var linestring = __webpack_require__(13).lineString;
var pointOnLine = __webpack_require__(53);

/**
 * Takes a {@link LineString|line}, a start {@link Point}, and a stop point
 * and returns a subsection of the line in-between those points.
 * The start & stop points don't need to fall exactly on the line.
 *
 * This can be useful for extracting only the part of a route between waypoints.
 *
 * @name lineSlice
 * @param {Feature<Point>} startPt starting point
 * @param {Feature<Point>} stopPt stopping point
 * @param {Feature<LineString>|LineString} line line to slice
 * @returns {Feature<LineString>} sliced line
 * @example
 * var line = turf.lineString([
 *     [-77.031669, 38.878605],
 *     [-77.029609, 38.881946],
 *     [-77.020339, 38.884084],
 *     [-77.025661, 38.885821],
 *     [-77.021884, 38.889563],
 *     [-77.019824, 38.892368]
 * ]);
 * var start = turf.point([-77.029609, 38.881946]);
 * var stop = turf.point([-77.021884, 38.889563]);
 *
 * var sliced = turf.lineSlice(start, stop, line);
 *
 * //addToMap
 * var addToMap = [start, stop, line]
 */
module.exports = function lineSlice(startPt, stopPt, line) {
    var coords;
    if (line.type === 'Feature') {
        coords = line.geometry.coordinates;
    } else if (line.type === 'LineString') {
        coords = line.coordinates;
    } else {
        throw new Error('input must be a LineString Feature or Geometry');
    }

    var startVertex = pointOnLine(line, startPt);
    var stopVertex = pointOnLine(line, stopPt);
    var ends;
    if (startVertex.properties.index <= stopVertex.properties.index) {
        ends = [startVertex, stopVertex];
    } else {
        ends = [stopVertex, startVertex];
    }
    var clipCoords = [ends[0].geometry.coordinates];
    for (var i = ends[0].properties.index + 1; i < ends[1].properties.index + 1; i++) {
        clipCoords.push(coords[i]);
    }
    clipCoords.push(ends[1].geometry.coordinates);
    return linestring(clipCoords, line.properties);
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var distance = __webpack_require__(16);
var turfBBox = __webpack_require__(10);
var helpers = __webpack_require__(13);
var inside = __webpack_require__(17);
var invariant = __webpack_require__(14);
var getGeomType = invariant.getGeomType;
var point = helpers.point;
var featureCollection = helpers.featureCollection;

/**
 * Creates a {@link Point} grid from a bounding box, {@link FeatureCollection} or {@link Feature}.
 *
 * @name pointGrid
 * @param {Array<number>|FeatureCollection|Feature<any>} bbox extent in [minX, minY, maxX, maxY] order
 * @param {number} cellSide the distance between points
 * @param {string} [units=kilometers] used in calculating cellSide, can be degrees, radians, miles, or kilometers
 * @param {boolean} [centered=true] adjust points position to center the grid into bbox. **This parameter is going to be removed** in the next major release, having the output always centered into bbox.
 * @param {boolean} [bboxIsMask=false] if true, and bbox is a Polygon or MultiPolygon, the grid Point will be created
 * only if inside the bbox Polygon(s)
 * @returns {FeatureCollection<Point>} grid of points
 * @example
 * var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
 * var cellSide = 3;
 * var units = 'miles';
 *
 * var grid = turf.pointGrid(extent, cellSide, units);
 *
 * //addToMap
 * var addToMap = [grid];
 */
module.exports = function (bbox, cellSide, units, centered, bboxIsMask) {
    var results = [];

    var bboxMask = bbox;
    // validation
    if (!bbox) throw new Error('bbox is required');
    if (!Array.isArray(bbox)) bbox = turfBBox(bbox); // Convert GeoJSON to bbox
    if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');

    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];

    var xFraction = cellSide / (distance(point([west, south]), point([east, south]), units));
    var cellWidth = xFraction * (east - west);
    var yFraction = cellSide / (distance(point([west, south]), point([west, north]), units));
    var cellHeight = yFraction * (north - south);

    if (centered !== false) {
        var bboxHorizontalSide = (east - west);
        var bboxVerticalSide = (north - south);
        var columns = Math.floor(bboxHorizontalSide / cellWidth);
        var rows = Math.floor(bboxVerticalSide / cellHeight);
        // adjust origin of the grid
        var deltaX = (bboxHorizontalSide - columns * cellWidth) / 2;
        var deltaY = (bboxVerticalSide - rows * cellHeight) / 2;
    }

    var isPoly = !Array.isArray(bboxMask) && (getGeomType(bboxMask) === 'Polygon' || getGeomType(bboxMask) === 'MultiPolygon');

    var currentX = west;
    if (centered !== false) currentX += deltaX;
    while (currentX <= east) {
        var currentY = south;
        if (centered !== false) currentY += deltaY;
        while (currentY <= north) {
            var pt = point([currentX, currentY]);
            if (bboxIsMask === true && isPoly) {
                if (inside(pt, bboxMask)) {
                    results.push(pt);
                }
            } else {
                results.push(pt);
            }
            currentY += cellHeight;
        }
        currentX += cellWidth;
    }

    return featureCollection(results);
};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var distance = __webpack_require__(16);
var helpers = __webpack_require__(13);
var polygon = helpers.polygon;
var featureCollection = helpers.featureCollection;

/**
 * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.
 *
 * @name triangleGrid
 * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @param {number} cellSize dimension of each cell
 * @param {string} [units=kilometers] used in calculating cellSize, can be degrees, radians, miles, or kilometers
 * @returns {FeatureCollection<Polygon>} grid of polygons
 * @example
 * var bbox = [-95, 30 ,-85, 40];
 * var cellSize = 50;
 * var units = 'miles';
 *
 * var triangleGrid = turf.triangleGrid(bbox, cellSize, units);
 *
 * //addToMap
 * var addToMap = [triangleGrid];
 */
module.exports = function (bbox, cellSize, units) {
    var fc = featureCollection([]);
    var xFraction = cellSize / (distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], units));
    var cellWidth = xFraction * (bbox[2] - bbox[0]);
    var yFraction = cellSize / (distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], units));
    var cellHeight = yFraction * (bbox[3] - bbox[1]);

    var xi = 0;
    var currentX = bbox[0];
    while (currentX <= bbox[2]) {
        var yi = 0;
        var currentY = bbox[1];
        while (currentY <= bbox[3]) {
            if (xi % 2 === 0 && yi % 2 === 0) {
                fc.features.push(polygon([[
                    [currentX, currentY],
                    [currentX, currentY + cellHeight],
                    [currentX + cellWidth, currentY],
                    [currentX, currentY]
                ]]), polygon([[
                    [currentX, currentY + cellHeight],
                    [currentX + cellWidth, currentY + cellHeight],
                    [currentX + cellWidth, currentY],
                    [currentX, currentY + cellHeight]
                ]]));
            } else if (xi % 2 === 0 && yi % 2 === 1) {
                fc.features.push(polygon([[
                    [currentX, currentY],
                    [currentX + cellWidth, currentY + cellHeight],
                    [currentX + cellWidth, currentY],
                    [currentX, currentY]
                ]]), polygon([[
                    [currentX, currentY],
                    [currentX, currentY + cellHeight],
                    [currentX + cellWidth, currentY + cellHeight],
                    [currentX, currentY]
                ]]));
            } else if (yi % 2 === 0 && xi % 2 === 1) {
                fc.features.push(polygon([[
                    [currentX, currentY],
                    [currentX, currentY + cellHeight],
                    [currentX + cellWidth, currentY + cellHeight],
                    [currentX, currentY]
                ]]), polygon([[
                    [currentX, currentY],
                    [currentX + cellWidth, currentY + cellHeight],
                    [currentX + cellWidth, currentY],
                    [currentX, currentY]
                ]]));
            } else if (yi % 2 === 1 && xi % 2 === 1) {
                fc.features.push(polygon([[
                    [currentX, currentY],
                    [currentX, currentY + cellHeight],
                    [currentX + cellWidth, currentY],
                    [currentX, currentY]
                ]]), polygon([[
                    [currentX, currentY + cellHeight],
                    [currentX + cellWidth, currentY + cellHeight],
                    [currentX + cellWidth, currentY],
                    [currentX, currentY + cellHeight]
                ]]));
            }
            currentY += cellHeight;
            yi++;
        }
        xi++;
        currentX += cellWidth;
    }
    return fc;
};



/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var distance = __webpack_require__(16);
var helpers = __webpack_require__(13);
var point = helpers.point;
var polygon = helpers.polygon;
var featureCollection = helpers.featureCollection;

// Precompute cosines and sines of angles used in hexagon creation
// for performance gain
var cosines = [];
var sines = [];
for (var i = 0; i < 6; i++) {
    var angle = 2 * Math.PI / 6 * i;
    cosines.push(Math.cos(angle));
    sines.push(Math.sin(angle));
}

/**
 * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped
 * hexagons or triangles ({@link Polygon} features) aligned in an "odd-q" vertical grid as
 * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).
 *
 * @name hexGrid
 * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @param {number} cellDiameter diameter of the circumcircle of the hexagons, in specified units
 * @param {string} [units=kilometers] used in calculating cell size, can be degrees, radians, miles, or kilometers
 * @param {boolean} [triangles=false] whether to return as triangles instead of hexagons
 * @returns {FeatureCollection<Polygon>} a hexagonal grid
 * @example
 * var bbox = [-96,31,-84,40];
 * var cellDiameter = 50;
 * var units = 'miles';
 *
 * var hexgrid = turf.hexGrid(bbox, cellDiameter, units);
 *
 * //addToMap
 * var addToMap = [hexgrid];
 */
module.exports = function hexGrid(bbox, cellDiameter, units, triangles) {
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];
    var centerY = (south + north) / 2;
    var centerX = (west + east) / 2;

    // https://github.com/Turfjs/turf/issues/758
    var xFraction = cellDiameter / (distance(point([west, centerY]), point([east, centerY]), units));
    var cellWidth = xFraction * (east - west);
    var yFraction = cellDiameter / (distance(point([centerX, south]), point([centerX, north]), units));
    var cellHeight = yFraction * (north - south);
    var radius = cellWidth / 2;

    var hex_width = radius * 2;
    var hex_height = Math.sqrt(3) / 2 * cellHeight;

    var box_width = east - west;
    var box_height = north - south;

    var x_interval = 3 / 4 * hex_width;
    var y_interval = hex_height;

    var x_span = box_width / (hex_width - radius / 2);
    var x_count = Math.ceil(x_span);
    if (Math.round(x_span) === x_count) {
        x_count++;
    }

    var x_adjust = ((x_count * x_interval - radius / 2) - box_width) / 2 - radius / 2;

    var y_count = Math.ceil(box_height / hex_height);

    var y_adjust = (box_height - y_count * hex_height) / 2;

    var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;
    if (hasOffsetY) {
        y_adjust -= hex_height / 4;
    }

    var fc = featureCollection([]);
    for (var x = 0; x < x_count; x++) {
        for (var y = 0; y <= y_count; y++) {

            var isOdd = x % 2 === 1;
            if (y === 0 && isOdd) {
                continue;
            }

            if (y === 0 && hasOffsetY) {
                continue;
            }

            var center_x = x * x_interval + west - x_adjust;
            var center_y = y * y_interval + south + y_adjust;

            if (isOdd) {
                center_y -= hex_height / 2;
            }
            if (triangles) {
                fc.features.push.apply(fc.features, hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2));
            } else {
                fc.features.push(hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2));
            }
        }
    }

    return fc;
};

//Center should be [x, y]
function hexagon(center, rx, ry) {
    var vertices = [];
    for (var i = 0; i < 6; i++) {
        var x = center[0] + rx * cosines[i];
        var y = center[1] + ry * sines[i];
        vertices.push([x, y]);
    }
    //first and last vertex must be the same
    vertices.push(vertices[0]);
    return polygon([vertices]);
}

//Center should be [x, y]
function hexTriangles(center, rx, ry) {
    var triangles = [];
    for (var i = 0; i < 6; i++) {
        var vertices = [];
        vertices.push(center);
        vertices.push([
            center[0] + rx * cosines[i],
            center[1] + ry * sines[i]
        ]);
        vertices.push([
            center[0] + rx * cosines[(i + 1) % 6],
            center[1] + ry * sines[(i + 1) % 6]
        ]);
        vertices.push(center);
        triangles.push(polygon([vertices]));
    }
    return triangles;
}


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var bbox = __webpack_require__(10);
var distance = __webpack_require__(16);
var centroid = __webpack_require__(29);
var squareGrid = __webpack_require__(99);

/**
 *
 * Takes a FeatureCollection of points with known value, a power parameter, a cell depth, a unit of measurement
 * and returns a FeatureCollection of polygons in a square-grid with an interpolated value property "IDW" for each grid cell.
 * It finds application when in need of creating a continuous surface (i.e. rainfall, temperature, chemical dispersion surface...)
 * from a set of spatially scattered points.
 *
 * @name idw
 * @param {FeatureCollection<Point>} controlPoints Sampled points with known value
 * @param {string} valueField GeoJSON field containing the known value to interpolate on
 * @param {number} weight Exponent regulating the distance-decay weighting
 * @param {number} cellWidth The distance across each cell
 * @param {string} [units=kilometers] used in calculating cellSize, can be degrees, radians, miles, or kilometers
 * @returns {FeatureCollection<Polygon>} grid A grid of polygons with a property field named as `valueField`
 */
module.exports = function (controlPoints, valueField, weight, cellWidth, units) {
    // validation
    if (!valueField) throw new Error('valueField is required');
    if (weight === undefined || weight === null) throw new Error('weight is required');
    if (cellWidth === undefined || cellWidth === null) throw new Error('cellWidth is required');

    // check if field containing data exists.
    var filtered = controlPoints.features.filter(function (feature) {
        return feature.properties &&
            feature.properties.hasOwnProperty(valueField);
    });
    if (filtered.length === 0) throw new Error('Specified Data Field is Missing');

    // create a sample square grid
    // compared to a point grid helps visualizing the output (like a raster..)
    var samplingGrid = squareGrid(bbox(controlPoints), cellWidth, units);
    var N = samplingGrid.features.length;
    for (var i = 0; i < N; i++) {
        var zw = 0;
        var sw = 0;
        // calculate the distance from each control point to cell's centroid
        for (var j = 0; j < controlPoints.features.length; j++) {
            var d = distance(centroid(samplingGrid.features[i]), controlPoints.features[j], units);
            if (d === 0) {
                zw = controlPoints.features[j].properties[valueField];
            }
            var w = 1.0 / Math.pow(d, weight);
            sw += w;
            zw += w * controlPoints.features[j].properties[valueField];
        }
        // write IDW value for each grid cell
        samplingGrid.features[i].properties[valueField] = zw / sw;
    }
    return samplingGrid;
};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var rbush = __webpack_require__(22);
var union = __webpack_require__(32);
var helpers = __webpack_require__(13);
var turfBBox = __webpack_require__(10);
var flattenEach = __webpack_require__(1).flattenEach;

/**
 * Takes any type of {@link Polygon|polygon} and an optional mask and returns a {@link Polygon|polygon} exterior ring with holes.
 *
 * @name mask
 * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} polygon GeoJSON Polygon used as interior rings or holes.
 * @param {Feature<Polygon>} [mask] GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)
 * @returns {Feature<Polygon>} Masked Polygon (exterior ring with holes).
 * @example
 * var polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);
 * var mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);
 *
 * var masked = turf.mask(polygon, mask);
 *
 * //addToMap
 * var addToMap = [masked]
 */
module.exports = function (polygon, mask) {
    // Define mask
    var maskPolygon = createMask(mask);

    // Define polygon
    var separated = separatePolygons(polygon);
    var polygonOuters = separated[0];
    var polygonInners = separated[1];

    // Union Outers & Inners
    polygonOuters = unionPolygons(polygonOuters);
    polygonInners = unionPolygons(polygonInners);

    // Create masked area
    var masked = buildMask(maskPolygon, polygonOuters, polygonInners);
    return masked;
};

/**
 * Build Mask
 *
 * @private
 * @param {Feature<Polygon>} maskPolygon Mask Outer
 * @param {FeatureCollection<Polygon>} polygonOuters Polygon Outers
 * @param {FeatureCollection<Polygon>} polygonInners Polygon Inners
 * @returns {Feature<Polygon>} Feature Polygon
 */
function buildMask(maskPolygon, polygonOuters, polygonInners) {
    var coordinates = [];
    coordinates.push(maskPolygon.geometry.coordinates[0]);

    flattenEach(polygonOuters, function (feature) {
        coordinates.push(feature.geometry.coordinates[0]);
    });

    flattenEach(polygonInners, function (feature) {
        coordinates.push(feature.geometry.coordinates[0]);
    });
    return helpers.polygon(coordinates);
}

/**
 * Separate Polygons to inners & outers
 *
 * @private
 * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} polygon GeoJSON Feature
 * @returns {Array<FeatureCollection<Polygon>, FeatureCollection<Polygon>>} Outer & Inner lines
 */
function separatePolygons(polygon) {
    var outers = [];
    var inners = [];
    flattenEach(polygon, function (feature) {
        var coordinates = feature.geometry.coordinates;
        var featureOuter = coordinates[0];
        var featureInner = coordinates.slice(1);
        outers.push(helpers.polygon([featureOuter]));
        featureInner.forEach(function (inner) {
            inners.push(helpers.polygon([inner]));
        });
    });
    return [helpers.featureCollection(outers), helpers.featureCollection(inners)];
}

/**
 * Create Mask Coordinates
 *
 * @private
 * @param {Feature<Polygon>} [mask] default to world if undefined
 * @returns {Feature<Polygon>} mask coordinate
 */
function createMask(mask) {
    var world = [[[180, 90], [-180, 90], [-180, -90], [180, -90], [180, 90]]];
    var coordinates = mask && mask.geometry.coordinates || world;
    return helpers.polygon(coordinates);
}

/**
 * Union Polygons
 *
 * @private
 * @param {FeatureCollection<Polygon>} polygons collection of polygons
 * @returns {FeatureCollection<Polygon>} polygons only apply union if they collide
 */
function unionPolygons(polygons) {
    if (polygons.features.length <= 1) return polygons;

    var tree = createIndex(polygons);
    var results = [];
    var removed = {};

    flattenEach(polygons, function (currentFeature, currentIndex) {
        // Exclude any removed features
        if (removed[currentIndex]) return true;

        // Don't search for itself
        tree.remove({index: currentIndex}, filterByIndex);
        removed[currentIndex] = true;

        // Keep applying the union operation until no more overlapping features
        while (true) {
            var bbox = turfBBox(currentFeature);
            var search = tree.search({
                minX: bbox[0],
                minY: bbox[1],
                maxX: bbox[2],
                maxY: bbox[3]
            });
            if (search.length > 0) {
                var polys = search.map(function (item) {
                    removed[item.index] = true;
                    tree.remove({index: item.index}, filterByIndex);
                    return item.geojson;
                });
                polys.push(currentFeature);
                currentFeature = union.apply(this, polys);
            }
            // Done
            if (search.length === 0) break;
        }
        results.push(currentFeature);
    });

    return helpers.featureCollection(results);
}

/**
 * Filter by Index - RBush helper function
 *
 * @private
 * @param {Object} a remove item
 * @param {Object} b search item
 * @returns {boolean} true if matches
 */
function filterByIndex(a, b) {
    return a.index === b.index;
}

/**
 * Create RBush Tree Index
 *
 * @private
 * @param {FeatureCollection<any>} features GeoJSON FeatureCollection
 * @returns {RBush} RBush Tree
 */
function createIndex(features) {
    var tree = rbush();
    var load = [];
    flattenEach(features, function (feature, index) {
        var bbox = turfBBox(feature);
        load.push({
            minX: bbox[0],
            minY: bbox[1],
            maxX: bbox[2],
            maxY: bbox[3],
            geojson: feature,
            index: index
        });
    });
    tree.load(load);
    return tree;
}


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var lineSliceAlong = __webpack_require__(98);
var lineDistance = __webpack_require__(97);
var featureCollection = __webpack_require__(13).featureCollection;
var flattenEach = __webpack_require__(1).flattenEach;

/**
 * Divides a {@link LineString} into chunks of a specified length.
 * If the line is shorter than the segment length then the original line is returned.
 *
 * @name lineChunk
 * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geojson the lines to split
 * @param {number} segmentLength how long to make each segment
 * @param {string}[units='kilometers'] units can be degrees, radians, miles, or kilometers
 * @param {boolean}[reverse=false] reverses coordinates to start the first chunked segment at the end
 * @returns {FeatureCollection<LineString>} collection of line segments
 * @example
 * var line = turf.lineString([[-95, 40], [-93, 45], [-85, 50]]);
 *
 * var chunk = turf.lineChunk(line, 15, 'miles');
 *
 * //addToMap
 * var addToMap = [chunk];
 */
module.exports = function (geojson, segmentLength, units, reverse) {
    if (!geojson) throw new Error('geojson is required');
    if (segmentLength <= 0) throw new Error('segmentLength must be greater than 0');
    var results = [];

    // Flatten each feature to simple LineString
    flattenEach(geojson, function (feature) {
        // reverses coordinates to start the first chunked segment at the end
        if (reverse) feature.geometry.coordinates = feature.geometry.coordinates.reverse();

        sliceLineSegments(feature, segmentLength, units, function (segment) {
            results.push(segment);
        });
    });
    return featureCollection(results);
};

/**
 * Slice Line Segments
 *
 * @private
 * @param {Feature<LineString>} line GeoJSON LineString
 * @param {number} segmentLength how long to make each segment
 * @param {string}[units='kilometers'] units can be degrees, radians, miles, or kilometers
 * @param {Function} callback iterate over sliced line segments
 * @returns {void}
 */
function sliceLineSegments(line, segmentLength, units, callback) {
    var lineLength = lineDistance(line, units);

    // If the line is shorter than the segment length then the orginal line is returned.
    if (lineLength <= segmentLength) return callback(line);

    var numberOfSegments = Math.floor(lineLength / segmentLength) + 1;
    for (var i = 0; i < numberOfSegments; i++) {
        var outline = lineSliceAlong(line, segmentLength * i, segmentLength * (i + 1), units);
        callback(outline, i);
    }
}


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var simplepolygon = __webpack_require__(211);
var flatten = __webpack_require__(55);
var featureEach = __webpack_require__(1).featureEach;
var featureCollection = __webpack_require__(13).featureCollection;

/**
 * Takes a kinked polygon and returns a feature collection of polygons that have no kinks.
 * Uses [simplepolygon](https://github.com/mclaeysb/simplepolygon) internally.
 *
 * @name unkinkPolygon
 * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} geojson GeoJSON Polygon or MultiPolygon
 * @returns {FeatureCollection<Polygon>} Unkinked polygons
 * @example
 * var poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);
 *
 * var result = turf.unkinkPolygon(poly);
 *
 * //addToMap
 * var addToMap = [poly, result]
 */
module.exports = function (geojson) {
    var results = featureCollection([]);

    // Handles FeatureCollection & Feature
    featureEach(geojson, function (feature) {

        // Handle MultiPolygons as Feature or FeatureCollection
        if (feature.geometry.type === 'MultiPolygon') { feature = flatten(feature); }

        // Store simple polygons in results
        featureEach(feature, function (polygon) {
            var simple = simplepolygon(polygon);

            featureEach(simple, function (poly) {
                poly.properties = (polygon.properties) ? polygon.properties : {};
                results.features.push(poly);
            });
        });
    });
    return results;
};


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var isects = __webpack_require__(212);
var helpers = __webpack_require__(213);
var inside = __webpack_require__(17);
var area = __webpack_require__(214);
var rbush = __webpack_require__(22);
var debug = __webpack_require__(101)('simplepolygon');
var debugAll = __webpack_require__(101)('simplepolygon:all');

/**
* Takes a complex (i.e. self-intersecting) geojson polygon, and breaks it down into its composite simple, non-self-intersecting one-ring polygons.
*
* @module simplepolygon
* @param {Feature} feature Input polygon. This polygon may be unconform the {@link https://en.wikipedia.org/wiki/Simple_Features|Simple Features standard} in the sense that it's inner and outer rings may cross-intersect or self-intersect, that the outer ring must not contain the optional inner rings and that the winding number must not be positive for the outer and negative for the inner rings.
* @return {FeatureCollection} Feature collection containing the simple, non-self-intersecting one-ring polygon features that the complex polygon is composed of. These simple polygons have properties such as their parent polygon, winding number and net winding number.
*
* @example
* var poly = {
*   "type": "Feature",
*   "geometry": {
*     "type": "Polygon",
*     "coordinates": [[[0,0],[2,0],[0,2],[2,2],[0,0]]]
*   }
* };
*
* var result = simplepolygon(poly);
*
* // =result
* // which will be a featureCollection of two polygons, one with coordinates [[[0,0],[2,0],[1,1],[0,0]]], parent -1, winding 1 and net winding 1, and one with coordinates [[[1,1],[0,2],[2,2],[1,1]]], parent -1, winding -1 and net winding -1
*/

module.exports = function(feature) {
  // Check input
  if (feature.type != "Feature") throw new Error("The input must a geojson object of type Feature");
  if ((feature.geometry === undefined) || (feature.geometry == null)) throw new Error("The input must a geojson object with a non-empty geometry");
  if (feature.geometry.type != "Polygon") throw new Error("The input must be a geojson Polygon");

  // Process input
  var numRings = feature.geometry.coordinates.length;
  var vertices = [];
  for (var i = 0; i < numRings; i++) {
    var ring = feature.geometry.coordinates[i];
    if (!equalArrays(ring[0],ring[ring.length-1])) {
      ring.push(ring[0]) // Close input ring if it is not
    }
    vertices.push.apply(vertices,ring.slice(0,ring.length-1));
  }
  if (!isUnique(vertices)) throw new Error("The input polygon may not have duplicate vertices (except for the first and last vertex of each ring)");
  var numvertices = vertices.length; // number of input ring vertices, with the last closing vertices not counted
  debug("Processing input");

  // Compute self-intersections
  var selfIsectsData = isects(feature, function filterFn(isect, ring0, edge0, start0, end0, frac0, ring1, edge1, start1, end1, frac1, unique){
    return [isect, ring0, edge0, start0, end0, frac0, ring1, edge1, start1, end1, frac1, unique];
  });
  var numSelfIsect = selfIsectsData.length;
  debug("Computing self-intersections");

  // If no self-intersections are found, the input rings are the output rings. Hence, we must only compute their winding numbers, net winding numbers and (since ohers rings could lie outside the first ring) parents.
  if (numSelfIsect == 0) {
    var outputFeatureArray = [];
    for(var i = 0; i < numRings; i++) {
      outputFeatureArray.push(helpers.polygon([feature.geometry.coordinates[i]],{parent: -1, winding: windingOfRing(feature.geometry.coordinates[i])}));
    }
    var output = helpers.featureCollection(outputFeatureArray)
    determineParents();
    setNetWinding();
    debugAll("No self-intersections found. Input rings are output rings. Computed winding numbers, net winding numbers and parents");
    debug("Finishing without self-intersections");
    return output;
  }

  // If self-intersections are found, we will compute the output rings with the help of two intermediate variables
  // First, we build the pseudo vertex list and intersection list
  // The Pseudo vertex list is an array with for each ring an array with for each edge an array containing the pseudo-vertices (as made by their constructor) that have this ring and edge as ringAndEdgeIn, sorted for each edge by their fractional distance on this edge. It's length hence equals numRings.
  var pseudoVtxListByRingAndEdge = [];
  // The intersection list is an array containing intersections (as made by their constructor). First all numvertices ring-vertex-intersections, then all self-intersections (intra- and inter-ring). The order of the latter is not important but is permanent once given.
  var isectList = [];
  // Adding ring-pseudo-vertices to pseudoVtxListByRingAndEdge and ring-vertex-intersections to isectList
  for (var i = 0; i < numRings; i++) {
    pseudoVtxListByRingAndEdge.push([]);
    for (var j = 0; j < feature.geometry.coordinates[i].length-1; j++) {
      // Each edge will feature one ring-pseudo-vertex in its array, on the last position. i.e. edge j features the ring-pseudo-vertex of the ring vertex j+1, which has ringAndEdgeIn = [i,j], on the last position.
      pseudoVtxListByRingAndEdge[i].push([new PseudoVtx(feature.geometry.coordinates[i][(j+1).modulo(feature.geometry.coordinates[i].length-1)], 1, [i, j], [i, (j+1).modulo(feature.geometry.coordinates[i].length-1)], undefined)]);
      // The first numvertices elements in isectList correspond to the ring-vertex-intersections
      isectList.push(new Isect(feature.geometry.coordinates[i][j], [i, (j-1).modulo(feature.geometry.coordinates[i].length-1)], [i, j], undefined, undefined, false, true));
    }
  }
  // Adding intersection-pseudo-vertices to pseudoVtxListByRingAndEdge and self-intersections to isectList
  for (var i = 0; i < numSelfIsect; i++) {
    // Adding intersection-pseudo-vertices made using selfIsectsData to pseudoVtxListByRingAndEdge's array corresponding to the incomming ring and edge
    pseudoVtxListByRingAndEdge[selfIsectsData[i][1]][selfIsectsData[i][2]].push(new PseudoVtx(selfIsectsData[i][0], selfIsectsData[i][5], [selfIsectsData[i][1], selfIsectsData[i][2]], [selfIsectsData[i][6], selfIsectsData[i][7]], undefined));
    // selfIsectsData contains double mentions of each intersection, but we only want to add them once to isectList
    if (selfIsectsData[i][11]) isectList.push(new Isect(selfIsectsData[i][0], [selfIsectsData[i][1], selfIsectsData[i][2]], [selfIsectsData[i][6], selfIsectsData[i][7]], undefined, undefined, true, true));
  }
  var numIsect = isectList.length;
  // Sort edge arrays of pseudoVtxListByRingAndEdge by the fractional distance 'param'
  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {
    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {
      pseudoVtxListByRingAndEdge[i][j].sort(function(a, b){ return (a.param < b.param) ? -1 : 1 ; } );
    }
  }
  debug("Setting up pseudoVtxListByRingAndEdge and isectList");

  // Make a spatial index of intersections, in preperation for the following two steps
  allIsectsAsIsectRbushTreeItem = [];
  for (var i = 0; i < numIsect; i++) {
    allIsectsAsIsectRbushTreeItem.push({minX: isectList[i].coord[0], minY: isectList[i].coord[1], maxX: isectList[i].coord[0], maxY: isectList[i].coord[1], index: i}); // could pass isect: isectList[i], but not necessary
  }
  var isectRbushTree = rbush();
  isectRbushTree.load(allIsectsAsIsectRbushTreeItem);

  // Now we will teach each intersection in isectList which is the next intersection along both it's [ring, edge]'s, in two steps.
  // First, we find the next intersection for each pseudo-vertex in pseudoVtxListByRingAndEdge:
  // For each pseudovertex in pseudoVtxListByRingAndEdge (3 loops) look at the next pseudovertex on that edge and find the corresponding intersection by comparing coordinates
  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++){
    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++){
      for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++){
        var coordToFind;
        if (k == pseudoVtxListByRingAndEdge[i][j].length-1) { // If it's the last pseudoVertex on that edge, then the next pseudoVertex is the first one on the next edge of that ring.
          coordToFind = pseudoVtxListByRingAndEdge[i][(j+1).modulo(feature.geometry.coordinates[i].length-1)][0].coord;
        } else {
          coordToFind = pseudoVtxListByRingAndEdge[i][j][k+1].coord;
        }
        var IsectRbushTreeItemFound = isectRbushTree.search({minX: coordToFind[0], minY: coordToFind[1], maxX: coordToFind[0], maxY: coordToFind[1]})[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex
        pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn = IsectRbushTreeItemFound.index;
      }
    }
  }
  debug("Computing nextIsect for pseudoVtxListByRingAndEdge");

  // Second, we port this knowledge of the next intersection over to the intersections in isectList, by finding the intersection corresponding to each pseudo-vertex and copying the pseudo-vertex' knownledge of the next-intersection over to the intersection
  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++){
    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++){
      for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++){
        var coordToFind = pseudoVtxListByRingAndEdge[i][j][k].coord;
        var IsectRbushTreeItemFound = isectRbushTree.search({minX: coordToFind[0], minY: coordToFind[1], maxX: coordToFind[0], maxY: coordToFind[1]})[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex
        var l = IsectRbushTreeItemFound.index;
        if (l < numvertices) { // Special treatment at ring-vertices: we correct the misnaming that happened in the previous block, since ringAndEdgeOut = ringAndEdge2 for ring vertices.
            isectList[l].nxtIsectAlongRingAndEdge2 = pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;
        } else { // Port the knowledge of the next intersection from the pseudo-vertices to the intersections, depending on how the edges are labeled in the pseudo-vertex and intersection.
          if (equalArrays(isectList[l].ringAndEdge1, pseudoVtxListByRingAndEdge[i][j][k].ringAndEdgeIn)) {
            isectList[l].nxtIsectAlongRingAndEdge1 = pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;
          } else {
            isectList[l].nxtIsectAlongRingAndEdge2 = pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;
          }
        }
      }
    }
  }
  // This explains why, eventhough when we will walk away from an intersection, we will walk way from the corresponding pseudo-vertex along edgeOut, pseudo-vertices have the property 'nxtIsectAlongEdgeIn' in stead of some propery 'nxtPseudoVtxAlongEdgeOut'. This is because this property (which is easy to find out) is used in the above for nxtIsectAlongRingAndEdge1 and nxtIsectAlongRingAndEdge2!
  debug("Porting nextIsect to isectList");

  // Before we start walking over the intersections to build the output rings, we prepare a queue that stores information on intersections we still have to deal with, and put at least one intersection in it.
  // This queue will contain information on intersections where we can start walking from once the current walk is finished, and its parent output ring (the smallest output ring it lies within, -1 if no parent or parent unknown yet) and its winding number (which we can already determine).
  var queue = []
  // For each output ring, add the ring-vertex-intersection with the smalles x-value (i.e. the left-most) as a start intersection. By choosing such an extremal intersections, we are sure to start at an intersection that is a convex vertex of its output ring. By adding them all to the queue, we are sure that no rings will be forgotten. If due to ring-intersections such an intersection will be encountered while walking, it will be removed from the queue.
  var i = 0;
  for (var j = 0; j < numRings; j++) {
    var leftIsect = i;
    for (var k = 0; k < feature.geometry.coordinates[j].length-1; k++) {
      if (isectList[i].coord[0] < isectList[leftIsect].coord[0]) {
        leftIsect = i;
      }
      i++;
    }
    // Compute winding at this left-most ring-vertex-intersection. We thus this by using our knowledge that this extremal vertex must be a convex vertex.
    // We first find the intersection before and after it, and then use them to determine the winding number of the corresponding output ring, since we know that an extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it would not be is because the winding number we use to compute it is wrong
    var isectAfterLeftIsect = isectList[leftIsect].nxtIsectAlongRingAndEdge2;
    for (var k = 0; k < isectList.length; k++) {
      if ((isectList[k].nxtIsectAlongRingAndEdge1 == leftIsect) || (isectList[k].nxtIsectAlongRingAndEdge2 == leftIsect)) {
        var isectBeforeLeftIsect = k;
        break
      }
    }
    var windingAtIsect = isConvex([isectList[isectBeforeLeftIsect].coord,isectList[leftIsect].coord,isectList[isectAfterLeftIsect].coord],true) ? 1 : -1;

    queue.push({isect: leftIsect, parent: -1, winding: windingAtIsect})
  }
  // Sort the queue by the same criterion used to find the leftIsect: the left-most leftIsect must be last in the queue, such that it will be popped first, such that we will work from out to in regarding input rings. This assumtion is used when predicting the winding number and parent of a new queue member.
  queue.sort(function(a, b){ return (isectList[a.isect].coord > isectList[b.isect].coord) ? -1 : 1 });
  debugAll("Initial state of the queue: " + JSON.stringify(queue));
  debug("Setting up queue");

  // Initialise output
  var outputFeatureArray = [];

  // While the queue is not empty, take the last object (i.e. its intersection) out and start making an output ring by walking in the direction that has not been walked away over yet.
  while (queue.length>0) {
    // Get the last object out of the queue
    var popped = queue.pop();
    var startIsect = popped.isect;
    var currentOutputRingParent = popped.parent;
    var currentOutputRingWinding = popped.winding;
    // Make new output ring and add vertex from starting intersection
    var currentOutputRing = outputFeatureArray.length;
    var currentOutputRingCoords = [isectList[startIsect].coord];
    debugAll("# Starting output ring number " + outputFeatureArray.length + " with winding " + currentOutputRingWinding + " from intersection " + startIsect);
    if (startIsect < numvertices) debugAll("This is a ring-vertex-intersections, which means this output ring does not touch existing output rings");
    // Set up the variables used while walking over intersections: 'currentIsect', 'nxtIsect' and 'walkingRingAndEdge'
    var currentIsect = startIsect;
    if (isectList[startIsect].ringAndEdge1Walkable) {
      var walkingRingAndEdge = isectList[startIsect].ringAndEdge1;
      var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge1;
    } else {
      var walkingRingAndEdge = isectList[startIsect].ringAndEdge2;
      var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge2;
    }
    // While we have not arrived back at the same intersection, keep walking
    while (!equalArrays(isectList[startIsect].coord,isectList[nxtIsect].coord)){
      debugAll("Walking from intersection " + currentIsect + " to " + nxtIsect + " over ring " + walkingRingAndEdge[0] + " and edge " + walkingRingAndEdge[1]);
      currentOutputRingCoords.push(isectList[nxtIsect].coord);
      debugAll("Adding intersection " + nxtIsect + " to current output ring");
      // If the next intersection is queued, we can remove it, because we will go there now.
      var nxtIsectInQueue = undefined;
      for(var i = 0; i < queue.length; i++) { if (queue[i].isect == nxtIsect) {nxtIsectInQueue = i; break; } }
      if (nxtIsectInQueue != undefined) {
        debugAll("Removing intersection " + nxtIsect + " from queue");
        queue.splice(nxtIsectInQueue,1);
      }
      // Arriving at this new intersection, we know which will be our next walking ring and edge (if we came from 1 we will walk away from 2 and vice versa),
      // So we can set it as our new walking ring and intersection and remember that we (will) have walked over it
      // If we have never walked away from this new intersection along the other ring and edge then we will soon do, add the intersection (and the parent wand winding number) to the queue
      // (We can predict the winding number and parent as follows: if the edge is convex, the other output ring started from there will have the alternate winding and lie outside of the current one, and thus have the same parent ring as the current ring. Otherwise, it will have the same winding number and lie inside of the current ring. We are, however, only sure of this of an output ring started from there does not enclose the current ring. This is why the initial queue's intersections must be sorted such that outer ones come out first.)
      // We then update the other two walking variables.
      if (equalArrays(walkingRingAndEdge,isectList[nxtIsect].ringAndEdge1)) {
        walkingRingAndEdge = isectList[nxtIsect].ringAndEdge2;
        isectList[nxtIsect].ringAndEdge2Walkable = false;
        if (isectList[nxtIsect].ringAndEdge1Walkable) {
          debugAll("Adding intersection " + nxtIsect + " to queue");
          var pushing = {isect: nxtIsect};
          if (isConvex([isectList[currentIsect].coord, isectList[nxtIsect].coord, isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge2].coord],currentOutputRingWinding == 1)) {
            pushing.parent = currentOutputRingParent;
            pushing.winding = -currentOutputRingWinding;
          } else {
            pushing.parent = currentOutputRing;
            pushing.winding = currentOutputRingWinding;
          }
          queue.push(pushing);
        }
        currentIsect = nxtIsect;
        nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge2;
      } else {
        walkingRingAndEdge = isectList[nxtIsect].ringAndEdge1;
        isectList[nxtIsect].ringAndEdge1Walkable = false;
        if (isectList[nxtIsect].ringAndEdge2Walkable) {
          debugAll("Adding intersection " + nxtIsect + " to queue");
          var pushing = {isect: nxtIsect};
          if (isConvex([isectList[currentIsect].coord, isectList[nxtIsect].coord, isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge1].coord],currentOutputRingWinding == 1)) {
            pushing.parent = currentOutputRingParent;
            pushing.winding = -currentOutputRingWinding;
          } else {
            pushing.parent = currentOutputRing;
            pushing.winding = currentOutputRingWinding;
          }
          queue.push(pushing);
        }
        currentIsect = nxtIsect;
        nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge1;
      }
      debugAll("Current state of the queue: " + JSON.stringify(queue));
    }
    debugAll("Walking from intersection " + currentIsect + " to " + nxtIsect + " over ring " + walkingRingAndEdge[0] + " and edge " + walkingRingAndEdge[1] + " and closing ring");
    // Close output ring
    currentOutputRingCoords.push(isectList[nxtIsect].coord);
    // Push output ring to output
    outputFeatureArray.push(helpers.polygon([currentOutputRingCoords],{index: currentOutputRing, parent: currentOutputRingParent, winding: currentOutputRingWinding, netWinding: undefined}));
  }

  var output = helpers.featureCollection(outputFeatureArray);
  debug("Walking");

  determineParents();
  debug("Determining parents");

  setNetWinding();
  debug("Setting winding number");

  // These functions are also used if no intersections are found
  function determineParents() {
    var featuresWithoutParent = [];
    for (var i = 0; i < output.features.length; i++) {
      debugAll("Output ring " + i + " has parent " + output.features[i].properties.parent);
      if (output.features[i].properties.parent == -1) featuresWithoutParent.push(i);
    }
    debugAll("The following output ring(s) have no parent: " + featuresWithoutParent);
    if (featuresWithoutParent.length > 1) {
      for (var i = 0; i < featuresWithoutParent.length; i++) {
        var parent = -1;
        var parentArea = Infinity;
        for (var j = 0; j < output.features.length; j++) {
          if (featuresWithoutParent[i] == j) continue
          if (inside(helpers.point(output.features[featuresWithoutParent[i]].geometry.coordinates[0][0]), output.features[j], true)) {
            if (area(output.features[j]) < parentArea) {
              parent = j;
              debugAll("Ring "+featuresWithoutParent[i]+" lies inside output ring "+j);
            }
          }
        }
        output.features[featuresWithoutParent[i]].properties.parent = parent;
        debugAll("Ring "+featuresWithoutParent[i]+" is assigned parent "+parent);
      }
    }
  }

  function setNetWinding() {
    for (var i = 0; i < output.features.length; i++) {
      if (output.features[i].properties.parent == -1) {
        var netWinding = output.features[i].properties.winding
        output.features[i].properties.netWinding = netWinding;
        setNetWindingOfChildren(i,netWinding)
      }
    }
  }

  function setNetWindingOfChildren(parent,ParentNetWinding){
    for (var i = 0; i < output.features.length; i++) {
      if (output.features[i].properties.parent == parent){
        var netWinding = ParentNetWinding + output.features[i].properties.winding
        output.features[i].properties.netWinding = netWinding;
        setNetWindingOfChildren(i,netWinding)
      }
    }
  }

  debugAll("# Total of " + output.features.length + " rings");

  return output;
}



// Constructor for (ring- or intersection-) pseudo-vertices.
var PseudoVtx = function (coord, param, ringAndEdgeIn, ringAndEdgeOut, nxtIsectAlongEdgeIn) {
  this.coord = coord; // [x,y] of this pseudo-vertex
  this.param = param; // fractional distance of this intersection on incomming edge
  this.ringAndEdgeIn = ringAndEdgeIn; // [ring index, edge index] of incomming edge
  this.ringAndEdgeOut = ringAndEdgeOut; // [ring index, edge index] of outgoing edge
  this.nxtIsectAlongEdgeIn = nxtIsectAlongEdgeIn; // The next intersection when following the incomming edge (so not when following ringAndEdgeOut!)
}

// Constructor for an intersection. There are two intersection-pseudo-vertices per self-intersection and one ring-pseudo-vertex per ring-vertex-intersection. Their labels 1 and 2 are not assigned a particular meaning but are permanent once given.
var Isect = function (coord, ringAndEdge1, ringAndEdge2, nxtIsectAlongRingAndEdge1, nxtIsectAlongRingAndEdge2, ringAndEdge1Walkable, ringAndEdge2Walkable) {
  this.coord = coord; // [x,y] of this intersection
  this.ringAndEdge1 = ringAndEdge1; // first edge of this intersection
  this.ringAndEdge2 = ringAndEdge2; // second edge of this intersection
  this.nxtIsectAlongRingAndEdge1 = nxtIsectAlongRingAndEdge1; // the next intersection when following ringAndEdge1
  this.nxtIsectAlongRingAndEdge2 = nxtIsectAlongRingAndEdge2; // the next intersection when following ringAndEdge2
  this.ringAndEdge1Walkable = ringAndEdge1Walkable; // May we (still) walk away from this intersection over ringAndEdge1?
  this.ringAndEdge2Walkable = ringAndEdge2Walkable; // May we (still) walk away from this intersection over ringAndEdge2?
}

// Function to determine if three consecutive points of a simple, non-self-intersecting ring make up a convex vertex, assuming the ring is right- or lefthanded
function isConvex(pts, righthanded){
  // 'pts' is an [x,y] pair
  // 'righthanded' is a boolean
  if (typeof(righthanded) === 'undefined') righthanded = true;
  if (pts.length != 3) throw new Error("This function requires an array of three points [x,y]");
  var d = (pts[1][0] - pts[0][0]) * (pts[2][1] - pts[0][1]) - (pts[1][1] - pts[0][1]) * (pts[2][0] - pts[0][0]);
  return (d >= 0) == righthanded;
}

// Function to compute winding of simple, non-self-intersecting ring
function windingOfRing(ring){
  // 'ring' is an array of [x,y] pairs with the last equal to the first
  // Compute the winding number based on the vertex with the smallest x-value, it precessor and successor. An extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it is not is because the winding number we use to compute it is wrong
  var leftVtx = 0;
  for (var i = 0; i < ring.length-1; i++) { if (ring[i][0] < ring[leftVtx][0]) leftVtx = i; }
  if (isConvex([ring[(leftVtx-1).modulo(ring.length-1)],ring[leftVtx],ring[(leftVtx+1).modulo(ring.length-1)]],true)) {
    var winding = 1;
  } else {
    var winding = -1;
  }
  return winding
}

// Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript
function equalArrays(array1, array2) {
  // if the other array is a falsy value, return
  if (!array1 || !array2)
      return false;

  // compare lengths - can save a lot of time
  if (array1.length != array2.length)
      return false;

  for (var i = 0, l=array1.length; i < l; i++) {
      // Check if we have nested arrays
      if (array1[i] instanceof Array && array2[i] instanceof Array) {
          // recurse into the nested arrays
          if (!equalArrays(array1[i],array2[i]))
              return false;
      }
      else if (array1[i] != array2[i]) {
          // Warning - two different object instances will never be equal: {x:20} != {x:20}
          return false;
      }
  }
  return true;
}

// Fix Javascript modulo for negative number. From http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving
Number.prototype.modulo = function(n) {
  return ((this % n) + n) % n;
}

// Function to get array with only unique elements. From http://stackoverflow.com/questions/1960473/unique-values-in-an-array
function getUnique(array) {
 var u = {}, a = [];
 for(var i = 0, l = array.length; i < l; ++i){
    if(u.hasOwnProperty(array[i])) {
       continue;
    }
    a.push(array[i]);
    u[array[i]] = 1;
 }
 return a;
}

// Function to check if array is unique (i.e. all unique elements, i.e. no duplicate elements)
function isUnique(array) {
 var u = {}, a = [];
 var isUnique = 1;
 for(var i = 0, l = array.length; i < l; ++i){
    if(u.hasOwnProperty(array[i])) {
      isUnique = 0;
      break;
    }
    u[array[i]] = 1;
 }
 return isUnique;
}


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

// Find self-intersections in geojson polygon (possibly with interior rings)
var rbush = __webpack_require__(22);

module.exports = function(feature, filterFn, useSpatialIndex) {
  if (feature.geometry.type != "Polygon") throw new Error("The input feature must be a Polygon");
  if (useSpatialIndex == undefined) useSpatialIndex = 1;

  var coord = feature.geometry.coordinates;

  var output = [];
  var seen = {};

  if (useSpatialIndex) {
    var allEdgesAsRbushTreeItems = [];
    for (var ring0 = 0; ring0 < coord.length; ring0++) {
      for (var edge0 = 0; edge0 < coord[ring0].length-1; edge0++) {
        allEdgesAsRbushTreeItems.push(rbushTreeItem(ring0, edge0))
      }
    }
    var tree = rbush();
    tree.load(allEdgesAsRbushTreeItems);
  }

  for (var ring0 = 0; ring0 < coord.length; ring0++) {
    for (var edge0 = 0; edge0 < coord[ring0].length-1; edge0++) {
      if (useSpatialIndex) {
        var bboxOverlaps = tree.search(rbushTreeItem(ring0, edge0));
        bboxOverlaps.forEach(function(bboxIsect) {
          var ring1 = bboxIsect.ring;
          var edge1 = bboxIsect.edge;
          ifIsectAddToOutput(ring0, edge0, ring1, edge1);
        });
      }
      else {
        for (var ring1 = 0; ring1 < coord.length; ring1++) {
          for (var edge1 = 0 ; edge1 < coord[ring1].length-1; edge1++) {
            // TODO: speedup possible if only interested in unique: start last two loops at ring0 and edge0+1
            ifIsectAddToOutput(ring0, edge0, ring1, edge1);
          }
        }
      }
    }
  }

  if (!filterFn) output = {type: "Feature", geometry: {type: "MultiPoint", coordinates: output}};
  return output;

  // Function to check if two edges intersect and add the intersection to the output
  function ifIsectAddToOutput(ring0, edge0, ring1, edge1) {
    var start0 = coord[ring0][edge0];
    var end0 = coord[ring0][edge0+1];
    var start1 = coord[ring1][edge1];
    var end1 = coord[ring1][edge1+1];

    var isect = intersect(start0, end0, start1, end1);

    if (isect == null) return; // discard parallels and coincidence
    frac0, frac1;
    if (end0[0] != start0[0]) {
      var frac0 = (isect[0]-start0[0])/(end0[0]-start0[0]);
    } else {
      var frac0 = (isect[1]-start0[1])/(end0[1]-start0[1]);
    };
    if (end1[0] != start1[0]) {
      var frac1 = (isect[0]-start1[0])/(end1[0]-start1[0]);
    } else {
      var frac1 = (isect[1]-start1[1])/(end1[1]-start1[1]);
    };
    if (frac0 >= 1 || frac0 <= 0 || frac1 >= 1 || frac1 <= 0) return; // require segment intersection

    var key = isect;
    var unique = !seen[key];
    if (unique) {
      seen[key] = true;
    }

    if (filterFn) {
      output.push(filterFn(isect, ring0, edge0, start0, end0, frac0, ring1, edge1, start1, end1, frac1, unique));
    } else {
      output.push(isect);
    }
  }

  // Function to return a rbush tree item given an ring and edge number
  function rbushTreeItem(ring, edge) {

    var start = coord[ring][edge];
    var end = coord[ring][edge+1];

    if (start[0] < end[0]) {
      var minX = start[0], maxX = end[0];
    } else {
      var minX = end[0], maxX = start[0];
    };
    if (start[1] < end[1]) {
      var minY = start[1], maxY = end[1];
    } else {
      var minY = end[1], maxY = start[1];
    }
    return {minX: minX, minY: minY, maxX: maxX, maxY: maxY, ring: ring, edge: edge};
  }

}

// Function to compute where two lines (not segments) intersect. From https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection
function intersect(start0, end0, start1, end1) {
  if (equalArrays(start0,start1) || equalArrays(start0,end1) || equalArrays(end0,start1) || equalArrays(end1,start1)) return null;
  var x0 = start0[0],
      y0 = start0[1],
      x1 = end0[0],
      y1 = end0[1],
      x2 = start1[0],
      y2 = start1[1],
      x3 = end1[0],
      y3 = end1[1];
  var denom = (x0 - x1) * (y2 - y3) - (y0 - y1) * (x2 - x3);
  if (denom == 0) return null;
  var x4 = ((x0 * y1 - y0 * x1) * (x2 - x3) - (x0 - x1) * (x2 * y3 - y2 * x3)) / denom;
  var y4 = ((x0 * y1 - y0 * x1) * (y2 - y3) - (y0 - y1) * (x2 * y3 - y2 * x3)) / denom;
  return [x4, y4];
}

// Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript
function equalArrays(array1, array2) {
  // if the other array is a falsy value, return
  if (!array1 || !array2)
      return false;

  // compare lengths - can save a lot of time
  if (array1.length != array2.length)
      return false;

  for (var i = 0, l=array1.length; i < l; i++) {
      // Check if we have nested arrays
      if (array1[i] instanceof Array && array2[i] instanceof Array) {
          // recurse into the nested arrays
          if (!equalArrays(array1[i],array2[i]))
              return false;
      }
      else if (array1[i] != array2[i]) {
          // Warning - two different object instances will never be equal: {x:20} != {x:20}
          return false;
      }
  }
  return true;
}


/***/ }),
/* 213 */
/***/ (function(module, exports) {

/**
 * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
 *
 * @name feature
 * @param {Geometry} geometry input geometry
 * @param {Object} properties properties
 * @returns {FeatureCollection} a FeatureCollection of input features
 * @example
 * var geometry = {
 *      "type": "Point",
 *      "coordinates": [
 *        67.5,
 *        32.84267363195431
 *      ]
 *    }
 *
 * var feature = turf.feature(geometry);
 *
 * //=feature
 */
function feature(geometry, properties) {
    if (!geometry) throw new Error('No geometry passed');

    return {
        type: 'Feature',
        properties: properties || {},
        geometry: geometry
    };
}
module.exports.feature = feature;

/**
 * Takes coordinates and properties (optional) and returns a new {@link Point} feature.
 *
 * @name point
 * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
 * @param {Object=} properties an Object that is used as the {@link Feature}'s
 * properties
 * @returns {Feature<Point>} a Point feature
 * @example
 * var pt1 = turf.point([-75.343, 39.984]);
 *
 * //=pt1
 */
module.exports.point = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');
    if (coordinates.length === undefined) throw new Error('Coordinates must be an array');
    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');
    if (typeof coordinates[0] !== 'number' || typeof coordinates[1] !== 'number') throw new Error('Coordinates must numbers');

    return feature({
        type: 'Point',
        coordinates: coordinates
    }, properties);
};

/**
 * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.
 *
 * @name polygon
 * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
 * @param {Object=} properties a properties object
 * @returns {Feature<Polygon>} a Polygon feature
 * @throws {Error} throw an error if a LinearRing of the polygon has too few positions
 * or if a LinearRing of the Polygon does not have matching Positions at the
 * beginning & end.
 * @example
 * var polygon = turf.polygon([[
 *  [-2.275543, 53.464547],
 *  [-2.275543, 53.489271],
 *  [-2.215118, 53.489271],
 *  [-2.215118, 53.464547],
 *  [-2.275543, 53.464547]
 * ]], { name: 'poly1', population: 400});
 *
 * //=polygon
 */
module.exports.polygon = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    for (var i = 0; i < coordinates.length; i++) {
        var ring = coordinates[i];
        if (ring.length < 4) {
            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');
        }
        for (var j = 0; j < ring[ring.length - 1].length; j++) {
            if (ring[ring.length - 1][j] !== ring[0][j]) {
                throw new Error('First and last Position are not equivalent.');
            }
        }
    }

    return feature({
        type: 'Polygon',
        coordinates: coordinates
    }, properties);
};

/**
 * Creates a {@link LineString} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name lineString
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<LineString>} a LineString feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var linestring1 = turf.lineString([
 *   [-21.964416, 64.148203],
 *   [-21.956176, 64.141316],
 *   [-21.93901, 64.135924],
 *   [-21.927337, 64.136673]
 * ]);
 * var linestring2 = turf.lineString([
 *   [-21.929054, 64.127985],
 *   [-21.912918, 64.134726],
 *   [-21.916007, 64.141016],
 *   [-21.930084, 64.14446]
 * ], {name: 'line 1', distance: 145});
 *
 * //=linestring1
 *
 * //=linestring2
 */
module.exports.lineString = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'LineString',
        coordinates: coordinates
    }, properties);
};

/**
 * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
 *
 * @name featureCollection
 * @param {Feature[]} features input features
 * @returns {FeatureCollection} a FeatureCollection of input features
 * @example
 * var features = [
 *  turf.point([-75.343, 39.984], {name: 'Location A'}),
 *  turf.point([-75.833, 39.284], {name: 'Location B'}),
 *  turf.point([-75.534, 39.123], {name: 'Location C'})
 * ];
 *
 * var fc = turf.featureCollection(features);
 *
 * //=fc
 */
module.exports.featureCollection = function (features) {
    if (!features) throw new Error('No features passed');

    return {
        type: 'FeatureCollection',
        features: features
    };
};

/**
 * Creates a {@link Feature<MultiLineString>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiLineString
 * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<MultiLineString>} a MultiLineString feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
 *
 * //=multiLine
 *
 */
module.exports.multiLineString = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiLineString',
        coordinates: coordinates
    }, properties);
};

/**
 * Creates a {@link Feature<MultiPoint>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPoint
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<MultiPoint>} a MultiPoint feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPt = turf.multiPoint([[0,0],[10,10]]);
 *
 * //=multiPt
 *
 */
module.exports.multiPoint = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiPoint',
        coordinates: coordinates
    }, properties);
};


/**
 * Creates a {@link Feature<MultiPolygon>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPolygon
 * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<MultiPolygon>} a multipolygon feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
 *
 * //=multiPoly
 *
 */
module.exports.multiPolygon = function (coordinates, properties) {
    if (!coordinates) throw new Error('No coordinates passed');

    return feature({
        type: 'MultiPolygon',
        coordinates: coordinates
    }, properties);
};

/**
 * Creates a {@link Feature<GeometryCollection>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name geometryCollection
 * @param {Array<{Geometry}>} geometries an array of GeoJSON Geometries
 * @param {Object=} properties an Object of key-value pairs to add as properties
 * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
 * @example
 * var pt = {
 *     "type": "Point",
 *       "coordinates": [100, 0]
 *     };
 * var line = {
 *     "type": "LineString",
 *     "coordinates": [ [101, 0], [102, 1] ]
 *   };
 * var collection = turf.geometryCollection([pt, line]);
 *
 * //=collection
 */
module.exports.geometryCollection = function (geometries, properties) {
    if (!geometries) throw new Error('No geometries passed');

    return feature({
        type: 'GeometryCollection',
        geometries: geometries
    }, properties);
};

var factors = {
    miles: 3960,
    nauticalmiles: 3441.145,
    degrees: 57.2957795,
    radians: 1,
    inches: 250905600,
    yards: 6969600,
    meters: 6373000,
    metres: 6373000,
    kilometers: 6373,
    kilometres: 6373,
    feet: 20908792.65
};

/*
 * Convert a distance measurement from radians to a more friendly unit.
 *
 * @name radiansToDistance
 * @param {number} distance in radians across the sphere
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} distance
 */
module.exports.radiansToDistance = function (radians, units) {
    var factor = factors[units || 'kilometers'];
    if (factor === undefined) throw new Error('Invalid unit');

    return radians * factor;
};

/*
 * Convert a distance measurement from a real-world unit into radians
 *
 * @name distanceToRadians
 * @param {number} distance in real units
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} radians
 */
module.exports.distanceToRadians = function (distance, units) {
    var factor = factors[units || 'kilometers'];
    if (factor === undefined) throw new Error('Invalid unit');

    return distance / factor;
};

/*
 * Convert a distance measurement from a real-world unit into degrees
 *
 * @name distanceToRadians
 * @param {number} distance in real units
 * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers
 * inches, yards, metres, meters, kilometres, kilometers.
 * @returns {number} degrees
 */
module.exports.distanceToDegrees = function (distance, units) {
    var factor = factors[units || 'kilometers'];
    if (factor === undefined) throw new Error('Invalid unit');

    return (distance / factor) * 57.2958;
};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var area = __webpack_require__(42).geometry;
var geomReduce = __webpack_require__(215).geomReduce;

/**
 * Takes one or more features and returns their area in square meters.
 *
 * @name area
 * @param {FeatureCollection|Feature<any>} geojson input GeoJSON feature(s)
 * @returns {number} area in square meters
 * @addToMap polygon
 * @example
 * var polygon = {
 *   "type": "Feature",
 *   "properties": {},
 *   "geometry": {
 *     "type": "Polygon",
 *     "coordinates": [
 *       [
 *         [125, -15],
 *         [113, -22],
 *         [117, -37],
 *         [130, -33],
 *         [148, -39],
 *         [154, -27],
 *         [144, -15],
 *         [125, -15]
 *       ]
 *     ]
 *   }
 * }
 * var area = turf.area(polygon);
 * //=area => square meters
 * //=polygon
 */
module.exports = function (geojson) {
    return geomReduce(geojson, function (value, geometry) {
        return value + area(geometry);
    }, 0);
};


/***/ }),
/* 215 */
/***/ (function(module, exports) {

/**
 * Callback for coordEach
 *
 * @private
 * @callback coordEachCallback
 * @param {[number, number]} currentCoords The current coordinates being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
 *
 * @name coordEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentCoords, currentIndex)
 * @param {boolean} [excludeWrapCoord=false] whether or not to include
 * the final coordinate of LinearRings that wraps the ring in its iteration.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.coordEach(features, function (currentCoords, currentIndex) {
 *   //=currentCoords
 *   //=currentIndex
 * });
 */
function coordEach(layer, callback, excludeWrapCoord) {
    var i, j, k, g, l, geometry, stopG, coords,
        geometryMaybeCollection,
        wrapShrink = 0,
        currentIndex = 0,
        isGeometryCollection,
        isFeatureCollection = layer.type === 'FeatureCollection',
        isFeature = layer.type === 'Feature',
        stop = isFeatureCollection ? layer.features.length : 1;

  // This logic may look a little weird. The reason why it is that way
  // is because it's trying to be fast. GeoJSON supports multiple kinds
  // of objects at its root: FeatureCollection, Features, Geometries.
  // This function has the responsibility of handling all of them, and that
  // means that some of the `for` loops you see below actually just don't apply
  // to certain inputs. For instance, if you give this just a
  // Point geometry, then both loops are short-circuited and all we do
  // is gradually rename the input until it's called 'geometry'.
  //
  // This also aims to allocate as few resources as possible: just a
  // few numbers and booleans, rather than any temporary arrays as would
  // be required with the normalization approach.
    for (i = 0; i < stop; i++) {

        geometryMaybeCollection = (isFeatureCollection ? layer.features[i].geometry :
        (isFeature ? layer.geometry : layer));
        isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (g = 0; g < stopG; g++) {
            geometry = isGeometryCollection ?
            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;
            coords = geometry.coordinates;

            wrapShrink = (excludeWrapCoord &&
                (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon')) ?
                1 : 0;

            if (geometry.type === 'Point') {
                callback(coords, currentIndex);
                currentIndex++;
            } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {
                for (j = 0; j < coords.length; j++) {
                    callback(coords[j], currentIndex);
                    currentIndex++;
                }
            } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {
                for (j = 0; j < coords.length; j++)
                    for (k = 0; k < coords[j].length - wrapShrink; k++) {
                        callback(coords[j][k], currentIndex);
                        currentIndex++;
                    }
            } else if (geometry.type === 'MultiPolygon') {
                for (j = 0; j < coords.length; j++)
                    for (k = 0; k < coords[j].length; k++)
                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                            callback(coords[j][k][l], currentIndex);
                            currentIndex++;
                        }
            } else if (geometry.type === 'GeometryCollection') {
                for (j = 0; j < geometry.geometries.length; j++)
                    coordEach(geometry.geometries[j], callback, excludeWrapCoord);
            } else {
                throw new Error('Unknown Geometry Type');
            }
        }
    }
}
module.exports.coordEach = coordEach;

/**
 * Callback for coordReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback coordReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {[number, number]} currentCoords The current coordinate being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
 *
 * @name coordReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentCoords, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @param {boolean} [excludeWrapCoord=false] whether or not to include
 * the final coordinate of LinearRings that wraps the ring in its iteration.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.coordReduce(features, function (previousValue, currentCoords, currentIndex) {
 *   //=previousValue
 *   //=currentCoords
 *   //=currentIndex
 *   return currentCoords;
 * });
 */
function coordReduce(layer, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach(layer, function (currentCoords, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentCoords;
        } else {
            previousValue = callback(previousValue, currentCoords, currentIndex);
        }
    }, excludeWrapCoord);
    return previousValue;
}
module.exports.coordReduce = coordReduce;

/**
 * Callback for propEach
 *
 * @private
 * @callback propEachCallback
 * @param {*} currentProperties The current properties being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over properties in any GeoJSON object, similar to Array.forEach()
 *
 * @name propEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentProperties, currentIndex)
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.propEach(features, function (currentProperties, currentIndex) {
 *   //=currentProperties
 *   //=currentIndex
 * });
 */
function propEach(layer, callback) {
    var i;
    switch (layer.type) {
    case 'FeatureCollection':
        for (i = 0; i < layer.features.length; i++) {
            callback(layer.features[i].properties, i);
        }
        break;
    case 'Feature':
        callback(layer.properties, 0);
        break;
    }
}
module.exports.propEach = propEach;


/**
 * Callback for propReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback propReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {*} currentProperties The current properties being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce properties in any GeoJSON object into a single value,
 * similar to how Array.reduce works. However, in this case we lazily run
 * the reduction, so an array of all properties is unnecessary.
 *
 * @name propReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentProperties, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.propReduce(features, function (previousValue, currentProperties, currentIndex) {
 *   //=previousValue
 *   //=currentProperties
 *   //=currentIndex
 *   return currentProperties
 * });
 */
function propReduce(layer, callback, initialValue) {
    var previousValue = initialValue;
    propEach(layer, function (currentProperties, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentProperties;
        } else {
            previousValue = callback(previousValue, currentProperties, currentIndex);
        }
    });
    return previousValue;
}
module.exports.propReduce = propReduce;

/**
 * Callback for featureEach
 *
 * @private
 * @callback featureEachCallback
 * @param {Feature<any>} currentFeature The current feature being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Iterate over features in any GeoJSON object, similar to
 * Array.forEach.
 *
 * @name featureEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentFeature, currentIndex)
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.featureEach(features, function (currentFeature, currentIndex) {
 *   //=currentFeature
 *   //=currentIndex
 * });
 */
function featureEach(layer, callback) {
    if (layer.type === 'Feature') {
        callback(layer, 0);
    } else if (layer.type === 'FeatureCollection') {
        for (var i = 0; i < layer.features.length; i++) {
            callback(layer.features[i], i);
        }
    }
}
module.exports.featureEach = featureEach;

/**
 * Callback for featureReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback featureReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature<any>} currentFeature The current Feature being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce features in any GeoJSON object, similar to Array.reduce().
 *
 * @name featureReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentFeature, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.featureReduce(features, function (previousValue, currentFeature, currentIndex) {
 *   //=previousValue
 *   //=currentFeature
 *   //=currentIndex
 *   return currentFeature
 * });
 */
function featureReduce(layer, callback, initialValue) {
    var previousValue = initialValue;
    featureEach(layer, function (currentFeature, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentFeature;
        } else {
            previousValue = callback(previousValue, currentFeature, currentIndex);
        }
    });
    return previousValue;
}
module.exports.featureReduce = featureReduce;

/**
 * Get all coordinates from any GeoJSON object.
 *
 * @name coordAll
 * @param {Object} layer any GeoJSON object
 * @returns {Array<Array<number>>} coordinate position array
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * var coords = turf.coordAll(features);
 * //=coords
 */
function coordAll(layer) {
    var coords = [];
    coordEach(layer, function (coord) {
        coords.push(coord);
    });
    return coords;
}
module.exports.coordAll = coordAll;

/**
 * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
 *
 * @name geomEach
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (currentGeometry, currentIndex)
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.geomEach(features, function (currentGeometry, currentIndex) {
 *   //=currentGeometry
 *   //=currentIndex
 * });
 */
function geomEach(layer, callback) {
    var i, j, g, geometry, stopG,
        geometryMaybeCollection,
        isGeometryCollection,
        currentIndex = 0,
        isFeatureCollection = layer.type === 'FeatureCollection',
        isFeature = layer.type === 'Feature',
        stop = isFeatureCollection ? layer.features.length : 1;

  // This logic may look a little weird. The reason why it is that way
  // is because it's trying to be fast. GeoJSON supports multiple kinds
  // of objects at its root: FeatureCollection, Features, Geometries.
  // This function has the responsibility of handling all of them, and that
  // means that some of the `for` loops you see below actually just don't apply
  // to certain inputs. For instance, if you give this just a
  // Point geometry, then both loops are short-circuited and all we do
  // is gradually rename the input until it's called 'geometry'.
  //
  // This also aims to allocate as few resources as possible: just a
  // few numbers and booleans, rather than any temporary arrays as would
  // be required with the normalization approach.
    for (i = 0; i < stop; i++) {

        geometryMaybeCollection = (isFeatureCollection ? layer.features[i].geometry :
        (isFeature ? layer.geometry : layer));
        isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (g = 0; g < stopG; g++) {
            geometry = isGeometryCollection ?
            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;

            if (geometry.type === 'Point' ||
                geometry.type === 'LineString' ||
                geometry.type === 'MultiPoint' ||
                geometry.type === 'Polygon' ||
                geometry.type === 'MultiLineString' ||
                geometry.type === 'MultiPolygon') {
                callback(geometry, currentIndex);
                currentIndex++;
            } else if (geometry.type === 'GeometryCollection') {
                for (j = 0; j < geometry.geometries.length; j++) {
                    callback(geometry.geometries[j], currentIndex);
                    currentIndex++;
                }
            } else {
                throw new Error('Unknown Geometry Type');
            }
        }
    }
}
module.exports.geomEach = geomEach;

/**
 * Callback for geomReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @private
 * @callback geomReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {*} currentGeometry The current Feature being processed.
 * @param {number} currentIndex The index of the current element being processed in the
 * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 */

/**
 * Reduce geometry in any GeoJSON object, similar to Array.reduce().
 *
 * @name geomReduce
 * @param {Object} layer any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentGeometry, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = {
 *   "type": "FeatureCollection",
 *   "features": [
 *     {
 *       "type": "Feature",
 *       "properties": {"foo": "bar"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [26, 37]
 *       }
 *     },
 *     {
 *       "type": "Feature",
 *       "properties": {"hello": "world"},
 *       "geometry": {
 *         "type": "Point",
 *         "coordinates": [36, 53]
 *       }
 *     }
 *   ]
 * };
 * turf.geomReduce(features, function (previousValue, currentGeometry, currentIndex) {
 *   //=previousValue
 *   //=currentGeometry
 *   //=currentIndex
 *   return currentGeometry
 * });
 */
function geomReduce(layer, callback, initialValue) {
    var previousValue = initialValue;
    geomEach(layer, function (currentGeometry, currentIndex) {
        if (currentIndex === 0 && initialValue === undefined) {
            previousValue = currentGeometry;
        } else {
            previousValue = callback(previousValue, currentGeometry, currentIndex);
        }
    });
    return previousValue;
}
module.exports.geomReduce = geomReduce;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(217);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 217 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

var arc = __webpack_require__(219);
var getCoord = __webpack_require__(14).getCoord;

/**
 * Calculate great circles routes as {@link LineString}
 *
 * @name greatCircle
 * @param {Geometry|Feature<Point>|Array<number>} start source point feature
 * @param {Geometry|Feature<Point>|Array<number>} end destination point feature
 * @param {Object} [properties={}] line feature properties
 * @param {number} [npoints=100] number of points
 * @param {number} [offset=10] offset controls the likelyhood that lines will
 * be split which cross the dateline. The higher the number the more likely.
 * @returns {Feature<LineString>} great circle line feature
 * @example
 * var start = turf.point([-122, 48]);
 * var end = turf.point([-77, 39]);
 *
 * var greatCircle = turf.greatCircle(start, end, {'name': 'Seattle to DC'});
 *
 * //addToMap
 * var addToMap = [start, end, greatCircle]
 */
module.exports = function (start, end, properties, npoints, offset) {
    start = getCoord(start);
    end = getCoord(end);
    properties = properties || {};
    npoints = npoints || 100;
    offset = offset || 10;

    var generator = new arc.GreatCircle({x: start[0], y: start[1]}, {x: end[0], y: end[1]}, properties);
    /* eslint-disable */
    var line = generator.Arc(npoints, {offset: offset});
    /* eslint-enable */

    return line.json();
};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var D2R = Math.PI / 180;
var R2D = 180 / Math.PI;

var Coord = function (lon, lat) {
    this.lon = lon;
    this.lat = lat;
    this.x = D2R * lon;
    this.y = D2R * lat;
};

Coord.prototype.view = function () {
    return String(this.lon).slice(0, 4) + ',' + String(this.lat).slice(0, 4);
};

Coord.prototype.antipode = function () {
    var anti_lat = -1 * this.lat;
    var anti_lon = (this.lon < 0) ? 180 + this.lon : (180 - this.lon) * -1;
    return new Coord(anti_lon, anti_lat);
};

var LineString = function () {
    this.coords = [];
    this.length = 0;
};

LineString.prototype.move_to = function (coord) {
    this.length++;
    this.coords.push(coord);
};

var Arc = function (properties) {
    this.properties = properties || {};
    this.geometries = [];
};

Arc.prototype.json = function () {
    if (this.geometries.length <= 0) {
        return {'geometry': {'type': 'LineString', 'coordinates': null},
                'type': 'Feature', 'properties': this.properties
               };
    } else if (this.geometries.length === 1) {
        return {'geometry': {'type': 'LineString', 'coordinates': this.geometries[0].coords},
                'type': 'Feature', 'properties': this.properties
               };
    } else {
        var multiline = [];
        for (var i = 0; i < this.geometries.length; i++) {
            multiline.push(this.geometries[i].coords);
        }
        return {'geometry': {'type': 'MultiLineString', 'coordinates': multiline},
                'type': 'Feature', 'properties': this.properties
               };
    }
};

// TODO - output proper multilinestring
Arc.prototype.wkt = function () {
    var wkt_string = '';
    var wkt = 'LINESTRING(';
    var collect = function (c) { wkt += c[0] + ' ' + c[1] + ','; };
    for (var i = 0; i < this.geometries.length; i++) {
        if (this.geometries[i].coords.length === 0) {
            return 'LINESTRING(empty)';
        } else {
            var coords = this.geometries[i].coords;
            coords.forEach(collect);
            wkt_string += wkt.substring(0, wkt.length - 1) + ')';
        }
    }
    return wkt_string;
};

/*
 * http://en.wikipedia.org/wiki/Great-circle_distance
 *
 */
var GreatCircle = function (start, end, properties) {
    if (!start || start.x === undefined || start.y === undefined) {
        throw new Error('GreatCircle constructor expects two args: start and end objects with x and y properties');
    }
    if (!end || end.x === undefined || end.y === undefined) {
        throw new Error('GreatCircle constructor expects two args: start and end objects with x and y properties');
    }
    this.start = new Coord(start.x, start.y);
    this.end = new Coord(end.x, end.y);
    this.properties = properties || {};

    var w = this.start.x - this.end.x;
    var h = this.start.y - this.end.y;
    var z = Math.pow(Math.sin(h / 2.0), 2) +
                Math.cos(this.start.y) *
                   Math.cos(this.end.y) *
                     Math.pow(Math.sin(w / 2.0), 2);
    this.g = 2.0 * Math.asin(Math.sqrt(z));

    if (this.g === Math.PI) {
        throw new Error('it appears ' + start.view() + ' and ' + end.view() + ' are \'antipodal\', e.g diametrically opposite, thus there is no single route but rather infinite');
    } else if (isNaN(this.g)) {
        throw new Error('could not calculate great circle between ' + start + ' and ' + end);
    }
};

/*
 * http://williams.best.vwh.net/avform.htm#Intermediate
 */
GreatCircle.prototype.interpolate = function (f) {
    var A = Math.sin((1 - f) * this.g) / Math.sin(this.g);
    var B = Math.sin(f * this.g) / Math.sin(this.g);
    var x = A * Math.cos(this.start.y) * Math.cos(this.start.x) + B * Math.cos(this.end.y) * Math.cos(this.end.x);
    var y = A * Math.cos(this.start.y) * Math.sin(this.start.x) + B * Math.cos(this.end.y) * Math.sin(this.end.x);
    var z = A * Math.sin(this.start.y) + B * Math.sin(this.end.y);
    var lat = R2D * Math.atan2(z, Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)));
    var lon = R2D * Math.atan2(y, x);
    return [lon, lat];
};



/*
 * Generate points along the great circle
 */
GreatCircle.prototype.Arc = function (npoints, options) {
    var first_pass = [];
    if (!npoints || npoints <= 2) {
        first_pass.push([this.start.lon, this.start.lat]);
        first_pass.push([this.end.lon, this.end.lat]);
    } else {
        var delta = 1.0 / (npoints - 1);
        for (var i = 0; i < npoints; ++i) {
            var step = delta * i;
            var pair = this.interpolate(step);
            first_pass.push(pair);
        }
    }
    /* partial port of dateline handling from:
      gdal/ogr/ogrgeometryfactory.cpp

      TODO - does not handle all wrapping scenarios yet
    */
    var bHasBigDiff = false;
    var dfMaxSmallDiffLong = 0;
    // from http://www.gdal.org/ogr2ogr.html
    // -datelineoffset:
    // (starting with GDAL 1.10) offset from dateline in degrees (default long. = +/- 10deg, geometries within 170deg to -170deg will be splited)
    var dfDateLineOffset = options && options.offset ? options.offset : 10;
    var dfLeftBorderX = 180 - dfDateLineOffset;
    var dfRightBorderX = -180 + dfDateLineOffset;
    var dfDiffSpace = 360 - dfDateLineOffset;

    // https://github.com/OSGeo/gdal/blob/7bfb9c452a59aac958bff0c8386b891edf8154ca/gdal/ogr/ogrgeometryfactory.cpp#L2342
    for (var j = 1; j < first_pass.length; ++j) {
        var dfPrevX = first_pass[j - 1][0];
        var dfX = first_pass[j][0];
        var dfDiffLong = Math.abs(dfX - dfPrevX);
        if (dfDiffLong > dfDiffSpace &&
            ((dfX > dfLeftBorderX && dfPrevX < dfRightBorderX) || (dfPrevX > dfLeftBorderX && dfX < dfRightBorderX))) {
            bHasBigDiff = true;
        } else if (dfDiffLong > dfMaxSmallDiffLong) {
            dfMaxSmallDiffLong = dfDiffLong;
        }
    }

    var poMulti = [];
    if (bHasBigDiff && dfMaxSmallDiffLong < dfDateLineOffset) {
        var poNewLS = [];
        poMulti.push(poNewLS);
        for (var k = 0; k < first_pass.length; ++k) {
            var dfX0 = parseFloat(first_pass[k][0]);
            if (k > 0 &&  Math.abs(dfX0 - first_pass[k - 1][0]) > dfDiffSpace) {
                var dfX1 = parseFloat(first_pass[k - 1][0]);
                var dfY1 = parseFloat(first_pass[k - 1][1]);
                var dfX2 = parseFloat(first_pass[k][0]);
                var dfY2 = parseFloat(first_pass[k][1]);
                if (dfX1 > -180 && dfX1 < dfRightBorderX && dfX2 === 180 &&
                    k + 1 < first_pass.length &&
                   first_pass[k - 1][0] > -180 && first_pass[k - 1][0] < dfRightBorderX) {
                    poNewLS.push([-180, first_pass[k][1]]);
                    k++;
                    poNewLS.push([first_pass[k][0], first_pass[k][1]]);
                    continue;
                } else if (dfX1 > dfLeftBorderX && dfX1 < 180 && dfX2 === -180 &&
                     k + 1 < first_pass.length &&
                     first_pass[k - 1][0] > dfLeftBorderX && first_pass[k - 1][0] < 180) {
                    poNewLS.push([180, first_pass[k][1]]);
                    k++;
                    poNewLS.push([first_pass[k][0], first_pass[k][1]]);
                    continue;
                }

                if (dfX1 < dfRightBorderX && dfX2 > dfLeftBorderX) {
                    // swap dfX1, dfX2
                    var tmpX = dfX1;
                    dfX1 = dfX2;
                    dfX2 = tmpX;
                    // swap dfY1, dfY2
                    var tmpY = dfY1;
                    dfY1 = dfY2;
                    dfY2 = tmpY;
                }
                if (dfX1 > dfLeftBorderX && dfX2 < dfRightBorderX) {
                    dfX2 += 360;
                }
                if (dfX1 <= 180 && dfX2 >= 180 && dfX1 < dfX2) {
                    var dfRatio = (180 - dfX1) / (dfX2 - dfX1);
                    var dfY = dfRatio * dfY2 + (1 - dfRatio) * dfY1;
                    poNewLS.push([first_pass[k - 1][0] > dfLeftBorderX ? 180 : -180, dfY]);
                    poNewLS = [];
                    poNewLS.push([first_pass[k - 1][0] > dfLeftBorderX ? -180 : 180, dfY]);
                    poMulti.push(poNewLS);
                } else {
                    poNewLS = [];
                    poMulti.push(poNewLS);
                }
                poNewLS.push([dfX0, first_pass[k][1]]);
            } else {
                poNewLS.push([first_pass[k][0], first_pass[k][1]]);
            }
        }
    } else {
        // add normally
        var poNewLS0 = [];
        poMulti.push(poNewLS0);
        for (var l = 0; l < first_pass.length; ++l) {
            poNewLS0.push([first_pass[l][0], first_pass[l][1]]);
        }
    }

    var arc = new Arc(this.properties);
    for (var m = 0; m < poMulti.length; ++m) {
        var line = new LineString();
        arc.geometries.push(line);
        var points = poMulti[m];
        for (var j0 = 0; j0 < points.length; ++j0) {
            line.move_to(points[j0]);
        }
    }
    return arc;
};

module.exports = {
    Coord: Coord,
    Arc: Arc,
    GreatCircle: GreatCircle
};


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var rbush = __webpack_require__(54);
var helpers = __webpack_require__(13);
var flatten = __webpack_require__(55);
var truncate = __webpack_require__(100);
var invariant = __webpack_require__(14);
var lineSegment = __webpack_require__(37);
var pointOnLine = __webpack_require__(53);
var lineIntersect = __webpack_require__(30);
var getCoords = invariant.getCoords;
var lineString = helpers.lineString;
var getGeomType = invariant.getGeomType;
var featureEach = meta.featureEach;
var featureReduce = meta.featureReduce;
var featureCollection = helpers.featureCollection;

/**
 * Split a LineString by another GeoJSON Feature.
 *
 * @name lineSplit
 * @param {Feature<LineString>} line LineString Feature to split
 * @param {Feature} splitter Feature used to split line
 * @returns {FeatureCollection<LineString>} Split LineStrings
 * @example
 * var line = turf.lineString([[120, -25], [145, -25]]);
 * var splitter = turf.lineString([[130, -15], [130, -35]]);
 *
 * var split = turf.lineSplit(line, splitter);
 *
 * //addToMap
 * var addToMap = [line, splitter]
 */
module.exports = function (line, splitter) {
    if (!line) throw new Error('line is required');
    if (!splitter) throw new Error('splitter is required');

    var lineType = getGeomType(line);
    var splitterType = getGeomType(splitter);

    if (lineType !== 'LineString') throw new Error('line must be LineString');
    if (splitterType === 'FeatureCollection') throw new Error('splitter cannot be a FeatureCollection');
    if (splitterType === 'GeometryCollection') throw new Error('splitter cannot be a GeometryCollection');

    // remove excessive decimals from splitter
    // to avoid possible approximation issues in rbush
    var truncatedSplitter = truncate(splitter, 7);

    switch (splitterType) {
    case 'Point':
        return splitLineWithPoint(line, truncatedSplitter);
    case 'MultiPoint':
        return splitLineWithPoints(line, flatten(truncatedSplitter));
    case 'LineString':
    case 'MultiLineString':
    case 'Polygon':
    case 'MultiPolygon':
        return splitLineWithPoints(line, lineIntersect(line, truncatedSplitter));
    }
};

/**
 * Split LineString with MultiPoint
 *
 * @private
 * @param {Feature<LineString>} line LineString
 * @param {FeatureCollection<Point>} splitter Point
 * @returns {FeatureCollection<LineString>} split LineStrings
 */
function splitLineWithPoints(line, splitter) {
    var results = [];
    var tree = rbush();

    featureEach(splitter, function (point) {
        // Add index/id to features (needed for filter)
        results.forEach(function (feature, index) {
            feature.id = index;
        });
        // First Point - doesn't need to handle any previous line results
        if (!results.length) {
            results = splitLineWithPoint(line, point).features;
            tree.load(featureCollection(results));
        // Split with remaining points - lines might needed to be split multiple times
        } else {
            // Find all lines that are within the splitter's bbox
            var search = tree.search(point);

            // RBush might return multiple lines - only process the closest line to splitter
            var closestLine = findClosestFeature(point, search);

            // Remove closest line from results since this will be split into two lines
            // This removes any duplicates inside the results & index
            results = results.filter(function (feature) { return feature.id !== closestLine.id; });
            tree.remove(closestLine);

            // Append the two newly split lines into the results
            featureEach(splitLineWithPoint(closestLine, point), function (line) {
                results.push(line);
                tree.insert(line);
            });
        }
    });
    return featureCollection(results);
}

/**
 * Split LineString with Point
 *
 * @private
 * @param {Feature<LineString>} line LineString
 * @param {Feature<Point>} splitter Point
 * @returns {FeatureCollection<LineString>} split LineStrings
 */
function splitLineWithPoint(line, splitter) {
    var results = [];

    // handle endpoints
    var startPoint = getCoords(line)[0];
    var endPoint = getCoords(line)[line.geometry.coordinates.length - 1];
    if (pointsEquals(startPoint, getCoords(splitter)) ||
        pointsEquals(endPoint, getCoords(splitter))) return featureCollection([line]);

    // Create spatial index
    var tree = rbush();
    var segments = lineSegment(line);
    tree.load(segments);

    // Find all segments that are within bbox of splitter
    var search = tree.search(splitter);

    // Return itself if point is not within spatial index
    if (!search.features.length) return featureCollection([line]);

    // RBush might return multiple lines - only process the closest line to splitter
    var closestSegment = findClosestFeature(splitter, search);

    // Initial value is the first point of the first segments (beginning of line)
    var initialValue = [startPoint];
    var lastCoords = featureReduce(segments, function (previous, current, index) {
        var currentCoords = getCoords(current)[1];
        var splitterCoords = getCoords(splitter);

        // Location where segment intersects with line
        if (index === closestSegment.id) {
            previous.push(splitterCoords);
            results.push(lineString(previous));
            // Don't duplicate splitter coordinate (Issue #688)
            if (pointsEquals(splitterCoords, currentCoords)) return [splitterCoords];
            return [splitterCoords, currentCoords];

        // Keep iterating over coords until finished or intersection is found
        } else {
            previous.push(currentCoords);
            return previous;
        }
    }, initialValue);
    // Append last line to final split results
    if (lastCoords.length > 1) {
        results.push(lineString(lastCoords));
    }
    return featureCollection(results);
}


/**
 * Find Closest Feature
 *
 * @private
 * @param {Feature<Point>} point Feature must be closest to this point
 * @param {FeatureCollection<LineString>} lines Collection of Features
 * @returns {Feature<LineString>} closest LineString
 */
function findClosestFeature(point, lines) {
    if (!lines.features) throw new Error('<lines> must contain features');
    // Filter to one segment that is the closest to the line
    if (lines.features.length === 1) return lines.features[0];

    var closestFeature;
    var closestDistance = Infinity;
    featureEach(lines, function (segment) {
        var pt = pointOnLine(segment, point);
        var dist = pt.properties.dist;
        if (dist < closestDistance) {
            closestFeature = segment;
            closestDistance = dist;
        }
    });
    return closestFeature;
}

/**
 * Compares two points and returns if they are equals
 *
 * @private
 * @param {Array<number>} pt1 point
 * @param {Array<number>} pt2 point
 * @returns {boolean} true if they are equals
 */
function pointsEquals(pt1, pt2) {
    return pt1[0] === pt2[0] && pt1[1] === pt2[1];
}


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var bbox = __webpack_require__(10);
var getCoords = __webpack_require__(14).getCoords;
var helpers = __webpack_require__(13);
var polygon = helpers.polygon;
var multiPolygon = helpers.multiPolygon;
var lineString = helpers.lineString;

/**
 * Converts (Multi)LineString(s) to Polygon(s).
 *
 * @name lineStringToPolygon
 * @param {FeatureCollection|Feature<LineString|MultiLineString>} lines Features to convert
 * @param {Object} [properties] translates GeoJSON properties to Feature
 * @param {boolean} [autoComplete=true] auto complete linestrings (matches first & last coordinates)
 * @param {boolean} [orderCoords=true] sorts linestrings to place outer ring at the first position of the coordinates
 * @returns {Feature<Polygon|MultiPolygon>} converted to Polygons
 * @example
 * var line = turf.lineString([[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]);
 *
 * var polygon = turf.lineStringToPolygon(line);
 *
 * //addToMap
 * var addToMap = [polygon];
 */
module.exports = function (lines, properties, autoComplete, orderCoords) {
    // validation
    if (!lines) throw new Error('lines is required');

    // default params
    autoComplete = (autoComplete !== undefined) ? autoComplete : true;
    orderCoords = (orderCoords !== undefined) ? orderCoords : true;
    var type = geomType(lines);

    switch (type) {
    case 'FeatureCollection':
    case 'GeometryCollection':
        var coords = [];
        var features = (lines.features) ? lines.features : lines.geometries;
        features.forEach(function (line) {
            coords.push(getCoords(lineStringToPolygon(line, {}, autoComplete, orderCoords)));
        });
        return multiPolygon(coords, properties);
    }
    return lineStringToPolygon(lines, properties, autoComplete, orderCoords);
};

/**
 * LineString to Polygon
 *
 * @private
 * @param {Feature<LineString|MultiLineString>} line line
 * @param {Object} [properties] translates GeoJSON properties to Feature
 * @param {boolean} [autoComplete=true] auto complete linestrings
 * @param {boolean} [orderCoords=true] sorts linestrings to place outer ring at the first position of the coordinates
 * @returns {Feature<Polygon>} line converted to Polygon
 */
function lineStringToPolygon(line, properties, autoComplete, orderCoords) {
    properties = properties || line.properties || {};
    var coords = getCoords(line);
    var type = geomType(line);

    if (!coords.length) throw new Error('line must contain coordinates');

    switch (type) {
    case 'LineString':
        if (autoComplete) coords = autoCompleteCoords(coords);
        return polygon([coords], properties);
    case 'MultiLineString':
        var multiCoords = [];
        var largestArea = 0;

        coords.forEach(function (coord) {
            if (autoComplete) coord = autoCompleteCoords(coord);

            // Largest LineString to be placed in the first position of the coordinates array
            if (orderCoords) {
                var area = calculateArea(bbox(lineString(coord)));
                if (area > largestArea) {
                    multiCoords.unshift(coord);
                    largestArea = area;
                } else multiCoords.push(coord);
            } else {
                multiCoords.push(coord);
            }
        });
        return polygon(multiCoords, properties);
    default:
        throw new Error('geometry type ' + type + ' is not supported');
    }
}

function geomType(feature) {
    return (feature.geometry) ? feature.geometry.type : feature.type;
}

/**
 * Auto Complete Coords - matches first & last coordinates
 *
 * @private
 * @param {Array<Array<number>>} coords Coordinates
 * @returns {Array<Array<number>>} auto completed coordinates
 */
function autoCompleteCoords(coords) {
    var first = coords[0];
    var x1 = first[0];
    var y1 = first[1];
    var last = coords[coords.length - 1];
    var x2 = last[0];
    var y2 = last[1];
    if (x1 !== x2 || y1 !== y2) {
        coords.push(first);
    }
    return coords;
}

/**
 * area - quick approximate area calculation (used to sort)
 *
 * @private
 * @param {[number, number, number, number]} bbox BBox [west, south, east, north]
 * @returns {number} very quick area calculation
 */
function calculateArea(bbox) {
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];
    return Math.abs(west - east) * Math.abs(south - north);
}


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

var helpers = __webpack_require__(13);
var lineclip = __webpack_require__(223);
var getCoords = __webpack_require__(14).getCoords;
var lineString = helpers.lineString;
var multiLineString = helpers.multiLineString;
var polygon = helpers.polygon;
var multiPolygon = helpers.multiPolygon;

/**
 * Takes a {@link Feature} and a bbox and clips the feature to the bbox using [lineclip](https://github.com/mapbox/lineclip).
 * May result in degenerate edges when clipping Polygons.
 *
 * @name bboxClip
 * @param {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature feature to clip to the bbox
 * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @returns {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} clipped Feature
 * @example
 * var bbox = [0, 0, 10, 10];
 * var poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);
 *
 * var clipped = turf.bboxClip(poly, bbox);
 *
 * //addToMap
 * var addToMap = [bbox, poly, clipped]
 */
module.exports = function (feature, bbox) {
    var geom = getGeom(feature);
    var coords = getCoords(feature);
    var properties = feature.properties;

    switch (geom) {
    case 'LineString':
    case 'MultiLineString':
        var lines = [];
        if (geom === 'LineString') coords = [coords];
        coords.forEach(function (line) {
            lineclip(line, bbox, lines);
        });
        if (lines.length === 1) return lineString(lines[0], properties);
        return multiLineString(lines, properties);
    case 'Polygon':
        return polygon(clipPolygon(coords, bbox), properties);
    case 'MultiPolygon':
        return multiPolygon(coords.map(function (polygon) {
            return clipPolygon(polygon, bbox);
        }), properties);
    default:
        throw new Error('geometry ' + geom + ' not supported');
    }
};

function clipPolygon(rings, bbox) {
    var outRings = [];
    for (var i = 0; i < rings.length; i++) {
        var clipped = lineclip.polygon(rings[i], bbox);
        if (clipped.length > 0) {
            if (clipped[0][0] !== clipped[clipped.length - 1][0] || clipped[0][1] !== clipped[clipped.length - 1][1]) {
                clipped.push(clipped[0]);
            }
            outRings.push(clipped);
        }
    }
    return outRings;
}

function getGeom(feature) {
    return (feature.geometry) ? feature.geometry.type : feature.type;
}


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = lineclip;

lineclip.polyline = lineclip;
lineclip.polygon = polygonclip;


// Cohen-Sutherland line clippign algorithm, adapted to efficiently
// handle polylines rather than just segments

function lineclip(points, bbox, result) {

    var len = points.length,
        codeA = bitCode(points[0], bbox),
        part = [],
        i, a, b, codeB, lastCode;

    if (!result) result = [];

    for (i = 1; i < len; i++) {
        a = points[i - 1];
        b = points[i];
        codeB = lastCode = bitCode(b, bbox);

        while (true) {

            if (!(codeA | codeB)) { // accept
                part.push(a);

                if (codeB !== lastCode) { // segment went outside
                    part.push(b);

                    if (i < len - 1) { // start a new line
                        result.push(part);
                        part = [];
                    }
                } else if (i === len - 1) {
                    part.push(b);
                }
                break;

            } else if (codeA & codeB) { // trivial reject
                break;

            } else if (codeA) { // a outside, intersect with clip edge
                a = intersect(a, b, codeA, bbox);
                codeA = bitCode(a, bbox);

            } else { // b outside
                b = intersect(a, b, codeB, bbox);
                codeB = bitCode(b, bbox);
            }
        }

        codeA = lastCode;
    }

    if (part.length) result.push(part);

    return result;
}

// Sutherland-Hodgeman polygon clipping algorithm

function polygonclip(points, bbox) {

    var result, edge, prev, prevInside, i, p, inside;

    // clip against each side of the clip rectangle
    for (edge = 1; edge <= 8; edge *= 2) {
        result = [];
        prev = points[points.length - 1];
        prevInside = !(bitCode(prev, bbox) & edge);

        for (i = 0; i < points.length; i++) {
            p = points[i];
            inside = !(bitCode(p, bbox) & edge);

            // if segment goes through the clip window, add an intersection
            if (inside !== prevInside) result.push(intersect(prev, p, edge, bbox));

            if (inside) result.push(p); // add a point if it's inside

            prev = p;
            prevInside = inside;
        }

        points = result;

        if (!points.length) break;
    }

    return result;
}

// intersect a segment against one of the 4 lines that make up the bbox

function intersect(a, b, edge, bbox) {
    return edge & 8 ? [a[0] + (b[0] - a[0]) * (bbox[3] - a[1]) / (b[1] - a[1]), bbox[3]] : // top
           edge & 4 ? [a[0] + (b[0] - a[0]) * (bbox[1] - a[1]) / (b[1] - a[1]), bbox[1]] : // bottom
           edge & 2 ? [bbox[2], a[1] + (b[1] - a[1]) * (bbox[2] - a[0]) / (b[0] - a[0])] : // right
           edge & 1 ? [bbox[0], a[1] + (b[1] - a[1]) * (bbox[0] - a[0]) / (b[0] - a[0])] : // left
           null;
}

// bit code reflects the point position relative to the bbox:

//         left  mid  right
//    top  1001  1000  1010
//    mid  0001  0000  0010
// bottom  0101  0100  0110

function bitCode(p, bbox) {
    var code = 0;

    if (p[0] < bbox[0]) code |= 1; // left
    else if (p[0] > bbox[2]) code |= 2; // right

    if (p[1] < bbox[1]) code |= 4; // bottom
    else if (p[1] > bbox[3]) code |= 8; // top

    return code;
}


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var lineSegment = __webpack_require__(37);
var getCoords = __webpack_require__(14).getCoords;
var rbush = __webpack_require__(54);
var equal = __webpack_require__(103);
var featureCollection = __webpack_require__(13).featureCollection;
var featureEach = __webpack_require__(1).featureEach;

/**
 * Takes any LineString or Polygon and returns the overlapping lines between both features.
 *
 * @name lineOverlap
 * @param {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line1 any LineString or Polygon
 * @param {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line2 any LineString or Polygon
 * @returns {FeatureCollection<LineString>} lines(s) that are overlapping between both features
 * @example
 * var line1 = turf.lineString([[115, -35], [125, -30], [135, -30], [145, -35]]);
 * var line2 = turf.lineString([[115, -25], [125, -30], [135, -30], [145, -25]]);
 *
 * var overlapping = turf.lineOverlap(line1, line2);
 *
 * //addToMap
 * var addToMap = [line1, line2, overlapping]
 */
module.exports = function (line1, line2) {
    var results = [];

    // Create Spatial Index
    var tree = rbush();
    tree.load(lineSegment(line1));
    var overlaps;

    // Iterate over line segments
    featureEach(lineSegment(line2), function (segment) {
        var doesOverlaps = false;
        featureEach(tree.search(segment), function (match) {
            if (doesOverlaps === false) {
                var coords1 = getCoords(segment).sort();
                var coords2 = getCoords(match).sort();

                // Segment overlaps feature
                if (equal(coords1, coords2)) {
                    doesOverlaps = true;
                    // Overlaps already exists - only append last coordinate of segment
                    if (overlaps) overlaps = concatSegment(overlaps, segment);
                    else overlaps = segment;
                }
            }
        });
        // Segment doesn't overlap - add overlaps to results & reset
        if (doesOverlaps === false && overlaps) {
            results.push(overlaps);
            overlaps = undefined;
        }
    });
    // Add last segment if exists
    if (overlaps) results.push(overlaps);

    return featureCollection(results);
};


/**
 * Concat Segment
 *
 * @private
 * @param {Feature<LineString>} line LineString
 * @param {Feature<LineString>} segment 2-vertex LineString
 * @returns {Feature<LineString>} concat linestring
 */
function concatSegment(line, segment) {
    var coords = getCoords(segment);
    var lineCoords = getCoords(line);
    var start = lineCoords[0];
    var end = lineCoords[lineCoords.length - 1];

    if (equal(coords[0], start)) {
        line.geometry.coordinates.unshift(coords[1]);
    } else if (equal(coords[0], end)) {
        line.geometry.coordinates.push(coords[1]);
    } else if (equal(coords[1], start)) {
        line.geometry.coordinates.unshift(coords[0]);
    } else if (equal(coords[1], end)) {
        line.geometry.coordinates.push(coords[0]);
    }
    return line;
}


/***/ }),
/* 225 */
/***/ (function(module, exports) {

exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}


/***/ }),
/* 226 */
/***/ (function(module, exports) {

var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

var circle = __webpack_require__(43);
var coordEach = __webpack_require__(1).coordEach;
var helpers = __webpack_require__(13);
var getCoords = __webpack_require__(14).getCoords;
var polygon = helpers.polygon;
var lineArc = __webpack_require__(102);

/**
 * Creates a circular sector of a circle of given radius and center {@link Point},
 * between (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.
 *
 * @name sector
 * @param {Feature<Point>} center center point
 * @param {number} radius radius of the circle
 * @param {number} bearing1 angle, in decimal degrees, of the first radius of the sector
 * @param {number} bearing2 angle, in decimal degrees, of the second radius of the sector
 * @param {number} [steps=64] number of steps
 * @param {string} [units=kilometers] miles, kilometers, degrees, or radians
 * @returns {Feature<Polygon>} sector polygon
 * @example
 * var center = turf.point([-75, 40]);
 * var radius = 5;
 * var bearing1 = 25;
 * var bearing2 = 45;
 *
 * var sector = turf.sector(center, radius, bearing1, bearing2);
 *
 * //addToMap
 * var addToMap = [center, sector];
 */
module.exports = function (center, radius, bearing1, bearing2, steps, units) {
    // validation
    if (!center) throw new Error('center is required');
    if (bearing1 === undefined || bearing1 === null) throw new Error('bearing1 is required');
    if (bearing2 === undefined || bearing2 === null) throw new Error('bearing2 is required');
    if (!radius) throw new Error('radius is required');

    // default params
    steps = steps || 64;

    if (convertAngleTo360(bearing1) === convertAngleTo360(bearing2)) {
        return circle(center, radius, steps, units);
    }
    var coords = getCoords(center);
    var arc = lineArc(center, radius, bearing1, bearing2, steps, units);
    var sliceCoords = [[coords]];
    coordEach(arc, function (currentCoords) {
        sliceCoords[0].push(currentCoords);
    });
    sliceCoords[0].push(coords);

    return polygon(sliceCoords);
};

/**
 * Takes any angle in degrees
 * and returns a valid angle between 0-360 degrees
 *
 * @private
 * @param {number} alfa angle between -180-180 degrees
 * @returns {number} angle between 0-360 degrees
 */
function convertAngleTo360(alfa) {
    var beta = alfa % 360;
    if (beta < 0) {
        beta += 360;
    }
    return beta;
}


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* Latitude/longitude spherical geodesy tools                         (c) Chris Veness 2002-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong.html                                                    */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-spherical.html                       */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


if (typeof module!='undefined' && module.exports) var Dms = __webpack_require__(38); // ≡ import Dms from 'dms.js'


/**
 * Library of geodesy functions for operations on a spherical earth model.
 *
 * @module   latlon-spherical
 * @requires dms
 */


/**
 * Creates a LatLon point on the earth's surface at the specified latitude / longitude.
 *
 * @constructor
 * @param {number} lat - Latitude in degrees.
 * @param {number} lon - Longitude in degrees.
 *
 * @example
 *     var p1 = new LatLon(52.205, 0.119);
 */
function LatLon(lat, lon) {
    // allow instantiation without 'new'
    if (!(this instanceof LatLon)) return new LatLon(lat, lon);

    this.lat = Number(lat);
    this.lon = Number(lon);
}


/**
 * Returns the distance from ‘this’ point to destination point (using haversine formula).
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {number} Distance between this point and destination point, in same units as radius.
 *
 * @example
 *     var p1 = new LatLon(52.205, 0.119);
 *     var p2 = new LatLon(48.857, 2.351);
 *     var d = p1.distanceTo(p2); // 404.3 km
 */
LatLon.prototype.distanceTo = function(point, radius) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');
    radius = (radius === undefined) ? 6371e3 : Number(radius);

    var R = radius;
    var φ1 = this.lat.toRadians(),  λ1 = this.lon.toRadians();
    var φ2 = point.lat.toRadians(), λ2 = point.lon.toRadians();
    var Δφ = φ2 - φ1;
    var Δλ = λ2 - λ1;

    var a = Math.sin(Δφ/2) * Math.sin(Δφ/2)
          + Math.cos(φ1) * Math.cos(φ2)
          * Math.sin(Δλ/2) * Math.sin(Δλ/2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    var d = R * c;

    return d;
};


/**
 * Returns the (initial) bearing from ‘this’ point to destination point.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {number} Initial bearing in degrees from north.
 *
 * @example
 *     var p1 = new LatLon(52.205, 0.119);
 *     var p2 = new LatLon(48.857, 2.351);
 *     var b1 = p1.bearingTo(p2); // 156.2°
 */
LatLon.prototype.bearingTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    var φ1 = this.lat.toRadians(), φ2 = point.lat.toRadians();
    var Δλ = (point.lon-this.lon).toRadians();

    // see http://mathforum.org/library/drmath/view/55417.html
    var y = Math.sin(Δλ) * Math.cos(φ2);
    var x = Math.cos(φ1)*Math.sin(φ2) -
            Math.sin(φ1)*Math.cos(φ2)*Math.cos(Δλ);
    var θ = Math.atan2(y, x);

    return (θ.toDegrees()+360) % 360;
};


/**
 * Returns final bearing arriving at destination destination point from ‘this’ point; the final bearing
 * will differ from the initial bearing by varying degrees according to distance and latitude.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {number} Final bearing in degrees from north.
 *
 * @example
 *     var p1 = new LatLon(52.205, 0.119);
 *     var p2 = new LatLon(48.857, 2.351);
 *     var b2 = p1.finalBearingTo(p2); // 157.9°
 */
LatLon.prototype.finalBearingTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    // get initial bearing from destination point to this point & reverse it by adding 180°
    return ( point.bearingTo(this)+180 ) % 360;
};


/**
 * Returns the midpoint between ‘this’ point and the supplied point.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {LatLon} Midpoint between this point and the supplied point.
 *
 * @example
 *     var p1 = new LatLon(52.205, 0.119);
 *     var p2 = new LatLon(48.857, 2.351);
 *     var pMid = p1.midpointTo(p2); // 50.5363°N, 001.2746°E
 */
LatLon.prototype.midpointTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    // φm = atan2( sinφ1 + sinφ2, √( (cosφ1 + cosφ2⋅cosΔλ) ⋅ (cosφ1 + cosφ2⋅cosΔλ) ) + cos²φ2⋅sin²Δλ )
    // λm = λ1 + atan2(cosφ2⋅sinΔλ, cosφ1 + cosφ2⋅cosΔλ)
    // see http://mathforum.org/library/drmath/view/51822.html for derivation

    var φ1 = this.lat.toRadians(), λ1 = this.lon.toRadians();
    var φ2 = point.lat.toRadians();
    var Δλ = (point.lon-this.lon).toRadians();

    var Bx = Math.cos(φ2) * Math.cos(Δλ);
    var By = Math.cos(φ2) * Math.sin(Δλ);

    var x = Math.sqrt((Math.cos(φ1) + Bx) * (Math.cos(φ1) + Bx) + By * By);
    var y = Math.sin(φ1) + Math.sin(φ2);
    var φ3 = Math.atan2(y, x);

    var λ3 = λ1 + Math.atan2(By, Math.cos(φ1) + Bx);

    return new LatLon(φ3.toDegrees(), (λ3.toDegrees()+540)%360-180); // normalise to −180..+180°
};


/**
 * Returns the point at given fraction between ‘this’ point and specified point.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @param   {number} fraction - Fraction between the two points (0 = this point, 1 = specified point).
 * @returns {LatLon} Intermediate point between this point and destination point.
 *
 * @example
 *   let p1 = new LatLon(52.205, 0.119);
 *   let p2 = new LatLon(48.857, 2.351);
 *   let pMid = p1.intermediatePointTo(p2, 0.25); // 51.3721°N, 000.7073°E
 */
LatLon.prototype.intermediatePointTo = function(point, fraction) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    var φ1 = this.lat.toRadians(), λ1 = this.lon.toRadians();
    var φ2 = point.lat.toRadians(), λ2 = point.lon.toRadians();
    var sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), sinλ1 = Math.sin(λ1), cosλ1 = Math.cos(λ1);
    var sinφ2 = Math.sin(φ2), cosφ2 = Math.cos(φ2), sinλ2 = Math.sin(λ2), cosλ2 = Math.cos(λ2);

    // distance between points
    var Δφ = φ2 - φ1;
    var Δλ = λ2 - λ1;
    var a = Math.sin(Δφ/2) * Math.sin(Δφ/2)
        + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ/2) * Math.sin(Δλ/2);
    var δ = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    var A = Math.sin((1-fraction)*δ) / Math.sin(δ);
    var B = Math.sin(fraction*δ) / Math.sin(δ);

    var x = A * cosφ1 * cosλ1 + B * cosφ2 * cosλ2;
    var y = A * cosφ1 * sinλ1 + B * cosφ2 * sinλ2;
    var z = A * sinφ1 + B * sinφ2;

    var φ3 = Math.atan2(z, Math.sqrt(x*x + y*y));
    var λ3 = Math.atan2(y, x);

    return new LatLon(φ3.toDegrees(), (λ3.toDegrees()+540)%360-180); // normalise lon to −180..+180°
};


/**
 * Returns the destination point from ‘this’ point having travelled the given distance on the
 * given initial bearing (bearing normally varies around path followed).
 *
 * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).
 * @param   {number} bearing - Initial bearing in degrees from north.
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {LatLon} Destination point.
 *
 * @example
 *     var p1 = new LatLon(51.4778, -0.0015);
 *     var p2 = p1.destinationPoint(7794, 300.7); // 51.5135°N, 000.0983°W
 */
LatLon.prototype.destinationPoint = function(distance, bearing, radius) {
    radius = (radius === undefined) ? 6371e3 : Number(radius);

    // sinφ2 = sinφ1⋅cosδ + cosφ1⋅sinδ⋅cosθ
    // tanΔλ = sinθ⋅sinδ⋅cosφ1 / cosδ−sinφ1⋅sinφ2
    // see http://williams.best.vwh.net/avform.htm#LL

    var δ = Number(distance) / radius; // angular distance in radians
    var θ = Number(bearing).toRadians();

    var φ1 = this.lat.toRadians();
    var λ1 = this.lon.toRadians();

    var sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1);
    var sinδ = Math.sin(δ), cosδ = Math.cos(δ);
    var sinθ = Math.sin(θ), cosθ = Math.cos(θ);

    var sinφ2 = sinφ1*cosδ + cosφ1*sinδ*cosθ;
    var φ2 = Math.asin(sinφ2);
    var y = sinθ * sinδ * cosφ1;
    var x = cosδ - sinφ1 * sinφ2;
    var λ2 = λ1 + Math.atan2(y, x);

    return new LatLon(φ2.toDegrees(), (λ2.toDegrees()+540)%360-180); // normalise to −180..+180°
};


/**
 * Returns the point of intersection of two paths defined by point and bearing.
 *
 * @param   {LatLon} p1 - First point.
 * @param   {number} brng1 - Initial bearing from first point.
 * @param   {LatLon} p2 - Second point.
 * @param   {number} brng2 - Initial bearing from second point.
 * @returns {LatLon|null} Destination point (null if no unique intersection defined).
 *
 * @example
 *     var p1 = LatLon(51.8853, 0.2545), brng1 = 108.547;
 *     var p2 = LatLon(49.0034, 2.5735), brng2 =  32.435;
 *     var pInt = LatLon.intersection(p1, brng1, p2, brng2); // 50.9078°N, 004.5084°E
 */
LatLon.intersection = function(p1, brng1, p2, brng2) {
    if (!(p1 instanceof LatLon)) throw new TypeError('p1 is not LatLon object');
    if (!(p2 instanceof LatLon)) throw new TypeError('p2 is not LatLon object');

    // see http://williams.best.vwh.net/avform.htm#Intersection

    var φ1 = p1.lat.toRadians(), λ1 = p1.lon.toRadians();
    var φ2 = p2.lat.toRadians(), λ2 = p2.lon.toRadians();
    var θ13 = Number(brng1).toRadians(), θ23 = Number(brng2).toRadians();
    var Δφ = φ2-φ1, Δλ = λ2-λ1;

    var δ12 = 2*Math.asin( Math.sqrt( Math.sin(Δφ/2)*Math.sin(Δφ/2)
        + Math.cos(φ1)*Math.cos(φ2)*Math.sin(Δλ/2)*Math.sin(Δλ/2) ) );
    if (δ12 == 0) return null;

    // initial/final bearings between points
    var θa = Math.acos( ( Math.sin(φ2) - Math.sin(φ1)*Math.cos(δ12) ) / ( Math.sin(δ12)*Math.cos(φ1) ) );
    if (isNaN(θa)) θa = 0; // protect against rounding
    var θb = Math.acos( ( Math.sin(φ1) - Math.sin(φ2)*Math.cos(δ12) ) / ( Math.sin(δ12)*Math.cos(φ2) ) );

    var θ12 = Math.sin(λ2-λ1)>0 ? θa : 2*Math.PI-θa;
    var θ21 = Math.sin(λ2-λ1)>0 ? 2*Math.PI-θb : θb;

    var α1 = (θ13 - θ12 + Math.PI) % (2*Math.PI) - Math.PI; // angle 2-1-3
    var α2 = (θ21 - θ23 + Math.PI) % (2*Math.PI) - Math.PI; // angle 1-2-3

    if (Math.sin(α1)==0 && Math.sin(α2)==0) return null; // infinite intersections
    if (Math.sin(α1)*Math.sin(α2) < 0) return null;      // ambiguous intersection

    //α1 = Math.abs(α1);
    //α2 = Math.abs(α2);
    // ... Ed Williams takes abs of α1/α2, but seems to break calculation?

    var α3 = Math.acos( -Math.cos(α1)*Math.cos(α2) + Math.sin(α1)*Math.sin(α2)*Math.cos(δ12) );
    var δ13 = Math.atan2( Math.sin(δ12)*Math.sin(α1)*Math.sin(α2), Math.cos(α2)+Math.cos(α1)*Math.cos(α3) );
    var φ3 = Math.asin( Math.sin(φ1)*Math.cos(δ13) + Math.cos(φ1)*Math.sin(δ13)*Math.cos(θ13) );
    var Δλ13 = Math.atan2( Math.sin(θ13)*Math.sin(δ13)*Math.cos(φ1), Math.cos(δ13)-Math.sin(φ1)*Math.sin(φ3) );
    var λ3 = λ1 + Δλ13;

    return new LatLon(φ3.toDegrees(), (λ3.toDegrees()+540)%360-180); // normalise to −180..+180°
};


/**
 * Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point.
 *
 * @param   {LatLon} pathStart - Start point of great circle path.
 * @param   {LatLon} pathEnd - End point of great circle path.
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {number} Distance to great circle (-ve if to left, +ve if to right of path).
 *
 * @example
 *   var pCurrent = new LatLon(53.2611, -0.7972);
 *   var p1 = new LatLon(53.3206, -1.7297);
 *   var p2 = new LatLon(53.1887,  0.1334);
 *   var d = pCurrent.crossTrackDistanceTo(p1, p2);  // -307.5 m
 */
LatLon.prototype.crossTrackDistanceTo = function(pathStart, pathEnd, radius) {
    if (!(pathStart instanceof LatLon)) throw new TypeError('pathStart is not LatLon object');
    if (!(pathEnd instanceof LatLon)) throw new TypeError('pathEnd is not LatLon object');
    radius = (radius === undefined) ? 6371e3 : Number(radius);

    var δ13 = pathStart.distanceTo(this, radius)/radius;
    var θ13 = pathStart.bearingTo(this).toRadians();
    var θ12 = pathStart.bearingTo(pathEnd).toRadians();

    var dxt = Math.asin( Math.sin(δ13) * Math.sin(θ13-θ12) ) * radius;

    return dxt;
};


/**
 * Returns maximum latitude reached when travelling on a great circle on given bearing from this
 * point ('Clairaut's formula'). Negate the result for the minimum latitude (in the Southern
 * hemisphere).
 *
 * The maximum latitude is independent of longitude; it will be the same for all points on a given
 * latitude.
 *
 * @param {number} bearing - Initial bearing.
 * @param {number} latitude - Starting latitude.
 */
LatLon.prototype.maxLatitude = function(bearing) {
    var θ = Number(bearing).toRadians();

    var φ = this.lat.toRadians();

    var φMax = Math.acos(Math.abs(Math.sin(θ)*Math.cos(φ)));

    return φMax.toDegrees();
};


/**
 * Returns the pair of meridians at which a great circle defined by two points crosses the given
 * latitude. If the great circle doesn't reach the given latitude, null is returned.
 *
 * @param {LatLon} point1 - First point defining great circle.
 * @param {LatLon} point2 - Second point defining great circle.
 * @param {number} latitude - Latitude crossings are to be determined for.
 * @returns {Object|null} Object containing { lon1, lon2 } or null if given latitude not reached.
 */
LatLon.crossingParallels = function(point1, point2, latitude) {
    var φ = Number(latitude).toRadians();

    var φ1 = point1.lat.toRadians();
    var λ1 = point1.lon.toRadians();
    var φ2 = point2.lat.toRadians();
    var λ2 = point2.lon.toRadians();

    var Δλ = λ2 - λ1;

    var x = Math.sin(φ1) * Math.cos(φ2) * Math.cos(φ) * Math.sin(Δλ);
    var y = Math.sin(φ1) * Math.cos(φ2) * Math.cos(φ) * Math.cos(Δλ) - Math.cos(φ1) * Math.sin(φ2) * Math.cos(φ);
    var z = Math.cos(φ1) * Math.cos(φ2) * Math.sin(φ) * Math.sin(Δλ);

    if (z*z > x*x + y*y) return null; // great circle doesn't reach latitude

    var λm = Math.atan2(-y, x);                  // longitude at max latitude
    var Δλi = Math.acos(z / Math.sqrt(x*x+y*y)); // Δλ from λm to intersection points

    var λi1 = λ1 + λm - Δλi;
    var λi2 = λ1 + λm + Δλi;

    return { lon1: (λi1.toDegrees()+540)%360-180, lon2: (λi2.toDegrees()+540)%360-180 }; // normalise to −180..+180°
};


/* Rhumb - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/**
 * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {number} Distance in km between this point and destination point (same units as radius).
 *
 * @example
 *     var p1 = new LatLon(51.127, 1.338);
 *     var p2 = new LatLon(50.964, 1.853);
 *     var d = p1.distanceTo(p2); // 40.31 km
 */
LatLon.prototype.rhumbDistanceTo = function(point, radius) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');
    radius = (radius === undefined) ? 6371e3 : Number(radius);

    // see http://williams.best.vwh.net/avform.htm#Rhumb

    var R = radius;
    var φ1 = this.lat.toRadians(), φ2 = point.lat.toRadians();
    var Δφ = φ2 - φ1;
    var Δλ = Math.abs(point.lon-this.lon).toRadians();
    // if dLon over 180° take shorter rhumb line across the anti-meridian:
    if (Math.abs(Δλ) > Math.PI) Δλ = Δλ>0 ? -(2*Math.PI-Δλ) : (2*Math.PI+Δλ);

    // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'
    // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it
    var Δψ = Math.log(Math.tan(φ2/2+Math.PI/4)/Math.tan(φ1/2+Math.PI/4));
    var q = Math.abs(Δψ) > 10e-12 ? Δφ/Δψ : Math.cos(φ1);

    // distance is pythagoras on 'stretched' Mercator projection
    var δ = Math.sqrt(Δφ*Δφ + q*q*Δλ*Δλ); // angular distance in radians
    var dist = δ * R;

    return dist;
};


/**
 * Returns the bearing from ‘this’ point to destination point along a rhumb line.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {number} Bearing in degrees from north.
 *
 * @example
 *     var p1 = new LatLon(51.127, 1.338);
 *     var p2 = new LatLon(50.964, 1.853);
 *     var d = p1.rhumbBearingTo(p2); // 116.7 m
 */
LatLon.prototype.rhumbBearingTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    var φ1 = this.lat.toRadians(), φ2 = point.lat.toRadians();
    var Δλ = (point.lon-this.lon).toRadians();
    // if dLon over 180° take shorter rhumb line across the anti-meridian:
    if (Math.abs(Δλ) > Math.PI) Δλ = Δλ>0 ? -(2*Math.PI-Δλ) : (2*Math.PI+Δλ);

    var Δψ = Math.log(Math.tan(φ2/2+Math.PI/4)/Math.tan(φ1/2+Math.PI/4));

    var θ = Math.atan2(Δλ, Δψ);

    return (θ.toDegrees()+360) % 360;
};


/**
 * Returns the destination point having travelled along a rhumb line from ‘this’ point the given
 * distance on the  given bearing.
 *
 * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).
 * @param   {number} bearing - Bearing in degrees from north.
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {LatLon} Destination point.
 *
 * @example
 *     var p1 = new LatLon(51.127, 1.338);
 *     var p2 = p1.rhumbDestinationPoint(40300, 116.7); // 50.9642°N, 001.8530°E
 */
LatLon.prototype.rhumbDestinationPoint = function(distance, bearing, radius) {
    radius = (radius === undefined) ? 6371e3 : Number(radius);

    var δ = Number(distance) / radius; // angular distance in radians
    var φ1 = this.lat.toRadians(), λ1 = this.lon.toRadians();
    var θ = Number(bearing).toRadians();

    var Δφ = δ * Math.cos(θ);
    var φ2 = φ1 + Δφ;

    // check for some daft bugger going past the pole, normalise latitude if so
    if (Math.abs(φ2) > Math.PI/2) φ2 = φ2>0 ? Math.PI-φ2 : -Math.PI-φ2;

    var Δψ = Math.log(Math.tan(φ2/2+Math.PI/4)/Math.tan(φ1/2+Math.PI/4));
    var q = Math.abs(Δψ) > 10e-12 ? Δφ / Δψ : Math.cos(φ1); // E-W course becomes ill-conditioned with 0/0

    var Δλ = δ*Math.sin(θ)/q;
    var λ2 = λ1 + Δλ;

    return new LatLon(φ2.toDegrees(), (λ2.toDegrees()+540) % 360 - 180); // normalise to −180..+180°
};


/**
 * Returns the loxodromic midpoint (along a rhumb line) between ‘this’ point and second point.
 *
 * @param   {LatLon} point - Latitude/longitude of second point.
 * @returns {LatLon} Midpoint between this point and second point.
 *
 * @example
 *     var p1 = new LatLon(51.127, 1.338);
 *     var p2 = new LatLon(50.964, 1.853);
 *     var pMid = p1.rhumbMidpointTo(p2); // 51.0455°N, 001.5957°E
 */
LatLon.prototype.rhumbMidpointTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    // http://mathforum.org/kb/message.jspa?messageID=148837

    var φ1 = this.lat.toRadians(), λ1 = this.lon.toRadians();
    var φ2 = point.lat.toRadians(), λ2 = point.lon.toRadians();

    if (Math.abs(λ2-λ1) > Math.PI) λ1 += 2*Math.PI; // crossing anti-meridian

    var φ3 = (φ1+φ2)/2;
    var f1 = Math.tan(Math.PI/4 + φ1/2);
    var f2 = Math.tan(Math.PI/4 + φ2/2);
    var f3 = Math.tan(Math.PI/4 + φ3/2);
    var λ3 = ( (λ2-λ1)*Math.log(f3) + λ1*Math.log(f2) - λ2*Math.log(f1) ) / Math.log(f2/f1);

    if (!isFinite(λ3)) λ3 = (λ1+λ2)/2; // parallel of latitude

    var p = LatLon(φ3.toDegrees(), (λ3.toDegrees()+540)%360-180); // normalise to −180..+180°

    return p;
};


/* Area - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Calculates the area of a spherical polygon where the sides of the polygon are great circle
 * arcs joining the vertices.
 *
 * @param   {LatLon[]} polygon - Array of points defining vertices of the polygon
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {number} The area of the polygon, in the same units as radius.
 *
 * @example
 *   var polygon = [new LatLon(0,0), new LatLon(1,0), new LatLon(0,1)];
 *   var area = LatLon.areaOf(polygon); // 6.18e9 m²
 */
LatLon.areaOf = function(polygon, radius) {
    // uses method due to Karney: osgeo-org.1560.x6.nabble.com/Area-of-a-spherical-polygon-td3841625.html;
    // for each edge of the polygon, tan(E/2) = tan(Δλ/2)·(tan(φ1/2) + tan(φ2/2)) / (1 + tan(φ1/2)·tan(φ2/2))
    // where E is the spherical excess of the trapezium obtained by extending the edge to the equator

    var R = (radius === undefined) ? 6371e3 : Number(radius);

    // close polygon so that last point equals first point
    var closed = polygon[0].equals(polygon[polygon.length-1]);
    if (!closed) polygon.push(polygon[0]);

    var nVertices = polygon.length - 1;

    var S = 0; // spherical excess in steradians
    for (var v=0; v<nVertices; v++) {
        var φ1 = polygon[v].lat.toRadians();
        var φ2 = polygon[v+1].lat.toRadians();
        var Δλ = (polygon[v+1].lon - polygon[v].lon).toRadians();
        var E = 2 * Math.atan2(Math.tan(Δλ/2) * (Math.tan(φ1/2)+Math.tan(φ2/2)), 1 + Math.tan(φ1/2)*Math.tan(φ2/2));
        S += E;
    }

    if (isPoleEnclosedBy(polygon)) S = Math.abs(S) - 2*Math.PI;

    var A = Math.abs(S * R*R); // area in units of R

    if (!closed) polygon.pop(); // restore polygon to pristine condition

    return A;

    // returns whether polygon encloses pole: sum of course deltas around pole is 0° rather than
    // normal ±360°: blog.element84.com/determining-if-a-spherical-polygon-contains-a-pole.html
    function isPoleEnclosedBy(polygon) {
        // TODO: any better test than this?
        var ΣΔ = 0;
        var prevBrng = polygon[0].bearingTo(polygon[1]);
        for (var v=0; v<polygon.length-1; v++) {
            var initBrng = polygon[v].bearingTo(polygon[v+1]);
            var finalBrng = polygon[v].finalBearingTo(polygon[v+1]);
            ΣΔ += (initBrng - prevBrng + 540) % 360 - 180;
            ΣΔ += (finalBrng - initBrng + 540) % 360 - 180;
            prevBrng = finalBrng;
        }
        var initBrng = polygon[0].bearingTo(polygon[1]);
        ΣΔ += (initBrng - prevBrng + 540) % 360 - 180;
        // TODO: fix (intermittant) edge crossing pole - eg (85,90), (85,0), (85,-90)
        var enclosed = Math.abs(ΣΔ) < 90; // 0°-ish
        return enclosed;
    }
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/**
 * Checks if another point is equal to ‘this’ point.
 *
 * @param   {LatLon} point - Point to be compared against this point.
 * @returns {bool}   True if points are identical.
 *
 * @example
 *   var p1 = new LatLon(52.205, 0.119);
 *   var p2 = new LatLon(52.205, 0.119);
 *   var equal = p1.equals(p2); // true
 */
LatLon.prototype.equals = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    if (this.lat != point.lat) return false;
    if (this.lon != point.lon) return false;

    return true;
};


/**
 * Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or
 * degrees+minutes+seconds.
 *
 * @param   {string} [format=dms] - Format point as 'd', 'dm', 'dms'.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use - default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Comma-separated latitude/longitude.
 */
LatLon.prototype.toString = function(format, dp) {
    return Dms.toLat(this.lat, format, dp) + ', ' + Dms.toLon(this.lon, format, dp);
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Extend Number object with method to convert numeric degrees to radians */
if (Number.prototype.toRadians === undefined) {
    Number.prototype.toRadians = function() { return this * Math.PI / 180; };
}

/** Extend Number object with method to convert radians to numeric (signed) degrees */
if (Number.prototype.toDegrees === undefined) {
    Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = LatLon; // ≡ export default LatLon


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* Vincenty Direct and Inverse Solution of Geodesics on the Ellipsoid (c) Chris Veness 2002-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong-vincenty.html                                           */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-vincenty.html                        */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


if (typeof module!='undefined' && module.exports) var LatLon = __webpack_require__(31); // ≡ import LatLon from 'latlon-ellipsoidal.js'


/**
 * Direct and inverse solutions of geodesics on the ellipsoid using Vincenty formulae.
 *
 * From: T Vincenty, "Direct and Inverse Solutions of Geodesics on the Ellipsoid with application of
 *       nested equations", Survey Review, vol XXIII no 176, 1975.
 *       www.ngs.noaa.gov/PUBS_LIB/inverse.pdf.
 *
 * @module  latlon-vincenty
 * @extends latlon-ellipsoidal
 */
/** @class LatLon */


/**
 * Returns the distance between ‘this’ point and destination point along a geodesic, using Vincenty
 * inverse solution.
 *
 * Note: the datum used is of ‘this’ point; distance is on the surface of the ellipsoid (height is
 * ignored).
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns (Number} Distance in metres between points or NaN if failed to converge.
 *
 * @example
 *   var p1 = new LatLon(50.06632, -5.71475);
 *   var p2 = new LatLon(58.64402, -3.07009);
 *   var d = p1.distanceTo(p2); // 969,954.166 m
 */
LatLon.prototype.distanceTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    try {
        return this.inverse(point).distance;
    } catch (e) {
        return NaN; // failed to converge
    }
};


/**
 * Returns the initial bearing (forward azimuth) to travel along a geodesic from ‘this’ point to the
 * specified point, using Vincenty inverse solution.
 *
 * Note: the datum used is of ‘this’ point.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {number}  initial Bearing in degrees from north (0°..360°) or NaN if failed to converge.
 *
 * @example
 *   var p1 = new LatLon(50.06632, -5.71475);
 *   var p2 = new LatLon(58.64402, -3.07009);
 *   var b1 = p1.initialBearingTo(p2); // 9.1419°
 */
LatLon.prototype.initialBearingTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    try {
        return this.inverse(point).initialBearing;
    } catch (e) {
        return NaN; // failed to converge
    }
};


/**
 * Returns the final bearing (reverse azimuth) having travelled along a geodesic from ‘this’ point
 * to the specified point, using Vincenty inverse solution.
 *
 * Note: the datum used is of ‘this’ point.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {number}  Initial bearing in degrees from north (0°..360°) or NaN if failed to converge.
 *
 * @example
 *   var p1 = new LatLon(50.06632, -5.71475);
 *   var p2 = new LatLon(58.64402, -3.07009);
 *   var b2 = p1.finalBearingTo(p2); // 11.2972°
 */
LatLon.prototype.finalBearingTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    try {
        return this.inverse(point).finalBearing;
    } catch (e) {
        return NaN; // failed to converge
    }
};


/**
 * Returns the destination point having travelled the given distance along a geodesic given by
 * initial bearing from ‘this’ point, using Vincenty direct solution.
 *
 * Note: the datum used is of ‘this’ point; distance is on the surface of the ellipsoid (height is
 * ignored).
 *
 * @param   {number} distance - Distance travelled along the geodesic in metres.
 * @param   {number} initialBearing - Initial bearing in degrees from north.
 * @returns {LatLon} Destination point.
 *
 * @example
 *   var p1 = new LatLon(-37.95103, 144.42487);
 *   var p2 = p1.destinationPoint(54972.271, 306.86816); // 37.6528°S, 143.9265°E
 */
LatLon.prototype.destinationPoint = function(distance, initialBearing) {
    return this.direct(Number(distance), Number(initialBearing)).point;
};


/**
 * Returns the final bearing (reverse azimuth) having travelled along a geodesic given by initial
 * bearing for a given distance from ‘this’ point, using Vincenty direct solution.
 *
 * Note: the datum used is of ‘this’ point; distance is on the surface of the ellipsoid (height is
 * ignored).
 *
 * @param   {number} distance - Distance travelled along the geodesic in metres.
 * @param   {LatLon} initialBearing - Initial bearing in degrees from north.
 * @returns {number} Final bearing in degrees from north (0°..360°).
 *
 * @example
 *   var p1 = new LatLon(-37.95103, 144.42487);
 *   var b2 = p1.finalBearingOn(306.86816, 54972.271); // 307.1736°
 */
LatLon.prototype.finalBearingOn = function(distance, initialBearing) {
    return this.direct(Number(distance), Number(initialBearing)).finalBearing;
};


/**
 * Vincenty direct calculation.
 *
 * @private
 * @param   {number} distance - Distance along bearing in metres.
 * @param   {number} initialBearing - Initial bearing in degrees from north.
 * @returns (Object} Object including point (destination point), finalBearing.
 * @throws  {Error}  If formula failed to converge.
 */
LatLon.prototype.direct = function(distance, initialBearing) {
    var φ1 = this.lat.toRadians(), λ1 = this.lon.toRadians();
    var α1 = initialBearing.toRadians();
    var s = distance;

    var a = this.datum.ellipsoid.a, b = this.datum.ellipsoid.b, f = this.datum.ellipsoid.f;

    var sinα1 = Math.sin(α1);
    var cosα1 = Math.cos(α1);

    var tanU1 = (1-f) * Math.tan(φ1), cosU1 = 1 / Math.sqrt((1 + tanU1*tanU1)), sinU1 = tanU1 * cosU1;
    var σ1 = Math.atan2(tanU1, cosα1);
    var sinα = cosU1 * sinα1;
    var cosSqα = 1 - sinα*sinα;
    var uSq = cosSqα * (a*a - b*b) / (b*b);
    var A = 1 + uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq)));
    var B = uSq/1024 * (256+uSq*(-128+uSq*(74-47*uSq)));

    var cos2σM, sinσ, cosσ, Δσ;

    var σ = s / (b*A), σʹ, iterations = 0;
    do {
        cos2σM = Math.cos(2*σ1 + σ);
        sinσ = Math.sin(σ);
        cosσ = Math.cos(σ);
        Δσ = B*sinσ*(cos2σM+B/4*(cosσ*(-1+2*cos2σM*cos2σM)-
            B/6*cos2σM*(-3+4*sinσ*sinσ)*(-3+4*cos2σM*cos2σM)));
        σʹ = σ;
        σ = s / (b*A) + Δσ;
    } while (Math.abs(σ-σʹ) > 1e-12 && ++iterations<200);
    if (iterations>=200) throw new Error('Formula failed to converge'); // not possible?

    var x = sinU1*sinσ - cosU1*cosσ*cosα1;
    var φ2 = Math.atan2(sinU1*cosσ + cosU1*sinσ*cosα1, (1-f)*Math.sqrt(sinα*sinα + x*x));
    var λ = Math.atan2(sinσ*sinα1, cosU1*cosσ - sinU1*sinσ*cosα1);
    var C = f/16*cosSqα*(4+f*(4-3*cosSqα));
    var L = λ - (1-C) * f * sinα *
        (σ + C*sinσ*(cos2σM+C*cosσ*(-1+2*cos2σM*cos2σM)));
    var λ2 = (λ1+L+3*Math.PI)%(2*Math.PI) - Math.PI;  // normalise to -180..+180

    var α2 = Math.atan2(sinα, -x);
    α2 = (α2 + 2*Math.PI) % (2*Math.PI); // normalise to 0..360

    return {
        point:        new LatLon(φ2.toDegrees(), λ2.toDegrees(), this.datum),
        finalBearing: α2.toDegrees(),
    };
};


/**
 * Vincenty inverse calculation.
 *
 * @private
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {Object} Object including distance, initialBearing, finalBearing.
 * @throws  {Error}  If formula failed to converge.
 */
LatLon.prototype.inverse = function(point) {
    var p1 = this, p2 = point;
    var φ1 = p1.lat.toRadians(), λ1 = p1.lon.toRadians();
    var φ2 = p2.lat.toRadians(), λ2 = p2.lon.toRadians();

    var a = this.datum.ellipsoid.a, b = this.datum.ellipsoid.b, f = this.datum.ellipsoid.f;

    var L = λ2 - λ1;
    var tanU1 = (1-f) * Math.tan(φ1), cosU1 = 1 / Math.sqrt((1 + tanU1*tanU1)), sinU1 = tanU1 * cosU1;
    var tanU2 = (1-f) * Math.tan(φ2), cosU2 = 1 / Math.sqrt((1 + tanU2*tanU2)), sinU2 = tanU2 * cosU2;

    var sinλ, cosλ, sinSqσ, sinσ, cosσ, σ, sinα, cosSqα, cos2σM, C;

    var λ = L, λʹ, iterations = 0;
    do {
        sinλ = Math.sin(λ);
        cosλ = Math.cos(λ);
        sinSqσ = (cosU2*sinλ) * (cosU2*sinλ) + (cosU1*sinU2-sinU1*cosU2*cosλ) * (cosU1*sinU2-sinU1*cosU2*cosλ);
        sinσ = Math.sqrt(sinSqσ);
        if (sinσ == 0) return 0;  // co-incident points
        cosσ = sinU1*sinU2 + cosU1*cosU2*cosλ;
        σ = Math.atan2(sinσ, cosσ);
        sinα = cosU1 * cosU2 * sinλ / sinσ;
        cosSqα = 1 - sinα*sinα;
        cos2σM = cosσ - 2*sinU1*sinU2/cosSqα;
        if (isNaN(cos2σM)) cos2σM = 0;  // equatorial line: cosSqα=0 (§6)
        C = f/16*cosSqα*(4+f*(4-3*cosSqα));
        λʹ = λ;
        λ = L + (1-C) * f * sinα * (σ + C*sinσ*(cos2σM+C*cosσ*(-1+2*cos2σM*cos2σM)));
    } while (Math.abs(λ-λʹ) > 1e-12 && ++iterations<200);
    if (iterations>=200) throw new Error('Formula failed to converge');

    var uSq = cosSqα * (a*a - b*b) / (b*b);
    var A = 1 + uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq)));
    var B = uSq/1024 * (256+uSq*(-128+uSq*(74-47*uSq)));
    var Δσ = B*sinσ*(cos2σM+B/4*(cosσ*(-1+2*cos2σM*cos2σM)-
        B/6*cos2σM*(-3+4*sinσ*sinσ)*(-3+4*cos2σM*cos2σM)));

    var s = b*A*(σ-Δσ);

    var α1 = Math.atan2(cosU2*sinλ,  cosU1*sinU2-sinU1*cosU2*cosλ);
    var α2 = Math.atan2(cosU1*sinλ, -sinU1*cosU2+cosU1*sinU2*cosλ);

    α1 = (α1 + 2*Math.PI) % (2*Math.PI); // normalise to 0..360
    α2 = (α2 + 2*Math.PI) % (2*Math.PI); // normalise to 0..360

    s = Number(s.toFixed(3)); // round to 1mm precision
    return { distance: s, initialBearing: α1.toDegrees(), finalBearing: α2.toDegrees() };
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Extend Number object with method to convert numeric degrees to radians */
if (Number.prototype.toRadians === undefined) {
    Number.prototype.toRadians = function() { return this * Math.PI / 180; };
}

/** Extend Number object with method to convert radians to numeric (signed) degrees */
if (Number.prototype.toDegrees === undefined) {
    Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = LatLon; // ≡ export default LatLon


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  Vector-based spherical geodetic (latitude/longitude) functions    (c) Chris Veness 2011-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong-vectors.html                                            */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-nvector-spherical.html               */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


if (typeof module!='undefined' && module.exports) var Vector3d = __webpack_require__(59); // ≡ import Vector3d from 'vector3d.js'
if (typeof module!='undefined' && module.exports) var Dms = __webpack_require__(38);           // ≡ import Dms from 'dms.js'


/**
 * Tools for working with points and paths on (a spherical model of) the earth’s surface using a
 * vector-based approach using ‘n-vectors’ (rather than the more common spherical trigonometry;
 * a vector-based approach makes many calculations much simpler, and easier to follow, compared
 * with trigonometric equivalents).
 *
 * Note on a spherical model earth, an n-vector is equivalent to a normalised version of an (ECEF)
 * cartesian coordinate.
 *
 * @module   latlon-vectors
 * @requires vector3d
 * @requires dms
 */


/**
 * Creates a LatLon point on spherical model earth.
 *
 * @constructor
 * @param {number} lat - Latitude in degrees.
 * @param {number} lon - Longitude in degrees.
 *
 * @example
 *   var p1 = new LatLon(52.205, 0.119);
 */
function LatLon(lat, lon) {
    // allow instantiation without 'new'
    if (!(this instanceof LatLon)) return new LatLon(lat, lon);

    this.lat = Number(lat);
    this.lon = Number(lon);
}


/**
 * Converts ‘this’ lat/lon point to Vector3d n-vector (normal to earth's surface).
 *
 * @returns {Vector3d} Normalised n-vector representing lat/lon point.
 *
 * @example
 *   var p = new LatLon(45, 45);
 *   var v = p.toVector(); // [0.5000,0.5000,0.7071]
 */
LatLon.prototype.toVector = function() {
    var φ = this.lat.toRadians();
    var λ = this.lon.toRadians();

    // right-handed vector: x -> 0°E,0°N; y -> 90°E,0°N, z -> 90°N
    var x = Math.cos(φ) * Math.cos(λ);
    var y = Math.cos(φ) * Math.sin(λ);
    var z = Math.sin(φ);

    return new Vector3d(x, y, z);
};


/**
 * Converts ‘this’ (geocentric) cartesian vector to (spherical) latitude/longitude point.
 *
 * @returns  {LatLon} Latitude/longitude point vector points to.
 *
 * @example
 *   var v = new Vector3d(0.500, 0.500, 0.707);
 *   var p = v.toLatLonS(); // 45.0°N, 45.0°E
 */
Vector3d.prototype.toLatLonS = function() {
    var φ = Math.atan2(this.z, Math.sqrt(this.x*this.x + this.y*this.y));
    var λ = Math.atan2(this.y, this.x);

    return new LatLon(φ.toDegrees(), λ.toDegrees());
};


/**
 * N-vector normal to great circle obtained by heading on given bearing from ‘this’ point.
 *
 * Direction of vector is such that initial bearing vector b = c × p.
 *
 * @param   {number}   bearing - Compass bearing in degrees.
 * @returns {Vector3d} Normalised vector representing great circle.
 *
 * @example
 *   var p1 = new LatLon(53.3206, -1.7297);
 *   var gc = p1.greatCircle(96.0); // [-0.794,0.129,0.594]
 */
LatLon.prototype.greatCircle = function(bearing) {
    var φ = this.lat.toRadians();
    var λ = this.lon.toRadians();
    var θ = Number(bearing).toRadians();

    var x =  Math.sin(λ) * Math.cos(θ) - Math.sin(φ) * Math.cos(λ) * Math.sin(θ);
    var y = -Math.cos(λ) * Math.cos(θ) - Math.sin(φ) * Math.sin(λ) * Math.sin(θ);
    var z =  Math.cos(φ) * Math.sin(θ);

    return new Vector3d(x, y, z);
};


/**
 * N-vector normal to great circle obtained by heading on given bearing from point given by ‘this’
 * n-vector.
 *
 * Direction of vector is such that initial bearing vector b = c × p.
 *
 * @param   {number}   bearing - Compass bearing in degrees.
 * @returns {Vector3d} Normalised vector representing great circle.
 *
 * @example
 *   var n1 = new LatLon(53.3206, -1.7297).toNvector();
 *   var gc = n1.greatCircle(96.0); // [-0.794,0.129,0.594]
 */
Vector3d.prototype.greatCircle = function(bearing) {
    var θ = Number(bearing).toRadians();

    var N = new Vector3d(0, 0, 1);
    var e = N.cross(this); // easting
    var n = this.cross(e); // northing
    var eʹ = e.times(Math.cos(θ)/e.length());
    var nʹ = n.times(Math.sin(θ)/n.length());
    var c = nʹ.minus(eʹ);

    return c;
};


/**
 * Returns the distance from ‘this’ point to the specified point.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {number} Distance between this point and destination point, in same units as radius.
 *
 * @example
 *   var p1 = new LatLon(52.205, 0.119);
 *   var p2 = new LatLon(48.857, 2.351);
 *   var d = p1.distanceTo(p2); // 404.3 km
 */
LatLon.prototype.distanceTo = function(point, radius) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');
    radius = (radius === undefined) ? 6371e3 : Number(radius);

    var p1 = this.toVector();
    var p2 = point.toVector();

    var δ = p1.angleTo(p2);
    var d = δ * radius;

    return d;
};


/**
 * Returns the (initial) bearing from ‘this’ point to the specified point, in compass degrees.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {number} Initial bearing in degrees from North (0°..360°).
 *
 * @example
 *   var p1 = new LatLon(52.205, 0.119);
 *   var p2 = new LatLon(48.857, 2.351);
 *   var b1 = p1.bearingTo(p2); // 156.2°
 */
LatLon.prototype.bearingTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    var p1 = this.toVector();
    var p2 = point.toVector();

    var northPole = new Vector3d(0, 0, 1);

    var c1 = p1.cross(p2);        // great circle through p1 & p2
    var c2 = p1.cross(northPole); // great circle through p1 & north pole

    // bearing is (signed) angle between c1 & c2
    var bearing = c1.angleTo(c2, p1).toDegrees();

    return (bearing+360) % 360; // normalise to 0..360
};


/**
 * Returns the midpoint between ‘this’ point and specified point.
 *
 * @param   {LatLon} point - Latitude/longitude of destination point.
 * @returns {LatLon} Midpoint between this point and destination point.
 *
 * @example
 *   var p1 = new LatLon(52.205, 0.119);
 *   var p2 = new LatLon(48.857, 2.351);
 *   var pMid = p1.midpointTo(p2); // 50.5363°N, 001.2746°E
 */
LatLon.prototype.midpointTo = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    var p1 = this.toVector();
    var p2 = point.toVector();

    var mid = p1.plus(p2).unit();

    return mid.toLatLonS();
};


/**
 * Returns the destination point from ‘this’ point having travelled the given distance on the
 * given initial bearing (bearing will normally vary before destination is reached).
 *
 * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).
 * @param   {number} bearing - Initial bearing in degrees from north.
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {LatLon} Destination point.
 *
 * @example
 *   var p1 = new LatLon(51.4778, -0.0015);
 *   var p2 = p1.destinationPoint(7794, 300.7); // 51.5135°N, 000.0983°W
 */
LatLon.prototype.destinationPoint = function(distance, bearing, radius) {
    radius = (radius === undefined) ? 6371e3 : Number(radius);

    var n1 = this.toVector();
    var δ = Number(distance) / radius; // angular distance in radians
    var θ = Number(bearing).toRadians();

    var N = new Vector3d(0, 0, 1); // north pole

    var de = N.cross(n1).unit();   // east direction vector @ n1
    var dn = n1.cross(de);         // north direction vector @ n1

    var deSinθ = de.times(Math.sin(θ));
    var dnCosθ = dn.times(Math.cos(θ));

    var d = dnCosθ.plus(deSinθ);   // direction vector @ n1 (≡ C×n1; C = great circle)

    var x = n1.times(Math.cos(δ)); // component of n2 parallel to n1
    var y = d.times(Math.sin(δ));  // component of n2 perpendicular to n1

    var n2 = x.plus(y);

    return n2.toLatLonS();
};


/**
 * Returns the point of intersection of two paths each defined by point pairs or start point and bearing.
 *
 * @param   {LatLon}        path1start - Start point of first path.
 * @param   {LatLon|number} path1brngEnd - End point of first path or initial bearing from first start point.
 * @param   {LatLon}        path2start - Start point of second path.
 * @param   {LatLon|number} path2brngEnd - End point of second path or initial bearing from second start point.
 * @returns {LatLon}        Destination point (null if no unique intersection defined)
 *
 * @example
 *   var p1 = LatLon(51.8853, 0.2545), brng1 = 108.55;
 *   var p2 = LatLon(49.0034, 2.5735), brng2 =  32.44;
 *   var pInt = LatLon.intersection(p1, brng1, p2, brng2); // 50.9076°N, 004.5086°E
 */
LatLon.intersection = function(path1start, path1brngEnd, path2start, path2brngEnd) {
    if (!(path1start instanceof LatLon)) throw new TypeError('path1start is not LatLon object');
    if (!(path2start instanceof LatLon)) throw new TypeError('path2start is not LatLon object');
    if (!(path1brngEnd instanceof LatLon) && isNaN(path1brngEnd)) throw new TypeError('path1brngEnd is not LatLon object or bearing');
    if (!(path2brngEnd instanceof LatLon) && isNaN(path2brngEnd)) throw new TypeError('path2brngEnd is not LatLon object or bearing');

    // if c1 & c2 are great circles through start and end points (or defined by start point + bearing),
    // then candidate intersections are simply c1 × c2 & c2 × c1; most of the work is deciding correct
    // intersection point to select! if bearing is given, that determines which intersection, if both
    // paths are defined by start/end points, take closer intersection

    var p1 = path1start.toVector();
    var p2 = path2start.toVector();

    var c1, c2, path1def, path2def;
    // c1 & c2 are vectors defining great circles through start & end points; p × c gives initial bearing vector

    if (path1brngEnd instanceof LatLon) { // path 1 defined by endpoint
        c1 = p1.cross(path1brngEnd.toVector());
        path1def = 'endpoint';
    } else {                              // path 1 defined by initial bearing
        c1 = path1start.greatCircle(Number(path1brngEnd));
        path1def = 'bearing';
    }
    if (path2brngEnd instanceof LatLon) { // path 2 defined by endpoint
        c2 = p2.cross(path2brngEnd.toVector());
        path2def = 'endpoint';
    } else {                              // path 2 defined by initial bearing
        c2 = path2start.greatCircle(Number(path2brngEnd));
        path2def = 'bearing';
    }

    // there are two (antipodal) candidate intersection points; we have to choose which to return
    var i1 = c1.cross(c2);
    var i2 = c2.cross(c1);

    // am I making heavy weather of this? is there a simpler way to do it?

    // selection of intersection point depends on how paths are defined (bearings or endpoints)
    var intersection=null, dir1=null, dir2=null;
    switch (path1def+'+'+path2def) {
        case 'bearing+bearing':
            // if c×p⋅i1 is +ve, the initial bearing is towards i1, otherwise towards antipodal i2
            dir1 = Math.sign(c1.cross(p1).dot(i1)); // c1×p1⋅i1 +ve means p1 bearing points to i1
            dir2 = Math.sign(c2.cross(p2).dot(i1)); // c2×p2⋅i1 +ve means p2 bearing points to i1

            switch (dir1+dir2) {
                case  2: // dir1, dir2 both +ve, 1 & 2 both pointing to i1
                    intersection = i1;
                    break;
                case -2: // dir1, dir2 both -ve, 1 & 2 both pointing to i2
                    intersection = i2;
                    break;
                case  0: // dir1, dir2 opposite; intersection is at further-away intersection point
                    // take opposite intersection from mid-point of p1 & p2 [is this always true?]
                    intersection = p1.plus(p2).dot(i1) > 0 ? i2 : i1;
                    break;
            }
            break;
        case 'bearing+endpoint': // use bearing c1 × p1
            dir1 = Math.sign(c1.cross(p1).dot(i1)); // c1×p1⋅i1 +ve means p1 bearing points to i1
            intersection = dir1>0 ? i1 : i2;
            break;
        case 'endpoint+bearing': // use bearing c2 × p2
            dir2 = Math.sign(c2.cross(p2).dot(i1)); // c2×p2⋅i1 +ve means p2 bearing points to i1
            intersection = dir2>0 ? i1 : i2;
            break;
        case 'endpoint+endpoint': // select nearest intersection to mid-point of all points
            var mid = p1.plus(p2).plus(path1brngEnd.toVector()).plus(path2brngEnd.toVector());
            intersection = mid.dot(i1)>0 ? i1 : i2;
            break;
    }

    return intersection.toLatLonS();
};


/**
 * Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point/bearing.
 *
 * @param   {LatLon}        pathStart - Start point of great circle path.
 * @param   {LatLon|number} pathBrngEnd - End point of great circle path or initial bearing from great circle start point.
 * @param   {number}        [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns {number}        Distance to great circle (-ve if to left, +ve if to right of path).
 *
 * @example
 *   var pCurrent = new LatLon(53.2611, -0.7972);
 *
 *   var p1 = new LatLon(53.3206, -1.7297), brng = 96.0;
 *   var d = pCurrent.crossTrackDistanceTo(p1, brng);// -305.7 m
 *
 *   var p1 = new LatLon(53.3206, -1.7297), p2 = new LatLon(53.1887, 0.1334);
 *   var d = pCurrent.crossTrackDistanceTo(p1, p2);  // -307.5 m
 */
LatLon.prototype.crossTrackDistanceTo = function(pathStart, pathBrngEnd, radius) {
    if (!(pathStart instanceof LatLon)) throw new TypeError('pathStart is not LatLon object');
    var R = (radius === undefined) ? 6371e3 : Number(radius);

    var p = this.toVector();

    var gc = pathBrngEnd instanceof LatLon                   // (note JavaScript is not good at method overloading)
        ? pathStart.toVector().cross(pathBrngEnd.toVector()) // great circle defined by two points
        : pathStart.greatCircle(Number(pathBrngEnd));        // great circle defined by point + bearing

    var α = gc.angleTo(p) - Math.PI/2; // angle between point & great-circle

    var d = α * R;

    return d;
};


/**
 * Returns closest point on great circle segment between point1 & point2 to ‘this’ point.
 *
 * If this point is ‘within’ the extent of the segment, the point is on the segment between point1 &
 * point2; otherwise, it is the closer of the endpoints defining the segment.
 *
 * @param   {LatLon} point1 - Start point of great circle segment.
 * @param   {LatLon} point2 - End point of great circle segment.
 * @returns {number} point on segment.
 *
 * @example
 *   var p1 = new LatLon(51.0, 1.0), p2 = new LatLon(51.0, 2.0);
 *
 *   var p0 = new LatLon(51.0, 1.9);
 *   var p = p0.nearestPointOnSegment(p1, p2); // 51.0004°N, 001.9000°E
 *   var d = p.distanceTo(p);                  // 42.71 m
 *
 *   var p0 = new LatLon(51.0, 2.1);
 *   var p = p0.nearestPointOnSegment(p1, p2); // 51.0000°N, 002.0000°E
 */
LatLon.prototype.nearestPointOnSegment = function(point1, point2) {
    var p = null;

    if (this.isBetween(point1, point2)) {
        // closer to segment than to its endpoints, find closest point on segment
        var n0 = this.toVector(), n1 = point1.toVector(), n2 = point2.toVector();
        var c1 = n1.cross(n2); // n1×n2 = vector representing great circle through p1, p2
        var c2 = n0.cross(c1); // n0×c1 = vector representing great circle through p0 normal to c1
        var n = c1.cross(c2);  // c2×c1 = nearest point on c1 to n0
        p = n.toLatLonS();
    } else {
        // beyond segment extent, take closer endpoint
        var d1 = this.distanceTo(point1);
        var d2 = this.distanceTo(point2);
        p = d1<d2 ? point1 : point2;
    }

    return p;
};


/**
 * Returns whether this point is between point 1 & point 2.
 *
 * If this point is not on the great circle defined by point1 & point 2, returns whether this point
 * is within area bound by perpendiculars to the great circle at each point.
 *
 * @param   {LatLon} point1 - First point defining segment.
 * @param   {LatLon} point2 - Second point defining segment.
 * @returns {boolean} Whether this point is within extent of segment.
 */
LatLon.prototype.isBetween = function(point1, point2) {
    var n0 = this.toVector(), n1 = point1.toVector(), n2 = point2.toVector(); // n-vectors

    // get vectors representing p0->p1, p0->p2, p1->p2, p2->p1
    var δ10 = n0.minus(n1), δ12 = n2.minus(n1);
    var δ20 = n0.minus(n2), δ21 = n1.minus(n2);

    // dot product δ10⋅δ12 tells us if p0 is on p2 side of p1, similarly for δ20⋅δ21
    var extent1 = δ10.dot(δ12);
    var extent2 = δ20.dot(δ21);

    var isBetween = extent1>=0 && extent2>=0;

    return isBetween;
};


/**
 * Tests whether ‘this’ point is enclosed by the polygon defined by a set of points.
 *
 * @param   {LatLon[]} polygon - Ordered array of points defining vertices of polygon.
 * @returns {bool}     Whether this point is enclosed by polygon.
 *
 * @example
 *   var bounds = [ new LatLon(45,1), new LatLon(45,2), new LatLon(46,2), new LatLon(46,1) ];
 *   var p = new LatLon(45.1, 1.1);
 *   var inside = p.enclosedBy(bounds); // true
 */
LatLon.prototype.enclosedBy = function(polygon) {
    // this method uses angle summation test; on a plane, angles for an enclosed point will sum
    // to 360°, angles for an exterior point will sum to 0°. On a sphere, enclosed point angles
    // will sum to less than 360° (due to spherical excess), exterior point angles will be small
    // but non-zero. TODO: are any winding number optimisations applicable to spherical surface?

    // close the polygon so that the last point equals the first point
    var closed = polygon[0].equals(polygon[polygon.length-1]);
    if (!closed) polygon.push(polygon[0]);

    var nVertices = polygon.length - 1;

    var p = this.toVector();

    // get vectors from p to each vertex
    var vectorToVertex = [];
    for (var v=0; v<nVertices; v++) vectorToVertex[v] = p.minus(polygon[v].toVector());
    vectorToVertex.push(vectorToVertex[0]);

    // sum subtended angles of each edge (using vector p to determine sign)
    var Σθ = 0;
    for (var v=0; v<nVertices; v++) {
        Σθ += vectorToVertex[v].angleTo(vectorToVertex[v+1], p);
    }

    var enclosed = Math.abs(Σθ) > Math.PI;

    if (!closed) polygon.pop(); // restore polygon to pristine condition

    return enclosed;
};


/**
 * Calculates the area of a spherical polygon where the sides of the polygon are great circle
 * arcs joining the vertices.
 *
 * @param   {LatLon[]} polygon - Array of points defining vertices of the polygon
 * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
 * @returns The area of the polygon in the same units as radius.
 *
 * @example
 *   var polygon = [new LatLon(0,0), new LatLon(1,0), new LatLon(0,1)];
 *   var area = LatLon.areaOf(polygon); // 6.18e9 m² TODO: fix!
 */
LatLon.areaOf = function(polygon, radius) {
    // uses Girard’s theorem: A = [Σθᵢ − (n−2)·π]·R²

    var R = (radius === undefined) ? 6371e3 : Number(radius);

    // close the polygon so that the last point equals the first point
    if (!polygon[0].equals(polygon[polygon.length-1])) polygon.push(polygon[0]);
    var n = polygon.length - 1;
    console.log('n', n);

    // get great-circle vector for each edge
    var c = [];
    for (var v=0; v<n; v++) {
        var i = polygon[v].toVector();
        var j = polygon[v+1].toVector();
        c[v] = i.cross(j); // great circle for segment v..v+1
    }
    console.log('c', c.length, c);
    c.push(c[0]);

    // sum interior angles
    var Σθ = 0;
    for (var v=0; v<n; v++) {
        console.log(v, (Math.PI-c[v].angleTo(c[v+1])).toDegrees());
        Σθ += Math.PI - c[v].angleTo(c[v+1]); // TODO: always π - α, or sometimes just α?
    }
    console.log('Σθ', Σθ.toDegrees(), ((n-2)*Math.PI).toDegrees());

    var E = (Σθ - (n-2)*Math.PI); // spherical excess (in steradians)
    var A = E * R*R;              // area (in units of radius)

    return A;
};


/**
 * Returns point representing geographic mean of supplied points.
 *
 * @param   {LatLon[]} points - Array of points to be averaged.
 * @returns {LatLon}   Point at the geographic mean of the supplied points.
 * @todo Not yet tested.
 */
LatLon.meanOf = function(points) {
    var m = new Vector3d(0, 0, 0);

    // add all vectors
    for (var p=0; p<points.length; p++) {
        m = m.plus(points[p].toVector());
    }

    // m is now geographic mean
    return m.unit().toLatLonS();
};


/**
 * Checks if another point is equal to ‘this’ point.
 *
 * @param   {LatLon} point - Point to be compared against this point.
 * @returns {bool}    True if points are identical.
 *
 * @example
 *   var p1 = new LatLon(52.205, 0.119);
 *   var p2 = new LatLon(52.205, 0.119);
 *   var equal = p1.equals(p2); // true
 */
LatLon.prototype.equals = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    if (this.lat != point.lat) return false;
    if (this.lon != point.lon) return false;

    return true;
};


/**
 * Returns a string representation of ‘this’ point.
 *
 * @param   {string} [format=dms] - Format point as 'd', 'dm', 'dms'.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use: default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Comma-separated formatted latitude/longitude.
 */
LatLon.prototype.toString = function(format, dp) {
    return Dms.toLat(this.lat, format, dp) + ', ' + Dms.toLon(this.lon, format, dp);
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Extend Number object with method to convert numeric degrees to radians */
if (Number.prototype.toRadians === undefined) {
    Number.prototype.toRadians = function() { return this * Math.PI / 180; };
}

/** Extend Number object with method to convert radians to numeric (signed) degrees */
if (Number.prototype.toDegrees === undefined) {
    Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
}

/** Polyfill Math.sign for old browsers / IE */
if (Math.sign === undefined) {
    Math.sign = function(x) {
        x = +x; // convert to a number
        if (x === 0 || isNaN(x)) return x;
        return x > 0 ? 1 : -1;
    };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = LatLon, module.exports.Vector3d = Vector3d; // ≡ export { LatLon as default, Vector3d }


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  MGRS / UTM Conversion Functions                                   (c) Chris Veness 2014-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong-utm-mgrs.html                                           */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-mgrs.html                                   */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


if (typeof module!='undefined' && module.exports) var Utm = __webpack_require__(104);                   // ≡ import Utm from 'utm.js'
if (typeof module!='undefined' && module.exports) var LatLon = __webpack_require__(31); // ≡ import LatLon from 'latlon-ellipsoidal.js'


/**
 * Convert between Universal Transverse Mercator (UTM) coordinates and Military Grid Reference
 * System (MGRS/NATO) grid references.
 *
 * @module   mgrs
 * @requires utm
 * @requires latlon-ellipsoidal
 */

/* qv www.fgdc.gov/standards/projects/FGDC-standards-projects/usng/fgdc_std_011_2001_usng.pdf p10 */


/*
 * Latitude bands C..X 8° each, covering 80°S to 84°N
 */
Mgrs.latBands = 'CDEFGHJKLMNPQRSTUVWXX'; // X is repeated for 80-84°N


/*
 * 100km grid square column (‘e’) letters repeat every third zone
 */
Mgrs.e100kLetters = [ 'ABCDEFGH', 'JKLMNPQR', 'STUVWXYZ' ];


/*
 * 100km grid square row (‘n’) letters repeat every other zone
 */
Mgrs.n100kLetters = ['ABCDEFGHJKLMNPQRSTUV', 'FGHJKLMNPQRSTUVABCDE'];


/**
 * Creates an Mgrs grid reference object.
 *
 * @constructor
 * @param  {number} zone - 6° longitudinal zone (1..60 covering 180°W..180°E).
 * @param  {string} band - 8° latitudinal band (C..X covering 80°S..84°N).
 * @param  {string} e100k - First letter (E) of 100km grid square.
 * @param  {string} n100k - Second letter (N) of 100km grid square.
 * @param  {number} easting - Easting in metres within 100km grid square.
 * @param  {number} northing - Northing in metres within 100km grid square.
 * @param  {LatLon.datum} [datum=WGS84] - Datum UTM coordinate is based on.
 * @throws {Error}  Invalid MGRS grid reference.
 *
 * @example
 *   var mgrsRef = new Mgrs(31, 'U', 'D', 'Q', 48251, 11932); // 31U DQ 48251 11932
 */
function Mgrs(zone, band, e100k, n100k, easting, northing, datum) {
    // allow instantiation without 'new'
    if (!(this instanceof Mgrs)) return new Mgrs(zone, band, e100k, n100k, easting, northing, datum);

    if (datum === undefined) datum = LatLon.datum.WGS84; // default if not supplied

    if (!(1<=zone && zone<=60)) throw new Error('Invalid MGRS grid reference (zone ‘'+zone+'’)');
    if (band.length != 1) throw new Error('Invalid MGRS grid reference (band ‘'+band+'’)');
    if (Mgrs.latBands.indexOf(band) == -1) throw new Error('Invalid MGRS grid reference (band ‘'+band+'’)');
    if (e100k.length!=1) throw new Error('Invalid MGRS grid reference (e100k ‘'+e100k+'’)');
    if (n100k.length!=1) throw new Error('Invalid MGRS grid reference (n100k ‘'+n100k+'’)');

    this.zone = Number(zone);
    this.band = band;
    this.e100k = e100k;
    this.n100k = n100k;
    this.easting = Number(easting);
    this.northing = Number(northing);
    this.datum = datum;
}


/**
 * Converts UTM coordinate to MGRS reference.
 *
 * @returns {Mgrs}
 * @throws  {Error} Invalid UTM coordinate.
 *
 * @example
 *   var utmCoord = new Utm(31, 'N', 448251, 5411932);
 *   var mgrsRef = utmCoord.toMgrs(); // 31U DQ 48251 11932
 */
Utm.prototype.toMgrs = function() {
    if (isNaN(this.zone + this.easting + this.northing)) throw new Error('Invalid UTM coordinate ‘'+this.toString()+'’');

    // MGRS zone is same as UTM zone
    var zone = this.zone;

    // convert UTM to lat/long to get latitude to determine band
    var latlong = this.toLatLonE();
    // grid zones are 8° tall, 0°N is 10th band
    var band = Mgrs.latBands.charAt(Math.floor(latlong.lat/8+10)); // latitude band

    // columns in zone 1 are A-H, zone 2 J-R, zone 3 S-Z, then repeating every 3rd zone
    var col = Math.floor(this.easting / 100e3);
    var e100k = Mgrs.e100kLetters[(zone-1)%3].charAt(col-1); // col-1 since 1*100e3 -> A (index 0), 2*100e3 -> B (index 1), etc.

    // rows in even zones are A-V, in odd zones are F-E
    var row = Math.floor(this.northing / 100e3) % 20;
    var n100k = Mgrs.n100kLetters[(zone-1)%2].charAt(row);

    // truncate easting/northing to within 100km grid square
    var easting = this.easting % 100e3;
    var northing = this.northing % 100e3;

    // round to nm precision
    easting = Number(easting.toFixed(6));
    northing = Number(northing.toFixed(6));

    return new Mgrs(zone, band, e100k, n100k, easting, northing);
};


/**
 * Converts MGRS grid reference to UTM coordinate.
 *
 * @returns {Utm}
 *
 * @example
 *   var utmCoord = Mgrs.parse('31U DQ 448251 11932').toUtm(); // 31 N 448251 5411932
 */
Mgrs.prototype.toUtm = function() {
    var zone = this.zone;
    var band = this.band;
    var e100k = this.e100k;
    var n100k = this.n100k;
    var easting = this.easting;
    var northing = this.northing;

    var hemisphere = band>='N' ? 'N' : 'S';

    // get easting specified by e100k
    var col = Mgrs.e100kLetters[(zone-1)%3].indexOf(e100k) + 1; // index+1 since A (index 0) -> 1*100e3, B (index 1) -> 2*100e3, etc.
    var e100kNum = col * 100e3; // e100k in metres

    // get northing specified by n100k
    var row = Mgrs.n100kLetters[(zone-1)%2].indexOf(n100k);
    var n100kNum = row * 100e3; // n100k in metres

    // get latitude of (bottom of) band
    var latBand = (Mgrs.latBands.indexOf(band)-10)*8;

    // northing of bottom of band, extended to include entirety of bottommost 100km square
    // (100km square boundaries are aligned with 100km UTM northing intervals)
    var nBand = Math.floor(new LatLon(latBand, 0).toUtm().northing/100e3)*100e3;
    // 100km grid square row letters repeat every 2,000km north; add enough 2,000km blocks to get
    // into required band
    var n2M = 0; // northing of 2,000km block
    while (n2M + n100kNum + northing < nBand) n2M += 2000e3;

    return new Utm(zone, hemisphere, e100kNum+easting, n2M+n100kNum+northing, this.datum);
};


/**
 * Parses string representation of MGRS grid reference.
 *
 * An MGRS grid reference comprises (space-separated)
 *  - grid zone designator (GZD)
 *  - 100km grid square letter-pair
 *  - easting
 *  - northing.
 *
 * @param   {string} mgrsGridRef - String representation of MGRS grid reference.
 * @returns {Mgrs}   Mgrs grid reference object.
 * @throws  {Error}  Invalid MGRS grid reference.
 *
 * @example
 *   var mgrsRef = Mgrs.parse('31U DQ 48251 11932');
 *   var mgrsRef = Mgrs.parse('31UDQ4825111932');
 *   //  mgrsRef: { zone:31, band:'U', e100k:'D', n100k:'Q', easting:48251, northing:11932 }
 */
Mgrs.parse = function(mgrsGridRef) {
    mgrsGridRef = mgrsGridRef.trim();

    // check for military-style grid reference with no separators
    if (!mgrsGridRef.match(/\s/)) {
        var en = mgrsGridRef.slice(5); // get easting/northing following zone/band/100ksq
        en = en.slice(0, en.length/2)+' '+en.slice(-en.length/2); // separate easting/northing
        mgrsGridRef = mgrsGridRef.slice(0, 3)+' '+mgrsGridRef.slice(3, 5)+' '+en; // insert spaces
    }

    // match separate elements (separated by whitespace)
    mgrsGridRef = mgrsGridRef.match(/\S+/g);

    if (mgrsGridRef==null || mgrsGridRef.length!=4) throw new Error('Invalid MGRS grid reference ‘'+mgrsGridRef+'’');

    // split gzd into zone/band
    var gzd = mgrsGridRef[0];
    var zone = gzd.slice(0, 2);
    var band = gzd.slice(2, 3);

    // split 100km letter-pair into e/n
    var en100k = mgrsGridRef[1];
    var e100k = en100k.slice(0, 1);
    var n100k = en100k.slice(1, 2);

    var e = mgrsGridRef[2], n = mgrsGridRef[3];

    // standardise to 10-digit refs - ie metres) (but only if < 10-digit refs, to allow decimals)
    e = e.length>=5 ?  e : (e+'00000').slice(0, 5);
    n = n.length>=5 ?  n : (n+'00000').slice(0, 5);

    return new Mgrs(zone, band, e100k, n100k, e, n);
};


/**
 * Returns a string representation of an MGRS grid reference.
 *
 * To distinguish from civilian UTM coordinate representations, no space is included within the
 * zone/band grid zone designator.
 *
 * Components are separated by spaces: for a military-style unseparated string, use
 * Mgrs.toString().replace(/ /g, '');
 *
 * Note that MGRS grid references get truncated, not rounded (unlike UTM coordinates).
 *
 * @param   {number} [digits=10] - Precision of returned grid reference (eg 4 = km, 10 = m).
 * @returns {string} This grid reference in standard format.
 * @throws  {Error}  Invalid precision.
 *
 * @example
 *   var mgrsStr = new Mgrs(31, 'U', 'D', 'Q', 48251, 11932).toString(); // '31U DQ 48251 11932'
 */
Mgrs.prototype.toString = function(digits) {
    digits = (digits === undefined) ? 10 : Number(digits);
    if ([2,4,6,8,10].indexOf(digits) == -1) throw new Error('Invalid precision ‘'+digits+'’');

    var zone = this.zone.pad(2); // ensure leading zero
    var band = this.band;

    var e100k = this.e100k;
    var n100k = this.n100k;

    // set required precision
    var easting = Math.floor(this.easting/Math.pow(10, 5-digits/2));
    var northing = Math.floor(this.northing/Math.pow(10, 5-digits/2));

    // ensure leading zeros
    easting = easting.pad(digits/2);
    northing = northing.pad(digits/2);

    return zone+band + ' ' + e100k+n100k + ' '  + easting + ' ' + northing;
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Extend Number object with method to pad with leading zeros to make it w chars wide
 *  (q.v. stackoverflow.com/questions/2998784 */
if (Number.prototype.pad === undefined) {
    Number.prototype.pad = function(w) {
        var n = this.toString();
        while (n.length < w) n = '0' + n;
        return n;
    };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = Mgrs; // ≡ export default Mgrs


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* Ordnance Survey Grid Reference functions                           (c) Chris Veness 2005-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong-gridref.html                                            */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-osgridref.html                              */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


if (typeof module!='undefined' && module.exports) var LatLon = __webpack_require__(31); // ≡ import LatLon from 'latlon-ellipsoidal.js'


/**
 * Convert OS grid references to/from OSGB latitude/longitude points.
 *
 * Formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is inferior
 * to Krüger as used by e.g. Karney 2011.
 *
 * www.ordnancesurvey.co.uk/docs/support/guide-coordinate-systems-great-britain.pdf.
 *
 * @module   osgridref
 * @requires latlon-ellipsoidal
 */
/*
 * Converted 2015 to work with WGS84 by default, OSGB36 as option;
 * www.ordnancesurvey.co.uk/blog/2014/12/confirmation-on-changes-to-latitude-and-longitude
 */


/**
 * Creates an OsGridRef object.
 *
 * @constructor
 * @param {number} easting - Easting in metres from OS false origin.
 * @param {number} northing - Northing in metres from OS false origin.
 *
 * @example
 *   var grid = new OsGridRef(651409, 313177);
 */
function OsGridRef(easting, northing) {
    // allow instantiation without 'new'
    if (!(this instanceof OsGridRef)) return new OsGridRef(easting, northing);

    this.easting = Number(easting);
    this.northing = Number(northing);
}


/**
 * Converts latitude/longitude to Ordnance Survey grid reference easting/northing coordinate.
 *
 * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is
 * inferior to Krüger as used by e.g. Karney 2011.
 *
 * @param   {LatLon}    point - latitude/longitude.
 * @returns {OsGridRef} OS Grid Reference easting/northing.
 *
 * @example
 *   var p = new LatLon(52.65798, 1.71605);
 *   var grid = OsGridRef.latLonToOsGrid(p); // grid.toString(): TG 51409 13177
 *   // for conversion of (historical) OSGB36 latitude/longitude point:
 *   var p = new LatLon(52.65757, 1.71791, LatLon.datum.OSGB36);
 */
OsGridRef.latLonToOsGrid = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    // if necessary convert to OSGB36 first
    if (point.datum != LatLon.datum.OSGB36) point = point.convertDatum(LatLon.datum.OSGB36);

    var φ = point.lat.toRadians();
    var λ = point.lon.toRadians();

    var a = 6377563.396, b = 6356256.909;              // Airy 1830 major & minor semi-axes
    var F0 = 0.9996012717;                             // NatGrid scale factor on central meridian
    var φ0 = (49).toRadians(), λ0 = (-2).toRadians();  // NatGrid true origin is 49°N,2°W
    var N0 = -100000, E0 = 400000;                     // northing & easting of true origin, metres
    var e2 = 1 - (b*b)/(a*a);                          // eccentricity squared
    var n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³

    var cosφ = Math.cos(φ), sinφ = Math.sin(φ);
    var ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature
    var ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature
    var η2 = ν/ρ-1;                                    // eta = ?

    var Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);
    var Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);
    var Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));
    var Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));
    var M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc

    var cos3φ = cosφ*cosφ*cosφ;
    var cos5φ = cos3φ*cosφ*cosφ;
    var tan2φ = Math.tan(φ)*Math.tan(φ);
    var tan4φ = tan2φ*tan2φ;

    var I = M + N0;
    var II = (ν/2)*sinφ*cosφ;
    var III = (ν/24)*sinφ*cos3φ*(5-tan2φ+9*η2);
    var IIIA = (ν/720)*sinφ*cos5φ*(61-58*tan2φ+tan4φ);
    var IV = ν*cosφ;
    var V = (ν/6)*cos3φ*(ν/ρ-tan2φ);
    var VI = (ν/120) * cos5φ * (5 - 18*tan2φ + tan4φ + 14*η2 - 58*tan2φ*η2);

    var Δλ = λ-λ0;
    var Δλ2 = Δλ*Δλ, Δλ3 = Δλ2*Δλ, Δλ4 = Δλ3*Δλ, Δλ5 = Δλ4*Δλ, Δλ6 = Δλ5*Δλ;

    var N = I + II*Δλ2 + III*Δλ4 + IIIA*Δλ6;
    var E = E0 + IV*Δλ + V*Δλ3 + VI*Δλ5;

    N = Number(N.toFixed(3)); // round to mm precision
    E = Number(E.toFixed(3));

    return new OsGridRef(E, N); // gets truncated to SW corner of 1m grid square
};


/**
 * Converts Ordnance Survey grid reference easting/northing coordinate to latitude/longitude
 * (SW corner of grid square).
 *
 * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is
 * inferior to Krüger as used by e.g. Karney 2011.
 *
 * @param   {OsGridRef}    gridref - Grid ref E/N to be converted to lat/long (SW corner of grid square).
 * @param   {LatLon.datum} [datum=WGS84] - Datum to convert grid reference into.
 * @returns {LatLon}       Latitude/longitude of supplied grid reference.
 *
 * @example
 *   var gridref = new OsGridRef(651409.903, 313177.270);
 *   var pWgs84 = OsGridRef.osGridToLatLon(gridref);                     // 52°39′28.723″N, 001°42′57.787″E
 *   // to obtain (historical) OSGB36 latitude/longitude point:
 *   var pOsgb = OsGridRef.osGridToLatLon(gridref, LatLon.datum.OSGB36); // 52°39′27.253″N, 001°43′04.518″E
 */
OsGridRef.osGridToLatLon = function(gridref, datum) {
    if (!(gridref instanceof OsGridRef)) throw new TypeError('gridref is not OsGridRef object');
    if (datum === undefined) datum = LatLon.datum.WGS84;

    var E = gridref.easting;
    var N = gridref.northing;

    var a = 6377563.396, b = 6356256.909;              // Airy 1830 major & minor semi-axes
    var F0 = 0.9996012717;                             // NatGrid scale factor on central meridian
    var φ0 = (49).toRadians(), λ0 = (-2).toRadians();  // NatGrid true origin is 49°N,2°W
    var N0 = -100000, E0 = 400000;                     // northing & easting of true origin, metres
    var e2 = 1 - (b*b)/(a*a);                          // eccentricity squared
    var n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³

    var φ=φ0, M=0;
    do {
        φ = (N-N0-M)/(a*F0) + φ;

        var Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);
        var Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);
        var Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));
        var Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));
        M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc

    } while (N-N0-M >= 0.00001);  // ie until < 0.01mm

    var cosφ = Math.cos(φ), sinφ = Math.sin(φ);
    var ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature
    var ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature
    var η2 = ν/ρ-1;                                    // eta = ?

    var tanφ = Math.tan(φ);
    var tan2φ = tanφ*tanφ, tan4φ = tan2φ*tan2φ, tan6φ = tan4φ*tan2φ;
    var secφ = 1/cosφ;
    var ν3 = ν*ν*ν, ν5 = ν3*ν*ν, ν7 = ν5*ν*ν;
    var VII = tanφ/(2*ρ*ν);
    var VIII = tanφ/(24*ρ*ν3)*(5+3*tan2φ+η2-9*tan2φ*η2);
    var IX = tanφ/(720*ρ*ν5)*(61+90*tan2φ+45*tan4φ);
    var X = secφ/ν;
    var XI = secφ/(6*ν3)*(ν/ρ+2*tan2φ);
    var XII = secφ/(120*ν5)*(5+28*tan2φ+24*tan4φ);
    var XIIA = secφ/(5040*ν7)*(61+662*tan2φ+1320*tan4φ+720*tan6φ);

    var dE = (E-E0), dE2 = dE*dE, dE3 = dE2*dE, dE4 = dE2*dE2, dE5 = dE3*dE2, dE6 = dE4*dE2, dE7 = dE5*dE2;
    φ = φ - VII*dE2 + VIII*dE4 - IX*dE6;
    var λ = λ0 + X*dE - XI*dE3 + XII*dE5 - XIIA*dE7;

    var point =  new LatLon(φ.toDegrees(), λ.toDegrees(), LatLon.datum.OSGB36);
    if (datum != LatLon.datum.OSGB36) point = point.convertDatum(datum);

    return point;
};


/**
 * Parses grid reference to OsGridRef object.
 *
 * Accepts standard grid references (eg 'SU 387 148'), with or without whitespace separators, from
 * two-digit references up to 10-digit references (1m × 1m square), or fully numeric comma-separated
 * references in metres (eg '438700,114800').
 *
 * @param   {string}    gridref - Standard format OS grid reference.
 * @returns {OsGridRef} Numeric version of grid reference in metres from false origin (SW corner of
 *   supplied grid square).
 * @throws Error on Invalid grid reference.
 *
 * @example
 *   var grid = OsGridRef.parse('TG 51409 13177'); // grid: { easting: 651409, northing: 313177 }
 */
OsGridRef.parse = function(gridref) {
    gridref = String(gridref).trim();

    // check for fully numeric comma-separated gridref format
    var match = gridref.match(/^(\d+),\s*(\d+)$/);
    if (match) return new OsGridRef(match[1], match[2]);

    // validate format
    match = gridref.match(/^[A-Z]{2}\s*[0-9]+\s*[0-9]+$/i);
    if (!match) throw new Error('Invalid grid reference');

    // get numeric values of letter references, mapping A->0, B->1, C->2, etc:
    var l1 = gridref.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0);
    var l2 = gridref.toUpperCase().charCodeAt(1) - 'A'.charCodeAt(0);
    // shuffle down letters after 'I' since 'I' is not used in grid:
    if (l1 > 7) l1--;
    if (l2 > 7) l2--;

    // convert grid letters into 100km-square indexes from false origin (grid square SV):
    var e100km = ((l1-2)%5)*5 + (l2%5);
    var n100km = (19-Math.floor(l1/5)*5) - Math.floor(l2/5);

    // skip grid letters to get numeric (easting/northing) part of ref
    var en = gridref.slice(2).trim().split(/\s+/);
    // if e/n not whitespace separated, split half way
    if (en.length == 1) en = [ en[0].slice(0, en[0].length/2), en[0].slice(en[0].length/2) ];

    // validation
    if (e100km<0 || e100km>6 || n100km<0 || n100km>12) throw new Error('Invalid grid reference');
    if (en.length != 2) throw new Error('Invalid grid reference');
    if (en[0].length != en[1].length) throw new Error('Invalid grid reference');

    // standardise to 10-digit refs (metres)
    en[0] = (en[0]+'00000').slice(0, 5);
    en[1] = (en[1]+'00000').slice(0, 5);

    var e = e100km + en[0];
    var n = n100km + en[1];

    return new OsGridRef(e, n);
};


/**
 * Converts ‘this’ numeric grid reference to standard OS grid reference.
 *
 * @param   {number} [digits=10] - Precision of returned grid reference (10 digits = metres).
 * @returns {string} This grid reference in standard format.
 */
OsGridRef.prototype.toString = function(digits) {
    digits = (digits === undefined) ? 10 : Number(digits);
    if (isNaN(digits)) throw new Error('Invalid precision');

    var e = this.easting;
    var n = this.northing;
    if (isNaN(e) || isNaN(n)) throw new Error('Invalid grid reference');

    // use digits = 0 to return numeric format (in metres)
    if (digits == 0) return e.pad(6)+','+n.pad(6);

    // get the 100km-grid indices
    var e100k = Math.floor(e/100000), n100k = Math.floor(n/100000);

    if (e100k<0 || e100k>6 || n100k<0 || n100k>12) return '';

    // translate those into numeric equivalents of the grid letters
    var l1 = (19-n100k) - (19-n100k)%5 + Math.floor((e100k+10)/5);
    var l2 = (19-n100k)*5%25 + e100k%5;

    // compensate for skipped 'I' and build grid letter-pairs
    if (l1 > 7) l1++;
    if (l2 > 7) l2++;
    var letPair = String.fromCharCode(l1+'A'.charCodeAt(0), l2+'A'.charCodeAt(0));

    // strip 100km-grid indices from easting & northing, and reduce precision
    e = Math.floor((e%100000)/Math.pow(10, 5-digits/2));
    n = Math.floor((n%100000)/Math.pow(10, 5-digits/2));

    var gridRef = letPair + ' ' + e.pad(digits/2) + ' ' + n.pad(digits/2);

    return gridRef;
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Polyfill String.trim for old browsers
 *  (q.v. blog.stevenlevithan.com/archives/faster-trim-javascript) */
if (String.prototype.trim === undefined) {
    String.prototype.trim = function() {
        return String(this).replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    };
}

/** Extend Number object with method to pad with leading zeros to make it w chars wide
 *  (q.v. stackoverflow.com/questions/2998784 */
if (Number.prototype.pad === undefined) {
    Number.prototype.pad = function(w) {
        var n = this.toString();
        while (n.length < w) n = '0' + n;
        return n;
    };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = OsGridRef; // ≡ export default OsGridRef


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

var getCoords = __webpack_require__(14).getCoords;
var helpers = __webpack_require__(13);
var featureCollection = helpers.featureCollection;

/**
 * Finds the tangents of a {@link Polygon|(Multi)Polygon} from a {@link Point}.
 *
 * @name polygonTangents
 * @param {Feature<Point>} point to calculate the tangent points from
 * @param {Feature<Polygon|MultiPolygon>} polygon to get tangents from
 * @returns {FeatureCollection<Point>} Feature Collection containing the two tangent points
 * @example
 * var polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);
 * var point = turf.point([61, 5]);
 *
 * var tangents = turf.polygonTangents(point, polygon)
 *
 * //addToMap
 * var addToMap = [tangents, point, polygon];
 */
module.exports = function (point, polygon) {
    var eprev;
    var enext;
    var rtan;
    var ltan;
    var pointCoords = getCoords(point);
    var polyCoords = getCoords(polygon);

    var type = getGeomType(polygon);
    switch (type) {
    case 'Polygon':
        rtan = 0;
        ltan = 0;
        eprev = isLeft(polyCoords[0][0], polyCoords[0][1], pointCoords);
        var out = processPolygon(polyCoords[0], pointCoords, eprev, enext, rtan, ltan);
        rtan = out[0];
        ltan = out[1];
        break;
    case 'MultiPolygon':
        rtan = 0;
        ltan = 0;
        eprev = isLeft(polyCoords[0][0][0], polyCoords[0][0][1], pointCoords);
        polyCoords.forEach(function (ring) {
            var out = processPolygon(ring[0], pointCoords, eprev, enext, rtan, ltan);
            rtan = out[0];
            ltan = out[1];
        });
        break;
    }
    return featureCollection([helpers.point(rtan), helpers.point(ltan)]);
};

function processPolygon(polygonCoords, ptCoords, eprev, enext, rtan, ltan) {
    for (var i = 0; i < polygonCoords.length; i++) {
        var currentCoords = polygonCoords[i];
        var nextCoordPair = polygonCoords[i + 1];
        if (i === polygonCoords.length - 1) {
            nextCoordPair = polygonCoords[0];
        }
        enext = isLeft(currentCoords, nextCoordPair, ptCoords);
        if (eprev <= 0 && enext > 0) {
            if (!isBelow(ptCoords, currentCoords, rtan)) {
                rtan = currentCoords;
            }
        }
        if (eprev > 0 && enext <= 0) {
            if (!isAbove(ptCoords, currentCoords, ltan)) {
                ltan = currentCoords;
            }
        }
        eprev = enext;
    }
    return [rtan, ltan];
}

function isAbove(point1, point2, point3) {
    return isLeft(point1, point2, point3) >= 0;
}

function isBelow(point1, point2, point3) {
    return isLeft(point1, point2, point3) <= 0;
}

function isLeft(point1, point2, point3) {
    return (point2[0] - point1[0]) * (point3[1] - point1[1]) - (point3[0] - point1[0]) * (point2[1] - point1[1]);
}

// will be included in @turf/invariant
function getGeomType(geojson) {
    return (geojson.geometry) ? geojson.geometry.type : geojson.type;
}


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var getCoords = __webpack_require__(14).getCoords;
var isClockWise = __webpack_require__(69);
var featureCollection = __webpack_require__(13).featureCollection;
var geomEach = meta.geomEach;
var featureEach = meta.featureEach;

/**
 * Rewind {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon} outer ring counterclockwise and inner rings clockwise (Uses {@link http://en.wikipedia.org/wiki/Shoelace_formula|Shoelace Formula}).
 *
 * @name rewind
 * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon|LineString|MultiLineString>} geojson input GeoJSON Polygon
 * @param {Boolean} [reverse=false] enable reverse winding
 * @param {boolean} [mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
 * @returns {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon|LineString|MultiLineString>} rewind Polygon
 * @example
 * var polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);
 *
 * var rewind = turf.rewind(polygon);
 *
 * //addToMap
 * var addToMap = [rewind];
 */
module.exports = function (geojson, reverse, mutate) {
    // default params
    reverse = (reverse !== undefined) ? reverse : false;
    mutate = (mutate !== undefined) ? mutate : false;

    // validation
    if (!geojson) throw new Error('<geojson> is required');
    if (typeof reverse !== 'boolean') throw new Error('<reverse> must be a boolean');
    if (typeof mutate !== 'boolean') throw new Error('<mutate> must be a boolean');

    // prevent input mutation
    if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));

    // Support Feature Collection or Geometry Collection
    var results = [];
    switch (geojson.type) {
    case 'GeometryCollection':
        geomEach(geojson, function (geometry) {
            rewind(geometry, reverse);
        });
        return geojson;
    case 'FeatureCollection':
        featureEach(geojson, function (feature) {
            featureEach(rewind(feature, reverse), function (result) {
                results.push(result);
            });
        });
        return featureCollection(results);
    }
    // Support Feature or Geometry Objects
    return rewind(geojson, reverse);
};

/**
 * Rewind
 *
 * @private
 * @param {Geometry|Feature<any>} geojson Geometry or Feature
 * @param {Boolean} [reverse=false] enable reverse winding
 * @returns {Geometry|Feature<any>} rewind Geometry or Feature
 */
function rewind(geojson, reverse) {
    var type = (geojson.type === 'Feature') ? geojson.geometry.type : geojson.type;

    // Support all GeoJSON Geometry Objects
    switch (type) {
    case 'GeometryCollection':
        geomEach(geojson, function (geometry) {
            rewind(geometry, reverse);
        });
        return geojson;
    case 'LineString':
        rewindLineString(getCoords(geojson), reverse);
        return geojson;
    case 'Polygon':
        rewindPolygon(getCoords(geojson), reverse);
        return geojson;
    case 'MultiLineString':
        getCoords(geojson).forEach(function (lineCoords) {
            rewindLineString(lineCoords, reverse);
        });
        return geojson;
    case 'MultiPolygon':
        getCoords(geojson).forEach(function (lineCoords) {
            rewindPolygon(lineCoords, reverse);
        });
        return geojson;
    case 'Point':
    case 'MultiPoint':
        return geojson;
    }
}

/**
 * Rewind LineString - outer ring clockwise
 *
 * @private
 * @param {Array<Array<number>>} coords GeoJSON LineString geometry coordinates
 * @param {Boolean} [reverse=false] enable reverse winding
 * @returns {void} mutates coordinates
 */
function rewindLineString(coords, reverse) {
    if (isClockWise(coords) === reverse) coords.reverse();
}

/**
 * Rewind Polygon - outer ring counterclockwise and inner rings clockwise.
 *
 * @private
 * @param {Array<Array<Array<number>>>} coords GeoJSON Polygon geometry coordinates
 * @param {Boolean} [reverse=false] enable reverse winding
 * @returns {void} mutates coordinates
 */
function rewindPolygon(coords, reverse) {
    // outer ring
    if (isClockWise(coords[0]) !== reverse) {
        coords[0].reverse();
    }
    // inner rings
    for (var i = 1; i < coords.length; i++) {
        if (isClockWise(coords[i]) === reverse) {
            coords[i].reverse();
        }
    }
}


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var bbox = __webpack_require__(236);
var area = __webpack_require__(237);
var inside = __webpack_require__(238);
var helpers = __webpack_require__(61);
var explode = __webpack_require__(239);
var invariant = __webpack_require__(105);
var gridToMatrix = __webpack_require__(63);
var marchingsquares = __webpack_require__(64);
var polygon = helpers.polygon;
var multiPolygon = helpers.multiPolygon;
var collectionOf = invariant.collectionOf;
var featureCollection = helpers.featureCollection;

/**
 * Takes a grid {@link FeatureCollection} of {@link Point} features with z-values and an array of
 * value breaks and generates filled contour isobands.
 *
 * @name isobands
 * @param {FeatureCollection<Point>} pointGrid input points
 * @param {Array<number>} breaks where to draw contours
 * @param {string} [zProperty='elevation'] the property name in `points` from which z-values will be pulled
 * @param {Object} [options={}] options on output
 * @param {Array<Object>} [options.isobandProperties=[]] GeoJSON properties passed, in order, to the correspondent isoband (order defined by breaks)
 * @param {Object} [options.commonProperties={}] GeoJSON properties passed to ALL isobands
 * @returns {FeatureCollection<MultiPolygon>} a FeatureCollection of {@link MultiPolygon} features representing isobands
 * @example
 * // create a grid of points with random z-values in their properties
 * var extent = [-70.823364, -33.553984, -69.823364, -32.553984];
 * var cellWidth = 5;
 * var units = 'miles';
 * var pointGrid = turf.pointGrid(extent, cellWidth, units);
 * for (var i = 0; i < pointGrid.features.length; i++) {
 *     pointGrid.features[i].properties.elevation = Math.random() * 10;
 * }
 * var breaks = [0, 5, 8.5];
 *
 * var isobands = turf.isobands(pointGrid, breaks);
 *
 * //addToMap
 * var addToMap = [isobands];
 */
module.exports = function (pointGrid, breaks, zProperty, options) {
    // Input validation
    var isObject = function (input) {
        return (!!input) && (input.constructor === Object);
    };
    collectionOf(pointGrid, 'Point', 'Input must contain Points');
    if (!breaks || !Array.isArray(breaks)) throw new Error('breaks is required');
    options = options || {};
    if (options.commonProperties && !isObject(options.commonProperties)) {
        throw new Error('commonProperties is not an Object');
    }
    if (options.isobandProperties && !Array.isArray(options.isobandProperties)) {
        throw new Error('isobandProperties is not an Array');
    }
    if (zProperty && typeof zProperty !== 'string') { throw new Error('zProperty is not a string'); }

    zProperty = zProperty || 'elevation';
    var commonProperties = options.commonProperties || {};
    var isobandProperties = options.isobandProperties || [];

    // Isoband methods
    var matrix = gridToMatrix(pointGrid, zProperty, true);
    var contours = createContourLines(matrix, breaks, zProperty);
    contours = rescaleContours(contours, matrix, pointGrid);

    var multipolygons = contours.map(function (contour, index) {
        if (isobandProperties[index] && !isObject(isobandProperties[index])) {
            throw new Error('Each mappedProperty is required to be an Object');
        }
        // collect all properties
        var contourProperties = Object.assign(
            {},
            commonProperties,
            isobandProperties[index]
        );
        contourProperties[zProperty] = contour[zProperty];
        var multiP = multiPolygon(contour.groupedRings, contourProperties);
        return multiP;
    });

    return featureCollection(multipolygons);
};

/**
 * Creates the contours lines (featuresCollection of polygon features) from the 2D data grid
 *
 * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it
 * assumes the points (x-y coordinates) are one 'unit' distance. The result of the IsoBands function needs to be
 * rescaled, with turfjs, to the original area and proportions on the map
 *
 * @private
 * @param {Array<Array<number>>} matrix Grid Data
 * @param {Array<number>} breaks Breaks
 * @param {string} [property='elevation'] Property
 * @returns {Array<any>} contours
 */
function createContourLines(matrix, breaks, property) {

    var contours = [];
    for (var i = 1; i < breaks.length; i++) {
        var lowerBand = +breaks[i - 1]; // make sure the breaks value is a number
        var upperBand = +breaks[i];

        var isobandsCoords = marchingsquares.isoBands(matrix, lowerBand, upperBand - lowerBand);
        // as per GeoJson rules for creating a Polygon, make sure the first element
        // in the array of LinearRings represents the exterior ring (i.e. biggest area),
        // and any subsequent elements represent interior rings (i.e. smaller area);
        // this avoids rendering issues of the MultiPolygons on the map
        var nestedRings = orderByArea(isobandsCoords);
        var groupedRings = groupNestedRings(nestedRings);
        var obj = {};
        obj['groupedRings'] = groupedRings;
        obj[property] = lowerBand + '-' + upperBand;
        contours.push(obj);
    }
    return contours;
}

/**
 * Transform isobands of 2D grid to polygons for the map
 *
 * @private
 * @param {Array<any>} contours Contours
 * @param {Array<Array<number>>} matrix Grid Data
 * @param {Object} points Points by Latitude
 * @returns {Array<any>} contours
 */
function rescaleContours(contours, matrix, points) {

    // get dimensions (on the map) of the original grid
    var gridBbox = bbox(points); // [ minX, minY, maxX, maxY ]
    var originalWidth = gridBbox[2] - gridBbox[0];
    var originalHeigth = gridBbox[3] - gridBbox[1];

    // get origin, which is the first point of the last row on the rectangular data on the map
    var x0 = gridBbox[0];
    var y0 = gridBbox[1];
    // get number of cells per side
    var matrixWidth = matrix[0].length - 1;
    var matrixHeight = matrix.length - 1;
    // calculate the scaling factor between matrix and rectangular grid on the map
    var scaleX = originalWidth / matrixWidth;
    var scaleY = originalHeigth / matrixHeight;

    var resize = function (point) {
        point[0] = point[0] * scaleX + x0;
        point[1] = point[1] * scaleY + y0;
    };

    // resize and shift each point/line of the isobands
    contours.forEach(function (contour) {
        contour.groupedRings.forEach(function (lineRingSet) {
            lineRingSet.forEach(function (lineRing) {
                lineRing.forEach(resize);
            });
        });
    });
    return contours;
}


/*  utility functions */


/**
 * Returns an array of coordinates (of LinearRings) in descending order by area
 *
 * @private
 * @param {Array<LineString>} ringsCoords array of closed LineString
 * @returns {Array} array of the input LineString ordered by area
 */
function orderByArea(ringsCoords) {
    var ringsWithArea = [];
    var areas = [];
    ringsCoords.forEach(function (coords) {
        // var poly = polygon([points]);
        var ringArea = area(polygon([coords]));
        // create an array of areas value
        areas.push(ringArea);
        // associate each lineRing with its area
        ringsWithArea.push({ring: coords, area: ringArea});
    });
    areas.sort(function (a, b) { // bigger --> smaller
        return b - a;
    });
    // create a new array of linearRings coordinates ordered by their area
    var orderedByArea = [];
    areas.forEach(function (area) {
        for (var lr = 0; lr < ringsWithArea.length; lr++) {
            if (ringsWithArea[lr].area === area) {
                orderedByArea.push(ringsWithArea[lr].ring);
                ringsWithArea.splice(lr, 1);
                break;
            }
        }
    });
    return orderedByArea;
}

/**
 * Returns an array of arrays of coordinates, each representing
 * a set of (coordinates of) nested LinearRings,
 * i.e. the first ring contains all the others
 *
 * @private
 * @param {Array} orderedLinearRings array of coordinates (of LinearRings) in descending order by area
 * @returns {Array<Array>} Array of coordinates of nested LinearRings
 */
function groupNestedRings(orderedLinearRings) {
    // create a list of the (coordinates of) LinearRings
    var lrList = orderedLinearRings.map(function (lr) {
        return {lrCoordinates: lr, grouped: false};
    });
    var groupedLinearRingsCoords = [];
    while (!allGrouped(lrList)) {
        for (var i = 0; i < lrList.length; i++) {
            if (!lrList[i].grouped) {
                // create new group starting with the larger not already grouped ring
                var group = [];
                group.push(lrList[i].lrCoordinates);
                lrList[i].grouped = true;
                var outerMostPoly = polygon([lrList[i].lrCoordinates]);
                // group all the rings contained by the outermost ring
                for (var j = i + 1; j < lrList.length; j++) {
                    if (!lrList[j].grouped) {
                        var lrPoly = polygon([lrList[j].lrCoordinates]);
                        if (isInside(lrPoly, outerMostPoly)) {
                            group.push(lrList[j].lrCoordinates);
                            lrList[j].grouped = true;
                        }
                    }
                }
                // insert the new group
                groupedLinearRingsCoords.push(group);
            }
        }
    }
    return groupedLinearRingsCoords;
}

/**
 * @private
 * @param {Polygon} testPolygon polygon of interest
 * @param {Polygon} targetPolygon polygon you want to compare with
 * @returns {boolean} true if test-Polygon is inside target-Polygon
 */
function isInside(testPolygon, targetPolygon) {
    var points = explode(testPolygon);
    for (var i = 0; i < points.features.length; i++) {
        if (!inside(points.features[i], targetPolygon)) {
            return false;
        }
    }
    return true;
}

/**
 * @private
 * @param {Array<Object>} list list of objects which might contain the 'group' attribute
 * @returns {boolean} true if all the objects in the list are marked as grouped
 */
function allGrouped(list) {
    for (var i = 0; i < list.length; i++) {
        if (list[i].grouped === false) {
            return false;
        }
    }
    return true;
}


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var each = __webpack_require__(40).coordEach;

/**
 * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
 *
 * @name bbox
 * @param {(Feature|FeatureCollection)} geojson input features
 * @returns {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
 * @addToMap features, bboxPolygon
 * @example
 * var pt1 = turf.point([114.175329, 22.2524])
 * var pt2 = turf.point([114.170007, 22.267969])
 * var pt3 = turf.point([114.200649, 22.274641])
 * var pt4 = turf.point([114.200649, 22.274641])
 * var pt5 = turf.point([114.186744, 22.265745])
 * var features = turf.featureCollection([pt1, pt2, pt3, pt4, pt5])
 *
 * var bbox = turf.bbox(features);
 *
 * var bboxPolygon = turf.bboxPolygon(bbox);
 *
 * //=bbox
 *
 * //=bboxPolygon
 */
module.exports = function (geojson) {
    var bbox = [Infinity, Infinity, -Infinity, -Infinity];
    each(geojson, function (coord) {
        if (bbox[0] > coord[0]) bbox[0] = coord[0];
        if (bbox[1] > coord[1]) bbox[1] = coord[1];
        if (bbox[2] < coord[0]) bbox[2] = coord[0];
        if (bbox[3] < coord[1]) bbox[3] = coord[1];
    });
    return bbox;
};


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var area = __webpack_require__(42).geometry;
var geomReduce = __webpack_require__(40).geomReduce;

/**
 * Takes one or more features and returns their area in square meters.
 *
 * @name area
 * @param {FeatureCollection|Feature<any>} geojson input GeoJSON feature(s)
 * @returns {number} area in square meters
 * @addToMap polygon
 * @example
 * var polygon = {
 *   "type": "Feature",
 *   "properties": {},
 *   "geometry": {
 *     "type": "Polygon",
 *     "coordinates": [
 *       [
 *         [125, -15],
 *         [113, -22],
 *         [117, -37],
 *         [130, -33],
 *         [148, -39],
 *         [154, -27],
 *         [144, -15],
 *         [125, -15]
 *       ]
 *     ]
 *   }
 * }
 * var area = turf.area(polygon);
 * //=area => square meters
 * //=polygon
 */
module.exports = function (geojson) {
    return geomReduce(geojson, function (value, geometry) {
        return value + area(geometry);
    }, 0);
};


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

var invariant = __webpack_require__(105);

// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule
// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js
// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

/**
 * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point resides inside the polygon. The polygon can
 * be convex or concave. The function accounts for holes.
 *
 * @name inside
 * @param {Feature<Point>} point input point
 * @param {Feature<(Polygon|MultiPolygon)>} polygon input polygon or multipolygon
 * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon
 * @example
 * var pt = turf.point([-77, 44]);
 * var poly = turf.polygon([[
 *   [-81, 41],
 *   [-81, 47],
 *   [-72, 47],
 *   [-72, 41],
 *   [-81, 41]
 * ]]);
 *
 * var isInside = turf.inside(pt, poly);
 *
 * //=isInside
 */
module.exports = function (point, polygon) {
    var pt = invariant.getCoord(point);
    var polys = polygon.geometry.coordinates;
    // normalize to multipolygon
    if (polygon.geometry.type === 'Polygon') polys = [polys];

    for (var i = 0, insidePoly = false; i < polys.length && !insidePoly; i++) {
        // check if it is in the outer ring first
        if (inRing(pt, polys[i][0])) {
            var inHole = false;
            var k = 1;
            // check for the point in any of the holes
            while (k < polys[i].length && !inHole) {
                if (inRing(pt, polys[i][k], true)) {
                    inHole = true;
                }
                k++;
            }
            if (!inHole) insidePoly = true;
        }
    }
    return insidePoly;
};

// pt is [x,y] and ring is [[x,y], [x,y],..]
function inRing(pt, ring, ignoreBoundary) {
    var isInside = false;
    if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) ring = ring.slice(0, ring.length - 1);

    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {
        var xi = ring[i][0], yi = ring[i][1];
        var xj = ring[j][0], yj = ring[j][1];
        var onBoundary = (pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0) &&
            ((xi - pt[0]) * (xj - pt[0]) <= 0) && ((yi - pt[1]) * (yj - pt[1]) <= 0);
        if (onBoundary) return !ignoreBoundary;
        var intersect = ((yi > pt[1]) !== (yj > pt[1])) &&
        (pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi);
        if (intersect) isInside = !isInside;
    }
    return isInside;
}


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

var featureCollection = __webpack_require__(61).featureCollection;
var featureEach = __webpack_require__(40).featureEach;
var coordEach = __webpack_require__(40).coordEach;
var point = __webpack_require__(61).point;

/**
 * Takes a feature or set of features and returns all positions as
 * {@link Point|points}.
 *
 * @name explode
 * @param {(Feature|FeatureCollection)} geojson input features
 * @returns {FeatureCollection<point>} points representing the exploded input features
 * @throws {Error} if it encounters an unknown geometry type
 * @example
 * var poly = {
 *   "type": "Feature",
 *   "properties": {},
 *   "geometry": {
 *     "type": "Polygon",
 *     "coordinates": [[
 *       [177.434692, -17.77517],
 *       [177.402076, -17.779093],
 *       [177.38079, -17.803937],
 *       [177.40242, -17.826164],
 *       [177.438468, -17.824857],
 *       [177.454948, -17.796746],
 *       [177.434692, -17.77517]
 *     ]]
 *   }
 * };
 *
 * var points = turf.explode(poly);
 *
 * //=poly
 *
 * //=points
 */
module.exports = function (geojson) {
    var points = [];
    if (geojson.type === 'FeatureCollection') {
        featureEach(geojson, function (feature) {
            coordEach(feature, function (coord) {
                points.push(point(coord, feature.properties));
            });
        });
    } else {
        coordEach(geojson, function (coord) {
            points.push(point(coord, geojson.properties));
        });
    }
    return featureCollection(points);
};


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var centroid = __webpack_require__(29);
var invariant = __webpack_require__(14);
var rhumbBearing = __webpack_require__(57);
var rhumbDistance = __webpack_require__(60);
var rhumbDestination = __webpack_require__(39);
var coordEach = meta.coordEach;
var getCoords = invariant.getCoords;

/**
 * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point;
 * all rotations follow the right-hand rule: https://en.wikipedia.org/wiki/Right-hand_rule
 *
 * @name transformRotate
 * @param {GeoJSON} geojson object to be rotated
 * @param {number} angle of rotation (along the vertical axis), from North in decimal degrees, negative clockwise
 * @param {Geometry|Feature<Point>|Array<number>} [pivot=`centroid`] point around which the rotation will be performed
 * @param {boolean} [mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
 * @returns {GeoJSON} the rotated GeoJSON feature
 * @example
 * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);
 * var rotatedPoly = turf.transformRotate(poly, 10, [0, 25]);
 *
 * //addToMap
 * var addToMap = [poly, rotatedPoly];
 * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};
 */
module.exports = function (geojson, angle, pivot, mutate) {
    // Input validation
    if (!geojson) throw new Error('geojson is required');
    if (angle === undefined || angle === null || isNaN(angle)) throw new Error('angle is required');

    // Shortcut no-rotation
    if (angle === 0) return geojson;

    // Use centroid of GeoJSON if pivot is not provided
    if (!pivot) pivot = centroid(geojson);

    // Clone geojson to avoid side effects
    if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));

    // Rotate each coordinate
    coordEach(geojson, function (pointCoords) {
        var initialAngle = rhumbBearing(pivot, pointCoords);
        var finalAngle = initialAngle + angle;
        var distance = rhumbDistance(pivot, pointCoords);
        var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));
        pointCoords[0] = newCoords[0];
        pointCoords[1] = newCoords[1];
    });
    return geojson;
};


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var center = __webpack_require__(36);
var helpers = __webpack_require__(13);
var centroid = __webpack_require__(29);
var turfBBox = __webpack_require__(10);
var invariant = __webpack_require__(14);
var rhumbBearing = __webpack_require__(57);
var rhumbDistance = __webpack_require__(60);
var rhumbDestination = __webpack_require__(39);
var point = helpers.point;
var coordEach = meta.coordEach;
var featureEach = meta.featureEach;
var getCoord = invariant.getCoord;
var getCoords = invariant.getCoords;


/**
 * Scale a GeoJSON from a given point by a factor of scaling (ex: factor=2 would make the GeoJSON 200% larger).
 * If a FeatureCollection is provided, the origin point will be calculated based on each individual Feature.
 *
 * @name transformScale
 * @param {GeoJSON} geojson GeoJSON to be scaled
 * @param {number} factor of scaling, positive or negative values greater than 0
 * @param {string|Geometry|Feature<Point>|Array<number>} [origin="centroid"] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)
 * @param {boolean} [mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
 * @returns {GeoJSON} scaled GeoJSON
 * @example
 * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);
 * var scaledPoly = turf.transformScale(poly, 3);
 *
 * //addToMap
 * var addToMap = [poly, scaledPoly];
 * scaledPoly.properties = {stroke: '#F00', 'stroke-width': 4};
 */
module.exports = function (geojson, factor, origin, mutate) {
    // Input validation
    if (!geojson) throw new Error('geojson required');
    if (typeof factor !== 'number' || factor === 0) throw new Error('invalid factor');
    var originIsPoint = Array.isArray(origin) || typeof origin === 'object';

    // Clone geojson to avoid side effects
    if (mutate !== true) geojson = JSON.parse(JSON.stringify(geojson));

    // Scale each Feature separately
    if (geojson.type === 'FeatureCollection' && !originIsPoint) {
        featureEach(geojson, function (feature, index) {
            geojson.features[index] = scale(feature, factor, origin);
        });
        return geojson;
    }
    // Scale Feature/Geometry
    return scale(geojson, factor, origin);
};

/**
 * Scale Feature/Geometry
 *
 * @private
 * @param {Feature|Geometry} geojson GeoJSON Feature/Geometry
 * @param {number} factor of scaling, positive or negative values greater than 0
 * @param {string|Geometry|Feature<Point>|Array<number>} [origin="centroid"] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)
 * @returns {Feature|Geometry} scaled GeoJSON Feature/Geometry
 */
function scale(geojson, factor, origin) {
    // Default params
    var isPoint = (geojson.type === 'Point' || geojson.geometry && geojson.geometry.type === 'Point');
    origin = defineOrigin(geojson, origin);

    // Shortcut no-scaling
    if (factor === 1 || isPoint) return geojson;

    // Scale each coordinate
    coordEach(geojson, function (coord) {
        var originalDistance = rhumbDistance(origin, coord);
        var bearing = rhumbBearing(origin, coord);
        var newDistance = originalDistance * factor;
        var newCoord = getCoords(rhumbDestination(origin, newDistance, bearing));
        coord[0] = newCoord[0];
        coord[1] = newCoord[1];
        if (coord.length === 3) coord[2] *= factor;
    });

    return geojson;
}

/**
 * Define Origin
 *
 * @private
 * @param {GeoJSON} geojson GeoJSON
 * @param {string|Geometry|Feature<Point>|Array<number>} origin sw/se/nw/ne/center/centroid
 * @returns {Feature<Point>} Point origin
 */
function defineOrigin(geojson, origin) {
    // Default params
    if (origin === undefined || origin === null) origin = 'centroid';

    // Input Geometry|Feature<Point>|Array<number>
    if (Array.isArray(origin) || typeof origin === 'object') return getCoord(origin);

    // Define BBox
    var bbox = (geojson.bbox) ? geojson.bbox : turfBBox(geojson);
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];

    switch (origin) {
    case 'sw':
    case 'southwest':
    case 'westsouth':
    case 'bottomleft':
        return point([west, south]);
    case 'se':
    case 'southeast':
    case 'eastsouth':
    case 'bottomright':
        return point([east, south]);
    case 'nw':
    case 'northwest':
    case 'westnorth':
    case 'topleft':
        return point([west, north]);
    case 'ne':
    case 'northeast':
    case 'eastnorth':
    case 'topright':
        return point([east, north]);
    case 'center':
        return center(geojson);
    case undefined:
    case null:
    case 'centroid':
        return centroid(geojson);
    default:
        throw new Error('invalid origin');
    }
}


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var invariant = __webpack_require__(14);
var rhumbDestination = __webpack_require__(39);
var coordEach = meta.coordEach;
var getCoords = invariant.getCoords;

/**
 * Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line
 * on the provided direction angle.
 *
 * @name transformTranslate
 * @param {GeoJSON} geojson object to be translated
 * @param {number} distance length of the motion; negative values determine motion in opposite direction
 * @param {number} direction of the motion; angle from North in decimal degrees, positive clockwise
 * @param {string} [units=kilometers] in which `distance` will be express; miles, kilometers, degrees, or radians
 * @param {number} [zTranslation=0] length of the vertical motion, same unit of distance
 * @param {boolean} [mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
 * @returns {GeoJSON} the translated GeoJSON object
 * @example
 * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);
 * var translatedPoly = turf.transformTranslate(poly, 100, 35);
 *
 * //addToMap
 * var addToMap = [poly, translatedPoly];
 * translatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};
 */
module.exports = function (geojson, distance, direction, units, zTranslation, mutate) {
    // Input validation
    if (!geojson) throw new Error('geojson is required');
    if (distance === undefined || distance === null || isNaN(distance)) throw new Error('distance is required');
    if (zTranslation && typeof zTranslation !== 'number' && isNaN(zTranslation)) throw new Error('zTranslation is not a number');

    // Shortcut no-motion
    zTranslation = (zTranslation !== undefined) ? zTranslation : 0;
    if (distance === 0 && zTranslation === 0) return geojson;

    if (direction === undefined || direction === null || isNaN(direction)) throw new Error('direction is required');

    // Invert with negative distances
    if (distance < 0) {
        distance = -distance;
        direction = -direction;
    }

    // Clone geojson to avoid side effects
    if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));

    // Translate each coordinate
    coordEach(geojson, function (pointCoords) {
        var newCoords = getCoords(rhumbDestination(pointCoords, distance, direction, units));
        pointCoords[0] = newCoords[0];
        pointCoords[1] = newCoords[1];
        if (zTranslation && pointCoords.length === 3) pointCoords[2] += zTranslation;
    });
    return geojson;
};


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

var meta = __webpack_require__(1);
var helpers = __webpack_require__(13);
var getCoords = __webpack_require__(14).getCoords;
var intersection = __webpack_require__(244);
var flattenEach = meta.flattenEach;
var lineString = helpers.lineString;
var multiLineString = helpers.multiLineString;
var distanceToDegrees = helpers.distanceToDegrees;

/**
 * Takes a {@link LineString|line} and returns a {@link LineString|line} at offset by the specified distance.
 *
 * @name lineOffset
 * @param {Geometry|Feature<LineString|MultiLineString>} geojson input GeoJSON
 * @param {number} distance distance to offset the line (can be of negative value)
 * @param {string} [units=kilometers] can be degrees, radians, miles, kilometers, inches, yards, meters
 * @returns {Feature<LineString|MultiLineString>} Line offset from the input line
 * @example
 * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]], { "stroke": "#F00" });
 *
 * var offsetLine = turf.lineOffset(line, 2, "miles");
 *
 * //addToMap
 * var addToMap = [offsetLine, line]
 * offsetLine.properties.stroke = "#00F"
 */
module.exports = function (geojson, distance, units) {
    if (!geojson) throw new Error('geojson is required');
    if (distance === undefined || distance === null || isNaN(distance)) throw new Error('distance is required');
    var type = (geojson.type === 'Feature') ? geojson.geometry.type : geojson.type;
    var properties = geojson.properties;

    switch (type) {
    case 'LineString':
        return lineOffset(geojson, distance, units);
    case 'MultiLineString':
        var coords = [];
        flattenEach(geojson, function (feature) {
            coords.push(lineOffset(feature, distance, units).geometry.coordinates);
        });
        return multiLineString(coords, properties);
    default:
        throw new Error('geometry ' + type + ' is not supported');
    }
};

/**
 * Line Offset
 *
 * @private
 * @param {Geometry|Feature<LineString>} line input line
 * @param {number} distance distance to offset the line (can be of negative value)
 * @param {string} [units=kilometers] units
 * @returns {Feature<LineString>} Line offset from the input line
 */
function lineOffset(line, distance, units) {
    var segments = [];
    var offsetDegrees = distanceToDegrees(distance, units);
    var coords = getCoords(line);
    var finalCoords = [];
    coords.forEach(function (currentCoords, index) {
        if (index !== coords.length - 1) {
            var segment = processSegment(currentCoords, coords[index + 1], offsetDegrees);
            segments.push(segment);
            if (index > 0) {
                var seg2Coords = segments[index - 1];
                var intersects = intersection(segment, seg2Coords);

                // Handling for line segments that aren't straight
                if (intersects !== false) {
                    seg2Coords[1] = intersects;
                    segment[0] = intersects;
                }

                finalCoords.push(seg2Coords[0]);
                if (index === coords.length - 2) {
                    finalCoords.push(segment[0]);
                    finalCoords.push(segment[1]);
                }
            }
            // Handling for lines that only have 1 segment
            if (coords.length === 2) {
                finalCoords.push(segment[0]);
                finalCoords.push(segment[1]);
            }
        }
    });
    return lineString(finalCoords, line.properties);
}

/**
 * Process Segment
 * Inspiration taken from http://stackoverflow.com/questions/2825412/draw-a-parallel-line
 *
 * @private
 * @param {Array<number>} point1 Point coordinates
 * @param {Array<number>} point2 Point coordinates
 * @param {number} offset Offset
 * @returns {Array<Array<number>>} offset points
 */
function processSegment(point1, point2, offset) {
    var L = Math.sqrt((point1[0] - point2[0]) * (point1[0] - point2[0]) + (point1[1] - point2[1]) * (point1[1] - point2[1]));

    var out1x = point1[0] + offset * (point2[1] - point1[1]) / L;
    var out2x = point2[0] + offset * (point2[1] - point1[1]) / L;
    var out1y = point1[1] + offset * (point1[0] - point2[0]) / L;
    var out2y = point2[1] + offset * (point1[0] - point2[0]) / L;
    return [[out1x, out1y], [out2x, out2y]];
}


/***/ }),
/* 244 */
/***/ (function(module, exports) {

/**
 * https://github.com/rook2pawn/node-intersection
 *
 * Author @rook2pawn
 */

/**
 * AB
 *
 * @private
 * @param {Array<Array<number>>} segment - 2 vertex line segment
 * @returns {Array<number>} coordinates [x, y]
 */
function ab(segment) {
    var start = segment[0];
    var end = segment[1];
    return [end[0] - start[0], end[1] - start[1]];
}

/**
 * Cross Product
 *
 * @private
 * @param {Array<number>} v1 coordinates [x, y]
 * @param {Array<number>} v2 coordinates [x, y]
 * @returns {Array<number>} Cross Product
 */
function crossProduct(v1, v2) {
    return (v1[0] * v2[1]) - (v2[0] * v1[1]);
}

/**
 * Add
 *
 * @private
 * @param {Array<number>} v1 coordinates [x, y]
 * @param {Array<number>} v2 coordinates [x, y]
 * @returns {Array<number>} Add
 */
function add(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1]];
}

/**
 * Sub
 *
 * @private
 * @param {Array<number>} v1 coordinates [x, y]
 * @param {Array<number>} v2 coordinates [x, y]
 * @returns {Array<number>} Sub
 */
function sub(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1]];
}

/**
 * scalarMult
 *
 * @private
 * @param {number} s scalar
 * @param {Array<number>} v coordinates [x, y]
 * @returns {Array<number>} scalarMult
 */
function scalarMult(s, v) {
    return [s * v[0], s * v[1]];
}

/**
 * Intersect Segments
 *
 * @private
 * @param {Array<number>} a coordinates [x, y]
 * @param {Array<number>} b coordinates [x, y]
 * @returns {Array<number>} intersection
 */
function intersectSegments(a, b) {
    var p = a[0];
    var r = ab(a);
    var q = b[0];
    var s = ab(b);

    var cross = crossProduct(r, s);
    var qmp = sub(q, p);
    var numerator = crossProduct(qmp, s);
    var t = numerator / cross;
    var intersection = add(p, scalarMult(t, r));
    return intersection;
}

/**
 * Is Parallel
 *
 * @private
 * @param {Array<number>} a coordinates [x, y]
 * @param {Array<number>} b coordinates [x, y]
 * @returns {boolean} true if a and b are parallel (or co-linear)
 */
function isParallel(a, b) {
    var r = ab(a);
    var s = ab(b);
    return (crossProduct(r, s) === 0);
}

/**
 * Intersection
 *
 * @private
 * @param {Array<number>} a coordinates [x, y]
 * @param {Array<number>} b coordinates [x, y]
 * @returns {Array<number>|boolean} true if a and b are parallel (or co-linear)
 */
function intersection(a, b) {
    if (isParallel(a, b)) return false;
    return intersectSegments(a, b);
}

module.exports = intersection;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

var polygonize = __webpack_require__(246);

/**
 * Polygonizes {@link LineString|(Multi)LineString(s)} into {@link Polygons}.
 *
 * Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).
 *
 * Polygonizes a set of lines that represents edges in a planar graph. Edges must be correctly
 * noded, i.e., they must only meet at their endpoints.
 *
 * The implementation correctly handles:
 *
 * - Dangles: edges which have one or both ends which are not incident on another edge endpoint.
 * - Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.
 *
 * @name polygonize
 * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geojson Lines in order to polygonize
 * @returns {FeatureCollection<Polygon>} Polygons created
 * @throws {Error} if GeoJSON is invalid.
 */
module.exports = function (geojson) {
    return polygonize(geojson);
};


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Graph = __webpack_require__(247),
    EdgeRing = __webpack_require__(106),
    _require = __webpack_require__(13),
    featureCollection = _require.featureCollection;

/**
 * Polygonizes {@link LineString|(Multi)LineString(s)} into {@link Polygons}.
 *
 * Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).
 *
 * Polygonizes a set of lines that represents edges in a planar graph. Edges must be correctly
 * noded, i.e., they must only meet at their endpoints.
 *
 * The implementation correctly handles:
 *
 * - Dangles: edges which have one or both ends which are not incident on another edge endpoint.
 * - Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.
 *
 * @name polygonize
 * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geoJson Lines in order to polygonize
 * @returns {FeatureCollection<Polygon>} Polygons created
 * @throws {Error} if geoJson is invalid.
 */
module.exports = function polygonize(geoJson) {
  var graph = Graph.fromGeoJson(geoJson);

  // 1. Remove dangle node
  graph.deleteDangles();

  // 2. Remove cut-edges (bridge edges)
  graph.deleteCutEdges();

  // 3. Get all holes and shells
  var holes = [],
      shells = [];

  graph.getEdgeRings().filter(function (edgeRing) {
    return edgeRing.isValid();
  }).forEach(function (edgeRing) {
    if (edgeRing.isHole()) holes.push(edgeRing);else shells.push(edgeRing);
  });

  // 4. Assign Holes to Shells
  holes.forEach(function (hole) {
    if (EdgeRing.findEdgeRingContaining(hole, shells)) shells.push(hole);
  });

  // 5. EdgeRings to Polygons
  return featureCollection(shells.map(function (shell) {
    return shell.toPolygon();
  }));
};

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Node = __webpack_require__(248),
    Edge = __webpack_require__(249),
    EdgeRing = __webpack_require__(106),
    _require = __webpack_require__(1),
    flattenEach = _require.flattenEach,
    coordReduce = _require.coordReduce,
    _require2 = __webpack_require__(14),
    featureOf = _require2.featureOf;

/** Validates the geoJson.
 *
 * @param {Geojson} geoJson - input geoJson.
 * @throws {Error} if geoJson is invalid.
 */
function validateGeoJson(geoJson) {
  if (!geoJson) throw new Error('No geojson passed');

  if (geoJson.type !== 'FeatureCollection' && geoJson.type !== 'GeometryCollection' && geoJson.type !== 'MultiLineString' && geoJson.type !== 'LineString' && geoJson.type !== 'Feature') throw new Error('Invalid input type \'' + geoJson.type + '\'. Geojson must be FeatureCollection, GeometryCollection, LineString, MultiLineString or Feature');
}

/** Represents a planar graph of edges and nodes that can be used to compute a
 * polygonization.
 *
 * Although, this class is inspired by GEOS's `geos::operation::polygonize::PolygonizeGraph`,
 * it isn't a rewrite. As regards algorithm, this class implements the same logic, but it
 * isn't a javascript transcription of the C++ source.
 *
 * This graph is directed (both directions are created)
 */

var Graph = function () {
  _createClass(Graph, [{
    key: 'getNode',


    /** Creates or get a Node.
     *
     * @param {Number[]} coordinates - Coordinates of the node
     * @returns {Node} - The created or stored node
     */
    value: function getNode(coordinates) {
      var id = Node.buildId(coordinates);
      var node = this.nodes[id];
      if (!node) node = this.nodes[id] = new Node(coordinates);

      return node;
    }

    /** Adds an Edge and its symetricall.
     * Edges are added symetrically, i.e.: we also add its symetric
     *
     * @param {Node} from - Node which starts the Edge
     * @param {Node} to - Node which ends the Edge
     */

  }, {
    key: 'addEdge',
    value: function addEdge(from, to) {
      var edge = new Edge(from, to),
          symetricEdge = edge.getSymetric();

      this.edges.push(edge);
      this.edges.push(symetricEdge);
    }
  }], [{
    key: 'fromGeoJson',

    /** Creates a graph from a GeoJSON.
     *
     * @param {FeatureCollection<LineString>} geoJson - it must comply with the restrictions detailed in the index
     * @returns {Graph} - The newly created graph
     * @throws {Error} if geoJson is invalid.
     */
    value: function fromGeoJson(geoJson) {
      validateGeoJson(geoJson);

      var graph = new Graph();
      flattenEach(geoJson, function (feature) {
        featureOf(feature, 'LineString', 'Graph::fromGeoJson');
        // When a LineString if formed by many segments, split them
        coordReduce(feature, function (prev, cur) {
          if (prev) {
            var start = graph.getNode(prev),
                end = graph.getNode(cur);

            graph.addEdge(start, end);
          }
          return cur;
        });
      });

      return graph;
    }
  }]);

  function Graph() {
    _classCallCheck(this, Graph);

    this.edges = []; //< {Edge[]} dirEdges

    // The key is the `id` of the Node (ie: coordinates.join(','))
    this.nodes = {};
  }

  /** Removes Dangle Nodes (nodes with grade 1).
   */


  _createClass(Graph, [{
    key: 'deleteDangles',
    value: function deleteDangles() {
      var _this = this;

      Object.keys(this.nodes).map(function (id) {
        return _this.nodes[id];
      }).forEach(function (node) {
        return _this._removeIfDangle(node);
      });
    }

    /** Check if node is dangle, if so, remove it.
     * It calls itself recursively, removing a dangling node might cause another dangling node
     *
     * @param {Node} node - Node to check if it's a dangle
     */

  }, {
    key: '_removeIfDangle',
    value: function _removeIfDangle(node) {
      var _this2 = this;

      // As edges are directed and symetrical, we count only innerEdges
      if (node.innerEdges.length <= 1) {
        var outerNodes = node.getOuterEdges().map(function (e) {
          return e.to;
        });
        this.removeNode(node);
        outerNodes.forEach(function (n) {
          return _this2._removeIfDangle(n);
        });
      }
    }

    /** Delete cut-edges (bridge edges).
     *
     * The graph will be traversed, all the edges will be labeled according the ring
     * in which they are. (The label is a number incremented by 1). Edges with the same
     * label are cut-edges.
     */

  }, {
    key: 'deleteCutEdges',
    value: function deleteCutEdges() {
      var _this3 = this;

      this._computeNextCWEdges();
      this._findLabeledEdgeRings();

      // Cut-edges (bridges) are edges where both edges have the same label
      this.edges.forEach(function (edge) {
        if (edge.label === edge.symetric.label) {
          _this3.removeEdge(edge.symetric);
          _this3.removeEdge(edge);
        }
      });
    }

    /** Set the `next` property of each Edge.
     * The graph will be transversed in a CW form, so, we set the next of the symetrical edge as the previous one.
     * OuterEdges are sorted CCW.
     *
     * @param {Node} [node] - If no node is passed, the function calls itself for every node in the Graph
     */

  }, {
    key: '_computeNextCWEdges',
    value: function _computeNextCWEdges(node) {
      var _this4 = this;

      if (typeof node === 'undefined') {
        Object.keys(this.nodes).forEach(function (id) {
          return _this4._computeNextCWEdges(_this4.nodes[id]);
        });
      } else {
        node.getOuterEdges().forEach(function (edge, i) {
          node.getOuterEdge((i === 0 ? node.getOuterEdges().length : i) - 1).symetric.next = edge;
        });
      }
    }

    /** Computes the next edge pointers going CCW around the given node, for the given edgering label.
     * This algorithm has the effect of converting maximal edgerings into minimal edgerings
     *
     * XXX: method literally transcribed from `geos::operation::polygonize::PolygonizeGraph::computeNextCCWEdges`,
     * could be written in a more javascript way.
     *
     * @param {Node} node - Node
     * @param {Number} label - Ring's label
     */

  }, {
    key: '_computeNextCCWEdges',
    value: function _computeNextCCWEdges(node, label) {
      var edges = node.getOuterEdges();
      var firstOutDE = void 0,
          prevInDE = void 0;

      for (var i = edges.length - 1; i >= 0; --i) {
        var de = edges[i],
            sym = de.symetric,
            outDE = void 0,
            inDE = void 0;

        if (de.label === label) outDE = de;

        if (sym.label === label) inDE = sym;

        if (!outDE || !inDE) // This edge is not in edgering
          continue;

        if (inDE) prevInDE = inDE;

        if (outDE) {
          if (prevInDE) {
            prevInDE.next = outDE;
            prevInDE = undefined;
          }

          if (!firstOutDE) firstOutDE = outDE;
        }
      }

      if (prevInDE) prevInDE.next = firstOutDE;
    }

    /** Finds rings and labels edges according to which rings are.
     * The label is a number which is increased for each ring.
     *
     * @returns {Edge[]} edges that start rings
     */

  }, {
    key: '_findLabeledEdgeRings',
    value: function _findLabeledEdgeRings() {
      var edgeRingStarts = [];
      var label = 0;
      this.edges.forEach(function (edge) {
        if (edge.label >= 0) return;

        edgeRingStarts.push(edge);

        var e = edge;
        do {
          e.label = label;
          e = e.next;
        } while (!edge.isEqual(e));

        label++;
      });

      return edgeRingStarts;
    }

    /** Computes the EdgeRings formed by the edges in this graph.
     *
     * @returns {EdgeRing[]} - A list of all the EdgeRings in the graph.
     */

  }, {
    key: 'getEdgeRings',
    value: function getEdgeRings() {
      var _this5 = this;

      this._computeNextCWEdges();

      // Clear labels
      this.edges.forEach(function (edge) {
        edge.label = undefined;
      });

      this._findLabeledEdgeRings().forEach(function (edge) {
        // convertMaximalToMinimalEdgeRings
        _this5._findIntersectionNodes(edge).forEach(function (node) {
          _this5._computeNextCCWEdges(node, edge.label);
        });
      });

      var edgeRingList = [];

      // find all edgerings
      this.edges.forEach(function (edge) {
        if (edge.ring) return;
        edgeRingList.push(_this5._findEdgeRing(edge));
      });

      return edgeRingList;
    }

    /** Find all nodes in a Maxima EdgeRing which are self-intersection nodes.
     *
     * @param {Node} startEdge - Start Edge of the Ring
     * @returns {Node[]} - intersection nodes
     */

  }, {
    key: '_findIntersectionNodes',
    value: function _findIntersectionNodes(startEdge) {
      var intersectionNodes = [];
      var edge = startEdge;

      var _loop = function _loop() {
        // getDegree
        var degree = 0;
        edge.from.getOuterEdges().forEach(function (e) {
          if (e.label === startEdge.label) ++degree;
        });

        if (degree > 1) intersectionNodes.push(edge.from);

        edge = edge.next;
      };

      do {
        _loop();
      } while (!startEdge.isEqual(edge));

      return intersectionNodes;
    }

    /** Get the edge-ring which starts from the provided Edge.
     *
     * @param {Edge} startEdge - starting edge of the edge ring
     * @returns {EdgeRing} - EdgeRing which start Edge is the provided one.
     */

  }, {
    key: '_findEdgeRing',
    value: function _findEdgeRing(startEdge) {
      var edge = startEdge;
      var edgeRing = new EdgeRing();

      do {
        edgeRing.push(edge);
        edge.ring = edgeRing;
        edge = edge.next;
      } while (!startEdge.isEqual(edge));

      return edgeRing;
    }

    /** Removes a node from the Graph.
     *
     * It also removes edges asociated to that node
     * @param {Node} node - Node to be removed
     */

  }, {
    key: 'removeNode',
    value: function removeNode(node) {
      var _this6 = this;

      node.getOuterEdges().forEach(function (edge) {
        return _this6.removeEdge(edge);
      });
      node.innerEdges.forEach(function (edge) {
        return _this6.removeEdge(edge);
      });
      delete this.nodes[node.id];
    }

    /** Remove edge from the graph and deletes the edge.
     *
     * @param {Edge} edge - Edge to be removed
     */

  }, {
    key: 'removeEdge',
    value: function removeEdge(edge) {
      this.edges = this.edges.filter(function (e) {
        return !e.isEqual(edge);
      });
      edge.deleteEdge();
    }
  }]);

  return Graph;
}();

module.exports = Graph;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(62),
    orientationIndex = _require.orientationIndex;

var Node = function () {
  _createClass(Node, null, [{
    key: 'buildId',
    value: function buildId(coordinates) {
      return coordinates.join(',');
    }
  }]);

  function Node(coordinates) {
    _classCallCheck(this, Node);

    this.id = Node.buildId(coordinates);
    this.coordinates = coordinates; //< {Number[]}
    this.innerEdges = []; //< {Edge[]}

    // We wil store to (out) edges in an CCW order as geos::planargraph::DirectedEdgeStar does
    this.outerEdges = []; //< {Edge[]}
    this.outerEdgesSorted = false; //< {Boolean} flag that stores if the outer Edges had been sorted
  }

  _createClass(Node, [{
    key: 'removeInnerEdge',
    value: function removeInnerEdge(edge) {
      this.innerEdges = this.innerEdges.filter(function (e) {
        return e.from.id !== edge.from.id;
      });
    }
  }, {
    key: 'removeOuterEdge',
    value: function removeOuterEdge(edge) {
      this.outerEdges = this.outerEdges.filter(function (e) {
        return e.to.id !== edge.to.id;
      });
    }

    /** Outer edges are stored CCW order.
     * @param {Edge} edge - Edge to add as an outerEdge.
     */

  }, {
    key: 'addOuterEdge',
    value: function addOuterEdge(edge) {
      this.outerEdges.push(edge);
      this.outerEdgesSorted = false;
    }

    /** Sorts outer edges in CCW way.
     * @private
     */

  }, {
    key: 'sortOuterEdges',
    value: function sortOuterEdges() {
      var _this = this;

      if (!this.outerEdgesSorted) {
        //this.outerEdges.sort((a, b) => a.compareTo(b));
        // Using this comparator in order to be deterministic
        this.outerEdges.sort(function (a, b) {
          var aNode = a.to,
              bNode = b.to;

          if (aNode.coordinates[0] - _this.coordinates[0] >= 0 && bNode.coordinates[0] - _this.coordinates[0] < 0) return 1;
          if (aNode.coordinates[0] - _this.coordinates[0] < 0 && bNode.coordinates[0] - _this.coordinates[0] >= 0) return -1;

          if (aNode.coordinates[0] - _this.coordinates[0] === 0 && bNode.coordinates[0] - _this.coordinates[0] === 0) {
            if (aNode.coordinates[1] - _this.coordinates[1] >= 0 || bNode.coordinates[1] - _this.coordinates[1] >= 0) return aNode.coordinates[1] - bNode.coordinates[1];
            return bNode.coordinates[1] - aNode.coordinates[1];
          }

          var det = orientationIndex(_this.coordinates, aNode.coordinates, bNode.coordinates);
          if (det < 0) return 1;
          if (det > 0) return -1;

          var d1 = Math.pow(aNode.coordinates[0] - _this.coordinates[0], 2) + Math.pow(aNode.coordinates[1] - _this.coordinates[1], 2),
              d2 = Math.pow(bNode.coordinates[0] - _this.coordinates[0], 2) + Math.pow(bNode.coordinates[1] - _this.coordinates[1], 2);

          return d1 - d2;
        });
        this.outerEdgesSorted = true;
      }
    }

    /** Retrieves outer edges.
     * They are sorted if they aren't in the CCW order.
     * @returns {Edge[]} - List of outer edges sorted in a CCW order.
     */

  }, {
    key: 'getOuterEdges',
    value: function getOuterEdges() {
      this.sortOuterEdges();
      return this.outerEdges;
    }
  }, {
    key: 'getOuterEdge',
    value: function getOuterEdge(i) {
      this.sortOuterEdges();
      return this.outerEdges[i];
    }
  }, {
    key: 'addInnerEdge',
    value: function addInnerEdge(edge) {
      this.innerEdges.push(edge);
    }
  }]);

  return Node;
}();

module.exports = Node;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(13),
    lineString = _require.lineString,
    _require2 = __webpack_require__(62),
    orientationIndex = _require2.orientationIndex;

/** This class is inspired by GEOS's geos::operation::polygonize::PolygonizeDirectedEdge
 */


var Edge = function () {
  _createClass(Edge, [{
    key: 'getSymetric',

    /** Creates or get the symetric Edge.
     *
     * @returns {Edge} - Symetric Edge.
     */
    value: function getSymetric() {
      if (!this.symetric) {
        this.symetric = new Edge(this.to, this.from);
        this.symetric.symetric = this;
      }

      return this.symetric;
    }

    /**
     * @param {Node} from - start node of the Edge
     * @param {Node} to - end node of the edge
     */

  }]);

  function Edge(from, to) {
    _classCallCheck(this, Edge);

    this.from = from; //< start
    this.to = to; //< End

    this.next = undefined; //< The edge to be computed after
    this.label = undefined; //< Used in order to detect Cut Edges (Bridges)
    this.symetric = undefined; //< The symetric edge of this
    this.ring = undefined; //< EdgeRing in which the Edge is

    this.from.addOuterEdge(this);
    this.to.addInnerEdge(this);
  }

  /** Removes edge from from and to nodes.
   */


  _createClass(Edge, [{
    key: 'deleteEdge',
    value: function deleteEdge() {
      this.from.removeOuterEdge(this);
      this.to.removeInnerEdge(this);
    }

    /** Compares Edge equallity.
     * An edge is equal to another, if the from and to nodes are the same.
     *
     * @param {Edge} edge - Another Edge
     * @returns {Boolean} - True if Edges are equal, False otherwise
     */

  }, {
    key: 'isEqual',
    value: function isEqual(edge) {
      return this.from.id === edge.from.id && this.to.id === edge.to.id;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'Edge { ' + this.from.id + ' -> ' + this.to.id + ' }';
    }

    /** Returns a LineString representation of the Edge
     *
     * @returns {Feature<LineString>} - LineString representation of the Edge
     */

  }, {
    key: 'toLineString',
    value: function toLineString() {
      return lineString([this.from.coordinates, this.to.coordinates]);
    }

    /** Comparator of two edges.
     * Implementation of geos::planargraph::DirectedEdge::compareTo.
     *
     * @param {Edge} edge - Another edge to compare with this one
     * @returns {Number} -1 if this Edge has a greater angle with the positive x-axis than b,
     *          0 if the Edges are colinear,
     *          1 otherwise
     */

  }, {
    key: 'compareTo',
    value: function compareTo(edge) {
      return orientationIndex(edge.from.coordinates, edge.to.coordinates, this.to.coordinates);
    }
  }]);

  return Edge;
}();

module.exports = Edge;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

var inside = __webpack_require__(17);
var flattenEach = __webpack_require__(1).flattenEach;
var lineIntersect = __webpack_require__(30);
var polyToLinestring = __webpack_require__(56);

/**
 * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.
 *
 * @name booleanDisjoint
 * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
 * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
 * @returns {Boolean} true/false
 * @example
 * const point = turf.point([2, 2]);
 * const line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
 *
 * turf.booleanDisjoint(line, point);
 * //=true
 */
module.exports = function (feature1, feature2) {
    var boolean;
    flattenEach(feature1, function (flatten1) {
        flattenEach(feature2, function (flatten2) {
            if (boolean === false) return false;
            boolean = disjoint(flatten1.geometry, flatten2.geometry);
        });
    });
    return boolean;
};

/**
 * Disjoint operation for simple Geometries (Point/LineString/Polygon)
 *
 * @private
 * @param {Geometry<any>} geom1 GeoJSON Geometry
 * @param {Geometry<any>} geom2 GeoJSON Geometry
 * @returns {Boolean} true/false
 */
function disjoint(geom1, geom2) {
    switch (geom1.type) {
    case 'Point':
        switch (geom2.type) {
        case 'Point':
            return !compareCoords(geom1.coordinates, geom2.coordinates);
        case 'LineString':
            return !isPointOnLine(geom2, geom1);
        case 'Polygon':
            return !inside(geom1, geom2);
        }
        /* istanbul ignore next */
        break;
    case 'LineString':
        switch (geom2.type) {
        case 'Point':
            return !isPointOnLine(geom1, geom2);
        case 'LineString':
            return !isLineOnLine(geom1, geom2);
        case 'Polygon':
            return !isLineInPoly(geom2, geom1);
        }
        /* istanbul ignore next */
        break;
    case 'Polygon':
        switch (geom2.type) {
        case 'Point':
            return !inside(geom2, geom1);
        case 'LineString':
            return !isLineInPoly(geom1, geom2);
        case 'Polygon':
            return !isPolyInPoly(geom2, geom1);
        }
    }
}

// http://stackoverflow.com/a/11908158/1979085
function isPointOnLine(lineString, point) {
    for (var i = 0; i < lineString.coordinates.length - 1; i++) {
        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], point.coordinates)) {
            return true;
        }
    }
    return false;
}

function isLineOnLine(lineString1, lineString2) {
    var doLinesIntersect = lineIntersect(lineString1, lineString2);
    if (doLinesIntersect.features.length > 0) {
        return true;
    }
    return false;
}

function isLineInPoly(polygon, lineString) {
    var doLinesIntersect = lineIntersect(lineString, polyToLinestring(polygon));
    if (doLinesIntersect.features.length > 0) {
        return true;
    }
    return false;
}

/**
 * Is Polygon (geom1) in Polygon (geom2)
 * Only takes into account outer rings
 * See http://stackoverflow.com/a/4833823/1979085
 *
 * @private
 * @param {Geometry|Feature<Polygon>} feature1 Polygon1
 * @param {Geometry|Feature<Polygon>} feature2 Polygon2
 * @returns {Boolean} true/false
 */
function isPolyInPoly(feature1, feature2) {
    for (var i = 0; i < feature1.coordinates[0].length; i++) {
        if (inside(feature1.coordinates[0][i], feature2)) {
            return true;
        }
    }
    return false;
}

function isPointOnLineSegment(LineSegmentStart, LineSegmentEnd, Point) {
    var dxc = Point[0] - LineSegmentStart[0];
    var dyc = Point[1] - LineSegmentStart[1];
    var dxl = LineSegmentEnd[0] - LineSegmentStart[0];
    var dyl = LineSegmentEnd[1] - LineSegmentStart[1];
    var cross = dxc * dyl - dyc * dxl;
    if (cross !== 0) {
        return false;
    }
    if (Math.abs(dxl) >= Math.abs(dyl)) {
        if (dxl > 0) {
            return LineSegmentStart[0] <= Point[0] && Point[0] <= LineSegmentEnd[0];
        } else {
            return LineSegmentEnd[0] <= Point[0] && Point[0] <= LineSegmentStart[0];
        }
    } else if (dyl > 0) {
        return LineSegmentStart[1] <= Point[1] && Point[1] <= LineSegmentEnd[1];
    } else {
        return LineSegmentEnd[1] <= Point[1] && Point[1] <= LineSegmentStart[1];
    }
}

/**
 * compareCoords
 *
 * @private
 * @param {[number, number]} pair1 point [x,y]
 * @param {[number, number]} pair2 point [x,y]
 * @returns {boolean} true/false if coord pairs match
 */
function compareCoords(pair1, pair2) {
    return pair1[0] === pair2[0] && pair1[1] === pair2[1];
}


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var inside = __webpack_require__(17);
var calcBbox = __webpack_require__(10);
var invariant = __webpack_require__(14);
var getGeom = invariant.getGeom;
var getCoords = invariant.getCoords;
var getGeomType = invariant.getGeomType;

/**
 * Boolean-contains returns True if the second geometry is completely contained by the first geometry.
 * The interiors of both geometries must intersect and, the interior and boundary of the secondary (geometry b)
 * must not intersect the exterior of the primary (geometry a).
 * Boolean-contains returns the exact opposite result of the `@turf/boolean-within`.
 *
 * @name booleanContains
 * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
 * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
 * @returns {boolean} true/false
 * @example
 * const line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
 * const point = turf.point([1, 2]);
 *
 * turf.booleanContains(line, point);
 * //=true
 */
module.exports = function (feature1, feature2) {
    var type1 = getGeomType(feature1);
    var type2 = getGeomType(feature2);
    var geom1 = getGeom(feature1);
    var geom2 = getGeom(feature2);
    var coords1 = getCoords(feature1);
    var coords2 = getCoords(feature2);

    switch (type1) {
    case 'Point':
        switch (type2) {
        case 'Point':
            return compareCoords(coords1, coords2);
        default:
            throw new Error('feature2 ' + type2 + ' geometry not supported');
        }
    case 'MultiPoint':
        switch (type2) {
        case 'Point':
            return isPointInMultiPoint(geom1, geom2);
        case 'MultiPoint':
            return isMultiPointInMultiPoint(geom1, geom2);
        default:
            throw new Error('feature2 ' + type2 + ' geometry not supported');
        }
    case 'LineString':
        switch (type2) {
        case 'Point':
            return isPointOnLine(geom1, geom2, true);
        case 'LineString':
            return isLineOnLine(geom1, geom2);
        case 'MultiPoint':
            return isMultiPointOnLine(geom1, geom2);
        default:
            throw new Error('feature2 ' + type2 + ' geometry not supported');
        }
    case 'Polygon':
        switch (type2) {
        case 'Point':
            return inside(geom2, geom1, true);
        case 'LineString':
            return isLineInPoly(geom1, geom2);
        case 'Polygon':
            return isPolyInPoly(geom1, geom2);
        case 'MultiPoint':
            return isMultiPointInPoly(geom1, geom2);
        default:
            throw new Error('feature2 ' + type2 + ' geometry not supported');
        }
    default:
        throw new Error('feature1 ' + type1 + ' geometry not supported');
    }
};

function isPointInMultiPoint(multiPoint, point) {
    var i;
    var output = false;
    for (i = 0; i < multiPoint.coordinates.length; i++) {
        if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {
            output = true;
            break;
        }
    }
    return output;
}

function isMultiPointInMultiPoint(multiPoint1, multiPoint2) {
    var foundAMatch = 0;
    for (var i = 0; i < multiPoint2.coordinates.length; i++) {
        var anyMatch = false;
        for (var i2 = 0; i2 < multiPoint1.coordinates.length; i2++) {
            if (compareCoords(multiPoint2.coordinates[i], multiPoint1.coordinates[i2])) {
                foundAMatch++;
                anyMatch = true;
                break;
            }
        }
        if (!anyMatch) {
            return false;
        }
    }
    return foundAMatch > 0;
}

// http://stackoverflow.com/a/11908158/1979085
function isPointOnLine(lineString, point, excEndPoints) {
    var output = false;
    for (var i = 0; i < lineString.coordinates.length - 1; i++) {
        var incEndVertices = true;
        if ((i === 0 || i === lineString.coordinates.length - 2) && excEndPoints) {
            incEndVertices = false;
        }
        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], point.coordinates, incEndVertices)) {
            output = true;
            break;
        }
    }
    return output;
}

function isMultiPointOnLine(lineString, multiPoint) {
    var output = true;
    var foundAnInteriorPoint = false;
    for (var i = 0; i < multiPoint.coordinates.length; i++) {
        var pointIsOnLine = false;
        for (var i2 = 0; i2 < lineString.coordinates.length - 1; i2++) {
            if (isPointOnLineSegment(lineString.coordinates[i2], lineString.coordinates[i2 + 1], multiPoint.coordinates[i], true)) {
                if (!foundAnInteriorPoint && isPointOnLineSegment(lineString.coordinates[i2], lineString.coordinates[i2 + 1], multiPoint.coordinates[i], false)) {
                    foundAnInteriorPoint = true;
                }
                pointIsOnLine = true;
                break;
            }
        }
        if (!pointIsOnLine) {
            output = false;
            break;
        }
    }
    return output && foundAnInteriorPoint;
}

function isMultiPointInPoly(polygon, multiPoint) {
    var output = true;
    for (var i = 0; i < multiPoint.coordinates.length; i++) {
        var isInside = inside(multiPoint.coordinates[1], polygon, true);
        if (!isInside) {
            output = false;
            break;
        }
    }
    return output;
}

function isLineOnLine(lineString1, lineString2) {
    var output = true;
    for (var i = 0; i < lineString2.coordinates.length; i++) {
        var checkLineCoords = isPointOnLine(lineString1, {type: 'Point', coordinates: lineString2.coordinates[i]}, false);
        if (!checkLineCoords) {
            output = false;
            break;
        }
    }
    return output;
}

function isLineInPoly(polygon, linestring) {
    var output = false;
    var i = 0;
    var lineLength = linestring.coordinates.length;

    var polyBbox = calcBbox(polygon);
    var lineBbox = calcBbox(linestring);
    if (!doBBoxOverlap(polyBbox, lineBbox)) {
        return false;
    }
    for (i; i < lineLength - 1; i++) {
        var midPoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);
        if (inside({type: 'Point', coordinates: midPoint}, polygon, true)) {
            output = true;
            break;
        }
    }
    return output;
}

/**
 * Is Polygon (geom1) in Polygon (geom2)
 * Only takes into account outer rings
 * See http://stackoverflow.com/a/4833823/1979085
 *
 * @private
 * @param {Geometry|Feature<Polygon>} feature1 Polygon1
 * @param {Geometry|Feature<Polygon>} feature2 Polygon2
 * @returns {boolean} true/false
 */
function isPolyInPoly(feature1, feature2) {
    var poly1Bbox = calcBbox(feature1);
    var poly2Bbox = calcBbox(feature2);
    if (!doBBoxOverlap(poly1Bbox, poly2Bbox)) {
        return false;
    }
    return true;
}


/**
 * Is a point on a line segment
 * Only takes into account outer rings
 * See http://stackoverflow.com/a/4833823/1979085
 *
 * @private
 * @param {Array} lineSegmentStart coord pair of start of line
 * @param {Array} lineSegmentEnd coord pair of end of line
 * @param {Array} point coord pair of point to check
 * @param {boolean} incEnd whether the point is allowed to fall on the line ends
 * @returns {boolean} true/false
 */
function isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, point, incEnd) {
    var dxc = point[0] - lineSegmentStart[0];
    var dyc = point[1] - lineSegmentStart[1];
    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];
    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];
    var cross = dxc * dyl - dyc * dxl;
    if (cross !== 0) {
        return false;
    }
    if (incEnd) {
        if (Math.abs(dxl) >= Math.abs(dyl)) {
            return dxl > 0 ? lineSegmentStart[0] <= point[0] && point[0] <= lineSegmentEnd[0] : lineSegmentEnd[0] <= point[0] && point[0] <= lineSegmentStart[0];
        }
        return dyl > 0 ? lineSegmentStart[1] <= point[1] && point[1] <= lineSegmentEnd[1] : lineSegmentEnd[1] <= point[1] && point[1] <= lineSegmentStart[1];
    } else {
        if (Math.abs(dxl) >= Math.abs(dyl)) {
            return dxl > 0 ? lineSegmentStart[0] < point[0] && point[0] < lineSegmentEnd[0] : lineSegmentEnd[0] < point[0] && point[0] < lineSegmentStart[0];
        }
        return dyl > 0 ? lineSegmentStart[1] < point[1] && point[1] < lineSegmentEnd[1] : lineSegmentEnd[1] < point[1] && point[1] < lineSegmentStart[1];
    }
}

function doBBoxOverlap(bbox1, bbox2) {
    if (bbox1[0] > bbox2[0]) return false;
    if (bbox1[2] < bbox2[2]) return false;
    if (bbox1[1] > bbox2[1]) return false;
    if (bbox1[3] < bbox2[3]) return false;
    return true;
}

/**
 * compareCoords
 *
 * @private
 * @param {[number, number]} pair1 point [x,y]
 * @param {[number, number]} pair2 point [x,y]
 * @returns {boolean} true/false if coord pairs match
 */
function compareCoords(pair1, pair2) {
    return pair1[0] === pair2[0] && pair1[1] === pair2[1];
}

function getMidpoint(pair1, pair2) {
    return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];
}


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var helpers = __webpack_require__(13);
var inside = __webpack_require__(17);
var lineIntersect = __webpack_require__(30);
var polyToLinestring = __webpack_require__(56);
var invariant = __webpack_require__(14);
var getGeom = invariant.getGeom;
var getGeomType = invariant.getGeomType;

/**
 * Boolean-Crosses returns True if the intersection results in a geometry whose dimension is one less than
 * the maximum dimension of the two source geometries and the intersection set is interior to
 * both source geometries.
 *
 * Boolean-Crosses returns t (TRUE) for only multipoint/polygon, multipoint/linestring, linestring/linestring, linestring/polygon, and linestring/multipolygon comparisons.
 *
 * @name booleanCrosses
 * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
 * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
 * @returns {boolean} true/false
 * @example
 * var line1 = turf.lineString([[-2, 2], [4, 2]]);
 * var line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
 *
 * var cross = turf.booleanCrosses(line1, line2);
 * //=true
 */
module.exports = function (feature1, feature2) {
    var type1 = getGeomType(feature1);
    var type2 = getGeomType(feature2);
    var geom1 = getGeom(feature1);
    var geom2 = getGeom(feature2);

    switch (type1) {
    case 'MultiPoint':
        switch (type2) {
        case 'LineString':
            return doMultiPointAndLineStringCross(geom1, geom2);
        case 'Polygon':
            return doesMultiPointCrossPoly(geom1, geom2);
        default:
            throw new Error('feature2 ' + type2 + ' geometry not supported');
        }
    case 'LineString':
        switch (type2) {
        case 'MultiPoint': // An inverse operation
            return doMultiPointAndLineStringCross(geom2, geom1);
        case 'LineString':
            return doLineStringsCross(geom1, geom2);
        case 'Polygon':
            return doLineStringAndPolygonCross(geom1, geom2);
        default:
            throw new Error('feature2 ' + type2 + ' geometry not supported');
        }
    case 'Polygon':
        switch (type2) {
        case 'MultiPoint': // An inverse operation
            return doesMultiPointCrossPoly(geom2, geom1);
        case 'LineString': // An inverse operation
            return doLineStringAndPolygonCross(geom2, geom1);
        default:
            throw new Error('feature2 ' + type2 + ' geometry not supported');
        }
    default:
        throw new Error('feature1 ' + type1 + ' geometry not supported');
    }
};

function doMultiPointAndLineStringCross(multiPoint, lineString) {
    var foundIntPoint = false;
    var foundExtPoint = false;
    var pointLength = multiPoint.coordinates.length;
    var i = 0;
    while (i < pointLength && !foundIntPoint && !foundExtPoint) {
        for (var i2 = 0; i2 < lineString.coordinates.length - 1; i2++) {
            var incEndVertices = true;
            if (i2 === 0 || i2 === lineString.coordinates.length - 2) {
                incEndVertices = false;
            }
            if (isPointOnLineSegment(lineString.coordinates[i2], lineString.coordinates[i2 + 1], multiPoint.coordinates[i], incEndVertices)) {
                foundIntPoint = true;
            } else {
                foundExtPoint = true;
            }
        }
        i++;
    }
    return foundIntPoint && foundExtPoint;
}

function doLineStringsCross(lineString1, lineString2) {
    var doLinesIntersect = lineIntersect(lineString1, lineString2);
    if (doLinesIntersect.features.length > 0) {
        for (var i = 0; i < lineString1.coordinates.length - 1; i++) {
            for (var i2 = 0; i2 < lineString2.coordinates.length - 1; i2++) {
                var incEndVertices = true;
                if (i2 === 0 || i2 === lineString2.coordinates.length - 2) {
                    incEndVertices = false;
                }
                if (isPointOnLineSegment(lineString1.coordinates[i], lineString1.coordinates[i + 1], lineString2.coordinates[i2], incEndVertices)) {
                    return true;
                }
            }
        }
    }
    return false;
}

function doLineStringAndPolygonCross(lineString, polygon) {
    var doLinesIntersect = lineIntersect(lineString, polyToLinestring(polygon));
    if (doLinesIntersect.features.length > 0) {
        return true;
    }
    return false;
}

function isPointInPoly(polygon, point) {
    return inside(point, polygon);
}

function doesMultiPointCrossPoly(multiPoint, polygon) {
    var foundIntPoint = false;
    var foundExtPoint = false;
    var pointLength = multiPoint.coordinates[0].length;
    var i = 0;
    while (i < pointLength && foundIntPoint && foundExtPoint) {
        if (isPointInPoly(polygon, helpers.point(multiPoint.coordinates[0][i]), true)) {
            foundIntPoint = true;
        } else {
            foundExtPoint = true;
        }
        i++;
    }

    return foundExtPoint && foundExtPoint;
}

/**
 * Is a point on a line segment
 * Only takes into account outer rings
 * See http://stackoverflow.com/a/4833823/1979085
 *
 * @private
 * @param {Array} lineSegmentStart coord pair of start of line
 * @param {Array} lineSegmentEnd coord pair of end of line
 * @param {Array} point coord pair of point to check
 * @param {boolean} incEnd whether the point is allowed to fall on the line ends
 * @returns {boolean} true/false
 */
function isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, point, incEnd) {
    var dxc = point[0] - lineSegmentStart[0];
    var dyc = point[1] - lineSegmentStart[1];
    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];
    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];
    var cross = dxc * dyl - dyc * dxl;
    if (cross !== 0) {
        return false;
    }
    if (incEnd) {
        if (Math.abs(dxl) >= Math.abs(dyl)) {
            return dxl > 0 ? lineSegmentStart[0] <= point[0] && point[0] <= lineSegmentEnd[0] : lineSegmentEnd[0] <= point[0] && point[0] <= lineSegmentStart[0];
        }
        return dyl > 0 ? lineSegmentStart[1] <= point[1] && point[1] <= lineSegmentEnd[1] : lineSegmentEnd[1] <= point[1] && point[1] <= lineSegmentStart[1];
    } else {
        if (Math.abs(dxl) >= Math.abs(dyl)) {
            return dxl > 0 ? lineSegmentStart[0] < point[0] && point[0] < lineSegmentEnd[0] : lineSegmentEnd[0] < point[0] && point[0] < lineSegmentStart[0];
        }
        return dyl > 0 ? lineSegmentStart[1] < point[1] && point[1] < lineSegmentEnd[1] : lineSegmentEnd[1] < point[1] && point[1] < lineSegmentStart[1];
    }
}


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

var invariant = __webpack_require__(14);
var getCoords = invariant.getCoords;

/**
 * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.
 *
 * @name booleanClockwise
 * @param {Geometry|Feature<LineString>|Array<Array<number>>} line to be evaluated
 * @returns {Boolean} true/false
 * @example
 * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);
 * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);
 *
 * turf.booleanClockwise(clockwiseRing)
 * //=true
 * turf.booleanClockwise(counterClockwiseRing)
 * //=false
 */
module.exports = function (line) {
    // validation
    if (!line) throw new Error('line is required');
    var type = (line.geometry) ? line.geometry.type : line.type;
    if (!Array.isArray(line) && type !== 'LineString') throw new Error('geometry must be a LineString');

    var ring = getCoords(line);
    var sum = 0;
    var i = 1;
    var prev, cur;
    while (i < ring.length) {
        prev = cur || ring[0];
        cur = ring[i];
        sum += ((cur[0] - prev[0]) * (cur[1] + prev[1]));
        i++;
    }
    return sum > 0;
};


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

var GeojsonEquality = __webpack_require__(255);
var cleanCoords = __webpack_require__(107);
var invariant = __webpack_require__(14);
var getGeomType = invariant.getGeomType;

/**
 * Determine whether two geometries of the same type have identical X,Y coordinate values.
 * See http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm
 *
 * @name booleanEqual
 * @param {Geometry|Feature} feature1 GeoJSON input
 * @param {Geometry|Feature} feature2 GeoJSON input
 * @returns {boolean} true if the objects are equal, false otherwise
 * @example
 * var pt1 = turf.point([0, 0]);
 * var pt2 = turf.point([0, 0]);
 * var pt3 = turf.point([1, 1]);
 *
 * turf.booleanEqual(pt1, pt2);
 * //= true
 * turf.booleanEqual(pt2, pt3);
 * //= false
 */
module.exports = function (feature1, feature2) {
    // validation
    if (!feature1) throw new Error('feature1 is required');
    if (!feature2) throw new Error('feature2 is required');
    var type1 = getGeomType(feature1);
    var type2 = getGeomType(feature2);
    if (type1 !== type2) return false;

    var equality = new GeojsonEquality({precision: 6});
    return equality.compare(cleanCoords(feature1), cleanCoords(feature2));
};


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

//index.js
var deepEqual = __webpack_require__(103);

var Equality = function(opt) {
  this.precision = opt && opt.precision ? opt.precision : 17;
  this.direction = opt && opt.direction ? opt.direction : false;
  this.pseudoNode = opt && opt.pseudoNode ? opt.pseudoNode : false;
  this.objectComparator = opt && opt.objectComparator ? opt.objectComparator : objectComparator;
};

Equality.prototype.compare = function(g1,g2) {
  if (g1.type !== g2.type || !sameLength(g1,g2)) return false;

  switch(g1.type) {
  case 'Point':
    return this.compareCoord(g1.coordinates, g2.coordinates);
    break;
  case 'LineString':
    return this.compareLine(g1.coordinates, g2.coordinates,0,false);
    break;
  case 'Polygon':
    return this.comparePolygon(g1,g2);
    break;
  case 'Feature':
    return this.compareFeature(g1, g2);
  default:
    if (g1.type.indexOf('Multi') === 0) {
      var context = this;
      var g1s = explode(g1);
      var g2s = explode(g2);
      return g1s.every(function(g1part) {
        return this.some(function(g2part) {
          return context.compare(g1part,g2part);
        });
      },g2s);
    }
  }
  return false;
};

function explode(g) {
  return g.coordinates.map(function(part) {
    return {
      type: g.type.replace('Multi', ''),
      coordinates: part}
  });
}
//compare length of coordinates/array
function sameLength(g1,g2) {
   return g1.hasOwnProperty('coordinates') ?
    g1.coordinates.length === g2.coordinates.length
    : g1.length === g2.length;
}

// compare the two coordinates [x,y]
Equality.prototype.compareCoord = function(c1,c2) {
  if (c1.length !== c2.length) {
    return false;
  }

  for (var i=0; i < c1.length; i++) {
    if (c1[i].toFixed(this.precision) !== c2[i].toFixed(this.precision)) {
      return false;
    }
  }
  return true;
};

Equality.prototype.compareLine = function(path1,path2,ind,isPoly) {
  if (!sameLength(path1,path2)) return false;
  var p1 = this.pseudoNode ? path1 : this.removePseudo(path1);
  var p2 = this.pseudoNode ? path2 : this.removePseudo(path2);
  if (isPoly && !this.compareCoord(p1[0],p2[0])) {
    // fix start index of both to same point
    p2 = this.fixStartIndex(p2,p1);
    if(!p2) return;
  }
  // for linestring ind =0 and for polygon ind =1
  var sameDirection = this.compareCoord(p1[ind],p2[ind]);
  if (this.direction || sameDirection
  ) {
    return this.comparePath(p1, p2);
  } else {
    if (this.compareCoord(p1[ind],p2[p2.length - (1+ind)])
    ) {
      return this.comparePath(p1.slice().reverse(), p2);
    }
    return false;
  }
};
Equality.prototype.fixStartIndex = function(sourcePath,targetPath) {
  //make sourcePath first point same as of targetPath
  var correctPath,ind = -1;
  for (var i=0; i< sourcePath.length; i++) {
    if(this.compareCoord(sourcePath[i],targetPath[0])) {
      ind = i;
      break;
    }
  }
  if (ind >= 0) {
    correctPath = [].concat(
      sourcePath.slice(ind,sourcePath.length),
      sourcePath.slice(1,ind+1));
  }
  return correctPath;
};
Equality.prototype.comparePath = function (p1,p2) {
  var cont = this;
  return p1.every(function(c,i) {
    return cont.compareCoord(c,this[i]);
  },p2);
};

Equality.prototype.comparePolygon = function(g1,g2) {
  if (this.compareLine(g1.coordinates[0],g2.coordinates[0],1,true)) {
    var holes1 = g1.coordinates.slice(1,g1.coordinates.length);
    var holes2 = g2.coordinates.slice(1,g2.coordinates.length);
    var cont = this;
    return holes1.every(function(h1) {
      return this.some(function(h2) {
        return cont.compareLine(h1,h2,1,true);
      });
    },holes2);
  } else {
    return false;
  }
};

Equality.prototype.compareFeature = function(g1,g2) {
  if (
    g1.id !== g2.id ||
    !this.objectComparator(g1.properties, g2.properties) ||
    !this.compareBBox(g1,g2)
  ) {
    return false;
  }
  return this.compare(g1.geometry, g2.geometry);
};

Equality.prototype.compareBBox = function(g1,g2) {
  if (
    (!g1.bbox && !g2.bbox) || 
    (
      g1.bbox && g2.bbox &&
      this.compareCoord(g1.bbox, g2.bbox)
    )
  )  {
    return true;
  }
  return false;
};
Equality.prototype.removePseudo = function(path) {
  //TODO to be implement
  return path;
};

function objectComparator(obj1, obj2) {
  return deepEqual(obj1, obj2, {strict: true});
}

module.exports = Equality;


/***/ }),
/* 256 */
/***/ (function(module, exports) {

/**
 * Returns a cloned copy of the passed GeoJSON Object.
 * By default it duplicates only the standard GeoJSON fields of the object; if `cloneAll` is set to `true` all
 * fields of the Object, thus including 'Foreign Members', will be cloned (3-20x slower).
 *
 * @name clone
 * @param {GeoJSON} geojson GeoJSON Object
 * @param {Boolean} [cloneAll=false] clones entire GeoJSON object, using JSON.parse(JSON.stringify(geojson))
 * @returns {GeoJSON} cloned GeoJSON Object
 * @example
 * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
 *
 * var lineCloned = turf.clone(line);
 */
module.exports = function (geojson, cloneAll) {
    if (!geojson) throw new Error('geojson is required');
    if (cloneAll && typeof cloneAll !== 'boolean') throw new Error('cloneAll must be a Boolean');

    // Clone entire object (3-20x slower)
    if (cloneAll) return JSON.parse(JSON.stringify(geojson));

    // Clones only GeoJSON fields
    return clone(geojson);
};

/**
 * Clone
 *
 * @private
 * @param {GeoJSON} geojson GeoJSON Feature or Geometry
 * @returns {GeoJSON} cloned Feature
 */
function clone(geojson) {
    // Geometry Object
    if (geojson.coordinates) return cloneGeometry(geojson);

    // Feature
    if (geojson.type === 'Feature') return cloneFeature(geojson);

    // Feature Collection
    if (geojson.type === 'FeatureCollection') return cloneFeatureCollection(geojson);

    // Geometry Collection
    if (geojson.type === 'GeometryCollection') return cloneGeometry(geojson);
}

/**
 * Clone Feature
 *
 * @private
 * @param {Feature<any>} feature GeoJSON Feature
 * @returns {Feature<any>} cloned Feature
 */
function cloneFeature(feature) {
    var cloned = {
        type: 'Feature',
        properties: feature.properties || {},
        geometry: cloneGeometry(feature.geometry)
    };
    if (feature.id) cloned.id = feature.id;
    if (feature.bbox) cloned.bbox = feature.bbox;
    return cloned;
}

/**
 * Clone Feature Collection
 *
 * @private
 * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection
 * @returns {FeatureCollection<any>} cloned Feature Collection
 */
function cloneFeatureCollection(geojson) {
    return {
        type: 'FeatureCollection',
        features: geojson.features.map(function (feature) {
            return cloneFeature(feature);
        })
    };
}

/**
 * Clone Geometry
 *
 * @private
 * @param {Geometry<any>} geometry GeoJSON Geometry
 * @returns {Geometry<any>} cloned Geometry
 */
function cloneGeometry(geometry) {
    if (geometry.type === 'GeometryCollection') {
        return {
            type: 'GeometryCollection',
            geometries: geometry.geometries.map(function (geom) {
                return cloneGeometry(geom);
            })
        };
    }
    return {
        type: geometry.type,
        coordinates: deepSlice(geometry.coordinates)
    };
}

/**
 * Deep Slice coordinates
 *
 * @private
 * @param {Coordinates} coords Coordinates
 * @returns {Coordinates} all coordinates sliced
 */
function deepSlice(coords) {
    if (typeof coords[0] !== 'object') { return coords.slice(); }
    return coords.map(function (coord) {
        return deepSlice(coord);
    });
}


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOGYxZjg0NmJkZDU5YjEzNTkwYzkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvbWV0YS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvYmJveC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvaGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvaW52YXJpYW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2Rpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9pbnNpZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9kZXN0aW5hdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JidXNoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2FkZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9iZWFyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NhcnRlc2lhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvY2VudHJvaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtaW50ZXJzZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9kZXN5L2xhdGxvbi1lbGxpcHNvaWRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvdW5pb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzdHMvZGlzdC9qc3RzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9yb3RhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2NlbnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvbGluZS1zZWdtZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9kZXN5L2Rtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvcmh1bWItZGVzdGluYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2lzb2JhbmRzL25vZGVfbW9kdWxlcy9AdHVyZi9tZXRhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2J1c3Qtb3JpZW50YXRpb24vb3JpZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvZ2VvanNvbi1hcmVhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9jaXJjbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pY0VxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vbWVyY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2V4cGxvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3BvaW50LW9uLWxpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dlb2pzb24tcmJ1c2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2ZsYXR0ZW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3BvbHlnb24tdG8tbGluZXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvcmh1bWItYmVhcmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2VvZGVzeS9ucG0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dlb2Rlc3kvdmVjdG9yM2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3JodW1iLWRpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9pc29iYW5kcy9ub2RlX21vZHVsZXMvQHR1cmYvaGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9seWdvbml6ZS9kaXN0L3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyaWQtdG8tbWF0cml4L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJjaGluZ3NxdWFyZXMvbWFyY2hpbmdzcXVhcmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9jb252ZXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R3by1wcm9kdWN0L3R3by1wcm9kdWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi90aW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2FyZWEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R1cmYtaXMtY2xvY2t3aXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9lbnZlbG9wZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvYmJveC1wb2x5Z29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9wb2x5Z29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BvaW50RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3BhaXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZGV2aWF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdmFyaWFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGlja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc3R1cmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RyYW5zcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2x5Z29uQ29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvZGlzdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvYm91bmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYWxiZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVpcmVjdGFuZ3VsYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtZGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtc2xpY2UtYWxvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3NxdWFyZS1ncmlkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi90cnVuY2F0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtYXJjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9kZXN5L3V0bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvaXNvYmFuZHMvbm9kZV9tb2R1bGVzL0B0dXJmL2ludmFyaWFudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9seWdvbml6ZS9kaXN0L0VkZ2VSaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9jbGVhbi1jb29yZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL214X2hlbHBlcl9jYWxjX2FyZWEud29ya2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi90dXJmL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvaXNvbGluZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmNoaW5nc3F1YXJlcy9tYXJjaGluZ3NxdWFyZXMtaXNvYmFuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmNoaW5nc3F1YXJlcy9tYXJjaGluZ3NxdWFyZXMtaXNvY29udG91cnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnZleC1odWxsL2NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb252ZXgtaHVsbC9saWIvY2gxZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udmV4LWh1bGwvbGliL2NoMmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbm90b25lLWNvbnZleC1odWxsLTJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2J1c3Qtc3VtL3JvYnVzdC1zdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYnVzdC1zY2FsZS9yb2J1c3Qtc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R3by1zdW0vdHdvLXN1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9idXN0LXN1YnRyYWN0L3JvYnVzdC1kaWZmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb252ZXgtaHVsbC9saWIvY2huZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5jcmVtZW50YWwtY29udmV4LWh1bGwvaWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaW1wbGljaWFsLWNvbXBsZXgvdG9wb2xvZ3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JpdC10d2lkZGxlL3R3aWRkbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaW9uLWZpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FmZmluZS1odWxsL2FmZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvd2l0aGluL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9jb25jYXZlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9kaWZmZXJlbmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93Z3M4NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvZGlzc29sdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R1cmYtb3ZlcmxhcHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1aWNrc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9qc29uLXV0aWxzL2dlb2pzb24tdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dldC1jbG9zZXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9jb2xsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9mbGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9zaW1wbGlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2ltcGxpZnktanMvc2ltcGxpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2Jlemllci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvYmV6aWVyL3NwbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvdGFnL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9zYW1wbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3NxdWFyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvbWlkcG9pbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2JvdW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2xpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9oaXN0b2dyYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL2ZyZWVkbWFuRGlhY29uaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc2NvdHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9wZXJtdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc2Nhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3NodWZmbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvZ3JhdGljdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvbWVhc3VyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2FudGltZXJpZGlhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL3Jlc2FtcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY3lsaW5kcmljYWxFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hbGJlcnNVc2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hemltdXRoYWxFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hemltdXRoYWxFcXVpZGlzdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljQ29uZm9ybWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVpZGlzdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2dub21vbmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9vcnRob2dyYXBoaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9jZW50ZXItb2YtbWFzcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvY29tYmluZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvdGVzc2VsYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lYXJjdXQvc3JjL2VhcmN1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvaW50ZXJzZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9uZWFyZXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9wbGFuZXBvaW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9yYW5kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dlb2pzb24tcmFuZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9raW5rcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvcG9pbnQtb24tc3VyZmFjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvYWxvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtc2xpY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3BvaW50LWdyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3RyaWFuZ2xlLWdyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2hleC1ncmlkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9pZHcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL21hc2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtY2h1bmsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3Vua2luay1wb2x5Z29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaW1wbGVwb2x5Z29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9qc29uLXBvbHlnb24tc2VsZi1pbnRlcnNlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaW1wbGVwb2x5Z29uL25vZGVfbW9kdWxlcy9AdHVyZi9oZWxwZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaW1wbGVwb2x5Z29uL25vZGVfbW9kdWxlcy9AdHVyZi9hcmVhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaW1wbGVwb2x5Z29uL25vZGVfbW9kdWxlcy9AdHVyZi9tZXRhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9ncmVhdC1jaXJjbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2dyZWF0LWNpcmNsZS9hcmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtc3BsaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmVzdHJpbmctdG8tcG9seWdvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvYmJveC1jbGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9saW5lY2xpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvbGluZS1vdmVybGFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9pc19hcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL3NlY3Rvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2VvZGVzeS9sYXRsb24tc3BoZXJpY2FsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9kZXN5L2xhdGxvbi12aW5jZW50eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2VvZGVzeS9sYXRsb24tdmVjdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2VvZGVzeS9tZ3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9kZXN5L29zZ3JpZHJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvcG9seWdvbi10YW5nZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvcmV3aW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9pc29iYW5kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvaXNvYmFuZHMvbm9kZV9tb2R1bGVzL0B0dXJmL2Jib3gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2lzb2JhbmRzL25vZGVfbW9kdWxlcy9AdHVyZi9hcmVhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9pc29iYW5kcy9ub2RlX21vZHVsZXMvQHR1cmYvaW5zaWRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9pc29iYW5kcy9ub2RlX21vZHVsZXMvQHR1cmYvZXhwbG9kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvdHJhbnNmb3JtLXJvdGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvdHJhbnNmb3JtLXNjYWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi90cmFuc2Zvcm0tdHJhbnNsYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9saW5lLW9mZnNldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR1cmYvbGluZS1vZmZzZXQvaW50ZXJzZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9wb2x5Z29uaXplL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb2x5Z29uaXplL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvbHlnb25pemUvZGlzdC9HcmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9seWdvbml6ZS9kaXN0L05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvbHlnb25pemUvZGlzdC9FZGdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9ib29sZWFuLWRpc2pvaW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9ib29sZWFuLWNvbnRhaW5zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9ib29sZWFuLWNyb3NzZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0dXJmL2Jvb2xlYW4tY2xvY2t3aXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9ib29sZWFuLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW9qc29uLWVxdWFsaXR5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdHVyZi9jbG9uZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJzZW5kTWVzc2FnZSIsIm0iLCJwb3N0TWVzc2FnZSIsIm1lc3NhZ2UiLCJzZW5kUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsInNlbmRFbmQiLCJlbmQiLCJvbm1lc3NhZ2UiLCJlIiwiZGF0YSIsIm91dCIsImciLCJnZW9qc29uIiwiZmVhdHVyZXNMZW5ndGgiLCJmZWF0dXJlcyIsImxlbmd0aCIsImJib3giLCJNYXRoIiwicm91bmQiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQzdEQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFB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Q0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7Ozs7Ozs7O0FDcEVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsNkNBQTZDO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQsU0FBUzs7QUFFNUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQsU0FBUzs7QUFFNUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxTQUFTO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ1RBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNMQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDcENBO0FBQUE7O0FBRUE7QUFDQTs7Ozs7Ozs7QUNIQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDWkE7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ2pEQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDakNBOztBQUVBO0FBQ0E7QUFDQSwrSEFBcUUsU0FBUztBQUM5RSwwREFBMEQsU0FBUztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUM2RDtBQUNGOztBQUUzRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDbkVBOztBQUVBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNUQTtBQUM0QztBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDcERBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7OztBQzNCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDVEE7QUFDQTtBQUN3QjtBQUN4QjtBQUNjOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDdElBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ1hBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLGNBQWMsa0RBQWtE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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDhDQUE4QztBQUM5Qyw4Q0FBOEM7QUFDOUMsK0NBQStDO0FBQy9DLCtDQUErQzs7QUFFL0M7QUFDQSw4Q0FBOEM7QUFDOUMsOENBQThDO0FBQzlDLCtDQUErQztBQUMvQywrQ0FBK0M7O0FBRS9DO0FBQ0EsOENBQThDO0FBQzlDLCtDQUErQztBQUMvQyw4Q0FBOEM7QUFDOUMsK0NBQStDO0FBQy9DLCtDQUErQztBQUMvQywrQ0FBK0M7O0FBRS9DO0FBQ0EsMEJBQTBCOztBQUUxQjtBQUNBLCtDQUErQztBQUMvQywrQ0FBK0M7QUFDL0MsOENBQThDO0FBQzlDLDhDQUE4QztBQUM5Qyw4Q0FBOEM7QUFDOUMsK0NBQStDO0FBQy9DLDhDQUE4QztBQUM5QywrQ0FBK0M7QUFDL0MsK0NBQStDO0FBQy9DLCtDQUErQztBQUMvQywrQ0FBK0M7QUFDL0MsOENBQThDOztBQUU5QztBQUNBLCtDQUErQztBQUMvQywrQ0FBK0M7QUFDL0MsOENBQThDO0FBQzlDLDhDQUE4QztBQUM5QywrQ0FBK0M7QUFDL0MsK0NBQStDOztBQUUvQztBQUNBLGtDQUFrQyw2QkFBNkI7QUFDL0QsMEJBQTBCO0FBQzFCLG1DQUFtQyw2QkFBNkI7O0FBRWhFO0FBQ0EsbUNBQW1DLDZCQUE2QjtBQUNoRSxtQ0FBbUMsNkJBQTZCO0FBQ2hFLDJCQUEyQjtBQUMzQiwyQkFBMkI7O0FBRTNCO0FBQ0EsbUNBQW1DLDZCQUE2QjtBQUNoRSwyQkFBMkI7QUFDM0IsbUNBQW1DLDZCQUE2QjtBQUNoRSwyQkFBMkI7QUFDM0Isa0NBQWtDLDZCQUE2QjtBQUMvRCwwQkFBMEI7QUFDMUIsa0NBQWtDLDZCQUE2QjtBQUMvRCwwQkFBMEI7OztBQUcxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjs7QUFFcEI7O0FBRUEsa0JBQWtCLFVBQVU7QUFDNUI7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQkFBc0I7QUFDakM7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQkFBc0I7QUFDakM7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QkFBNEI7QUFDNUI7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsbUJBQW1CO0FBQ25CLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLG1CQUFtQjtBQUNuQiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsbUJBQW1CO0FBQ25CLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLG1CQUFtQjtBQUNuQiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsbUJBQW1CO0FBQ25CLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLG1CQUFtQjtBQUNuQiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QixtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsbUJBQW1CO0FBQ25CLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQzs7Ozs7OztBQzNKQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQzs7Ozs7OztBQ2pEQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDOzs7Ozs7O0FDaEJBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEM7Ozs7Ozs7QUMzSkE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGdCQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsTUFBTTtBQUNwQjtBQUNBLGdCQUFnQixZQUFZO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEM7Ozs7Ozs7QUMzREE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDLHFCQUFxQjtBQUN0RCxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLE1BQU07QUFDdEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSx1QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLE1BQU07QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxjQUFjLHVCQUF1QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRSxRQUFRO0FBQ25GO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9LeUU7QUFDekU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUMzSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMxRGE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQkFBa0IsU0FBUztBQUMzQixzQ0FBc0MsU0FBUztBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDRmM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2lCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0lBQXdFO0FBQ3hFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDSkE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNGWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDUkE7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQ2pDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQ3hCQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7OztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ0pBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7QUNuQkE7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ0ptQztBQUNQO0FBQ0g7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDbkZjO0FBQ2E7O0FBRTNCO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCLGVBQWUsRUFBRSxFQUFFO0FBQ3BFOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCLGVBQWUsRUFBRSxFQUFFO0FBQ3BFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1TEFBc0Usb0lBQThCLEVBQUU7QUFDdEcsdUxBQXNFLG9JQUE4QixFQUFFO0FBQ3RHOztBQUVBO0FBQ0EsOENBQThDLFNBQVMsOENBQThDLEVBQUU7QUFDdkc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ3hHZ0U7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7QUM1REE7QUFDWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7O0FDakRhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7QUNuR1k7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7Ozs7Ozs7Ozs7QUM1Q0E7QUFDYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7Ozs7QUM1Q0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNM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QjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUNBQXlDLFNBQVM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsZUFBZSxrQkFBa0I7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQSxpQ0FBaUMsK0JBQStCOztBQUVoRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsa0RBQWtEOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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UTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixhQUFhLFlBQVk7QUFDekI7QUFDQTtBQUNBLHdDQUF3Qyx1QkFBdUI7QUFDL0Q7QUFDQTtBQUNBLEtBQUs7QUFDTCIsImZpbGUiOiI4ZjFmODQ2YmRkNTliMTM1OTBjOS53b3JrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMDgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDhmMWY4NDZiZGQ1OWIxMzU5MGM5IiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENhbGxiYWNrIGZvciBjb29yZEVhY2hcbiAqXG4gKiBAY2FsbGJhY2sgY29vcmRFYWNoQ2FsbGJhY2tcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY3VycmVudENvb3JkIFRoZSBjdXJyZW50IGNvb3JkaW5hdGUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvb3JkSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIGNvb3JkaW5hdGUgYmVpbmcgcHJvY2Vzc2VkLlxuICogU3RhcnRzIGF0IGluZGV4IDAuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBmZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlU3ViSW5kZXggVGhlIGN1cnJlbnQgc3ViSW5kZXggb2YgdGhlIGZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICovXG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGNvb3JkaW5hdGVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5mb3JFYWNoKClcbiAqXG4gKiBAbmFtZSBjb29yZEVhY2hcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258R2VvbWV0cnl8RmVhdHVyZX0gZ2VvanNvbiBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKGN1cnJlbnRDb29yZCwgY29vcmRJbmRleCwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtleGNsdWRlV3JhcENvb3JkPWZhbHNlXSB3aGV0aGVyIG9yIG5vdCB0byBpbmNsdWRlIHRoZSBmaW5hbCBjb29yZGluYXRlIG9mIExpbmVhclJpbmdzIHRoYXQgd3JhcHMgdGhlIHJpbmcgaW4gaXRzIGl0ZXJhdGlvbi5cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgdHVyZi5wb2ludChbMjYsIDM3XSwge1wiZm9vXCI6IFwiYmFyXCJ9KSxcbiAqICAgdHVyZi5wb2ludChbMzYsIDUzXSwge1wiaGVsbG9cIjogXCJ3b3JsZFwifSlcbiAqIF0pO1xuICpcbiAqIHR1cmYuY29vcmRFYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudENvb3JkLCBjb29yZEluZGV4LCBmZWF0dXJlSW5kZXgsIGZlYXR1cmVTdWJJbmRleCkge1xuICogICAvLz1jdXJyZW50Q29vcmRcbiAqICAgLy89Y29vcmRJbmRleFxuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqICAgLy89ZmVhdHVyZVN1YkluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gY29vcmRFYWNoKGdlb2pzb24sIGNhbGxiYWNrLCBleGNsdWRlV3JhcENvb3JkKSB7XG4gICAgLy8gSGFuZGxlcyBudWxsIEdlb21ldHJ5IC0tIFNraXBzIHRoaXMgR2VvSlNPTlxuICAgIGlmIChnZW9qc29uID09PSBudWxsKSByZXR1cm47XG4gICAgdmFyIGZlYXR1cmVJbmRleCwgZ2VvbWV0cnlJbmRleCwgaiwgaywgbCwgZ2VvbWV0cnksIHN0b3BHLCBjb29yZHMsXG4gICAgICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLFxuICAgICAgICB3cmFwU2hyaW5rID0gMCxcbiAgICAgICAgY29vcmRJbmRleCA9IDAsXG4gICAgICAgIGlzR2VvbWV0cnlDb2xsZWN0aW9uLFxuICAgICAgICB0eXBlID0gZ2VvanNvbi50eXBlLFxuICAgICAgICBpc0ZlYXR1cmVDb2xsZWN0aW9uID0gdHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgaXNGZWF0dXJlID0gdHlwZSA9PT0gJ0ZlYXR1cmUnLFxuICAgICAgICBzdG9wID0gaXNGZWF0dXJlQ29sbGVjdGlvbiA/IGdlb2pzb24uZmVhdHVyZXMubGVuZ3RoIDogMTtcblxuICAgIC8vIFRoaXMgbG9naWMgbWF5IGxvb2sgYSBsaXR0bGUgd2VpcmQuIFRoZSByZWFzb24gd2h5IGl0IGlzIHRoYXQgd2F5XG4gICAgLy8gaXMgYmVjYXVzZSBpdCdzIHRyeWluZyB0byBiZSBmYXN0LiBHZW9KU09OIHN1cHBvcnRzIG11bHRpcGxlIGtpbmRzXG4gICAgLy8gb2Ygb2JqZWN0cyBhdCBpdHMgcm9vdDogRmVhdHVyZUNvbGxlY3Rpb24sIEZlYXR1cmVzLCBHZW9tZXRyaWVzLlxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSByZXNwb25zaWJpbGl0eSBvZiBoYW5kbGluZyBhbGwgb2YgdGhlbSwgYW5kIHRoYXRcbiAgICAvLyBtZWFucyB0aGF0IHNvbWUgb2YgdGhlIGBmb3JgIGxvb3BzIHlvdSBzZWUgYmVsb3cgYWN0dWFsbHkganVzdCBkb24ndCBhcHBseVxuICAgIC8vIHRvIGNlcnRhaW4gaW5wdXRzLiBGb3IgaW5zdGFuY2UsIGlmIHlvdSBnaXZlIHRoaXMganVzdCBhXG4gICAgLy8gUG9pbnQgZ2VvbWV0cnksIHRoZW4gYm90aCBsb29wcyBhcmUgc2hvcnQtY2lyY3VpdGVkIGFuZCBhbGwgd2UgZG9cbiAgICAvLyBpcyBncmFkdWFsbHkgcmVuYW1lIHRoZSBpbnB1dCB1bnRpbCBpdCdzIGNhbGxlZCAnZ2VvbWV0cnknLlxuICAgIC8vXG4gICAgLy8gVGhpcyBhbHNvIGFpbXMgdG8gYWxsb2NhdGUgYXMgZmV3IHJlc291cmNlcyBhcyBwb3NzaWJsZToganVzdCBhXG4gICAgLy8gZmV3IG51bWJlcnMgYW5kIGJvb2xlYW5zLCByYXRoZXIgdGhhbiBhbnkgdGVtcG9yYXJ5IGFycmF5cyBhcyB3b3VsZFxuICAgIC8vIGJlIHJlcXVpcmVkIHdpdGggdGhlIG5vcm1hbGl6YXRpb24gYXBwcm9hY2guXG4gICAgZm9yIChmZWF0dXJlSW5kZXggPSAwOyBmZWF0dXJlSW5kZXggPCBzdG9wOyBmZWF0dXJlSW5kZXgrKykge1xuICAgICAgICB2YXIgZmVhdHVyZVN1YkluZGV4ID0gMDtcblxuICAgICAgICBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbiA9IChpc0ZlYXR1cmVDb2xsZWN0aW9uID8gZ2VvanNvbi5mZWF0dXJlc1tmZWF0dXJlSW5kZXhdLmdlb21ldHJ5IDpcbiAgICAgICAgKGlzRmVhdHVyZSA/IGdlb2pzb24uZ2VvbWV0cnkgOiBnZW9qc29uKSk7XG4gICAgICAgIGlzR2VvbWV0cnlDb2xsZWN0aW9uID0gKGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uKSA/IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nIDogZmFsc2U7XG4gICAgICAgIHN0b3BHID0gaXNHZW9tZXRyeUNvbGxlY3Rpb24gPyBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgZm9yIChnZW9tZXRyeUluZGV4ID0gMDsgZ2VvbWV0cnlJbmRleCA8IHN0b3BHOyBnZW9tZXRyeUluZGV4KyspIHtcbiAgICAgICAgICAgIGdlb21ldHJ5ID0gaXNHZW9tZXRyeUNvbGxlY3Rpb24gP1xuICAgICAgICAgICAgZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24uZ2VvbWV0cmllc1tnZW9tZXRyeUluZGV4XSA6IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGVzIG51bGwgR2VvbWV0cnkgLS0gU2tpcHMgdGhpcyBnZW9tZXRyeVxuICAgICAgICAgICAgaWYgKGdlb21ldHJ5ID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvb3JkcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICAgICAgdmFyIGdlb21UeXBlID0gZ2VvbWV0cnkudHlwZTtcblxuICAgICAgICAgICAgd3JhcFNocmluayA9IChleGNsdWRlV3JhcENvb3JkICYmIChnZW9tVHlwZSA9PT0gJ1BvbHlnb24nIHx8IGdlb21UeXBlID09PSAnTXVsdGlQb2x5Z29uJykpID8gMSA6IDA7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZ2VvbVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjb29yZHMsIGNvb3JkSW5kZXgsIGZlYXR1cmVJbmRleCwgZmVhdHVyZVN1YkluZGV4KTtcbiAgICAgICAgICAgICAgICBjb29yZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVN1YkluZGV4Kys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOlxuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjb29yZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY29vcmRzW2pdLCBjb29yZEluZGV4LCBmZWF0dXJlSW5kZXgsIGZlYXR1cmVTdWJJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvb3JkSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVN1YkluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnUG9seWdvbic6XG4gICAgICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjb29yZHMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBjb29yZHNbal0ubGVuZ3RoIC0gd3JhcFNocmluazsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjb29yZHNbal1ba10sIGNvb3JkSW5kZXgsIGZlYXR1cmVJbmRleCwgZmVhdHVyZVN1YkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVTdWJJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOlxuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjb29yZHMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBjb29yZHNbal0ubGVuZ3RoOyBrKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGwgPSAwOyBsIDwgY29vcmRzW2pdW2tdLmxlbmd0aCAtIHdyYXBTaHJpbms7IGwrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvb3Jkc1tqXVtrXVtsXSwgY29vcmRJbmRleCwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlU3ViSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkRWFjaChnZW9tZXRyeS5nZW9tZXRyaWVzW2pdLCBjYWxsYmFjaywgZXhjbHVkZVdyYXBDb29yZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gR2VvbWV0cnkgVHlwZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBjb29yZFJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQGNhbGxiYWNrIGNvb3JkUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGN1cnJlbnRDb29yZCBUaGUgY3VycmVudCBjb29yZGluYXRlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb29yZEluZGV4IFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBjb29yZGluYXRlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIFN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIGZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVTdWJJbmRleCBUaGUgY3VycmVudCBzdWJJbmRleCBvZiB0aGUgZmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKi9cblxuLyoqXG4gKiBSZWR1Y2UgY29vcmRpbmF0ZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LnJlZHVjZSgpXG4gKlxuICogQG5hbWUgY29vcmRSZWR1Y2VcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258R2VvbWV0cnl8RmVhdHVyZX0gZ2VvanNvbiBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRDb29yZCwgY29vcmRJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtleGNsdWRlV3JhcENvb3JkPWZhbHNlXSB3aGV0aGVyIG9yIG5vdCB0byBpbmNsdWRlIHRoZSBmaW5hbCBjb29yZGluYXRlIG9mIExpbmVhclJpbmdzIHRoYXQgd3JhcHMgdGhlIHJpbmcgaW4gaXRzIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhhdCByZXN1bHRzIGZyb20gdGhlIHJlZHVjdGlvbi5cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgdHVyZi5wb2ludChbMjYsIDM3XSwge1wiZm9vXCI6IFwiYmFyXCJ9KSxcbiAqICAgdHVyZi5wb2ludChbMzYsIDUzXSwge1wiaGVsbG9cIjogXCJ3b3JsZFwifSlcbiAqIF0pO1xuICpcbiAqIHR1cmYuY29vcmRSZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50Q29vcmQsIGNvb3JkSW5kZXgsIGZlYXR1cmVJbmRleCwgZmVhdHVyZVN1YkluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudENvb3JkXG4gKiAgIC8vPWNvb3JkSW5kZXhcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIC8vPWZlYXR1cmVTdWJJbmRleFxuICogICByZXR1cm4gY3VycmVudENvb3JkO1xuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGNvb3JkUmVkdWNlKGdlb2pzb24sIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUsIGV4Y2x1ZGVXcmFwQ29vcmQpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBjb29yZEVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGN1cnJlbnRDb29yZCwgY29vcmRJbmRleCwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpIHtcbiAgICAgICAgaWYgKGNvb3JkSW5kZXggPT09IDAgJiYgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50Q29vcmQ7XG4gICAgICAgIGVsc2UgcHJldmlvdXNWYWx1ZSA9IGNhbGxiYWNrKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRDb29yZCwgY29vcmRJbmRleCwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpO1xuICAgIH0sIGV4Y2x1ZGVXcmFwQ29vcmQpO1xuICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBwcm9wRWFjaFxuICpcbiAqIEBjYWxsYmFjayBwcm9wRWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge09iamVjdH0gY3VycmVudFByb3BlcnRpZXMgVGhlIGN1cnJlbnQgcHJvcGVydGllcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBwcm9wZXJ0aWVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5mb3JFYWNoKClcbiAqXG4gKiBAbmFtZSBwcm9wRWFjaFxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAoY3VycmVudFByb3BlcnRpZXMsIGZlYXR1cmVJbmRleClcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgICB0dXJmLnBvaW50KFsyNiwgMzddLCB7Zm9vOiAnYmFyJ30pLFxuICogICAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLnByb3BFYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudFByb3BlcnRpZXMsIGZlYXR1cmVJbmRleCkge1xuICogICAvLz1jdXJyZW50UHJvcGVydGllc1xuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBwcm9wRWFjaChnZW9qc29uLCBjYWxsYmFjaykge1xuICAgIHZhciBpO1xuICAgIHN3aXRjaCAoZ2VvanNvbi50eXBlKSB7XG4gICAgY2FzZSAnRmVhdHVyZUNvbGxlY3Rpb24nOlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvanNvbi5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2FsbGJhY2soZ2VvanNvbi5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBjYXNlICdGZWF0dXJlJzpcbiAgICAgICAgY2FsbGJhY2soZ2VvanNvbi5wcm9wZXJ0aWVzLCAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuXG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIHByb3BSZWR1Y2VcbiAqXG4gKiBUaGUgZmlyc3QgdGltZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gaXMgY2FsbGVkLCB0aGUgdmFsdWVzIHByb3ZpZGVkIGFzIGFyZ3VtZW50cyBkZXBlbmRcbiAqIG9uIHdoZXRoZXIgdGhlIHJlZHVjZSBtZXRob2QgaGFzIGFuIGluaXRpYWxWYWx1ZSBhcmd1bWVudC5cbiAqXG4gKiBJZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQgdG8gdGhlIHJlZHVjZSBtZXRob2Q6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyBpbml0aWFsVmFsdWUuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBJZiBhbiBpbml0aWFsVmFsdWUgaXMgbm90IHByb3ZpZGVkOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIHNlY29uZCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIEBjYWxsYmFjayBwcm9wUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0geyp9IGN1cnJlbnRQcm9wZXJ0aWVzIFRoZSBjdXJyZW50IHByb3BlcnRpZXMgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS5TdGFydHMgYXQgaW5kZXggMCwgaWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkLCBhbmQgYXQgaW5kZXggMSBvdGhlcndpc2UuXG4gKi9cblxuLyoqXG4gKiBSZWR1Y2UgcHJvcGVydGllcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QgaW50byBhIHNpbmdsZSB2YWx1ZSxcbiAqIHNpbWlsYXIgdG8gaG93IEFycmF5LnJlZHVjZSB3b3Jrcy4gSG93ZXZlciwgaW4gdGhpcyBjYXNlIHdlIGxhemlseSBydW5cbiAqIHRoZSByZWR1Y3Rpb24sIHNvIGFuIGFycmF5IG9mIGFsbCBwcm9wZXJ0aWVzIGlzIHVubmVjZXNzYXJ5LlxuICpcbiAqIEBuYW1lIHByb3BSZWR1Y2VcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZX0gZ2VvanNvbiBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRQcm9wZXJ0aWVzLCBmZWF0dXJlSW5kZXgpXG4gKiBAcGFyYW0geyp9IFtpbml0aWFsVmFsdWVdIFZhbHVlIHRvIHVzZSBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGNhbGxiYWNrLlxuICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGF0IHJlc3VsdHMgZnJvbSB0aGUgcmVkdWN0aW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgICAgdHVyZi5wb2ludChbMzYsIDUzXSwge2hlbGxvOiAnd29ybGQnfSlcbiAqIF0pO1xuICpcbiAqIHR1cmYucHJvcFJlZHVjZShmZWF0dXJlcywgZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRQcm9wZXJ0aWVzLCBmZWF0dXJlSW5kZXgpIHtcbiAqICAgLy89cHJldmlvdXNWYWx1ZVxuICogICAvLz1jdXJyZW50UHJvcGVydGllc1xuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqICAgcmV0dXJuIGN1cnJlbnRQcm9wZXJ0aWVzXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gcHJvcFJlZHVjZShnZW9qc29uLCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIHByZXZpb3VzVmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgcHJvcEVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGN1cnJlbnRQcm9wZXJ0aWVzLCBmZWF0dXJlSW5kZXgpIHtcbiAgICAgICAgaWYgKGZlYXR1cmVJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRQcm9wZXJ0aWVzO1xuICAgICAgICBlbHNlIHByZXZpb3VzVmFsdWUgPSBjYWxsYmFjayhwcmV2aW91c1ZhbHVlLCBjdXJyZW50UHJvcGVydGllcywgZmVhdHVyZUluZGV4KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmVhdHVyZUVhY2hcbiAqXG4gKiBAY2FsbGJhY2sgZmVhdHVyZUVhY2hDYWxsYmFja1xuICogQHBhcmFtIHtGZWF0dXJlPGFueT59IGN1cnJlbnRGZWF0dXJlIFRoZSBjdXJyZW50IGZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS5TdGFydHMgYXQgaW5kZXggMCwgaWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkLCBhbmQgYXQgaW5kZXggMSBvdGhlcndpc2UuXG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZmVhdHVyZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvXG4gKiBBcnJheS5mb3JFYWNoLlxuICpcbiAqIEBuYW1lIGZlYXR1cmVFYWNoXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV9IGdlb2pzb24gYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4KVxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICB0dXJmLnBvaW50KFsyNiwgMzddLCB7Zm9vOiAnYmFyJ30pLFxuICogICB0dXJmLnBvaW50KFszNiwgNTNdLCB7aGVsbG86ICd3b3JsZCd9KVxuICogXSk7XG4gKlxuICogdHVyZi5mZWF0dXJlRWFjaChmZWF0dXJlcywgZnVuY3Rpb24gKGN1cnJlbnRGZWF0dXJlLCBmZWF0dXJlSW5kZXgpIHtcbiAqICAgLy89Y3VycmVudEZlYXR1cmVcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZUVhY2goZ2VvanNvbiwgY2FsbGJhY2spIHtcbiAgICBpZiAoZ2VvanNvbi50eXBlID09PSAnRmVhdHVyZScpIHtcbiAgICAgICAgY2FsbGJhY2soZ2VvanNvbiwgMCk7XG4gICAgfSBlbHNlIGlmIChnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9qc29uLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhnZW9qc29uLmZlYXR1cmVzW2ldLCBpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmVhdHVyZVJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQGNhbGxiYWNrIGZlYXR1cmVSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7RmVhdHVyZX0gY3VycmVudEZlYXR1cmUgVGhlIGN1cnJlbnQgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBmZWF0dXJlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkucmVkdWNlKCkuXG4gKlxuICogQG5hbWUgZmVhdHVyZVJlZHVjZVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtcImZvb1wiOiBcImJhclwifSksXG4gKiAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtcImhlbGxvXCI6IFwid29ybGRcIn0pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmZlYXR1cmVSZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudEZlYXR1cmVcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIHJldHVybiBjdXJyZW50RmVhdHVyZVxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmVSZWR1Y2UoZ2VvanNvbiwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIGZlYXR1cmVFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4KSB7XG4gICAgICAgIGlmIChmZWF0dXJlSW5kZXggPT09IDAgJiYgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50RmVhdHVyZTtcbiAgICAgICAgZWxzZSBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2socHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5cbi8qKlxuICogR2V0IGFsbCBjb29yZGluYXRlcyBmcm9tIGFueSBHZW9KU09OIG9iamVjdC5cbiAqXG4gKiBAbmFtZSBjb29yZEFsbFxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfSBnZW9qc29uIGFueSBHZW9KU09OIG9iamVjdFxuICogQHJldHVybnMge0FycmF5PEFycmF5PG51bWJlcj4+fSBjb29yZGluYXRlIHBvc2l0aW9uIGFycmF5XG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB2YXIgY29vcmRzID0gdHVyZi5jb29yZEFsbChmZWF0dXJlcyk7XG4gKiAvLz0gW1syNiwgMzddLCBbMzYsIDUzXV1cbiAqL1xuZnVuY3Rpb24gY29vcmRBbGwoZ2VvanNvbikge1xuICAgIHZhciBjb29yZHMgPSBbXTtcbiAgICBjb29yZEVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgIGNvb3Jkcy5wdXNoKGNvb3JkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY29vcmRzO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBnZW9tRWFjaFxuICpcbiAqIEBjYWxsYmFjayBnZW9tRWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge0dlb21ldHJ5fSBjdXJyZW50R2VvbWV0cnkgVGhlIGN1cnJlbnQgZ2VvbWV0cnkgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS4gU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRQcm9wZXJ0aWVzIFRoZSBjdXJyZW50IGZlYXR1cmUgcHJvcGVydGllcyBiZWluZyBwcm9jZXNzZWQuXG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBnZW9tZXRyeSBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkuZm9yRWFjaCgpXG4gKlxuICogQG5hbWUgZ2VvbUVhY2hcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZX0gZ2VvanNvbiBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKGN1cnJlbnRHZW9tZXRyeSwgZmVhdHVyZUluZGV4LCBjdXJyZW50UHJvcGVydGllcylcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgICB0dXJmLnBvaW50KFsyNiwgMzddLCB7Zm9vOiAnYmFyJ30pLFxuICogICAgIHR1cmYucG9pbnQoWzM2LCA1M10sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmdlb21FYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudEdlb21ldHJ5LCBmZWF0dXJlSW5kZXgsIGN1cnJlbnRQcm9wZXJ0aWVzKSB7XG4gKiAgIC8vPWN1cnJlbnRHZW9tZXRyeVxuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqICAgLy89Y3VycmVudFByb3BlcnRpZXNcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBnZW9tRWFjaChnZW9qc29uLCBjYWxsYmFjaykge1xuICAgIHZhciBpLCBqLCBnLCBnZW9tZXRyeSwgc3RvcEcsXG4gICAgICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLFxuICAgICAgICBpc0dlb21ldHJ5Q29sbGVjdGlvbixcbiAgICAgICAgZ2VvbWV0cnlQcm9wZXJ0aWVzLFxuICAgICAgICBmZWF0dXJlSW5kZXggPSAwLFxuICAgICAgICBpc0ZlYXR1cmVDb2xsZWN0aW9uID0gZ2VvanNvbi50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgICBpc0ZlYXR1cmUgPSBnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlJyxcbiAgICAgICAgc3RvcCA9IGlzRmVhdHVyZUNvbGxlY3Rpb24gPyBnZW9qc29uLmZlYXR1cmVzLmxlbmd0aCA6IDE7XG5cbiAgLy8gVGhpcyBsb2dpYyBtYXkgbG9vayBhIGxpdHRsZSB3ZWlyZC4gVGhlIHJlYXNvbiB3aHkgaXQgaXMgdGhhdCB3YXlcbiAgLy8gaXMgYmVjYXVzZSBpdCdzIHRyeWluZyB0byBiZSBmYXN0LiBHZW9KU09OIHN1cHBvcnRzIG11bHRpcGxlIGtpbmRzXG4gIC8vIG9mIG9iamVjdHMgYXQgaXRzIHJvb3Q6IEZlYXR1cmVDb2xsZWN0aW9uLCBGZWF0dXJlcywgR2VvbWV0cmllcy5cbiAgLy8gVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIGhhbmRsaW5nIGFsbCBvZiB0aGVtLCBhbmQgdGhhdFxuICAvLyBtZWFucyB0aGF0IHNvbWUgb2YgdGhlIGBmb3JgIGxvb3BzIHlvdSBzZWUgYmVsb3cgYWN0dWFsbHkganVzdCBkb24ndCBhcHBseVxuICAvLyB0byBjZXJ0YWluIGlucHV0cy4gRm9yIGluc3RhbmNlLCBpZiB5b3UgZ2l2ZSB0aGlzIGp1c3QgYVxuICAvLyBQb2ludCBnZW9tZXRyeSwgdGhlbiBib3RoIGxvb3BzIGFyZSBzaG9ydC1jaXJjdWl0ZWQgYW5kIGFsbCB3ZSBkb1xuICAvLyBpcyBncmFkdWFsbHkgcmVuYW1lIHRoZSBpbnB1dCB1bnRpbCBpdCdzIGNhbGxlZCAnZ2VvbWV0cnknLlxuICAvL1xuICAvLyBUaGlzIGFsc28gYWltcyB0byBhbGxvY2F0ZSBhcyBmZXcgcmVzb3VyY2VzIGFzIHBvc3NpYmxlOiBqdXN0IGFcbiAgLy8gZmV3IG51bWJlcnMgYW5kIGJvb2xlYW5zLCByYXRoZXIgdGhhbiBhbnkgdGVtcG9yYXJ5IGFycmF5cyBhcyB3b3VsZFxuICAvLyBiZSByZXF1aXJlZCB3aXRoIHRoZSBub3JtYWxpemF0aW9uIGFwcHJvYWNoLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdG9wOyBpKyspIHtcblxuICAgICAgICBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbiA9IChpc0ZlYXR1cmVDb2xsZWN0aW9uID8gZ2VvanNvbi5mZWF0dXJlc1tpXS5nZW9tZXRyeSA6XG4gICAgICAgIChpc0ZlYXR1cmUgPyBnZW9qc29uLmdlb21ldHJ5IDogZ2VvanNvbikpO1xuICAgICAgICBnZW9tZXRyeVByb3BlcnRpZXMgPSAoaXNGZWF0dXJlQ29sbGVjdGlvbiA/IGdlb2pzb24uZmVhdHVyZXNbaV0ucHJvcGVydGllcyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXNGZWF0dXJlID8gZ2VvanNvbi5wcm9wZXJ0aWVzIDoge30pKTtcbiAgICAgICAgaXNHZW9tZXRyeUNvbGxlY3Rpb24gPSAoZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24pID8gZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24udHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbicgOiBmYWxzZTtcbiAgICAgICAgc3RvcEcgPSBpc0dlb21ldHJ5Q29sbGVjdGlvbiA/IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLmdlb21ldHJpZXMubGVuZ3RoIDogMTtcblxuICAgICAgICBmb3IgKGcgPSAwOyBnIDwgc3RvcEc7IGcrKykge1xuICAgICAgICAgICAgZ2VvbWV0cnkgPSBpc0dlb21ldHJ5Q29sbGVjdGlvbiA/XG4gICAgICAgICAgICBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzW2ddIDogZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb247XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSBudWxsIEdlb21ldHJ5XG4gICAgICAgICAgICBpZiAoZ2VvbWV0cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBmZWF0dXJlSW5kZXgsIGdlb21ldHJ5UHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZUluZGV4Kys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGdlb21ldHJ5LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICAgICAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6XG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZ2VvbWV0cnksIGZlYXR1cmVJbmRleCwgZ2VvbWV0cnlQcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlSW5kZXgrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6IHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZ2VvbWV0cnkuZ2VvbWV0cmllcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhnZW9tZXRyeS5nZW9tZXRyaWVzW2pdLCBmZWF0dXJlSW5kZXgsIGdlb21ldHJ5UHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biBHZW9tZXRyeSBUeXBlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIGdlb21SZWR1Y2VcbiAqXG4gKiBUaGUgZmlyc3QgdGltZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gaXMgY2FsbGVkLCB0aGUgdmFsdWVzIHByb3ZpZGVkIGFzIGFyZ3VtZW50cyBkZXBlbmRcbiAqIG9uIHdoZXRoZXIgdGhlIHJlZHVjZSBtZXRob2QgaGFzIGFuIGluaXRpYWxWYWx1ZSBhcmd1bWVudC5cbiAqXG4gKiBJZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQgdG8gdGhlIHJlZHVjZSBtZXRob2Q6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyBpbml0aWFsVmFsdWUuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBJZiBhbiBpbml0aWFsVmFsdWUgaXMgbm90IHByb3ZpZGVkOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIHNlY29uZCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIEBjYWxsYmFjayBnZW9tUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge0dlb21ldHJ5fSBjdXJyZW50R2VvbWV0cnkgVGhlIGN1cnJlbnQgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjdXJyZW50UHJvcGVydGllcyBUaGUgY3VycmVudCBmZWF0dXJlIHByb3BlcnRpZXMgYmVpbmcgcHJvY2Vzc2VkLlxuICovXG5cbi8qKlxuICogUmVkdWNlIGdlb21ldHJ5IGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5yZWR1Y2UoKS5cbiAqXG4gKiBAbmFtZSBnZW9tUmVkdWNlXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV9IGdlb2pzb24gYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50R2VvbWV0cnksIGZlYXR1cmVJbmRleCwgY3VycmVudFByb3BlcnRpZXMpXG4gKiBAcGFyYW0geyp9IFtpbml0aWFsVmFsdWVdIFZhbHVlIHRvIHVzZSBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGNhbGxiYWNrLlxuICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGF0IHJlc3VsdHMgZnJvbSB0aGUgcmVkdWN0aW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgICAgdHVyZi5wb2ludChbMzYsIDUzXSwge2hlbGxvOiAnd29ybGQnfSlcbiAqIF0pO1xuICpcbiAqIHR1cmYuZ2VvbVJlZHVjZShmZWF0dXJlcywgZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRHZW9tZXRyeSwgZmVhdHVyZUluZGV4LCBjdXJyZW50UHJvcGVydGllcykge1xuICogICAvLz1wcmV2aW91c1ZhbHVlXG4gKiAgIC8vPWN1cnJlbnRHZW9tZXRyeVxuICogICAvLz1mZWF0dXJlSW5kZXhcbiAqICAgLy89Y3VycmVudFByb3BlcnRpZXNcbiAqICAgcmV0dXJuIGN1cnJlbnRHZW9tZXRyeVxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGdlb21SZWR1Y2UoZ2VvanNvbiwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIGdlb21FYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjdXJyZW50R2VvbWV0cnksIGN1cnJlbnRJbmRleCwgY3VycmVudFByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRHZW9tZXRyeTtcbiAgICAgICAgZWxzZSBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2socHJldmlvdXNWYWx1ZSwgY3VycmVudEdlb21ldHJ5LCBjdXJyZW50SW5kZXgsIGN1cnJlbnRQcm9wZXJ0aWVzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmxhdHRlbkVhY2hcbiAqXG4gKiBAY2FsbGJhY2sgZmxhdHRlbkVhY2hDYWxsYmFja1xuICogQHBhcmFtIHtGZWF0dXJlfSBjdXJyZW50RmVhdHVyZSBUaGUgY3VycmVudCBmbGF0dGVuZWQgZmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LiBTdGFydHMgYXQgaW5kZXggMCwgaWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkLCBhbmQgYXQgaW5kZXggMSBvdGhlcndpc2UuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZVN1YkluZGV4IFRoZSBzdWJpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LiBTdGFydHMgYXQgaW5kZXggMCBhbmQgaW5jcmVhc2VzIGlmIHRoZSBmbGF0dGVuZWQgZmVhdHVyZSB3YXMgYSBtdWx0aS1nZW9tZXRyeS5cbiAqL1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBmbGF0dGVuZWQgZmVhdHVyZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvXG4gKiBBcnJheS5mb3JFYWNoLlxuICpcbiAqIEBuYW1lIGZsYXR0ZW5FYWNoXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV9IGdlb2pzb24gYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgICAgdHVyZi5wb2ludChbMjYsIDM3XSwge2ZvbzogJ2Jhcid9KSxcbiAqICAgICB0dXJmLm11bHRpUG9pbnQoW1s0MCwgMzBdLCBbMzYsIDUzXV0sIHtoZWxsbzogJ3dvcmxkJ30pXG4gKiBdKTtcbiAqXG4gKiB0dXJmLmZsYXR0ZW5FYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCwgZmVhdHVyZVN1YkluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRGZWF0dXJlXG4gKiAgIC8vPWZlYXR1cmVJbmRleFxuICogICAvLz1mZWF0dXJlU3ViSW5kZXhcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBmbGF0dGVuRWFjaChnZW9qc29uLCBjYWxsYmFjaykge1xuICAgIGdlb21FYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChnZW9tZXRyeSwgZmVhdHVyZUluZGV4LCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIENhbGxiYWNrIGZvciBzaW5nbGUgZ2VvbWV0cnlcbiAgICAgICAgdmFyIHR5cGUgPSAoZ2VvbWV0cnkgPT09IG51bGwpID8gbnVsbCA6IGdlb21ldHJ5LnR5cGU7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XG4gICAgICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICAgICAgY2FsbGJhY2soZmVhdHVyZShnZW9tZXRyeSwgcHJvcGVydGllcyksIGZlYXR1cmVJbmRleCwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2VvbVR5cGU7XG5cbiAgICAgICAgLy8gQ2FsbGJhY2sgZm9yIG11bHRpLWdlb21ldHJ5XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdNdWx0aVBvaW50JzpcbiAgICAgICAgICAgIGdlb21UeXBlID0gJ1BvaW50JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxuICAgICAgICAgICAgZ2VvbVR5cGUgPSAnTGluZVN0cmluZyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgICAgIGdlb21UeXBlID0gJ1BvbHlnb24nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBnZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZGluYXRlLCBmZWF0dXJlU3ViSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBnZW9tID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IGdlb21UeXBlLFxuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FsbGJhY2soZmVhdHVyZShnZW9tLCBwcm9wZXJ0aWVzKSwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBmbGF0dGVuUmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAY2FsbGJhY2sgZmxhdHRlblJlZHVjZUNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IHByZXZpb3VzVmFsdWUgVGhlIGFjY3VtdWxhdGVkIHZhbHVlIHByZXZpb3VzbHkgcmV0dXJuZWQgaW4gdGhlIGxhc3QgaW52b2NhdGlvblxuICogb2YgdGhlIGNhbGxiYWNrLCBvciBpbml0aWFsVmFsdWUsIGlmIHN1cHBsaWVkLlxuICogQHBhcmFtIHtGZWF0dXJlfSBjdXJyZW50RmVhdHVyZSBUaGUgY3VycmVudCBGZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWF0dXJlSW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZVxuICogYXJyYXkuU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVTdWJJbmRleCBUaGUgc3ViaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS4gU3RhcnRzIGF0IGluZGV4IDAgYW5kIGluY3JlYXNlcyBpZiB0aGUgZmxhdHRlbmVkIGZlYXR1cmUgd2FzIGEgbXVsdGktZ2VvbWV0cnkuXG4gKi9cblxuLyoqXG4gKiBSZWR1Y2UgZmxhdHRlbmVkIGZlYXR1cmVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5yZWR1Y2UoKS5cbiAqXG4gKiBAbmFtZSBmbGF0dGVuUmVkdWNlXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV9IGdlb2pzb24gYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50RmVhdHVyZSwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpXG4gKiBAcGFyYW0geyp9IFtpbml0aWFsVmFsdWVdIFZhbHVlIHRvIHVzZSBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGNhbGxiYWNrLlxuICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGF0IHJlc3VsdHMgZnJvbSB0aGUgcmVkdWN0aW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICAgIHR1cmYucG9pbnQoWzI2LCAzN10sIHtmb286ICdiYXInfSksXG4gKiAgICAgdHVyZi5tdWx0aVBvaW50KFtbNDAsIDMwXSwgWzM2LCA1M11dLCB7aGVsbG86ICd3b3JsZCd9KVxuICogXSk7XG4gKlxuICogdHVyZi5mbGF0dGVuUmVkdWNlKGZlYXR1cmVzLCBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCwgZmVhdHVyZVN1YkluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudEZlYXR1cmVcbiAqICAgLy89ZmVhdHVyZUluZGV4XG4gKiAgIC8vPWZlYXR1cmVTdWJJbmRleFxuICogICByZXR1cm4gY3VycmVudEZlYXR1cmVcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBmbGF0dGVuUmVkdWNlKGdlb2pzb24sIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBmbGF0dGVuRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoY3VycmVudEZlYXR1cmUsIGZlYXR1cmVJbmRleCwgZmVhdHVyZVN1YkluZGV4KSB7XG4gICAgICAgIGlmIChmZWF0dXJlSW5kZXggPT09IDAgJiYgZmVhdHVyZVN1YkluZGV4ID09PSAwICYmIGluaXRpYWxWYWx1ZSA9PT0gdW5kZWZpbmVkKSBwcmV2aW91c1ZhbHVlID0gY3VycmVudEZlYXR1cmU7XG4gICAgICAgIGVsc2UgcHJldmlvdXNWYWx1ZSA9IGNhbGxiYWNrKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRGZWF0dXJlLCBmZWF0dXJlSW5kZXgsIGZlYXR1cmVTdWJJbmRleCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIHNlZ21lbnRFYWNoXG4gKlxuICogQGNhbGxiYWNrIHNlZ21lbnRFYWNoQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gY3VycmVudFNlZ21lbnQgVGhlIGN1cnJlbnQgc2VnbWVudCBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gZmVhdHVyZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgYXJyYXksIHN0YXJ0cyBhdCBpbmRleCAwLlxuICogQHBhcmFtIHtudW1iZXJ9IGZlYXR1cmVTdWJJbmRleCBUaGUgc3ViaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS4gU3RhcnRzIGF0IGluZGV4IDAgYW5kIGluY3JlYXNlcyBmb3IgZWFjaCBpdGVyYXRpbmcgbGluZSBzZWdtZW50LlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgMi12ZXJ0ZXggbGluZSBzZWdtZW50IGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5mb3JFYWNoKClcbiAqIChNdWx0aSlQb2ludCBnZW9tZXRyaWVzIGRvIG5vdCBjb250YWluIHNlZ21lbnRzIHRoZXJlZm9yZSB0aGV5IGFyZSBpZ25vcmVkIGR1cmluZyB0aGlzIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV8R2VvbWV0cnl9IGdlb2pzb24gYW55IEdlb0pTT05cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKGN1cnJlbnRTZWdtZW50LCBmZWF0dXJlSW5kZXgsIGZlYXR1cmVTdWJJbmRleClcbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWy01MCwgNV0sIFstNDAsIC0xMF0sIFstNTAsIC0xMF0sIFstNDAsIDVdLCBbLTUwLCA1XV1dKTtcbiAqXG4gKiAvLyBJdGVyYXRlIG92ZXIgR2VvSlNPTiBieSAyLXZlcnRleCBzZWdtZW50c1xuICogdHVyZi5zZWdtZW50RWFjaChwb2x5Z29uLCBmdW5jdGlvbiAoY3VycmVudFNlZ21lbnQsIGZlYXR1cmVJbmRleCwgZmVhdHVyZVN1YkluZGV4KSB7XG4gKiAgIC8vPSBjdXJyZW50U2VnbWVudFxuICogICAvLz0gZmVhdHVyZUluZGV4XG4gKiAgIC8vPSBmZWF0dXJlU3ViSW5kZXhcbiAqIH0pO1xuICpcbiAqIC8vIENhbGN1bGF0ZSB0aGUgdG90YWwgbnVtYmVyIG9mIHNlZ21lbnRzXG4gKiB2YXIgdG90YWwgPSAwO1xuICogdmFyIGluaXRpYWxWYWx1ZSA9IDA7XG4gKiB0dXJmLnNlZ21lbnRFYWNoKHBvbHlnb24sIGZ1bmN0aW9uICgpIHtcbiAqICAgICB0b3RhbCsrO1xuICogfSwgaW5pdGlhbFZhbHVlKTtcbiAqL1xuZnVuY3Rpb24gc2VnbWVudEVhY2goZ2VvanNvbiwgY2FsbGJhY2spIHtcbiAgICBmbGF0dGVuRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoZmVhdHVyZSwgZmVhdHVyZUluZGV4KSB7XG4gICAgICAgIHZhciBmZWF0dXJlU3ViSW5kZXggPSAwO1xuICAgICAgICAvLyBFeGNsdWRlIG51bGwgR2VvbWV0cmllc1xuICAgICAgICBpZiAoIWZlYXR1cmUuZ2VvbWV0cnkpIHJldHVybjtcbiAgICAgICAgLy8gKE11bHRpKVBvaW50IGdlb21ldHJpZXMgZG8gbm90IGNvbnRhaW4gc2VnbWVudHMgdGhlcmVmb3JlIHRoZXkgYXJlIGlnbm9yZWQgZHVyaW5nIHRoaXMgb3BlcmF0aW9uLlxuICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUuZ2VvbWV0cnkudHlwZTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdQb2ludCcgfHwgdHlwZSA9PT0gJ011bHRpUG9pbnQnKSByZXR1cm47XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgMi12ZXJ0ZXggbGluZSBzZWdtZW50c1xuICAgICAgICBjb29yZFJlZHVjZShmZWF0dXJlLCBmdW5jdGlvbiAocHJldmlvdXNDb29yZHMsIGN1cnJlbnRDb29yZCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRTZWdtZW50ID0gbGluZVN0cmluZyhbcHJldmlvdXNDb29yZHMsIGN1cnJlbnRDb29yZF0sIGZlYXR1cmUucHJvcGVydGllcyk7XG4gICAgICAgICAgICBjYWxsYmFjayhjdXJyZW50U2VnbWVudCwgZmVhdHVyZUluZGV4LCBmZWF0dXJlU3ViSW5kZXgpO1xuICAgICAgICAgICAgZmVhdHVyZVN1YkluZGV4Kys7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudENvb3JkO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDYWxsYmFjayBmb3Igc2VnbWVudFJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQGNhbGxiYWNrIHNlZ21lbnRSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBbcHJldmlvdXNWYWx1ZV0gVGhlIGFjY3VtdWxhdGVkIHZhbHVlIHByZXZpb3VzbHkgcmV0dXJuZWQgaW4gdGhlIGxhc3QgaW52b2NhdGlvblxuICogb2YgdGhlIGNhbGxiYWNrLCBvciBpbml0aWFsVmFsdWUsIGlmIHN1cHBsaWVkLlxuICogQHBhcmFtIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBbY3VycmVudFNlZ21lbnRdIFRoZSBjdXJyZW50IHNlZ21lbnQgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtjdXJyZW50SW5kZXhdIFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LiBTdGFydHMgYXQgaW5kZXggMCwgaWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkLCBhbmQgYXQgaW5kZXggMSBvdGhlcndpc2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW2N1cnJlbnRTdWJJbmRleF0gVGhlIHN1YmluZGV4IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZVxuICogYXJyYXkuIFN0YXJ0cyBhdCBpbmRleCAwIGFuZCBpbmNyZWFzZXMgZm9yIGVhY2ggaXRlcmF0aW5nIGxpbmUgc2VnbWVudC5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSAyLXZlcnRleCBsaW5lIHNlZ21lbnQgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LnJlZHVjZSgpXG4gKiAoTXVsdGkpUG9pbnQgZ2VvbWV0cmllcyBkbyBub3QgY29udGFpbiBzZWdtZW50cyB0aGVyZWZvcmUgdGhleSBhcmUgaWdub3JlZCBkdXJpbmcgdGhpcyBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIGFueSBHZW9KU09OXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50U2VnbWVudCwgY3VycmVudEluZGV4KVxuICogQHBhcmFtIHsqfSBbaW5pdGlhbFZhbHVlXSBWYWx1ZSB0byB1c2UgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmaXJzdCBjYWxsIG9mIHRoZSBjYWxsYmFjay5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWy01MCwgNV0sIFstNDAsIC0xMF0sIFstNTAsIC0xMF0sIFstNDAsIDVdLCBbLTUwLCA1XV1dKTtcbiAqXG4gKiAvLyBJdGVyYXRlIG92ZXIgR2VvSlNPTiBieSAyLXZlcnRleCBzZWdtZW50c1xuICogdHVyZi5zZWdtZW50UmVkdWNlKHBvbHlnb24sIGZ1bmN0aW9uIChwcmV2aW91c1NlZ21lbnQsIGN1cnJlbnRTZWdtZW50LCBjdXJyZW50SW5kZXgsIGN1cnJlbnRTdWJJbmRleCkge1xuICogICAvLz0gcHJldmlvdXNTZWdtZW50XG4gKiAgIC8vPSBjdXJyZW50U2VnbWVudFxuICogICAvLz0gY3VycmVudEluZGV4XG4gKiAgIC8vPSBjdXJyZW50U3ViSW5kZXhcbiAqICAgcmV0dXJuIGN1cnJlbnRTZWdtZW50XG4gKiB9KTtcbiAqXG4gKiAvLyBDYWxjdWxhdGUgdGhlIHRvdGFsIG51bWJlciBvZiBzZWdtZW50c1xuICogdmFyIGluaXRpYWxWYWx1ZSA9IDBcbiAqIHZhciB0b3RhbCA9IHR1cmYuc2VnbWVudFJlZHVjZShwb2x5Z29uLCBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSkge1xuICogICAgIHByZXZpb3VzVmFsdWUrKztcbiAqICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbiAqIH0sIGluaXRpYWxWYWx1ZSk7XG4gKi9cbmZ1bmN0aW9uIHNlZ21lbnRSZWR1Y2UoZ2VvanNvbiwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIHNlZ21lbnRFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjdXJyZW50U2VnbWVudCwgY3VycmVudEluZGV4LCBjdXJyZW50U3ViSW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRTZWdtZW50O1xuICAgICAgICBlbHNlIHByZXZpb3VzVmFsdWUgPSBjYWxsYmFjayhwcmV2aW91c1ZhbHVlLCBjdXJyZW50U2VnbWVudCwgY3VycmVudEluZGV4LCBjdXJyZW50U3ViSW5kZXgpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBGZWF0dXJlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7R2VvbWV0cnl9IGdlb21ldHJ5IEdlb0pTT04gR2VvbWV0cnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIFByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlfSBHZW9KU09OIEZlYXR1cmVcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShnZW9tZXRyeSwgcHJvcGVydGllcykge1xuICAgIGlmIChnZW9tZXRyeSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlb21ldHJ5IHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnlcbiAgICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBMaW5lU3RyaW5nXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkaW5hdGVzIExpbmUgQ29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIFByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBHZW9KU09OIExpbmVTdHJpbmcgRmVhdHVyZVxuICovXG5mdW5jdGlvbiBsaW5lU3RyaW5nKGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCFjb29yZGluYXRlcykgdGhyb3cgbmV3IEVycm9yKCdObyBjb29yZGluYXRlcyBwYXNzZWQnKTtcbiAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoIDwgMikgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBtdXN0IGJlIGFuIGFycmF5IG9mIHR3byBvciBtb3JlIHBvc2l0aW9ucycpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgICAgdHlwZTogJ0xpbmVTdHJpbmcnLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjb29yZEVhY2g6IGNvb3JkRWFjaCxcbiAgICBjb29yZFJlZHVjZTogY29vcmRSZWR1Y2UsXG4gICAgcHJvcEVhY2g6IHByb3BFYWNoLFxuICAgIHByb3BSZWR1Y2U6IHByb3BSZWR1Y2UsXG4gICAgZmVhdHVyZUVhY2g6IGZlYXR1cmVFYWNoLFxuICAgIGZlYXR1cmVSZWR1Y2U6IGZlYXR1cmVSZWR1Y2UsXG4gICAgY29vcmRBbGw6IGNvb3JkQWxsLFxuICAgIGdlb21FYWNoOiBnZW9tRWFjaCxcbiAgICBnZW9tUmVkdWNlOiBnZW9tUmVkdWNlLFxuICAgIGZsYXR0ZW5FYWNoOiBmbGF0dGVuRWFjaCxcbiAgICBmbGF0dGVuUmVkdWNlOiBmbGF0dGVuUmVkdWNlLFxuICAgIHNlZ21lbnRFYWNoOiBzZWdtZW50RWFjaCxcbiAgICBzZWdtZW50UmVkdWNlOiBzZWdtZW50UmVkdWNlXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvbWV0YS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY29vcmRFYWNoID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpLmNvb3JkRWFjaDtcblxuLyoqXG4gKiBUYWtlcyBhIHNldCBvZiBmZWF0dXJlcywgY2FsY3VsYXRlcyB0aGUgYmJveCBvZiBhbGwgaW5wdXQgZmVhdHVyZXMsIGFuZCByZXR1cm5zIGEgYm91bmRpbmcgYm94LlxuICpcbiAqIEBuYW1lIGJib3hcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxhbnk+fSBnZW9qc29uIGlucHV0IGZlYXR1cmVzXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gYmJveCBleHRlbnQgaW4gW21pblgsIG1pblksIG1heFgsIG1heFldIG9yZGVyXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1stNzQsIDQwXSwgWy03OCwgNDJdLCBbLTgyLCAzNV1dKTtcbiAqIHZhciBiYm94ID0gdHVyZi5iYm94KGxpbmUpO1xuICogdmFyIGJib3hQb2x5Z29uID0gdHVyZi5iYm94UG9seWdvbihiYm94KTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbbGluZSwgYmJveFBvbHlnb25dXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdlb2pzb24pIHtcbiAgICB2YXIgYmJveCA9IFtJbmZpbml0eSwgSW5maW5pdHksIC1JbmZpbml0eSwgLUluZmluaXR5XTtcbiAgICBjb29yZEVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgIGlmIChiYm94WzBdID4gY29vcmRbMF0pIGJib3hbMF0gPSBjb29yZFswXTtcbiAgICAgICAgaWYgKGJib3hbMV0gPiBjb29yZFsxXSkgYmJveFsxXSA9IGNvb3JkWzFdO1xuICAgICAgICBpZiAoYmJveFsyXSA8IGNvb3JkWzBdKSBiYm94WzJdID0gY29vcmRbMF07XG4gICAgICAgIGlmIChiYm94WzNdIDwgY29vcmRbMV0pIGJib3hbM10gPSBjb29yZFsxXTtcbiAgICB9KTtcbiAgICByZXR1cm4gYmJveDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9iYm94L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIFdyYXBzIGEgR2VvSlNPTiB7QGxpbmsgR2VvbWV0cnl9IGluIGEgR2VvSlNPTiB7QGxpbmsgRmVhdHVyZX0uXG4gKlxuICogQG5hbWUgZmVhdHVyZVxuICogQHBhcmFtIHtHZW9tZXRyeX0gZ2VvbWV0cnkgaW5wdXQgZ2VvbWV0cnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcz17fV0gYW4gT2JqZWN0IG9mIGtleS12YWx1ZSBwYWlycyB0byBhZGQgYXMgcHJvcGVydGllc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYmJveF0gQkJveCBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbaWRdIElkZW50aWZpZXJcbiAqIEByZXR1cm5zIHtGZWF0dXJlfSBhIEdlb0pTT04gRmVhdHVyZVxuICogQGV4YW1wbGVcbiAqIHZhciBnZW9tZXRyeSA9IHtcbiAqICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgXCJjb29yZGluYXRlc1wiOiBbMTEwLCA1MF1cbiAqIH07XG4gKlxuICogdmFyIGZlYXR1cmUgPSB0dXJmLmZlYXR1cmUoZ2VvbWV0cnkpO1xuICpcbiAqIC8vPWZlYXR1cmVcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShnZW9tZXRyeSwgcHJvcGVydGllcywgYmJveCwgaWQpIHtcbiAgICBpZiAoZ2VvbWV0cnkgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdnZW9tZXRyeSBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuY29uc3RydWN0b3IgIT09IE9iamVjdCkgdGhyb3cgbmV3IEVycm9yKCdwcm9wZXJ0aWVzIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cbiAgICB2YXIgZmVhdCA9IHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnlcbiAgICB9O1xuICAgIGlmIChiYm94KSB7XG4gICAgICAgIGlmIChiYm94Lmxlbmd0aCAhPT0gNCkgdGhyb3cgbmV3IEVycm9yKCdiYm94IG11c3QgYmUgYW4gQXJyYXkgb2YgNCBudW1iZXJzJyk7XG4gICAgICAgIGZlYXQuYmJveCA9IGJib3g7XG4gICAgfVxuICAgIGlmIChpZCkgZmVhdC5pZCA9IGlkO1xuICAgIHJldHVybiBmZWF0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBHZW9KU09OIHtAbGluayBHZW9tZXRyeX0gZnJvbSBhIEdlb21ldHJ5IHN0cmluZyB0eXBlICYgY29vcmRpbmF0ZXMuXG4gKiBGb3IgR2VvbWV0cnlDb2xsZWN0aW9uIHR5cGUgdXNlIGBoZWxwZXJzLmdlb21ldHJ5Q29sbGVjdGlvbmBcbiAqXG4gKiBAbmFtZSBnZW9tZXRyeVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgR2VvbWV0cnkgVHlwZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBjb29yZGluYXRlcyBDb29yZGluYXRlc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYmJveF0gQkJveCBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXVxuICogQHJldHVybnMge0dlb21ldHJ5fSBhIEdlb0pTT04gR2VvbWV0cnlcbiAqIEBleGFtcGxlXG4gKiB2YXIgdHlwZSA9ICdQb2ludCc7XG4gKiB2YXIgY29vcmRpbmF0ZXMgPSBbMTEwLCA1MF07XG4gKlxuICogdmFyIGdlb21ldHJ5ID0gdHVyZi5nZW9tZXRyeSh0eXBlLCBjb29yZGluYXRlcyk7XG4gKlxuICogLy89Z2VvbWV0cnlcbiAqL1xuZnVuY3Rpb24gZ2VvbWV0cnkodHlwZSwgY29vcmRpbmF0ZXMsIGJib3gpIHtcbiAgICAvLyBWYWxpZGF0aW9uXG4gICAgaWYgKCF0eXBlKSB0aHJvdyBuZXcgRXJyb3IoJ3R5cGUgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ2Nvb3JkaW5hdGVzIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNvb3JkaW5hdGVzKSkgdGhyb3cgbmV3IEVycm9yKCdjb29yZGluYXRlcyBtdXN0IGJlIGFuIEFycmF5Jyk7XG5cbiAgICB2YXIgZ2VvbTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdQb2ludCc6IGdlb20gPSBwb2ludChjb29yZGluYXRlcykuZ2VvbWV0cnk7IGJyZWFrO1xuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOiBnZW9tID0gbGluZVN0cmluZyhjb29yZGluYXRlcykuZ2VvbWV0cnk7IGJyZWFrO1xuICAgIGNhc2UgJ1BvbHlnb24nOiBnZW9tID0gcG9seWdvbihjb29yZGluYXRlcykuZ2VvbWV0cnk7IGJyZWFrO1xuICAgIGNhc2UgJ011bHRpUG9pbnQnOiBnZW9tID0gbXVsdGlQb2ludChjb29yZGluYXRlcykuZ2VvbWV0cnk7IGJyZWFrO1xuICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6IGdlb20gPSBtdWx0aUxpbmVTdHJpbmcoY29vcmRpbmF0ZXMpLmdlb21ldHJ5OyBicmVhaztcbiAgICBjYXNlICdNdWx0aVBvbHlnb24nOiBnZW9tID0gbXVsdGlQb2x5Z29uKGNvb3JkaW5hdGVzKS5nZW9tZXRyeTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKHR5cGUgKyAnIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgaWYgKGJib3gpIHtcbiAgICAgICAgaWYgKGJib3gubGVuZ3RoICE9PSA0KSB0aHJvdyBuZXcgRXJyb3IoJ2Jib3ggbXVzdCBiZSBhbiBBcnJheSBvZiA0IG51bWJlcnMnKTtcbiAgICAgICAgZ2VvbS5iYm94ID0gYmJveDtcbiAgICB9XG4gICAgcmV0dXJuIGdlb207XG59XG5cbi8qKlxuICogVGFrZXMgY29vcmRpbmF0ZXMgYW5kIHByb3BlcnRpZXMgKG9wdGlvbmFsKSBhbmQgcmV0dXJucyBhIG5ldyB7QGxpbmsgUG9pbnR9IGZlYXR1cmUuXG4gKlxuICogQG5hbWUgcG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXMgbG9uZ2l0dWRlLCBsYXRpdHVkZSBwb3NpdGlvbiAoZWFjaCBpbiBkZWNpbWFsIGRlZ3JlZXMpXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2Jib3hdIEJCb3ggW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF1cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2lkXSBJZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxQb2ludD59IGEgUG9pbnQgZmVhdHVyZVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2ludCA9IHR1cmYucG9pbnQoWy03NS4zNDMsIDM5Ljk4NF0pO1xuICpcbiAqIC8vPXBvaW50XG4gKi9cbmZ1bmN0aW9uIHBvaW50KGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzLCBiYm94LCBpZCkge1xuICAgIGlmICghY29vcmRpbmF0ZXMpIHRocm93IG5ldyBFcnJvcignTm8gY29vcmRpbmF0ZXMgcGFzc2VkJyk7XG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ0Nvb3JkaW5hdGVzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoIDwgMikgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBtdXN0IGJlIGF0IGxlYXN0IDIgbnVtYmVycyBsb25nJyk7XG4gICAgaWYgKHR5cGVvZiBjb29yZGluYXRlc1swXSAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGNvb3JkaW5hdGVzWzFdICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBtdXN0IGNvbnRhaW4gbnVtYmVycycpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnUG9pbnQnLFxuICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICB9LCBwcm9wZXJ0aWVzLCBiYm94LCBpZCk7XG59XG5cbi8qKlxuICogVGFrZXMgYW4gYXJyYXkgb2YgTGluZWFyUmluZ3MgYW5kIG9wdGlvbmFsbHkgYW4ge0BsaW5rIE9iamVjdH0gd2l0aCBwcm9wZXJ0aWVzIGFuZCByZXR1cm5zIGEge0BsaW5rIFBvbHlnb259IGZlYXR1cmUuXG4gKlxuICogQG5hbWUgcG9seWdvblxuICogQHBhcmFtIHtBcnJheTxBcnJheTxBcnJheTxudW1iZXI+Pj59IGNvb3JkaW5hdGVzIGFuIGFycmF5IG9mIExpbmVhclJpbmdzXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2Jib3hdIEJCb3ggW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF1cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2lkXSBJZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxQb2x5Z29uPn0gYSBQb2x5Z29uIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiBhIExpbmVhclJpbmcgb2YgdGhlIHBvbHlnb24gaGFzIHRvbyBmZXcgcG9zaXRpb25zXG4gKiBvciBpZiBhIExpbmVhclJpbmcgb2YgdGhlIFBvbHlnb24gZG9lcyBub3QgaGF2ZSBtYXRjaGluZyBQb3NpdGlvbnMgYXQgdGhlIGJlZ2lubmluZyAmIGVuZC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1xuICogICBbLTIuMjc1NTQzLCA1My40NjQ1NDddLFxuICogICBbLTIuMjc1NTQzLCA1My40ODkyNzFdLFxuICogICBbLTIuMjE1MTE4LCA1My40ODkyNzFdLFxuICogICBbLTIuMjE1MTE4LCA1My40NjQ1NDddLFxuICogICBbLTIuMjc1NTQzLCA1My40NjQ1NDddXG4gKiBdXSwgeyBuYW1lOiAncG9seTEnLCBwb3B1bGF0aW9uOiA0MDB9KTtcbiAqXG4gKiAvLz1wb2x5Z29uXG4gKi9cbmZ1bmN0aW9uIHBvbHlnb24oY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMsIGJib3gsIGlkKSB7XG4gICAgaWYgKCFjb29yZGluYXRlcykgdGhyb3cgbmV3IEVycm9yKCdObyBjb29yZGluYXRlcyBwYXNzZWQnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJpbmcgPSBjb29yZGluYXRlc1tpXTtcbiAgICAgICAgaWYgKHJpbmcubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFYWNoIExpbmVhclJpbmcgb2YgYSBQb2x5Z29uIG11c3QgaGF2ZSA0IG9yIG1vcmUgUG9zaXRpb25zLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmluZ1tyaW5nLmxlbmd0aCAtIDFdLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAocmluZ1tyaW5nLmxlbmd0aCAtIDFdW2pdICE9PSByaW5nWzBdW2pdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhbmQgbGFzdCBQb3NpdGlvbiBhcmUgbm90IGVxdWl2YWxlbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcywgYmJveCwgaWQpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgTGluZVN0cmluZ30gYmFzZWQgb24gYVxuICogY29vcmRpbmF0ZSBhcnJheS4gUHJvcGVydGllcyBjYW4gYmUgYWRkZWQgb3B0aW9uYWxseS5cbiAqXG4gKiBAbmFtZSBsaW5lU3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBQb3NpdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcz17fV0gYW4gT2JqZWN0IG9mIGtleS12YWx1ZSBwYWlycyB0byBhZGQgYXMgcHJvcGVydGllc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYmJveF0gQkJveCBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbaWRdIElkZW50aWZpZXJcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBhIExpbmVTdHJpbmcgZmVhdHVyZVxuICogQHRocm93cyB7RXJyb3J9IGlmIG5vIGNvb3JkaW5hdGVzIGFyZSBwYXNzZWRcbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZXN0cmluZzEgPSB0dXJmLmxpbmVTdHJpbmcoW1xuICogICBbLTIxLjk2NDQxNiwgNjQuMTQ4MjAzXSxcbiAqICAgWy0yMS45NTYxNzYsIDY0LjE0MTMxNl0sXG4gKiAgIFstMjEuOTM5MDEsIDY0LjEzNTkyNF0sXG4gKiAgIFstMjEuOTI3MzM3LCA2NC4xMzY2NzNdXG4gKiBdKTtcbiAqIHZhciBsaW5lc3RyaW5nMiA9IHR1cmYubGluZVN0cmluZyhbXG4gKiAgIFstMjEuOTI5MDU0LCA2NC4xMjc5ODVdLFxuICogICBbLTIxLjkxMjkxOCwgNjQuMTM0NzI2XSxcbiAqICAgWy0yMS45MTYwMDcsIDY0LjE0MTAxNl0sXG4gKiAgIFstMjEuOTMwMDg0LCA2NC4xNDQ0Nl1cbiAqIF0sIHtuYW1lOiAnbGluZSAxJywgZGlzdGFuY2U6IDE0NX0pO1xuICpcbiAqIC8vPWxpbmVzdHJpbmcxXG4gKlxuICogLy89bGluZXN0cmluZzJcbiAqL1xuZnVuY3Rpb24gbGluZVN0cmluZyhjb29yZGluYXRlcywgcHJvcGVydGllcywgYmJveCwgaWQpIHtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvb3JkaW5hdGVzIHBhc3NlZCcpO1xuICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPCAyKSB0aHJvdyBuZXcgRXJyb3IoJ0Nvb3JkaW5hdGVzIG11c3QgYmUgYW4gYXJyYXkgb2YgdHdvIG9yIG1vcmUgcG9zaXRpb25zJyk7XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcywgYmJveCwgaWQpO1xufVxuXG4vKipcbiAqIFRha2VzIG9uZSBvciBtb3JlIHtAbGluayBGZWF0dXJlfEZlYXR1cmVzfSBhbmQgY3JlYXRlcyBhIHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0uXG4gKlxuICogQG5hbWUgZmVhdHVyZUNvbGxlY3Rpb25cbiAqIEBwYXJhbSB7RmVhdHVyZVtdfSBmZWF0dXJlcyBpbnB1dCBmZWF0dXJlc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYmJveF0gQkJveCBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXVxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9ufSBhIEZlYXR1cmVDb2xsZWN0aW9uIG9mIGlucHV0IGZlYXR1cmVzXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0gW1xuICogIHR1cmYucG9pbnQoWy03NS4zNDMsIDM5Ljk4NF0sIHtuYW1lOiAnTG9jYXRpb24gQSd9KSxcbiAqICB0dXJmLnBvaW50KFstNzUuODMzLCAzOS4yODRdLCB7bmFtZTogJ0xvY2F0aW9uIEInfSksXG4gKiAgdHVyZi5wb2ludChbLTc1LjUzNCwgMzkuMTIzXSwge25hbWU6ICdMb2NhdGlvbiBDJ30pXG4gKiBdO1xuICpcbiAqIHZhciBjb2xsZWN0aW9uID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihmZWF0dXJlcyk7XG4gKlxuICogLy89Y29sbGVjdGlvblxuICovXG5mdW5jdGlvbiBmZWF0dXJlQ29sbGVjdGlvbihmZWF0dXJlcywgYmJveCkge1xuICAgIGlmICghZmVhdHVyZXMpIHRocm93IG5ldyBFcnJvcignTm8gZmVhdHVyZXMgcGFzc2VkJyk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZlYXR1cmVzKSkgdGhyb3cgbmV3IEVycm9yKCdmZWF0dXJlcyBtdXN0IGJlIGFuIEFycmF5Jyk7XG5cbiAgICB2YXIgZmMgPSB7XG4gICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlc1xuICAgIH07XG4gICAgaWYgKGJib3gpIGZjLmJib3ggPSBiYm94O1xuICAgIHJldHVybiBmYztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEZlYXR1cmU8TXVsdGlMaW5lU3RyaW5nPn0gYmFzZWQgb24gYVxuICogY29vcmRpbmF0ZSBhcnJheS4gUHJvcGVydGllcyBjYW4gYmUgYWRkZWQgb3B0aW9uYWxseS5cbiAqXG4gKiBAbmFtZSBtdWx0aUxpbmVTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBMaW5lU3RyaW5nc1xuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XSBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFtiYm94XSBCQm94IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IFtpZF0gSWRlbnRpZmllclxuICogQHJldHVybnMge0ZlYXR1cmU8TXVsdGlMaW5lU3RyaW5nPn0gYSBNdWx0aUxpbmVTdHJpbmcgZmVhdHVyZVxuICogQHRocm93cyB7RXJyb3J9IGlmIG5vIGNvb3JkaW5hdGVzIGFyZSBwYXNzZWRcbiAqIEBleGFtcGxlXG4gKiB2YXIgbXVsdGlMaW5lID0gdHVyZi5tdWx0aUxpbmVTdHJpbmcoW1tbMCwwXSxbMTAsMTBdXV0pO1xuICpcbiAqIC8vPW11bHRpTGluZVxuICovXG5mdW5jdGlvbiBtdWx0aUxpbmVTdHJpbmcoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMsIGJib3gsIGlkKSB7XG4gICAgaWYgKCFjb29yZGluYXRlcykgdGhyb3cgbmV3IEVycm9yKCdObyBjb29yZGluYXRlcyBwYXNzZWQnKTtcblxuICAgIHJldHVybiBmZWF0dXJlKHtcbiAgICAgICAgdHlwZTogJ011bHRpTGluZVN0cmluZycsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgIH0sIHByb3BlcnRpZXMsIGJib3gsIGlkKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEZlYXR1cmU8TXVsdGlQb2ludD59IGJhc2VkIG9uIGFcbiAqIGNvb3JkaW5hdGUgYXJyYXkuIFByb3BlcnRpZXMgY2FuIGJlIGFkZGVkIG9wdGlvbmFsbHkuXG4gKlxuICogQG5hbWUgbXVsdGlQb2ludFxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXMgYW4gYXJyYXkgb2YgUG9zaXRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2Jib3hdIEJCb3ggW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF1cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2lkXSBJZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxNdWx0aVBvaW50Pn0gYSBNdWx0aVBvaW50IGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpUHQgPSB0dXJmLm11bHRpUG9pbnQoW1swLDBdLFsxMCwxMF1dKTtcbiAqXG4gKiAvLz1tdWx0aVB0XG4gKi9cbmZ1bmN0aW9uIG11bHRpUG9pbnQoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMsIGJib3gsIGlkKSB7XG4gICAgaWYgKCFjb29yZGluYXRlcykgdGhyb3cgbmV3IEVycm9yKCdObyBjb29yZGluYXRlcyBwYXNzZWQnKTtcblxuICAgIHJldHVybiBmZWF0dXJlKHtcbiAgICAgICAgdHlwZTogJ011bHRpUG9pbnQnLFxuICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICB9LCBwcm9wZXJ0aWVzLCBiYm94LCBpZCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBGZWF0dXJlPE11bHRpUG9seWdvbj59IGJhc2VkIG9uIGFcbiAqIGNvb3JkaW5hdGUgYXJyYXkuIFByb3BlcnRpZXMgY2FuIGJlIGFkZGVkIG9wdGlvbmFsbHkuXG4gKlxuICogQG5hbWUgbXVsdGlQb2x5Z29uXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PEFycmF5PEFycmF5PG51bWJlcj4+Pj59IGNvb3JkaW5hdGVzIGFuIGFycmF5IG9mIFBvbHlnb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2Jib3hdIEJCb3ggW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF1cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2lkXSBJZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxNdWx0aVBvbHlnb24+fSBhIG11bHRpcG9seWdvbiBmZWF0dXJlXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgbm8gY29vcmRpbmF0ZXMgYXJlIHBhc3NlZFxuICogQGV4YW1wbGVcbiAqIHZhciBtdWx0aVBvbHkgPSB0dXJmLm11bHRpUG9seWdvbihbW1tbMCwwXSxbMCwxMF0sWzEwLDEwXSxbMTAsMF0sWzAsMF1dXV0pO1xuICpcbiAqIC8vPW11bHRpUG9seVxuICpcbiAqL1xuZnVuY3Rpb24gbXVsdGlQb2x5Z29uKGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzLCBiYm94LCBpZCkge1xuICAgIGlmICghY29vcmRpbmF0ZXMpIHRocm93IG5ldyBFcnJvcignTm8gY29vcmRpbmF0ZXMgcGFzc2VkJyk7XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdNdWx0aVBvbHlnb24nLFxuICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICB9LCBwcm9wZXJ0aWVzLCBiYm94LCBpZCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBGZWF0dXJlPEdlb21ldHJ5Q29sbGVjdGlvbj59IGJhc2VkIG9uIGFcbiAqIGNvb3JkaW5hdGUgYXJyYXkuIFByb3BlcnRpZXMgY2FuIGJlIGFkZGVkIG9wdGlvbmFsbHkuXG4gKlxuICogQG5hbWUgZ2VvbWV0cnlDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5PEdlb21ldHJ5Pn0gZ2VvbWV0cmllcyBhbiBhcnJheSBvZiBHZW9KU09OIEdlb21ldHJpZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcz17fV0gYW4gT2JqZWN0IG9mIGtleS12YWx1ZSBwYWlycyB0byBhZGQgYXMgcHJvcGVydGllc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYmJveF0gQkJveCBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbaWRdIElkZW50aWZpZXJcbiAqIEByZXR1cm5zIHtGZWF0dXJlPEdlb21ldHJ5Q29sbGVjdGlvbj59IGEgR2VvSlNPTiBHZW9tZXRyeUNvbGxlY3Rpb24gRmVhdHVyZVxuICogQGV4YW1wbGVcbiAqIHZhciBwdCA9IHtcbiAqICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgXCJjb29yZGluYXRlc1wiOiBbMTAwLCAwXVxuICogICAgIH07XG4gKiB2YXIgbGluZSA9IHtcbiAqICAgICBcInR5cGVcIjogXCJMaW5lU3RyaW5nXCIsXG4gKiAgICAgXCJjb29yZGluYXRlc1wiOiBbIFsxMDEsIDBdLCBbMTAyLCAxXSBdXG4gKiAgIH07XG4gKiB2YXIgY29sbGVjdGlvbiA9IHR1cmYuZ2VvbWV0cnlDb2xsZWN0aW9uKFtwdCwgbGluZV0pO1xuICpcbiAqIC8vPWNvbGxlY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2VvbWV0cnlDb2xsZWN0aW9uKGdlb21ldHJpZXMsIHByb3BlcnRpZXMsIGJib3gsIGlkKSB7XG4gICAgaWYgKCFnZW9tZXRyaWVzKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb21ldHJpZXMgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZ2VvbWV0cmllcykpIHRocm93IG5ldyBFcnJvcignZ2VvbWV0cmllcyBtdXN0IGJlIGFuIEFycmF5Jyk7XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdHZW9tZXRyeUNvbGxlY3Rpb24nLFxuICAgICAgICBnZW9tZXRyaWVzOiBnZW9tZXRyaWVzXG4gICAgfSwgcHJvcGVydGllcywgYmJveCwgaWQpO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HcmVhdC1jaXJjbGVfZGlzdGFuY2UjUmFkaXVzX2Zvcl9zcGhlcmljYWxfRWFydGhcbnZhciBmYWN0b3JzID0ge1xuICAgIG1pbGVzOiAzOTYwLFxuICAgIG5hdXRpY2FsbWlsZXM6IDM0NDEuMTQ1LFxuICAgIGRlZ3JlZXM6IDU3LjI5NTc3OTUsXG4gICAgcmFkaWFuczogMSxcbiAgICBpbmNoZXM6IDI1MDkwNTYwMCxcbiAgICB5YXJkczogNjk2OTYwMCxcbiAgICBtZXRlcnM6IDYzNzMwMDAsXG4gICAgbWV0cmVzOiA2MzczMDAwLFxuICAgIGNlbnRpbWV0ZXJzOiA2LjM3M2UrOCxcbiAgICBjZW50aW1ldHJlczogNi4zNzNlKzgsXG4gICAga2lsb21ldGVyczogNjM3MyxcbiAgICBraWxvbWV0cmVzOiA2MzczLFxuICAgIGZlZXQ6IDIwOTA4NzkyLjY1XG59O1xuXG52YXIgYXJlYUZhY3RvcnMgPSB7XG4gICAga2lsb21ldGVyczogMC4wMDAwMDEsXG4gICAga2lsb21ldHJlczogMC4wMDAwMDEsXG4gICAgbWV0ZXJzOiAxLFxuICAgIG1ldHJlczogMSxcbiAgICBjZW50aW1ldHJlczogMTAwMDAsXG4gICAgbWlsbGltZXRlcjogMTAwMDAwMCxcbiAgICBhY3JlczogMC4wMDAyNDcxMDUsXG4gICAgbWlsZXM6IDMuODZlLTcsXG4gICAgeWFyZHM6IDEuMTk1OTkwMDQ2LFxuICAgIGZlZXQ6IDEwLjc2MzkxMDQxNyxcbiAgICBpbmNoZXM6IDE1NTAuMDAzMTAwMDA2XG59O1xuLyoqXG4gKiBSb3VuZCBudW1iZXIgdG8gcHJlY2lzaW9uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBOdW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFByZWNpc2lvblxuICogQHJldHVybnMge251bWJlcn0gcm91bmRlZCBudW1iZXJcbiAqIEBleGFtcGxlXG4gKiB0dXJmLnJvdW5kKDEyMC40MzIxKVxuICogLy89MTIwXG4gKlxuICogdHVyZi5yb3VuZCgxMjAuNDMyMSwgMilcbiAqIC8vPTEyMC40M1xuICovXG5mdW5jdGlvbiByb3VuZChudW0sIHByZWNpc2lvbikge1xuICAgIGlmIChudW0gPT09IHVuZGVmaW5lZCB8fCBudW0gPT09IG51bGwgfHwgaXNOYU4obnVtKSkgdGhyb3cgbmV3IEVycm9yKCdudW0gaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAocHJlY2lzaW9uICYmICEocHJlY2lzaW9uID49IDApKSB0aHJvdyBuZXcgRXJyb3IoJ3ByZWNpc2lvbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gICAgdmFyIG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uIHx8IDApO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIG11bHRpcGxpZXIpIC8gbXVsdGlwbGllcjtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgZGlzdGFuY2UgbWVhc3VyZW1lbnQgKGFzc3VtaW5nIGEgc3BoZXJpY2FsIEVhcnRoKSBmcm9tIHJhZGlhbnMgdG8gYSBtb3JlIGZyaWVuZGx5IHVuaXQuXG4gKiBWYWxpZCB1bml0czogbWlsZXMsIG5hdXRpY2FsbWlsZXMsIGluY2hlcywgeWFyZHMsIG1ldGVycywgbWV0cmVzLCBraWxvbWV0ZXJzLCBjZW50aW1ldGVycywgZmVldFxuICpcbiAqIEBuYW1lIHJhZGlhbnNUb0Rpc3RhbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaWFucyBpbiByYWRpYW5zIGFjcm9zcyB0aGUgc3BoZXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVycyBpbmNoZXMsIHlhcmRzLCBtZXRyZXMsIG1ldGVycywga2lsb21ldHJlcywga2lsb21ldGVycy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRpc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIHJhZGlhbnNUb0Rpc3RhbmNlKHJhZGlhbnMsIHVuaXRzKSB7XG4gICAgaWYgKHJhZGlhbnMgPT09IHVuZGVmaW5lZCB8fCByYWRpYW5zID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ3JhZGlhbnMgaXMgcmVxdWlyZWQnKTtcblxuICAgIHZhciBmYWN0b3IgPSBmYWN0b3JzW3VuaXRzIHx8ICdraWxvbWV0ZXJzJ107XG4gICAgaWYgKCFmYWN0b3IpIHRocm93IG5ldyBFcnJvcigndW5pdHMgaXMgaW52YWxpZCcpO1xuICAgIHJldHVybiByYWRpYW5zICogZmFjdG9yO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBkaXN0YW5jZSBtZWFzdXJlbWVudCAoYXNzdW1pbmcgYSBzcGhlcmljYWwgRWFydGgpIGZyb20gYSByZWFsLXdvcmxkIHVuaXQgaW50byByYWRpYW5zXG4gKiBWYWxpZCB1bml0czogbWlsZXMsIG5hdXRpY2FsbWlsZXMsIGluY2hlcywgeWFyZHMsIG1ldGVycywgbWV0cmVzLCBraWxvbWV0ZXJzLCBjZW50aW1ldGVycywgZmVldFxuICpcbiAqIEBuYW1lIGRpc3RhbmNlVG9SYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgaW4gcmVhbCB1bml0c1xuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnMgaW5jaGVzLCB5YXJkcywgbWV0cmVzLCBtZXRlcnMsIGtpbG9tZXRyZXMsIGtpbG9tZXRlcnMuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSByYWRpYW5zXG4gKi9cbmZ1bmN0aW9uIGRpc3RhbmNlVG9SYWRpYW5zKGRpc3RhbmNlLCB1bml0cykge1xuICAgIGlmIChkaXN0YW5jZSA9PT0gdW5kZWZpbmVkIHx8IGRpc3RhbmNlID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ2Rpc3RhbmNlIGlzIHJlcXVpcmVkJyk7XG5cbiAgICB2YXIgZmFjdG9yID0gZmFjdG9yc1t1bml0cyB8fCAna2lsb21ldGVycyddO1xuICAgIGlmICghZmFjdG9yKSB0aHJvdyBuZXcgRXJyb3IoJ3VuaXRzIGlzIGludmFsaWQnKTtcbiAgICByZXR1cm4gZGlzdGFuY2UgLyBmYWN0b3I7XG59XG5cbi8qKlxuICogQ29udmVydCBhIGRpc3RhbmNlIG1lYXN1cmVtZW50IChhc3N1bWluZyBhIHNwaGVyaWNhbCBFYXJ0aCkgZnJvbSBhIHJlYWwtd29ybGQgdW5pdCBpbnRvIGRlZ3JlZXNcbiAqIFZhbGlkIHVuaXRzOiBtaWxlcywgbmF1dGljYWxtaWxlcywgaW5jaGVzLCB5YXJkcywgbWV0ZXJzLCBtZXRyZXMsIGNlbnRpbWV0ZXJzLCBraWxvbWV0cmVzLCBmZWV0XG4gKlxuICogQG5hbWUgZGlzdGFuY2VUb0RlZ3JlZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSBpbiByZWFsIHVuaXRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVycyBpbmNoZXMsIHlhcmRzLCBtZXRyZXMsIG1ldGVycywga2lsb21ldHJlcywga2lsb21ldGVycy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRlZ3JlZXNcbiAqL1xuZnVuY3Rpb24gZGlzdGFuY2VUb0RlZ3JlZXMoZGlzdGFuY2UsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMyZGVncmVlcyhkaXN0YW5jZVRvUmFkaWFucyhkaXN0YW5jZSwgdW5pdHMpKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbnkgYmVhcmluZyBhbmdsZSBmcm9tIHRoZSBub3J0aCBsaW5lIGRpcmVjdGlvbiAocG9zaXRpdmUgY2xvY2t3aXNlKVxuICogYW5kIHJldHVybnMgYW4gYW5nbGUgYmV0d2VlbiAwLTM2MCBkZWdyZWVzIChwb3NpdGl2ZSBjbG9ja3dpc2UpLCAwIGJlaW5nIHRoZSBub3J0aCBsaW5lXG4gKlxuICogQG5hbWUgYmVhcmluZ1RvQW5nbGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWFyaW5nIGFuZ2xlLCBiZXR3ZWVuIC0xODAgYW5kICsxODAgZGVncmVlc1xuICogQHJldHVybnMge251bWJlcn0gYW5nbGUgYmV0d2VlbiAwIGFuZCAzNjAgZGVncmVlc1xuICovXG5mdW5jdGlvbiBiZWFyaW5nVG9BbmdsZShiZWFyaW5nKSB7XG4gICAgaWYgKGJlYXJpbmcgPT09IG51bGwgfHwgYmVhcmluZyA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ2JlYXJpbmcgaXMgcmVxdWlyZWQnKTtcblxuICAgIHZhciBhbmdsZSA9IGJlYXJpbmcgJSAzNjA7XG4gICAgaWYgKGFuZ2xlIDwgMCkgYW5nbGUgKz0gMzYwO1xuICAgIHJldHVybiBhbmdsZTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhbmdsZSBpbiByYWRpYW5zIHRvIGRlZ3JlZXNcbiAqXG4gKiBAbmFtZSByYWRpYW5zMmRlZ3JlZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpYW5zIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRlZ3JlZXMgYmV0d2VlbiAwIGFuZCAzNjAgZGVncmVlc1xuICovXG5mdW5jdGlvbiByYWRpYW5zMmRlZ3JlZXMocmFkaWFucykge1xuICAgIGlmIChyYWRpYW5zID09PSBudWxsIHx8IHJhZGlhbnMgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdyYWRpYW5zIGlzIHJlcXVpcmVkJyk7XG5cbiAgICB2YXIgZGVncmVlcyA9IHJhZGlhbnMgJSAoMiAqIE1hdGguUEkpO1xuICAgIHJldHVybiBkZWdyZWVzICogMTgwIC8gTWF0aC5QSTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhbmdsZSBpbiBkZWdyZWVzIHRvIHJhZGlhbnNcbiAqXG4gKiBAbmFtZSBkZWdyZWVzMnJhZGlhbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWdyZWVzIGFuZ2xlIGJldHdlZW4gMCBhbmQgMzYwIGRlZ3JlZXNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuZnVuY3Rpb24gZGVncmVlczJyYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICBpZiAoZGVncmVlcyA9PT0gbnVsbCB8fCBkZWdyZWVzID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignZGVncmVlcyBpcyByZXF1aXJlZCcpO1xuXG4gICAgdmFyIHJhZGlhbnMgPSBkZWdyZWVzICUgMzYwO1xuICAgIHJldHVybiByYWRpYW5zICogTWF0aC5QSSAvIDE4MDtcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlzdGFuY2UgdG8gdGhlIHJlcXVlc3RlZCB1bml0LlxuICogVmFsaWQgdW5pdHM6IG1pbGVzLCBuYXV0aWNhbG1pbGVzLCBpbmNoZXMsIHlhcmRzLCBtZXRlcnMsIG1ldHJlcywga2lsb21ldGVycywgY2VudGltZXRlcnMsIGZlZXRcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgdG8gYmUgY29udmVydGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gb3JpZ2luYWxVbml0IG9mIHRoZSBkaXN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IFtmaW5hbFVuaXQ9a2lsb21ldGVyc10gcmV0dXJuZWQgdW5pdFxuICogQHJldHVybnMge251bWJlcn0gdGhlIGNvbnZlcnRlZCBkaXN0YW5jZVxuICovXG5mdW5jdGlvbiBjb252ZXJ0RGlzdGFuY2UoZGlzdGFuY2UsIG9yaWdpbmFsVW5pdCwgZmluYWxVbml0KSB7XG4gICAgaWYgKGRpc3RhbmNlID09PSBudWxsIHx8IGRpc3RhbmNlID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignZGlzdGFuY2UgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIShkaXN0YW5jZSA+PSAwKSkgdGhyb3cgbmV3IEVycm9yKCdkaXN0YW5jZSBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG5cbiAgICB2YXIgY29udmVydGVkRGlzdGFuY2UgPSByYWRpYW5zVG9EaXN0YW5jZShkaXN0YW5jZVRvUmFkaWFucyhkaXN0YW5jZSwgb3JpZ2luYWxVbml0KSwgZmluYWxVbml0IHx8ICdraWxvbWV0ZXJzJyk7XG4gICAgcmV0dXJuIGNvbnZlcnRlZERpc3RhbmNlO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYXJlYSB0byB0aGUgcmVxdWVzdGVkIHVuaXQuXG4gKiBWYWxpZCB1bml0czoga2lsb21ldGVycywga2lsb21ldHJlcywgbWV0ZXJzLCBtZXRyZXMsIGNlbnRpbWV0cmVzLCBtaWxsaW1ldGVyLCBhY3JlLCBtaWxlLCB5YXJkLCBmb290LCBpbmNoXG4gKiBAcGFyYW0ge251bWJlcn0gYXJlYSB0byBiZSBjb252ZXJ0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3JpZ2luYWxVbml0PW1ldGVyc10gb2YgdGhlIGRpc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2ZpbmFsVW5pdD1raWxvbWV0ZXJzXSByZXR1cm5lZCB1bml0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgY29udmVydGVkIGRpc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRBcmVhKGFyZWEsIG9yaWdpbmFsVW5pdCwgZmluYWxVbml0KSB7XG4gICAgaWYgKGFyZWEgPT09IG51bGwgfHwgYXJlYSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ2FyZWEgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIShhcmVhID49IDApKSB0aHJvdyBuZXcgRXJyb3IoJ2FyZWEgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuXG4gICAgdmFyIHN0YXJ0RmFjdG9yID0gYXJlYUZhY3RvcnNbb3JpZ2luYWxVbml0IHx8ICdtZXRlcnMnXTtcbiAgICBpZiAoIXN0YXJ0RmFjdG9yKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb3JpZ2luYWwgdW5pdHMnKTtcblxuICAgIHZhciBmaW5hbEZhY3RvciA9IGFyZWFGYWN0b3JzW2ZpbmFsVW5pdCB8fCAna2lsb21ldGVycyddO1xuICAgIGlmICghZmluYWxGYWN0b3IpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBmaW5hbCB1bml0cycpO1xuXG4gICAgcmV0dXJuIChhcmVhIC8gc3RhcnRGYWN0b3IpICogZmluYWxGYWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZlYXR1cmU6IGZlYXR1cmUsXG4gICAgZ2VvbWV0cnk6IGdlb21ldHJ5LFxuICAgIGZlYXR1cmVDb2xsZWN0aW9uOiBmZWF0dXJlQ29sbGVjdGlvbixcbiAgICBnZW9tZXRyeUNvbGxlY3Rpb246IGdlb21ldHJ5Q29sbGVjdGlvbixcbiAgICBwb2ludDogcG9pbnQsXG4gICAgbXVsdGlQb2ludDogbXVsdGlQb2ludCxcbiAgICBsaW5lU3RyaW5nOiBsaW5lU3RyaW5nLFxuICAgIG11bHRpTGluZVN0cmluZzogbXVsdGlMaW5lU3RyaW5nLFxuICAgIHBvbHlnb246IHBvbHlnb24sXG4gICAgbXVsdGlQb2x5Z29uOiBtdWx0aVBvbHlnb24sXG4gICAgcmFkaWFuc1RvRGlzdGFuY2U6IHJhZGlhbnNUb0Rpc3RhbmNlLFxuICAgIGRpc3RhbmNlVG9SYWRpYW5zOiBkaXN0YW5jZVRvUmFkaWFucyxcbiAgICBkaXN0YW5jZVRvRGVncmVlczogZGlzdGFuY2VUb0RlZ3JlZXMsXG4gICAgcmFkaWFuczJkZWdyZWVzOiByYWRpYW5zMmRlZ3JlZXMsXG4gICAgZGVncmVlczJyYWRpYW5zOiBkZWdyZWVzMnJhZGlhbnMsXG4gICAgYmVhcmluZ1RvQW5nbGU6IGJlYXJpbmdUb0FuZ2xlLFxuICAgIGNvbnZlcnREaXN0YW5jZTogY29udmVydERpc3RhbmNlLFxuICAgIGNvbnZlcnRBcmVhOiBjb252ZXJ0QXJlYSxcbiAgICByb3VuZDogcm91bmRcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9oZWxwZXJzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIFVud3JhcCBhIGNvb3JkaW5hdGUgZnJvbSBhIFBvaW50IEZlYXR1cmUsIEdlb21ldHJ5IG9yIGEgc2luZ2xlIGNvb3JkaW5hdGUuXG4gKlxuICogQG5hbWUgZ2V0Q29vcmRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxHZW9tZXRyeTxQb2ludD58RmVhdHVyZTxQb2ludD59IG9iaiBPYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSBjb29yZGluYXRlc1xuICogQGV4YW1wbGVcbiAqIHZhciBwdCA9IHR1cmYucG9pbnQoWzEwLCAxMF0pO1xuICpcbiAqIHZhciBjb29yZCA9IHR1cmYuZ2V0Q29vcmQocHQpO1xuICogLy89IFsxMCwgMTBdXG4gKi9cbmZ1bmN0aW9uIGdldENvb3JkKG9iaikge1xuICAgIGlmICghb2JqKSB0aHJvdyBuZXcgRXJyb3IoJ29iaiBpcyByZXF1aXJlZCcpO1xuXG4gICAgdmFyIGNvb3JkaW5hdGVzID0gZ2V0Q29vcmRzKG9iaik7XG5cbiAgICAvLyBnZXRDb29yZCgpIG11c3QgY29udGFpbiBhdCBsZWFzdCB0d28gbnVtYmVycyAoUG9pbnQpXG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgdHlwZW9mIGNvb3JkaW5hdGVzWzBdID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB0eXBlb2YgY29vcmRpbmF0ZXNbMV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nvb3JkaW5hdGUgaXMgbm90IGEgdmFsaWQgUG9pbnQnKTtcbiAgICB9XG59XG5cbi8qKlxuICogVW53cmFwIGNvb3JkaW5hdGVzIGZyb20gYSBGZWF0dXJlLCBHZW9tZXRyeSBPYmplY3Qgb3IgYW4gQXJyYXkgb2YgbnVtYmVyc1xuICpcbiAqIEBuYW1lIGdldENvb3Jkc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fEdlb21ldHJ5fEZlYXR1cmV9IG9iaiBPYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSBjb29yZGluYXRlc1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5ID0gdHVyZi5wb2x5Z29uKFtbWzExOS4zMiwgLTguN10sIFsxMTkuNTUsIC04LjY5XSwgWzExOS41MSwgLTguNTRdLCBbMTE5LjMyLCAtOC43XV1dKTtcbiAqXG4gKiB2YXIgY29vcmQgPSB0dXJmLmdldENvb3Jkcyhwb2x5KTtcbiAqIC8vPSBbW1sxMTkuMzIsIC04LjddLCBbMTE5LjU1LCAtOC42OV0sIFsxMTkuNTEsIC04LjU0XSwgWzExOS4zMiwgLTguN11dXVxuICovXG5mdW5jdGlvbiBnZXRDb29yZHMob2JqKSB7XG4gICAgaWYgKCFvYmopIHRocm93IG5ldyBFcnJvcignb2JqIGlzIHJlcXVpcmVkJyk7XG4gICAgdmFyIGNvb3JkaW5hdGVzO1xuXG4gICAgLy8gQXJyYXkgb2YgbnVtYmVyc1xuICAgIGlmIChvYmoubGVuZ3RoKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzID0gb2JqO1xuXG4gICAgLy8gR2VvbWV0cnkgT2JqZWN0XG4gICAgfSBlbHNlIGlmIChvYmouY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMgPSBvYmouY29vcmRpbmF0ZXM7XG5cbiAgICAvLyBGZWF0dXJlXG4gICAgfSBlbHNlIGlmIChvYmouZ2VvbWV0cnkgJiYgb2JqLmdlb21ldHJ5LmNvb3JkaW5hdGVzKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzID0gb2JqLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgIH1cbiAgICAvLyBDaGVja3MgaWYgY29vcmRpbmF0ZXMgY29udGFpbnMgYSBudW1iZXJcbiAgICBpZiAoY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgY29udGFpbnNOdW1iZXIoY29vcmRpbmF0ZXMpO1xuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZXM7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignTm8gdmFsaWQgY29vcmRpbmF0ZXMnKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgY29vcmRpbmF0ZXMgY29udGFpbnMgYSBudW1iZXJcbiAqXG4gKiBAbmFtZSBjb250YWluc051bWJlclxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBjb29yZGluYXRlcyBHZW9KU09OIENvb3JkaW5hdGVzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBBcnJheSBjb250YWlucyBhIG51bWJlclxuICovXG5mdW5jdGlvbiBjb250YWluc051bWJlcihjb29yZGluYXRlcykge1xuICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPiAxICYmXG4gICAgICAgIHR5cGVvZiBjb29yZGluYXRlc1swXSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIGNvb3JkaW5hdGVzWzFdID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb29yZGluYXRlc1swXSkgJiYgY29vcmRpbmF0ZXNbMF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjb250YWluc051bWJlcihjb29yZGluYXRlc1swXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignY29vcmRpbmF0ZXMgbXVzdCBvbmx5IGNvbnRhaW4gbnVtYmVycycpO1xufVxuXG4vKipcbiAqIEVuZm9yY2UgZXhwZWN0YXRpb25zIGFib3V0IHR5cGVzIG9mIEdlb0pTT04gb2JqZWN0cyBmb3IgVHVyZi5cbiAqXG4gKiBAbmFtZSBnZW9qc29uVHlwZVxuICogQHBhcmFtIHtHZW9KU09OfSB2YWx1ZSBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIGV4cGVjdGVkIEdlb0pTT04gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiBjYWxsaW5nIGZ1bmN0aW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdmFsdWUgaXMgbm90IHRoZSBleHBlY3RlZCB0eXBlLlxuICovXG5mdW5jdGlvbiBnZW9qc29uVHlwZSh2YWx1ZSwgdHlwZSwgbmFtZSkge1xuICAgIGlmICghdHlwZSB8fCAhbmFtZSkgdGhyb3cgbmV3IEVycm9yKCd0eXBlIGFuZCBuYW1lIHJlcXVpcmVkJyk7XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGlucHV0IHRvICcgKyBuYW1lICsgJzogbXVzdCBiZSBhICcgKyB0eXBlICsgJywgZ2l2ZW4gJyArIHZhbHVlLnR5cGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFbmZvcmNlIGV4cGVjdGF0aW9ucyBhYm91dCB0eXBlcyBvZiB7QGxpbmsgRmVhdHVyZX0gaW5wdXRzIGZvciBUdXJmLlxuICogSW50ZXJuYWxseSB0aGlzIHVzZXMge0BsaW5rIGdlb2pzb25UeXBlfSB0byBqdWRnZSBnZW9tZXRyeSB0eXBlcy5cbiAqXG4gKiBAbmFtZSBmZWF0dXJlT2ZcbiAqIEBwYXJhbSB7RmVhdHVyZX0gZmVhdHVyZSBhIGZlYXR1cmUgd2l0aCBhbiBleHBlY3RlZCBnZW9tZXRyeSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBleHBlY3RlZCBHZW9KU09OIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgY2FsbGluZyBmdW5jdGlvblxuICogQHRocm93cyB7RXJyb3J9IGVycm9yIGlmIHZhbHVlIGlzIG5vdCB0aGUgZXhwZWN0ZWQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gZmVhdHVyZU9mKGZlYXR1cmUsIHR5cGUsIG5hbWUpIHtcbiAgICBpZiAoIWZlYXR1cmUpIHRocm93IG5ldyBFcnJvcignTm8gZmVhdHVyZSBwYXNzZWQnKTtcbiAgICBpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvcignLmZlYXR1cmVPZigpIHJlcXVpcmVzIGEgbmFtZScpO1xuICAgIGlmICghZmVhdHVyZSB8fCBmZWF0dXJlLnR5cGUgIT09ICdGZWF0dXJlJyB8fCAhZmVhdHVyZS5nZW9tZXRyeSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgdG8gJyArIG5hbWUgKyAnLCBGZWF0dXJlIHdpdGggZ2VvbWV0cnkgcmVxdWlyZWQnKTtcbiAgICB9XG4gICAgaWYgKCFmZWF0dXJlLmdlb21ldHJ5IHx8IGZlYXR1cmUuZ2VvbWV0cnkudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgdG8gJyArIG5hbWUgKyAnOiBtdXN0IGJlIGEgJyArIHR5cGUgKyAnLCBnaXZlbiAnICsgZmVhdHVyZS5nZW9tZXRyeS50eXBlKTtcbiAgICB9XG59XG5cbi8qKlxuICogRW5mb3JjZSBleHBlY3RhdGlvbnMgYWJvdXQgdHlwZXMgb2Yge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBpbnB1dHMgZm9yIFR1cmYuXG4gKiBJbnRlcm5hbGx5IHRoaXMgdXNlcyB7QGxpbmsgZ2VvanNvblR5cGV9IHRvIGp1ZGdlIGdlb21ldHJ5IHR5cGVzLlxuICpcbiAqIEBuYW1lIGNvbGxlY3Rpb25PZlxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbn0gZmVhdHVyZUNvbGxlY3Rpb24gYSBGZWF0dXJlQ29sbGVjdGlvbiBmb3Igd2hpY2ggZmVhdHVyZXMgd2lsbCBiZSBqdWRnZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIGV4cGVjdGVkIEdlb0pTT04gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiBjYWxsaW5nIGZ1bmN0aW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdmFsdWUgaXMgbm90IHRoZSBleHBlY3RlZCB0eXBlLlxuICovXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YoZmVhdHVyZUNvbGxlY3Rpb24sIHR5cGUsIG5hbWUpIHtcbiAgICBpZiAoIWZlYXR1cmVDb2xsZWN0aW9uKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGZlYXR1cmVDb2xsZWN0aW9uIHBhc3NlZCcpO1xuICAgIGlmICghbmFtZSkgdGhyb3cgbmV3IEVycm9yKCcuY29sbGVjdGlvbk9mKCkgcmVxdWlyZXMgYSBuYW1lJyk7XG4gICAgaWYgKCFmZWF0dXJlQ29sbGVjdGlvbiB8fCBmZWF0dXJlQ29sbGVjdGlvbi50eXBlICE9PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCB0byAnICsgbmFtZSArICcsIEZlYXR1cmVDb2xsZWN0aW9uIHJlcXVpcmVkJyk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlc1tpXTtcbiAgICAgICAgaWYgKCFmZWF0dXJlIHx8IGZlYXR1cmUudHlwZSAhPT0gJ0ZlYXR1cmUnIHx8ICFmZWF0dXJlLmdlb21ldHJ5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgdG8gJyArIG5hbWUgKyAnLCBGZWF0dXJlIHdpdGggZ2VvbWV0cnkgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZlYXR1cmUuZ2VvbWV0cnkgfHwgZmVhdHVyZS5nZW9tZXRyeS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgdG8gJyArIG5hbWUgKyAnOiBtdXN0IGJlIGEgJyArIHR5cGUgKyAnLCBnaXZlbiAnICsgZmVhdHVyZS5nZW9tZXRyeS50eXBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBHZXQgR2VvbWV0cnkgZnJvbSBGZWF0dXJlIG9yIEdlb21ldHJ5IE9iamVjdFxuICpcbiAqIEBwYXJhbSB7RmVhdHVyZXxHZW9tZXRyeX0gZ2VvanNvbiBHZW9KU09OIEZlYXR1cmUgb3IgR2VvbWV0cnkgT2JqZWN0XG4gKiBAcmV0dXJucyB7R2VvbWV0cnl8bnVsbH0gR2VvSlNPTiBHZW9tZXRyeSBPYmplY3RcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBnZW9qc29uIGlzIG5vdCBhIEZlYXR1cmUgb3IgR2VvbWV0cnkgT2JqZWN0XG4gKiBAZXhhbXBsZVxuICogdmFyIHBvaW50ID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICBcImNvb3JkaW5hdGVzXCI6IFsxMTAsIDQwXVxuICogICB9XG4gKiB9XG4gKiB2YXIgZ2VvbSA9IHR1cmYuZ2V0R2VvbShwb2ludClcbiAqIC8vPXtcInR5cGVcIjogXCJQb2ludFwiLCBcImNvb3JkaW5hdGVzXCI6IFsxMTAsIDQwXX1cbiAqL1xuZnVuY3Rpb24gZ2V0R2VvbShnZW9qc29uKSB7XG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb2pzb24gaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoZ2VvanNvbi5nZW9tZXRyeSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZ2VvanNvbi5nZW9tZXRyeTtcbiAgICBpZiAoZ2VvanNvbi5jb29yZGluYXRlcyB8fCBnZW9qc29uLmdlb21ldHJpZXMpIHJldHVybiBnZW9qc29uO1xuICAgIHRocm93IG5ldyBFcnJvcignZ2VvanNvbiBtdXN0IGJlIGEgdmFsaWQgRmVhdHVyZSBvciBHZW9tZXRyeSBPYmplY3QnKTtcbn1cblxuLyoqXG4gKiBHZXQgR2VvbWV0cnkgVHlwZSBmcm9tIEZlYXR1cmUgb3IgR2VvbWV0cnkgT2JqZWN0XG4gKlxuICogQHBhcmFtIHtGZWF0dXJlfEdlb21ldHJ5fSBnZW9qc29uIEdlb0pTT04gRmVhdHVyZSBvciBHZW9tZXRyeSBPYmplY3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEdlb0pTT04gR2VvbWV0cnkgVHlwZVxuICogQHRocm93cyB7RXJyb3J9IGlmIGdlb2pzb24gaXMgbm90IGEgRmVhdHVyZSBvciBHZW9tZXRyeSBPYmplY3RcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnQgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgIFwiY29vcmRpbmF0ZXNcIjogWzExMCwgNDBdXG4gKiAgIH1cbiAqIH1cbiAqIHZhciBnZW9tID0gdHVyZi5nZXRHZW9tKHBvaW50KVxuICogLy89XCJQb2ludFwiXG4gKi9cbmZ1bmN0aW9uIGdldEdlb21UeXBlKGdlb2pzb24pIHtcbiAgICBpZiAoIWdlb2pzb24pIHRocm93IG5ldyBFcnJvcignZ2VvanNvbiBpcyByZXF1aXJlZCcpO1xuICAgIHZhciBnZW9tID0gZ2V0R2VvbShnZW9qc29uKTtcbiAgICBpZiAoZ2VvbSkgcmV0dXJuIGdlb20udHlwZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZ2VvanNvblR5cGU6IGdlb2pzb25UeXBlLFxuICAgIGNvbGxlY3Rpb25PZjogY29sbGVjdGlvbk9mLFxuICAgIGZlYXR1cmVPZjogZmVhdHVyZU9mLFxuICAgIGdldENvb3JkOiBnZXRDb29yZCxcbiAgICBnZXRDb29yZHM6IGdldENvb3JkcyxcbiAgICBjb250YWluc051bWJlcjogY29udGFpbnNOdW1iZXIsXG4gICAgZ2V0R2VvbTogZ2V0R2VvbSxcbiAgICBnZXRHZW9tVHlwZTogZ2V0R2VvbVR5cGVcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9pbnZhcmlhbnQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTY7XG5leHBvcnQgdmFyIGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciBxdWFydGVyUGkgPSBwaSAvIDQ7XG5leHBvcnQgdmFyIHRhdSA9IHBpICogMjtcblxuZXhwb3J0IHZhciBkZWdyZWVzID0gMTgwIC8gcGk7XG5leHBvcnQgdmFyIHJhZGlhbnMgPSBwaSAvIDE4MDtcblxuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbiA9IE1hdGguYXRhbjtcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgY2VpbCA9IE1hdGguY2VpbDtcbmV4cG9ydCB2YXIgZXhwID0gTWF0aC5leHA7XG5leHBvcnQgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbmV4cG9ydCB2YXIgbG9nID0gTWF0aC5sb2c7XG5leHBvcnQgdmFyIHBvdyA9IE1hdGgucG93O1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc2lnbiA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbih4KSB7IHJldHVybiB4ID4gMCA/IDEgOiB4IDwgMCA/IC0xIDogMDsgfTtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcbmV4cG9ydCB2YXIgdGFuID0gTWF0aC50YW47XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID4gMSA/IGhhbGZQaSA6IHggPCAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXZlcnNpbih4KSB7XG4gIHJldHVybiAoeCA9IHNpbih4IC8gMikpICogeDtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbWF0aC5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldENvb3JkID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50JykuZ2V0Q29vcmQ7XG52YXIgcmFkaWFuc1RvRGlzdGFuY2UgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykucmFkaWFuc1RvRGlzdGFuY2U7XG4vL2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGF2ZXJzaW5lX2Zvcm11bGFcbi8vaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLmh0bWxcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byB7QGxpbmsgUG9pbnR8cG9pbnRzfSBpbiBkZWdyZWVzLCByYWRpYW5zLFxuICogbWlsZXMsIG9yIGtpbG9tZXRlcnMuIFRoaXMgdXNlcyB0aGVcbiAqIFtIYXZlcnNpbmUgZm9ybXVsYV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYXZlcnNpbmVfZm9ybXVsYSlcbiAqIHRvIGFjY291bnQgZm9yIGdsb2JhbCBjdXJ2YXR1cmUuXG4gKlxuICogQG5hbWUgZGlzdGFuY2VcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPn0gZnJvbSBvcmlnaW4gcG9pbnRcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPn0gdG8gZGVzdGluYXRpb24gcG9pbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHM9a2lsb21ldGVyc10gY2FuIGJlIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBvciBraWxvbWV0ZXJzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcG9pbnRzXG4gKiBAZXhhbXBsZVxuICogdmFyIGZyb20gPSB0dXJmLnBvaW50KFstNzUuMzQzLCAzOS45ODRdKTtcbiAqIHZhciB0byA9IHR1cmYucG9pbnQoWy03NS41MzQsIDM5LjEyM10pO1xuICpcbiAqIHZhciBkaXN0YW5jZSA9IHR1cmYuZGlzdGFuY2UoZnJvbSwgdG8sIFwibWlsZXNcIik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2Zyb20sIHRvXTtcbiAqIGZyb20ucHJvcGVydGllcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICogdG8ucHJvcGVydGllcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmcm9tLCB0bywgdW5pdHMpIHtcbiAgICB2YXIgZGVncmVlczJyYWRpYW5zID0gTWF0aC5QSSAvIDE4MDtcbiAgICB2YXIgY29vcmRpbmF0ZXMxID0gZ2V0Q29vcmQoZnJvbSk7XG4gICAgdmFyIGNvb3JkaW5hdGVzMiA9IGdldENvb3JkKHRvKTtcbiAgICB2YXIgZExhdCA9IGRlZ3JlZXMycmFkaWFucyAqIChjb29yZGluYXRlczJbMV0gLSBjb29yZGluYXRlczFbMV0pO1xuICAgIHZhciBkTG9uID0gZGVncmVlczJyYWRpYW5zICogKGNvb3JkaW5hdGVzMlswXSAtIGNvb3JkaW5hdGVzMVswXSk7XG4gICAgdmFyIGxhdDEgPSBkZWdyZWVzMnJhZGlhbnMgKiBjb29yZGluYXRlczFbMV07XG4gICAgdmFyIGxhdDIgPSBkZWdyZWVzMnJhZGlhbnMgKiBjb29yZGluYXRlczJbMV07XG5cbiAgICB2YXIgYSA9IE1hdGgucG93KE1hdGguc2luKGRMYXQgLyAyKSwgMikgK1xuICAgICAgICAgIE1hdGgucG93KE1hdGguc2luKGRMb24gLyAyKSwgMikgKiBNYXRoLmNvcyhsYXQxKSAqIE1hdGguY29zKGxhdDIpO1xuXG4gICAgcmV0dXJuIHJhZGlhbnNUb0Rpc3RhbmNlKDIgKiBNYXRoLmF0YW4yKE1hdGguc3FydChhKSwgTWF0aC5zcXJ0KDEgLSBhKSksIHVuaXRzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9kaXN0YW5jZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpO1xudmFyIGdldENvb3JkID0gaW52YXJpYW50LmdldENvb3JkO1xudmFyIGdldENvb3JkcyA9IGludmFyaWFudC5nZXRDb29yZHM7XG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXZlbiVFMiU4MCU5M29kZF9ydWxlXG4vLyBtb2RpZmllZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svcG9pbnQtaW4tcG9seWdvbi9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy8gd2hpY2ggd2FzIG1vZGlmaWVkIGZyb20gaHR0cDovL3d3dy5lY3NlLnJwaS5lZHUvSG9tZXBhZ2VzL3dyZi9SZXNlYXJjaC9TaG9ydF9Ob3Rlcy9wbnBvbHkuaHRtbFxuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIFBvaW50fSBhbmQgYSB7QGxpbmsgUG9seWdvbn0gb3Ige0BsaW5rIE11bHRpUG9seWdvbn0gYW5kIGRldGVybWluZXMgaWYgdGhlIHBvaW50IHJlc2lkZXMgaW5zaWRlIHRoZSBwb2x5Z29uLiBUaGUgcG9seWdvbiBjYW5cbiAqIGJlIGNvbnZleCBvciBjb25jYXZlLiBUaGUgZnVuY3Rpb24gYWNjb3VudHMgZm9yIGhvbGVzLlxuICpcbiAqIEBuYW1lIGluc2lkZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvaW50Pn0gcG9pbnQgaW5wdXQgcG9pbnRcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IHBvbHlnb24gaW5wdXQgcG9seWdvbiBvciBtdWx0aXBvbHlnb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lnbm9yZUJvdW5kYXJ5PWZhbHNlXSBUcnVlIGlmIHBvbHlnb24gYm91bmRhcnkgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBkZXRlcm1pbmluZyBpZiB0aGUgcG9pbnQgaXMgaW5zaWRlIHRoZSBwb2x5Z29uIG90aGVyd2lzZSBmYWxzZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFBvaW50IGlzIGluc2lkZSB0aGUgUG9seWdvbjsgYGZhbHNlYCBpZiB0aGUgUG9pbnQgaXMgbm90IGluc2lkZSB0aGUgUG9seWdvblxuICogQGV4YW1wbGVcbiAqIHZhciBwdCA9IHR1cmYucG9pbnQoWy03NywgNDRdKTtcbiAqIHZhciBwb2x5ID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgIFstODEsIDQxXSxcbiAqICAgWy04MSwgNDddLFxuICogICBbLTcyLCA0N10sXG4gKiAgIFstNzIsIDQxXSxcbiAqICAgWy04MSwgNDFdXG4gKiBdXSk7XG4gKlxuICogdHVyZi5pbnNpZGUocHQsIHBvbHkpO1xuICogLy89IHRydWVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9pbnQsIHBvbHlnb24sIGlnbm9yZUJvdW5kYXJ5KSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghcG9pbnQpIHRocm93IG5ldyBFcnJvcigncG9pbnQgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIXBvbHlnb24pIHRocm93IG5ldyBFcnJvcigncG9seWdvbiBpcyByZXF1aXJlZCcpO1xuXG4gICAgdmFyIHB0ID0gZ2V0Q29vcmQocG9pbnQpO1xuICAgIHZhciBwb2x5cyA9IGdldENvb3Jkcyhwb2x5Z29uKTtcbiAgICB2YXIgdHlwZSA9IChwb2x5Z29uLmdlb21ldHJ5KSA/IHBvbHlnb24uZ2VvbWV0cnkudHlwZSA6IHBvbHlnb24udHlwZTtcbiAgICB2YXIgYmJveCA9IHBvbHlnb24uYmJveDtcblxuICAgIC8vIFF1aWNrIGVsaW1pbmF0aW9uIGlmIHBvaW50IGlzIG5vdCBpbnNpZGUgYmJveFxuICAgIGlmIChiYm94ICYmIGluQkJveChwdCwgYmJveCkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBub3JtYWxpemUgdG8gbXVsdGlwb2x5Z29uXG4gICAgaWYgKHR5cGUgPT09ICdQb2x5Z29uJykgcG9seXMgPSBbcG9seXNdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGluc2lkZVBvbHkgPSBmYWxzZTsgaSA8IHBvbHlzLmxlbmd0aCAmJiAhaW5zaWRlUG9seTsgaSsrKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGl0IGlzIGluIHRoZSBvdXRlciByaW5nIGZpcnN0XG4gICAgICAgIGlmIChpblJpbmcocHQsIHBvbHlzW2ldWzBdLCBpZ25vcmVCb3VuZGFyeSkpIHtcbiAgICAgICAgICAgIHZhciBpbkhvbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBrID0gMTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciB0aGUgcG9pbnQgaW4gYW55IG9mIHRoZSBob2xlc1xuICAgICAgICAgICAgd2hpbGUgKGsgPCBwb2x5c1tpXS5sZW5ndGggJiYgIWluSG9sZSkge1xuICAgICAgICAgICAgICAgIGlmIChpblJpbmcocHQsIHBvbHlzW2ldW2tdLCAhaWdub3JlQm91bmRhcnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluSG9sZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW5Ib2xlKSBpbnNpZGVQb2x5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5zaWRlUG9seTtcbn07XG5cbi8qKlxuICogaW5SaW5nXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7W251bWJlciwgbnVtYmVyXX0gcHQgW3gseV1cbiAqIEBwYXJhbSB7QXJyYXk8W251bWJlciwgbnVtYmVyXT59IHJpbmcgW1t4LHldLCBbeCx5XSwuLl1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaWdub3JlQm91bmRhcnkgaWdub3JlQm91bmRhcnlcbiAqIEByZXR1cm5zIHtib29sZWFufSBpblJpbmdcbiAqL1xuZnVuY3Rpb24gaW5SaW5nKHB0LCByaW5nLCBpZ25vcmVCb3VuZGFyeSkge1xuICAgIHZhciBpc0luc2lkZSA9IGZhbHNlO1xuICAgIGlmIChyaW5nWzBdWzBdID09PSByaW5nW3JpbmcubGVuZ3RoIC0gMV1bMF0gJiYgcmluZ1swXVsxXSA9PT0gcmluZ1tyaW5nLmxlbmd0aCAtIDFdWzFdKSByaW5nID0gcmluZy5zbGljZSgwLCByaW5nLmxlbmd0aCAtIDEpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSByaW5nLmxlbmd0aCAtIDE7IGkgPCByaW5nLmxlbmd0aDsgaiA9IGkrKykge1xuICAgICAgICB2YXIgeGkgPSByaW5nW2ldWzBdLCB5aSA9IHJpbmdbaV1bMV07XG4gICAgICAgIHZhciB4aiA9IHJpbmdbal1bMF0sIHlqID0gcmluZ1tqXVsxXTtcbiAgICAgICAgdmFyIG9uQm91bmRhcnkgPSAocHRbMV0gKiAoeGkgLSB4aikgKyB5aSAqICh4aiAtIHB0WzBdKSArIHlqICogKHB0WzBdIC0geGkpID09PSAwKSAmJlxuICAgICAgICAgICAgKCh4aSAtIHB0WzBdKSAqICh4aiAtIHB0WzBdKSA8PSAwKSAmJiAoKHlpIC0gcHRbMV0pICogKHlqIC0gcHRbMV0pIDw9IDApO1xuICAgICAgICBpZiAob25Cb3VuZGFyeSkgcmV0dXJuICFpZ25vcmVCb3VuZGFyeTtcbiAgICAgICAgdmFyIGludGVyc2VjdCA9ICgoeWkgPiBwdFsxXSkgIT09ICh5aiA+IHB0WzFdKSkgJiZcbiAgICAgICAgKHB0WzBdIDwgKHhqIC0geGkpICogKHB0WzFdIC0geWkpIC8gKHlqIC0geWkpICsgeGkpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0KSBpc0luc2lkZSA9ICFpc0luc2lkZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzSW5zaWRlO1xufVxuXG4vKipcbiAqIGluQkJveFxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlcl19IHB0IHBvaW50IFt4LHldXG4gKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdfSBiYm94IEJCb3ggW3dlc3QsIHNvdXRoLCBlYXN0LCBub3J0aF1cbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlL2ZhbHNlIGlmIHBvaW50IGlzIGluc2lkZSBCQm94XG4gKi9cbmZ1bmN0aW9uIGluQkJveChwdCwgYmJveCkge1xuICAgIHJldHVybiBiYm94WzBdIDw9IHB0WzBdICYmXG4gICAgICAgICAgIGJib3hbMV0gPD0gcHRbMV0gJiZcbiAgICAgICAgICAgYmJveFsyXSA+PSBwdFswXSAmJlxuICAgICAgICAgICBiYm94WzNdID49IHB0WzFdO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvaW5zaWRlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgY2xpcEFudGltZXJpZGlhbiBmcm9tIFwiLi4vY2xpcC9hbnRpbWVyaWRpYW5cIjtcbmltcG9ydCBjbGlwQ2lyY2xlIGZyb20gXCIuLi9jbGlwL2NpcmNsZVwiO1xuaW1wb3J0IHtjbGlwRXh0ZW50fSBmcm9tIFwiLi4vY2xpcC9leHRlbnRcIjtcbmltcG9ydCBjb21wb3NlIGZyb20gXCIuLi9jb21wb3NlXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5XCI7XG5pbXBvcnQge2RlZ3JlZXMsIHJhZGlhbnMsIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge3JvdGF0ZVJhZGlhbnN9IGZyb20gXCIuLi9yb3RhdGlvblwiO1xuaW1wb3J0IHt0cmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybVwiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemV9IGZyb20gXCIuL2ZpdFwiO1xuaW1wb3J0IHJlc2FtcGxlIGZyb20gXCIuL3Jlc2FtcGxlXCI7XG5cbnZhciB0cmFuc2Zvcm1SYWRpYW5zID0gdHJhbnNmb3JtZXIoe1xuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiByYWRpYW5zLCB5ICogcmFkaWFucyk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgcmV0dXJuIHByb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkgeyByZXR1cm4gcHJvamVjdDsgfSkoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuICB2YXIgcHJvamVjdCxcbiAgICAgIGsgPSAxNTAsIC8vIHNjYWxlXG4gICAgICB4ID0gNDgwLCB5ID0gMjUwLCAvLyB0cmFuc2xhdGVcbiAgICAgIGR4LCBkeSwgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXG4gICAgICBkZWx0YUxhbWJkYSA9IDAsIGRlbHRhUGhpID0gMCwgZGVsdGFHYW1tYSA9IDAsIHJvdGF0ZSwgcHJvamVjdFJvdGF0ZSwgLy8gcm90YXRlXG4gICAgICB0aGV0YSA9IG51bGwsIHByZWNsaXAgPSBjbGlwQW50aW1lcmlkaWFuLCAvLyBjbGlwIGFuZ2xlXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIHBvc3RjbGlwID0gaWRlbnRpdHksIC8vIGNsaXAgZXh0ZW50XG4gICAgICBkZWx0YTIgPSAwLjUsIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiksIC8vIHByZWNpc2lvblxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbTtcblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uKHBvaW50KSB7XG4gICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlKHBvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gW3BvaW50WzBdICogayArIGR4LCBkeSAtIHBvaW50WzFdICoga107XG4gIH1cblxuICBmdW5jdGlvbiBpbnZlcnQocG9pbnQpIHtcbiAgICBwb2ludCA9IHByb2plY3RSb3RhdGUuaW52ZXJ0KChwb2ludFswXSAtIGR4KSAvIGssIChkeSAtIHBvaW50WzFdKSAvIGspO1xuICAgIHJldHVybiBwb2ludCAmJiBbcG9pbnRbMF0gKiBkZWdyZWVzLCBwb2ludFsxXSAqIGRlZ3JlZXNdO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvamVjdFRyYW5zZm9ybSh4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBwcm9qZWN0KHgsIHkpLCBbeFswXSAqIGsgKyBkeCwgZHkgLSB4WzFdICoga107XG4gIH1cblxuICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybVJhZGlhbnMocHJlY2xpcChyb3RhdGUsIHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpKSk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9ICtfID8gY2xpcENpcmNsZSh0aGV0YSA9IF8gKiByYWRpYW5zLCA2ICogcmFkaWFucykgOiAodGhldGEgPSBudWxsLCBjbGlwQW50aW1lcmlkaWFuKSwgcmVzZXQoKSkgOiB0aGV0YSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuXG4gIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoayA9ICtfLCByZWNlbnRlcigpKSA6IGs7XG4gIH07XG5cbiAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfWzBdLCB5ID0gK19bMV0sIHJlY2VudGVyKCkpIDogW3gsIHldO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBwaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBbbGFtYmRhICogZGVncmVlcywgcGhpICogZGVncmVlc107XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVsdGFMYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgZGVsdGFQaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgZGVsdGFHYW1tYSA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiByYWRpYW5zIDogMCwgcmVjZW50ZXIoKSkgOiBbZGVsdGFMYW1iZGEgKiBkZWdyZWVzLCBkZWx0YVBoaSAqIGRlZ3JlZXMsIGRlbHRhR2FtbWEgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIgPSBfICogXyksIHJlc2V0KCkpIDogc3FydChkZWx0YTIpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0RXh0ZW50ID0gZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlY2VudGVyKCkge1xuICAgIHByb2plY3RSb3RhdGUgPSBjb21wb3NlKHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSwgcHJvamVjdCk7XG4gICAgdmFyIGNlbnRlciA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgIGR4ID0geCAtIGNlbnRlclswXSAqIGs7XG4gICAgZHkgPSB5ICsgY2VudGVyWzFdICogaztcbiAgICByZXR1cm4gcmVzZXQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHByb2plY3QgPSBwcm9qZWN0QXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBwcm9qZWN0aW9uLmludmVydCA9IHByb2plY3QuaW52ZXJ0ICYmIGludmVydDtcbiAgICByZXR1cm4gcmVjZW50ZXIoKTtcbiAgfTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpIHt9XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL25vb3AuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYXZlcnNpbmVfZm9ybXVsYVxuLy9odHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbFxudmFyIGdldENvb3JkID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50JykuZ2V0Q29vcmQ7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBwb2ludCA9IGhlbHBlcnMucG9pbnQ7XG52YXIgZGlzdGFuY2VUb1JhZGlhbnMgPSBoZWxwZXJzLmRpc3RhbmNlVG9SYWRpYW5zO1xuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIFBvaW50fSBhbmQgY2FsY3VsYXRlcyB0aGUgbG9jYXRpb24gb2YgYSBkZXN0aW5hdGlvbiBwb2ludCBnaXZlbiBhIGRpc3RhbmNlIGluIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBvciBraWxvbWV0ZXJzOyBhbmQgYmVhcmluZyBpbiBkZWdyZWVzLiBUaGlzIHVzZXMgdGhlIFtIYXZlcnNpbmUgZm9ybXVsYV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYXZlcnNpbmVfZm9ybXVsYSkgdG8gYWNjb3VudCBmb3IgZ2xvYmFsIGN1cnZhdHVyZS5cbiAqXG4gKiBAbmFtZSBkZXN0aW5hdGlvblxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvaW50PnxBcnJheTxudW1iZXI+fSBvcmlnaW4gc3RhcnRpbmcgcG9pbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4gcG9pbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWFyaW5nIHJhbmdpbmcgZnJvbSAtMTgwIHRvIDE4MFxuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBtaWxlcywga2lsb21ldGVycywgZGVncmVlcywgb3IgcmFkaWFuc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9pbnQ+fSBkZXN0aW5hdGlvbiBwb2ludFxuICogQGV4YW1wbGVcbiAqIHZhciBwb2ludCA9IHR1cmYucG9pbnQoWy03NS4zNDMsIDM5Ljk4NF0pO1xuICogdmFyIGRpc3RhbmNlID0gNTA7XG4gKiB2YXIgYmVhcmluZyA9IDkwO1xuICogdmFyIHVuaXRzID0gJ21pbGVzJztcbiAqXG4gKiB2YXIgZGVzdGluYXRpb24gPSB0dXJmLmRlc3RpbmF0aW9uKHBvaW50LCBkaXN0YW5jZSwgYmVhcmluZywgdW5pdHMpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2ludCwgZGVzdGluYXRpb25dXG4gKiBkZXN0aW5hdGlvbi5wcm9wZXJ0aWVzWydtYXJrZXItY29sb3InXSA9ICcjZjAwJztcbiAqIHBvaW50LnByb3BlcnRpZXNbJ21hcmtlci1jb2xvciddID0gJyMwZjAnO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW4sIGRpc3RhbmNlLCBiZWFyaW5nLCB1bml0cykge1xuICAgIHZhciBkZWdyZWVzMnJhZGlhbnMgPSBNYXRoLlBJIC8gMTgwO1xuICAgIHZhciByYWRpYW5zMmRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuICAgIHZhciBjb29yZGluYXRlczEgPSBnZXRDb29yZChvcmlnaW4pO1xuICAgIHZhciBsb25naXR1ZGUxID0gZGVncmVlczJyYWRpYW5zICogY29vcmRpbmF0ZXMxWzBdO1xuICAgIHZhciBsYXRpdHVkZTEgPSBkZWdyZWVzMnJhZGlhbnMgKiBjb29yZGluYXRlczFbMV07XG4gICAgdmFyIGJlYXJpbmdfcmFkID0gZGVncmVlczJyYWRpYW5zICogYmVhcmluZztcblxuICAgIHZhciByYWRpYW5zID0gZGlzdGFuY2VUb1JhZGlhbnMoZGlzdGFuY2UsIHVuaXRzKTtcblxuICAgIHZhciBsYXRpdHVkZTIgPSBNYXRoLmFzaW4oTWF0aC5zaW4obGF0aXR1ZGUxKSAqIE1hdGguY29zKHJhZGlhbnMpICtcbiAgICAgICAgTWF0aC5jb3MobGF0aXR1ZGUxKSAqIE1hdGguc2luKHJhZGlhbnMpICogTWF0aC5jb3MoYmVhcmluZ19yYWQpKTtcbiAgICB2YXIgbG9uZ2l0dWRlMiA9IGxvbmdpdHVkZTEgKyBNYXRoLmF0YW4yKE1hdGguc2luKGJlYXJpbmdfcmFkKSAqXG4gICAgICAgIE1hdGguc2luKHJhZGlhbnMpICogTWF0aC5jb3MobGF0aXR1ZGUxKSxcbiAgICAgICAgTWF0aC5jb3MocmFkaWFucykgLSBNYXRoLnNpbihsYXRpdHVkZTEpICogTWF0aC5zaW4obGF0aXR1ZGUyKSk7XG5cbiAgICByZXR1cm4gcG9pbnQoW3JhZGlhbnMyZGVncmVlcyAqIGxvbmdpdHVkZTIsIHJhZGlhbnMyZGVncmVlcyAqIGxhdGl0dWRlMl0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2Rlc3RpbmF0aW9uL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJmdW5jdGlvbiBzdHJlYW1HZW9tZXRyeShnZW9tZXRyeSwgc3RyZWFtKSB7XG4gIGlmIChnZW9tZXRyeSAmJiBzdHJlYW1HZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSkpIHtcbiAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn1cblxudmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9LFxuICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn07XG5cbnZhciBzdHJlYW1HZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW0uc3BoZXJlKCk7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIG9iamVjdCA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSwgMCk7XG4gIH0sXG4gIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgfSxcbiAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0pO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHN0cmVhbSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIHN0cmVhbSwgY2xvc2VkKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG4gIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIGNvb3JkaW5hdGUgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICBzdHJlYW0ubGluZUVuZCgpO1xufVxuXG5mdW5jdGlvbiBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBzdHJlYW0pIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAxKTtcbiAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgaWYgKG9iamVjdCAmJiBzdHJlYW1PYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKSkge1xuICAgIHN0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgc3RyZWFtKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW1HZW9tZXRyeShvYmplY3QsIHN0cmVhbSk7XG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvc3RyZWFtLmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmJ1c2g7XG5cbnZhciBxdWlja3NlbGVjdCA9IHJlcXVpcmUoJ3F1aWNrc2VsZWN0Jyk7XG5cbmZ1bmN0aW9uIHJidXNoKG1heEVudHJpZXMsIGZvcm1hdCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiByYnVzaCkpIHJldHVybiBuZXcgcmJ1c2gobWF4RW50cmllcywgZm9ybWF0KTtcblxuICAgIC8vIG1heCBlbnRyaWVzIGluIGEgbm9kZSBpcyA5IGJ5IGRlZmF1bHQ7IG1pbiBub2RlIGZpbGwgaXMgNDAlIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhpcy5fbWF4RW50cmllcyA9IE1hdGgubWF4KDQsIG1heEVudHJpZXMgfHwgOSk7XG4gICAgdGhpcy5fbWluRW50cmllcyA9IE1hdGgubWF4KDIsIE1hdGguY2VpbCh0aGlzLl9tYXhFbnRyaWVzICogMC40KSk7XG5cbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICAgIHRoaXMuX2luaXRGb3JtYXQoZm9ybWF0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG59XG5cbnJidXNoLnByb3RvdHlwZSA9IHtcblxuICAgIGFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWxsKHRoaXMuZGF0YSwgW10pO1xuICAgIH0sXG5cbiAgICBzZWFyY2g6IGZ1bmN0aW9uIChiYm94KSB7XG5cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRhdGEsXG4gICAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICAgIHRvQkJveCA9IHRoaXMudG9CQm94O1xuXG4gICAgICAgIGlmICghaW50ZXJzZWN0cyhiYm94LCBub2RlKSkgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICB2YXIgbm9kZXNUb1NlYXJjaCA9IFtdLFxuICAgICAgICAgICAgaSwgbGVuLCBjaGlsZCwgY2hpbGRCQm94O1xuXG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgY2hpbGRCQm94ID0gbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoYmJveCwgY2hpbGRCQm94KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5sZWFmKSByZXN1bHQucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRhaW5zKGJib3gsIGNoaWxkQkJveCkpIHRoaXMuX2FsbChjaGlsZCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBub2Rlc1RvU2VhcmNoLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBub2Rlc1RvU2VhcmNoLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgY29sbGlkZXM6IGZ1bmN0aW9uIChiYm94KSB7XG5cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRhdGEsXG4gICAgICAgICAgICB0b0JCb3ggPSB0aGlzLnRvQkJveDtcblxuICAgICAgICBpZiAoIWludGVyc2VjdHMoYmJveCwgbm9kZSkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgbm9kZXNUb1NlYXJjaCA9IFtdLFxuICAgICAgICAgICAgaSwgbGVuLCBjaGlsZCwgY2hpbGRCQm94O1xuXG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgY2hpbGRCQm94ID0gbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoYmJveCwgY2hpbGRCQm94KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5sZWFmIHx8IGNvbnRhaW5zKGJib3gsIGNoaWxkQkJveCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1RvU2VhcmNoLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBub2Rlc1RvU2VhcmNoLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBsb2FkOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIShkYXRhICYmIGRhdGEubGVuZ3RoKSkgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgdGhpcy5fbWluRW50cmllcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydChkYXRhW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgYnVpbGQgdGhlIHRyZWUgd2l0aCB0aGUgZ2l2ZW4gZGF0YSBmcm9tIHN0cmF0Y2ggdXNpbmcgT01UIGFsZ29yaXRobVxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuX2J1aWxkKGRhdGEuc2xpY2UoKSwgMCwgZGF0YS5sZW5ndGggLSAxLCAwKTtcblxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIHNhdmUgYXMgaXMgaWYgdHJlZSBpcyBlbXB0eVxuICAgICAgICAgICAgdGhpcy5kYXRhID0gbm9kZTtcblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5oZWlnaHQgPT09IG5vZGUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBzcGxpdCByb290IGlmIHRyZWVzIGhhdmUgdGhlIHNhbWUgaGVpZ2h0XG4gICAgICAgICAgICB0aGlzLl9zcGxpdFJvb3QodGhpcy5kYXRhLCBub2RlKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5oZWlnaHQgPCBub2RlLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIC8vIHN3YXAgdHJlZXMgaWYgaW5zZXJ0ZWQgb25lIGlzIGJpZ2dlclxuICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHRtcE5vZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGluc2VydCB0aGUgc21hbGwgdHJlZSBpbnRvIHRoZSBsYXJnZSB0cmVlIGF0IGFwcHJvcHJpYXRlIGxldmVsXG4gICAgICAgICAgICB0aGlzLl9pbnNlcnQobm9kZSwgdGhpcy5kYXRhLmhlaWdodCAtIG5vZGUuaGVpZ2h0IC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgaW5zZXJ0OiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAoaXRlbSkgdGhpcy5faW5zZXJ0KGl0ZW0sIHRoaXMuZGF0YS5oZWlnaHQgLSAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGNyZWF0ZU5vZGUoW10pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiAoaXRlbSwgZXF1YWxzRm4pIHtcbiAgICAgICAgaWYgKCFpdGVtKSByZXR1cm4gdGhpcztcblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuZGF0YSxcbiAgICAgICAgICAgIGJib3ggPSB0aGlzLnRvQkJveChpdGVtKSxcbiAgICAgICAgICAgIHBhdGggPSBbXSxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIGksIHBhcmVudCwgaW5kZXgsIGdvaW5nVXA7XG5cbiAgICAgICAgLy8gZGVwdGgtZmlyc3QgaXRlcmF0aXZlIHRyZWUgdHJhdmVyc2FsXG4gICAgICAgIHdoaWxlIChub2RlIHx8IHBhdGgubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgIGlmICghbm9kZSkgeyAvLyBnbyB1cFxuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXRoLnBvcCgpO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpID0gaW5kZXhlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBnb2luZ1VwID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGUubGVhZikgeyAvLyBjaGVjayBjdXJyZW50IG5vZGVcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZpbmRJdGVtKGl0ZW0sIG5vZGUuY2hpbGRyZW4sIGVxdWFsc0ZuKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXRlbSBmb3VuZCwgcmVtb3ZlIHRoZSBpdGVtIGFuZCBjb25kZW5zZSB0cmVlIHVwd2FyZHNcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICBwYXRoLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbmRlbnNlKHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZ29pbmdVcCAmJiAhbm9kZS5sZWFmICYmIGNvbnRhaW5zKG5vZGUsIGJib3gpKSB7IC8vIGdvIGRvd25cbiAgICAgICAgICAgICAgICBwYXRoLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50KSB7IC8vIGdvIHJpZ2h0XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgZ29pbmdVcCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9IGVsc2Ugbm9kZSA9IG51bGw7IC8vIG5vdGhpbmcgZm91bmRcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICB0b0JCb3g6IGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtOyB9LFxuXG4gICAgY29tcGFyZU1pblg6IGNvbXBhcmVOb2RlTWluWCxcbiAgICBjb21wYXJlTWluWTogY29tcGFyZU5vZGVNaW5ZLFxuXG4gICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmRhdGE7IH0sXG5cbiAgICBmcm9tSlNPTjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF9hbGw6IGZ1bmN0aW9uIChub2RlLCByZXN1bHQpIHtcbiAgICAgICAgdmFyIG5vZGVzVG9TZWFyY2ggPSBbXTtcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmxlYWYpIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgbm9kZS5jaGlsZHJlbik7XG4gICAgICAgICAgICBlbHNlIG5vZGVzVG9TZWFyY2gucHVzaC5hcHBseShub2Rlc1RvU2VhcmNoLCBub2RlLmNoaWxkcmVuKTtcblxuICAgICAgICAgICAgbm9kZSA9IG5vZGVzVG9TZWFyY2gucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgX2J1aWxkOiBmdW5jdGlvbiAoaXRlbXMsIGxlZnQsIHJpZ2h0LCBoZWlnaHQpIHtcblxuICAgICAgICB2YXIgTiA9IHJpZ2h0IC0gbGVmdCArIDEsXG4gICAgICAgICAgICBNID0gdGhpcy5fbWF4RW50cmllcyxcbiAgICAgICAgICAgIG5vZGU7XG5cbiAgICAgICAgaWYgKE4gPD0gTSkge1xuICAgICAgICAgICAgLy8gcmVhY2hlZCBsZWFmIGxldmVsOyByZXR1cm4gbGVhZlxuICAgICAgICAgICAgbm9kZSA9IGNyZWF0ZU5vZGUoaXRlbXMuc2xpY2UobGVmdCwgcmlnaHQgKyAxKSk7XG4gICAgICAgICAgICBjYWxjQkJveChub2RlLCB0aGlzLnRvQkJveCk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyB0YXJnZXQgaGVpZ2h0IG9mIHRoZSBidWxrLWxvYWRlZCB0cmVlXG4gICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmNlaWwoTWF0aC5sb2coTikgLyBNYXRoLmxvZyhNKSk7XG5cbiAgICAgICAgICAgIC8vIHRhcmdldCBudW1iZXIgb2Ygcm9vdCBlbnRyaWVzIHRvIG1heGltaXplIHN0b3JhZ2UgdXRpbGl6YXRpb25cbiAgICAgICAgICAgIE0gPSBNYXRoLmNlaWwoTiAvIE1hdGgucG93KE0sIGhlaWdodCAtIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUgPSBjcmVhdGVOb2RlKFtdKTtcbiAgICAgICAgbm9kZS5sZWFmID0gZmFsc2U7XG4gICAgICAgIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIC8vIHNwbGl0IHRoZSBpdGVtcyBpbnRvIE0gbW9zdGx5IHNxdWFyZSB0aWxlc1xuXG4gICAgICAgIHZhciBOMiA9IE1hdGguY2VpbChOIC8gTSksXG4gICAgICAgICAgICBOMSA9IE4yICogTWF0aC5jZWlsKE1hdGguc3FydChNKSksXG4gICAgICAgICAgICBpLCBqLCByaWdodDIsIHJpZ2h0MztcblxuICAgICAgICBtdWx0aVNlbGVjdChpdGVtcywgbGVmdCwgcmlnaHQsIE4xLCB0aGlzLmNvbXBhcmVNaW5YKTtcblxuICAgICAgICBmb3IgKGkgPSBsZWZ0OyBpIDw9IHJpZ2h0OyBpICs9IE4xKSB7XG5cbiAgICAgICAgICAgIHJpZ2h0MiA9IE1hdGgubWluKGkgKyBOMSAtIDEsIHJpZ2h0KTtcblxuICAgICAgICAgICAgbXVsdGlTZWxlY3QoaXRlbXMsIGksIHJpZ2h0MiwgTjIsIHRoaXMuY29tcGFyZU1pblkpO1xuXG4gICAgICAgICAgICBmb3IgKGogPSBpOyBqIDw9IHJpZ2h0MjsgaiArPSBOMikge1xuXG4gICAgICAgICAgICAgICAgcmlnaHQzID0gTWF0aC5taW4oaiArIE4yIC0gMSwgcmlnaHQyKTtcblxuICAgICAgICAgICAgICAgIC8vIHBhY2sgZWFjaCBlbnRyeSByZWN1cnNpdmVseVxuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4ucHVzaCh0aGlzLl9idWlsZChpdGVtcywgaiwgcmlnaHQzLCBoZWlnaHQgLSAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxjQkJveChub2RlLCB0aGlzLnRvQkJveCk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcblxuICAgIF9jaG9vc2VTdWJ0cmVlOiBmdW5jdGlvbiAoYmJveCwgbm9kZSwgbGV2ZWwsIHBhdGgpIHtcblxuICAgICAgICB2YXIgaSwgbGVuLCBjaGlsZCwgdGFyZ2V0Tm9kZSwgYXJlYSwgZW5sYXJnZW1lbnQsIG1pbkFyZWEsIG1pbkVubGFyZ2VtZW50O1xuXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2gobm9kZSk7XG5cbiAgICAgICAgICAgIGlmIChub2RlLmxlYWYgfHwgcGF0aC5sZW5ndGggLSAxID09PSBsZXZlbCkgYnJlYWs7XG5cbiAgICAgICAgICAgIG1pbkFyZWEgPSBtaW5FbmxhcmdlbWVudCA9IEluZmluaXR5O1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGFyZWEgPSBiYm94QXJlYShjaGlsZCk7XG4gICAgICAgICAgICAgICAgZW5sYXJnZW1lbnQgPSBlbmxhcmdlZEFyZWEoYmJveCwgY2hpbGQpIC0gYXJlYTtcblxuICAgICAgICAgICAgICAgIC8vIGNob29zZSBlbnRyeSB3aXRoIHRoZSBsZWFzdCBhcmVhIGVubGFyZ2VtZW50XG4gICAgICAgICAgICAgICAgaWYgKGVubGFyZ2VtZW50IDwgbWluRW5sYXJnZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluRW5sYXJnZW1lbnQgPSBlbmxhcmdlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgbWluQXJlYSA9IGFyZWEgPCBtaW5BcmVhID8gYXJlYSA6IG1pbkFyZWE7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSBjaGlsZDtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW5sYXJnZW1lbnQgPT09IG1pbkVubGFyZ2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBjaG9vc2Ugb25lIHdpdGggdGhlIHNtYWxsZXN0IGFyZWFcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZWEgPCBtaW5BcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5BcmVhID0gYXJlYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZSA9IHRhcmdldE5vZGUgfHwgbm9kZS5jaGlsZHJlblswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG5cbiAgICBfaW5zZXJ0OiBmdW5jdGlvbiAoaXRlbSwgbGV2ZWwsIGlzTm9kZSkge1xuXG4gICAgICAgIHZhciB0b0JCb3ggPSB0aGlzLnRvQkJveCxcbiAgICAgICAgICAgIGJib3ggPSBpc05vZGUgPyBpdGVtIDogdG9CQm94KGl0ZW0pLFxuICAgICAgICAgICAgaW5zZXJ0UGF0aCA9IFtdO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIGJlc3Qgbm9kZSBmb3IgYWNjb21tb2RhdGluZyB0aGUgaXRlbSwgc2F2aW5nIGFsbCBub2RlcyBhbG9uZyB0aGUgcGF0aCB0b29cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLl9jaG9vc2VTdWJ0cmVlKGJib3gsIHRoaXMuZGF0YSwgbGV2ZWwsIGluc2VydFBhdGgpO1xuXG4gICAgICAgIC8vIHB1dCB0aGUgaXRlbSBpbnRvIHRoZSBub2RlXG4gICAgICAgIG5vZGUuY2hpbGRyZW4ucHVzaChpdGVtKTtcbiAgICAgICAgZXh0ZW5kKG5vZGUsIGJib3gpO1xuXG4gICAgICAgIC8vIHNwbGl0IG9uIG5vZGUgb3ZlcmZsb3c7IHByb3BhZ2F0ZSB1cHdhcmRzIGlmIG5lY2Vzc2FyeVxuICAgICAgICB3aGlsZSAobGV2ZWwgPj0gMCkge1xuICAgICAgICAgICAgaWYgKGluc2VydFBhdGhbbGV2ZWxdLmNoaWxkcmVuLmxlbmd0aCA+IHRoaXMuX21heEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGxpdChpbnNlcnRQYXRoLCBsZXZlbCk7XG4gICAgICAgICAgICAgICAgbGV2ZWwtLTtcbiAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkanVzdCBiYm94ZXMgYWxvbmcgdGhlIGluc2VydGlvbiBwYXRoXG4gICAgICAgIHRoaXMuX2FkanVzdFBhcmVudEJCb3hlcyhiYm94LCBpbnNlcnRQYXRoLCBsZXZlbCk7XG4gICAgfSxcblxuICAgIC8vIHNwbGl0IG92ZXJmbG93ZWQgbm9kZSBpbnRvIHR3b1xuICAgIF9zcGxpdDogZnVuY3Rpb24gKGluc2VydFBhdGgsIGxldmVsKSB7XG5cbiAgICAgICAgdmFyIG5vZGUgPSBpbnNlcnRQYXRoW2xldmVsXSxcbiAgICAgICAgICAgIE0gPSBub2RlLmNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICAgIG0gPSB0aGlzLl9taW5FbnRyaWVzO1xuXG4gICAgICAgIHRoaXMuX2Nob29zZVNwbGl0QXhpcyhub2RlLCBtLCBNKTtcblxuICAgICAgICB2YXIgc3BsaXRJbmRleCA9IHRoaXMuX2Nob29zZVNwbGl0SW5kZXgobm9kZSwgbSwgTSk7XG5cbiAgICAgICAgdmFyIG5ld05vZGUgPSBjcmVhdGVOb2RlKG5vZGUuY2hpbGRyZW4uc3BsaWNlKHNwbGl0SW5kZXgsIG5vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gc3BsaXRJbmRleCkpO1xuICAgICAgICBuZXdOb2RlLmhlaWdodCA9IG5vZGUuaGVpZ2h0O1xuICAgICAgICBuZXdOb2RlLmxlYWYgPSBub2RlLmxlYWY7XG5cbiAgICAgICAgY2FsY0JCb3gobm9kZSwgdGhpcy50b0JCb3gpO1xuICAgICAgICBjYWxjQkJveChuZXdOb2RlLCB0aGlzLnRvQkJveCk7XG5cbiAgICAgICAgaWYgKGxldmVsKSBpbnNlcnRQYXRoW2xldmVsIC0gMV0uY2hpbGRyZW4ucHVzaChuZXdOb2RlKTtcbiAgICAgICAgZWxzZSB0aGlzLl9zcGxpdFJvb3Qobm9kZSwgbmV3Tm9kZSk7XG4gICAgfSxcblxuICAgIF9zcGxpdFJvb3Q6IGZ1bmN0aW9uIChub2RlLCBuZXdOb2RlKSB7XG4gICAgICAgIC8vIHNwbGl0IHJvb3Qgbm9kZVxuICAgICAgICB0aGlzLmRhdGEgPSBjcmVhdGVOb2RlKFtub2RlLCBuZXdOb2RlXSk7XG4gICAgICAgIHRoaXMuZGF0YS5oZWlnaHQgPSBub2RlLmhlaWdodCArIDE7XG4gICAgICAgIHRoaXMuZGF0YS5sZWFmID0gZmFsc2U7XG4gICAgICAgIGNhbGNCQm94KHRoaXMuZGF0YSwgdGhpcy50b0JCb3gpO1xuICAgIH0sXG5cbiAgICBfY2hvb3NlU3BsaXRJbmRleDogZnVuY3Rpb24gKG5vZGUsIG0sIE0pIHtcblxuICAgICAgICB2YXIgaSwgYmJveDEsIGJib3gyLCBvdmVybGFwLCBhcmVhLCBtaW5PdmVybGFwLCBtaW5BcmVhLCBpbmRleDtcblxuICAgICAgICBtaW5PdmVybGFwID0gbWluQXJlYSA9IEluZmluaXR5O1xuXG4gICAgICAgIGZvciAoaSA9IG07IGkgPD0gTSAtIG07IGkrKykge1xuICAgICAgICAgICAgYmJveDEgPSBkaXN0QkJveChub2RlLCAwLCBpLCB0aGlzLnRvQkJveCk7XG4gICAgICAgICAgICBiYm94MiA9IGRpc3RCQm94KG5vZGUsIGksIE0sIHRoaXMudG9CQm94KTtcblxuICAgICAgICAgICAgb3ZlcmxhcCA9IGludGVyc2VjdGlvbkFyZWEoYmJveDEsIGJib3gyKTtcbiAgICAgICAgICAgIGFyZWEgPSBiYm94QXJlYShiYm94MSkgKyBiYm94QXJlYShiYm94Mik7XG5cbiAgICAgICAgICAgIC8vIGNob29zZSBkaXN0cmlidXRpb24gd2l0aCBtaW5pbXVtIG92ZXJsYXBcbiAgICAgICAgICAgIGlmIChvdmVybGFwIDwgbWluT3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIG1pbk92ZXJsYXAgPSBvdmVybGFwO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcblxuICAgICAgICAgICAgICAgIG1pbkFyZWEgPSBhcmVhIDwgbWluQXJlYSA/IGFyZWEgOiBtaW5BcmVhO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG92ZXJsYXAgPT09IG1pbk92ZXJsYXApIHtcbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgY2hvb3NlIGRpc3RyaWJ1dGlvbiB3aXRoIG1pbmltdW0gYXJlYVxuICAgICAgICAgICAgICAgIGlmIChhcmVhIDwgbWluQXJlYSkge1xuICAgICAgICAgICAgICAgICAgICBtaW5BcmVhID0gYXJlYTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgLy8gc29ydHMgbm9kZSBjaGlsZHJlbiBieSB0aGUgYmVzdCBheGlzIGZvciBzcGxpdFxuICAgIF9jaG9vc2VTcGxpdEF4aXM6IGZ1bmN0aW9uIChub2RlLCBtLCBNKSB7XG5cbiAgICAgICAgdmFyIGNvbXBhcmVNaW5YID0gbm9kZS5sZWFmID8gdGhpcy5jb21wYXJlTWluWCA6IGNvbXBhcmVOb2RlTWluWCxcbiAgICAgICAgICAgIGNvbXBhcmVNaW5ZID0gbm9kZS5sZWFmID8gdGhpcy5jb21wYXJlTWluWSA6IGNvbXBhcmVOb2RlTWluWSxcbiAgICAgICAgICAgIHhNYXJnaW4gPSB0aGlzLl9hbGxEaXN0TWFyZ2luKG5vZGUsIG0sIE0sIGNvbXBhcmVNaW5YKSxcbiAgICAgICAgICAgIHlNYXJnaW4gPSB0aGlzLl9hbGxEaXN0TWFyZ2luKG5vZGUsIG0sIE0sIGNvbXBhcmVNaW5ZKTtcblxuICAgICAgICAvLyBpZiB0b3RhbCBkaXN0cmlidXRpb25zIG1hcmdpbiB2YWx1ZSBpcyBtaW5pbWFsIGZvciB4LCBzb3J0IGJ5IG1pblgsXG4gICAgICAgIC8vIG90aGVyd2lzZSBpdCdzIGFscmVhZHkgc29ydGVkIGJ5IG1pbllcbiAgICAgICAgaWYgKHhNYXJnaW4gPCB5TWFyZ2luKSBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZU1pblgpO1xuICAgIH0sXG5cbiAgICAvLyB0b3RhbCBtYXJnaW4gb2YgYWxsIHBvc3NpYmxlIHNwbGl0IGRpc3RyaWJ1dGlvbnMgd2hlcmUgZWFjaCBub2RlIGlzIGF0IGxlYXN0IG0gZnVsbFxuICAgIF9hbGxEaXN0TWFyZ2luOiBmdW5jdGlvbiAobm9kZSwgbSwgTSwgY29tcGFyZSkge1xuXG4gICAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcblxuICAgICAgICB2YXIgdG9CQm94ID0gdGhpcy50b0JCb3gsXG4gICAgICAgICAgICBsZWZ0QkJveCA9IGRpc3RCQm94KG5vZGUsIDAsIG0sIHRvQkJveCksXG4gICAgICAgICAgICByaWdodEJCb3ggPSBkaXN0QkJveChub2RlLCBNIC0gbSwgTSwgdG9CQm94KSxcbiAgICAgICAgICAgIG1hcmdpbiA9IGJib3hNYXJnaW4obGVmdEJCb3gpICsgYmJveE1hcmdpbihyaWdodEJCb3gpLFxuICAgICAgICAgICAgaSwgY2hpbGQ7XG5cbiAgICAgICAgZm9yIChpID0gbTsgaSA8IE0gLSBtOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGV4dGVuZChsZWZ0QkJveCwgbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkKTtcbiAgICAgICAgICAgIG1hcmdpbiArPSBiYm94TWFyZ2luKGxlZnRCQm94KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IE0gLSBtIC0gMTsgaSA+PSBtOyBpLS0pIHtcbiAgICAgICAgICAgIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGV4dGVuZChyaWdodEJCb3gsIG5vZGUubGVhZiA/IHRvQkJveChjaGlsZCkgOiBjaGlsZCk7XG4gICAgICAgICAgICBtYXJnaW4gKz0gYmJveE1hcmdpbihyaWdodEJCb3gpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmdpbjtcbiAgICB9LFxuXG4gICAgX2FkanVzdFBhcmVudEJCb3hlczogZnVuY3Rpb24gKGJib3gsIHBhdGgsIGxldmVsKSB7XG4gICAgICAgIC8vIGFkanVzdCBiYm94ZXMgYWxvbmcgdGhlIGdpdmVuIHRyZWUgcGF0aFxuICAgICAgICBmb3IgKHZhciBpID0gbGV2ZWw7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBleHRlbmQocGF0aFtpXSwgYmJveCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NvbmRlbnNlOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAvLyBnbyB0aHJvdWdoIHRoZSBwYXRoLCByZW1vdmluZyBlbXB0eSBub2RlcyBhbmQgdXBkYXRpbmcgYmJveGVzXG4gICAgICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDEsIHNpYmxpbmdzOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHBhdGhbaV0uY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzID0gcGF0aFtpIC0gMV0uY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzLnNwbGljZShzaWJsaW5ncy5pbmRleE9mKHBhdGhbaV0pLCAxKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBjYWxjQkJveChwYXRoW2ldLCB0aGlzLnRvQkJveCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXRGb3JtYXQ6IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgLy8gZGF0YSBmb3JtYXQgKG1pblgsIG1pblksIG1heFgsIG1heFkgYWNjZXNzb3JzKVxuXG4gICAgICAgIC8vIHVzZXMgZXZhbC10eXBlIGZ1bmN0aW9uIGNvbXBpbGF0aW9uIGluc3RlYWQgb2YganVzdCBhY2NlcHRpbmcgYSB0b0JCb3ggZnVuY3Rpb25cbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgYWxnb3JpdGhtcyBhcmUgdmVyeSBzZW5zaXRpdmUgdG8gc29ydGluZyBmdW5jdGlvbnMgcGVyZm9ybWFuY2UsXG4gICAgICAgIC8vIHNvIHRoZXkgc2hvdWxkIGJlIGRlYWQgc2ltcGxlIGFuZCB3aXRob3V0IGlubmVyIGNhbGxzXG5cbiAgICAgICAgdmFyIGNvbXBhcmVBcnIgPSBbJ3JldHVybiBhJywgJyAtIGInLCAnOyddO1xuXG4gICAgICAgIHRoaXMuY29tcGFyZU1pblggPSBuZXcgRnVuY3Rpb24oJ2EnLCAnYicsIGNvbXBhcmVBcnIuam9pbihmb3JtYXRbMF0pKTtcbiAgICAgICAgdGhpcy5jb21wYXJlTWluWSA9IG5ldyBGdW5jdGlvbignYScsICdiJywgY29tcGFyZUFyci5qb2luKGZvcm1hdFsxXSkpO1xuXG4gICAgICAgIHRoaXMudG9CQm94ID0gbmV3IEZ1bmN0aW9uKCdhJyxcbiAgICAgICAgICAgICdyZXR1cm4ge21pblg6IGEnICsgZm9ybWF0WzBdICtcbiAgICAgICAgICAgICcsIG1pblk6IGEnICsgZm9ybWF0WzFdICtcbiAgICAgICAgICAgICcsIG1heFg6IGEnICsgZm9ybWF0WzJdICtcbiAgICAgICAgICAgICcsIG1heFk6IGEnICsgZm9ybWF0WzNdICsgJ307Jyk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gZmluZEl0ZW0oaXRlbSwgaXRlbXMsIGVxdWFsc0ZuKSB7XG4gICAgaWYgKCFlcXVhbHNGbikgcmV0dXJuIGl0ZW1zLmluZGV4T2YoaXRlbSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChlcXVhbHNGbihpdGVtLCBpdGVtc1tpXSkpIHJldHVybiBpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbi8vIGNhbGN1bGF0ZSBub2RlJ3MgYmJveCBmcm9tIGJib3hlcyBvZiBpdHMgY2hpbGRyZW5cbmZ1bmN0aW9uIGNhbGNCQm94KG5vZGUsIHRvQkJveCkge1xuICAgIGRpc3RCQm94KG5vZGUsIDAsIG5vZGUuY2hpbGRyZW4ubGVuZ3RoLCB0b0JCb3gsIG5vZGUpO1xufVxuXG4vLyBtaW4gYm91bmRpbmcgcmVjdGFuZ2xlIG9mIG5vZGUgY2hpbGRyZW4gZnJvbSBrIHRvIHAtMVxuZnVuY3Rpb24gZGlzdEJCb3gobm9kZSwgaywgcCwgdG9CQm94LCBkZXN0Tm9kZSkge1xuICAgIGlmICghZGVzdE5vZGUpIGRlc3ROb2RlID0gY3JlYXRlTm9kZShudWxsKTtcbiAgICBkZXN0Tm9kZS5taW5YID0gSW5maW5pdHk7XG4gICAgZGVzdE5vZGUubWluWSA9IEluZmluaXR5O1xuICAgIGRlc3ROb2RlLm1heFggPSAtSW5maW5pdHk7XG4gICAgZGVzdE5vZGUubWF4WSA9IC1JbmZpbml0eTtcblxuICAgIGZvciAodmFyIGkgPSBrLCBjaGlsZDsgaSA8IHA7IGkrKykge1xuICAgICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgIGV4dGVuZChkZXN0Tm9kZSwgbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdE5vZGU7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgYS5taW5YID0gTWF0aC5taW4oYS5taW5YLCBiLm1pblgpO1xuICAgIGEubWluWSA9IE1hdGgubWluKGEubWluWSwgYi5taW5ZKTtcbiAgICBhLm1heFggPSBNYXRoLm1heChhLm1heFgsIGIubWF4WCk7XG4gICAgYS5tYXhZID0gTWF0aC5tYXgoYS5tYXhZLCBiLm1heFkpO1xuICAgIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlTm9kZU1pblgoYSwgYikgeyByZXR1cm4gYS5taW5YIC0gYi5taW5YOyB9XG5mdW5jdGlvbiBjb21wYXJlTm9kZU1pblkoYSwgYikgeyByZXR1cm4gYS5taW5ZIC0gYi5taW5ZOyB9XG5cbmZ1bmN0aW9uIGJib3hBcmVhKGEpICAgeyByZXR1cm4gKGEubWF4WCAtIGEubWluWCkgKiAoYS5tYXhZIC0gYS5taW5ZKTsgfVxuZnVuY3Rpb24gYmJveE1hcmdpbihhKSB7IHJldHVybiAoYS5tYXhYIC0gYS5taW5YKSArIChhLm1heFkgLSBhLm1pblkpOyB9XG5cbmZ1bmN0aW9uIGVubGFyZ2VkQXJlYShhLCBiKSB7XG4gICAgcmV0dXJuIChNYXRoLm1heChiLm1heFgsIGEubWF4WCkgLSBNYXRoLm1pbihiLm1pblgsIGEubWluWCkpICpcbiAgICAgICAgICAgKE1hdGgubWF4KGIubWF4WSwgYS5tYXhZKSAtIE1hdGgubWluKGIubWluWSwgYS5taW5ZKSk7XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdGlvbkFyZWEoYSwgYikge1xuICAgIHZhciBtaW5YID0gTWF0aC5tYXgoYS5taW5YLCBiLm1pblgpLFxuICAgICAgICBtaW5ZID0gTWF0aC5tYXgoYS5taW5ZLCBiLm1pblkpLFxuICAgICAgICBtYXhYID0gTWF0aC5taW4oYS5tYXhYLCBiLm1heFgpLFxuICAgICAgICBtYXhZID0gTWF0aC5taW4oYS5tYXhZLCBiLm1heFkpO1xuXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIG1heFggLSBtaW5YKSAqXG4gICAgICAgICAgIE1hdGgubWF4KDAsIG1heFkgLSBtaW5ZKTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMoYSwgYikge1xuICAgIHJldHVybiBhLm1pblggPD0gYi5taW5YICYmXG4gICAgICAgICAgIGEubWluWSA8PSBiLm1pblkgJiZcbiAgICAgICAgICAgYi5tYXhYIDw9IGEubWF4WCAmJlxuICAgICAgICAgICBiLm1heFkgPD0gYS5tYXhZO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcbiAgICByZXR1cm4gYi5taW5YIDw9IGEubWF4WCAmJlxuICAgICAgICAgICBiLm1pblkgPD0gYS5tYXhZICYmXG4gICAgICAgICAgIGIubWF4WCA+PSBhLm1pblggJiZcbiAgICAgICAgICAgYi5tYXhZID49IGEubWluWTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZShjaGlsZHJlbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICBsZWFmOiB0cnVlLFxuICAgICAgICBtaW5YOiBJbmZpbml0eSxcbiAgICAgICAgbWluWTogSW5maW5pdHksXG4gICAgICAgIG1heFg6IC1JbmZpbml0eSxcbiAgICAgICAgbWF4WTogLUluZmluaXR5XG4gICAgfTtcbn1cblxuLy8gc29ydCBhbiBhcnJheSBzbyB0aGF0IGl0ZW1zIGNvbWUgaW4gZ3JvdXBzIG9mIG4gdW5zb3J0ZWQgaXRlbXMsIHdpdGggZ3JvdXBzIHNvcnRlZCBiZXR3ZWVuIGVhY2ggb3RoZXI7XG4vLyBjb21iaW5lcyBzZWxlY3Rpb24gYWxnb3JpdGhtIHdpdGggYmluYXJ5IGRpdmlkZSAmIGNvbnF1ZXIgYXBwcm9hY2hcblxuZnVuY3Rpb24gbXVsdGlTZWxlY3QoYXJyLCBsZWZ0LCByaWdodCwgbiwgY29tcGFyZSkge1xuICAgIHZhciBzdGFjayA9IFtsZWZ0LCByaWdodF0sXG4gICAgICAgIG1pZDtcblxuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgcmlnaHQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgbGVmdCA9IHN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGlmIChyaWdodCAtIGxlZnQgPD0gbikgY29udGludWU7XG5cbiAgICAgICAgbWlkID0gbGVmdCArIE1hdGguY2VpbCgocmlnaHQgLSBsZWZ0KSAvIG4gLyAyKSAqIG47XG4gICAgICAgIHF1aWNrc2VsZWN0KGFyciwgbWlkLCBsZWZ0LCByaWdodCwgY29tcGFyZSk7XG5cbiAgICAgICAgc3RhY2sucHVzaChsZWZ0LCBtaWQsIG1pZCwgcmlnaHQpO1xuICAgIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JidXNoL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBBZGRzIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgd2l0aCB0d2ljZSB0aGUgbm9ybWFsIHByZWNpc2lvbi5cbi8vIFJlZmVyZW5jZTogSi4gUi4gU2hld2NodWssIEFkYXB0aXZlIFByZWNpc2lvbiBGbG9hdGluZy1Qb2ludCBBcml0aG1ldGljIGFuZFxuLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxuLy8gMzA14oCTMzYzICgxOTk3KS5cbi8vIENvZGUgYWRhcHRlZCBmcm9tIEdlb2dyYXBoaWNMaWIgYnkgQ2hhcmxlcyBGLiBGLiBLYXJuZXksXG4vLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IEFkZGVyO1xufVxuXG5mdW5jdGlvbiBBZGRlcigpIHtcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5BZGRlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucyA9IC8vIHJvdW5kZWQgdmFsdWVcbiAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICB9LFxuICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICBhZGQodGVtcCwgeSwgdGhpcy50KTtcbiAgICBhZGQodGhpcywgdGVtcC5zLCB0aGlzLnMpO1xuICAgIGlmICh0aGlzLnMpIHRoaXMudCArPSB0ZW1wLnQ7XG4gICAgZWxzZSB0aGlzLnMgPSB0ZW1wLnQ7XG4gIH0sXG4gIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnM7XG4gIH1cbn07XG5cbnZhciB0ZW1wID0gbmV3IEFkZGVyO1xuXG5mdW5jdGlvbiBhZGQoYWRkZXIsIGEsIGIpIHtcbiAgdmFyIHggPSBhZGRlci5zID0gYSArIGIsXG4gICAgICBidiA9IHggLSBhLFxuICAgICAgYXYgPSB4IC0gYnY7XG4gIGFkZGVyLnQgPSAoYSAtIGF2KSArIChiIC0gYnYpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hZGRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0Q29vcmQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKS5nZXRDb29yZDtcbi8vaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYXZlcnNpbmVfZm9ybXVsYVxuLy9odHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbFxuXG4vKipcbiAqIFRha2VzIHR3byB7QGxpbmsgUG9pbnR8cG9pbnRzfSBhbmQgZmluZHMgdGhlIGdlb2dyYXBoaWMgYmVhcmluZyBiZXR3ZWVuIHRoZW0sXG4gKiBpLmUuIHRoZSBhbmdsZSBtZWFzdXJlZCBpbiBkZWdyZWVzIGZyb20gdGhlIG5vcnRoIGxpbmUgKDAgZGVncmVlcylcbiAqXG4gKiBAbmFtZSBiZWFyaW5nXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8UG9pbnQ+fEFycmF5PG51bWJlcj59IHN0YXJ0IHN0YXJ0aW5nIFBvaW50XG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8UG9pbnQ+fEFycmF5PG51bWJlcj59IGVuZCBlbmRpbmcgUG9pbnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZpbmFsPWZhbHNlXSBjYWxjdWxhdGVzIHRoZSBmaW5hbCBiZWFyaW5nIGlmIHRydWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGJlYXJpbmcgaW4gZGVjaW1hbCBkZWdyZWVzLCBiZXR3ZWVuIC0xODAgYW5kIDE4MCBkZWdyZWVzIChwb3NpdGl2ZSBjbG9ja3dpc2UpXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvaW50MSA9IHR1cmYucG9pbnQoWy03NS4zNDMsIDM5Ljk4NF0pO1xuICogdmFyIHBvaW50MiA9IHR1cmYucG9pbnQoWy03NS41MzQsIDM5LjEyM10pO1xuICpcbiAqIHZhciBiZWFyaW5nID0gdHVyZi5iZWFyaW5nKHBvaW50MSwgcG9pbnQyKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9pbnQxLCBwb2ludDJdXG4gKiBwb2ludDEucHJvcGVydGllc1snbWFya2VyLWNvbG9yJ10gPSAnI2YwMCdcbiAqIHBvaW50Mi5wcm9wZXJ0aWVzWydtYXJrZXItY29sb3InXSA9ICcjMGYwJ1xuICogcG9pbnQxLnByb3BlcnRpZXMuYmVhcmluZyA9IGJlYXJpbmdcbiAqL1xuZnVuY3Rpb24gYmVhcmluZyhzdGFydCwgZW5kLCBmaW5hbCkge1xuICAgIGlmIChmaW5hbCA9PT0gdHJ1ZSkgcmV0dXJuIGNhbGN1bGF0ZUZpbmFsQmVhcmluZyhzdGFydCwgZW5kKTtcblxuICAgIHZhciBkZWdyZWVzMnJhZGlhbnMgPSBNYXRoLlBJIC8gMTgwO1xuICAgIHZhciByYWRpYW5zMmRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuICAgIHZhciBjb29yZGluYXRlczEgPSBnZXRDb29yZChzdGFydCk7XG4gICAgdmFyIGNvb3JkaW5hdGVzMiA9IGdldENvb3JkKGVuZCk7XG5cbiAgICB2YXIgbG9uMSA9IGRlZ3JlZXMycmFkaWFucyAqIGNvb3JkaW5hdGVzMVswXTtcbiAgICB2YXIgbG9uMiA9IGRlZ3JlZXMycmFkaWFucyAqIGNvb3JkaW5hdGVzMlswXTtcbiAgICB2YXIgbGF0MSA9IGRlZ3JlZXMycmFkaWFucyAqIGNvb3JkaW5hdGVzMVsxXTtcbiAgICB2YXIgbGF0MiA9IGRlZ3JlZXMycmFkaWFucyAqIGNvb3JkaW5hdGVzMlsxXTtcbiAgICB2YXIgYSA9IE1hdGguc2luKGxvbjIgLSBsb24xKSAqIE1hdGguY29zKGxhdDIpO1xuICAgIHZhciBiID0gTWF0aC5jb3MobGF0MSkgKiBNYXRoLnNpbihsYXQyKSAtXG4gICAgICAgIE1hdGguc2luKGxhdDEpICogTWF0aC5jb3MobGF0MikgKiBNYXRoLmNvcyhsb24yIC0gbG9uMSk7XG5cbiAgICB2YXIgYmVhciA9IHJhZGlhbnMyZGVncmVlcyAqIE1hdGguYXRhbjIoYSwgYik7XG5cbiAgICByZXR1cm4gYmVhcjtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIEZpbmFsIEJlYXJpbmdcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ZlYXR1cmU8UG9pbnQ+fSBzdGFydCBzdGFydGluZyBQb2ludFxuICogQHBhcmFtIHtGZWF0dXJlPFBvaW50Pn0gZW5kIGVuZGluZyBQb2ludFxuICogQHJldHVybnMge251bWJlcn0gYmVhcmluZ1xuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVGaW5hbEJlYXJpbmcoc3RhcnQsIGVuZCkge1xuICAgIC8vIFN3YXAgc3RhcnQgJiBlbmRcbiAgICB2YXIgYmVhciA9IGJlYXJpbmcoZW5kLCBzdGFydCk7XG4gICAgYmVhciA9IChiZWFyICsgMTgwKSAlIDM2MDtcbiAgICByZXR1cm4gYmVhcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiZWFyaW5nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvYmVhcmluZy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNwaGVyaWNhbChjYXJ0ZXNpYW4pIHtcbiAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4oY2FydGVzaWFuWzJdKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gIHZhciBsYW1iZGEgPSBzcGhlcmljYWxbMF0sIHBoaSA9IHNwaGVyaWNhbFsxXSwgY29zUGhpID0gY29zKHBoaSk7XG4gIHJldHVybiBbY29zUGhpICogY29zKGxhbWJkYSksIGNvc1BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQ3Jvc3MoYSwgYikge1xuICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xufVxuXG4vLyBUT0RPIHJldHVybiBhXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQWRkSW5QbGFjZShhLCBiKSB7XG4gIGFbMF0gKz0gYlswXSwgYVsxXSArPSBiWzFdLCBhWzJdICs9IGJbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5TY2FsZSh2ZWN0b3IsIGspIHtcbiAgcmV0dXJuIFt2ZWN0b3JbMF0gKiBrLCB2ZWN0b3JbMV0gKiBrLCB2ZWN0b3JbMl0gKiBrXTtcbn1cblxuLy8gVE9ETyByZXR1cm4gZFxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoZCkge1xuICB2YXIgbCA9IHNxcnQoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSArIGRbMl0gKiBkWzJdKTtcbiAgZFswXSAvPSBsLCBkWzFdIC89IGwsIGRbMl0gLz0gbDtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2FydGVzaWFuLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbFJhdyhzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBjeCA9IGNvcyh4KSxcbiAgICAgICAgY3kgPSBjb3MoeSksXG4gICAgICAgIGsgPSBzY2FsZShjeCAqIGN5KTtcbiAgICByZXR1cm4gW1xuICAgICAgayAqIGN5ICogc2luKHgpLFxuICAgICAgayAqIHNpbih5KVxuICAgIF07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbEludmVydChhbmdsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB6ID0gc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgYyA9IGFuZ2xlKHopLFxuICAgICAgICBzYyA9IHNpbihjKSxcbiAgICAgICAgY2MgPSBjb3MoYyk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcbiAgICAgIGFzaW4oeiAmJiB5ICogc2MgLyB6KVxuICAgIF07XG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hemltdXRoYWwuanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb29yZEVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuY29vcmRFYWNoO1xudmFyIHBvaW50ID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLnBvaW50O1xuXG4vKipcbiAqIFRha2VzIG9uZSBvciBtb3JlIGZlYXR1cmVzIGFuZCBjYWxjdWxhdGVzIHRoZSBjZW50cm9pZCB1c2luZyB0aGUgbWVhbiBvZiBhbGwgdmVydGljZXMuXG4gKiBUaGlzIGxlc3NlbnMgdGhlIGVmZmVjdCBvZiBzbWFsbCBpc2xhbmRzIGFuZCBhcnRpZmFjdHMgd2hlbiBjYWxjdWxhdGluZyB0aGUgY2VudHJvaWQgb2YgYSBzZXQgb2YgcG9seWdvbnMuXG4gKlxuICogQG5hbWUgY2VudHJvaWRcbiAqIEBwYXJhbSB7R2VvSlNPTn0gZ2VvanNvbiBHZW9KU09OIHRvIGJlIGNlbnRlcmVkXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIGFuIE9iamVjdCB0aGF0IGlzIHVzZWQgYXMgdGhlIHtAbGluayBGZWF0dXJlfSdzIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvaW50Pn0gdGhlIGNlbnRyb2lkIG9mIHRoZSBpbnB1dCBmZWF0dXJlc1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWy04MSwgNDFdLCBbLTg4LCAzNl0sIFstODQsIDMxXSwgWy04MCwgMzNdLCBbLTc3LCAzOV0sIFstODEsIDQxXV1dKTtcbiAqXG4gKiB2YXIgY2VudHJvaWQgPSB0dXJmLmNlbnRyb2lkKHBvbHlnb24pO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5Z29uLCBjZW50cm9pZF1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbiwgcHJvcGVydGllcykge1xuICAgIHZhciB4U3VtID0gMDtcbiAgICB2YXIgeVN1bSA9IDA7XG4gICAgdmFyIGxlbiA9IDA7XG4gICAgY29vcmRFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgICB4U3VtICs9IGNvb3JkWzBdO1xuICAgICAgICB5U3VtICs9IGNvb3JkWzFdO1xuICAgICAgICBsZW4rKztcbiAgICB9LCB0cnVlKTtcbiAgICByZXR1cm4gcG9pbnQoW3hTdW0gLyBsZW4sIHlTdW0gLyBsZW5dLCBwcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9jZW50cm9pZC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGEgPSByZXF1aXJlKCdAdHVyZi9tZXRhJyk7XG52YXIgcmJ1c2ggPSByZXF1aXJlKCdnZW9qc29uLXJidXNoJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBnZXRDb29yZHMgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKS5nZXRDb29yZHM7XG52YXIgbGluZVNlZ21lbnQgPSByZXF1aXJlKCdAdHVyZi9saW5lLXNlZ21lbnQnKTtcbnZhciBwb2ludCA9IGhlbHBlcnMucG9pbnQ7XG52YXIgZmVhdHVyZUVhY2ggPSBtZXRhLmZlYXR1cmVFYWNoO1xudmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbjtcblxuLyoqXG4gKiBUYWtlcyBhbnkgTGluZVN0cmluZyBvciBQb2x5Z29uIEdlb0pTT04gYW5kIHJldHVybnMgdGhlIGludGVyc2VjdGluZyBwb2ludChzKS5cbiAqXG4gKiBAbmFtZSBsaW5lSW50ZXJzZWN0XG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmd8UG9seWdvbnxNdWx0aVBvbHlnb24+fSBsaW5lMSBhbnkgTGluZVN0cmluZyBvciBQb2x5Z29uXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmd8UG9seWdvbnxNdWx0aVBvbHlnb24+fSBsaW5lMiBhbnkgTGluZVN0cmluZyBvciBQb2x5Z29uXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBwb2ludChzKSB0aGF0IGludGVyc2VjdCBib3RoXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUxID0gdHVyZi5saW5lU3RyaW5nKFtbMTI2LCAtMTFdLCBbMTI5LCAtMjFdXSk7XG4gKiB2YXIgbGluZTIgPSB0dXJmLmxpbmVTdHJpbmcoW1sxMjMsIC0xOF0sIFsxMzEsIC0xNF1dKTtcbiAqIHZhciBpbnRlcnNlY3RzID0gdHVyZi5saW5lSW50ZXJzZWN0KGxpbmUxLCBsaW5lMik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2xpbmUxLCBsaW5lMiwgaW50ZXJzZWN0c11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGluZTEsIGxpbmUyKSB7XG4gICAgdmFyIHVuaXF1ZSA9IHt9O1xuICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICAvLyBGaXJzdCwgbm9ybWFsaXplIGdlb21ldHJpZXMgdG8gZmVhdHVyZXNcbiAgICAvLyBUaGVuLCBoYW5kbGUgc2ltcGxlIDItdmVydGV4IHNlZ21lbnRzXG4gICAgaWYgKGxpbmUxLnR5cGUgPT09ICdMaW5lU3RyaW5nJykgbGluZTEgPSBoZWxwZXJzLmZlYXR1cmUobGluZTEpO1xuICAgIGlmIChsaW5lMi50eXBlID09PSAnTGluZVN0cmluZycpIGxpbmUyID0gaGVscGVycy5mZWF0dXJlKGxpbmUyKTtcbiAgICBpZiAobGluZTEudHlwZSA9PT0gJ0ZlYXR1cmUnICYmXG4gICAgICAgIGxpbmUyLnR5cGUgPT09ICdGZWF0dXJlJyAmJlxuICAgICAgICBsaW5lMS5nZW9tZXRyeS50eXBlID09PSAnTGluZVN0cmluZycgJiZcbiAgICAgICAgbGluZTIuZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmVTdHJpbmcnICYmXG4gICAgICAgIGxpbmUxLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICBsaW5lMi5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdmFyIGludGVyc2VjdCA9IGludGVyc2VjdHMobGluZTEsIGxpbmUyKTtcbiAgICAgICAgaWYgKGludGVyc2VjdCkgcmVzdWx0cy5wdXNoKGludGVyc2VjdCk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihyZXN1bHRzKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGVzIGNvbXBsZXggR2VvSlNPTiBHZW9tZXRyaWVzXG4gICAgdmFyIHRyZWUgPSByYnVzaCgpO1xuICAgIHRyZWUubG9hZChsaW5lU2VnbWVudChsaW5lMikpO1xuICAgIGZlYXR1cmVFYWNoKGxpbmVTZWdtZW50KGxpbmUxKSwgZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgZmVhdHVyZUVhY2godHJlZS5zZWFyY2goc2VnbWVudCksIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgdmFyIGludGVyc2VjdCA9IGludGVyc2VjdHMoc2VnbWVudCwgbWF0Y2gpO1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgZHVwbGljYXRlIHBvaW50cyBodHRwczovL2dpdGh1Yi5jb20vVHVyZmpzL3R1cmYvaXNzdWVzLzY4OFxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBnZXRDb29yZHMoaW50ZXJzZWN0KS5qb2luKCcsJyk7XG4gICAgICAgICAgICAgICAgaWYgKCF1bmlxdWVba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWVba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChpbnRlcnNlY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uKHJlc3VsdHMpO1xufTtcblxuLyoqXG4gKiBGaW5kIGEgcG9pbnQgdGhhdCBpbnRlcnNlY3RzIExpbmVTdHJpbmdzIHdpdGggdHdvIGNvb3JkaW5hdGVzIGVhY2hcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBsaW5lMSBHZW9KU09OIExpbmVTdHJpbmcgKE11c3Qgb25seSBjb250YWluIDIgY29vcmRpbmF0ZXMpXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IGxpbmUyIEdlb0pTT04gTGluZVN0cmluZyAoTXVzdCBvbmx5IGNvbnRhaW4gMiBjb29yZGluYXRlcylcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvaW50Pn0gaW50ZXJzZWN0aW5nIEdlb0pTT04gUG9pbnRcbiAqL1xuZnVuY3Rpb24gaW50ZXJzZWN0cyhsaW5lMSwgbGluZTIpIHtcbiAgICB2YXIgY29vcmRzMSA9IGdldENvb3JkcyhsaW5lMSk7XG4gICAgdmFyIGNvb3JkczIgPSBnZXRDb29yZHMobGluZTIpO1xuICAgIGlmIChjb29yZHMxLmxlbmd0aCAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxpbnRlcnNlY3RzPiBsaW5lMSBtdXN0IG9ubHkgY29udGFpbiAyIGNvb3JkaW5hdGVzJyk7XG4gICAgfVxuICAgIGlmIChjb29yZHMyLmxlbmd0aCAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxpbnRlcnNlY3RzPiBsaW5lMiBtdXN0IG9ubHkgY29udGFpbiAyIGNvb3JkaW5hdGVzJyk7XG4gICAgfVxuICAgIHZhciB4MSA9IGNvb3JkczFbMF1bMF07XG4gICAgdmFyIHkxID0gY29vcmRzMVswXVsxXTtcbiAgICB2YXIgeDIgPSBjb29yZHMxWzFdWzBdO1xuICAgIHZhciB5MiA9IGNvb3JkczFbMV1bMV07XG4gICAgdmFyIHgzID0gY29vcmRzMlswXVswXTtcbiAgICB2YXIgeTMgPSBjb29yZHMyWzBdWzFdO1xuICAgIHZhciB4NCA9IGNvb3JkczJbMV1bMF07XG4gICAgdmFyIHk0ID0gY29vcmRzMlsxXVsxXTtcbiAgICB2YXIgZGVub20gPSAoKHk0IC0geTMpICogKHgyIC0geDEpKSAtICgoeDQgLSB4MykgKiAoeTIgLSB5MSkpO1xuICAgIHZhciBudW1lQSA9ICgoeDQgLSB4MykgKiAoeTEgLSB5MykpIC0gKCh5NCAtIHkzKSAqICh4MSAtIHgzKSk7XG4gICAgdmFyIG51bWVCID0gKCh4MiAtIHgxKSAqICh5MSAtIHkzKSkgLSAoKHkyIC0geTEpICogKHgxIC0geDMpKTtcblxuICAgIGlmIChkZW5vbSA9PT0gMCkge1xuICAgICAgICBpZiAobnVtZUEgPT09IDAgJiYgbnVtZUIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB1QSA9IG51bWVBIC8gZGVub207XG4gICAgdmFyIHVCID0gbnVtZUIgLyBkZW5vbTtcblxuICAgIGlmICh1QSA+PSAwICYmIHVBIDw9IDEgJiYgdUIgPj0gMCAmJiB1QiA8PSAxKSB7XG4gICAgICAgIHZhciB4ID0geDEgKyAodUEgKiAoeDIgLSB4MSkpO1xuICAgICAgICB2YXIgeSA9IHkxICsgKHVBICogKHkyIC0geTEpKTtcbiAgICAgICAgcmV0dXJuIHBvaW50KFt4LCB5XSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvbGluZS1pbnRlcnNlY3QvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cbi8qIEdlb2Rlc3kgdG9vbHMgZm9yIGFuIGVsbGlwc29pZGFsIGVhcnRoIG1vZGVsICAgICAgICAgICAgICAgICAgICAgICAoYykgQ2hyaXMgVmVuZXNzIDIwMDUtMjAxNiAgKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNSVQgTGljZW5jZSAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLWNvbnZlcnQtY29vcmRzLmh0bWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9nZW9kZXN5L2RvY3MvbW9kdWxlLWxhdGxvbi1lbGxpcHNvaWRhbC5odG1sICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuaWYgKHR5cGVvZiBtb2R1bGUhPSd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB2YXIgVmVjdG9yM2QgPSByZXF1aXJlKCcuL3ZlY3RvcjNkLmpzJyk7IC8vIOKJoSBpbXBvcnQgVmVjdG9yM2QgZnJvbSAndmVjdG9yM2QuanMnXG5pZiAodHlwZW9mIG1vZHVsZSE9J3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHZhciBEbXMgPSByZXF1aXJlKCcuL2Rtcy5qcycpOyAgICAgICAgICAgLy8g4omhIGltcG9ydCBEbXMgZnJvbSAnZG1zLmpzJ1xuXG5cbi8qKlxuICogTGlicmFyeSBvZiBnZW9kZXN5IGZ1bmN0aW9ucyBmb3Igb3BlcmF0aW9ucyBvbiBhbiBlbGxpcHNvaWRhbCBlYXJ0aCBtb2RlbC5cbiAqXG4gKiBJbmNsdWRlcyBlbGxpcHNvaWQgcGFyYW1ldGVycyBhbmQgZGF0dW1zIGZvciBkaWZmZXJlbnQgY29vcmRpbmF0ZSBzeXN0ZW1zLCBhbmQgbWV0aG9kcyBmb3JcbiAqIGNvbnZlcnRpbmcgYmV0d2VlbiB0aGVtIGFuZCB0byBjYXJ0ZXNpYW4gY29vcmRpbmF0ZXMuXG4gKlxuICogcS52LiBPcmRuYW5jZSBTdXJ2ZXkg4oCYQSBndWlkZSB0byBjb29yZGluYXRlIHN5c3RlbXMgaW4gR3JlYXQgQnJpdGFpbuKAmSBTZWN0aW9uIDZcbiAqIHd3dy5vcmRuYW5jZXN1cnZleS5jby51ay9kb2NzL3N1cHBvcnQvZ3VpZGUtY29vcmRpbmF0ZS1zeXN0ZW1zLWdyZWF0LWJyaXRhaW4ucGRmLlxuICpcbiAqIEBtb2R1bGUgICBsYXRsb24tZWxsaXBzb2lkYWxcbiAqIEByZXF1aXJlcyBkbXNcbiAqL1xuXG5cbi8qKlxuICogQ3JlYXRlcyBsYXQvbG9uIChwb2xhcikgcG9pbnQgd2l0aCBsYXRpdHVkZSAmIGxvbmdpdHVkZSB2YWx1ZXMsIG9uIGEgc3BlY2lmaWVkIGRhdHVtLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9ICAgICAgIGxhdCAtIEdlb2RldGljIGxhdGl0dWRlIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gICAgICAgbG9uIC0gTG9uZ2l0dWRlIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge0xhdExvbi5kYXR1bX0gW2RhdHVtPVdHUzg0XSAtIERhdHVtIHRoaXMgcG9pbnQgaXMgZGVmaW5lZCB3aXRoaW4uXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUxLjQ3NzgsIC0wLjAwMTYsIExhdExvbi5kYXR1bS5XR1M4NCk7XG4gKi9cbmZ1bmN0aW9uIExhdExvbihsYXQsIGxvbiwgZGF0dW0pIHtcbiAgICAvLyBhbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgJ25ldydcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTGF0TG9uKSkgcmV0dXJuIG5ldyBMYXRMb24obGF0LCBsb24sIGRhdHVtKTtcblxuICAgIGlmIChkYXR1bSA9PT0gdW5kZWZpbmVkKSBkYXR1bSA9IExhdExvbi5kYXR1bS5XR1M4NDtcblxuICAgIHRoaXMubGF0ID0gTnVtYmVyKGxhdCk7XG4gICAgdGhpcy5sb24gPSBOdW1iZXIobG9uKTtcbiAgICB0aGlzLmRhdHVtID0gZGF0dW07XG59XG5cblxuLyoqXG4gKiBFbGxpcHNvaWQgcGFyYW1ldGVyczsgbWFqb3IgYXhpcyAoYSksIG1pbm9yIGF4aXMgKGIpLCBhbmQgZmxhdHRlbmluZyAoZikgZm9yIGVhY2ggZWxsaXBzb2lkLlxuICovXG5MYXRMb24uZWxsaXBzb2lkID0ge1xuICAgIFdHUzg0OiAgICAgICAgeyBhOiA2Mzc4MTM3LCAgICAgYjogNjM1Njc1Mi4zMTQyNSwgZjogMS8yOTguMjU3MjIzNTYzIH0sXG4gICAgR1JTODA6ICAgICAgICB7IGE6IDYzNzgxMzcsICAgICBiOiA2MzU2NzUyLjMxNDE0LCBmOiAxLzI5OC4yNTcyMjIxMDEgfSxcbiAgICBBaXJ5MTgzMDogICAgIHsgYTogNjM3NzU2My4zOTYsIGI6IDYzNTYyNTYuOTA5LCAgIGY6IDEvMjk5LjMyNDk2NDYgICB9LFxuICAgIEFpcnlNb2RpZmllZDogeyBhOiA2Mzc3MzQwLjE4OSwgYjogNjM1NjAzNC40NDgsICAgZjogMS8yOTkuMzI0OTY0NiAgIH0sXG4gICAgSW50bDE5MjQ6ICAgICB7IGE6IDYzNzgzODgsICAgICBiOiA2MzU2OTExLjk0NiwgICBmOiAxLzI5NyAgICAgICAgICAgfSxcbiAgICBCZXNzZWwxODQxOiAgIHsgYTogNjM3NzM5Ny4xNTUsIGI6IDYzNTYwNzguOTYzLCAgIGY6IDEvMjk5LjE1MjgxNTM1MSB9LFxufTtcblxuLyoqXG4gKiBEYXR1bXM7IHdpdGggYXNzb2NpYXRlZCBlbGxpcHNvaWQsIGFuZCBIZWxtZXJ0IHRyYW5zZm9ybSBwYXJhbWV0ZXJzIHRvIGNvbnZlcnQgZnJvbSBXR1MgODQgaW50b1xuICogZ2l2ZW4gZGF0dW0uXG4gKlxuICogTW9yZSBhcmUgYXZhaWxhYmxlIGZyb20gZWFydGgtaW5mby5uZ2EubWlsL0dhbmRHL2Nvb3Jkc3lzL2RhdHVtcy9OQVRPX0RULnBkZixcbiAqIHd3dy5maWVsZGVubWFwcy5pbmZvL2Njb252L3dlYi9jY29udl9wYXJhbXMuanMsIGl0cmYuZW5zZy5pZ24uZnIvdHJhbnNfcGFyYS5waHAsXG4gKiB3d3cuZXVyZWYuZXUvc3ltcG9zaWEvMjAxMlBhcmlzLzAzLTAxLUFsdGFtaW1pLnBkZiAoSVRSRjIwMDggLT4gSVRSRnl5LElUUkZ5eSAtPiBFVFJGMjAwMClcbiAqL1xuTGF0TG9uLmRhdHVtID0ge1xuICAgIC8qIGVzbGludCBrZXktc3BhY2luZzogMCwgY29tbWEtZGFuZ2xlOiAwICovXG4gICAgV0dTODQ6IHtcbiAgICAgICAgZWxsaXBzb2lkOiBMYXRMb24uZWxsaXBzb2lkLldHUzg0LFxuICAgICAgICB0cmFuc2Zvcm06IHsgdHg6ICAgIDAuMCwgICAgdHk6ICAgIDAuMCwgICAgIHR6OiAgICAwLjAsICAgIC8vIG1cbiAgICAgICAgICAgICAgICAgICAgIHJ4OiAgICAwLjAsICAgIHJ5OiAgICAwLjAsICAgICByejogICAgMC4wLCAgICAvLyBzZWNcbiAgICAgICAgICAgICAgICAgICAgICBzOiAgICAwLjAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcG1cbiAgICB9LFxuICAgIElUUkY5MDogeyAvLyBmdHA6Ly9pdHJmLmVuc2cuaWduLmZyL3B1Yi9pdHJmL1dHUzg0LlRYVFxuICAgICAgICBlbGxpcHNvaWQ6IExhdExvbi5lbGxpcHNvaWQuR1JTODAsXG4gICAgICAgIHRyYW5zZm9ybTogeyB0eDogICAtMC4wNjAsICB0eTogICAgMC41MTcsICAgdHo6ICAgIDAuMjIzLCAgLy8gbVxuICAgICAgICAgICAgICAgICAgICAgcng6ICAgLTAuMDE4Mywgcnk6ICAgIDAuMDAwMywgIHJ6OiAgIC0wLjAwNzAsIC8vIHNlY1xuICAgICAgICAgICAgICAgICAgICAgIHM6ICAgIDAuMDExIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBwbVxuICAgIH0sXG4gICAgTkFEODM6IHsgLy8gKDIwMDkpOyBmdW5jdGlvbmFsbHkg4omhIFdHUzg0IC0gd3d3LnV2bS5lZHUvZ2l2L3Jlc291cmNlcy9XR1M4NF9OQUQ4My5wZGZcbiAgICAgICAgZWxsaXBzb2lkOiBMYXRMb24uZWxsaXBzb2lkLkdSUzgwLFxuICAgICAgICB0cmFuc2Zvcm06IHsgdHg6ICAgIDEuMDA0LCAgdHk6ICAgLTEuOTEwLCAgIHR6OiAgIC0wLjUxNSwgIC8vIG1cbiAgICAgICAgICAgICAgICAgICAgIHJ4OiAgICAwLjAyNjcsIHJ5OiAgICAwLjAwMDM0LCByejogICAgMC4wMTEsICAvLyBzZWNcbiAgICAgICAgICAgICAgICAgICAgICBzOiAgIC0wLjAwMTUgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcG1cbiAgICB9LCAvLyBub3RlOiBpZiB5b3UgKnJlYWxseSogbmVlZCB0byBjb252ZXJ0IFdHUzg0PC0+TkFEODMsIHlvdSBuZWVkIG1vcmUga25vd2xlZGdlIHRoYW4gdGhpcyFcbiAgICBPU0dCMzY6IHsgLy8gd3d3Lm9yZG5hbmNlc3VydmV5LmNvLnVrL2RvY3Mvc3VwcG9ydC9ndWlkZS1jb29yZGluYXRlLXN5c3RlbXMtZ3JlYXQtYnJpdGFpbi5wZGZcbiAgICAgICAgZWxsaXBzb2lkOiBMYXRMb24uZWxsaXBzb2lkLkFpcnkxODMwLFxuICAgICAgICB0cmFuc2Zvcm06IHsgdHg6IC00NDYuNDQ4LCAgdHk6ICAxMjUuMTU3LCAgIHR6OiAtNTQyLjA2MCwgIC8vIG1cbiAgICAgICAgICAgICAgICAgICAgIHJ4OiAgIC0wLjE1MDIsIHJ5OiAgIC0wLjI0NzAsICByejogICAtMC44NDIxLCAvLyBzZWNcbiAgICAgICAgICAgICAgICAgICAgICBzOiAgIDIwLjQ4OTQgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcG1cbiAgICB9LFxuICAgIEVENTA6IHsgLy8gd3d3Lmdvdi51ay9ndWlkYW5jZS9vaWwtYW5kLWdhcy1wZXRyb2xldW0tb3BlcmF0aW9ucy1ub3RpY2VzI3Bvbi00XG4gICAgICAgIGVsbGlwc29pZDogTGF0TG9uLmVsbGlwc29pZC5JbnRsMTkyNCxcbiAgICAgICAgdHJhbnNmb3JtOiB7IHR4OiAgIDg5LjUsICAgIHR5OiAgIDkzLjgsICAgICB0ejogIDEyMy4xLCAgICAvLyBtXG4gICAgICAgICAgICAgICAgICAgICByeDogICAgMC4wLCAgICByeTogICAgMC4wLCAgICAgcno6ICAgIDAuMTU2LCAgLy8gc2VjXG4gICAgICAgICAgICAgICAgICAgICAgczogICAtMS4yIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHBtXG4gICAgfSxcbiAgICBJcmwxOTc1OiB7IC8vIG9zaS5pZS9PU0kvbWVkaWEvT1NJL0NvbnRlbnQvUHVibGljYXRpb25zL3RyYW5zZm9ybWF0aW9uc19ib29rbGV0LnBkZlxuICAgICAgICBlbGxpcHNvaWQ6IExhdExvbi5lbGxpcHNvaWQuQWlyeU1vZGlmaWVkLFxuICAgICAgICB0cmFuc2Zvcm06IHsgdHg6IC00ODIuNTMwLCAgdHk6ICAxMzAuNTk2LCAgIHR6OiAtNTY0LjU1NywgIC8vIG1cbiAgICAgICAgICAgICAgICAgICAgIHJ4OiAgIC0xLjA0MiwgIHJ5OiAgIC0wLjIxNCwgICByejogICAtMC42MzEsICAvLyBzZWNcbiAgICAgICAgICAgICAgICAgICAgICBzOiAgIC04LjE1MCB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcG1cbiAgICB9LCAvLyBub3RlOiBtYW55IHNvdXJjZXMgaGF2ZSBvcHBvc2l0ZSBzaWduIHRvIHJvdGF0aW9ucyAtIHRvIGJlIGNoZWNrZWQhXG4gICAgVG9reW9KYXBhbjogeyAvLyB3d3cuZ2VvY2FjaGluZ3Rvb2xib3guY29tP3BhZ2U9ZGF0dW1FbGxpcHNvaWREZXRhaWxzXG4gICAgICAgIGVsbGlwc29pZDogTGF0TG9uLmVsbGlwc29pZC5CZXNzZWwxODQxLFxuICAgICAgICB0cmFuc2Zvcm06IHsgdHg6ICAxNDgsICAgICAgdHk6IC01MDcsICAgICAgIHR6OiAtNjg1LCAgICAgIC8vIG1cbiAgICAgICAgICAgICAgICAgICAgIHJ4OiAgICAwLCAgICAgIHJ5OiAgICAwLCAgICAgICByejogICAgMCwgICAgICAvLyBzZWNcbiAgICAgICAgICAgICAgICAgICAgICBzOiAgICAwIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcG1cbiAgICB9LFxufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIOKAmHRoaXPigJkgbGF0L2xvbiBjb29yZGluYXRlIHRvIG5ldyBjb29yZGluYXRlIHN5c3RlbS5cbiAqXG4gKiBAcGFyYW0gICB7TGF0TG9uLmRhdHVtfSB0b0RhdHVtIC0gRGF0dW0gdGhpcyBjb29yZGluYXRlIGlzIHRvIGJlIGNvbnZlcnRlZCB0by5cbiAqIEByZXR1cm5zIHtMYXRMb259IFRoaXMgcG9pbnQgY29udmVydGVkIHRvIG5ldyBkYXR1bS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIHZhciBwV0dTODQgPSBuZXcgTGF0TG9uKDUxLjQ3NzgsIC0wLjAwMTYsIExhdExvbi5kYXR1bS5XR1M4NCk7XG4gKiAgICAgdmFyIHBPU0dCID0gcFdHUzg0LmNvbnZlcnREYXR1bShMYXRMb24uZGF0dW0uT1NHQjM2KTsgLy8gNTEuNDc3M8KwTiwgMDAwLjAwMDDCsEVcbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5jb252ZXJ0RGF0dW0gPSBmdW5jdGlvbih0b0RhdHVtKSB7XG4gICAgdmFyIG9sZExhdExvbiA9IHRoaXM7XG4gICAgdmFyIHRyYW5zZm9ybTtcblxuICAgIGlmIChvbGRMYXRMb24uZGF0dW0gPT0gTGF0TG9uLmRhdHVtLldHUzg0KSB7XG4gICAgICAgIC8vIGNvbnZlcnRpbmcgZnJvbSBXR1MgODRcbiAgICAgICAgdHJhbnNmb3JtID0gdG9EYXR1bS50cmFuc2Zvcm07XG4gICAgfVxuICAgIGlmICh0b0RhdHVtID09IExhdExvbi5kYXR1bS5XR1M4NCkge1xuICAgICAgICAvLyBjb252ZXJ0aW5nIHRvIFdHUyA4NDsgdXNlIGludmVyc2UgdHJhbnNmb3JtIChkb24ndCBvdmVyd3JpdGUgb3JpZ2luYWwhKVxuICAgICAgICB0cmFuc2Zvcm0gPSB7fTtcbiAgICAgICAgZm9yICh2YXIgcGFyYW0gaW4gb2xkTGF0TG9uLmRhdHVtLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgaWYgKG9sZExhdExvbi5kYXR1bS50cmFuc2Zvcm0uaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtW3BhcmFtXSA9IC1vbGRMYXRMb24uZGF0dW0udHJhbnNmb3JtW3BhcmFtXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHJhbnNmb3JtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gbmVpdGhlciB0aGlzLmRhdHVtIG5vciB0b0RhdHVtIGFyZSBXR1M4NDogY29udmVydCB0aGlzIHRvIFdHUzg0IGZpcnN0XG4gICAgICAgIG9sZExhdExvbiA9IHRoaXMuY29udmVydERhdHVtKExhdExvbi5kYXR1bS5XR1M4NCk7XG4gICAgICAgIHRyYW5zZm9ybSA9IHRvRGF0dW0udHJhbnNmb3JtO1xuICAgIH1cblxuICAgIHZhciBvbGRDYXJ0ZXNpYW4gPSBvbGRMYXRMb24udG9DYXJ0ZXNpYW4oKTsgICAgICAgICAgICAgICAgLy8gY29udmVydCBwb2xhciB0byBjYXJ0ZXNpYW4uLi5cbiAgICB2YXIgbmV3Q2FydGVzaWFuID0gb2xkQ2FydGVzaWFuLmFwcGx5VHJhbnNmb3JtKHRyYW5zZm9ybSk7IC8vIC4uLmFwcGx5IHRyYW5zZm9ybS4uLlxuICAgIHZhciBuZXdMYXRMb24gPSBuZXdDYXJ0ZXNpYW4udG9MYXRMb25FKHRvRGF0dW0pOyAgICAgICAgICAgLy8gLi4uYW5kIGNvbnZlcnQgY2FydGVzaWFuIHRvIHBvbGFyXG5cbiAgICByZXR1cm4gbmV3TGF0TG9uO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIOKAmHRoaXPigJkgcG9pbnQgZnJvbSAoZ2VvZGV0aWMpIGxhdGl0dWRlL2xvbmdpdHVkZSBjb29yZGluYXRlcyB0byAoZ2VvY2VudHJpYykgY2FydGVzaWFuXG4gKiAoeC95L3opIGNvb3JkaW5hdGVzLlxuICpcbiAqIEByZXR1cm5zIHtWZWN0b3IzZH0gVmVjdG9yIHBvaW50aW5nIHRvIGxhdC9sb24gcG9pbnQsIHdpdGggeCwgeSwgeiBpbiBtZXRyZXMgZnJvbSBlYXJ0aCBjZW50cmUuXG4gKi9cbkxhdExvbi5wcm90b3R5cGUudG9DYXJ0ZXNpYW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgz4YgPSB0aGlzLmxhdC50b1JhZGlhbnMoKSwgzrsgPSB0aGlzLmxvbi50b1JhZGlhbnMoKTtcbiAgICB2YXIgaCA9IDA7IC8vIGhlaWdodCBhYm92ZSBlbGxpcHNvaWQgLSBub3QgY3VycmVudGx5IHVzZWRcbiAgICB2YXIgYSA9IHRoaXMuZGF0dW0uZWxsaXBzb2lkLmEsIGYgPSB0aGlzLmRhdHVtLmVsbGlwc29pZC5mO1xuXG4gICAgdmFyIHNpbs+GID0gTWF0aC5zaW4oz4YpLCBjb3PPhiA9IE1hdGguY29zKM+GKTtcbiAgICB2YXIgc2luzrsgPSBNYXRoLnNpbijOuyksIGNvc867ID0gTWF0aC5jb3MozrspO1xuXG4gICAgdmFyIGVTcSA9IDIqZiAtIGYqZjsgICAgICAgICAgICAgICAgICAgICAgLy8gMXN0IGVjY2VudHJpY2l0eSBzcXVhcmVkIOKJoSAoYcKyLWLCsikvYcKyXG4gICAgdmFyIM69ID0gYSAvIE1hdGguc3FydCgxIC0gZVNxKnNpbs+GKnNpbs+GKTsgLy8gcmFkaXVzIG9mIGN1cnZhdHVyZSBpbiBwcmltZSB2ZXJ0aWNhbFxuXG4gICAgdmFyIHggPSAozr0raCkgKiBjb3PPhiAqIGNvc867O1xuICAgIHZhciB5ID0gKM69K2gpICogY29zz4YgKiBzaW7OuztcbiAgICB2YXIgeiA9ICjOvSooMS1lU3EpK2gpICogc2luz4Y7XG5cbiAgICB2YXIgcG9pbnQgPSBuZXcgVmVjdG9yM2QoeCwgeSwgeik7XG5cbiAgICByZXR1cm4gcG9pbnQ7XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMg4oCYdGhpc+KAmSAoZ2VvY2VudHJpYykgY2FydGVzaWFuICh4L3kveikgcG9pbnQgdG8gKGVsbGlwc29pZGFsIGdlb2RldGljKSBsYXRpdHVkZS9sb25naXR1ZGVcbiAqIGNvb3JkaW5hdGVzIG9uIHNwZWNpZmllZCBkYXR1bS5cbiAqXG4gKiBVc2VzIEJvd3JpbmfigJlzICgxOTg1KSBmb3JtdWxhdGlvbiBmb3IgzrxtIHByZWNpc2lvbiBpbiBjb25jaXNlIGZvcm0uXG4gKlxuICogQHBhcmFtIHtMYXRMb24uZGF0dW0udHJhbnNmb3JtfSBkYXR1bSAtIERhdHVtIHRvIHVzZSB3aGVuIGNvbnZlcnRpbmcgcG9pbnQuXG4gKi9cblZlY3RvcjNkLnByb3RvdHlwZS50b0xhdExvbkUgPSBmdW5jdGlvbihkYXR1bSkge1xuICAgIHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuICAgIHZhciBhID0gZGF0dW0uZWxsaXBzb2lkLmEsIGIgPSBkYXR1bS5lbGxpcHNvaWQuYiwgZiA9IGRhdHVtLmVsbGlwc29pZC5mO1xuXG4gICAgdmFyIGUyID0gMipmIC0gZipmOyAgIC8vIDFzdCBlY2NlbnRyaWNpdHkgc3F1YXJlZCDiiaEgKGHCsi1iwrIpL2HCslxuICAgIHZhciDOtTIgPSBlMiAvICgxLWUyKTsgLy8gMm5kIGVjY2VudHJpY2l0eSBzcXVhcmVkIOKJoSAoYcKyLWLCsikvYsKyXG4gICAgdmFyIHAgPSBNYXRoLnNxcnQoeCp4ICsgeSp5KTsgLy8gZGlzdGFuY2UgZnJvbSBtaW5vciBheGlzXG4gICAgdmFyIFIgPSBNYXRoLnNxcnQocCpwICsgeip6KTsgLy8gcG9sYXIgcmFkaXVzXG5cbiAgICAvLyBwYXJhbWV0cmljIGxhdGl0dWRlIChCb3dyaW5nIGVxbiAxNywgcmVwbGFjaW5nIHRhbs6yID0gesK3YSAvIHDCt2IpXG4gICAgdmFyIHRhbs6yID0gKGIqeikvKGEqcCkgKiAoMSvOtTIqYi9SKTtcbiAgICB2YXIgc2luzrIgPSB0YW7OsiAvIE1hdGguc3FydCgxK3Rhbs6yKnRhbs6yKTtcbiAgICB2YXIgY29zzrIgPSBzaW7OsiAvIHRhbs6yO1xuXG4gICAgLy8gZ2VvZGV0aWMgbGF0aXR1ZGUgKEJvd3JpbmcgZXFuIDE4OiB0YW7PhiA9IHorzrXCsmJzaW7Cs86yIC8gcOKIkmXCsmNvc8KzzrIpXG4gICAgdmFyIM+GID0gaXNOYU4oY29zzrIpID8gMCA6IE1hdGguYXRhbjIoeiArIM61MipiKnNpbs6yKnNpbs6yKnNpbs6yLCBwIC0gZTIqYSpjb3POsipjb3POsipjb3POsik7XG5cbiAgICAvLyBsb25naXR1ZGVcbiAgICB2YXIgzrsgPSBNYXRoLmF0YW4yKHksIHgpO1xuXG4gICAgLy8gaGVpZ2h0IGFib3ZlIGVsbGlwc29pZCAoQm93cmluZyBlcW4gNykgW25vdCBjdXJyZW50bHkgdXNlZF1cbiAgICB2YXIgc2luz4YgPSBNYXRoLnNpbijPhiksIGNvc8+GID0gTWF0aC5jb3Moz4YpO1xuICAgIHZhciDOvSA9IGEvTWF0aC5zcXJ0KDEtZTIqc2luz4Yqc2luz4YpOyAvLyBsZW5ndGggb2YgdGhlIG5vcm1hbCB0ZXJtaW5hdGVkIGJ5IHRoZSBtaW5vciBheGlzXG4gICAgdmFyIGggPSBwKmNvc8+GICsgeipzaW7PhiAtIChhKmEvzr0pO1xuXG4gICAgdmFyIHBvaW50ID0gbmV3IExhdExvbijPhi50b0RlZ3JlZXMoKSwgzrsudG9EZWdyZWVzKCksIGRhdHVtKTtcblxuICAgIHJldHVybiBwb2ludDtcbn07XG5cbi8qKlxuICogQXBwbGllcyBIZWxtZXJ0IHRyYW5zZm9ybSB0byDigJh0aGlz4oCZIHBvaW50IHVzaW5nIHRyYW5zZm9ybSBwYXJhbWV0ZXJzIHQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TGF0TG9uLmRhdHVtLnRyYW5zZm9ybX0gdCAtIFRyYW5zZm9ybSB0byBhcHBseSB0byB0aGlzIHBvaW50LlxuICovXG5WZWN0b3IzZC5wcm90b3R5cGUuYXBwbHlUcmFuc2Zvcm0gPSBmdW5jdGlvbih0KSAgIHtcbiAgICB2YXIgeDEgPSB0aGlzLngsIHkxID0gdGhpcy55LCB6MSA9IHRoaXMuejtcblxuICAgIHZhciB0eCA9IHQudHgsIHR5ID0gdC50eSwgdHogPSB0LnR6O1xuICAgIHZhciByeCA9ICh0LnJ4LzM2MDApLnRvUmFkaWFucygpOyAvLyBub3JtYWxpc2Ugc2Vjb25kcyB0byByYWRpYW5zXG4gICAgdmFyIHJ5ID0gKHQucnkvMzYwMCkudG9SYWRpYW5zKCk7IC8vIG5vcm1hbGlzZSBzZWNvbmRzIHRvIHJhZGlhbnNcbiAgICB2YXIgcnogPSAodC5yei8zNjAwKS50b1JhZGlhbnMoKTsgLy8gbm9ybWFsaXNlIHNlY29uZHMgdG8gcmFkaWFuc1xuICAgIHZhciBzMSA9IHQucy8xZTYgKyAxOyAgICAgICAgICAgICAvLyBub3JtYWxpc2UgcHBtIHRvIChzKzEpXG5cbiAgICAvLyBhcHBseSB0cmFuc2Zvcm1cbiAgICB2YXIgeDIgPSB0eCArIHgxKnMxIC0geTEqcnogKyB6MSpyeTtcbiAgICB2YXIgeTIgPSB0eSArIHgxKnJ6ICsgeTEqczEgLSB6MSpyeDtcbiAgICB2YXIgejIgPSB0eiAtIHgxKnJ5ICsgeTEqcnggKyB6MSpzMTtcblxuICAgIHZhciBwb2ludCA9IG5ldyBWZWN0b3IzZCh4MiwgeTIsIHoyKTtcblxuICAgIHJldHVybiBwb2ludDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIOKAmHRoaXPigJkgcG9pbnQsIGZvcm1hdHRlZCBhcyBkZWdyZWVzLCBkZWdyZWVzK21pbnV0ZXMsIG9yXG4gKiBkZWdyZWVzK21pbnV0ZXMrc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBbZm9ybWF0PWRtc10gLSBGb3JtYXQgcG9pbnQgYXMgJ2QnLCAnZG0nLCAnZG1zJy5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtkcD0wfDJ8NF0gLSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gdXNlIC0gZGVmYXVsdCAwIGZvciBkbXMsIDIgZm9yIGRtLCA0IGZvciBkLlxuICogQHJldHVybnMge3N0cmluZ30gQ29tbWEtc2VwYXJhdGVkIGxhdGl0dWRlL2xvbmdpdHVkZS5cbiAqL1xuTGF0TG9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKGZvcm1hdCwgZHApIHtcbiAgICByZXR1cm4gRG1zLnRvTGF0KHRoaXMubGF0LCBmb3JtYXQsIGRwKSArICcsICcgKyBEbXMudG9Mb24odGhpcy5sb24sIGZvcm1hdCwgZHApO1xufTtcblxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5cbi8qKiBFeHRlbmQgTnVtYmVyIG9iamVjdCB3aXRoIG1ldGhvZCB0byBjb252ZXJ0IG51bWVyaWMgZGVncmVlcyB0byByYWRpYW5zICovXG5pZiAoTnVtYmVyLnByb3RvdHlwZS50b1JhZGlhbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIE51bWJlci5wcm90b3R5cGUudG9SYWRpYW5zID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzICogTWF0aC5QSSAvIDE4MDsgfTtcbn1cblxuLyoqIEV4dGVuZCBOdW1iZXIgb2JqZWN0IHdpdGggbWV0aG9kIHRvIGNvbnZlcnQgcmFkaWFucyB0byBudW1lcmljIChzaWduZWQpIGRlZ3JlZXMgKi9cbmlmIChOdW1iZXIucHJvdG90eXBlLnRvRGVncmVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgTnVtYmVyLnByb3RvdHlwZS50b0RlZ3JlZXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgKiAxODAgLyBNYXRoLlBJOyB9O1xufVxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBMYXRMb24sIG1vZHVsZS5leHBvcnRzLlZlY3RvcjNkID0gVmVjdG9yM2Q7IC8vIOKJoSBleHBvcnQgeyBMYXRMb24gYXMgZGVmYXVsdCwgVmVjdG9yM2QgfVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2VvZGVzeS9sYXRsb24tZWxsaXBzb2lkYWwuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBqc3RzID0gcmVxdWlyZSgnanN0cycpO1xuXG4vKipcbiAqIFRha2VzIHR3byBvciBtb3JlIHtAbGluayBQb2x5Z29ufHBvbHlnb25zfSBhbmQgcmV0dXJucyBhIGNvbWJpbmVkIHBvbHlnb24uIElmIHRoZSBpbnB1dCBwb2x5Z29ucyBhcmUgbm90IGNvbnRpZ3VvdXMsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHtAbGluayBNdWx0aVBvbHlnb259IGZlYXR1cmUuXG4gKlxuICogQG5hbWUgdW5pb25cbiAqIEBwYXJhbSB7Li4uRmVhdHVyZTxQb2x5Z29uPn0gQSBwb2x5Z29uIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlPChQb2x5Z29ufE11bHRpUG9seWdvbik+fSBhIGNvbWJpbmVkIHtAbGluayBQb2x5Z29ufSBvciB7QGxpbmsgTXVsdGlQb2x5Z29ufSBmZWF0dXJlXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvbHkxID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgICAgWy04Mi41NzQ3ODcsIDM1LjU5NDA4N10sXG4gKiAgICAgWy04Mi41NzQ3ODcsIDM1LjYxNTU4MV0sXG4gKiAgICAgWy04Mi41NDUyNjEsIDM1LjYxNTU4MV0sXG4gKiAgICAgWy04Mi41NDUyNjEsIDM1LjU5NDA4N10sXG4gKiAgICAgWy04Mi41NzQ3ODcsIDM1LjU5NDA4N11cbiAqIF1dLCB7XCJmaWxsXCI6IFwiIzBmMFwifSk7XG4gKiB2YXIgcG9seTIgPSB0dXJmLnBvbHlnb24oW1tcbiAqICAgICBbLTgyLjU2MDAyNCwgMzUuNTg1MTUzXSxcbiAqICAgICBbLTgyLjU2MDAyNCwgMzUuNjAyNjAyXSxcbiAqICAgICBbLTgyLjUyOTY0LCAzNS42MDI2MDJdLFxuICogICAgIFstODIuNTI5NjQsIDM1LjU4NTE1M10sXG4gKiAgICAgWy04Mi41NjAwMjQsIDM1LjU4NTE1M11cbiAqIF1dLCB7XCJmaWxsXCI6IFwiIzAwZlwifSk7XG4gKlxuICogdmFyIHVuaW9uID0gdHVyZi51bmlvbihwb2x5MSwgcG9seTIpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5MSwgcG9seTIsIHVuaW9uXTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBqc3RzLmlvLkdlb0pTT05SZWFkZXIoKTtcbiAgICB2YXIgcmVzdWx0ID0gcmVhZGVyLnJlYWQoSlNPTi5zdHJpbmdpZnkoYXJndW1lbnRzWzBdLmdlb21ldHJ5KSk7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudW5pb24ocmVhZGVyLnJlYWQoSlNPTi5zdHJpbmdpZnkoYXJndW1lbnRzW2ldLmdlb21ldHJ5KSkpO1xuICAgIH1cblxuICAgIHZhciB3cml0ZXIgPSBuZXcganN0cy5pby5HZW9KU09OV3JpdGVyKCk7XG4gICAgcmVzdWx0ID0gd3JpdGVyLndyaXRlKHJlc3VsdCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIGdlb21ldHJ5OiByZXN1bHQsXG4gICAgICAgIHByb3BlcnRpZXM6IGFyZ3VtZW50c1swXS5wcm9wZXJ0aWVzXG4gICAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi91bmlvbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gSlNUUy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iam9ybmhhcnJ0ZWxsL2pzdHNcbi8vIExpY2Vuc2VzOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jqb3JuaGFycnRlbGwvanN0cy9ibG9iL21hc3Rlci9MSUNFTlNFX0VETHYxLnR4dFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jqb3JuaGFycnRlbGwvanN0cy9ibG9iL21hc3Rlci9MSUNFTlNFX0VQTHYxLnR4dFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jqb3JuaGFycnRlbGwvanN0cy9ibG9iL21hc3Rlci9MSUNFTlNFX0xJQ0VOU0VfRVM2X0NPTExFQ1RJT05TLnR4dFxuIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/ZShleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sZSk6ZSh0LmpzdHM9dC5qc3RzfHx7fSl9KHRoaXMsZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZSh0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pfWZ1bmN0aW9uIG4oKXt9ZnVuY3Rpb24gaSgpe31mdW5jdGlvbiByKCl7fWZ1bmN0aW9uIHMoKXt9ZnVuY3Rpb24gbygpe31mdW5jdGlvbiBhKCl7fWZ1bmN0aW9uIHUoKXt9ZnVuY3Rpb24gbCh0KXt0aGlzLm5hbWU9XCJSdW50aW1lRXhjZXB0aW9uXCIsdGhpcy5tZXNzYWdlPXQsdGhpcy5zdGFjaz0obmV3IEVycm9yKS5zdGFjayxFcnJvci5jYWxsKHRoaXMsdCl9ZnVuY3Rpb24gaCh0LGUpe3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXR9ZnVuY3Rpb24gYygpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKWwuY2FsbCh0aGlzKTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07bC5jYWxsKHRoaXMsdCl9fWZ1bmN0aW9uIGYoKXt9ZnVuY3Rpb24gZygpe2lmKHRoaXMueD1udWxsLHRoaXMueT1udWxsLHRoaXMuej1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKWcuY2FsbCh0aGlzLDAsMCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO2cuY2FsbCh0aGlzLHQueCx0LnksdC56KX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07Zy5jYWxsKHRoaXMsZSxuLGcuTlVMTF9PUkRJTkFURSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdLHM9YXJndW1lbnRzWzJdO3RoaXMueD1pLHRoaXMueT1yLHRoaXMuej1zfX1mdW5jdGlvbiBkKCl7aWYodGhpcy5kaW1lbnNpb25zVG9UZXN0PTIsMD09PWFyZ3VtZW50cy5sZW5ndGgpZC5jYWxsKHRoaXMsMik7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO2lmKDIhPT10JiYzIT09dCl0aHJvdyBuZXcgaShcIm9ubHkgMiBvciAzIGRpbWVuc2lvbnMgbWF5IGJlIHNwZWNpZmllZFwiKTt0aGlzLmRpbWVuc2lvbnNUb1Rlc3Q9dH19ZnVuY3Rpb24gcCgpe31mdW5jdGlvbiB2KCl7fWZ1bmN0aW9uIG0odCl7dGhpcy5tZXNzYWdlPXR8fFwiXCJ9ZnVuY3Rpb24geSgpe31mdW5jdGlvbiB4KHQpe3RoaXMubWVzc2FnZT10fHxcIlwifWZ1bmN0aW9uIEUodCl7dGhpcy5tZXNzYWdlPXR8fFwiXCJ9ZnVuY3Rpb24gSSgpe3RoaXMuYXJyYXlfPVtdLGFyZ3VtZW50c1swXWluc3RhbmNlb2YgdiYmdGhpcy5hZGRBbGwoYXJndW1lbnRzWzBdKX1mdW5jdGlvbiBOKCl7aWYoSS5hcHBseSh0aGlzKSwwPT09YXJndW1lbnRzLmxlbmd0aCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZW5zdXJlQ2FwYWNpdHkodC5sZW5ndGgpLHRoaXMuYWRkKHQsITApfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0aGlzLmVuc3VyZUNhcGFjaXR5KGUubGVuZ3RoKSx0aGlzLmFkZChlLG4pfX1mdW5jdGlvbiBDKCl7aWYodGhpcy5taW54PW51bGwsdGhpcy5tYXh4PW51bGwsdGhpcy5taW55PW51bGwsdGhpcy5tYXh5PW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpdGhpcy5pbml0KCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5pbml0KHQueCx0LngsdC55LHQueSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEMpe3ZhciBlPWFyZ3VtZW50c1swXTt0aGlzLmluaXQoZSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTt0aGlzLmluaXQobi54LGkueCxuLnksaS55KX1lbHNlIGlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl0sYT1hcmd1bWVudHNbM107dGhpcy5pbml0KHIscyxvLGEpfX1mdW5jdGlvbiBTKCl7fWZ1bmN0aW9uIHcoKXtTLmNhbGwodGhpcyxcIlByb2plY3RpdmUgcG9pbnQgbm90IHJlcHJlc2VudGFibGUgb24gdGhlIENhcnRlc2lhbiBwbGFuZS5cIil9ZnVuY3Rpb24gTCgpe31mdW5jdGlvbiBSKHQsZSl7cmV0dXJuIHQuaW50ZXJmYWNlc18mJnQuaW50ZXJmYWNlc18oKS5pbmRleE9mKGUpPi0xfWZ1bmN0aW9uIFQoKXt9ZnVuY3Rpb24gUCh0KXt0aGlzLnN0cj10fWZ1bmN0aW9uIGIodCl7dGhpcy52YWx1ZT10fWZ1bmN0aW9uIE8oKXt9ZnVuY3Rpb24gXygpe2lmKHRoaXMuaGk9MCx0aGlzLmxvPTAsMD09PWFyZ3VtZW50cy5sZW5ndGgpdGhpcy5pbml0KDApO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmluaXQodCl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIF8pe3ZhciBlPWFyZ3VtZW50c1swXTt0aGlzLmluaXQoZSl9ZWxzZSBpZihcInN0cmluZ1wiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgbj1hcmd1bWVudHNbMF07Xy5jYWxsKHRoaXMsXy5wYXJzZShuKSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXTt0aGlzLmluaXQoaSxyKX19ZnVuY3Rpb24gTSgpe31mdW5jdGlvbiBEKCl7fWZ1bmN0aW9uIEEoKXt9ZnVuY3Rpb24gRigpe2lmKHRoaXMueD1udWxsLHRoaXMueT1udWxsLHRoaXMudz1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKXRoaXMueD0wLHRoaXMueT0wLHRoaXMudz0xO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLng9dC54LHRoaXMueT10LnksdGhpcy53PTF9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSYmXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMueD1lLHRoaXMueT1uLHRoaXMudz0xfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBGJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIEYpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXTt0aGlzLng9aS55KnIudy1yLnkqaS53LHRoaXMueT1yLngqaS53LWkueCpyLncsdGhpcy53PWkueCpyLnktci54KmkueX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBnKXt2YXIgcz1hcmd1bWVudHNbMF0sbz1hcmd1bWVudHNbMV07dGhpcy54PXMueS1vLnksdGhpcy55PW8ueC1zLngsdGhpcy53PXMueCpvLnktby54KnMueX19ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGE9YXJndW1lbnRzWzBdLHU9YXJndW1lbnRzWzFdLGw9YXJndW1lbnRzWzJdO3RoaXMueD1hLHRoaXMueT11LHRoaXMudz1sfWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBoPWFyZ3VtZW50c1swXSxjPWFyZ3VtZW50c1sxXSxmPWFyZ3VtZW50c1syXSxkPWFyZ3VtZW50c1szXSxwPWgueS1jLnksdj1jLngtaC54LG09aC54KmMueS1jLngqaC55LHk9Zi55LWQueSx4PWQueC1mLngsRT1mLngqZC55LWQueCpmLnk7dGhpcy54PXYqRS14Km0sdGhpcy55PXkqbS1wKkUsdGhpcy53PXAqeC15KnZ9fWZ1bmN0aW9uIEcoKXt9ZnVuY3Rpb24gcSgpe31mdW5jdGlvbiBCKCl7dGhpcy5lbnZlbG9wZT1udWxsLHRoaXMuZmFjdG9yeT1udWxsLHRoaXMuU1JJRD1udWxsLHRoaXMudXNlckRhdGE9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5mYWN0b3J5PXQsdGhpcy5TUklEPXQuZ2V0U1JJRCgpfWZ1bmN0aW9uIHooKXt9ZnVuY3Rpb24gVigpe31mdW5jdGlvbiBrKCl7fWZ1bmN0aW9uIFkoKXt9ZnVuY3Rpb24gVSgpe31mdW5jdGlvbiBYKCl7fWZ1bmN0aW9uIEgoKXt9ZnVuY3Rpb24gVygpe31mdW5jdGlvbiBqKCl7fWZ1bmN0aW9uIEsoKXt9ZnVuY3Rpb24gWigpe31mdW5jdGlvbiBRKCl7fWZ1bmN0aW9uIEooKXt0aGlzLmFycmF5Xz1bXSxhcmd1bWVudHNbMF1pbnN0YW5jZW9mIHYmJnRoaXMuYWRkQWxsKGFyZ3VtZW50c1swXSl9ZnVuY3Rpb24gJCh0KXtyZXR1cm4gbnVsbD09dD8kczp0LmNvbG9yfWZ1bmN0aW9uIHR0KHQpe3JldHVybiBudWxsPT10P251bGw6dC5wYXJlbnR9ZnVuY3Rpb24gZXQodCxlKXtudWxsIT09dCYmKHQuY29sb3I9ZSl9ZnVuY3Rpb24gbnQodCl7cmV0dXJuIG51bGw9PXQ/bnVsbDp0LmxlZnR9ZnVuY3Rpb24gaXQodCl7cmV0dXJuIG51bGw9PXQ/bnVsbDp0LnJpZ2h0fWZ1bmN0aW9uIHJ0KCl7dGhpcy5yb290Xz1udWxsLHRoaXMuc2l6ZV89MH1mdW5jdGlvbiBzdCgpe31mdW5jdGlvbiBvdCgpe31mdW5jdGlvbiBhdCgpe3RoaXMuYXJyYXlfPVtdLGFyZ3VtZW50c1swXWluc3RhbmNlb2YgdiYmdGhpcy5hZGRBbGwoYXJndW1lbnRzWzBdKX1mdW5jdGlvbiB1dCgpe31mdW5jdGlvbiBsdCgpe31mdW5jdGlvbiBodCgpe31mdW5jdGlvbiBjdCgpe31mdW5jdGlvbiBmdCgpe3RoaXMuZ2VvbWV0cmllcz1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZihCLmNhbGwodGhpcyxlKSxudWxsPT09dCYmKHQ9W10pLEIuaGFzTnVsbEVsZW1lbnRzKHQpKXRocm93IG5ldyBpKFwiZ2VvbWV0cmllcyBtdXN0IG5vdCBjb250YWluIG51bGwgZWxlbWVudHNcIik7dGhpcy5nZW9tZXRyaWVzPXR9ZnVuY3Rpb24gZ3QoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07ZnQuY2FsbCh0aGlzLHQsZSl9ZnVuY3Rpb24gZHQoKXtpZih0aGlzLmdlb209bnVsbCx0aGlzLmdlb21GYWN0PW51bGwsdGhpcy5iblJ1bGU9bnVsbCx0aGlzLmVuZHBvaW50TWFwPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtkdC5jYWxsKHRoaXMsdCxWLk1PRDJfQk9VTkRBUllfUlVMRSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMuZ2VvbT1lLHRoaXMuZ2VvbUZhY3Q9ZS5nZXRGYWN0b3J5KCksdGhpcy5iblJ1bGU9bn19ZnVuY3Rpb24gcHQoKXt0aGlzLmNvdW50PW51bGx9ZnVuY3Rpb24gdnQoKXt9ZnVuY3Rpb24gbXQoKXt9ZnVuY3Rpb24geXQoKXt9ZnVuY3Rpb24geHQoKXt9ZnVuY3Rpb24gRXQoKXt9ZnVuY3Rpb24gSXQoKXt9ZnVuY3Rpb24gTnQoKXt9ZnVuY3Rpb24gQ3QoKXt9ZnVuY3Rpb24gU3QoKXt0aGlzLnBvaW50cz1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtCLmNhbGwodGhpcyxlKSx0aGlzLmluaXQodCl9ZnVuY3Rpb24gd3QoKXt9ZnVuY3Rpb24gTHQoKXt0aGlzLmNvb3JkaW5hdGVzPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO0IuY2FsbCh0aGlzLGUpLHRoaXMuaW5pdCh0KX1mdW5jdGlvbiBSdCgpe31mdW5jdGlvbiBUdCgpe3RoaXMuc2hlbGw9bnVsbCx0aGlzLmhvbGVzPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdO2lmKEIuY2FsbCh0aGlzLG4pLG51bGw9PT10JiYodD10aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVMaW5lYXJSaW5nKCkpLG51bGw9PT1lJiYoZT1bXSksQi5oYXNOdWxsRWxlbWVudHMoZSkpdGhyb3cgbmV3IGkoXCJob2xlcyBtdXN0IG5vdCBjb250YWluIG51bGwgZWxlbWVudHNcIik7aWYodC5pc0VtcHR5KCkmJkIuaGFzTm9uRW1wdHlFbGVtZW50cyhlKSl0aHJvdyBuZXcgaShcInNoZWxsIGlzIGVtcHR5IGJ1dCBob2xlcyBhcmUgbm90XCIpO3RoaXMuc2hlbGw9dCx0aGlzLmhvbGVzPWV9ZnVuY3Rpb24gUHQoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07ZnQuY2FsbCh0aGlzLHQsZSl9ZnVuY3Rpb24gYnQoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgaWUpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtidC5jYWxsKHRoaXMsZS5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKHQpLGUpfWVsc2UgaWYoUihhcmd1bWVudHNbMF0sRCkmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgaWUpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtTdC5jYWxsKHRoaXMsbixpKSx0aGlzLnZhbGlkYXRlQ29uc3RydWN0aW9uKCl9fWZ1bmN0aW9uIE90KCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO2Z0LmNhbGwodGhpcyx0LGUpfWZ1bmN0aW9uIF90KCl7aWYodGhpcy5mYWN0b3J5PW51bGwsdGhpcy5pc1VzZXJEYXRhQ29waWVkPSExLDA9PT1hcmd1bWVudHMubGVuZ3RoKTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5mYWN0b3J5PXR9fWZ1bmN0aW9uIE10KCl7fWZ1bmN0aW9uIER0KCl7fWZ1bmN0aW9uIEF0KCl7fWZ1bmN0aW9uIEZ0KCl7fWZ1bmN0aW9uIEd0KCl7aWYodGhpcy5kaW1lbnNpb249Myx0aGlzLmNvb3JkaW5hdGVzPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe3ZhciB0PWFyZ3VtZW50c1swXTtHdC5jYWxsKHRoaXMsdCwzKX1lbHNlIGlmKE51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzBdKSl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuY29vcmRpbmF0ZXM9bmV3IEFycmF5KGUpLmZpbGwobnVsbCk7Zm9yKHZhciBuPTA7bjxlO24rKyl0aGlzLmNvb3JkaW5hdGVzW25dPW5ldyBnfWVsc2UgaWYoUihhcmd1bWVudHNbMF0sRCkpe3ZhciBpPWFyZ3VtZW50c1swXTtpZihudWxsPT09aSlyZXR1cm4gdGhpcy5jb29yZGluYXRlcz1uZXcgQXJyYXkoMCkuZmlsbChudWxsKSxudWxsO3RoaXMuZGltZW5zaW9uPWkuZ2V0RGltZW5zaW9uKCksdGhpcy5jb29yZGluYXRlcz1uZXcgQXJyYXkoaS5zaXplKCkpLmZpbGwobnVsbCk7Zm9yKHZhciBuPTA7bjx0aGlzLmNvb3JkaW5hdGVzLmxlbmd0aDtuKyspdGhpcy5jb29yZGluYXRlc1tuXT1pLmdldENvb3JkaW5hdGVDb3B5KG4pfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkmJk51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzFdKSl7dmFyIHI9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdO3RoaXMuY29vcmRpbmF0ZXM9cix0aGlzLmRpbWVuc2lvbj1zLG51bGw9PT1yJiYodGhpcy5jb29yZGluYXRlcz1uZXcgQXJyYXkoMCkuZmlsbChudWxsKSl9ZWxzZSBpZihOdW1iZXIuaXNJbnRlZ2VyKGFyZ3VtZW50c1swXSkmJk51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzFdKSl7dmFyIG89YXJndW1lbnRzWzBdLGE9YXJndW1lbnRzWzFdO3RoaXMuY29vcmRpbmF0ZXM9bmV3IEFycmF5KG8pLmZpbGwobnVsbCksdGhpcy5kaW1lbnNpb249YTtmb3IodmFyIG49MDtuPG87bisrKXRoaXMuY29vcmRpbmF0ZXNbbl09bmV3IGd9fWZ1bmN0aW9uIHF0KCl7fWZ1bmN0aW9uIEJ0KHQsZSl7cmV0dXJuIHQ9PT1lfHx0IT09dCYmZSE9PWV9ZnVuY3Rpb24genQodCxlKXtmdW5jdGlvbiBuKHQpe3JldHVybiB0aGlzJiZ0aGlzLmNvbnN0cnVjdG9yPT09bj8odGhpcy5fa2V5cz1bXSx0aGlzLl92YWx1ZXM9W10sdGhpcy5faXRwPVtdLHRoaXMub2JqZWN0T25seT1lLHZvaWQodCYmVnQuY2FsbCh0aGlzLHQpKSk6bmV3IG4odCl9cmV0dXJuIGV8fGlvKHQsXCJzaXplXCIse2dldDpKdH0pLHQuY29uc3RydWN0b3I9bixuLnByb3RvdHlwZT10LG59ZnVuY3Rpb24gVnQodCl7dGhpcy5hZGQ/dC5mb3JFYWNoKHRoaXMuYWRkLHRoaXMpOnQuZm9yRWFjaChmdW5jdGlvbih0KXt0aGlzLnNldCh0WzBdLHRbMV0pfSx0aGlzKX1mdW5jdGlvbiBrdCh0KXtyZXR1cm4gdGhpcy5oYXModCkmJih0aGlzLl9rZXlzLnNwbGljZShubywxKSx0aGlzLl92YWx1ZXMuc3BsaWNlKG5vLDEpLHRoaXMuX2l0cC5mb3JFYWNoKGZ1bmN0aW9uKHQpe25vPHRbMF0mJnRbMF0tLX0pKSxubz4tMX1mdW5jdGlvbiBZdCh0KXtyZXR1cm4gdGhpcy5oYXModCk/dGhpcy5fdmFsdWVzW25vXTp2b2lkIDB9ZnVuY3Rpb24gVXQodCxlKXtpZih0aGlzLm9iamVjdE9ubHkmJmUhPT1PYmplY3QoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgdmFsdWUgdXNlZCBhcyB3ZWFrIGNvbGxlY3Rpb24ga2V5XCIpO2lmKGUhPT1lfHwwPT09ZSlmb3Iobm89dC5sZW5ndGg7bm8tLSYmIUJ0KHRbbm9dLGUpOyk7ZWxzZSBubz10LmluZGV4T2YoZSk7cmV0dXJuIG5vPi0xfWZ1bmN0aW9uIFh0KHQpe3JldHVybiBVdC5jYWxsKHRoaXMsdGhpcy5fa2V5cyx0KX1mdW5jdGlvbiBIdCh0LGUpe3JldHVybiB0aGlzLmhhcyh0KT90aGlzLl92YWx1ZXNbbm9dPWU6dGhpcy5fdmFsdWVzW3RoaXMuX2tleXMucHVzaCh0KS0xXT1lLHRoaXN9ZnVuY3Rpb24gV3QoKXsodGhpcy5fa2V5c3x8MCkubGVuZ3RoPXRoaXMuX3ZhbHVlcy5sZW5ndGg9MH1mdW5jdGlvbiBqdCgpe3JldHVybiBRdCh0aGlzLl9pdHAsdGhpcy5fa2V5cyl9ZnVuY3Rpb24gS3QoKXtyZXR1cm4gUXQodGhpcy5faXRwLHRoaXMuX3ZhbHVlcyl9ZnVuY3Rpb24gWnQoKXtyZXR1cm4gUXQodGhpcy5faXRwLHRoaXMuX2tleXMsdGhpcy5fdmFsdWVzKX1mdW5jdGlvbiBRdCh0LGUsbil7dmFyIGk9WzBdLHI9ITE7cmV0dXJuIHQucHVzaChpKSx7bmV4dDpmdW5jdGlvbigpe3ZhciBzLG89aVswXTtyZXR1cm4hciYmbzxlLmxlbmd0aD8ocz1uP1tlW29dLG5bb11dOmVbb10saVswXSsrKToocj0hMCx0LnNwbGljZSh0LmluZGV4T2YoaSksMSkpLHtkb25lOnIsdmFsdWU6c319fX1mdW5jdGlvbiBKdCgpe3JldHVybiB0aGlzLl92YWx1ZXMubGVuZ3RofWZ1bmN0aW9uICR0KHQsZSl7Zm9yKHZhciBuPXRoaXMuZW50cmllcygpOzspe3ZhciBpPW4ubmV4dCgpO2lmKGkuZG9uZSlicmVhazt0LmNhbGwoZSxpLnZhbHVlWzFdLGkudmFsdWVbMF0sdGhpcyl9fWZ1bmN0aW9uIHRlKCl7dGhpcy5tYXBfPW5ldyBzb31mdW5jdGlvbiBlZSgpe2lmKHRoaXMubW9kZWxUeXBlPW51bGwsdGhpcy5zY2FsZT1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKXRoaXMubW9kZWxUeXBlPWVlLkZMT0FUSU5HO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBuZSl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubW9kZWxUeXBlPXQsdD09PWVlLkZJWEVEJiZ0aGlzLnNldFNjYWxlKDEpfWVsc2UgaWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMubW9kZWxUeXBlPWVlLkZJWEVELHRoaXMuc2V0U2NhbGUoZSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGVlKXt2YXIgbj1hcmd1bWVudHNbMF07dGhpcy5tb2RlbFR5cGU9bi5tb2RlbFR5cGUsdGhpcy5zY2FsZT1uLnNjYWxlfX1mdW5jdGlvbiBuZSgpe3RoaXMubmFtZT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLm5hbWU9dCxuZS5uYW1lVG9UeXBlTWFwLnB1dCh0LHRoaXMpfWZ1bmN0aW9uIGllKCl7aWYodGhpcy5wcmVjaXNpb25Nb2RlbD1udWxsLHRoaXMuY29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeT1udWxsLHRoaXMuU1JJRD1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKWllLmNhbGwodGhpcyxuZXcgZWUsMCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoUihhcmd1bWVudHNbMF0sRykpe3ZhciB0PWFyZ3VtZW50c1swXTtpZS5jYWxsKHRoaXMsbmV3IGVlLDAsdCl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGVlKXt2YXIgZT1hcmd1bWVudHNbMF07aWUuY2FsbCh0aGlzLGUsMCxpZS5nZXREZWZhdWx0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpKX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO2llLmNhbGwodGhpcyxuLGksaWUuZ2V0RGVmYXVsdENvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkoKSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHI9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLG89YXJndW1lbnRzWzJdO3RoaXMucHJlY2lzaW9uTW9kZWw9cix0aGlzLmNvb3JkaW5hdGVTZXF1ZW5jZUZhY3Rvcnk9byx0aGlzLlNSSUQ9c319ZnVuY3Rpb24gcmUodCl7dGhpcy5nZW9tZXRyeUZhY3Rvcnk9dHx8bmV3IGllfWZ1bmN0aW9uIHNlKHQpe3RoaXMucGFyc2VyPW5ldyByZSh0KX1mdW5jdGlvbiBvZSgpe3RoaXMucmVzdWx0PW51bGwsdGhpcy5pbnB1dExpbmVzPUFycmF5KDIpLmZpbGwoKS5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkoMil9KSx0aGlzLmludFB0PW5ldyBBcnJheSgyKS5maWxsKG51bGwpLHRoaXMuaW50TGluZUluZGV4PW51bGwsdGhpcy5faXNQcm9wZXI9bnVsbCx0aGlzLnBhPW51bGwsdGhpcy5wYj1udWxsLHRoaXMucHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLmludFB0WzBdPW5ldyBnLHRoaXMuaW50UHRbMV09bmV3IGcsdGhpcy5wYT10aGlzLmludFB0WzBdLHRoaXMucGI9dGhpcy5pbnRQdFsxXSx0aGlzLnJlc3VsdD0wfWZ1bmN0aW9uIGFlKCl7b2UuYXBwbHkodGhpcyl9ZnVuY3Rpb24gdWUoKXt9ZnVuY3Rpb24gbGUoKXt0aGlzLnA9bnVsbCx0aGlzLmNyb3NzaW5nQ291bnQ9MCx0aGlzLmlzUG9pbnRPblNlZ21lbnQ9ITE7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucD10fWZ1bmN0aW9uIGhlKCl7fWZ1bmN0aW9uIGNlKCl7aWYodGhpcy5wMD1udWxsLHRoaXMucDE9bnVsbCwwPT09YXJndW1lbnRzLmxlbmd0aCljZS5jYWxsKHRoaXMsbmV3IGcsbmV3IGcpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtjZS5jYWxsKHRoaXMsdC5wMCx0LnAxKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5wMD1lLHRoaXMucDE9bn1lbHNlIGlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl0sbz1hcmd1bWVudHNbM107Y2UuY2FsbCh0aGlzLG5ldyBnKGksciksbmV3IGcocyxvKSl9fWZ1bmN0aW9uIGZlKCl7aWYodGhpcy5tYXRyaXg9bnVsbCwwPT09YXJndW1lbnRzLmxlbmd0aCl0aGlzLm1hdHJpeD1BcnJheSgzKS5maWxsKCkubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIEFycmF5KDMpfSksdGhpcy5zZXRBbGwobHQuRkFMU0UpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpaWYoXCJzdHJpbmdcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIHQ9YXJndW1lbnRzWzBdO2ZlLmNhbGwodGhpcyksdGhpcy5zZXQodCl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGZlKXt2YXIgZT1hcmd1bWVudHNbMF07ZmUuY2FsbCh0aGlzKSx0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLklOVEVSSU9SXT1lLm1hdHJpeFtMLklOVEVSSU9SXVtMLklOVEVSSU9SXSx0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLkJPVU5EQVJZXT1lLm1hdHJpeFtMLklOVEVSSU9SXVtMLkJPVU5EQVJZXSx0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLkVYVEVSSU9SXT1lLm1hdHJpeFtMLklOVEVSSU9SXVtMLkVYVEVSSU9SXSx0aGlzLm1hdHJpeFtMLkJPVU5EQVJZXVtMLklOVEVSSU9SXT1lLm1hdHJpeFtMLkJPVU5EQVJZXVtMLklOVEVSSU9SXSx0aGlzLm1hdHJpeFtMLkJPVU5EQVJZXVtMLkJPVU5EQVJZXT1lLm1hdHJpeFtMLkJPVU5EQVJZXVtMLkJPVU5EQVJZXSx0aGlzLm1hdHJpeFtMLkJPVU5EQVJZXVtMLkVYVEVSSU9SXT1lLm1hdHJpeFtMLkJPVU5EQVJZXVtMLkVYVEVSSU9SXSx0aGlzLm1hdHJpeFtMLkVYVEVSSU9SXVtMLklOVEVSSU9SXT1lLm1hdHJpeFtMLkVYVEVSSU9SXVtMLklOVEVSSU9SXSx0aGlzLm1hdHJpeFtMLkVYVEVSSU9SXVtMLkJPVU5EQVJZXT1lLm1hdHJpeFtMLkVYVEVSSU9SXVtMLkJPVU5EQVJZXSx0aGlzLm1hdHJpeFtMLkVYVEVSSU9SXVtMLkVYVEVSSU9SXT1lLm1hdHJpeFtMLkVYVEVSSU9SXVtMLkVYVEVSSU9SXX19ZnVuY3Rpb24gZ2UoKXt0aGlzLmFyZWFCYXNlUHQ9bnVsbCx0aGlzLnRyaWFuZ2xlQ2VudDM9bmV3IGcsdGhpcy5hcmVhc3VtMj0wLHRoaXMuY2czPW5ldyBnLHRoaXMubGluZUNlbnRTdW09bmV3IGcsdGhpcy50b3RhbExlbmd0aD0wLHRoaXMucHRDb3VudD0wLHRoaXMucHRDZW50U3VtPW5ldyBnO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmFyZWFCYXNlUHQ9bnVsbCx0aGlzLmFkZCh0KX1mdW5jdGlvbiBkZSh0KXt0aGlzLm1lc3NhZ2U9dHx8XCJcIn1mdW5jdGlvbiBwZSgpe3RoaXMuYXJyYXlfPVtdfWZ1bmN0aW9uIHZlKCl7dGhpcy50cmVlU2V0PW5ldyBhdCx0aGlzLmxpc3Q9bmV3IEl9ZnVuY3Rpb24gbWUoKXtpZih0aGlzLmdlb21GYWN0b3J5PW51bGwsdGhpcy5pbnB1dFB0cz1udWxsLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07bWUuY2FsbCh0aGlzLG1lLmV4dHJhY3RDb29yZGluYXRlcyh0KSx0LmdldEZhY3RvcnkoKSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMuaW5wdXRQdHM9dmUuZmlsdGVyQ29vcmRpbmF0ZXMoZSksdGhpcy5nZW9tRmFjdG9yeT1ufX1mdW5jdGlvbiB5ZSgpe3RoaXMub3JpZ2luPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMub3JpZ2luPXR9ZnVuY3Rpb24geGUoKXt0aGlzLmlucHV0R2VvbT1udWxsLHRoaXMuZmFjdG9yeT1udWxsLHRoaXMucHJ1bmVFbXB0eUdlb21ldHJ5PSEwLHRoaXMucHJlc2VydmVHZW9tZXRyeUNvbGxlY3Rpb25UeXBlPSEwLHRoaXMucHJlc2VydmVDb2xsZWN0aW9ucz0hMSx0aGlzLnByZXNlcnZlVHlwZT0hMX1mdW5jdGlvbiBFZSgpe2lmKHRoaXMuc25hcFRvbGVyYW5jZT0wLHRoaXMuc3JjUHRzPW51bGwsdGhpcy5zZWc9bmV3IGNlLHRoaXMuYWxsb3dTbmFwcGluZ1RvU291cmNlVmVydGljZXM9ITEsdGhpcy5faXNDbG9zZWQ9ITEsYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBTdCYmXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO0VlLmNhbGwodGhpcyx0LmdldENvb3JkaW5hdGVzKCksZSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5JiZcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV07dGhpcy5zcmNQdHM9bix0aGlzLl9pc0Nsb3NlZD1FZS5pc0Nsb3NlZChuKSx0aGlzLnNuYXBUb2xlcmFuY2U9aX19ZnVuY3Rpb24gSWUoKXt0aGlzLnNyY0dlb209bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zcmNHZW9tPXR9ZnVuY3Rpb24gTmUoKXtpZih4ZS5hcHBseSh0aGlzKSx0aGlzLnNuYXBUb2xlcmFuY2U9bnVsbCx0aGlzLnNuYXBQdHM9bnVsbCx0aGlzLmlzU2VsZlNuYXA9ITEsMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLnNuYXBUb2xlcmFuY2U9dCx0aGlzLnNuYXBQdHM9ZX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl07dGhpcy5zbmFwVG9sZXJhbmNlPW4sdGhpcy5zbmFwUHRzPWksdGhpcy5pc1NlbGZTbmFwPXJ9fWZ1bmN0aW9uIENlKCl7dGhpcy5pc0ZpcnN0PSEwLHRoaXMuY29tbW9uTWFudGlzc2FCaXRzQ291bnQ9NTMsdGhpcy5jb21tb25CaXRzPTAsdGhpcy5jb21tb25TaWduRXhwPW51bGx9ZnVuY3Rpb24gU2UoKXt0aGlzLmNvbW1vbkNvb3JkPW51bGwsdGhpcy5jY0ZpbHRlcj1uZXcgd2V9ZnVuY3Rpb24gd2UoKXt0aGlzLmNvbW1vbkJpdHNYPW5ldyBDZSx0aGlzLmNvbW1vbkJpdHNZPW5ldyBDZX1mdW5jdGlvbiBMZSgpe3RoaXMudHJhbnM9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy50cmFucz10fWZ1bmN0aW9uIFJlKCl7dGhpcy5wYXJlbnQ9bnVsbCx0aGlzLmF0U3RhcnQ9bnVsbCx0aGlzLm1heD1udWxsLHRoaXMuaW5kZXg9bnVsbCx0aGlzLnN1YmNvbGxlY3Rpb25JdGVyYXRvcj1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnBhcmVudD10LHRoaXMuYXRTdGFydD0hMCx0aGlzLmluZGV4PTAsdGhpcy5tYXg9dC5nZXROdW1HZW9tZXRyaWVzKCl9ZnVuY3Rpb24gVGUoKXtpZih0aGlzLmJvdW5kYXJ5UnVsZT1WLk9HQ19TRlNfQk9VTkRBUllfUlVMRSx0aGlzLmlzSW49bnVsbCx0aGlzLm51bUJvdW5kYXJpZXM9bnVsbCwwPT09YXJndW1lbnRzLmxlbmd0aCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO2lmKG51bGw9PT10KXRocm93IG5ldyBpKFwiUnVsZSBtdXN0IGJlIG5vbi1udWxsXCIpO3RoaXMuYm91bmRhcnlSdWxlPXR9fWZ1bmN0aW9uIFBlKCl7fWZ1bmN0aW9uIGJlKCl7fWZ1bmN0aW9uIE9lKCl7dGhpcy5wdHM9bnVsbCx0aGlzLmRhdGE9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5wdHM9dCx0aGlzLmRhdGE9ZX1mdW5jdGlvbiBfZSgpe31mdW5jdGlvbiBNZSgpe3RoaXMuYm91bmRzPW51bGwsdGhpcy5pdGVtPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuYm91bmRzPXQsdGhpcy5pdGVtPWV9ZnVuY3Rpb24gRGUoKXt0aGlzLl9zaXplPW51bGwsdGhpcy5pdGVtcz1udWxsLHRoaXMuX3NpemU9MCx0aGlzLml0ZW1zPW5ldyBJLHRoaXMuaXRlbXMuYWRkKG51bGwpfWZ1bmN0aW9uIEFlKCl7fWZ1bmN0aW9uIEZlKCl7fWZ1bmN0aW9uIEdlKCl7aWYodGhpcy5jaGlsZEJvdW5kYWJsZXM9bmV3IEksdGhpcy5ib3VuZHM9bnVsbCx0aGlzLmxldmVsPW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmxldmVsPXR9fWZ1bmN0aW9uIHFlKCl7dGhpcy5ib3VuZGFibGUxPW51bGwsdGhpcy5ib3VuZGFibGUyPW51bGwsdGhpcy5fZGlzdGFuY2U9bnVsbCx0aGlzLml0ZW1EaXN0YW5jZT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTt0aGlzLmJvdW5kYWJsZTE9dCx0aGlzLmJvdW5kYWJsZTI9ZSx0aGlzLml0ZW1EaXN0YW5jZT1uLHRoaXMuX2Rpc3RhbmNlPXRoaXMuZGlzdGFuY2UoKX1mdW5jdGlvbiBCZSgpe2lmKHRoaXMucm9vdD1udWxsLHRoaXMuYnVpbHQ9ITEsdGhpcy5pdGVtQm91bmRhYmxlcz1uZXcgSSx0aGlzLm5vZGVDYXBhY2l0eT1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKUJlLmNhbGwodGhpcyxCZS5ERUZBVUxUX05PREVfQ0FQQUNJVFkpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtmLmlzVHJ1ZSh0PjEsXCJOb2RlIGNhcGFjaXR5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDFcIiksdGhpcy5ub2RlQ2FwYWNpdHk9dH19ZnVuY3Rpb24gemUoKXt9ZnVuY3Rpb24gVmUoKXt9ZnVuY3Rpb24ga2UoKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClrZS5jYWxsKHRoaXMsa2UuREVGQVVMVF9OT0RFX0NBUEFDSVRZKTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07QmUuY2FsbCh0aGlzLHQpfX1mdW5jdGlvbiBZZSgpe3ZhciB0PWFyZ3VtZW50c1swXTtHZS5jYWxsKHRoaXMsdCl9ZnVuY3Rpb24gVWUoKXt9ZnVuY3Rpb24gWGUoKXt0aGlzLnNlZ1N0cmluZz1udWxsLHRoaXMuY29vcmQ9bnVsbCx0aGlzLnNlZ21lbnRJbmRleD1udWxsLHRoaXMuc2VnbWVudE9jdGFudD1udWxsLHRoaXMuX2lzSW50ZXJpb3I9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl0saT1hcmd1bWVudHNbM107dGhpcy5zZWdTdHJpbmc9dCx0aGlzLmNvb3JkPW5ldyBnKGUpLHRoaXMuc2VnbWVudEluZGV4PW4sdGhpcy5zZWdtZW50T2N0YW50PWksdGhpcy5faXNJbnRlcmlvcj0hZS5lcXVhbHMyRCh0LmdldENvb3JkaW5hdGUobikpfWZ1bmN0aW9uIEhlKCl7dGhpcy5ub2RlTWFwPW5ldyBydCx0aGlzLmVkZ2U9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5lZGdlPXR9ZnVuY3Rpb24gV2UoKXt0aGlzLm5vZGVMaXN0PW51bGwsdGhpcy5lZGdlPW51bGwsdGhpcy5ub2RlSXQ9bnVsbCx0aGlzLmN1cnJOb2RlPW51bGwsdGhpcy5uZXh0Tm9kZT1udWxsLHRoaXMuY3VyclNlZ0luZGV4PTA7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubm9kZUxpc3Q9dCx0aGlzLmVkZ2U9dC5nZXRFZGdlKCksdGhpcy5ub2RlSXQ9dC5pdGVyYXRvcigpLHRoaXMucmVhZE5leHROb2RlKCl9ZnVuY3Rpb24gamUoKXt9ZnVuY3Rpb24gS2UoKXt0aGlzLm5vZGVMaXN0PW5ldyBIZSh0aGlzKSx0aGlzLnB0cz1udWxsLHRoaXMuZGF0YT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLnB0cz10LHRoaXMuZGF0YT1lfWZ1bmN0aW9uIFplKCl7dGhpcy50ZW1wRW52MT1uZXcgQyx0aGlzLnRlbXBFbnYyPW5ldyBDLHRoaXMub3ZlcmxhcFNlZzE9bmV3IGNlLHRoaXMub3ZlcmxhcFNlZzI9bmV3IGNlfWZ1bmN0aW9uIFFlKCl7dGhpcy5wdHM9bnVsbCx0aGlzLnN0YXJ0PW51bGwsdGhpcy5lbmQ9bnVsbCx0aGlzLmVudj1udWxsLHRoaXMuY29udGV4dD1udWxsLHRoaXMuaWQ9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl0saT1hcmd1bWVudHNbM107dGhpcy5wdHM9dCx0aGlzLnN0YXJ0PWUsdGhpcy5lbmQ9bix0aGlzLmNvbnRleHQ9aX1mdW5jdGlvbiBKZSgpe31mdW5jdGlvbiAkZSgpe31mdW5jdGlvbiB0bigpe31mdW5jdGlvbiBlbigpe2lmKHRoaXMuc2VnSW50PW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNldFNlZ21lbnRJbnRlcnNlY3Rvcih0KX19ZnVuY3Rpb24gbm4oKXtpZih0aGlzLm1vbm9DaGFpbnM9bmV3IEksdGhpcy5pbmRleD1uZXcga2UsdGhpcy5pZENvdW50ZXI9MCx0aGlzLm5vZGVkU2VnU3RyaW5ncz1udWxsLHRoaXMubk92ZXJsYXBzPTAsMD09PWFyZ3VtZW50cy5sZW5ndGgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtlbi5jYWxsKHRoaXMsdCl9fWZ1bmN0aW9uIHJuKCl7WmUuYXBwbHkodGhpcyksdGhpcy5zaT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNpPXR9ZnVuY3Rpb24gc24oKXtpZih0aGlzLnB0PW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtsLmNhbGwodGhpcyx0KX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07bC5jYWxsKHRoaXMsc24ubXNnV2l0aENvb3JkKGUsbikpLHRoaXMubmFtZT1cIlRvcG9sb2d5RXhjZXB0aW9uXCIsdGhpcy5wdD1uZXcgZyhuKX19ZnVuY3Rpb24gb24oKXt9ZnVuY3Rpb24gYW4oKXt0aGlzLmZpbmRBbGxJbnRlcnNlY3Rpb25zPSExLHRoaXMuaXNDaGVja0VuZFNlZ21lbnRzT25seT0hMSx0aGlzLmxpPW51bGwsdGhpcy5pbnRlcmlvckludGVyc2VjdGlvbj1udWxsLHRoaXMuaW50U2VnbWVudHM9bnVsbCx0aGlzLmludGVyc2VjdGlvbnM9bmV3IEksdGhpcy5pbnRlcnNlY3Rpb25Db3VudD0wLHRoaXMua2VlcEludGVyc2VjdGlvbnM9ITA7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubGk9dCx0aGlzLmludGVyaW9ySW50ZXJzZWN0aW9uPW51bGx9ZnVuY3Rpb24gdW4oKXt0aGlzLmxpPW5ldyBhZSx0aGlzLnNlZ1N0cmluZ3M9bnVsbCx0aGlzLmZpbmRBbGxJbnRlcnNlY3Rpb25zPSExLHRoaXMuc2VnSW50PW51bGwsdGhpcy5faXNWYWxpZD0hMDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zZWdTdHJpbmdzPXR9ZnVuY3Rpb24gbG4oKXt0aGlzLm52PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubnY9bmV3IHVuKGxuLnRvU2VnbWVudFN0cmluZ3ModCkpfWZ1bmN0aW9uIGhuKCl7dGhpcy5tYXBPcD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLm1hcE9wPXR9ZnVuY3Rpb24gY24oKXt9ZnVuY3Rpb24gZm4oKXtpZih0aGlzLmxvY2F0aW9uPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmluaXQodC5sZW5ndGgpfWVsc2UgaWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pKXt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5pbml0KDEpLHRoaXMubG9jYXRpb25bY24uT05dPWV9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGZuKXt2YXIgbj1hcmd1bWVudHNbMF07aWYodGhpcy5pbml0KG4ubG9jYXRpb24ubGVuZ3RoKSxudWxsIT09bilmb3IodmFyIGk9MDtpPHRoaXMubG9jYXRpb24ubGVuZ3RoO2krKyl0aGlzLmxvY2F0aW9uW2ldPW4ubG9jYXRpb25baV19fWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXTt0aGlzLmluaXQoMyksdGhpcy5sb2NhdGlvbltjbi5PTl09cix0aGlzLmxvY2F0aW9uW2NuLkxFRlRdPXMsdGhpcy5sb2NhdGlvbltjbi5SSUdIVF09b319ZnVuY3Rpb24gZ24oKXtpZih0aGlzLmVsdD1uZXcgQXJyYXkoMikuZmlsbChudWxsKSwxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5lbHRbMF09bmV3IGZuKHQpLHRoaXMuZWx0WzFdPW5ldyBmbih0KX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZ24pe3ZhciBlPWFyZ3VtZW50c1swXTt0aGlzLmVsdFswXT1uZXcgZm4oZS5lbHRbMF0pLHRoaXMuZWx0WzFdPW5ldyBmbihlLmVsdFsxXSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTt0aGlzLmVsdFswXT1uZXcgZm4oTC5OT05FKSx0aGlzLmVsdFsxXT1uZXcgZm4oTC5OT05FKSx0aGlzLmVsdFtuXS5zZXRMb2NhdGlvbihpKX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl07dGhpcy5lbHRbMF09bmV3IGZuKHIscyxvKSx0aGlzLmVsdFsxXT1uZXcgZm4ocixzLG8pfWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBhPWFyZ3VtZW50c1swXSx1PWFyZ3VtZW50c1sxXSxsPWFyZ3VtZW50c1syXSxoPWFyZ3VtZW50c1szXTt0aGlzLmVsdFswXT1uZXcgZm4oTC5OT05FLEwuTk9ORSxMLk5PTkUpLHRoaXMuZWx0WzFdPW5ldyBmbihMLk5PTkUsTC5OT05FLEwuTk9ORSksdGhpcy5lbHRbYV0uc2V0TG9jYXRpb25zKHUsbCxoKX19ZnVuY3Rpb24gZG4oKXt0aGlzLnN0YXJ0RGU9bnVsbCx0aGlzLm1heE5vZGVEZWdyZWU9LTEsdGhpcy5lZGdlcz1uZXcgSSx0aGlzLnB0cz1uZXcgSSx0aGlzLmxhYmVsPW5ldyBnbihMLk5PTkUpLHRoaXMucmluZz1udWxsLHRoaXMuX2lzSG9sZT1udWxsLHRoaXMuc2hlbGw9bnVsbCx0aGlzLmhvbGVzPW5ldyBJLHRoaXMuZ2VvbWV0cnlGYWN0b3J5PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuZ2VvbWV0cnlGYWN0b3J5PWUsdGhpcy5jb21wdXRlUG9pbnRzKHQpLHRoaXMuY29tcHV0ZVJpbmcoKX1mdW5jdGlvbiBwbigpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtkbi5jYWxsKHRoaXMsdCxlKX1mdW5jdGlvbiB2bigpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtkbi5jYWxsKHRoaXMsdCxlKX1mdW5jdGlvbiBtbigpe2lmKHRoaXMubGFiZWw9bnVsbCx0aGlzLl9pc0luUmVzdWx0PSExLHRoaXMuX2lzQ292ZXJlZD0hMSx0aGlzLl9pc0NvdmVyZWRTZXQ9ITEsdGhpcy5faXNWaXNpdGVkPSExLDA9PT1hcmd1bWVudHMubGVuZ3RoKTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5sYWJlbD10fX1mdW5jdGlvbiB5bigpe21uLmFwcGx5KHRoaXMpLHRoaXMuY29vcmQ9bnVsbCx0aGlzLmVkZ2VzPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuY29vcmQ9dCx0aGlzLmVkZ2VzPWUsdGhpcy5sYWJlbD1uZXcgZ24oMCxMLk5PTkUpfWZ1bmN0aW9uIHhuKCl7dGhpcy5ub2RlTWFwPW5ldyBydCx0aGlzLm5vZGVGYWN0PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubm9kZUZhY3Q9dH1mdW5jdGlvbiBFbigpe2lmKHRoaXMuZWRnZT1udWxsLHRoaXMubGFiZWw9bnVsbCx0aGlzLm5vZGU9bnVsbCx0aGlzLnAwPW51bGwsdGhpcy5wMT1udWxsLHRoaXMuZHg9bnVsbCx0aGlzLmR5PW51bGwsdGhpcy5xdWFkcmFudD1udWxsLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5lZGdlPXR9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9YXJndW1lbnRzWzJdO0VuLmNhbGwodGhpcyxlLG4saSxudWxsKX1lbHNlIGlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl0sYT1hcmd1bWVudHNbM107RW4uY2FsbCh0aGlzLHIpLHRoaXMuaW5pdChzLG8pLHRoaXMubGFiZWw9YX19ZnVuY3Rpb24gSW4oKXt0aGlzLl9pc0ZvcndhcmQ9bnVsbCx0aGlzLl9pc0luUmVzdWx0PSExLHRoaXMuX2lzVmlzaXRlZD0hMSx0aGlzLnN5bT1udWxsLHRoaXMubmV4dD1udWxsLHRoaXMubmV4dE1pbj1udWxsLHRoaXMuZWRnZVJpbmc9bnVsbCx0aGlzLm1pbkVkZ2VSaW5nPW51bGwsdGhpcy5kZXB0aD1bMCwtOTk5LC05OTldO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZihFbi5jYWxsKHRoaXMsdCksdGhpcy5faXNGb3J3YXJkPWUsZSl0aGlzLmluaXQodC5nZXRDb29yZGluYXRlKDApLHQuZ2V0Q29vcmRpbmF0ZSgxKSk7ZWxzZXt2YXIgbj10LmdldE51bVBvaW50cygpLTE7dGhpcy5pbml0KHQuZ2V0Q29vcmRpbmF0ZShuKSx0LmdldENvb3JkaW5hdGUobi0xKSl9dGhpcy5jb21wdXRlRGlyZWN0ZWRMYWJlbCgpfWZ1bmN0aW9uIE5uKCl7fWZ1bmN0aW9uIENuKCl7aWYodGhpcy5lZGdlcz1uZXcgSSx0aGlzLm5vZGVzPW51bGwsdGhpcy5lZGdlRW5kTGlzdD1uZXcgSSwwPT09YXJndW1lbnRzLmxlbmd0aCl0aGlzLm5vZGVzPW5ldyB4bihuZXcgTm4pO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLm5vZGVzPW5ldyB4bih0KX19ZnVuY3Rpb24gU24oKXt0aGlzLmdlb21ldHJ5RmFjdG9yeT1udWxsLHRoaXMuc2hlbGxMaXN0PW5ldyBJO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmdlb21ldHJ5RmFjdG9yeT10fWZ1bmN0aW9uIHduKCl7dGhpcy5vcD1udWxsLHRoaXMuZ2VvbWV0cnlGYWN0b3J5PW51bGwsdGhpcy5wdExvY2F0b3I9bnVsbCx0aGlzLmxpbmVFZGdlc0xpc3Q9bmV3IEksdGhpcy5yZXN1bHRMaW5lTGlzdD1uZXcgSTt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07dGhpcy5vcD10LHRoaXMuZ2VvbWV0cnlGYWN0b3J5PWUsdGhpcy5wdExvY2F0b3I9bn1mdW5jdGlvbiBMbigpe3RoaXMub3A9bnVsbCx0aGlzLmdlb21ldHJ5RmFjdG9yeT1udWxsLHRoaXMucmVzdWx0UG9pbnRMaXN0PW5ldyBJO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTthcmd1bWVudHNbMl07dGhpcy5vcD10LHRoaXMuZ2VvbWV0cnlGYWN0b3J5PWV9ZnVuY3Rpb24gUm4oKXt9ZnVuY3Rpb24gVG4oKXt0aGlzLmdlb209bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5nZW9tPXR9ZnVuY3Rpb24gUG4oKXt0aGlzLmVkZ2VNYXA9bmV3IHJ0LHRoaXMuZWRnZUxpc3Q9bnVsbCx0aGlzLnB0SW5BcmVhTG9jYXRpb249W0wuTk9ORSxMLk5PTkVdfWZ1bmN0aW9uIGJuKCl7UG4uYXBwbHkodGhpcyksdGhpcy5yZXN1bHRBcmVhRWRnZUxpc3Q9bnVsbCx0aGlzLmxhYmVsPW51bGwsdGhpcy5TQ0FOTklOR19GT1JfSU5DT01JTkc9MSx0aGlzLkxJTktJTkdfVE9fT1VUR09JTkc9Mn1mdW5jdGlvbiBPbigpe05uLmFwcGx5KHRoaXMpfWZ1bmN0aW9uIF9uKCl7dGhpcy5tY2U9bnVsbCx0aGlzLmNoYWluSW5kZXg9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5tY2U9dCx0aGlzLmNoYWluSW5kZXg9ZX1mdW5jdGlvbiBNbigpe2lmKHRoaXMubGFiZWw9bnVsbCx0aGlzLnhWYWx1ZT1udWxsLHRoaXMuZXZlbnRUeXBlPW51bGwsdGhpcy5pbnNlcnRFdmVudD1udWxsLHRoaXMuZGVsZXRlRXZlbnRJbmRleD1udWxsLHRoaXMub2JqPW51bGwsMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLmV2ZW50VHlwZT1Nbi5ERUxFVEUsdGhpcy54VmFsdWU9dCx0aGlzLmluc2VydEV2ZW50PWV9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzJdO3RoaXMuZXZlbnRUeXBlPU1uLklOU0VSVCx0aGlzLmxhYmVsPW4sdGhpcy54VmFsdWU9aSx0aGlzLm9iaj1yfX1mdW5jdGlvbiBEbigpe31mdW5jdGlvbiBBbigpe3RoaXMuX2hhc0ludGVyc2VjdGlvbj0hMSx0aGlzLmhhc1Byb3Blcj0hMSx0aGlzLmhhc1Byb3BlckludGVyaW9yPSExLHRoaXMucHJvcGVySW50ZXJzZWN0aW9uUG9pbnQ9bnVsbCx0aGlzLmxpPW51bGwsdGhpcy5pbmNsdWRlUHJvcGVyPW51bGwsdGhpcy5yZWNvcmRJc29sYXRlZD1udWxsLHRoaXMuaXNTZWxmSW50ZXJzZWN0aW9uPW51bGwsdGhpcy5udW1JbnRlcnNlY3Rpb25zPTAsdGhpcy5udW1UZXN0cz0wLHRoaXMuYmR5Tm9kZXM9bnVsbCx0aGlzLl9pc0RvbmU9ITEsdGhpcy5pc0RvbmVXaGVuUHJvcGVySW50PSExO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTt0aGlzLmxpPXQsdGhpcy5pbmNsdWRlUHJvcGVyPWUsdGhpcy5yZWNvcmRJc29sYXRlZD1ufWZ1bmN0aW9uIEZuKCl7RG4uYXBwbHkodGhpcyksdGhpcy5ldmVudHM9bmV3IEksdGhpcy5uT3ZlcmxhcHM9bnVsbH1mdW5jdGlvbiBHbigpe3RoaXMubWluPXIuUE9TSVRJVkVfSU5GSU5JVFksdGhpcy5tYXg9ci5ORUdBVElWRV9JTkZJTklUWX1mdW5jdGlvbiBxbigpe31mdW5jdGlvbiBCbigpe0duLmFwcGx5KHRoaXMpLHRoaXMuaXRlbT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTt0aGlzLm1pbj10LHRoaXMubWF4PWUsdGhpcy5pdGVtPW59ZnVuY3Rpb24gem4oKXtHbi5hcHBseSh0aGlzKSx0aGlzLm5vZGUxPW51bGwsdGhpcy5ub2RlMj1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLm5vZGUxPXQsdGhpcy5ub2RlMj1lLHRoaXMuYnVpbGRFeHRlbnQodGhpcy5ub2RlMSx0aGlzLm5vZGUyKX1mdW5jdGlvbiBWbigpe3RoaXMubGVhdmVzPW5ldyBJLHRoaXMucm9vdD1udWxsLHRoaXMubGV2ZWw9MH1mdW5jdGlvbiBrbigpe2lmKHRoaXMubGluZXM9bnVsbCx0aGlzLmlzRm9yY2VkVG9MaW5lU3RyaW5nPSExLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5saW5lcz10fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0aGlzLmxpbmVzPWUsdGhpcy5pc0ZvcmNlZFRvTGluZVN0cmluZz1ufX1mdW5jdGlvbiBZbigpe3RoaXMuaXRlbXM9bmV3IEl9ZnVuY3Rpb24gVW4oKXt0aGlzLmluZGV4PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO2lmKCFSKHQsUnQpKXRocm93IG5ldyBpKFwiQXJndW1lbnQgbXVzdCBiZSBQb2x5Z29uYWxcIik7dGhpcy5pbmRleD1uZXcgSG4odCl9ZnVuY3Rpb24gWG4oKXt0aGlzLmNvdW50ZXI9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5jb3VudGVyPXR9ZnVuY3Rpb24gSG4oKXt0aGlzLmluZGV4PW5ldyBWbjt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5pbml0KHQpfWZ1bmN0aW9uIFduKCl7dGhpcy5jb29yZD1udWxsLHRoaXMuc2VnbWVudEluZGV4PW51bGwsdGhpcy5kaXN0PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdO3RoaXMuY29vcmQ9bmV3IGcodCksdGhpcy5zZWdtZW50SW5kZXg9ZSx0aGlzLmRpc3Q9bn1mdW5jdGlvbiBqbigpe3RoaXMubm9kZU1hcD1uZXcgcnQsdGhpcy5lZGdlPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZWRnZT10fWZ1bmN0aW9uIEtuKCl7fWZ1bmN0aW9uIFpuKCl7dGhpcy5lPW51bGwsdGhpcy5wdHM9bnVsbCx0aGlzLnN0YXJ0SW5kZXg9bnVsbCx0aGlzLmVudjE9bmV3IEMsdGhpcy5lbnYyPW5ldyBDO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmU9dCx0aGlzLnB0cz10LmdldENvb3JkaW5hdGVzKCk7dmFyIGU9bmV3IEtuO3RoaXMuc3RhcnRJbmRleD1lLmdldENoYWluU3RhcnRJbmRpY2VzKHRoaXMucHRzKX1mdW5jdGlvbiBRbigpe3RoaXMuZGVwdGg9QXJyYXkoMikuZmlsbCgpLm1hcChmdW5jdGlvbigpe3JldHVybiBBcnJheSgzKX0pO2Zvcih2YXIgdD0wO3Q8Mjt0KyspZm9yKHZhciBlPTA7ZTwzO2UrKyl0aGlzLmRlcHRoW3RdW2VdPVFuLk5VTExfVkFMVUV9ZnVuY3Rpb24gSm4oKXtpZihtbi5hcHBseSh0aGlzKSx0aGlzLnB0cz1udWxsLHRoaXMuZW52PW51bGwsdGhpcy5laUxpc3Q9bmV3IGpuKHRoaXMpLHRoaXMubmFtZT1udWxsLHRoaXMubWNlPW51bGwsdGhpcy5faXNJc29sYXRlZD0hMCx0aGlzLmRlcHRoPW5ldyBRbix0aGlzLmRlcHRoRGVsdGE9MCwxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO0puLmNhbGwodGhpcyx0LG51bGwpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0aGlzLnB0cz1lLHRoaXMubGFiZWw9bn19ZnVuY3Rpb24gJG4oKXtpZihDbi5hcHBseSh0aGlzKSx0aGlzLnBhcmVudEdlb209bnVsbCx0aGlzLmxpbmVFZGdlTWFwPW5ldyB0ZSx0aGlzLmJvdW5kYXJ5Tm9kZVJ1bGU9bnVsbCx0aGlzLnVzZUJvdW5kYXJ5RGV0ZXJtaW5hdGlvblJ1bGU9ITAsdGhpcy5hcmdJbmRleD1udWxsLHRoaXMuYm91bmRhcnlOb2Rlcz1udWxsLHRoaXMuX2hhc1Rvb0Zld1BvaW50cz0hMSx0aGlzLmludmFsaWRQb2ludD1udWxsLHRoaXMuYXJlYVB0TG9jYXRvcj1udWxsLHRoaXMucHRMb2NhdG9yPW5ldyBUZSwyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdOyRuLmNhbGwodGhpcyx0LGUsVi5PR0NfU0ZTX0JPVU5EQVJZX1JVTEUpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXTt0aGlzLmFyZ0luZGV4PW4sdGhpcy5wYXJlbnRHZW9tPWksdGhpcy5ib3VuZGFyeU5vZGVSdWxlPXIsbnVsbCE9PWkmJnRoaXMuYWRkKGkpfX1mdW5jdGlvbiB0aSgpe2lmKHRoaXMubGk9bmV3IGFlLHRoaXMucmVzdWx0UHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLmFyZz1udWxsLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zZXRDb21wdXRhdGlvblByZWNpc2lvbih0LmdldFByZWNpc2lvbk1vZGVsKCkpLHRoaXMuYXJnPW5ldyBBcnJheSgxKS5maWxsKG51bGwpLHRoaXMuYXJnWzBdPW5ldyAkbigwLHQpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0aS5jYWxsKHRoaXMsZSxuLFYuT0dDX1NGU19CT1VOREFSWV9SVUxFKX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl07aS5nZXRQcmVjaXNpb25Nb2RlbCgpLmNvbXBhcmVUbyhyLmdldFByZWNpc2lvbk1vZGVsKCkpPj0wP3RoaXMuc2V0Q29tcHV0YXRpb25QcmVjaXNpb24oaS5nZXRQcmVjaXNpb25Nb2RlbCgpKTp0aGlzLnNldENvbXB1dGF0aW9uUHJlY2lzaW9uKHIuZ2V0UHJlY2lzaW9uTW9kZWwoKSksdGhpcy5hcmc9bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5hcmdbMF09bmV3ICRuKDAsaSxzKSx0aGlzLmFyZ1sxXT1uZXcgJG4oMSxyLHMpfX1mdW5jdGlvbiBlaSgpe3RoaXMucHRzPW51bGwsdGhpcy5fb3JpZW50YXRpb249bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5wdHM9dCx0aGlzLl9vcmllbnRhdGlvbj1laS5vcmllbnRhdGlvbih0KX1mdW5jdGlvbiBuaSgpe3RoaXMuZWRnZXM9bmV3IEksdGhpcy5vY2FNYXA9bmV3IHJ0fWZ1bmN0aW9uIGlpKCl7dGhpcy5wdExvY2F0b3I9bmV3IFRlLHRoaXMuZ2VvbUZhY3Q9bnVsbCx0aGlzLnJlc3VsdEdlb209bnVsbCx0aGlzLmdyYXBoPW51bGwsdGhpcy5lZGdlTGlzdD1uZXcgbmksdGhpcy5yZXN1bHRQb2x5TGlzdD1uZXcgSSx0aGlzLnJlc3VsdExpbmVMaXN0PW5ldyBJLHRoaXMucmVzdWx0UG9pbnRMaXN0PW5ldyBJO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aS5jYWxsKHRoaXMsdCxlKSx0aGlzLmdyYXBoPW5ldyBDbihuZXcgT24pLHRoaXMuZ2VvbUZhY3Q9dC5nZXRGYWN0b3J5KCl9ZnVuY3Rpb24gcmkoKXt0aGlzLmdlb209bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5zbmFwVG9sZXJhbmNlPW51bGwsdGhpcy5jYnI9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5nZW9tWzBdPXQsdGhpcy5nZW9tWzFdPWUsdGhpcy5jb21wdXRlU25hcFRvbGVyYW5jZSgpfWZ1bmN0aW9uIHNpKCl7dGhpcy5nZW9tPW5ldyBBcnJheSgyKS5maWxsKG51bGwpO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLmdlb21bMF09dCx0aGlzLmdlb21bMV09ZX1mdW5jdGlvbiBvaSgpe3RoaXMuZmFjdG9yeT1udWxsLHRoaXMuaW50ZXJpb3JQb2ludD1udWxsLHRoaXMubWF4V2lkdGg9MDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5mYWN0b3J5PXQuZ2V0RmFjdG9yeSgpLHRoaXMuYWRkKHQpfWZ1bmN0aW9uIGFpKCl7dGhpcy5wb2x5PW51bGwsdGhpcy5jZW50cmVZPW51bGwsdGhpcy5oaVk9ci5NQVhfVkFMVUUsdGhpcy5sb1k9LXIuTUFYX1ZBTFVFO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnBvbHk9dCx0aGlzLmhpWT10LmdldEVudmVsb3BlSW50ZXJuYWwoKS5nZXRNYXhZKCksdGhpcy5sb1k9dC5nZXRFbnZlbG9wZUludGVybmFsKCkuZ2V0TWluWSgpLHRoaXMuY2VudHJlWT1vaS5hdmcodGhpcy5sb1ksdGhpcy5oaVkpfWZ1bmN0aW9uIHVpKCl7dGhpcy5jZW50cm9pZD1udWxsLHRoaXMubWluRGlzdGFuY2U9ci5NQVhfVkFMVUUsdGhpcy5pbnRlcmlvclBvaW50PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuY2VudHJvaWQ9dC5nZXRDZW50cm9pZCgpLmdldENvb3JkaW5hdGUoKSx0aGlzLmFkZEludGVyaW9yKHQpLG51bGw9PT10aGlzLmludGVyaW9yUG9pbnQmJnRoaXMuYWRkRW5kcG9pbnRzKHQpfWZ1bmN0aW9uIGxpKCl7dGhpcy5jZW50cm9pZD1udWxsLHRoaXMubWluRGlzdGFuY2U9ci5NQVhfVkFMVUUsdGhpcy5pbnRlcmlvclBvaW50PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuY2VudHJvaWQ9dC5nZXRDZW50cm9pZCgpLmdldENvb3JkaW5hdGUoKSx0aGlzLmFkZCh0KX1mdW5jdGlvbiBoaSgpe3RoaXMudGVtcEVudjE9bmV3IEMsdGhpcy5zZWxlY3RlZFNlZ21lbnQ9bmV3IGNlfWZ1bmN0aW9uIGNpKCl7dGhpcy5pdGVtcz1uZXcgSSx0aGlzLnN1Ym5vZGU9W251bGwsbnVsbF19ZnVuY3Rpb24gZmkoKXtpZih0aGlzLm1pbj1udWxsLHRoaXMubWF4PW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpdGhpcy5taW49MCx0aGlzLm1heD0wO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmluaXQodC5taW4sdC5tYXgpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0aGlzLmluaXQoZSxuKX19ZnVuY3Rpb24gZ2koKXt9ZnVuY3Rpb24gZGkodCxlKXt2YXIgbixpLHIscyxvPXszMjp7ZDoxMjcsYzoxMjgsYjowLGE6MH0sNjQ6e2Q6MzI3NTIsYzowLGI6MCxhOjB9fSxhPXszMjo4LDY0OjExfVt0XTtpZihzfHwobj1lPDB8fDEvZTwwLGlzRmluaXRlKGUpfHwocz1vW3RdLG4mJihzLmQrPTE8PHQvNC0xKSxpPU1hdGgucG93KDIsYSktMSxyPTApKSwhcyl7Zm9yKGk9ezMyOjEyNyw2NDoxMDIzfVt0XSxyPU1hdGguYWJzKGUpO3I+PTI7KWkrKyxyLz0yO2Zvcig7cjwxJiZpPjA7KWktLSxyKj0yO2k8PTAmJihyLz0yKSwzMj09PXQmJmk+MjU0JiYocz17ZDpuPzI1NToxMjcsYzoxMjgsYjowLGE6MH0saT1NYXRoLnBvdygyLGEpLTEscj0wKX1yZXR1cm4gaX1mdW5jdGlvbiBwaSgpe3RoaXMucHQ9MCx0aGlzLmxldmVsPTAsdGhpcy5pbnRlcnZhbD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmNvbXB1dGVLZXkodCl9ZnVuY3Rpb24gdmkoKXtjaS5hcHBseSh0aGlzKSx0aGlzLmludGVydmFsPW51bGwsdGhpcy5jZW50cmU9bnVsbCx0aGlzLmxldmVsPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuaW50ZXJ2YWw9dCx0aGlzLmxldmVsPWUsdGhpcy5jZW50cmU9KHQuZ2V0TWluKCkrdC5nZXRNYXgoKSkvMn1mdW5jdGlvbiBtaSgpe31mdW5jdGlvbiB5aSgpe2NpLmFwcGx5KHRoaXMpfWZ1bmN0aW9uIHhpKCl7dGhpcy5yb290PW51bGwsdGhpcy5taW5FeHRlbnQ9MSx0aGlzLnJvb3Q9bmV3IHlpfWZ1bmN0aW9uIEVpKCl7fWZ1bmN0aW9uIElpKCl7dGhpcy5yaW5nPW51bGwsdGhpcy50cmVlPW51bGwsdGhpcy5jcm9zc2luZ3M9MCx0aGlzLmludGVydmFsPW5ldyBmaTt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5yaW5nPXQsdGhpcy5idWlsZEluZGV4KCl9ZnVuY3Rpb24gTmkoKXtoaS5hcHBseSh0aGlzKSx0aGlzLm1jcD1udWxsLHRoaXMucD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLm1jcD10LHRoaXMucD1lfWZ1bmN0aW9uIENpKCl7fWZ1bmN0aW9uIFNpKCl7dGhpcy5wMD1udWxsLHRoaXMucDE9bnVsbCx0aGlzLnAyPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdO3RoaXMucDA9dCx0aGlzLnAxPWUsdGhpcy5wMj1ufWZ1bmN0aW9uIHdpKCl7dGhpcy5pbnB1dD1udWxsLHRoaXMuZXh0cmVtYWxQdHM9bnVsbCx0aGlzLmNlbnRyZT1udWxsLHRoaXMucmFkaXVzPTA7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuaW5wdXQ9dH1mdW5jdGlvbiBMaSgpe2lmKHRoaXMuaW5wdXRHZW9tPW51bGwsdGhpcy5pc0NvbnZleD1udWxsLHRoaXMuY29udmV4SHVsbFB0cz1udWxsLHRoaXMubWluQmFzZVNlZz1uZXcgY2UsdGhpcy5taW5XaWR0aFB0PW51bGwsdGhpcy5taW5QdEluZGV4PW51bGwsdGhpcy5taW5XaWR0aD0wLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07TGkuY2FsbCh0aGlzLHQsITEpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTt0aGlzLmlucHV0R2VvbT1lLHRoaXMuaXNDb252ZXg9bn19ZnVuY3Rpb24gUmkoKXt0aGlzLmlucHV0R2VvbT1udWxsLHRoaXMuZGlzdGFuY2VUb2xlcmFuY2U9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5pbnB1dEdlb209dH1mdW5jdGlvbiBUaSgpe3hlLmFwcGx5KHRoaXMpLHRoaXMuZGlzdGFuY2VUb2xlcmFuY2U9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5kaXN0YW5jZVRvbGVyYW5jZT10fWZ1bmN0aW9uIFBpKCl7dGhpcy5fb3JpZz1udWxsLHRoaXMuX3N5bT1udWxsLHRoaXMuX25leHQ9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5fb3JpZz10fWZ1bmN0aW9uIGJpKCl7dGhpcy5faXNNYXJrZWQ9ITE7dmFyIHQ9YXJndW1lbnRzWzBdO1BpLmNhbGwodGhpcyx0KX1mdW5jdGlvbiBPaSgpe3RoaXMudmVydGV4TWFwPW5ldyB0ZX1mdW5jdGlvbiBfaSgpe3RoaXMuX2lzU3RhcnQ9ITE7dmFyIHQ9YXJndW1lbnRzWzBdO2JpLmNhbGwodGhpcyx0KX1mdW5jdGlvbiBNaSgpe09pLmFwcGx5KHRoaXMpfWZ1bmN0aW9uIERpKCl7dGhpcy5yZXN1bHQ9bnVsbCx0aGlzLmZhY3Rvcnk9bnVsbCx0aGlzLmdyYXBoPW51bGwsdGhpcy5saW5lcz1uZXcgSSx0aGlzLm5vZGVFZGdlU3RhY2s9bmV3IHBlLHRoaXMucmluZ1N0YXJ0RWRnZT1udWxsLHRoaXMuZ3JhcGg9bmV3IE1pfWZ1bmN0aW9uIEFpKCl7dGhpcy5pdGVtcz1uZXcgSSx0aGlzLnN1Ym5vZGU9bmV3IEFycmF5KDQpLmZpbGwobnVsbCl9ZnVuY3Rpb24gRmkoKXt0aGlzLnB0PW5ldyBnLHRoaXMubGV2ZWw9MCx0aGlzLmVudj1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmNvbXB1dGVLZXkodCl9ZnVuY3Rpb24gR2koKXtBaS5hcHBseSh0aGlzKSx0aGlzLmVudj1udWxsLHRoaXMuY2VudHJleD1udWxsLHRoaXMuY2VudHJleT1udWxsLHRoaXMubGV2ZWw9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5lbnY9dCx0aGlzLmxldmVsPWUsdGhpcy5jZW50cmV4PSh0LmdldE1pblgoKSt0LmdldE1heFgoKSkvMix0aGlzLmNlbnRyZXk9KHQuZ2V0TWluWSgpK3QuZ2V0TWF4WSgpKS8yfWZ1bmN0aW9uIHFpKCl7QWkuYXBwbHkodGhpcyl9ZnVuY3Rpb24gQmkoKXt0aGlzLnJvb3Q9bnVsbCx0aGlzLm1pbkV4dGVudD0xLHRoaXMucm9vdD1uZXcgcWl9ZnVuY3Rpb24gemkodCl7dGhpcy5nZW9tZXRyeUZhY3Rvcnk9dHx8bmV3IGllfWZ1bmN0aW9uIFZpKHQpe3RoaXMuZ2VvbWV0cnlGYWN0b3J5PXR8fG5ldyBpZSx0aGlzLnByZWNpc2lvbk1vZGVsPXRoaXMuZ2VvbWV0cnlGYWN0b3J5LmdldFByZWNpc2lvbk1vZGVsKCksdGhpcy5wYXJzZXI9bmV3IHppKHRoaXMuZ2VvbWV0cnlGYWN0b3J5KX1mdW5jdGlvbiBraSgpe3RoaXMucGFyc2VyPW5ldyB6aSh0aGlzLmdlb21ldHJ5RmFjdG9yeSl9ZnVuY3Rpb24gWWkodCl7dGhpcy5nZW9tZXRyeUZhY3Rvcnk9dHx8bmV3IGllLHRoaXMucHJlY2lzaW9uTW9kZWw9dGhpcy5nZW9tZXRyeUZhY3RvcnkuZ2V0UHJlY2lzaW9uTW9kZWwoKSx0aGlzLnBhcnNlcj1uZXcgcmUodGhpcy5nZW9tZXRyeUZhY3RvcnkpfWZ1bmN0aW9uIFVpKHQpe3JldHVyblt0LngsdC55XX1mdW5jdGlvbiBYaSh0LGUpe3RoaXMuZ2VvbWV0cnlGYWN0b3J5PXR8fG5ldyBpZSx0aGlzLm9sPWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBvbCYmb2x9ZnVuY3Rpb24gSGkoKXtpZih0aGlzLm5vZGVyPW51bGwsdGhpcy5zY2FsZUZhY3Rvcj1udWxsLHRoaXMub2Zmc2V0WD1udWxsLHRoaXMub2Zmc2V0WT1udWxsLHRoaXMuaXNTY2FsZWQ9ITEsMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtIaS5jYWxsKHRoaXMsdCxlLDAsMCl9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO2FyZ3VtZW50c1syXSxhcmd1bWVudHNbM107dGhpcy5ub2Rlcj1uLHRoaXMuc2NhbGVGYWN0b3I9aSx0aGlzLmlzU2NhbGVkPSF0aGlzLmlzSW50ZWdlclByZWNpc2lvbigpfX1mdW5jdGlvbiBXaSgpe2lmKHRoaXMuaW5wdXRHZW9tPW51bGwsdGhpcy5pc0Nsb3NlZEVuZHBvaW50c0luSW50ZXJpb3I9ITAsdGhpcy5ub25TaW1wbGVMb2NhdGlvbj1udWxsLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5pbnB1dEdlb209dH1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07XG50aGlzLmlucHV0R2VvbT1lLHRoaXMuaXNDbG9zZWRFbmRwb2ludHNJbkludGVyaW9yPSFuLmlzSW5Cb3VuZGFyeSgyKX19ZnVuY3Rpb24gamkoKXt0aGlzLnB0PW51bGwsdGhpcy5pc0Nsb3NlZD1udWxsLHRoaXMuZGVncmVlPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucHQ9dCx0aGlzLmlzQ2xvc2VkPSExLHRoaXMuZGVncmVlPTB9ZnVuY3Rpb24gS2koKXtpZih0aGlzLnF1YWRyYW50U2VnbWVudHM9S2kuREVGQVVMVF9RVUFEUkFOVF9TRUdNRU5UUyx0aGlzLmVuZENhcFN0eWxlPUtpLkNBUF9ST1VORCx0aGlzLmpvaW5TdHlsZT1LaS5KT0lOX1JPVU5ELHRoaXMubWl0cmVMaW1pdD1LaS5ERUZBVUxUX01JVFJFX0xJTUlULHRoaXMuX2lzU2luZ2xlU2lkZWQ9ITEsdGhpcy5zaW1wbGlmeUZhY3Rvcj1LaS5ERUZBVUxUX1NJTVBMSUZZX0ZBQ1RPUiwwPT09YXJndW1lbnRzLmxlbmd0aCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2V0UXVhZHJhbnRTZWdtZW50cyh0KX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5zZXRRdWFkcmFudFNlZ21lbnRzKGUpLHRoaXMuc2V0RW5kQ2FwU3R5bGUobil9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdLHM9YXJndW1lbnRzWzJdLG89YXJndW1lbnRzWzNdO3RoaXMuc2V0UXVhZHJhbnRTZWdtZW50cyhpKSx0aGlzLnNldEVuZENhcFN0eWxlKHIpLHRoaXMuc2V0Sm9pblN0eWxlKHMpLHRoaXMuc2V0TWl0cmVMaW1pdChvKX19ZnVuY3Rpb24gWmkoKXt0aGlzLm1pbkluZGV4PS0xLHRoaXMubWluQ29vcmQ9bnVsbCx0aGlzLm1pbkRlPW51bGwsdGhpcy5vcmllbnRlZERlPW51bGx9ZnVuY3Rpb24gUWkoKXt0aGlzLmFycmF5Xz1bXX1mdW5jdGlvbiBKaSgpe3RoaXMuZmluZGVyPW51bGwsdGhpcy5kaXJFZGdlTGlzdD1uZXcgSSx0aGlzLm5vZGVzPW5ldyBJLHRoaXMucmlnaHRNb3N0Q29vcmQ9bnVsbCx0aGlzLmVudj1udWxsLHRoaXMuZmluZGVyPW5ldyBaaX1mdW5jdGlvbiAkaSgpe3RoaXMuaW5wdXRMaW5lPW51bGwsdGhpcy5kaXN0YW5jZVRvbD1udWxsLHRoaXMuaXNEZWxldGVkPW51bGwsdGhpcy5hbmdsZU9yaWVudGF0aW9uPWhlLkNPVU5URVJDTE9DS1dJU0U7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuaW5wdXRMaW5lPXR9ZnVuY3Rpb24gdHIoKXt0aGlzLnB0TGlzdD1udWxsLHRoaXMucHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLm1pbmltaW1WZXJ0ZXhEaXN0YW5jZT0wLHRoaXMucHRMaXN0PW5ldyBJfWZ1bmN0aW9uIGVyKCl7dGhpcy5tYXhDdXJ2ZVNlZ21lbnRFcnJvcj0wLHRoaXMuZmlsbGV0QW5nbGVRdWFudHVtPW51bGwsdGhpcy5jbG9zaW5nU2VnTGVuZ3RoRmFjdG9yPTEsdGhpcy5zZWdMaXN0PW51bGwsdGhpcy5kaXN0YW5jZT0wLHRoaXMucHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLmJ1ZlBhcmFtcz1udWxsLHRoaXMubGk9bnVsbCx0aGlzLnMwPW51bGwsdGhpcy5zMT1udWxsLHRoaXMuczI9bnVsbCx0aGlzLnNlZzA9bmV3IGNlLHRoaXMuc2VnMT1uZXcgY2UsdGhpcy5vZmZzZXQwPW5ldyBjZSx0aGlzLm9mZnNldDE9bmV3IGNlLHRoaXMuc2lkZT0wLHRoaXMuX2hhc05hcnJvd0NvbmNhdmVBbmdsZT0hMTt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07dGhpcy5wcmVjaXNpb25Nb2RlbD10LHRoaXMuYnVmUGFyYW1zPWUsdGhpcy5saT1uZXcgYWUsdGhpcy5maWxsZXRBbmdsZVF1YW50dW09TWF0aC5QSS8yL2UuZ2V0UXVhZHJhbnRTZWdtZW50cygpLGUuZ2V0UXVhZHJhbnRTZWdtZW50cygpPj04JiZlLmdldEpvaW5TdHlsZSgpPT09S2kuSk9JTl9ST1VORCYmKHRoaXMuY2xvc2luZ1NlZ0xlbmd0aEZhY3Rvcj1lci5NQVhfQ0xPU0lOR19TRUdfTEVOX0ZBQ1RPUiksdGhpcy5pbml0KG4pfWZ1bmN0aW9uIG5yKCl7dGhpcy5kaXN0YW5jZT0wLHRoaXMucHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLmJ1ZlBhcmFtcz1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLnByZWNpc2lvbk1vZGVsPXQsdGhpcy5idWZQYXJhbXM9ZX1mdW5jdGlvbiBpcigpe3RoaXMuc3ViZ3JhcGhzPW51bGwsdGhpcy5zZWc9bmV3IGNlLHRoaXMuY2dhPW5ldyBoZTt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zdWJncmFwaHM9dH1mdW5jdGlvbiBycigpe3RoaXMudXB3YXJkU2VnPW51bGwsdGhpcy5sZWZ0RGVwdGg9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy51cHdhcmRTZWc9bmV3IGNlKHQpLHRoaXMubGVmdERlcHRoPWV9ZnVuY3Rpb24gc3IoKXt0aGlzLmlucHV0R2VvbT1udWxsLHRoaXMuZGlzdGFuY2U9bnVsbCx0aGlzLmN1cnZlQnVpbGRlcj1udWxsLHRoaXMuY3VydmVMaXN0PW5ldyBJO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTt0aGlzLmlucHV0R2VvbT10LHRoaXMuZGlzdGFuY2U9ZSx0aGlzLmN1cnZlQnVpbGRlcj1ufWZ1bmN0aW9uIG9yKCl7dGhpcy5faGFzSW50ZXJzZWN0aW9uPSExLHRoaXMuaGFzUHJvcGVyPSExLHRoaXMuaGFzUHJvcGVySW50ZXJpb3I9ITEsdGhpcy5oYXNJbnRlcmlvcj0hMSx0aGlzLnByb3BlckludGVyc2VjdGlvblBvaW50PW51bGwsdGhpcy5saT1udWxsLHRoaXMuaXNTZWxmSW50ZXJzZWN0aW9uPW51bGwsdGhpcy5udW1JbnRlcnNlY3Rpb25zPTAsdGhpcy5udW1JbnRlcmlvckludGVyc2VjdGlvbnM9MCx0aGlzLm51bVByb3BlckludGVyc2VjdGlvbnM9MCx0aGlzLm51bVRlc3RzPTA7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubGk9dH1mdW5jdGlvbiBhcigpe3RoaXMuYnVmUGFyYW1zPW51bGwsdGhpcy53b3JraW5nUHJlY2lzaW9uTW9kZWw9bnVsbCx0aGlzLndvcmtpbmdOb2Rlcj1udWxsLHRoaXMuZ2VvbUZhY3Q9bnVsbCx0aGlzLmdyYXBoPW51bGwsdGhpcy5lZGdlTGlzdD1uZXcgbmk7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuYnVmUGFyYW1zPXR9ZnVuY3Rpb24gdXIoKXt0aGlzLmxpPW5ldyBhZSx0aGlzLnNlZ1N0cmluZ3M9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zZWdTdHJpbmdzPXR9ZnVuY3Rpb24gbHIoKXt0aGlzLmxpPW51bGwsdGhpcy5wdD1udWxsLHRoaXMub3JpZ2luYWxQdD1udWxsLHRoaXMucHRTY2FsZWQ9bnVsbCx0aGlzLnAwU2NhbGVkPW51bGwsdGhpcy5wMVNjYWxlZD1udWxsLHRoaXMuc2NhbGVGYWN0b3I9bnVsbCx0aGlzLm1pbng9bnVsbCx0aGlzLm1heHg9bnVsbCx0aGlzLm1pbnk9bnVsbCx0aGlzLm1heHk9bnVsbCx0aGlzLmNvcm5lcj1uZXcgQXJyYXkoNCkuZmlsbChudWxsKSx0aGlzLnNhZmVFbnY9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07aWYodGhpcy5vcmlnaW5hbFB0PXQsdGhpcy5wdD10LHRoaXMuc2NhbGVGYWN0b3I9ZSx0aGlzLmxpPW4sZTw9MCl0aHJvdyBuZXcgaShcIlNjYWxlIGZhY3RvciBtdXN0IGJlIG5vbi16ZXJvXCIpOzEhPT1lJiYodGhpcy5wdD1uZXcgZyh0aGlzLnNjYWxlKHQueCksdGhpcy5zY2FsZSh0LnkpKSx0aGlzLnAwU2NhbGVkPW5ldyBnLHRoaXMucDFTY2FsZWQ9bmV3IGcpLHRoaXMuaW5pdENvcm5lcnModGhpcy5wdCl9ZnVuY3Rpb24gaHIoKXt0aGlzLmluZGV4PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuaW5kZXg9dH1mdW5jdGlvbiBjcigpe2hpLmFwcGx5KHRoaXMpLHRoaXMuaG90UGl4ZWw9bnVsbCx0aGlzLnBhcmVudEVkZ2U9bnVsbCx0aGlzLmhvdFBpeGVsVmVydGV4SW5kZXg9bnVsbCx0aGlzLl9pc05vZGVBZGRlZD0hMTt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07dGhpcy5ob3RQaXhlbD10LHRoaXMucGFyZW50RWRnZT1lLHRoaXMuaG90UGl4ZWxWZXJ0ZXhJbmRleD1ufWZ1bmN0aW9uIGZyKCl7dGhpcy5saT1udWxsLHRoaXMuaW50ZXJpb3JJbnRlcnNlY3Rpb25zPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubGk9dCx0aGlzLmludGVyaW9ySW50ZXJzZWN0aW9ucz1uZXcgSX1mdW5jdGlvbiBncigpe3RoaXMucG09bnVsbCx0aGlzLmxpPW51bGwsdGhpcy5zY2FsZUZhY3Rvcj1udWxsLHRoaXMubm9kZXI9bnVsbCx0aGlzLnBvaW50U25hcHBlcj1udWxsLHRoaXMubm9kZWRTZWdTdHJpbmdzPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucG09dCx0aGlzLmxpPW5ldyBhZSx0aGlzLmxpLnNldFByZWNpc2lvbk1vZGVsKHQpLHRoaXMuc2NhbGVGYWN0b3I9dC5nZXRTY2FsZSgpfWZ1bmN0aW9uIGRyKCl7aWYodGhpcy5hcmdHZW9tPW51bGwsdGhpcy5kaXN0YW5jZT1udWxsLHRoaXMuYnVmUGFyYW1zPW5ldyBLaSx0aGlzLnJlc3VsdEdlb21ldHJ5PW51bGwsdGhpcy5zYXZlRXhjZXB0aW9uPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmFyZ0dlb209dH1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5hcmdHZW9tPWUsdGhpcy5idWZQYXJhbXM9bn19ZnVuY3Rpb24gcHIoKXt0aGlzLmNvbXBzPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuY29tcHM9dH1mdW5jdGlvbiB2cigpe2lmKHRoaXMuY29tcG9uZW50PW51bGwsdGhpcy5zZWdJbmRleD1udWxsLHRoaXMucHQ9bnVsbCwyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3ZyLmNhbGwodGhpcyx0LHZyLklOU0lERV9BUkVBLGUpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXTt0aGlzLmNvbXBvbmVudD1uLHRoaXMuc2VnSW5kZXg9aSx0aGlzLnB0PXJ9fWZ1bmN0aW9uIG1yKCl7dGhpcy5wdHM9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5wdHM9dH1mdW5jdGlvbiB5cigpe3RoaXMubG9jYXRpb25zPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubG9jYXRpb25zPXR9ZnVuY3Rpb24geHIoKXtpZih0aGlzLmdlb209bnVsbCx0aGlzLnRlcm1pbmF0ZURpc3RhbmNlPTAsdGhpcy5wdExvY2F0b3I9bmV3IFRlLHRoaXMubWluRGlzdGFuY2VMb2NhdGlvbj1udWxsLHRoaXMubWluRGlzdGFuY2U9ci5NQVhfVkFMVUUsMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt4ci5jYWxsKHRoaXMsdCxlLDApfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXTt0aGlzLmdlb209bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5nZW9tWzBdPW4sdGhpcy5nZW9tWzFdPWksdGhpcy50ZXJtaW5hdGVEaXN0YW5jZT1zfX1mdW5jdGlvbiBFcigpe3RoaXMuZmFjdG9yeT1udWxsLHRoaXMuZGlyZWN0ZWRFZGdlcz1uZXcgSSx0aGlzLmNvb3JkaW5hdGVzPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZmFjdG9yeT10fWZ1bmN0aW9uIElyKCl7dGhpcy5faXNNYXJrZWQ9ITEsdGhpcy5faXNWaXNpdGVkPSExLHRoaXMuZGF0YT1udWxsfWZ1bmN0aW9uIE5yKCl7SXIuYXBwbHkodGhpcyksdGhpcy5wYXJlbnRFZGdlPW51bGwsdGhpcy5mcm9tPW51bGwsdGhpcy50bz1udWxsLHRoaXMucDA9bnVsbCx0aGlzLnAxPW51bGwsdGhpcy5zeW09bnVsbCx0aGlzLmVkZ2VEaXJlY3Rpb249bnVsbCx0aGlzLnF1YWRyYW50PW51bGwsdGhpcy5hbmdsZT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXSxpPWFyZ3VtZW50c1szXTt0aGlzLmZyb209dCx0aGlzLnRvPWUsdGhpcy5lZGdlRGlyZWN0aW9uPWksdGhpcy5wMD10LmdldENvb3JkaW5hdGUoKSx0aGlzLnAxPW47dmFyIHI9dGhpcy5wMS54LXRoaXMucDAueCxzPXRoaXMucDEueS10aGlzLnAwLnk7dGhpcy5xdWFkcmFudD1KZS5xdWFkcmFudChyLHMpLHRoaXMuYW5nbGU9TWF0aC5hdGFuMihzLHIpfWZ1bmN0aW9uIENyKCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdO05yLmNhbGwodGhpcyx0LGUsbixpKX1mdW5jdGlvbiBTcigpe2lmKElyLmFwcGx5KHRoaXMpLHRoaXMuZGlyRWRnZT1udWxsLDA9PT1hcmd1bWVudHMubGVuZ3RoKTtlbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5zZXREaXJlY3RlZEVkZ2VzKHQsZSl9fWZ1bmN0aW9uIHdyKCl7dGhpcy5vdXRFZGdlcz1uZXcgSSx0aGlzLnNvcnRlZD0hMX1mdW5jdGlvbiBMcigpe2lmKElyLmFwcGx5KHRoaXMpLHRoaXMucHQ9bnVsbCx0aGlzLmRlU3Rhcj1udWxsLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07THIuY2FsbCh0aGlzLHQsbmV3IHdyKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5wdD1lLHRoaXMuZGVTdGFyPW59fWZ1bmN0aW9uIFJyKCl7U3IuYXBwbHkodGhpcyksdGhpcy5saW5lPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubGluZT10fWZ1bmN0aW9uIFRyKCl7dGhpcy5ub2RlTWFwPW5ldyBydH1mdW5jdGlvbiBQcigpe3RoaXMuZWRnZXM9bmV3IEosdGhpcy5kaXJFZGdlcz1uZXcgSix0aGlzLm5vZGVNYXA9bmV3IFRyfWZ1bmN0aW9uIGJyKCl7UHIuYXBwbHkodGhpcyl9ZnVuY3Rpb24gT3IoKXt0aGlzLmdyYXBoPW5ldyBicix0aGlzLm1lcmdlZExpbmVTdHJpbmdzPW51bGwsdGhpcy5mYWN0b3J5PW51bGwsdGhpcy5lZGdlU3RyaW5ncz1udWxsfWZ1bmN0aW9uIF9yKCl7dGhpcy5lZGdlUmluZz1udWxsLHRoaXMubmV4dD1udWxsLHRoaXMubGFiZWw9LTE7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdO05yLmNhbGwodGhpcyx0LGUsbixpKX1mdW5jdGlvbiBNcigpe1NyLmFwcGx5KHRoaXMpLHRoaXMubGluZT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmxpbmU9dH1mdW5jdGlvbiBEcigpe3RoaXMuZ2VvbWV0cnlGYWN0b3J5PW5ldyBpZSx0aGlzLmdlb21HcmFwaD1udWxsLHRoaXMuZGlzY29ubmVjdGVkUmluZ2Nvb3JkPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZ2VvbUdyYXBoPXR9ZnVuY3Rpb24gQXIoKXt9ZnVuY3Rpb24gRnIoKXtpZih0aGlzLmVkZ2VFbmRzPW5ldyBJLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07RnIuY2FsbCh0aGlzLG51bGwsdCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9KGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0pO0VuLmNhbGwodGhpcyxlLmdldEVkZ2UoKSxlLmdldENvb3JkaW5hdGUoKSxlLmdldERpcmVjdGVkQ29vcmRpbmF0ZSgpLG5ldyBnbihlLmdldExhYmVsKCkpKSx0aGlzLmluc2VydChlKX19ZnVuY3Rpb24gR3IoKXtQbi5hcHBseSh0aGlzKX1mdW5jdGlvbiBxcigpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt5bi5jYWxsKHRoaXMsdCxlKX1mdW5jdGlvbiBCcigpe05uLmFwcGx5KHRoaXMpfWZ1bmN0aW9uIHpyKCl7dGhpcy5ub2Rlcz1uZXcgeG4obmV3IEJyKX1mdW5jdGlvbiBWcigpe3RoaXMubGk9bmV3IGFlLHRoaXMuZ2VvbUdyYXBoPW51bGwsdGhpcy5ub2RlR3JhcGg9bmV3IHpyLHRoaXMuaW52YWxpZFBvaW50PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZ2VvbUdyYXBoPXR9ZnVuY3Rpb24ga3IoKXt0aGlzLmdyYXBoPW51bGwsdGhpcy5yaW5ncz1uZXcgSSx0aGlzLnRvdGFsRW52PW5ldyBDLHRoaXMuaW5kZXg9bnVsbCx0aGlzLm5lc3RlZFB0PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZ3JhcGg9dH1mdW5jdGlvbiBZcigpe2lmKHRoaXMuZXJyb3JUeXBlPW51bGwsdGhpcy5wdD1udWxsLDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07WXIuY2FsbCh0aGlzLHQsbnVsbCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMuZXJyb3JUeXBlPWUsbnVsbCE9PW4mJih0aGlzLnB0PW4uY29weSgpKX19ZnVuY3Rpb24gVXIoKXt0aGlzLnBhcmVudEdlb21ldHJ5PW51bGwsdGhpcy5pc1NlbGZUb3VjaGluZ1JpbmdGb3JtaW5nSG9sZVZhbGlkPSExLHRoaXMudmFsaWRFcnI9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5wYXJlbnRHZW9tZXRyeT10fWZ1bmN0aW9uIFhyKCl7dGhpcy5mYWN0b3J5PW51bGwsdGhpcy5kZUxpc3Q9bmV3IEksdGhpcy5sb3dlc3RFZGdlPW51bGwsdGhpcy5yaW5nPW51bGwsdGhpcy5yaW5nUHRzPW51bGwsdGhpcy5ob2xlcz1udWxsLHRoaXMuc2hlbGw9bnVsbCx0aGlzLl9pc0hvbGU9bnVsbCx0aGlzLl9pc1Byb2Nlc3NlZD0hMSx0aGlzLl9pc0luY2x1ZGVkU2V0PSExLHRoaXMuX2lzSW5jbHVkZWQ9ITE7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZmFjdG9yeT10fWZ1bmN0aW9uIEhyKCl7fWZ1bmN0aW9uIFdyKCl7UHIuYXBwbHkodGhpcyksdGhpcy5mYWN0b3J5PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZmFjdG9yeT10fWZ1bmN0aW9uIGpyKCl7aWYodGhpcy5saW5lU3RyaW5nQWRkZXI9bmV3IEtyKHRoaXMpLHRoaXMuZ3JhcGg9bnVsbCx0aGlzLmRhbmdsZXM9bmV3IEksdGhpcy5jdXRFZGdlcz1uZXcgSSx0aGlzLmludmFsaWRSaW5nTGluZXM9bmV3IEksdGhpcy5ob2xlTGlzdD1udWxsLHRoaXMuc2hlbGxMaXN0PW51bGwsdGhpcy5wb2x5TGlzdD1udWxsLHRoaXMuaXNDaGVja2luZ1JpbmdzVmFsaWQ9ITAsdGhpcy5leHRyYWN0T25seVBvbHlnb25hbD1udWxsLHRoaXMuZ2VvbUZhY3Rvcnk9bnVsbCwwPT09YXJndW1lbnRzLmxlbmd0aClqci5jYWxsKHRoaXMsITEpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmV4dHJhY3RPbmx5UG9seWdvbmFsPXR9fWZ1bmN0aW9uIEtyKCl7dGhpcy5wPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucD10fWZ1bmN0aW9uIFpyKCl7dGhpcy5saT1uZXcgYWUsdGhpcy5wdExvY2F0b3I9bmV3IFRlLHRoaXMuYXJnPW51bGwsdGhpcy5ub2Rlcz1uZXcgeG4obmV3IEJyKSx0aGlzLmltPW51bGwsdGhpcy5pc29sYXRlZEVkZ2VzPW5ldyBJLHRoaXMuaW52YWxpZFBvaW50PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuYXJnPXR9ZnVuY3Rpb24gUXIoKXt0aGlzLnJlY3RFbnY9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5yZWN0RW52PXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpfWZ1bmN0aW9uIEpyKCl7dGhpcy5saT1uZXcgYWUsdGhpcy5yZWN0RW52PW51bGwsdGhpcy5kaWFnVXAwPW51bGwsdGhpcy5kaWFnVXAxPW51bGwsdGhpcy5kaWFnRG93bjA9bnVsbCx0aGlzLmRpYWdEb3duMT1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnJlY3RFbnY9dCx0aGlzLmRpYWdVcDA9bmV3IGcodC5nZXRNaW5YKCksdC5nZXRNaW5ZKCkpLHRoaXMuZGlhZ1VwMT1uZXcgZyh0LmdldE1heFgoKSx0LmdldE1heFkoKSksdGhpcy5kaWFnRG93bjA9bmV3IGcodC5nZXRNaW5YKCksdC5nZXRNYXhZKCkpLHRoaXMuZGlhZ0Rvd24xPW5ldyBnKHQuZ2V0TWF4WCgpLHQuZ2V0TWluWSgpKX1mdW5jdGlvbiAkcigpe3RoaXMuX2lzRG9uZT0hMX1mdW5jdGlvbiB0cygpe3RoaXMucmVjdGFuZ2xlPW51bGwsdGhpcy5yZWN0RW52PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucmVjdGFuZ2xlPXQsdGhpcy5yZWN0RW52PXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpfWZ1bmN0aW9uIGVzKCl7JHIuYXBwbHkodGhpcyksdGhpcy5yZWN0RW52PW51bGwsdGhpcy5faW50ZXJzZWN0cz0hMTt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5yZWN0RW52PXR9ZnVuY3Rpb24gbnMoKXskci5hcHBseSh0aGlzKSx0aGlzLnJlY3RTZXE9bnVsbCx0aGlzLnJlY3RFbnY9bnVsbCx0aGlzLl9jb250YWluc1BvaW50PSExO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnJlY3RTZXE9dC5nZXRFeHRlcmlvclJpbmcoKS5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSx0aGlzLnJlY3RFbnY9dC5nZXRFbnZlbG9wZUludGVybmFsKCl9ZnVuY3Rpb24gaXMoKXskci5hcHBseSh0aGlzKSx0aGlzLnJlY3RFbnY9bnVsbCx0aGlzLnJlY3RJbnRlcnNlY3Rvcj1udWxsLHRoaXMuaGFzSW50ZXJzZWN0aW9uPSExLHRoaXMucDA9bmV3IGcsdGhpcy5wMT1uZXcgZzt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5yZWN0RW52PXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLHRoaXMucmVjdEludGVyc2VjdG9yPW5ldyBKcih0aGlzLnJlY3RFbnYpfWZ1bmN0aW9uIHJzKCl7aWYodGhpcy5fcmVsYXRlPW51bGwsMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aS5jYWxsKHRoaXMsdCxlKSx0aGlzLl9yZWxhdGU9bmV3IFpyKHRoaXMuYXJnKX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl07dGkuY2FsbCh0aGlzLG4saSxyKSx0aGlzLl9yZWxhdGU9bmV3IFpyKHRoaXMuYXJnKX19ZnVuY3Rpb24gc3MoKXt0aGlzLmdlb21GYWN0b3J5PW51bGwsdGhpcy5za2lwRW1wdHk9ITEsdGhpcy5pbnB1dEdlb21zPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuZ2VvbUZhY3Rvcnk9c3MuZXh0cmFjdEZhY3RvcnkodCksdGhpcy5pbnB1dEdlb21zPXR9ZnVuY3Rpb24gb3MoKXt0aGlzLnBvaW50R2VvbT1udWxsLHRoaXMub3RoZXJHZW9tPW51bGwsdGhpcy5nZW9tRmFjdD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLnBvaW50R2VvbT10LHRoaXMub3RoZXJHZW9tPWUsdGhpcy5nZW9tRmFjdD1lLmdldEZhY3RvcnkoKX1mdW5jdGlvbiBhcygpe3RoaXMuc29ydEluZGV4PS0xLHRoaXMuY29tcHM9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5zb3J0SW5kZXg9dCx0aGlzLmNvbXBzPWV9ZnVuY3Rpb24gdXMoKXt0aGlzLmlucHV0UG9seXM9bnVsbCx0aGlzLmdlb21GYWN0b3J5PW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuaW5wdXRQb2x5cz10LG51bGw9PT10aGlzLmlucHV0UG9seXMmJih0aGlzLmlucHV0UG9seXM9bmV3IEkpfWZ1bmN0aW9uIGxzKCl7aWYodGhpcy5wb2x5Z29ucz1uZXcgSSx0aGlzLmxpbmVzPW5ldyBJLHRoaXMucG9pbnRzPW5ldyBJLHRoaXMuZ2VvbUZhY3Q9bnVsbCwxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoUihhcmd1bWVudHNbMF0sdikpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmV4dHJhY3QodCl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEIpe3ZhciBlPWFyZ3VtZW50c1swXTt0aGlzLmV4dHJhY3QoZSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTt0aGlzLmdlb21GYWN0PWksdGhpcy5leHRyYWN0KG4pfX1mdW5jdGlvbiBocygpe190LkNvb3JkaW5hdGVPcGVyYXRpb24uYXBwbHkodGhpcyksdGhpcy50YXJnZXRQTT1udWxsLHRoaXMucmVtb3ZlQ29sbGFwc2VkPSEwO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLnRhcmdldFBNPXQsdGhpcy5yZW1vdmVDb2xsYXBzZWQ9ZX1mdW5jdGlvbiBjcygpe3RoaXMudGFyZ2V0UE09bnVsbCx0aGlzLnJlbW92ZUNvbGxhcHNlZD0hMCx0aGlzLmNoYW5nZVByZWNpc2lvbk1vZGVsPSExLHRoaXMuaXNQb2ludHdpc2U9ITE7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMudGFyZ2V0UE09dH1mdW5jdGlvbiBmcygpe3RoaXMucHRzPW51bGwsdGhpcy51c2VQdD1udWxsLHRoaXMuZGlzdGFuY2VUb2xlcmFuY2U9bnVsbCx0aGlzLnNlZz1uZXcgY2U7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucHRzPXR9ZnVuY3Rpb24gZ3MoKXt0aGlzLmlucHV0R2VvbT1udWxsLHRoaXMuZGlzdGFuY2VUb2xlcmFuY2U9bnVsbCx0aGlzLmlzRW5zdXJlVmFsaWRUb3BvbG9neT0hMDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5pbnB1dEdlb209dH1mdW5jdGlvbiBkcygpe3hlLmFwcGx5KHRoaXMpLHRoaXMuaXNFbnN1cmVWYWxpZFRvcG9sb2d5PSEwLHRoaXMuZGlzdGFuY2VUb2xlcmFuY2U9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5pc0Vuc3VyZVZhbGlkVG9wb2xvZ3k9dCx0aGlzLmRpc3RhbmNlVG9sZXJhbmNlPWV9ZnVuY3Rpb24gcHMoKXtpZih0aGlzLnBhcmVudD1udWxsLHRoaXMuaW5kZXg9bnVsbCwyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3BzLmNhbGwodGhpcyx0LGUsbnVsbCwtMSl9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzJdLHM9YXJndW1lbnRzWzNdO2NlLmNhbGwodGhpcyxuLGkpLHRoaXMucGFyZW50PXIsdGhpcy5pbmRleD1zfX1mdW5jdGlvbiB2cygpe2lmKHRoaXMucGFyZW50TGluZT1udWxsLHRoaXMuc2Vncz1udWxsLHRoaXMucmVzdWx0U2Vncz1uZXcgSSx0aGlzLm1pbmltdW1TaXplPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt2cy5jYWxsKHRoaXMsdCwyKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5wYXJlbnRMaW5lPWUsdGhpcy5taW5pbXVtU2l6ZT1uLHRoaXMuaW5pdCgpfX1mdW5jdGlvbiBtcygpe3RoaXMuaW5kZXg9bmV3IEJpfWZ1bmN0aW9uIHlzKCl7dGhpcy5xdWVyeVNlZz1udWxsLHRoaXMuaXRlbXM9bmV3IEk7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucXVlcnlTZWc9dH1mdW5jdGlvbiB4cygpe3RoaXMubGk9bmV3IGFlLHRoaXMuaW5wdXRJbmRleD1uZXcgbXMsdGhpcy5vdXRwdXRJbmRleD1uZXcgbXMsdGhpcy5saW5lPW51bGwsdGhpcy5saW5lUHRzPW51bGwsdGhpcy5kaXN0YW5jZVRvbGVyYW5jZT0wO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLmlucHV0SW5kZXg9dCx0aGlzLm91dHB1dEluZGV4PWV9ZnVuY3Rpb24gRXMoKXt0aGlzLmlucHV0SW5kZXg9bmV3IG1zLHRoaXMub3V0cHV0SW5kZXg9bmV3IG1zLHRoaXMuZGlzdGFuY2VUb2xlcmFuY2U9MH1mdW5jdGlvbiBJcygpe3RoaXMuaW5wdXRHZW9tPW51bGwsdGhpcy5saW5lU2ltcGxpZmllcj1uZXcgRXMsdGhpcy5saW5lc3RyaW5nTWFwPW51bGw7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuaW5wdXRHZW9tPXR9ZnVuY3Rpb24gTnMoKXt4ZS5hcHBseSh0aGlzKSx0aGlzLmxpbmVzdHJpbmdNYXA9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5saW5lc3RyaW5nTWFwPXR9ZnVuY3Rpb24gQ3MoKXt0aGlzLnRwcz1udWxsO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnRwcz10fWZ1bmN0aW9uIFNzKCl7dGhpcy5zZWc9bnVsbCx0aGlzLnNlZ0xlbj1udWxsLHRoaXMuc3BsaXRQdD1udWxsLHRoaXMubWluaW11bUxlbj0wO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNlZz10LHRoaXMuc2VnTGVuPXQuZ2V0TGVuZ3RoKCl9ZnVuY3Rpb24gd3MoKXt9ZnVuY3Rpb24gTHMoKXt9ZnVuY3Rpb24gUnMoKXt9ZnVuY3Rpb24gVHMoKXtpZih0aGlzLnA9bnVsbCwxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMucD1uZXcgZyh0KX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5wPW5ldyBnKGUsbil9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdLHM9YXJndW1lbnRzWzJdO3RoaXMucD1uZXcgZyhpLHIscyl9fWZ1bmN0aW9uIFBzKCl7dGhpcy5faXNPbkNvbnN0cmFpbnQ9bnVsbCx0aGlzLmNvbnN0cmFpbnQ9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07VHMuY2FsbCh0aGlzLHQpfWZ1bmN0aW9uIGJzKCl7dGhpcy5fcm90PW51bGwsdGhpcy52ZXJ0ZXg9bnVsbCx0aGlzLm5leHQ9bnVsbCx0aGlzLmRhdGE9bnVsbH1mdW5jdGlvbiBPcygpe3RoaXMuc3ViZGl2PW51bGwsdGhpcy5pc1VzaW5nVG9sZXJhbmNlPSExO3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnN1YmRpdj10LHRoaXMuaXNVc2luZ1RvbGVyYW5jZT10LmdldFRvbGVyYW5jZSgpPjB9ZnVuY3Rpb24gX3MoKXt9ZnVuY3Rpb24gTXMoKXt0aGlzLnN1YmRpdj1udWxsLHRoaXMubGFzdEVkZ2U9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zdWJkaXY9dCx0aGlzLmluaXQoKX1mdW5jdGlvbiBEcygpe2lmKHRoaXMuc2VnPW51bGwsMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciB0PWFyZ3VtZW50c1swXTtsLmNhbGwodGhpcyx0KX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgY2Upe3ZhciBlPWFyZ3VtZW50c1swXTtsLmNhbGwodGhpcyxcIkxvY2F0ZSBmYWlsZWQgdG8gY29udmVyZ2UgKGF0IGVkZ2U6IFwiK2UrXCIpLiAgUG9zc2libGUgY2F1c2VzIGluY2x1ZGUgaW52YWxpZCBTdWJkaXZpc2lvbiB0b3BvbG9neSBvciB2ZXJ5IGNsb3NlIHNpdGVzXCIpLHRoaXMuc2VnPW5ldyBjZShlKX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO2wuY2FsbCh0aGlzLERzLm1zZ1dpdGhTcGF0aWFsKG4saSkpLHRoaXMuc2VnPW5ldyBjZShpKX19ZnVuY3Rpb24gQXMoKXt9ZnVuY3Rpb24gRnMoKXt0aGlzLnZpc2l0ZWRLZXk9MCx0aGlzLnF1YWRFZGdlcz1uZXcgSSx0aGlzLnN0YXJ0aW5nRWRnZT1udWxsLHRoaXMudG9sZXJhbmNlPW51bGwsdGhpcy5lZGdlQ29pbmNpZGVuY2VUb2xlcmFuY2U9bnVsbCx0aGlzLmZyYW1lVmVydGV4PW5ldyBBcnJheSgzKS5maWxsKG51bGwpLHRoaXMuZnJhbWVFbnY9bnVsbCx0aGlzLmxvY2F0b3I9bnVsbCx0aGlzLnNlZz1uZXcgY2UsdGhpcy50cmlFZGdlcz1uZXcgQXJyYXkoMykuZmlsbChudWxsKTt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy50b2xlcmFuY2U9ZSx0aGlzLmVkZ2VDb2luY2lkZW5jZVRvbGVyYW5jZT1lL0ZzLkVER0VfQ09JTkNJREVOQ0VfVE9MX0ZBQ1RPUix0aGlzLmNyZWF0ZUZyYW1lKHQpLHRoaXMuc3RhcnRpbmdFZGdlPXRoaXMuaW5pdFN1YmRpdigpLHRoaXMubG9jYXRvcj1uZXcgTXModGhpcyl9ZnVuY3Rpb24gR3MoKXt9ZnVuY3Rpb24gcXMoKXt0aGlzLnRyaUxpc3Q9bmV3IEl9ZnVuY3Rpb24gQnMoKXt0aGlzLnRyaUxpc3Q9bmV3IEl9ZnVuY3Rpb24genMoKXt0aGlzLmNvb3JkTGlzdD1uZXcgTix0aGlzLnRyaUNvb3Jkcz1uZXcgSX1mdW5jdGlvbiBWcygpe2lmKHRoaXMubHM9bnVsbCx0aGlzLmRhdGE9bnVsbCwyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMubHM9bmV3IGNlKHQsZSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzJdO3RoaXMubHM9bmV3IGNlKG4saSksdGhpcy5kYXRhPXJ9ZWxzZSBpZig2PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHM9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdLGE9YXJndW1lbnRzWzJdLHU9YXJndW1lbnRzWzNdLGw9YXJndW1lbnRzWzRdLGg9YXJndW1lbnRzWzVdO1ZzLmNhbGwodGhpcyxuZXcgZyhzLG8sYSksbmV3IGcodSxsLGgpKX1lbHNlIGlmKDc9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgYz1hcmd1bWVudHNbMF0sZj1hcmd1bWVudHNbMV0sZD1hcmd1bWVudHNbMl0scD1hcmd1bWVudHNbM10sdj1hcmd1bWVudHNbNF0sbT1hcmd1bWVudHNbNV0seT1hcmd1bWVudHNbNl07VnMuY2FsbCh0aGlzLG5ldyBnKGMsZixkKSxuZXcgZyhwLHYsbSkseSl9fWZ1bmN0aW9uIGtzKCl7fWZ1bmN0aW9uIFlzKCl7aWYodGhpcy5wPW51bGwsdGhpcy5kYXRhPW51bGwsdGhpcy5sZWZ0PW51bGwsdGhpcy5yaWdodD1udWxsLHRoaXMuY291bnQ9bnVsbCwyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMucD1uZXcgZyh0KSx0aGlzLmxlZnQ9bnVsbCx0aGlzLnJpZ2h0PW51bGwsdGhpcy5jb3VudD0xLHRoaXMuZGF0YT1lfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXTt0aGlzLnA9bmV3IGcobixpKSx0aGlzLmxlZnQ9bnVsbCx0aGlzLnJpZ2h0PW51bGwsdGhpcy5jb3VudD0xLHRoaXMuZGF0YT1yfX1mdW5jdGlvbiBVcygpe2lmKHRoaXMucm9vdD1udWxsLHRoaXMubnVtYmVyT2ZOb2Rlcz1udWxsLHRoaXMudG9sZXJhbmNlPW51bGwsMD09PWFyZ3VtZW50cy5sZW5ndGgpVXMuY2FsbCh0aGlzLDApO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnRvbGVyYW5jZT10fX1mdW5jdGlvbiBYcygpe3RoaXMudG9sZXJhbmNlPW51bGwsdGhpcy5tYXRjaE5vZGU9bnVsbCx0aGlzLm1hdGNoRGlzdD0wLHRoaXMucD1udWxsO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0aGlzLnA9dCx0aGlzLnRvbGVyYW5jZT1lfWZ1bmN0aW9uIEhzKCl7dGhpcy5pbml0aWFsVmVydGljZXM9bnVsbCx0aGlzLnNlZ1ZlcnRpY2VzPW51bGwsdGhpcy5zZWdtZW50cz1uZXcgSSx0aGlzLnN1YmRpdj1udWxsLHRoaXMuaW5jRGVsPW51bGwsdGhpcy5jb252ZXhIdWxsPW51bGwsdGhpcy5zcGxpdEZpbmRlcj1uZXcgTHMsdGhpcy5rZHQ9bnVsbCx0aGlzLnZlcnRleEZhY3Rvcnk9bnVsbCx0aGlzLmNvbXB1dGVBcmVhRW52PW51bGwsdGhpcy5zcGxpdFB0PW51bGwsdGhpcy50b2xlcmFuY2U9bnVsbDt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5pbml0aWFsVmVydGljZXM9bmV3IEkodCksdGhpcy50b2xlcmFuY2U9ZSx0aGlzLmtkdD1uZXcgVXMoZSl9ZnVuY3Rpb24gV3MoKXt0aGlzLnNpdGVDb29yZHM9bnVsbCx0aGlzLnRvbGVyYW5jZT0wLHRoaXMuc3ViZGl2PW51bGx9ZnVuY3Rpb24ganMoKXt0aGlzLnNpdGVDb29yZHM9bnVsbCx0aGlzLmNvbnN0cmFpbnRMaW5lcz1udWxsLHRoaXMudG9sZXJhbmNlPTAsdGhpcy5zdWJkaXY9bnVsbCx0aGlzLmNvbnN0cmFpbnRWZXJ0ZXhNYXA9bmV3IHJ0fWZ1bmN0aW9uIEtzKCl7dGhpcy5zaXRlQ29vcmRzPW51bGwsdGhpcy50b2xlcmFuY2U9MCx0aGlzLnN1YmRpdj1udWxsLHRoaXMuY2xpcEVudj1udWxsLHRoaXMuZGlhZ3JhbUVudj1udWxsfWZ1bmN0aW9uIFpzKCl7fVwiZmlsbFwiaW4gQXJyYXkucHJvdG90eXBlfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLFwiZmlsbFwiLHtjb25maWd1cmFibGU6ITAsdmFsdWU6ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dGhpc3x8bnVsbD09PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzK1wiIGlzIG5vdCBhbiBvYmplY3RcIik7dmFyIGU9T2JqZWN0KHRoaXMpLG49TWF0aC5tYXgoTWF0aC5taW4oZS5sZW5ndGgsOTAwNzE5OTI1NDc0MDk5MSksMCl8fDAsaT0xIGluIGFyZ3VtZW50cz9wYXJzZUludChOdW1iZXIoYXJndW1lbnRzWzFdKSwxMCl8fDA6MDtpPWk8MD9NYXRoLm1heChuK2ksMCk6TWF0aC5taW4oaSxuKTt2YXIgcj0yIGluIGFyZ3VtZW50cyYmdm9pZCAwIT09YXJndW1lbnRzWzJdP3BhcnNlSW50KE51bWJlcihhcmd1bWVudHNbMl0pLDEwKXx8MDpuO2ZvcihyPXI8MD9NYXRoLm1heChuK2FyZ3VtZW50c1syXSwwKTpNYXRoLm1pbihyLG4pO2k8cjspZVtpXT10LCsraTtyZXR1cm4gZX0sd3JpdGFibGU6ITB9KSxOdW1iZXIuaXNGaW5pdGU9TnVtYmVyLmlzRmluaXRlfHxmdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmaXNGaW5pdGUodCl9LE51bWJlci5pc0ludGVnZXI9TnVtYmVyLmlzSW50ZWdlcnx8ZnVuY3Rpb24odCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQmJmlzRmluaXRlKHQpJiZNYXRoLmZsb29yKHQpPT09dH0sTnVtYmVyLnBhcnNlRmxvYXQ9TnVtYmVyLnBhcnNlRmxvYXR8fHBhcnNlRmxvYXQsTnVtYmVyLmlzTmFOPU51bWJlci5pc05hTnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQhPT10fSxNYXRoLnRydW5jPU1hdGgudHJ1bmN8fGZ1bmN0aW9uKHQpe3JldHVybiB0PDA/TWF0aC5jZWlsKHQpOk1hdGguZmxvb3IodCl9LGUobi5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIG59fSksbi5lcXVhbHNXaXRoVG9sZXJhbmNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gTWF0aC5hYnModC1lKTw9bn0sci5pc05hTj1mdW5jdGlvbih0KXtyZXR1cm4gTnVtYmVyLmlzTmFOKHQpfSxyLmRvdWJsZVRvTG9uZ0JpdHM9ZnVuY3Rpb24odCl7cmV0dXJuIHR9LHIubG9uZ0JpdHNUb0RvdWJsZT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sci5pc0luZmluaXRlPWZ1bmN0aW9uKHQpe3JldHVybiFOdW1iZXIuaXNGaW5pdGUodCl9LHIuTUFYX1ZBTFVFPU51bWJlci5NQVhfVkFMVUUsbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLGwucHJvdG90eXBlLmNvbnN0cnVjdG9yPUVycm9yLGgoYyxsKSxlKGMucHJvdG90eXBlLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBjfX0pLGUoZi5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGZ9fSksZi5zaG91bGROZXZlclJlYWNoSGVyZT1mdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKWYuc2hvdWxkTmV2ZXJSZWFjaEhlcmUobnVsbCk7ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3Rocm93IG5ldyBjKFwiU2hvdWxkIG5ldmVyIHJlYWNoIGhlcmVcIisobnVsbCE9PXQ/XCI6IFwiK3Q6XCJcIikpfX0sZi5pc1RydWU9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO2YuaXNUcnVlKHQsbnVsbCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO2lmKCFlKXRocm93IG51bGw9PT1uP25ldyBjOm5ldyBjKG4pfX0sZi5lcXVhbHM9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO2YuZXF1YWxzKHQsZSxudWxsKX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl07aWYoIWkuZXF1YWxzKG4pKXRocm93IG5ldyBjKFwiRXhwZWN0ZWQgXCIrbitcIiBidXQgZW5jb3VudGVyZWQgXCIraSsobnVsbCE9PXI/XCI6IFwiK3I6XCJcIikpfX0sZShnLnByb3RvdHlwZSx7c2V0T3JkaW5hdGU6ZnVuY3Rpb24odCxlKXtzd2l0Y2godCl7Y2FzZSBnLlg6dGhpcy54PWU7YnJlYWs7Y2FzZSBnLlk6dGhpcy55PWU7YnJlYWs7Y2FzZSBnLlo6dGhpcy56PWU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgaShcIkludmFsaWQgb3JkaW5hdGUgaW5kZXg6IFwiK3QpfX0sZXF1YWxzMkQ6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLng9PT10LngmJnRoaXMueT09PXQueX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3JldHVybiEhbi5lcXVhbHNXaXRoVG9sZXJhbmNlKHRoaXMueCxlLngsaSkmJiEhbi5lcXVhbHNXaXRoVG9sZXJhbmNlKHRoaXMueSxlLnksaSl9fSxnZXRPcmRpbmF0ZTpmdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZSBnLlg6cmV0dXJuIHRoaXMueDtjYXNlIGcuWTpyZXR1cm4gdGhpcy55O2Nhc2UgZy5aOnJldHVybiB0aGlzLnp9dGhyb3cgbmV3IGkoXCJJbnZhbGlkIG9yZGluYXRlIGluZGV4OiBcIit0KX0sZXF1YWxzM0Q6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMueD09PXQueCYmdGhpcy55PT09dC55JiYodGhpcy56PT09dC56fHxyLmlzTmFOKHRoaXMueikmJnIuaXNOYU4odC56KSl9LGVxdWFsczpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGcmJnRoaXMuZXF1YWxzMkQodCl9LGVxdWFsSW5aOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4uZXF1YWxzV2l0aFRvbGVyYW5jZSh0aGlzLnosdC56LGUpfSxjb21wYXJlVG86ZnVuY3Rpb24odCl7dmFyIGU9dDtyZXR1cm4gdGhpcy54PGUueD8tMTp0aGlzLng+ZS54PzE6dGhpcy55PGUueT8tMTp0aGlzLnk+ZS55PzE6MH0sY2xvbmU6ZnVuY3Rpb24oKXt0cnl7dmFyIHQ9bnVsbDtyZXR1cm4gdH1jYXRjaCh0KXtpZih0IGluc3RhbmNlb2YgQ2xvbmVOb3RTdXBwb3J0ZWRFeGNlcHRpb24pcmV0dXJuIGYuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoXCJ0aGlzIHNob3VsZG4ndCBoYXBwZW4gYmVjYXVzZSB0aGlzIGNsYXNzIGlzIENsb25lYWJsZVwiKSxudWxsO3Rocm93IHR9ZmluYWxseXt9fSxjb3B5OmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBnKHRoaXMpfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwiKFwiK3RoaXMueCtcIiwgXCIrdGhpcy55K1wiLCBcIit0aGlzLnorXCIpXCJ9LGRpc3RhbmNlM0Q6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy54LXQueCxuPXRoaXMueS10LnksaT10aGlzLnotdC56O3JldHVybiBNYXRoLnNxcnQoZSplK24qbitpKmkpfSxkaXN0YW5jZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLngtdC54LG49dGhpcy55LXQueTtyZXR1cm4gTWF0aC5zcXJ0KGUqZStuKm4pfSxoYXNoQ29kZTpmdW5jdGlvbigpe3ZhciB0PTE3O3JldHVybiB0PTM3KnQrZy5oYXNoQ29kZSh0aGlzLngpLHQ9MzcqdCtnLmhhc2hDb2RlKHRoaXMueSl9LHNldENvb3JkaW5hdGU6ZnVuY3Rpb24odCl7dGhpcy54PXQueCx0aGlzLnk9dC55LHRoaXMuej10Lnp9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3Msbyx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZ319KSxnLmhhc2hDb2RlPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPXIuZG91YmxlVG9Mb25nQml0cyh0KTtyZXR1cm4gTWF0aC50cnVuYyhlXmU+Pj4zMil9fSxlKGQucHJvdG90eXBlLHtjb21wYXJlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dCxpPWUscj1kLmNvbXBhcmUobi54LGkueCk7aWYoMCE9PXIpcmV0dXJuIHI7dmFyIHM9ZC5jb21wYXJlKG4ueSxpLnkpO2lmKDAhPT1zKXJldHVybiBzO2lmKHRoaXMuZGltZW5zaW9uc1RvVGVzdDw9MilyZXR1cm4gMDt2YXIgbz1kLmNvbXBhcmUobi56LGkueik7cmV0dXJuIG99LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2FdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBkfX0pLGQuY29tcGFyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0PGU/LTE6dD5lPzE6ci5pc05hTih0KT9yLmlzTmFOKGUpPzA6LTE6ci5pc05hTihlKT8xOjB9LGcuRGltZW5zaW9uYWxDb21wYXJhdG9yPWQsZy5zZXJpYWxWZXJzaW9uVUlEPTB4NWNiZjJjMjM1YzdlNTgwMCxnLk5VTExfT1JESU5BVEU9ci5OYU4sZy5YPTAsZy5ZPTEsZy5aPTIscC5wcm90b3R5cGUuaGFzTmV4dD1mdW5jdGlvbigpe30scC5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe30scC5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7fSx2LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oKXt9LHYucHJvdG90eXBlLmFkZEFsbD1mdW5jdGlvbigpe30sdi5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe30sdi5wcm90b3R5cGUuaXRlcmF0b3I9ZnVuY3Rpb24oKXt9LHYucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXt9LHYucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXt9LHYucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe30sbS5wcm90b3R5cGU9bmV3IEVycm9yLG0ucHJvdG90eXBlLm5hbWU9XCJJbmRleE91dE9mQm91bmRzRXhjZXB0aW9uXCIseS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh2LnByb3RvdHlwZSkseS5wcm90b3R5cGUuY29uc3RydWN0b3I9eSx5LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt9LHkucHJvdG90eXBlLnNldD1mdW5jdGlvbigpe30seS5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe30seC5wcm90b3R5cGU9bmV3IEVycm9yLHgucHJvdG90eXBlLm5hbWU9XCJOb1N1Y2hFbGVtZW50RXhjZXB0aW9uXCIsRS5wcm90b3R5cGU9bmV3IEVycm9yLEUucHJvdG90eXBlLm5hbWU9XCJPcGVyYXRpb25Ob3RTdXBwb3J0ZWRcIixJLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHkucHJvdG90eXBlKSxJLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1JLEkucHJvdG90eXBlLmVuc3VyZUNhcGFjaXR5PWZ1bmN0aW9uKCl7fSxJLnByb3RvdHlwZS5pbnRlcmZhY2VzXz1mdW5jdGlvbigpe3JldHVyblt5LHZdfSxJLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMuYXJyYXlfLnB1c2godCk6dGhpcy5hcnJheV8uc3BsaWNlKGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0pLCEwfSxJLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuYXJyYXlfPVtdfSxJLnByb3RvdHlwZS5hZGRBbGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspdGhpcy5hZGQoZS5uZXh0KCkpO3JldHVybiEwfSxJLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmFycmF5X1t0XTtyZXR1cm4gdGhpcy5hcnJheV9bdF09ZSxufSxJLnByb3RvdHlwZS5pdGVyYXRvcj1mdW5jdGlvbigpe3JldHVybiBuZXcgUXModGhpcyl9LEkucHJvdG90eXBlLmdldD1mdW5jdGlvbih0KXtpZih0PDB8fHQ+PXRoaXMuc2l6ZSgpKXRocm93IG5ldyBtO3JldHVybiB0aGlzLmFycmF5X1t0XX0sSS5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5hcnJheV8ubGVuZ3RofSxJLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJyYXlfLmxlbmd0aH0sSS5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe2Zvcih2YXIgdD1bXSxlPTAsbj10aGlzLmFycmF5Xy5sZW5ndGg7ZTxuO2UrKyl0LnB1c2godGhpcy5hcnJheV9bZV0pO3JldHVybiB0fSxJLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPSExLG49MCxpPXRoaXMuYXJyYXlfLmxlbmd0aDtuPGk7bisrKWlmKHRoaXMuYXJyYXlfW25dPT09dCl7dGhpcy5hcnJheV8uc3BsaWNlKG4sMSksZT0hMDticmVha31yZXR1cm4gZX07dmFyIFFzPWZ1bmN0aW9uKHQpe3RoaXMuYXJyYXlMaXN0Xz10LHRoaXMucG9zaXRpb25fPTB9O1FzLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7aWYodGhpcy5wb3NpdGlvbl89PT10aGlzLmFycmF5TGlzdF8uc2l6ZSgpKXRocm93IG5ldyB4O3JldHVybiB0aGlzLmFycmF5TGlzdF8uZ2V0KHRoaXMucG9zaXRpb25fKyspfSxRcy5wcm90b3R5cGUuaGFzTmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBvc2l0aW9uXzx0aGlzLmFycmF5TGlzdF8uc2l6ZSgpfSxRcy5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFycmF5TGlzdF8uc2V0KHRoaXMucG9zaXRpb25fLTEsdCl9LFFzLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt0aGlzLmFycmF5TGlzdF8ucmVtb3ZlKHRoaXMuYXJyYXlMaXN0Xy5nZXQodGhpcy5wb3NpdGlvbl8pKX0saChOLEkpLGUoTi5wcm90b3R5cGUse2dldENvb3JkaW5hdGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0KHQpfSxhZGRBbGw6ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPSExLGk9dC5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl0aGlzLmFkZChpLm5leHQoKSxlKSxuPSEwO3JldHVybiBufXJldHVybiBJLnByb3RvdHlwZS5hZGRBbGwuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjbG9uZTpmdW5jdGlvbiB0KCl7Zm9yKHZhciB0PUkucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyksZT0wO2U8dGhpcy5zaXplKCk7ZSsrKXQuYWRkKGUsdGhpcy5nZXQoZSkuY29weSgpKTtyZXR1cm4gdH0sdG9Db29yZGluYXRlQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b0FycmF5KE4uY29vcmRBcnJheVR5cGUpfSxhZGQ6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO0kucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMsdCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSYmXCJib29sZWFuXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5hZGQoZSxuLCEwKSwhMH1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcmJlwiYm9vbGVhblwiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV07aWYoIXImJnRoaXMuc2l6ZSgpPj0xKXt2YXIgcz10aGlzLmdldCh0aGlzLnNpemUoKS0xKTtpZihzLmVxdWFsczJEKGkpKXJldHVybiBudWxsfUkucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMsaSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE9iamVjdCYmXCJib29sZWFuXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciBvPWFyZ3VtZW50c1swXSxhPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5hZGQobyxhKSwhMH19ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBhcmd1bWVudHNbMl0mJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkmJlwiYm9vbGVhblwiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgdT1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0saD1hcmd1bWVudHNbMl07aWYoaClmb3IodmFyIGM9MDtjPHUubGVuZ3RoO2MrKyl0aGlzLmFkZCh1W2NdLGwpO2Vsc2UgZm9yKHZhciBjPXUubGVuZ3RoLTE7Yz49MDtjLS0pdGhpcy5hZGQodVtjXSxsKTtyZXR1cm4hMH1pZihcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1syXSYmTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIGcpe3ZhciBmPWFyZ3VtZW50c1swXSxkPWFyZ3VtZW50c1sxXSxwPWFyZ3VtZW50c1syXTtpZighcCl7dmFyIHY9dGhpcy5zaXplKCk7aWYodj4wKXtpZihmPjApe3ZhciBtPXRoaXMuZ2V0KGYtMSk7aWYobS5lcXVhbHMyRChkKSlyZXR1cm4gbnVsbH1pZihmPHYpe3ZhciB5PXRoaXMuZ2V0KGYpO2lmKHkuZXF1YWxzMkQoZCkpcmV0dXJuIG51bGx9fX1JLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLGYsZCl9fWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB4PWFyZ3VtZW50c1swXSxFPWFyZ3VtZW50c1sxXSxOPWFyZ3VtZW50c1syXSxDPWFyZ3VtZW50c1szXSxTPTE7Tj5DJiYoUz0tMSk7Zm9yKHZhciBjPU47YyE9PUM7Yys9Uyl0aGlzLmFkZCh4W2NdLEUpO3JldHVybiEwfX0sY2xvc2VSaW5nOmZ1bmN0aW9uKCl7dGhpcy5zaXplKCk+MCYmdGhpcy5hZGQobmV3IGcodGhpcy5nZXQoMCkpLCExKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTn19KSxOLmNvb3JkQXJyYXlUeXBlPW5ldyBBcnJheSgwKS5maWxsKG51bGwpLGUoQy5wcm90b3R5cGUse2dldEFyZWE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRXaWR0aCgpKnRoaXMuZ2V0SGVpZ2h0KCl9LGVxdWFsczpmdW5jdGlvbih0KXtpZighKHQgaW5zdGFuY2VvZiBDKSlyZXR1cm4hMTt2YXIgZT10O3JldHVybiB0aGlzLmlzTnVsbCgpP2UuaXNOdWxsKCk6dGhpcy5tYXh4PT09ZS5nZXRNYXhYKCkmJnRoaXMubWF4eT09PWUuZ2V0TWF4WSgpJiZ0aGlzLm1pbng9PT1lLmdldE1pblgoKSYmdGhpcy5taW55PT09ZS5nZXRNaW5ZKCl9LGludGVyc2VjdGlvbjpmdW5jdGlvbih0KXtpZih0aGlzLmlzTnVsbCgpfHx0LmlzTnVsbCgpfHwhdGhpcy5pbnRlcnNlY3RzKHQpKXJldHVybiBuZXcgQzt2YXIgZT10aGlzLm1pbng+dC5taW54P3RoaXMubWlueDp0Lm1pbngsbj10aGlzLm1pbnk+dC5taW55P3RoaXMubWlueTp0Lm1pbnksaT10aGlzLm1heHg8dC5tYXh4P3RoaXMubWF4eDp0Lm1heHgscj10aGlzLm1heHk8dC5tYXh5P3RoaXMubWF4eTp0Lm1heHk7cmV0dXJuIG5ldyBDKGUsaSxuLHIpfSxpc051bGw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXh4PHRoaXMubWlueH0sZ2V0TWF4WDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heHh9LGNvdmVyczpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jb3ZlcnModC54LHQueSl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBDKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIXRoaXMuaXNOdWxsKCkmJiFlLmlzTnVsbCgpJiYoZS5nZXRNaW5YKCk+PXRoaXMubWlueCYmZS5nZXRNYXhYKCk8PXRoaXMubWF4eCYmZS5nZXRNaW5ZKCk+PXRoaXMubWlueSYmZS5nZXRNYXhZKCk8PXRoaXMubWF4eSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtyZXR1cm4hdGhpcy5pc051bGwoKSYmKG4+PXRoaXMubWlueCYmbjw9dGhpcy5tYXh4JiZpPj10aGlzLm1pbnkmJmk8PXRoaXMubWF4eSl9fSxpbnRlcnNlY3RzOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQyl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiF0aGlzLmlzTnVsbCgpJiYhdC5pc051bGwoKSYmISh0Lm1pbng+dGhpcy5tYXh4fHx0Lm1heHg8dGhpcy5taW54fHx0Lm1pbnk+dGhpcy5tYXh5fHx0Lm1heHk8dGhpcy5taW55KX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5pbnRlcnNlY3RzKGUueCxlLnkpfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV07cmV0dXJuIXRoaXMuaXNOdWxsKCkmJiEobj50aGlzLm1heHh8fG48dGhpcy5taW54fHxpPnRoaXMubWF4eXx8aTx0aGlzLm1pbnkpfX0sZ2V0TWluWTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1pbnl9LGdldE1pblg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5taW54fSxleHBhbmRUb0luY2x1ZGU6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5leHBhbmRUb0luY2x1ZGUodC54LHQueSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEMpe3ZhciBlPWFyZ3VtZW50c1swXTtpZihlLmlzTnVsbCgpKXJldHVybiBudWxsO3RoaXMuaXNOdWxsKCk/KHRoaXMubWlueD1lLmdldE1pblgoKSx0aGlzLm1heHg9ZS5nZXRNYXhYKCksdGhpcy5taW55PWUuZ2V0TWluWSgpLHRoaXMubWF4eT1lLmdldE1heFkoKSk6KGUubWlueDx0aGlzLm1pbngmJih0aGlzLm1pbng9ZS5taW54KSxlLm1heHg+dGhpcy5tYXh4JiYodGhpcy5tYXh4PWUubWF4eCksZS5taW55PHRoaXMubWlueSYmKHRoaXMubWlueT1lLm1pbnkpLGUubWF4eT50aGlzLm1heHkmJih0aGlzLm1heHk9ZS5tYXh5KSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTt0aGlzLmlzTnVsbCgpPyh0aGlzLm1pbng9bix0aGlzLm1heHg9bix0aGlzLm1pbnk9aSx0aGlzLm1heHk9aSk6KG48dGhpcy5taW54JiYodGhpcy5taW54PW4pLG4+dGhpcy5tYXh4JiYodGhpcy5tYXh4PW4pLGk8dGhpcy5taW55JiYodGhpcy5taW55PWkpLGk+dGhpcy5tYXh5JiYodGhpcy5tYXh5PWkpKX19LG1pbkV4dGVudDpmdW5jdGlvbigpe2lmKHRoaXMuaXNOdWxsKCkpcmV0dXJuIDA7dmFyIHQ9dGhpcy5nZXRXaWR0aCgpLGU9dGhpcy5nZXRIZWlnaHQoKTtyZXR1cm4gdDxlP3Q6ZX0sZ2V0V2lkdGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc051bGwoKT8wOnRoaXMubWF4eC10aGlzLm1pbnh9LGNvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLmlzTnVsbCgpP2UuaXNOdWxsKCk/MDotMTplLmlzTnVsbCgpPzE6dGhpcy5taW54PGUubWlueD8tMTp0aGlzLm1pbng+ZS5taW54PzE6dGhpcy5taW55PGUubWlueT8tMTp0aGlzLm1pbnk+ZS5taW55PzE6dGhpcy5tYXh4PGUubWF4eD8tMTp0aGlzLm1heHg+ZS5tYXh4PzE6dGhpcy5tYXh5PGUubWF4eT8tMTp0aGlzLm1heHk+ZS5tYXh5PzE6MH0sdHJhbnNsYXRlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuaXNOdWxsKCk/bnVsbDp2b2lkIHRoaXMuaW5pdCh0aGlzLmdldE1pblgoKSt0LHRoaXMuZ2V0TWF4WCgpK3QsdGhpcy5nZXRNaW5ZKCkrZSx0aGlzLmdldE1heFkoKStlKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm5cIkVudltcIit0aGlzLm1pbngrXCIgOiBcIit0aGlzLm1heHgrXCIsIFwiK3RoaXMubWlueStcIiA6IFwiK3RoaXMubWF4eStcIl1cIn0sc2V0VG9OdWxsOmZ1bmN0aW9uKCl7dGhpcy5taW54PTAsdGhpcy5tYXh4PS0xLHRoaXMubWlueT0wLHRoaXMubWF4eT0tMX0sZ2V0SGVpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNOdWxsKCk/MDp0aGlzLm1heHktdGhpcy5taW55fSxtYXhFeHRlbnQ6ZnVuY3Rpb24oKXtpZih0aGlzLmlzTnVsbCgpKXJldHVybiAwO3ZhciB0PXRoaXMuZ2V0V2lkdGgoKSxlPXRoaXMuZ2V0SGVpZ2h0KCk7cmV0dXJuIHQ+ZT90OmV9LGV4cGFuZEJ5OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmV4cGFuZEJ5KHQsdCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO2lmKHRoaXMuaXNOdWxsKCkpcmV0dXJuIG51bGw7dGhpcy5taW54LT1lLHRoaXMubWF4eCs9ZSx0aGlzLm1pbnktPW4sdGhpcy5tYXh5Kz1uLCh0aGlzLm1pbng+dGhpcy5tYXh4fHx0aGlzLm1pbnk+dGhpcy5tYXh5KSYmdGhpcy5zZXRUb051bGwoKX19LGNvbnRhaW5zOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQyl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNvdmVycyh0KX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jb3ZlcnMoZSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5jb3ZlcnMobixpKX19LGNlbnRyZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzTnVsbCgpP251bGw6bmV3IGcoKHRoaXMuZ2V0TWluWCgpK3RoaXMuZ2V0TWF4WCgpKS8yLCh0aGlzLmdldE1pblkoKSt0aGlzLmdldE1heFkoKSkvMil9LGluaXQ6ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl0aGlzLnNldFRvTnVsbCgpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuaW5pdCh0LngsdC54LHQueSx0LnkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBDKXt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5taW54PWUubWlueCx0aGlzLm1heHg9ZS5tYXh4LHRoaXMubWlueT1lLm1pbnksdGhpcy5tYXh5PWUubWF4eX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3RoaXMuaW5pdChuLngsaS54LG4ueSxpLnkpfWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXSxhPWFyZ3VtZW50c1szXTtyPHM/KHRoaXMubWlueD1yLHRoaXMubWF4eD1zKToodGhpcy5taW54PXMsdGhpcy5tYXh4PXIpLG88YT8odGhpcy5taW55PW8sdGhpcy5tYXh5PWEpOih0aGlzLm1pbnk9YSx0aGlzLm1heHk9byl9fSxnZXRNYXhZOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4eX0sZGlzdGFuY2U6ZnVuY3Rpb24odCl7aWYodGhpcy5pbnRlcnNlY3RzKHQpKXJldHVybiAwO3ZhciBlPTA7dGhpcy5tYXh4PHQubWlueD9lPXQubWlueC10aGlzLm1heHg6dGhpcy5taW54PnQubWF4eCYmKGU9dGhpcy5taW54LXQubWF4eCk7dmFyIG49MDtyZXR1cm4gdGhpcy5tYXh5PHQubWlueT9uPXQubWlueS10aGlzLm1heHk6dGhpcy5taW55PnQubWF4eSYmKG49dGhpcy5taW55LXQubWF4eSksMD09PWU/bjowPT09bj9lOk1hdGguc3FydChlKmUrbipuKX0saGFzaENvZGU6ZnVuY3Rpb24oKXt2YXIgdD0xNztyZXR1cm4gdD0zNyp0K2cuaGFzaENvZGUodGhpcy5taW54KSx0PTM3KnQrZy5oYXNoQ29kZSh0aGlzLm1heHgpLHQ9MzcqdCtnLmhhc2hDb2RlKHRoaXMubWlueSksdD0zNyp0K2cuaGFzaENvZGUodGhpcy5tYXh5KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bcyx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gQ319KSxDLmludGVyc2VjdHM9ZnVuY3Rpb24oKXtpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdO3JldHVybiBuLng+PSh0Lng8ZS54P3QueDplLngpJiZuLng8PSh0Lng+ZS54P3QueDplLngpJiZuLnk+PSh0Lnk8ZS55P3QueTplLnkpJiZuLnk8PSh0Lnk+ZS55P3QueTplLnkpfWlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl0sbz1hcmd1bWVudHNbM10sYT1NYXRoLm1pbihzLngsby54KSx1PU1hdGgubWF4KHMueCxvLngpLGw9TWF0aC5taW4oaS54LHIueCksaD1NYXRoLm1heChpLngsci54KTtyZXR1cm4hKGw+dSkmJighKGg8YSkmJihhPU1hdGgubWluKHMueSxvLnkpLHU9TWF0aC5tYXgocy55LG8ueSksbD1NYXRoLm1pbihpLnksci55KSxoPU1hdGgubWF4KGkueSxyLnkpLCEobD51KSYmIShoPGEpKSl9fSxDLnNlcmlhbFZlcnNpb25VSUQ9MHg1MTg0NWNkNTUyMTg5ODAwLGgodyxTKSxlKHcucHJvdG90eXBlLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB3fX0pLGUoTC5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEx9fSksTC50b0xvY2F0aW9uU3ltYm9sPWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlIEwuRVhURVJJT1I6cmV0dXJuXCJlXCI7Y2FzZSBMLkJPVU5EQVJZOnJldHVyblwiYlwiO2Nhc2UgTC5JTlRFUklPUjpyZXR1cm5cImlcIjtjYXNlIEwuTk9ORTpyZXR1cm5cIi1cIn10aHJvdyBuZXcgaShcIlVua25vd24gbG9jYXRpb24gdmFsdWU6IFwiK3QpfSxMLklOVEVSSU9SPTAsTC5CT1VOREFSWT0xLEwuRVhURVJJT1I9MixMLk5PTkU9LTEsZShULnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gVH19KSxULmxvZzEwPWZ1bmN0aW9uKHQpe3ZhciBlPU1hdGgubG9nKHQpO3JldHVybiByLmlzSW5maW5pdGUoZSk/ZTpyLmlzTmFOKGUpP2U6ZS9ULkxPR18xMH0sVC5taW49ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dDtyZXR1cm4gZTxyJiYocj1lKSxuPHImJihyPW4pLGk8ciYmKHI9aSkscn0sVC5jbGFtcD1mdW5jdGlvbigpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMl0mJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0mJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXTtcbnJldHVybiB0PGU/ZTp0Pm4/bjp0fWlmKE51bWJlci5pc0ludGVnZXIoYXJndW1lbnRzWzJdKSYmTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pJiZOdW1iZXIuaXNJbnRlZ2VyKGFyZ3VtZW50c1sxXSkpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXTtyZXR1cm4gaTxyP3I6aT5zP3M6aX19LFQud3JhcD1mdW5jdGlvbih0LGUpe3JldHVybiB0PDA/ZS0gLXQlZTp0JWV9LFQubWF4PWZ1bmN0aW9uKCl7aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXSxpPXQ7cmV0dXJuIGU+aSYmKGk9ZSksbj5pJiYoaT1uKSxpfWlmKDQ9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl0sYT1hcmd1bWVudHNbM10saT1yO3JldHVybiBzPmkmJihpPXMpLG8+aSYmKGk9byksYT5pJiYoaT1hKSxpfX0sVC5hdmVyYWdlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKHQrZSkvMn0sVC5MT0dfMTA9TWF0aC5sb2coMTApLFAucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbih0KXt0aGlzLnN0cis9dH0sUC5wcm90b3R5cGUuc2V0Q2hhckF0PWZ1bmN0aW9uKHQsZSl7dGhpcy5zdHI9dGhpcy5zdHIuc3Vic3RyKDAsdCkrZSt0aGlzLnN0ci5zdWJzdHIodCsxKX0sUC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RyfSxiLnByb3RvdHlwZS5pbnRWYWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfSxiLnByb3RvdHlwZS5jb21wYXJlVG89ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudmFsdWU8dD8tMTp0aGlzLnZhbHVlPnQ/MTowfSxiLmlzTmFOPWZ1bmN0aW9uKHQpe3JldHVybiBOdW1iZXIuaXNOYU4odCl9LE8uaXNXaGl0ZXNwYWNlPWZ1bmN0aW9uKHQpe3JldHVybiB0PD0zMiYmdD49MHx8MTI3PT10fSxPLnRvVXBwZXJDYXNlPWZ1bmN0aW9uKHQpe3JldHVybiB0LnRvVXBwZXJDYXNlKCl9LGUoXy5wcm90b3R5cGUse2xlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmhpPHQuaGl8fHRoaXMuaGk9PT10LmhpJiZ0aGlzLmxvPD10LmxvfSxleHRyYWN0U2lnbmlmaWNhbnREaWdpdHM6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmFicygpLGk9Xy5tYWduaXR1ZGUobi5oaSkscj1fLlRFTi5wb3coaSk7bj1uLmRpdmlkZShyKSxuLmd0KF8uVEVOKT8obj1uLmRpdmlkZShfLlRFTiksaSs9MSk6bi5sdChfLk9ORSkmJihuPW4ubXVsdGlwbHkoXy5URU4pLGktPTEpO2Zvcih2YXIgcz1pKzEsbz1uZXcgUCxhPV8uTUFYX1BSSU5UX0RJR0lUUy0xLHU9MDt1PD1hO3UrKyl7dCYmdT09PXMmJm8uYXBwZW5kKFwiLlwiKTt2YXIgbD1NYXRoLnRydW5jKG4uaGkpO2lmKGw8MClicmVhazt2YXIgaD0hMSxjPTA7bD45PyhoPSEwLGM9XCI5XCIpOmM9XCIwXCIrbCxvLmFwcGVuZChjKSxuPW4uc3VidHJhY3QoXy52YWx1ZU9mKGwpKS5tdWx0aXBseShfLlRFTiksaCYmbi5zZWxmQWRkKF8uVEVOKTt2YXIgZj0hMCxnPV8ubWFnbml0dWRlKG4uaGkpO2lmKGc8MCYmTWF0aC5hYnMoZyk+PWEtdSYmKGY9ITEpLCFmKWJyZWFrfXJldHVybiBlWzBdPWksby50b1N0cmluZygpfSxzcXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tdWx0aXBseSh0aGlzKX0sZG91YmxlVmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oaSt0aGlzLmxvfSxzdWJ0cmFjdDpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgXyl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmFkZCh0Lm5lZ2F0ZSgpKX1pZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuYWRkKC1lKX19LGVxdWFsczpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuaGk9PT10LmhpJiZ0aGlzLmxvPT09dC5sb319LGlzWmVybzpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5oaSYmMD09PXRoaXMubG99LHNlbGZTdWJ0cmFjdDpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgXyl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmlzTmFOKCk/dGhpczp0aGlzLnNlbGZBZGQoLXQuaGksLXQubG8pfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5pc05hTigpP3RoaXM6dGhpcy5zZWxmQWRkKC1lLDApfX0sZ2V0U3BlY2lhbE51bWJlclN0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzWmVybygpP1wiMC4wXCI6dGhpcy5pc05hTigpP1wiTmFOIFwiOm51bGx9LG1pbjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5sZSh0KT90aGlzOnR9LHNlbGZEaXZpZGU6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBfKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc2VsZkRpdmlkZSh0LmhpLHQubG8pfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5zZWxmRGl2aWRlKGUsMCl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPW51bGwscz1udWxsLG89bnVsbCxhPW51bGwsdT1udWxsLGw9bnVsbCxoPW51bGwsYz1udWxsO3JldHVybiB1PXRoaXMuaGkvbixsPV8uU1BMSVQqdSxyPWwtdSxjPV8uU1BMSVQqbixyPWwtcixzPXUtcixvPWMtbixoPXUqbixvPWMtbyxhPW4tbyxjPXIqby1oK3IqYStzKm8rcyphLGw9KHRoaXMuaGktaC1jK3RoaXMubG8tdSppKS9uLGM9dStsLHRoaXMuaGk9Yyx0aGlzLmxvPXUtYytsLHRoaXN9fSxkdW1wOmZ1bmN0aW9uKCl7cmV0dXJuXCJERDxcIit0aGlzLmhpK1wiLCBcIit0aGlzLmxvK1wiPlwifSxkaXZpZGU6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIF8pe3ZhciB0PWFyZ3VtZW50c1swXSxlPW51bGwsbj1udWxsLGk9bnVsbCxzPW51bGwsbz1udWxsLGE9bnVsbCx1PW51bGwsbD1udWxsO289dGhpcy5oaS90LmhpLGE9Xy5TUExJVCpvLGU9YS1vLGw9Xy5TUExJVCp0LmhpLGU9YS1lLG49by1lLGk9bC10LmhpLHU9byp0LmhpLGk9bC1pLHM9dC5oaS1pLGw9ZSppLXUrZSpzK24qaStuKnMsYT0odGhpcy5oaS11LWwrdGhpcy5sby1vKnQubG8pL3QuaGksbD1vK2E7dmFyIGg9bCxjPW8tbCthO3JldHVybiBuZXcgXyhoLGMpfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBmPWFyZ3VtZW50c1swXTtyZXR1cm4gci5pc05hTihmKT9fLmNyZWF0ZU5hTigpOl8uY29weSh0aGlzKS5zZWxmRGl2aWRlKGYsMCl9fSxnZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5oaT50LmhpfHx0aGlzLmhpPT09dC5oaSYmdGhpcy5sbz49dC5sb30scG93OmZ1bmN0aW9uKHQpe2lmKDA9PT10KXJldHVybiBfLnZhbHVlT2YoMSk7dmFyIGU9bmV3IF8odGhpcyksbj1fLnZhbHVlT2YoMSksaT1NYXRoLmFicyh0KTtpZihpPjEpZm9yKDtpPjA7KWklMj09PTEmJm4uc2VsZk11bHRpcGx5KGUpLGkvPTIsaT4wJiYoZT1lLnNxcigpKTtlbHNlIG49ZTtyZXR1cm4gdDwwP24ucmVjaXByb2NhbCgpOm59LGNlaWw6ZnVuY3Rpb24oKXtpZih0aGlzLmlzTmFOKCkpcmV0dXJuIF8uTmFOO3ZhciB0PU1hdGguY2VpbCh0aGlzLmhpKSxlPTA7cmV0dXJuIHQ9PT10aGlzLmhpJiYoZT1NYXRoLmNlaWwodGhpcy5sbykpLG5ldyBfKHQsZSl9LGNvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLmhpPGUuaGk/LTE6dGhpcy5oaT5lLmhpPzE6dGhpcy5sbzxlLmxvPy0xOnRoaXMubG8+ZS5sbz8xOjB9LHJpbnQ6ZnVuY3Rpb24oKXtpZih0aGlzLmlzTmFOKCkpcmV0dXJuIHRoaXM7dmFyIHQ9dGhpcy5hZGQoLjUpO3JldHVybiB0LmZsb29yKCl9LHNldFZhbHVlOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBfKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuaW5pdCh0KSx0aGlzfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5pbml0KGUpLHRoaXN9fSxtYXg6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2UodCk/dGhpczp0fSxzcXJ0OmZ1bmN0aW9uKCl7aWYodGhpcy5pc1plcm8oKSlyZXR1cm4gXy52YWx1ZU9mKDApO2lmKHRoaXMuaXNOZWdhdGl2ZSgpKXJldHVybiBfLk5hTjt2YXIgdD0xL01hdGguc3FydCh0aGlzLmhpKSxlPXRoaXMuaGkqdCxuPV8udmFsdWVPZihlKSxpPXRoaXMuc3VidHJhY3Qobi5zcXIoKSkscj1pLmhpKiguNSp0KTtyZXR1cm4gbi5hZGQocil9LHNlbGZBZGQ6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBfKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc2VsZkFkZCh0LmhpLHQubG8pfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBlPWFyZ3VtZW50c1swXSxuPW51bGwsaT1udWxsLHI9bnVsbCxzPW51bGwsbz1udWxsLGE9bnVsbDtyZXR1cm4gcj10aGlzLmhpK2Usbz1yLXRoaXMuaGkscz1yLW8scz1lLW8rKHRoaXMuaGktcyksYT1zK3RoaXMubG8sbj1yK2EsaT1hKyhyLW4pLHRoaXMuaGk9bitpLHRoaXMubG89aSsobi10aGlzLmhpKSx0aGlzfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdT1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0sbj1udWxsLGk9bnVsbCxoPW51bGwsYz1udWxsLHI9bnVsbCxzPW51bGwsbz1udWxsLGE9bnVsbDtyPXRoaXMuaGkrdSxoPXRoaXMubG8rbCxvPXItdGhpcy5oaSxhPWgtdGhpcy5sbyxzPXItbyxjPWgtYSxzPXUtbysodGhpcy5oaS1zKSxjPWwtYSsodGhpcy5sby1jKSxvPXMraCxuPXIrbyxpPW8rKHItbiksbz1jK2k7dmFyIGY9bitvLGc9bysobi1mKTtyZXR1cm4gdGhpcy5oaT1mLHRoaXMubG89Zyx0aGlzfX0sc2VsZk11bHRpcGx5OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgXyl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLnNlbGZNdWx0aXBseSh0LmhpLHQubG8pfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5zZWxmTXVsdGlwbHkoZSwwKX19ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9bnVsbCxzPW51bGwsbz1udWxsLGE9bnVsbCx1PW51bGwsbD1udWxsO3U9Xy5TUExJVCp0aGlzLmhpLHI9dS10aGlzLmhpLGw9Xy5TUExJVCpuLHI9dS1yLHM9dGhpcy5oaS1yLG89bC1uLHU9dGhpcy5oaSpuLG89bC1vLGE9bi1vLGw9cipvLXUrciphK3MqbytzKmErKHRoaXMuaGkqaSt0aGlzLmxvKm4pO3ZhciBoPXUrbDtyPXUtaDt2YXIgYz1sK3I7cmV0dXJuIHRoaXMuaGk9aCx0aGlzLmxvPWMsdGhpc319LHNlbGZTcXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxmTXVsdGlwbHkodGhpcyl9LGZsb29yOmZ1bmN0aW9uKCl7aWYodGhpcy5pc05hTigpKXJldHVybiBfLk5hTjt2YXIgdD1NYXRoLmZsb29yKHRoaXMuaGkpLGU9MDtyZXR1cm4gdD09PXRoaXMuaGkmJihlPU1hdGguZmxvb3IodGhpcy5sbykpLG5ldyBfKHQsZSl9LG5lZ2F0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzTmFOKCk/dGhpczpuZXcgXygoLXRoaXMuaGkpLCgtdGhpcy5sbykpfSxjbG9uZTpmdW5jdGlvbigpe3RyeXtyZXR1cm4gbnVsbH1jYXRjaCh0KXtpZih0IGluc3RhbmNlb2YgQ2xvbmVOb3RTdXBwb3J0ZWRFeGNlcHRpb24pcmV0dXJuIG51bGw7dGhyb3cgdH1maW5hbGx5e319LG11bHRpcGx5OmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBfKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHQuaXNOYU4oKT9fLmNyZWF0ZU5hTigpOl8uY29weSh0aGlzKS5zZWxmTXVsdGlwbHkodCl9aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiByLmlzTmFOKGUpP18uY3JlYXRlTmFOKCk6Xy5jb3B5KHRoaXMpLnNlbGZNdWx0aXBseShlLDApfX0saXNOYU46ZnVuY3Rpb24oKXtyZXR1cm4gci5pc05hTih0aGlzLmhpKX0saW50VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC50cnVuYyh0aGlzLmhpKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXt2YXIgdD1fLm1hZ25pdHVkZSh0aGlzLmhpKTtyZXR1cm4gdD49LTMmJnQ8PTIwP3RoaXMudG9TdGFuZGFyZE5vdGF0aW9uKCk6dGhpcy50b1NjaU5vdGF0aW9uKCl9LHRvU3RhbmRhcmROb3RhdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0U3BlY2lhbE51bWJlclN0cmluZygpO2lmKG51bGwhPT10KXJldHVybiB0O3ZhciBlPW5ldyBBcnJheSgxKS5maWxsKG51bGwpLG49dGhpcy5leHRyYWN0U2lnbmlmaWNhbnREaWdpdHMoITAsZSksaT1lWzBdKzEscj1uO2lmKFwiLlwiPT09bi5jaGFyQXQoMCkpcj1cIjBcIituO2Vsc2UgaWYoaTwwKXI9XCIwLlwiK18uc3RyaW5nT2ZDaGFyKFwiMFwiLC1pKStuO2Vsc2UgaWYobi5pbmRleE9mKFwiLlwiKT09PS0xKXt2YXIgcz1pLW4ubGVuZ3RoLG89Xy5zdHJpbmdPZkNoYXIoXCIwXCIscyk7cj1uK28rXCIuMFwifXJldHVybiB0aGlzLmlzTmVnYXRpdmUoKT9cIi1cIityOnJ9LHJlY2lwcm9jYWw6ZnVuY3Rpb24oKXt2YXIgdD1udWxsLGU9bnVsbCxuPW51bGwsaT1udWxsLHI9bnVsbCxzPW51bGwsbz1udWxsLGE9bnVsbDtyPTEvdGhpcy5oaSxzPV8uU1BMSVQqcix0PXMtcixhPV8uU1BMSVQqdGhpcy5oaSx0PXMtdCxlPXItdCxuPWEtdGhpcy5oaSxvPXIqdGhpcy5oaSxuPWEtbixpPXRoaXMuaGktbixhPXQqbi1vK3QqaStlKm4rZSppLHM9KDEtby1hLXIqdGhpcy5sbykvdGhpcy5oaTt2YXIgdT1yK3MsbD1yLXUrcztyZXR1cm4gbmV3IF8odSxsKX0sdG9TY2lOb3RhdGlvbjpmdW5jdGlvbigpe2lmKHRoaXMuaXNaZXJvKCkpcmV0dXJuIF8uU0NJX05PVF9aRVJPO3ZhciB0PXRoaXMuZ2V0U3BlY2lhbE51bWJlclN0cmluZygpO2lmKG51bGwhPT10KXJldHVybiB0O3ZhciBlPW5ldyBBcnJheSgxKS5maWxsKG51bGwpLG49dGhpcy5leHRyYWN0U2lnbmlmaWNhbnREaWdpdHMoITEsZSksaT1fLlNDSV9OT1RfRVhQT05FTlRfQ0hBUitlWzBdO2lmKFwiMFwiPT09bi5jaGFyQXQoMCkpdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbihcIkZvdW5kIGxlYWRpbmcgemVybzogXCIrbik7dmFyIHI9XCJcIjtuLmxlbmd0aD4xJiYocj1uLnN1YnN0cmluZygxKSk7dmFyIHM9bi5jaGFyQXQoMCkrXCIuXCIrcjtyZXR1cm4gdGhpcy5pc05lZ2F0aXZlKCk/XCItXCIrcytpOnMraX0sYWJzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNOYU4oKT9fLk5hTjp0aGlzLmlzTmVnYXRpdmUoKT90aGlzLm5lZ2F0ZSgpOm5ldyBfKHRoaXMpfSxpc1Bvc2l0aXZlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGk+MHx8MD09PXRoaXMuaGkmJnRoaXMubG8+MH0sbHQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaGk8dC5oaXx8dGhpcy5oaT09PXQuaGkmJnRoaXMubG88dC5sb30sYWRkOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBfKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIF8uY29weSh0aGlzKS5zZWxmQWRkKHQpfWlmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gXy5jb3B5KHRoaXMpLnNlbGZBZGQoZSl9fSxpbml0OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmhpPXQsdGhpcy5sbz0wfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBfKXt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5oaT1lLmhpLHRoaXMubG89ZS5sb319ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3RoaXMuaGk9bix0aGlzLmxvPWl9fSxndDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5oaT50LmhpfHx0aGlzLmhpPT09dC5oaSYmdGhpcy5sbz50LmxvfSxpc05lZ2F0aXZlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGk8MHx8MD09PXRoaXMuaGkmJnRoaXMubG88MH0sdHJ1bmM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc05hTigpP18uTmFOOnRoaXMuaXNQb3NpdGl2ZSgpP3RoaXMuZmxvb3IoKTp0aGlzLmNlaWwoKX0sc2lnbnVtOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGk+MD8xOnRoaXMuaGk8MD8tMTp0aGlzLmxvPjA/MTp0aGlzLmxvPDA/LTE6MH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bdSxzLG9dfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBffX0pLF8uc3FyPWZ1bmN0aW9uKHQpe3JldHVybiBfLnZhbHVlT2YodCkuc2VsZk11bHRpcGx5KHQpfSxfLnZhbHVlT2Y9ZnVuY3Rpb24oKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIF8ucGFyc2UodCl9aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiBuZXcgXyhlKX19LF8uc3FydD1mdW5jdGlvbih0KXtyZXR1cm4gXy52YWx1ZU9mKHQpLnNxcnQoKX0sXy5wYXJzZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPXQubGVuZ3RoO08uaXNXaGl0ZXNwYWNlKHQuY2hhckF0KGUpKTspZSsrO3ZhciBpPSExO2lmKGU8bil7dmFyIHI9dC5jaGFyQXQoZSk7XCItXCIhPT1yJiZcIitcIiE9PXJ8fChlKyssXCItXCI9PT1yJiYoaT0hMCkpfWZvcih2YXIgcz1uZXcgXyxvPTAsYT0wLHU9MDs7KXtpZihlPj1uKWJyZWFrO3ZhciBsPXQuY2hhckF0KGUpO2lmKGUrKyxPLmlzRGlnaXQobCkpe3ZhciBoPWwtXCIwXCI7cy5zZWxmTXVsdGlwbHkoXy5URU4pLHMuc2VsZkFkZChoKSxvKyt9ZWxzZXtpZihcIi5cIiE9PWwpe2lmKFwiZVwiPT09bHx8XCJFXCI9PT1sKXt2YXIgYz10LnN1YnN0cmluZyhlKTt0cnl7dT1iLnBhcnNlSW50KGMpfWNhdGNoKGUpe3Rocm93IGUgaW5zdGFuY2VvZiBOdW1iZXJGb3JtYXRFeGNlcHRpb24/bmV3IE51bWJlckZvcm1hdEV4Y2VwdGlvbihcIkludmFsaWQgZXhwb25lbnQgXCIrYytcIiBpbiBzdHJpbmcgXCIrdCk6ZX1maW5hbGx5e31icmVha310aHJvdyBuZXcgTnVtYmVyRm9ybWF0RXhjZXB0aW9uKFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgJ1wiK2wrXCInIGF0IHBvc2l0aW9uIFwiK2UrXCIgaW4gc3RyaW5nIFwiK3QpfWE9b319dmFyIGY9cyxnPW8tYS11O2lmKDA9PT1nKWY9cztlbHNlIGlmKGc+MCl7dmFyIGQ9Xy5URU4ucG93KGcpO2Y9cy5kaXZpZGUoZCl9ZWxzZSBpZihnPDApe3ZhciBkPV8uVEVOLnBvdygtZyk7Zj1zLm11bHRpcGx5KGQpfXJldHVybiBpP2YubmVnYXRlKCk6Zn0sXy5jcmVhdGVOYU49ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IF8oci5OYU4sci5OYU4pfSxfLmNvcHk9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBfKHQpfSxfLm1hZ25pdHVkZT1mdW5jdGlvbih0KXt2YXIgZT1NYXRoLmFicyh0KSxuPU1hdGgubG9nKGUpL01hdGgubG9nKDEwKSxpPU1hdGgudHJ1bmMoTWF0aC5mbG9vcihuKSkscj1NYXRoLnBvdygxMCxpKTtyZXR1cm4gMTAqcjw9ZSYmKGkrPTEpLGl9LF8uc3RyaW5nT2ZDaGFyPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPW5ldyBQLGk9MDtpPGU7aSsrKW4uYXBwZW5kKHQpO3JldHVybiBuLnRvU3RyaW5nKCl9LF8uUEk9bmV3IF8oMy4xNDE1OTI2NTM1ODk3OTMsMS4yMjQ2NDY3OTkxNDczNTMyZS0xNiksXy5UV09fUEk9bmV3IF8oNi4yODMxODUzMDcxNzk1ODYsMi40NDkyOTM1OTgyOTQ3MDY0ZS0xNiksXy5QSV8yPW5ldyBfKDEuNTcwNzk2MzI2Nzk0ODk2Niw2LjEyMzIzMzk5NTczNjc2NmUtMTcpLF8uRT1uZXcgXygyLjcxODI4MTgyODQ1OTA0NSwxLjQ0NTY0Njg5MTcyOTI1MDJlLTE2KSxfLk5hTj1uZXcgXyhyLk5hTixyLk5hTiksXy5FUFM9MS4yMzI1OTUxNjQ0MDc4M2UtMzIsXy5TUExJVD0xMzQyMTc3MjksXy5NQVhfUFJJTlRfRElHSVRTPTMyLF8uVEVOPV8udmFsdWVPZigxMCksXy5PTkU9Xy52YWx1ZU9mKDEpLF8uU0NJX05PVF9FWFBPTkVOVF9DSEFSPVwiRVwiLF8uU0NJX05PVF9aRVJPPVwiMC4wRTBcIixlKE0ucHJvdG90eXBlLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBNfX0pLE0ub3JpZW50YXRpb25JbmRleD1mdW5jdGlvbih0LGUsbil7dmFyIGk9TS5vcmllbnRhdGlvbkluZGV4RmlsdGVyKHQsZSxuKTtpZihpPD0xKXJldHVybiBpO3ZhciByPV8udmFsdWVPZihlLngpLnNlbGZBZGQoLXQueCkscz1fLnZhbHVlT2YoZS55KS5zZWxmQWRkKC10LnkpLG89Xy52YWx1ZU9mKG4ueCkuc2VsZkFkZCgtZS54KSxhPV8udmFsdWVPZihuLnkpLnNlbGZBZGQoLWUueSk7cmV0dXJuIHIuc2VsZk11bHRpcGx5KGEpLnNlbGZTdWJ0cmFjdChzLnNlbGZNdWx0aXBseShvKSkuc2lnbnVtKCl9LE0uc2lnbk9mRGV0MngyPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXQubXVsdGlwbHkoaSkuc2VsZlN1YnRyYWN0KGUubXVsdGlwbHkobikpO3JldHVybiByLnNpZ251bSgpfSxNLmludGVyc2VjdGlvbj1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1fLnZhbHVlT2YoaS55KS5zZWxmU3VidHJhY3Qobi55KS5zZWxmTXVsdGlwbHkoXy52YWx1ZU9mKGUueCkuc2VsZlN1YnRyYWN0KHQueCkpLHM9Xy52YWx1ZU9mKGkueCkuc2VsZlN1YnRyYWN0KG4ueCkuc2VsZk11bHRpcGx5KF8udmFsdWVPZihlLnkpLnNlbGZTdWJ0cmFjdCh0LnkpKSxvPXIuc3VidHJhY3QocyksYT1fLnZhbHVlT2YoaS54KS5zZWxmU3VidHJhY3Qobi54KS5zZWxmTXVsdGlwbHkoXy52YWx1ZU9mKHQueSkuc2VsZlN1YnRyYWN0KG4ueSkpLHU9Xy52YWx1ZU9mKGkueSkuc2VsZlN1YnRyYWN0KG4ueSkuc2VsZk11bHRpcGx5KF8udmFsdWVPZih0LngpLnNlbGZTdWJ0cmFjdChuLngpKSxsPWEuc3VidHJhY3QodSksaD1sLnNlbGZEaXZpZGUobykuZG91YmxlVmFsdWUoKSxjPV8udmFsdWVPZih0LngpLnNlbGZBZGQoXy52YWx1ZU9mKGUueCkuc2VsZlN1YnRyYWN0KHQueCkuc2VsZk11bHRpcGx5KGgpKS5kb3VibGVWYWx1ZSgpLGY9Xy52YWx1ZU9mKGUueCkuc2VsZlN1YnRyYWN0KHQueCkuc2VsZk11bHRpcGx5KF8udmFsdWVPZih0LnkpLnNlbGZTdWJ0cmFjdChuLnkpKSxkPV8udmFsdWVPZihlLnkpLnNlbGZTdWJ0cmFjdCh0LnkpLnNlbGZNdWx0aXBseShfLnZhbHVlT2YodC54KS5zZWxmU3VidHJhY3Qobi54KSkscD1mLnN1YnRyYWN0KGQpLHY9cC5zZWxmRGl2aWRlKG8pLmRvdWJsZVZhbHVlKCksbT1fLnZhbHVlT2Yobi55KS5zZWxmQWRkKF8udmFsdWVPZihpLnkpLnNlbGZTdWJ0cmFjdChuLnkpLnNlbGZNdWx0aXBseSh2KSkuZG91YmxlVmFsdWUoKTtyZXR1cm4gbmV3IGcoYyxtKX0sTS5vcmllbnRhdGlvbkluZGV4RmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1udWxsLHI9KHQueC1uLngpKihlLnktbi55KSxzPSh0Lnktbi55KSooZS54LW4ueCksbz1yLXM7aWYocj4wKXtpZihzPD0wKXJldHVybiBNLnNpZ251bShvKTtpPXIrc31lbHNle2lmKCEocjwwKSlyZXR1cm4gTS5zaWdudW0obyk7aWYocz49MClyZXR1cm4gTS5zaWdudW0obyk7aT0tci1zfXZhciBhPU0uRFBfU0FGRV9FUFNJTE9OKmk7cmV0dXJuIG8+PWF8fC1vPj1hP00uc2lnbnVtKG8pOjJ9LE0uc2lnbnVtPWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/MTp0PDA/LTE6MH0sTS5EUF9TQUZFX0VQU0lMT049MWUtMTUsZShELnByb3RvdHlwZSx7c2V0T3JkaW5hdGU6ZnVuY3Rpb24odCxlLG4pe30sc2l6ZTpmdW5jdGlvbigpe30sZ2V0T3JkaW5hdGU6ZnVuY3Rpb24odCxlKXt9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7YXJndW1lbnRzWzBdfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2FyZ3VtZW50c1swXSxhcmd1bWVudHNbMV19fSxnZXRDb29yZGluYXRlQ29weTpmdW5jdGlvbih0KXt9LGdldERpbWVuc2lvbjpmdW5jdGlvbigpe30sZ2V0WDpmdW5jdGlvbih0KXt9LGNsb25lOmZ1bmN0aW9uKCl7fSxleHBhbmRFbnZlbG9wZTpmdW5jdGlvbih0KXt9LGNvcHk6ZnVuY3Rpb24oKXt9LGdldFk6ZnVuY3Rpb24odCl7fSx0b0Nvb3JkaW5hdGVBcnJheTpmdW5jdGlvbigpe30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bb119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIER9fSksRC5YPTAsRC5ZPTEsRC5aPTIsRC5NPTMsQS5hcnJheWNvcHk9ZnVuY3Rpb24odCxlLG4saSxyKXtmb3IodmFyIHM9MCxvPWU7bzxlK3I7bysrKW5baStzXT10W29dLHMrK30sQS5nZXRQcm9wZXJ0eT1mdW5jdGlvbih0KXtyZXR1cm57XCJsaW5lLnNlcGFyYXRvclwiOlwiXFxuXCJ9W3RdfSxlKEYucHJvdG90eXBlLHtnZXRZOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy55L3RoaXMudztpZihyLmlzTmFOKHQpfHxyLmlzSW5maW5pdGUodCkpdGhyb3cgbmV3IHc7cmV0dXJuIHR9LGdldFg6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLngvdGhpcy53O2lmKHIuaXNOYU4odCl8fHIuaXNJbmZpbml0ZSh0KSl0aHJvdyBuZXcgdztyZXR1cm4gdH0sZ2V0Q29vcmRpbmF0ZTpmdW5jdGlvbigpe3ZhciB0PW5ldyBnO3JldHVybiB0Lng9dGhpcy5nZXRYKCksdC55PXRoaXMuZ2V0WSgpLHR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEZ9fSksRi5pbnRlcnNlY3Rpb249ZnVuY3Rpb24odCxlLG4saSl7dmFyIHM9dC55LWUueSxvPWUueC10LngsYT10LngqZS55LWUueCp0LnksdT1uLnktaS55LGw9aS54LW4ueCxoPW4ueCppLnktaS54Km4ueSxjPW8qaC1sKmEsZj11KmEtcypoLGQ9cypsLXUqbyxwPWMvZCx2PWYvZDtpZihyLmlzTmFOKHApfHxyLmlzSW5maW5pdGUocCl8fHIuaXNOYU4odil8fHIuaXNJbmZpbml0ZSh2KSl0aHJvdyBuZXcgdztyZXR1cm4gbmV3IGcocCx2KX0sZShHLnByb3RvdHlwZSx7Y3JlYXRlOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe2FyZ3VtZW50c1swXX1lbHNlIGlmKFIoYXJndW1lbnRzWzBdLEQpKXthcmd1bWVudHNbMF19fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2FyZ3VtZW50c1swXSxhcmd1bWVudHNbMV19fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBHfX0pLGUocS5wcm90b3R5cGUse2ZpbHRlcjpmdW5jdGlvbih0KXt9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHF9fSksZShCLnByb3RvdHlwZSx7aXNHZW9tZXRyeUNvbGxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRTb3J0SW5kZXgoKT09PUIuU09SVElOREVYX0dFT01FVFJZQ09MTEVDVElPTn0sZ2V0RmFjdG9yeTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZhY3Rvcnl9LGdldEdlb21ldHJ5TjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpc30sZ2V0QXJlYTpmdW5jdGlvbigpe3JldHVybiAwfSxpc1JlY3RhbmdsZTpmdW5jdGlvbigpe3JldHVybiExfSxlcXVhbHM6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIG51bGwhPT10JiZ0aGlzLmVxdWFsc1RvcG8odCl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBPYmplY3Qpe3ZhciBlPWFyZ3VtZW50c1swXTtpZighKGUgaW5zdGFuY2VvZiBCKSlyZXR1cm4hMTt2YXIgbj1lO3JldHVybiB0aGlzLmVxdWFsc0V4YWN0KG4pfX19LGVxdWFsc0V4YWN0OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzPT09dHx8dGhpcy5lcXVhbHNFeGFjdCh0LDApfSxnZW9tZXRyeUNoYW5nZWQ6ZnVuY3Rpb24oKXt0aGlzLmFwcGx5KEIuZ2VvbWV0cnlDaGFuZ2VkRmlsdGVyKX0sZ2VvbWV0cnlDaGFuZ2VkQWN0aW9uOmZ1bmN0aW9uKCl7dGhpcy5lbnZlbG9wZT1udWxsfSxlcXVhbHNOb3JtOmZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmdGhpcy5ub3JtKCkuZXF1YWxzRXhhY3QodC5ub3JtKCkpfSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gMH0sZ2V0TnVtR2VvbWV0cmllczpmdW5jdGlvbigpe3JldHVybiAxfSxjb21wYXJlVG86ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dDtyZXR1cm4gdGhpcy5nZXRTb3J0SW5kZXgoKSE9PWUuZ2V0U29ydEluZGV4KCk/dGhpcy5nZXRTb3J0SW5kZXgoKS1lLmdldFNvcnRJbmRleCgpOnRoaXMuaXNFbXB0eSgpJiZlLmlzRW1wdHkoKT8wOnRoaXMuaXNFbXB0eSgpPy0xOmUuaXNFbXB0eSgpPzE6dGhpcy5jb21wYXJlVG9TYW1lQ2xhc3ModCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxlPW47cmV0dXJuIHRoaXMuZ2V0U29ydEluZGV4KCkhPT1lLmdldFNvcnRJbmRleCgpP3RoaXMuZ2V0U29ydEluZGV4KCktZS5nZXRTb3J0SW5kZXgoKTp0aGlzLmlzRW1wdHkoKSYmZS5pc0VtcHR5KCk/MDp0aGlzLmlzRW1wdHkoKT8tMTplLmlzRW1wdHkoKT8xOnRoaXMuY29tcGFyZVRvU2FtZUNsYXNzKG4saSl9fSxnZXRVc2VyRGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnVzZXJEYXRhfSxnZXRTUklEOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuU1JJRH0sZ2V0RW52ZWxvcGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkudG9HZW9tZXRyeSh0aGlzLmdldEVudmVsb3BlSW50ZXJuYWwoKSl9LGNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uOmZ1bmN0aW9uKHQpe2lmKHQuZ2V0U29ydEluZGV4KCk9PT1CLlNPUlRJTkRFWF9HRU9NRVRSWUNPTExFQ1RJT04pdGhyb3cgbmV3IGkoXCJUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IEdlb21ldHJ5Q29sbGVjdGlvbiBhcmd1bWVudHNcIil9LGVxdWFsOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gMD09PW4/dC5lcXVhbHMoZSk6dC5kaXN0YW5jZShlKTw9bn0sbm9ybTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY29weSgpO3JldHVybiB0Lm5vcm1hbGl6ZSgpLHR9LGdldFByZWNpc2lvbk1vZGVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmFjdG9yeS5nZXRQcmVjaXNpb25Nb2RlbCgpfSxnZXRFbnZlbG9wZUludGVybmFsOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLmVudmVsb3BlJiYodGhpcy5lbnZlbG9wZT10aGlzLmNvbXB1dGVFbnZlbG9wZUludGVybmFsKCkpLG5ldyBDKHRoaXMuZW52ZWxvcGUpfSxzZXRTUklEOmZ1bmN0aW9uKHQpe3RoaXMuU1JJRD10fSxzZXRVc2VyRGF0YTpmdW5jdGlvbih0KXt0aGlzLnVzZXJEYXRhPXR9LGNvbXBhcmU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5pdGVyYXRvcigpLGk9ZS5pdGVyYXRvcigpO24uaGFzTmV4dCgpJiZpLmhhc05leHQoKTspe3ZhciByPW4ubmV4dCgpLHM9aS5uZXh0KCksbz1yLmNvbXBhcmVUbyhzKTtpZigwIT09bylyZXR1cm4gb31yZXR1cm4gbi5oYXNOZXh0KCk/MTppLmhhc05leHQoKT8tMTowfSxoYXNoQ29kZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEVudmVsb3BlSW50ZXJuYWwoKS5oYXNoQ29kZSgpfSxpc0dlb21ldHJ5Q29sbGVjdGlvbk9yRGVyaXZlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFNvcnRJbmRleCgpPT09Qi5TT1JUSU5ERVhfR0VPTUVUUllDT0xMRUNUSU9OfHx0aGlzLmdldFNvcnRJbmRleCgpPT09Qi5TT1JUSU5ERVhfTVVMVElQT0lOVHx8dGhpcy5nZXRTb3J0SW5kZXgoKT09PUIuU09SVElOREVYX01VTFRJTElORVNUUklOR3x8dGhpcy5nZXRTb3J0SW5kZXgoKT09PUIuU09SVElOREVYX01VTFRJUE9MWUdPTn0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bbyxzLHVdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBCfX0pLEIuaGFzTm9uRW1wdHlFbGVtZW50cz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZighdFtlXS5pc0VtcHR5KCkpcmV0dXJuITA7cmV0dXJuITF9LEIuaGFzTnVsbEVsZW1lbnRzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKWlmKG51bGw9PT10W2VdKXJldHVybiEwO3JldHVybiExfSxCLnNlcmlhbFZlcnNpb25VSUQ9MHg3OTllYTQ2NTIyODU0YzAwLEIuU09SVElOREVYX1BPSU5UPTAsQi5TT1JUSU5ERVhfTVVMVElQT0lOVD0xLEIuU09SVElOREVYX0xJTkVTVFJJTkc9MixCLlNPUlRJTkRFWF9MSU5FQVJSSU5HPTMsQi5TT1JUSU5ERVhfTVVMVElMSU5FU1RSSU5HPTQsQi5TT1JUSU5ERVhfUE9MWUdPTj01LEIuU09SVElOREVYX01VTFRJUE9MWUdPTj02LEIuU09SVElOREVYX0dFT01FVFJZQ09MTEVDVElPTj03LEIuZ2VvbWV0cnlDaGFuZ2VkRmlsdGVyPXtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltxXX0sZmlsdGVyOmZ1bmN0aW9uKHQpe3QuZ2VvbWV0cnlDaGFuZ2VkQWN0aW9uKCl9fSxlKHoucHJvdG90eXBlLHtmaWx0ZXI6ZnVuY3Rpb24odCl7fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB6fX0pLGUoVi5wcm90b3R5cGUse2lzSW5Cb3VuZGFyeTpmdW5jdGlvbih0KXt9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFZ9fSksZShrLnByb3RvdHlwZSx7aXNJbkJvdW5kYXJ5OmZ1bmN0aW9uKHQpe3JldHVybiB0JTI9PT0xfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltWXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4ga319KSxlKFkucHJvdG90eXBlLHtpc0luQm91bmRhcnk6ZnVuY3Rpb24odCl7cmV0dXJuIHQ+MH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bVl19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFl9fSksZShVLnByb3RvdHlwZSx7aXNJbkJvdW5kYXJ5OmZ1bmN0aW9uKHQpe3JldHVybiB0PjF9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW1ZdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBVfX0pLGUoWC5wcm90b3R5cGUse2lzSW5Cb3VuZGFyeTpmdW5jdGlvbih0KXtyZXR1cm4gMT09PXR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW1ZdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBYfX0pLFYuTW9kMkJvdW5kYXJ5Tm9kZVJ1bGU9ayxWLkVuZFBvaW50Qm91bmRhcnlOb2RlUnVsZT1ZLFYuTXVsdGlWYWxlbnRFbmRQb2ludEJvdW5kYXJ5Tm9kZVJ1bGU9VSxWLk1vbm9WYWxlbnRFbmRQb2ludEJvdW5kYXJ5Tm9kZVJ1bGU9WCxWLk1PRDJfQk9VTkRBUllfUlVMRT1uZXcgayxWLkVORFBPSU5UX0JPVU5EQVJZX1JVTEU9bmV3IFksVi5NVUxUSVZBTEVOVF9FTkRQT0lOVF9CT1VOREFSWV9SVUxFPW5ldyBVLFYuTU9OT1ZBTEVOVF9FTkRQT0lOVF9CT1VOREFSWV9SVUxFPW5ldyBYLFYuT0dDX1NGU19CT1VOREFSWV9SVUxFPVYuTU9EMl9CT1VOREFSWV9SVUxFLGUoSC5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEh9fSksSC5pc1Jpbmc9ZnVuY3Rpb24odCl7cmV0dXJuISh0Lmxlbmd0aDw0KSYmISF0WzBdLmVxdWFsczJEKHRbdC5sZW5ndGgtMV0pfSxILnB0Tm90SW5MaXN0PWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBpPXRbbl07aWYoSC5pbmRleE9mKGksZSk8MClyZXR1cm4gaX1yZXR1cm4gbnVsbH0sSC5zY3JvbGw9ZnVuY3Rpb24odCxlKXt2YXIgbj1ILmluZGV4T2YoZSx0KTtpZihuPDApcmV0dXJuIG51bGw7dmFyIGk9bmV3IEFycmF5KHQubGVuZ3RoKS5maWxsKG51bGwpO0EuYXJyYXljb3B5KHQsbixpLDAsdC5sZW5ndGgtbiksQS5hcnJheWNvcHkodCwwLGksdC5sZW5ndGgtbixuKSxBLmFycmF5Y29weShpLDAsdCwwLHQubGVuZ3RoKX0sSC5lcXVhbHM9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO2lmKHQ9PT1lKXJldHVybiEwO2lmKG51bGw9PT10fHxudWxsPT09ZSlyZXR1cm4hMTtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWlmKCF0W25dLmVxdWFscyhlW25dKSlyZXR1cm4hMTtyZXR1cm4hMH1pZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdLHM9YXJndW1lbnRzWzJdO2lmKGk9PT1yKXJldHVybiEwO2lmKG51bGw9PT1pfHxudWxsPT09cilyZXR1cm4hMTtpZihpLmxlbmd0aCE9PXIubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248aS5sZW5ndGg7bisrKWlmKDAhPT1zLmNvbXBhcmUoaVtuXSxyW25dKSlyZXR1cm4hMTtyZXR1cm4hMH19LEguaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPW5ldyBOLGk9MDtpPHQubGVuZ3RoO2krKyllLmludGVyc2VjdHModFtpXSkmJm4uYWRkKHRbaV0sITApO3JldHVybiBuLnRvQ29vcmRpbmF0ZUFycmF5KCl9LEguaGFzUmVwZWF0ZWRQb2ludHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTx0Lmxlbmd0aDtlKyspaWYodFtlLTFdLmVxdWFscyh0W2VdKSlyZXR1cm4hMDtyZXR1cm4hMX0sSC5yZW1vdmVSZXBlYXRlZFBvaW50cz1mdW5jdGlvbih0KXtpZighSC5oYXNSZXBlYXRlZFBvaW50cyh0KSlyZXR1cm4gdDt2YXIgZT1uZXcgTih0LCghMSkpO3JldHVybiBlLnRvQ29vcmRpbmF0ZUFycmF5KCl9LEgucmV2ZXJzZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5sZW5ndGgtMSxuPU1hdGgudHJ1bmMoZS8yKSxpPTA7aTw9bjtpKyspe3ZhciByPXRbaV07dFtpXT10W2UtaV0sdFtlLWldPXJ9fSxILnJlbW92ZU51bGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj0wO248dC5sZW5ndGg7bisrKW51bGwhPT10W25dJiZlKys7dmFyIGk9bmV3IEFycmF5KGUpLmZpbGwobnVsbCk7aWYoMD09PWUpcmV0dXJuIGk7Zm9yKHZhciByPTAsbj0wO248dC5sZW5ndGg7bisrKW51bGwhPT10W25dJiYoaVtyKytdPXRbbl0pO3JldHVybiBpfSxILmNvcHlEZWVwPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgQXJyYXkodC5sZW5ndGgpLmZpbGwobnVsbCksbj0wO248dC5sZW5ndGg7bisrKWVbbl09bmV3IGcodFtuXSk7cmV0dXJuIGV9aWYoNT09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXSxvPWFyZ3VtZW50c1szXSxhPWFyZ3VtZW50c1s0XSxuPTA7bjxhO24rKylzW28rbl09bmV3IGcoaVtyK25dKX0sSC5pc0VxdWFsUmV2ZXJzZWQ9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIGk9dFtuXSxyPWVbdC5sZW5ndGgtbi0xXTtpZigwIT09aS5jb21wYXJlVG8ocikpcmV0dXJuITF9cmV0dXJuITB9LEguZW52ZWxvcGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBDLG49MDtuPHQubGVuZ3RoO24rKyllLmV4cGFuZFRvSW5jbHVkZSh0W25dKTtyZXR1cm4gZX0sSC50b0Nvb3JkaW5hdGVBcnJheT1mdW5jdGlvbih0KXtyZXR1cm4gdC50b0FycmF5KEguY29vcmRBcnJheVR5cGUpfSxILmF0TGVhc3ROQ29vcmRpbmF0ZXNPck5vdGhpbmc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5sZW5ndGg+PXQ/ZTpbXX0sSC5pbmRleE9mPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspaWYodC5lcXVhbHMoZVtuXSkpcmV0dXJuIG47cmV0dXJuLTF9LEguaW5jcmVhc2luZ0RpcmVjdGlvbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPE1hdGgudHJ1bmModC5sZW5ndGgvMik7ZSsrKXt2YXIgbj10Lmxlbmd0aC0xLWUsaT10W2VdLmNvbXBhcmVUbyh0W25dKTtpZigwIT09aSlyZXR1cm4gaX1yZXR1cm4gMX0sSC5jb21wYXJlPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aCYmbjxlLmxlbmd0aDspe3ZhciBpPXRbbl0uY29tcGFyZVRvKGVbbl0pO2lmKDAhPT1pKXJldHVybiBpO24rK31yZXR1cm4gbjxlLmxlbmd0aD8tMTpuPHQubGVuZ3RoPzE6MH0sSC5taW5Db29yZGluYXRlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1udWxsLG49MDtuPHQubGVuZ3RoO24rKykobnVsbD09PWV8fGUuY29tcGFyZVRvKHRbbl0pPjApJiYoZT10W25dKTtyZXR1cm4gZX0sSC5leHRyYWN0PWZ1bmN0aW9uKHQsZSxuKXtlPVQuY2xhbXAoZSwwLHQubGVuZ3RoKSxuPVQuY2xhbXAobiwtMSx0Lmxlbmd0aCk7dmFyIGk9bi1lKzE7bjwwJiYoaT0wKSxlPj10Lmxlbmd0aCYmKGk9MCksbjxlJiYoaT0wKTt2YXIgcj1uZXcgQXJyYXkoaSkuZmlsbChudWxsKTtpZigwPT09aSlyZXR1cm4gcjtmb3IodmFyIHM9MCxvPWU7bzw9bjtvKyspcltzKytdPXRbb107cmV0dXJuIHJ9LGUoVy5wcm90b3R5cGUse2NvbXBhcmU6ZnVuY3Rpb24odCxlKXt2YXIgbj10LGk9ZTtyZXR1cm4gSC5jb21wYXJlKG4saSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2FdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBXfX0pLGUoai5wcm90b3R5cGUse2NvbXBhcmU6ZnVuY3Rpb24odCxlKXt2YXIgbj10LGk9ZTtpZihuLmxlbmd0aDxpLmxlbmd0aClyZXR1cm4tMTtpZihuLmxlbmd0aD5pLmxlbmd0aClyZXR1cm4gMTtpZigwPT09bi5sZW5ndGgpcmV0dXJuIDA7dmFyIHI9SC5jb21wYXJlKG4saSkscz1ILmlzRXF1YWxSZXZlcnNlZChuLGkpO3JldHVybiBzPzA6cn0sT0xEY29tcGFyZTpmdW5jdGlvbih0LGUpe3ZhciBuPXQsaT1lO2lmKG4ubGVuZ3RoPGkubGVuZ3RoKXJldHVybi0xO2lmKG4ubGVuZ3RoPmkubGVuZ3RoKXJldHVybiAxO2lmKDA9PT1uLmxlbmd0aClyZXR1cm4gMDtmb3IodmFyIHI9SC5pbmNyZWFzaW5nRGlyZWN0aW9uKG4pLHM9SC5pbmNyZWFzaW5nRGlyZWN0aW9uKGkpLG89cj4wPzA6bi5sZW5ndGgtMSxhPXM+MD8wOm4ubGVuZ3RoLTEsdT0wO3U8bi5sZW5ndGg7dSsrKXt2YXIgbD1uW29dLmNvbXBhcmVUbyhpW2FdKTtpZigwIT09bClyZXR1cm4gbDtvKz1yLGErPXN9cmV0dXJuIDB9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2FdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBqfX0pLEguRm9yd2FyZENvbXBhcmF0b3I9VyxILkJpZGlyZWN0aW9uYWxDb21wYXJhdG9yPWosSC5jb29yZEFycmF5VHlwZT1uZXcgQXJyYXkoMCkuZmlsbChudWxsKSxLLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt9LEsucHJvdG90eXBlLnB1dD1mdW5jdGlvbigpe30sSy5wcm90b3R5cGUuc2l6ZT1mdW5jdGlvbigpe30sSy5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7fSxLLnByb3RvdHlwZS5lbnRyeVNldD1mdW5jdGlvbigpe30sWi5wcm90b3R5cGU9bmV3IEssUS5wcm90b3R5cGU9bmV3IHYsUS5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24oKXt9LEoucHJvdG90eXBlPW5ldyBRLEoucHJvdG90eXBlLmNvbnRhaW5zPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dGhpcy5hcnJheV8ubGVuZ3RoO2U8bjtlKyspe3ZhciBpPXRoaXMuYXJyYXlfW2VdO2lmKGk9PT10KXJldHVybiEwfXJldHVybiExfSxKLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7cmV0dXJuIXRoaXMuY29udGFpbnModCkmJih0aGlzLmFycmF5Xy5wdXNoKHQpLCEwKX0sSi5wcm90b3R5cGUuYWRkQWxsPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXRoaXMuYWRkKGUubmV4dCgpKTtyZXR1cm4hMH0sSi5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBqYXZhc2NyaXB0LnV0aWwuT3BlcmF0aW9uTm90U3VwcG9ydGVkfSxKLnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXJyYXlfLmxlbmd0aH0sSi5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5hcnJheV8ubGVuZ3RofSxKLnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MCxuPXRoaXMuYXJyYXlfLmxlbmd0aDtlPG47ZSsrKXQucHVzaCh0aGlzLmFycmF5X1tlXSk7cmV0dXJuIHR9LEoucHJvdG90eXBlLml0ZXJhdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBKcyh0aGlzKX07dmFyIEpzPWZ1bmN0aW9uKHQpe3RoaXMuaGFzaFNldF89dCx0aGlzLnBvc2l0aW9uXz0wfTtKcy5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe2lmKHRoaXMucG9zaXRpb25fPT09dGhpcy5oYXNoU2V0Xy5zaXplKCkpdGhyb3cgbmV3IHg7cmV0dXJuIHRoaXMuaGFzaFNldF8uYXJyYXlfW3RoaXMucG9zaXRpb25fKytdfSxKcy5wcm90b3R5cGUuaGFzTmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBvc2l0aW9uXzx0aGlzLmhhc2hTZXRfLnNpemUoKX0sSnMucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFfTt2YXIgJHM9MCx0bz0xO3J0LnByb3RvdHlwZT1uZXcgWixydC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnJvb3RfO251bGwhPT1lOyl7dmFyIG49dC5jb21wYXJlVG8oZS5rZXkpO2lmKG48MCllPWUubGVmdDtlbHNle2lmKCEobj4wKSlyZXR1cm4gZS52YWx1ZTtlPWUucmlnaHR9fXJldHVybiBudWxsfSxydC5wcm90b3R5cGUucHV0PWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09PXRoaXMucm9vdF8pcmV0dXJuIHRoaXMucm9vdF89e2tleTp0LHZhbHVlOmUsbGVmdDpudWxsLHJpZ2h0Om51bGwscGFyZW50Om51bGwsY29sb3I6JHMsZ2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZX0sZ2V0S2V5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMua2V5fX0sdGhpcy5zaXplXz0xLG51bGw7dmFyIG4saSxyPXRoaXMucm9vdF87ZG8gaWYobj1yLGk9dC5jb21wYXJlVG8oci5rZXkpLGk8MClyPXIubGVmdDtlbHNle2lmKCEoaT4wKSl7dmFyIHM9ci52YWx1ZTtyZXR1cm4gci52YWx1ZT1lLHN9cj1yLnJpZ2h0fXdoaWxlKG51bGwhPT1yKTt2YXIgbz17a2V5OnQsbGVmdDpudWxsLHJpZ2h0Om51bGwsdmFsdWU6ZSxwYXJlbnQ6bixjb2xvcjokcyxnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfSxnZXRLZXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5rZXl9fTtyZXR1cm4gaTwwP24ubGVmdD1vOm4ucmlnaHQ9byx0aGlzLmZpeEFmdGVySW5zZXJ0aW9uKG8pLHRoaXMuc2l6ZV8rKyxudWxsfSxydC5wcm90b3R5cGUuZml4QWZ0ZXJJbnNlcnRpb249ZnVuY3Rpb24odCl7Zm9yKHQuY29sb3I9dG87bnVsbCE9dCYmdCE9dGhpcy5yb290XyYmdC5wYXJlbnQuY29sb3I9PXRvOylpZih0dCh0KT09bnQodHQodHQodCkpKSl7dmFyIGU9aXQodHQodHQodCkpKTskKGUpPT10bz8oZXQodHQodCksJHMpLGV0KGUsJHMpLGV0KHR0KHR0KHQpKSx0byksdD10dCh0dCh0KSkpOih0PT1pdCh0dCh0KSkmJih0PXR0KHQpLHRoaXMucm90YXRlTGVmdCh0KSksZXQodHQodCksJHMpLGV0KHR0KHR0KHQpKSx0byksdGhpcy5yb3RhdGVSaWdodCh0dCh0dCh0KSkpKX1lbHNle3ZhciBlPW50KHR0KHR0KHQpKSk7JChlKT09dG8/KGV0KHR0KHQpLCRzKSxldChlLCRzKSxldCh0dCh0dCh0KSksdG8pLHQ9dHQodHQodCkpKToodD09bnQodHQodCkpJiYodD10dCh0KSx0aGlzLnJvdGF0ZVJpZ2h0KHQpKSxldCh0dCh0KSwkcyksZXQodHQodHQodCkpLHRvKSx0aGlzLnJvdGF0ZUxlZnQodHQodHQodCkpKSl9dGhpcy5yb290Xy5jb2xvcj0kc30scnQucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3ZhciB0PW5ldyBJLGU9dGhpcy5nZXRGaXJzdEVudHJ5KCk7aWYobnVsbCE9PWUpZm9yKHQuYWRkKGUudmFsdWUpO251bGwhPT0oZT1ydC5zdWNjZXNzb3IoZSkpOyl0LmFkZChlLnZhbHVlKTtyZXR1cm4gdH0scnQucHJvdG90eXBlLmVudHJ5U2V0PWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IEosZT10aGlzLmdldEZpcnN0RW50cnkoKTtpZihudWxsIT09ZSlmb3IodC5hZGQoZSk7bnVsbCE9PShlPXJ0LnN1Y2Nlc3NvcihlKSk7KXQuYWRkKGUpO3JldHVybiB0fSxydC5wcm90b3R5cGUucm90YXRlTGVmdD1mdW5jdGlvbih0KXtpZihudWxsIT10KXt2YXIgZT10LnJpZ2h0O3QucmlnaHQ9ZS5sZWZ0LG51bGwhPWUubGVmdCYmKGUubGVmdC5wYXJlbnQ9dCksZS5wYXJlbnQ9dC5wYXJlbnQsbnVsbD09dC5wYXJlbnQ/dGhpcy5yb290Xz1lOnQucGFyZW50LmxlZnQ9PXQ/dC5wYXJlbnQubGVmdD1lOnQucGFyZW50LnJpZ2h0PWUsZS5sZWZ0PXQsdC5wYXJlbnQ9ZX19LHJ0LnByb3RvdHlwZS5yb3RhdGVSaWdodD1mdW5jdGlvbih0KXtpZihudWxsIT10KXt2YXIgZT10LmxlZnQ7dC5sZWZ0PWUucmlnaHQsbnVsbCE9ZS5yaWdodCYmKGUucmlnaHQucGFyZW50PXQpLGUucGFyZW50PXQucGFyZW50LG51bGw9PXQucGFyZW50P3RoaXMucm9vdF89ZTp0LnBhcmVudC5yaWdodD09dD90LnBhcmVudC5yaWdodD1lOnQucGFyZW50LmxlZnQ9ZSxlLnJpZ2h0PXQsdC5wYXJlbnQ9ZX19LHJ0LnByb3RvdHlwZS5nZXRGaXJzdEVudHJ5PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5yb290XztpZihudWxsIT10KWZvcig7bnVsbCE9dC5sZWZ0Oyl0PXQubGVmdDtyZXR1cm4gdH0scnQuc3VjY2Vzc29yPWZ1bmN0aW9uKHQpe2lmKG51bGw9PT10KXJldHVybiBudWxsO2lmKG51bGwhPT10LnJpZ2h0KXtmb3IodmFyIGU9dC5yaWdodDtudWxsIT09ZS5sZWZ0OyllPWUubGVmdDtyZXR1cm4gZX1mb3IodmFyIGU9dC5wYXJlbnQsbj10O251bGwhPT1lJiZuPT09ZS5yaWdodDspbj1lLGU9ZS5wYXJlbnQ7cmV0dXJuIGV9LHJ0LnByb3RvdHlwZS5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZV99LGUoc3QucHJvdG90eXBlLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBzdH19KSxvdC5wcm90b3R5cGU9bmV3IFEsYXQucHJvdG90eXBlPW5ldyBvdCxhdC5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj10aGlzLmFycmF5Xy5sZW5ndGg7ZTxuO2UrKyl7dmFyIGk9dGhpcy5hcnJheV9bZV07aWYoMD09PWkuY29tcGFyZVRvKHQpKXJldHVybiEwfXJldHVybiExfSxhdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe2lmKHRoaXMuY29udGFpbnModCkpcmV0dXJuITE7Zm9yKHZhciBlPTAsbj10aGlzLmFycmF5Xy5sZW5ndGg7ZTxuO2UrKyl7dmFyIGk9dGhpcy5hcnJheV9bZV07aWYoMT09PWkuY29tcGFyZVRvKHQpKXJldHVybiB0aGlzLmFycmF5Xy5zcGxpY2UoZSwwLHQpLCEwfXJldHVybiB0aGlzLmFycmF5Xy5wdXNoKHQpLCEwfSxhdC5wcm90b3R5cGUuYWRkQWxsPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXRoaXMuYWRkKGUubmV4dCgpKTtyZXR1cm4hMH0sYXQucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRX0sYXQucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcnJheV8ubGVuZ3RofSxhdC5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5hcnJheV8ubGVuZ3RofSxhdC5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe2Zvcih2YXIgdD1bXSxlPTAsbj10aGlzLmFycmF5Xy5sZW5ndGg7ZTxuO2UrKyl0LnB1c2godGhpcy5hcnJheV9bZV0pO3JldHVybiB0fSxhdC5wcm90b3R5cGUuaXRlcmF0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGVvKHRoaXMpfTt2YXIgZW89ZnVuY3Rpb24odCl7dGhpcy50cmVlU2V0Xz10LHRoaXMucG9zaXRpb25fPTB9O2VvLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7aWYodGhpcy5wb3NpdGlvbl89PT10aGlzLnRyZWVTZXRfLnNpemUoKSl0aHJvdyBuZXcgeDtyZXR1cm4gdGhpcy50cmVlU2V0Xy5hcnJheV9bdGhpcy5wb3NpdGlvbl8rK119LGVvLnByb3RvdHlwZS5oYXNOZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9zaXRpb25fPHRoaXMudHJlZVNldF8uc2l6ZSgpfSxlby5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEV9LHV0LnNvcnQ9ZnVuY3Rpb24oKXt2YXIgdCxlLG4saSxyPWFyZ3VtZW50c1swXTtpZigxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gaT1mdW5jdGlvbih0LGUpe3JldHVybiB0LmNvbXBhcmVUbyhlKX0sdm9pZCByLnNvcnQoaSk7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpbj1hcmd1bWVudHNbMV0saT1mdW5jdGlvbih0LGUpe3JldHVybiBuLmNvbXBhcmUodCxlKX0sci5zb3J0KGkpO2Vsc2V7aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe2U9ci5zbGljZShhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdKSxlLnNvcnQoKTt2YXIgcz1yLnNsaWNlKDAsYXJndW1lbnRzWzFdKS5jb25jYXQoZSxyLnNsaWNlKGFyZ3VtZW50c1syXSxyLmxlbmd0aCkpO2ZvcihyLnNwbGljZSgwLHIubGVuZ3RoKSx0PTA7dDxzLmxlbmd0aDt0Kyspci5wdXNoKHNbdF0pO3JldHVybn1pZig0PT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKGU9ci5zbGljZShhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdKSxuPWFyZ3VtZW50c1szXSxpPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4uY29tcGFyZSh0LGUpfSxlLnNvcnQoaSkscz1yLnNsaWNlKDAsYXJndW1lbnRzWzFdKS5jb25jYXQoZSxyLnNsaWNlKGFyZ3VtZW50c1syXSxyLmxlbmd0aCkpLHIuc3BsaWNlKDAsci5sZW5ndGgpLHQ9MDt0PHMubGVuZ3RoO3QrKylyLnB1c2goc1t0XSk7cmV0dXJufX19LHV0LmFzTGlzdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEksbj0wLGk9dC5sZW5ndGg7bjxpO24rKyllLmFkZCh0W25dKTtyZXR1cm4gZX0sZShsdC5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGx0fX0pLGx0LnRvRGltZW5zaW9uU3ltYm9sPWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlIGx0LkZBTFNFOnJldHVybiBsdC5TWU1fRkFMU0U7Y2FzZSBsdC5UUlVFOnJldHVybiBsdC5TWU1fVFJVRTtjYXNlIGx0LkRPTlRDQVJFOnJldHVybiBsdC5TWU1fRE9OVENBUkU7Y2FzZSBsdC5QOnJldHVybiBsdC5TWU1fUDtjYXNlIGx0Lkw6cmV0dXJuIGx0LlNZTV9MO2Nhc2UgbHQuQTpyZXR1cm4gbHQuU1lNX0F9dGhyb3cgbmV3IGkoXCJVbmtub3duIGRpbWVuc2lvbiB2YWx1ZTogXCIrdCl9LGx0LnRvRGltZW5zaW9uVmFsdWU9ZnVuY3Rpb24odCl7c3dpdGNoKE8udG9VcHBlckNhc2UodCkpe2Nhc2UgbHQuU1lNX0ZBTFNFOnJldHVybiBsdC5GQUxTRTtjYXNlIGx0LlNZTV9UUlVFOnJldHVybiBsdC5UUlVFO2Nhc2UgbHQuU1lNX0RPTlRDQVJFOnJldHVybiBsdC5ET05UQ0FSRTtjYXNlIGx0LlNZTV9QOnJldHVybiBsdC5QO2Nhc2UgbHQuU1lNX0w6cmV0dXJuIGx0Lkw7Y2FzZSBsdC5TWU1fQTpyZXR1cm4gbHQuQX10aHJvdyBuZXcgaShcIlVua25vd24gZGltZW5zaW9uIHN5bWJvbDogXCIrdCl9LGx0LlA9MCxsdC5MPTEsbHQuQT0yLGx0LkZBTFNFPS0xLGx0LlRSVUU9LTIsbHQuRE9OVENBUkU9LTMsbHQuU1lNX0ZBTFNFPVwiRlwiLGx0LlNZTV9UUlVFPVwiVFwiLGx0LlNZTV9ET05UQ0FSRT1cIipcIixsdC5TWU1fUD1cIjBcIixsdC5TWU1fTD1cIjFcIixsdC5TWU1fQT1cIjJcIixlKGh0LnByb3RvdHlwZSx7ZmlsdGVyOmZ1bmN0aW9uKHQpe30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaHR9fSksZShjdC5wcm90b3R5cGUse2ZpbHRlcjpmdW5jdGlvbih0LGUpe30saXNEb25lOmZ1bmN0aW9uKCl7fSxpc0dlb21ldHJ5Q2hhbmdlZDpmdW5jdGlvbigpe30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gY3R9fSksaChmdCxCKSxlKGZ0LnByb3RvdHlwZSx7Y29tcHV0ZUVudmVsb3BlSW50ZXJuYWw6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IEMsZT0wO2U8dGhpcy5nZW9tZXRyaWVzLmxlbmd0aDtlKyspdC5leHBhbmRUb0luY2x1ZGUodGhpcy5nZW9tZXRyaWVzW2VdLmdldEVudmVsb3BlSW50ZXJuYWwoKSk7cmV0dXJuIHR9LGdldEdlb21ldHJ5TjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZW9tZXRyaWVzW3RdfSxnZXRTb3J0SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gQi5TT1JUSU5ERVhfR0VPTUVUUllDT0xMRUNUSU9OfSxnZXRDb29yZGluYXRlczpmdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgQXJyYXkodGhpcy5nZXROdW1Qb2ludHMoKSkuZmlsbChudWxsKSxlPS0xLG49MDtuPHRoaXMuZ2VvbWV0cmllcy5sZW5ndGg7bisrKWZvcih2YXIgaT10aGlzLmdlb21ldHJpZXNbbl0uZ2V0Q29vcmRpbmF0ZXMoKSxyPTA7cjxpLmxlbmd0aDtyKyspZSsrLHRbZV09aVtyXTtyZXR1cm4gdH0sZ2V0QXJlYTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9MDtlPHRoaXMuZ2VvbWV0cmllcy5sZW5ndGg7ZSsrKXQrPXRoaXMuZ2VvbWV0cmllc1tlXS5nZXRBcmVhKCk7cmV0dXJuIHR9LGVxdWFsc0V4YWN0OmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZighdGhpcy5pc0VxdWl2YWxlbnRDbGFzcyh0KSlyZXR1cm4hMTt2YXIgbj10O2lmKHRoaXMuZ2VvbWV0cmllcy5sZW5ndGghPT1uLmdlb21ldHJpZXMubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgaT0wO2k8dGhpcy5nZW9tZXRyaWVzLmxlbmd0aDtpKyspaWYoIXRoaXMuZ2VvbWV0cmllc1tpXS5lcXVhbHNFeGFjdChuLmdlb21ldHJpZXNbaV0sZSkpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuIEIucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLmdlb21ldHJpZXMubGVuZ3RoO3QrKyl0aGlzLmdlb21ldHJpZXNbdF0ubm9ybWFsaXplKCk7dXQuc29ydCh0aGlzLmdlb21ldHJpZXMpfSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP251bGw6dGhpcy5nZW9tZXRyaWVzWzBdLmdldENvb3JkaW5hdGUoKX0sZ2V0Qm91bmRhcnlEaW1lbnNpb246ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bHQuRkFMU0UsZT0wO2U8dGhpcy5nZW9tZXRyaWVzLmxlbmd0aDtlKyspdD1NYXRoLm1heCh0LHRoaXMuZ2VvbWV0cmllc1tlXS5nZXRCb3VuZGFyeURpbWVuc2lvbigpKTtyZXR1cm4gdH0sZ2V0RGltZW5zaW9uOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PWx0LkZBTFNFLGU9MDtlPHRoaXMuZ2VvbWV0cmllcy5sZW5ndGg7ZSsrKXQ9TWF0aC5tYXgodCx0aGlzLmdlb21ldHJpZXNbZV0uZ2V0RGltZW5zaW9uKCkpO3JldHVybiB0fSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MCxlPTA7ZTx0aGlzLmdlb21ldHJpZXMubGVuZ3RoO2UrKyl0Kz10aGlzLmdlb21ldHJpZXNbZV0uZ2V0TGVuZ3RoKCk7cmV0dXJuIHR9LGdldE51bVBvaW50czpmdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9MDtlPHRoaXMuZ2VvbWV0cmllcy5sZW5ndGg7ZSsrKXQrPXRoaXMuZ2VvbWV0cmllc1tlXS5nZXROdW1Qb2ludHMoKTtyZXR1cm4gdH0sZ2V0TnVtR2VvbWV0cmllczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdlb21ldHJpZXMubGVuZ3RofSxyZXZlcnNlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ2VvbWV0cmllcy5sZW5ndGgsZT1uZXcgQXJyYXkodCkuZmlsbChudWxsKSxuPTA7bjx0aGlzLmdlb21ldHJpZXMubGVuZ3RoO24rKyllW25dPXRoaXMuZ2VvbWV0cmllc1tuXS5yZXZlcnNlKCk7cmV0dXJuIHRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihlKX0sY29tcGFyZVRvU2FtZUNsYXNzOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPW5ldyBhdCh1dC5hc0xpc3QodGhpcy5nZW9tZXRyaWVzKSksbj1uZXcgYXQodXQuYXNMaXN0KHQuZ2VvbWV0cmllcykpO3JldHVybiB0aGlzLmNvbXBhcmUoZSxuKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxzPWksbz10aGlzLmdldE51bUdlb21ldHJpZXMoKSxhPXMuZ2V0TnVtR2VvbWV0cmllcygpLHU9MDt1PG8mJnU8YTspe3ZhciBsPXRoaXMuZ2V0R2VvbWV0cnlOKHUpLGg9cy5nZXRHZW9tZXRyeU4odSksYz1sLmNvbXBhcmVUb1NhbWVDbGFzcyhoLHIpO2lmKDAhPT1jKXJldHVybiBjO3UrK31yZXR1cm4gdTxvPzE6dTxhPy0xOjB9fSxhcHBseTpmdW5jdGlvbigpe2lmKFIoYXJndW1lbnRzWzBdLHopKWZvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0wO2U8dGhpcy5nZW9tZXRyaWVzLmxlbmd0aDtlKyspdGhpcy5nZW9tZXRyaWVzW2VdLmFwcGx5KHQpO2Vsc2UgaWYoUihhcmd1bWVudHNbMF0sY3QpKXt2YXIgbj1hcmd1bWVudHNbMF07aWYoMD09PXRoaXMuZ2VvbWV0cmllcy5sZW5ndGgpcmV0dXJuIG51bGw7Zm9yKHZhciBlPTA7ZTx0aGlzLmdlb21ldHJpZXMubGVuZ3RoJiYodGhpcy5nZW9tZXRyaWVzW2VdLmFwcGx5KG4pLCFuLmlzRG9uZSgpKTtlKyspO24uaXNHZW9tZXRyeUNoYW5nZWQoKSYmdGhpcy5nZW9tZXRyeUNoYW5nZWQoKX1lbHNlIGlmKFIoYXJndW1lbnRzWzBdLGh0KSl7dmFyIGk9YXJndW1lbnRzWzBdO2kuZmlsdGVyKHRoaXMpO2Zvcih2YXIgZT0wO2U8dGhpcy5nZW9tZXRyaWVzLmxlbmd0aDtlKyspdGhpcy5nZW9tZXRyaWVzW2VdLmFwcGx5KGkpfWVsc2UgaWYoUihhcmd1bWVudHNbMF0scSkpe3ZhciByPWFyZ3VtZW50c1swXTtyLmZpbHRlcih0aGlzKTtmb3IodmFyIGU9MDtlPHRoaXMuZ2VvbWV0cmllcy5sZW5ndGg7ZSsrKXRoaXMuZ2VvbWV0cmllc1tlXS5hcHBseShyKX19LGdldEJvdW5kYXJ5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24odGhpcyksZi5zaG91bGROZXZlclJlYWNoSGVyZSgpLG51bGx9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIHQ9Qi5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzKTt0Lmdlb21ldHJpZXM9bmV3IEFycmF5KHRoaXMuZ2VvbWV0cmllcy5sZW5ndGgpLmZpbGwobnVsbCk7Zm9yKHZhciBlPTA7ZTx0aGlzLmdlb21ldHJpZXMubGVuZ3RoO2UrKyl0Lmdlb21ldHJpZXNbZV09dGhpcy5nZW9tZXRyaWVzW2VdLmNsb25lKCk7cmV0dXJuIHR9LGdldEdlb21ldHJ5VHlwZTpmdW5jdGlvbigpe3JldHVyblwiR2VvbWV0cnlDb2xsZWN0aW9uXCJ9LGNvcHk6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IEFycmF5KHRoaXMuZ2VvbWV0cmllcy5sZW5ndGgpLmZpbGwobnVsbCksZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV09dGhpcy5nZW9tZXRyaWVzW2VdLmNvcHkoKTtyZXR1cm4gbmV3IGZ0KHQsdGhpcy5mYWN0b3J5KX0saXNFbXB0eTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8dGhpcy5nZW9tZXRyaWVzLmxlbmd0aDt0KyspaWYoIXRoaXMuZ2VvbWV0cmllc1t0XS5pc0VtcHR5KCkpcmV0dXJuITE7cmV0dXJuITB9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGZ0fX0pLGZ0LnNlcmlhbFZlcnNpb25VSUQ9LTB4NGYwN2JjYjFmODU3ZDgwMCxoKGd0LGZ0KSxlKGd0LnByb3RvdHlwZSx7Z2V0U29ydEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIEIuU09SVElOREVYX01VTFRJTElORVNUUklOR30sZXF1YWxzRXhhY3Q6ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3JldHVybiEhdGhpcy5pc0VxdWl2YWxlbnRDbGFzcyh0KSYmZnQucHJvdG90eXBlLmVxdWFsc0V4YWN0LmNhbGwodGhpcyx0LGUpfXJldHVybiBmdC5wcm90b3R5cGUuZXF1YWxzRXhhY3QuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxnZXRCb3VuZGFyeURpbWVuc2lvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzQ2xvc2VkKCk/bHQuRkFMU0U6MH0saXNDbG9zZWQ6ZnVuY3Rpb24oKXtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4hMTtmb3IodmFyIHQ9MDt0PHRoaXMuZ2VvbWV0cmllcy5sZW5ndGg7dCsrKWlmKCF0aGlzLmdlb21ldHJpZXNbdF0uaXNDbG9zZWQoKSlyZXR1cm4hMTtyZXR1cm4hMDtcbn0sZ2V0RGltZW5zaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIDF9LHJldmVyc2U6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5nZW9tZXRyaWVzLmxlbmd0aCxlPW5ldyBBcnJheSh0KS5maWxsKG51bGwpLG49MDtuPHRoaXMuZ2VvbWV0cmllcy5sZW5ndGg7bisrKWVbdC0xLW5dPXRoaXMuZ2VvbWV0cmllc1tuXS5yZXZlcnNlKCk7cmV0dXJuIHRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZU11bHRpTGluZVN0cmluZyhlKX0sZ2V0Qm91bmRhcnk6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGR0KHRoaXMpLmdldEJvdW5kYXJ5KCl9LGdldEdlb21ldHJ5VHlwZTpmdW5jdGlvbigpe3JldHVyblwiTXVsdGlMaW5lU3RyaW5nXCJ9LGNvcHk6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IEFycmF5KHRoaXMuZ2VvbWV0cmllcy5sZW5ndGgpLmZpbGwobnVsbCksZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV09dGhpcy5nZW9tZXRyaWVzW2VdLmNvcHkoKTtyZXR1cm4gbmV3IGd0KHQsdGhpcy5mYWN0b3J5KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bc3RdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBndH19KSxndC5zZXJpYWxWZXJzaW9uVUlEPTB4NzE1NWQyYWI0YWZhODAwMCxlKGR0LnByb3RvdHlwZSx7Ym91bmRhcnlNdWx0aUxpbmVTdHJpbmc6ZnVuY3Rpb24odCl7aWYodGhpcy5nZW9tLmlzRW1wdHkoKSlyZXR1cm4gdGhpcy5nZXRFbXB0eU11bHRpUG9pbnQoKTt2YXIgZT10aGlzLmNvbXB1dGVCb3VuZGFyeUNvb3JkaW5hdGVzKHQpO3JldHVybiAxPT09ZS5sZW5ndGg/dGhpcy5nZW9tRmFjdC5jcmVhdGVQb2ludChlWzBdKTp0aGlzLmdlb21GYWN0LmNyZWF0ZU11bHRpUG9pbnRGcm9tQ29vcmRzKGUpfSxnZXRCb3VuZGFyeTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdlb20gaW5zdGFuY2VvZiBTdD90aGlzLmJvdW5kYXJ5TGluZVN0cmluZyh0aGlzLmdlb20pOnRoaXMuZ2VvbSBpbnN0YW5jZW9mIGd0P3RoaXMuYm91bmRhcnlNdWx0aUxpbmVTdHJpbmcodGhpcy5nZW9tKTp0aGlzLmdlb20uZ2V0Qm91bmRhcnkoKX0sYm91bmRhcnlMaW5lU3RyaW5nOmZ1bmN0aW9uKHQpe2lmKHRoaXMuZ2VvbS5pc0VtcHR5KCkpcmV0dXJuIHRoaXMuZ2V0RW1wdHlNdWx0aVBvaW50KCk7aWYodC5pc0Nsb3NlZCgpKXt2YXIgZT10aGlzLmJuUnVsZS5pc0luQm91bmRhcnkoMik7cmV0dXJuIGU/dC5nZXRTdGFydFBvaW50KCk6dGhpcy5nZW9tRmFjdC5jcmVhdGVNdWx0aVBvaW50KCl9cmV0dXJuIHRoaXMuZ2VvbUZhY3QuY3JlYXRlTXVsdGlQb2ludChbdC5nZXRTdGFydFBvaW50KCksdC5nZXRFbmRQb2ludCgpXSl9LGdldEVtcHR5TXVsdGlQb2ludDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdlb21GYWN0LmNyZWF0ZU11bHRpUG9pbnQoKX0sY29tcHV0ZUJvdW5kYXJ5Q29vcmRpbmF0ZXM6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEk7dGhpcy5lbmRwb2ludE1hcD1uZXcgcnQ7Zm9yKHZhciBuPTA7bjx0LmdldE51bUdlb21ldHJpZXMoKTtuKyspe3ZhciBpPXQuZ2V0R2VvbWV0cnlOKG4pOzAhPT1pLmdldE51bVBvaW50cygpJiYodGhpcy5hZGRFbmRwb2ludChpLmdldENvb3JkaW5hdGVOKDApKSx0aGlzLmFkZEVuZHBvaW50KGkuZ2V0Q29vcmRpbmF0ZU4oaS5nZXROdW1Qb2ludHMoKS0xKSkpfWZvcih2YXIgcj10aGlzLmVuZHBvaW50TWFwLmVudHJ5U2V0KCkuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3ZhciBzPXIubmV4dCgpLG89cy5nZXRWYWx1ZSgpLGE9by5jb3VudDt0aGlzLmJuUnVsZS5pc0luQm91bmRhcnkoYSkmJmUuYWRkKHMuZ2V0S2V5KCkpfXJldHVybiBILnRvQ29vcmRpbmF0ZUFycmF5KGUpfSxhZGRFbmRwb2ludDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmVuZHBvaW50TWFwLmdldCh0KTtudWxsPT09ZSYmKGU9bmV3IHB0LHRoaXMuZW5kcG9pbnRNYXAucHV0KHQsZSkpLGUuY291bnQrK30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZHR9fSksZHQuZ2V0Qm91bmRhcnk9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9bmV3IGR0KHQpO3JldHVybiBlLmdldEJvdW5kYXJ5KCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxlPW5ldyBkdChuLGkpO3JldHVybiBlLmdldEJvdW5kYXJ5KCl9fSxlKHB0LnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcHR9fSksZShOdC5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE50fX0pLE50LmNoYXJzPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPW5ldyBBcnJheShlKS5maWxsKG51bGwpLGk9MDtpPGU7aSsrKW5baV09dDtyZXR1cm4gbmV3IFN0cmluZyhuKX0sTnQuZ2V0U3RhY2tUcmFjZT1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgeHQsbj1uZXcgdnQoZSk7cmV0dXJuIHQucHJpbnRTdGFja1RyYWNlKG4pLGUudG9TdHJpbmcoKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxzPVwiXCIsbz1uZXcgbXQoTnQuZ2V0U3RhY2tUcmFjZShpKSksYT1uZXcgSXQobyksdT0wO3U8cjt1KyspdHJ5e3MrPWEucmVhZExpbmUoKStOdC5ORVdMSU5FfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIEV0KSl0aHJvdyB0O2Yuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoKX1maW5hbGx5e31yZXR1cm4gc319LE50LnNwbGl0PWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPWUubGVuZ3RoLGk9bmV3IEkscj1cIlwiK3Qscz1yLmluZGV4T2YoZSk7cz49MDspe3ZhciBvPXIuc3Vic3RyaW5nKDAscyk7aS5hZGQobykscj1yLnN1YnN0cmluZyhzK24pLHM9ci5pbmRleE9mKGUpfXIubGVuZ3RoPjAmJmkuYWRkKHIpO2Zvcih2YXIgYT1uZXcgQXJyYXkoaS5zaXplKCkpLmZpbGwobnVsbCksdT0wO3U8YS5sZW5ndGg7dSsrKWFbdV09aS5nZXQodSk7cmV0dXJuIGF9LE50LnRvU3RyaW5nPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gTnQuU0lNUExFX09SRElOQVRFX0ZPUk1BVC5mb3JtYXQodCl9fSxOdC5zcGFjZXM9ZnVuY3Rpb24odCl7cmV0dXJuIE50LmNoYXJzKFwiIFwiLHQpfSxOdC5ORVdMSU5FPUEuZ2V0UHJvcGVydHkoXCJsaW5lLnNlcGFyYXRvclwiKSxOdC5TSU1QTEVfT1JESU5BVEVfRk9STUFUPW5ldyB5dChcIjAuI1wiKSxlKEN0LnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gQ3R9fSksQ3QuY29weUNvb3JkPWZ1bmN0aW9uKHQsZSxuLGkpe2Zvcih2YXIgcj1NYXRoLm1pbih0LmdldERpbWVuc2lvbigpLG4uZ2V0RGltZW5zaW9uKCkpLHM9MDtzPHI7cysrKW4uc2V0T3JkaW5hdGUoaSxzLHQuZ2V0T3JkaW5hdGUoZSxzKSl9LEN0LmlzUmluZz1mdW5jdGlvbih0KXt2YXIgZT10LnNpemUoKTtyZXR1cm4gMD09PWV8fCEoZTw9MykmJih0LmdldE9yZGluYXRlKDAsRC5YKT09PXQuZ2V0T3JkaW5hdGUoZS0xLEQuWCkmJnQuZ2V0T3JkaW5hdGUoMCxELlkpPT09dC5nZXRPcmRpbmF0ZShlLTEsRC5ZKSl9LEN0LmlzRXF1YWw9ZnVuY3Rpb24odCxlKXt2YXIgbj10LnNpemUoKSxpPWUuc2l6ZSgpO2lmKG4hPT1pKXJldHVybiExO2Zvcih2YXIgcz1NYXRoLm1pbih0LmdldERpbWVuc2lvbigpLGUuZ2V0RGltZW5zaW9uKCkpLG89MDtvPG47bysrKWZvcih2YXIgYT0wO2E8czthKyspe3ZhciB1PXQuZ2V0T3JkaW5hdGUobyxhKSxsPWUuZ2V0T3JkaW5hdGUobyxhKTtpZighKHQuZ2V0T3JkaW5hdGUobyxhKT09PWUuZ2V0T3JkaW5hdGUobyxhKXx8ci5pc05hTih1KSYmci5pc05hTihsKSkpcmV0dXJuITF9cmV0dXJuITB9LEN0LmV4dGVuZD1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC5jcmVhdGUobixlLmdldERpbWVuc2lvbigpKSxyPWUuc2l6ZSgpO2lmKEN0LmNvcHkoZSwwLGksMCxyKSxyPjApZm9yKHZhciBzPXI7czxuO3MrKylDdC5jb3B5KGUsci0xLGkscywxKTtyZXR1cm4gaX0sQ3QucmV2ZXJzZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5zaXplKCktMSxuPU1hdGgudHJ1bmMoZS8yKSxpPTA7aTw9bjtpKyspQ3Quc3dhcCh0LGksZS1pKX0sQ3Quc3dhcD1mdW5jdGlvbih0LGUsbil7aWYoZT09PW4pcmV0dXJuIG51bGw7Zm9yKHZhciBpPTA7aTx0LmdldERpbWVuc2lvbigpO2krKyl7dmFyIHI9dC5nZXRPcmRpbmF0ZShlLGkpO3Quc2V0T3JkaW5hdGUoZSxpLHQuZ2V0T3JkaW5hdGUobixpKSksdC5zZXRPcmRpbmF0ZShuLGkscil9fSxDdC5jb3B5PWZ1bmN0aW9uKHQsZSxuLGkscil7Zm9yKHZhciBzPTA7czxyO3MrKylDdC5jb3B5Q29vcmQodCxlK3MsbixpK3MpfSxDdC50b1N0cmluZz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT10LnNpemUoKTtpZigwPT09ZSlyZXR1cm5cIigpXCI7dmFyIG49dC5nZXREaW1lbnNpb24oKSxpPW5ldyBQO2kuYXBwZW5kKFwiKFwiKTtmb3IodmFyIHI9MDtyPGU7cisrKXtyPjAmJmkuYXBwZW5kKFwiIFwiKTtmb3IodmFyIHM9MDtzPG47cysrKXM+MCYmaS5hcHBlbmQoXCIsXCIpLGkuYXBwZW5kKE50LnRvU3RyaW5nKHQuZ2V0T3JkaW5hdGUocixzKSkpfXJldHVybiBpLmFwcGVuZChcIilcIiksaS50b1N0cmluZygpfX0sQ3QuZW5zdXJlVmFsaWRSaW5nPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5zaXplKCk7aWYoMD09PW4pcmV0dXJuIGU7aWYobjw9MylyZXR1cm4gQ3QuY3JlYXRlQ2xvc2VkUmluZyh0LGUsNCk7dmFyIGk9ZS5nZXRPcmRpbmF0ZSgwLEQuWCk9PT1lLmdldE9yZGluYXRlKG4tMSxELlgpJiZlLmdldE9yZGluYXRlKDAsRC5ZKT09PWUuZ2V0T3JkaW5hdGUobi0xLEQuWSk7cmV0dXJuIGk/ZTpDdC5jcmVhdGVDbG9zZWRSaW5nKHQsZSxuKzEpfSxDdC5jcmVhdGVDbG9zZWRSaW5nPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmNyZWF0ZShuLGUuZ2V0RGltZW5zaW9uKCkpLHI9ZS5zaXplKCk7Q3QuY29weShlLDAsaSwwLHIpO2Zvcih2YXIgcz1yO3M8bjtzKyspQ3QuY29weShlLDAsaSxzLDEpO3JldHVybiBpfSxoKFN0LEIpLGUoU3QucHJvdG90eXBlLHtjb21wdXRlRW52ZWxvcGVJbnRlcm5hbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzRW1wdHkoKT9uZXcgQzp0aGlzLnBvaW50cy5leHBhbmRFbnZlbG9wZShuZXcgQyl9LGlzUmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzQ2xvc2VkKCkmJnRoaXMuaXNTaW1wbGUoKX0sZ2V0U29ydEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIEIuU09SVElOREVYX0xJTkVTVFJJTkd9LGdldENvb3JkaW5hdGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9pbnRzLnRvQ29vcmRpbmF0ZUFycmF5KCl9LGVxdWFsc0V4YWN0OmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZighdGhpcy5pc0VxdWl2YWxlbnRDbGFzcyh0KSlyZXR1cm4hMTt2YXIgbj10O2lmKHRoaXMucG9pbnRzLnNpemUoKSE9PW4ucG9pbnRzLnNpemUoKSlyZXR1cm4hMTtmb3IodmFyIGk9MDtpPHRoaXMucG9pbnRzLnNpemUoKTtpKyspaWYoIXRoaXMuZXF1YWwodGhpcy5wb2ludHMuZ2V0Q29vcmRpbmF0ZShpKSxuLnBvaW50cy5nZXRDb29yZGluYXRlKGkpLGUpKXJldHVybiExO3JldHVybiEwfXJldHVybiBCLnByb3RvdHlwZS5lcXVhbHNFeGFjdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8TWF0aC50cnVuYyh0aGlzLnBvaW50cy5zaXplKCkvMik7dCsrKXt2YXIgZT10aGlzLnBvaW50cy5zaXplKCktMS10O2lmKCF0aGlzLnBvaW50cy5nZXRDb29yZGluYXRlKHQpLmVxdWFscyh0aGlzLnBvaW50cy5nZXRDb29yZGluYXRlKGUpKSlyZXR1cm4gdGhpcy5wb2ludHMuZ2V0Q29vcmRpbmF0ZSh0KS5jb21wYXJlVG8odGhpcy5wb2ludHMuZ2V0Q29vcmRpbmF0ZShlKSk+MCYmQ3QucmV2ZXJzZSh0aGlzLnBvaW50cyksbnVsbH19LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0VtcHR5KCk/bnVsbDp0aGlzLnBvaW50cy5nZXRDb29yZGluYXRlKDApfSxnZXRCb3VuZGFyeURpbWVuc2lvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzQ2xvc2VkKCk/bHQuRkFMU0U6MH0saXNDbG9zZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0VtcHR5KCkmJnRoaXMuZ2V0Q29vcmRpbmF0ZU4oMCkuZXF1YWxzMkQodGhpcy5nZXRDb29yZGluYXRlTih0aGlzLmdldE51bVBvaW50cygpLTEpKX0sZ2V0RW5kUG9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0VtcHR5KCk/bnVsbDp0aGlzLmdldFBvaW50Tih0aGlzLmdldE51bVBvaW50cygpLTEpfSxnZXREaW1lbnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gMX0sZ2V0TGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIGhlLmNvbXB1dGVMZW5ndGgodGhpcy5wb2ludHMpfSxnZXROdW1Qb2ludHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wb2ludHMuc2l6ZSgpfSxyZXZlcnNlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wb2ludHMuY29weSgpO0N0LnJldmVyc2UodCk7dmFyIGU9dGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlTGluZVN0cmluZyh0KTtyZXR1cm4gZX0sY29tcGFyZVRvU2FtZUNsYXNzOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT10LG49MCxpPTA7bjx0aGlzLnBvaW50cy5zaXplKCkmJmk8ZS5wb2ludHMuc2l6ZSgpOyl7dmFyIHI9dGhpcy5wb2ludHMuZ2V0Q29vcmRpbmF0ZShuKS5jb21wYXJlVG8oZS5wb2ludHMuZ2V0Q29vcmRpbmF0ZShpKSk7aWYoMCE9PXIpcmV0dXJuIHI7bisrLGkrK31yZXR1cm4gbjx0aGlzLnBvaW50cy5zaXplKCk/MTppPGUucG9pbnRzLnNpemUoKT8tMTowfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcz1hcmd1bWVudHNbMF0sbz1hcmd1bWVudHNbMV0sZT1zO3JldHVybiBvLmNvbXBhcmUodGhpcy5wb2ludHMsZS5wb2ludHMpfX0sYXBwbHk6ZnVuY3Rpb24oKXtpZihSKGFyZ3VtZW50c1swXSx6KSlmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9MDtlPHRoaXMucG9pbnRzLnNpemUoKTtlKyspdC5maWx0ZXIodGhpcy5wb2ludHMuZ2V0Q29vcmRpbmF0ZShlKSk7ZWxzZSBpZihSKGFyZ3VtZW50c1swXSxjdCkpe3ZhciBuPWFyZ3VtZW50c1swXTtpZigwPT09dGhpcy5wb2ludHMuc2l6ZSgpKXJldHVybiBudWxsO2Zvcih2YXIgZT0wO2U8dGhpcy5wb2ludHMuc2l6ZSgpJiYobi5maWx0ZXIodGhpcy5wb2ludHMsZSksIW4uaXNEb25lKCkpO2UrKyk7bi5pc0dlb21ldHJ5Q2hhbmdlZCgpJiZ0aGlzLmdlb21ldHJ5Q2hhbmdlZCgpfWVsc2UgaWYoUihhcmd1bWVudHNbMF0saHQpKXt2YXIgaT1hcmd1bWVudHNbMF07aS5maWx0ZXIodGhpcyl9ZWxzZSBpZihSKGFyZ3VtZW50c1swXSxxKSl7dmFyIHI9YXJndW1lbnRzWzBdO3IuZmlsdGVyKHRoaXMpfX0sZ2V0Qm91bmRhcnk6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGR0KHRoaXMpLmdldEJvdW5kYXJ5KCl9LGlzRXF1aXZhbGVudENsYXNzOmZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgU3R9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIHQ9Qi5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gdC5wb2ludHM9dGhpcy5wb2ludHMuY2xvbmUoKSx0fSxnZXRDb29yZGluYXRlTjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wb2ludHMuZ2V0Q29vcmRpbmF0ZSh0KX0sZ2V0R2VvbWV0cnlUeXBlOmZ1bmN0aW9uKCl7cmV0dXJuXCJMaW5lU3RyaW5nXCJ9LGNvcHk6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFN0KHRoaXMucG9pbnRzLmNvcHkoKSx0aGlzLmZhY3RvcnkpfSxnZXRDb29yZGluYXRlU2VxdWVuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wb2ludHN9LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMucG9pbnRzLnNpemUoKX0saW5pdDpmdW5jdGlvbih0KXtpZihudWxsPT09dCYmKHQ9dGhpcy5nZXRGYWN0b3J5KCkuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShbXSkpLDE9PT10LnNpemUoKSl0aHJvdyBuZXcgaShcIkludmFsaWQgbnVtYmVyIG9mIHBvaW50cyBpbiBMaW5lU3RyaW5nIChmb3VuZCBcIit0LnNpemUoKStcIiAtIG11c3QgYmUgMCBvciA+PSAyKVwiKTt0aGlzLnBvaW50cz10fSxpc0Nvb3JkaW5hdGU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLnBvaW50cy5zaXplKCk7ZSsrKWlmKHRoaXMucG9pbnRzLmdldENvb3JkaW5hdGUoZSkuZXF1YWxzKHQpKXJldHVybiEwO3JldHVybiExfSxnZXRTdGFydFBvaW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP251bGw6dGhpcy5nZXRQb2ludE4oMCl9LGdldFBvaW50TjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlUG9pbnQodGhpcy5wb2ludHMuZ2V0Q29vcmRpbmF0ZSh0KSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3N0XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gU3R9fSksU3Quc2VyaWFsVmVyc2lvblVJRD0weDJiMmI1MWJhNDM1YzhlMDAsZSh3dC5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHd0fX0pLGgoTHQsQiksZShMdC5wcm90b3R5cGUse2NvbXB1dGVFbnZlbG9wZUludGVybmFsOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuIG5ldyBDO3ZhciB0PW5ldyBDO3JldHVybiB0LmV4cGFuZFRvSW5jbHVkZSh0aGlzLmNvb3JkaW5hdGVzLmdldFgoMCksdGhpcy5jb29yZGluYXRlcy5nZXRZKDApKSx0fSxnZXRTb3J0SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gQi5TT1JUSU5ERVhfUE9JTlR9LGdldENvb3JkaW5hdGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP1tdOlt0aGlzLmdldENvb3JkaW5hdGUoKV19LGVxdWFsc0V4YWN0OmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtyZXR1cm4hIXRoaXMuaXNFcXVpdmFsZW50Q2xhc3ModCkmJighKCF0aGlzLmlzRW1wdHkoKXx8IXQuaXNFbXB0eSgpKXx8dGhpcy5pc0VtcHR5KCk9PT10LmlzRW1wdHkoKSYmdGhpcy5lcXVhbCh0LmdldENvb3JkaW5hdGUoKSx0aGlzLmdldENvb3JkaW5hdGUoKSxlKSl9cmV0dXJuIEIucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7fSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIDAhPT10aGlzLmNvb3JkaW5hdGVzLnNpemUoKT90aGlzLmNvb3JkaW5hdGVzLmdldENvb3JkaW5hdGUoMCk6bnVsbH0sZ2V0Qm91bmRhcnlEaW1lbnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gbHQuRkFMU0V9LGdldERpbWVuc2lvbjpmdW5jdGlvbigpe3JldHVybiAwfSxnZXROdW1Qb2ludHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0VtcHR5KCk/MDoxfSxyZXZlcnNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29weSgpfSxnZXRYOmZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMuZ2V0Q29vcmRpbmF0ZSgpKXRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oXCJnZXRYIGNhbGxlZCBvbiBlbXB0eSBQb2ludFwiKTtyZXR1cm4gdGhpcy5nZXRDb29yZGluYXRlKCkueH0sY29tcGFyZVRvU2FtZUNsYXNzOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPXQ7cmV0dXJuIHRoaXMuZ2V0Q29vcmRpbmF0ZSgpLmNvbXBhcmVUbyhlLmdldENvb3JkaW5hdGUoKSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxlPW47cmV0dXJuIGkuY29tcGFyZSh0aGlzLmNvb3JkaW5hdGVzLGUuY29vcmRpbmF0ZXMpfX0sYXBwbHk6ZnVuY3Rpb24oKXtpZihSKGFyZ3VtZW50c1swXSx6KSl7dmFyIHQ9YXJndW1lbnRzWzBdO2lmKHRoaXMuaXNFbXB0eSgpKXJldHVybiBudWxsO3QuZmlsdGVyKHRoaXMuZ2V0Q29vcmRpbmF0ZSgpKX1lbHNlIGlmKFIoYXJndW1lbnRzWzBdLGN0KSl7dmFyIGU9YXJndW1lbnRzWzBdO2lmKHRoaXMuaXNFbXB0eSgpKXJldHVybiBudWxsO2UuZmlsdGVyKHRoaXMuY29vcmRpbmF0ZXMsMCksZS5pc0dlb21ldHJ5Q2hhbmdlZCgpJiZ0aGlzLmdlb21ldHJ5Q2hhbmdlZCgpfWVsc2UgaWYoUihhcmd1bWVudHNbMF0saHQpKXt2YXIgbj1hcmd1bWVudHNbMF07bi5maWx0ZXIodGhpcyl9ZWxzZSBpZihSKGFyZ3VtZW50c1swXSxxKSl7dmFyIGk9YXJndW1lbnRzWzBdO2kuZmlsdGVyKHRoaXMpfX0sZ2V0Qm91bmRhcnk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlR2VvbWV0cnlDb2xsZWN0aW9uKG51bGwpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciB0PUIucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyk7cmV0dXJuIHQuY29vcmRpbmF0ZXM9dGhpcy5jb29yZGluYXRlcy5jbG9uZSgpLHR9LGdldEdlb21ldHJ5VHlwZTpmdW5jdGlvbigpe3JldHVyblwiUG9pbnRcIn0sY29weTpmdW5jdGlvbigpe3JldHVybiBuZXcgTHQodGhpcy5jb29yZGluYXRlcy5jb3B5KCksdGhpcy5mYWN0b3J5KX0sZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXN9LGdldFk6ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5nZXRDb29yZGluYXRlKCkpdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbihcImdldFkgY2FsbGVkIG9uIGVtcHR5IFBvaW50XCIpO3JldHVybiB0aGlzLmdldENvb3JkaW5hdGUoKS55fSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmNvb3JkaW5hdGVzLnNpemUoKX0saW5pdDpmdW5jdGlvbih0KXtudWxsPT09dCYmKHQ9dGhpcy5nZXRGYWN0b3J5KCkuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShbXSkpLGYuaXNUcnVlKHQuc2l6ZSgpPD0xKSx0aGlzLmNvb3JkaW5hdGVzPXR9LGlzU2ltcGxlOmZ1bmN0aW9uKCl7cmV0dXJuITB9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3d0XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTHR9fSksTHQuc2VyaWFsVmVyc2lvblVJRD0weDQ0MDc3YmFkMTYxY2JjMDAsZShSdC5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFJ0fX0pLGgoVHQsQiksZShUdC5wcm90b3R5cGUse2NvbXB1dGVFbnZlbG9wZUludGVybmFsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2hlbGwuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpfSxnZXRTb3J0SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gQi5TT1JUSU5ERVhfUE9MWUdPTn0sZ2V0Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm5bXTtmb3IodmFyIHQ9bmV3IEFycmF5KHRoaXMuZ2V0TnVtUG9pbnRzKCkpLmZpbGwobnVsbCksZT0tMSxuPXRoaXMuc2hlbGwuZ2V0Q29vcmRpbmF0ZXMoKSxpPTA7aTxuLmxlbmd0aDtpKyspZSsrLHRbZV09bltpXTtmb3IodmFyIHI9MDtyPHRoaXMuaG9sZXMubGVuZ3RoO3IrKylmb3IodmFyIHM9dGhpcy5ob2xlc1tyXS5nZXRDb29yZGluYXRlcygpLG89MDtvPHMubGVuZ3RoO28rKyllKyssdFtlXT1zW29dO3JldHVybiB0fSxnZXRBcmVhOmZ1bmN0aW9uKCl7dmFyIHQ9MDt0Kz1NYXRoLmFicyhoZS5zaWduZWRBcmVhKHRoaXMuc2hlbGwuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCkpKTtmb3IodmFyIGU9MDtlPHRoaXMuaG9sZXMubGVuZ3RoO2UrKyl0LT1NYXRoLmFicyhoZS5zaWduZWRBcmVhKHRoaXMuaG9sZXNbZV0uZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCkpKTtyZXR1cm4gdH0saXNSZWN0YW5nbGU6ZnVuY3Rpb24oKXtpZigwIT09dGhpcy5nZXROdW1JbnRlcmlvclJpbmcoKSlyZXR1cm4hMTtpZihudWxsPT09dGhpcy5zaGVsbClyZXR1cm4hMTtpZig1IT09dGhpcy5zaGVsbC5nZXROdW1Qb2ludHMoKSlyZXR1cm4hMTtmb3IodmFyIHQ9dGhpcy5zaGVsbC5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSxlPXRoaXMuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLG49MDtuPDU7bisrKXt2YXIgaT10LmdldFgobik7aWYoaSE9PWUuZ2V0TWluWCgpJiZpIT09ZS5nZXRNYXhYKCkpcmV0dXJuITE7dmFyIHI9dC5nZXRZKG4pO2lmKHIhPT1lLmdldE1pblkoKSYmciE9PWUuZ2V0TWF4WSgpKXJldHVybiExfWZvcih2YXIgcz10LmdldFgoMCksbz10LmdldFkoMCksbj0xO248PTQ7bisrKXt2YXIgaT10LmdldFgobikscj10LmdldFkobiksYT1pIT09cyx1PXIhPT1vO2lmKGE9PT11KXJldHVybiExO3M9aSxvPXJ9cmV0dXJuITB9LGVxdWFsc0V4YWN0OmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZighdGhpcy5pc0VxdWl2YWxlbnRDbGFzcyh0KSlyZXR1cm4hMTt2YXIgbj10LGk9dGhpcy5zaGVsbCxyPW4uc2hlbGw7aWYoIWkuZXF1YWxzRXhhY3QocixlKSlyZXR1cm4hMTtpZih0aGlzLmhvbGVzLmxlbmd0aCE9PW4uaG9sZXMubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcz0wO3M8dGhpcy5ob2xlcy5sZW5ndGg7cysrKWlmKCF0aGlzLmhvbGVzW3NdLmVxdWFsc0V4YWN0KG4uaG9sZXNbc10sZSkpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuIEIucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe3RoaXMubm9ybWFsaXplKHRoaXMuc2hlbGwsITApO2Zvcih2YXIgdD0wO3Q8dGhpcy5ob2xlcy5sZW5ndGg7dCsrKXRoaXMubm9ybWFsaXplKHRoaXMuaG9sZXNbdF0sITEpO3V0LnNvcnQodGhpcy5ob2xlcyl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO2lmKGUuaXNFbXB0eSgpKXJldHVybiBudWxsO3ZhciBpPW5ldyBBcnJheShlLmdldENvb3JkaW5hdGVzKCkubGVuZ3RoLTEpLmZpbGwobnVsbCk7QS5hcnJheWNvcHkoZS5nZXRDb29yZGluYXRlcygpLDAsaSwwLGkubGVuZ3RoKTt2YXIgcj1ILm1pbkNvb3JkaW5hdGUoZS5nZXRDb29yZGluYXRlcygpKTtILnNjcm9sbChpLHIpLEEuYXJyYXljb3B5KGksMCxlLmdldENvb3JkaW5hdGVzKCksMCxpLmxlbmd0aCksZS5nZXRDb29yZGluYXRlcygpW2kubGVuZ3RoXT1pWzBdLGhlLmlzQ0NXKGUuZ2V0Q29vcmRpbmF0ZXMoKSk9PT1uJiZILnJldmVyc2UoZS5nZXRDb29yZGluYXRlcygpKX19LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGVsbC5nZXRDb29yZGluYXRlKCl9LGdldE51bUludGVyaW9yUmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhvbGVzLmxlbmd0aH0sZ2V0Qm91bmRhcnlEaW1lbnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gMX0sZ2V0RGltZW5zaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIDJ9LGdldExlbmd0aDpmdW5jdGlvbigpe3ZhciB0PTA7dCs9dGhpcy5zaGVsbC5nZXRMZW5ndGgoKTtmb3IodmFyIGU9MDtlPHRoaXMuaG9sZXMubGVuZ3RoO2UrKyl0Kz10aGlzLmhvbGVzW2VdLmdldExlbmd0aCgpO3JldHVybiB0fSxnZXROdW1Qb2ludHM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5zaGVsbC5nZXROdW1Qb2ludHMoKSxlPTA7ZTx0aGlzLmhvbGVzLmxlbmd0aDtlKyspdCs9dGhpcy5ob2xlc1tlXS5nZXROdW1Qb2ludHMoKTtyZXR1cm4gdH0scmV2ZXJzZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY29weSgpO3Quc2hlbGw9dGhpcy5zaGVsbC5jb3B5KCkucmV2ZXJzZSgpLHQuaG9sZXM9bmV3IEFycmF5KHRoaXMuaG9sZXMubGVuZ3RoKS5maWxsKG51bGwpO2Zvcih2YXIgZT0wO2U8dGhpcy5ob2xlcy5sZW5ndGg7ZSsrKXQuaG9sZXNbZV09dGhpcy5ob2xlc1tlXS5jb3B5KCkucmV2ZXJzZSgpO3JldHVybiB0fSxjb252ZXhIdWxsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0RXh0ZXJpb3JSaW5nKCkuY29udmV4SHVsbCgpfSxjb21wYXJlVG9TYW1lQ2xhc3M6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy5zaGVsbCxuPXQuc2hlbGw7cmV0dXJuIGUuY29tcGFyZVRvU2FtZUNsYXNzKG4pfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0scz1pLGU9dGhpcy5zaGVsbCxuPXMuc2hlbGwsbz1lLmNvbXBhcmVUb1NhbWVDbGFzcyhuLHIpO2lmKDAhPT1vKXJldHVybiBvO2Zvcih2YXIgYT10aGlzLmdldE51bUludGVyaW9yUmluZygpLHU9cy5nZXROdW1JbnRlcmlvclJpbmcoKSxsPTA7bDxhJiZsPHU7KXt2YXIgaD10aGlzLmdldEludGVyaW9yUmluZ04obCksYz1zLmdldEludGVyaW9yUmluZ04obCksZj1oLmNvbXBhcmVUb1NhbWVDbGFzcyhjLHIpO2lmKDAhPT1mKXJldHVybiBmO2wrK31yZXR1cm4gbDxhPzE6bDx1Py0xOjB9fSxhcHBseTpmdW5jdGlvbigpe2lmKFIoYXJndW1lbnRzWzBdLHopKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5zaGVsbC5hcHBseSh0KTtmb3IodmFyIGU9MDtlPHRoaXMuaG9sZXMubGVuZ3RoO2UrKyl0aGlzLmhvbGVzW2VdLmFwcGx5KHQpfWVsc2UgaWYoUihhcmd1bWVudHNbMF0sY3QpKXt2YXIgbj1hcmd1bWVudHNbMF07aWYodGhpcy5zaGVsbC5hcHBseShuKSwhbi5pc0RvbmUoKSlmb3IodmFyIGU9MDtlPHRoaXMuaG9sZXMubGVuZ3RoJiYodGhpcy5ob2xlc1tlXS5hcHBseShuKSwhbi5pc0RvbmUoKSk7ZSsrKTtuLmlzR2VvbWV0cnlDaGFuZ2VkKCkmJnRoaXMuZ2VvbWV0cnlDaGFuZ2VkKCl9ZWxzZSBpZihSKGFyZ3VtZW50c1swXSxodCkpe3ZhciBpPWFyZ3VtZW50c1swXTtpLmZpbHRlcih0aGlzKX1lbHNlIGlmKFIoYXJndW1lbnRzWzBdLHEpKXt2YXIgcj1hcmd1bWVudHNbMF07ci5maWx0ZXIodGhpcyksdGhpcy5zaGVsbC5hcHBseShyKTtmb3IodmFyIGU9MDtlPHRoaXMuaG9sZXMubGVuZ3RoO2UrKyl0aGlzLmhvbGVzW2VdLmFwcGx5KHIpfX0sZ2V0Qm91bmRhcnk6ZnVuY3Rpb24oKXtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4gdGhpcy5nZXRGYWN0b3J5KCkuY3JlYXRlTXVsdGlMaW5lU3RyaW5nKCk7dmFyIHQ9bmV3IEFycmF5KHRoaXMuaG9sZXMubGVuZ3RoKzEpLmZpbGwobnVsbCk7dFswXT10aGlzLnNoZWxsO2Zvcih2YXIgZT0wO2U8dGhpcy5ob2xlcy5sZW5ndGg7ZSsrKXRbZSsxXT10aGlzLmhvbGVzW2VdO3JldHVybiB0Lmxlbmd0aDw9MT90aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVMaW5lYXJSaW5nKHRbMF0uZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCkpOnRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZU11bHRpTGluZVN0cmluZyh0KX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgdD1CLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpO3Quc2hlbGw9dGhpcy5zaGVsbC5jbG9uZSgpLHQuaG9sZXM9bmV3IEFycmF5KHRoaXMuaG9sZXMubGVuZ3RoKS5maWxsKG51bGwpO2Zvcih2YXIgZT0wO2U8dGhpcy5ob2xlcy5sZW5ndGg7ZSsrKXQuaG9sZXNbZV09dGhpcy5ob2xlc1tlXS5jbG9uZSgpO3JldHVybiB0fSxnZXRHZW9tZXRyeVR5cGU6ZnVuY3Rpb24oKXtyZXR1cm5cIlBvbHlnb25cIn0sY29weTpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLnNoZWxsLmNvcHkoKSxlPW5ldyBBcnJheSh0aGlzLmhvbGVzLmxlbmd0aCkuZmlsbChudWxsKSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXT10aGlzLmhvbGVzW25dLmNvcHkoKTtyZXR1cm4gbmV3IFR0KHQsZSx0aGlzLmZhY3RvcnkpfSxnZXRFeHRlcmlvclJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGVsbH0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoZWxsLmlzRW1wdHkoKX0sZ2V0SW50ZXJpb3JSaW5nTjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ob2xlc1t0XX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bUnRdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBUdH19KSxUdC5zZXJpYWxWZXJzaW9uVUlEPS0weDMwN2ZmZWZkOGRjOTcyMDAsaChQdCxmdCksZShQdC5wcm90b3R5cGUse2dldFNvcnRJbmRleDpmdW5jdGlvbigpe3JldHVybiBCLlNPUlRJTkRFWF9NVUxUSVBPSU5UfSxpc1ZhbGlkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LGVxdWFsc0V4YWN0OmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtyZXR1cm4hIXRoaXMuaXNFcXVpdmFsZW50Q2xhc3ModCkmJmZ0LnByb3RvdHlwZS5lcXVhbHNFeGFjdC5jYWxsKHRoaXMsdCxlKX1yZXR1cm4gZnQucHJvdG90eXBlLmVxdWFsc0V4YWN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZ2V0Q29vcmRpbmF0ZTpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZ2VvbWV0cmllc1t0XS5nZXRDb29yZGluYXRlKCl9cmV0dXJuIGZ0LnByb3RvdHlwZS5nZXRDb29yZGluYXRlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZ2V0Qm91bmRhcnlEaW1lbnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gbHQuRkFMU0V9LGdldERpbWVuc2lvbjpmdW5jdGlvbigpe3JldHVybiAwfSxnZXRCb3VuZGFyeTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24obnVsbCl9LGdldEdlb21ldHJ5VHlwZTpmdW5jdGlvbigpe3JldHVyblwiTXVsdGlQb2ludFwifSxjb3B5OmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLmdlb21ldHJpZXMubGVuZ3RoKS5maWxsKG51bGwpLGU9MDtlPHQubGVuZ3RoO2UrKyl0W2VdPXRoaXMuZ2VvbWV0cmllc1tlXS5jb3B5KCk7cmV0dXJuIG5ldyBQdCh0LHRoaXMuZmFjdG9yeSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3d0XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gUHR9fSksUHQuc2VyaWFsVmVyc2lvblVJRD0tMHg2ZmIxZWQ0MTYyZTBmYzAwLGgoYnQsU3QpLGUoYnQucHJvdG90eXBlLHtnZXRTb3J0SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gQi5TT1JUSU5ERVhfTElORUFSUklOR30sZ2V0Qm91bmRhcnlEaW1lbnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gbHQuRkFMU0V9LGlzQ2xvc2VkOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmlzRW1wdHkoKXx8U3QucHJvdG90eXBlLmlzQ2xvc2VkLmNhbGwodGhpcyl9LHJldmVyc2U6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBvaW50cy5jb3B5KCk7Q3QucmV2ZXJzZSh0KTt2YXIgZT10aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVMaW5lYXJSaW5nKHQpO3JldHVybiBlfSx2YWxpZGF0ZUNvbnN0cnVjdGlvbjpmdW5jdGlvbigpe2lmKCF0aGlzLmlzRW1wdHkoKSYmIVN0LnByb3RvdHlwZS5pc0Nsb3NlZC5jYWxsKHRoaXMpKXRocm93IG5ldyBpKFwiUG9pbnRzIG9mIExpbmVhclJpbmcgZG8gbm90IGZvcm0gYSBjbG9zZWQgbGluZXN0cmluZ1wiKTtpZih0aGlzLmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLnNpemUoKT49MSYmdGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2UoKS5zaXplKCk8YnQuTUlOSU1VTV9WQUxJRF9TSVpFKXRocm93IG5ldyBpKFwiSW52YWxpZCBudW1iZXIgb2YgcG9pbnRzIGluIExpbmVhclJpbmcgKGZvdW5kIFwiK3RoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCkuc2l6ZSgpK1wiIC0gbXVzdCBiZSAwIG9yID49IDQpXCIpfSxnZXRHZW9tZXRyeVR5cGU6ZnVuY3Rpb24oKXtyZXR1cm5cIkxpbmVhclJpbmdcIn0sY29weTpmdW5jdGlvbigpe3JldHVybiBuZXcgYnQodGhpcy5wb2ludHMuY29weSgpLHRoaXMuZmFjdG9yeSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGJ0fX0pLGJ0Lk1JTklNVU1fVkFMSURfU0laRT00LGJ0LnNlcmlhbFZlcnNpb25VSUQ9LTB4M2IyMjllMjYyMzY3YTYwMCxoKE90LGZ0KSxlKE90LnByb3RvdHlwZSx7Z2V0U29ydEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIEIuU09SVElOREVYX01VTFRJUE9MWUdPTn0sZXF1YWxzRXhhY3Q6ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3JldHVybiEhdGhpcy5pc0VxdWl2YWxlbnRDbGFzcyh0KSYmZnQucHJvdG90eXBlLmVxdWFsc0V4YWN0LmNhbGwodGhpcyx0LGUpfXJldHVybiBmdC5wcm90b3R5cGUuZXF1YWxzRXhhY3QuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxnZXRCb3VuZGFyeURpbWVuc2lvbjpmdW5jdGlvbigpe3JldHVybiAxfSxnZXREaW1lbnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gMn0scmV2ZXJzZTpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmdlb21ldHJpZXMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLmZpbGwobnVsbCksbj0wO248dGhpcy5nZW9tZXRyaWVzLmxlbmd0aDtuKyspZVtuXT10aGlzLmdlb21ldHJpZXNbbl0ucmV2ZXJzZSgpO3JldHVybiB0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVNdWx0aVBvbHlnb24oZSl9LGdldEJvdW5kYXJ5OmZ1bmN0aW9uKCl7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuIHRoaXMuZ2V0RmFjdG9yeSgpLmNyZWF0ZU11bHRpTGluZVN0cmluZygpO2Zvcih2YXIgdD1uZXcgSSxlPTA7ZTx0aGlzLmdlb21ldHJpZXMubGVuZ3RoO2UrKylmb3IodmFyIG49dGhpcy5nZW9tZXRyaWVzW2VdLGk9bi5nZXRCb3VuZGFyeSgpLHI9MDtyPGkuZ2V0TnVtR2VvbWV0cmllcygpO3IrKyl0LmFkZChpLmdldEdlb21ldHJ5TihyKSk7dmFyIHM9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpO3JldHVybiB0aGlzLmdldEZhY3RvcnkoKS5jcmVhdGVNdWx0aUxpbmVTdHJpbmcodC50b0FycmF5KHMpKX0sZ2V0R2VvbWV0cnlUeXBlOmZ1bmN0aW9uKCl7cmV0dXJuXCJNdWx0aVBvbHlnb25cIn0sY29weTpmdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgQXJyYXkodGhpcy5nZW9tZXRyaWVzLmxlbmd0aCkuZmlsbChudWxsKSxlPTA7ZTx0Lmxlbmd0aDtlKyspdFtlXT10aGlzLmdlb21ldHJpZXNbZV0uY29weSgpO3JldHVybiBuZXcgT3QodCx0aGlzLmZhY3RvcnkpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltSdF19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE90fX0pLE90LnNlcmlhbFZlcnNpb25VSUQ9LTB4N2E1YWExMzY5MTcxOTgwLGUoX3QucHJvdG90eXBlLHtzZXRDb3B5VXNlckRhdGE6ZnVuY3Rpb24odCl7dGhpcy5pc1VzZXJEYXRhQ29waWVkPXR9LGVkaXQ6ZnVuY3Rpb24odCxlKXtpZihudWxsPT09dClyZXR1cm4gbnVsbDt2YXIgbj10aGlzLmVkaXRJbnRlcm5hbCh0LGUpO3JldHVybiB0aGlzLmlzVXNlckRhdGFDb3BpZWQmJm4uc2V0VXNlckRhdGEodC5nZXRVc2VyRGF0YSgpKSxufSxlZGl0SW50ZXJuYWw6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09PXRoaXMuZmFjdG9yeSYmKHRoaXMuZmFjdG9yeT10LmdldEZhY3RvcnkoKSksdCBpbnN0YW5jZW9mIGZ0P3RoaXMuZWRpdEdlb21ldHJ5Q29sbGVjdGlvbih0LGUpOnQgaW5zdGFuY2VvZiBUdD90aGlzLmVkaXRQb2x5Z29uKHQsZSk6dCBpbnN0YW5jZW9mIEx0P2UuZWRpdCh0LHRoaXMuZmFjdG9yeSk6dCBpbnN0YW5jZW9mIFN0P2UuZWRpdCh0LHRoaXMuZmFjdG9yeSk6KGYuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoXCJVbnN1cHBvcnRlZCBHZW9tZXRyeSBjbGFzczogXCIrdC5nZXRDbGFzcygpLmdldE5hbWUoKSksbnVsbCl9LGVkaXRHZW9tZXRyeUNvbGxlY3Rpb246ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49ZS5lZGl0KHQsdGhpcy5mYWN0b3J5KSxpPW5ldyBJLHI9MDtyPG4uZ2V0TnVtR2VvbWV0cmllcygpO3IrKyl7dmFyIHM9dGhpcy5lZGl0KG4uZ2V0R2VvbWV0cnlOKHIpLGUpO251bGw9PT1zfHxzLmlzRW1wdHkoKXx8aS5hZGQocyl9cmV0dXJuIG4uZ2V0Q2xhc3MoKT09PVB0P3RoaXMuZmFjdG9yeS5jcmVhdGVNdWx0aVBvaW50KGkudG9BcnJheShbXSkpOm4uZ2V0Q2xhc3MoKT09PWd0P3RoaXMuZmFjdG9yeS5jcmVhdGVNdWx0aUxpbmVTdHJpbmcoaS50b0FycmF5KFtdKSk6bi5nZXRDbGFzcygpPT09T3Q/dGhpcy5mYWN0b3J5LmNyZWF0ZU11bHRpUG9seWdvbihpLnRvQXJyYXkoW10pKTp0aGlzLmZhY3RvcnkuY3JlYXRlR2VvbWV0cnlDb2xsZWN0aW9uKGkudG9BcnJheShbXSkpfSxlZGl0UG9seWdvbjpmdW5jdGlvbih0LGUpe3ZhciBuPWUuZWRpdCh0LHRoaXMuZmFjdG9yeSk7aWYobnVsbD09PW4mJihuPXRoaXMuZmFjdG9yeS5jcmVhdGVQb2x5Z29uKG51bGwpKSxuLmlzRW1wdHkoKSlyZXR1cm4gbjt2YXIgaT10aGlzLmVkaXQobi5nZXRFeHRlcmlvclJpbmcoKSxlKTtpZihudWxsPT09aXx8aS5pc0VtcHR5KCkpcmV0dXJuIHRoaXMuZmFjdG9yeS5jcmVhdGVQb2x5Z29uKCk7Zm9yKHZhciByPW5ldyBJLHM9MDtzPG4uZ2V0TnVtSW50ZXJpb3JSaW5nKCk7cysrKXt2YXIgbz10aGlzLmVkaXQobi5nZXRJbnRlcmlvclJpbmdOKHMpLGUpO251bGw9PT1vfHxvLmlzRW1wdHkoKXx8ci5hZGQobyl9cmV0dXJuIHRoaXMuZmFjdG9yeS5jcmVhdGVQb2x5Z29uKGksci50b0FycmF5KFtdKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIF90fX0pLF90Lkdlb21ldHJ5RWRpdG9yT3BlcmF0aW9uPU10LGUoRHQucHJvdG90eXBlLHtlZGl0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW010XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gRHR9fSksZShBdC5wcm90b3R5cGUse2VkaXQ6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmVkaXRDb29yZGluYXRlcyh0LmdldENvb3JkaW5hdGVzKCksdCk7cmV0dXJuIG51bGw9PT1uP3Q6dCBpbnN0YW5jZW9mIGJ0P2UuY3JlYXRlTGluZWFyUmluZyhuKTp0IGluc3RhbmNlb2YgU3Q/ZS5jcmVhdGVMaW5lU3RyaW5nKG4pOnQgaW5zdGFuY2VvZiBMdD9uLmxlbmd0aD4wP2UuY3JlYXRlUG9pbnQoblswXSk6ZS5jcmVhdGVQb2ludCgpOnR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW010XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gQXR9fSksZShGdC5wcm90b3R5cGUse2VkaXQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdCBpbnN0YW5jZW9mIGJ0P2UuY3JlYXRlTGluZWFyUmluZyh0aGlzLmVkaXQodC5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSx0KSk6dCBpbnN0YW5jZW9mIFN0P2UuY3JlYXRlTGluZVN0cmluZyh0aGlzLmVkaXQodC5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSx0KSk6dCBpbnN0YW5jZW9mIEx0P2UuY3JlYXRlUG9pbnQodGhpcy5lZGl0KHQuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCksdCkpOnR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW010XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gRnR9fSksX3QuTm9PcEdlb21ldHJ5T3BlcmF0aW9uPUR0LF90LkNvb3JkaW5hdGVPcGVyYXRpb249QXQsX3QuQ29vcmRpbmF0ZVNlcXVlbmNlT3BlcmF0aW9uPUZ0LGUoR3QucHJvdG90eXBlLHtzZXRPcmRpbmF0ZTpmdW5jdGlvbih0LGUsbil7c3dpdGNoKGUpe2Nhc2UgRC5YOnRoaXMuY29vcmRpbmF0ZXNbdF0ueD1uO2JyZWFrO2Nhc2UgRC5ZOnRoaXMuY29vcmRpbmF0ZXNbdF0ueT1uO2JyZWFrO2Nhc2UgRC5aOnRoaXMuY29vcmRpbmF0ZXNbdF0uej1uO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IGkoXCJpbnZhbGlkIG9yZGluYXRlSW5kZXhcIil9fSxzaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RofSxnZXRPcmRpbmF0ZTpmdW5jdGlvbih0LGUpe3N3aXRjaChlKXtjYXNlIEQuWDpyZXR1cm4gdGhpcy5jb29yZGluYXRlc1t0XS54O2Nhc2UgRC5ZOnJldHVybiB0aGlzLmNvb3JkaW5hdGVzW3RdLnk7Y2FzZSBELlo6cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXNbdF0uen1yZXR1cm4gci5OYU59LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNvb3JkaW5hdGVzW3RdfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07bi54PXRoaXMuY29vcmRpbmF0ZXNbZV0ueCxuLnk9dGhpcy5jb29yZGluYXRlc1tlXS55LG4uej10aGlzLmNvb3JkaW5hdGVzW2VdLnp9fSxnZXRDb29yZGluYXRlQ29weTpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGcodGhpcy5jb29yZGluYXRlc1t0XSl9LGdldERpbWVuc2lvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpbWVuc2lvbn0sZ2V0WDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jb29yZGluYXRlc1t0XS54fSxjbG9uZTpmdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgQXJyYXkodGhpcy5zaXplKCkpLmZpbGwobnVsbCksZT0wO2U8dGhpcy5jb29yZGluYXRlcy5sZW5ndGg7ZSsrKXRbZV09dGhpcy5jb29yZGluYXRlc1tlXS5jbG9uZSgpO3JldHVybiBuZXcgR3QodCx0aGlzLmRpbWVuc2lvbil9LGV4cGFuZEVudmVsb3BlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5jb29yZGluYXRlcy5sZW5ndGg7ZSsrKXQuZXhwYW5kVG9JbmNsdWRlKHRoaXMuY29vcmRpbmF0ZXNbZV0pO3JldHVybiB0fSxjb3B5OmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLnNpemUoKSkuZmlsbChudWxsKSxlPTA7ZTx0aGlzLmNvb3JkaW5hdGVzLmxlbmd0aDtlKyspdFtlXT10aGlzLmNvb3JkaW5hdGVzW2VdLmNvcHkoKTtyZXR1cm4gbmV3IEd0KHQsdGhpcy5kaW1lbnNpb24pfSx0b1N0cmluZzpmdW5jdGlvbigpe2lmKHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoPjApe3ZhciB0PW5ldyBQKDE3KnRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoKTt0LmFwcGVuZChcIihcIiksdC5hcHBlbmQodGhpcy5jb29yZGluYXRlc1swXSk7Zm9yKHZhciBlPTE7ZTx0aGlzLmNvb3JkaW5hdGVzLmxlbmd0aDtlKyspdC5hcHBlbmQoXCIsIFwiKSx0LmFwcGVuZCh0aGlzLmNvb3JkaW5hdGVzW2VdKTtyZXR1cm4gdC5hcHBlbmQoXCIpXCIpLHQudG9TdHJpbmcoKX1yZXR1cm5cIigpXCJ9LGdldFk6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXNbdF0ueX0sdG9Db29yZGluYXRlQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb29yZGluYXRlc30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bRCx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gR3R9fSksR3Quc2VyaWFsVmVyc2lvblVJRD0tMHhjYjQ0YTc3OGRiMThlMDAsZShxdC5wcm90b3R5cGUse3JlYWRSZXNvbHZlOmZ1bmN0aW9uKCl7cmV0dXJuIHF0Lmluc3RhbmNlKCl9LGNyZWF0ZTpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5KXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIG5ldyBHdCh0KX1pZihSKGFyZ3VtZW50c1swXSxEKSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiBuZXcgR3QoZSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtyZXR1cm4gaT4zJiYoaT0zKSxpPDI/bmV3IEd0KG4pOm5ldyBHdChuLGkpfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bRyx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcXR9fSkscXQuaW5zdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gcXQuaW5zdGFuY2VPYmplY3R9LHF0LnNlcmlhbFZlcnNpb25VSUQ9LTB4MzhlNDlmYTZjZjZmMmUwMCxxdC5pbnN0YW5jZU9iamVjdD1uZXcgcXQ7dmFyIG5vLGlvPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxybz16dCh7ZGVsZXRlOmt0LGhhczpYdCxnZXQ6WXQsc2V0Okh0LGtleXM6anQsdmFsdWVzOkt0LGVudHJpZXM6WnQsZm9yRWFjaDokdCxjbGVhcjpXdH0pLHNvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAmJk1hcC5wcm90b3R5cGUudmFsdWVzP01hcDpybzt0ZS5wcm90b3R5cGU9bmV3IEssdGUucHJvdG90eXBlLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5tYXBfLmdldCh0KXx8bnVsbH0sdGUucHJvdG90eXBlLnB1dD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLm1hcF8uc2V0KHQsZSksZX0sdGUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgSSxlPXRoaXMubWFwXy52YWx1ZXMoKSxuPWUubmV4dCgpOyFuLmRvbmU7KXQuYWRkKG4udmFsdWUpLG49ZS5uZXh0KCk7cmV0dXJuIHR9LHRlLnByb3RvdHlwZS5lbnRyeVNldD1mdW5jdGlvbigpe3ZhciB0PW5ldyBKO3JldHVybiB0aGlzLm1hcF8uZW50cmllcygpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQuYWRkKGUpfSksdH0sdGUucHJvdG90eXBlLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXBfLnNpemUoKX0sZShlZS5wcm90b3R5cGUse2VxdWFsczpmdW5jdGlvbih0KXtpZighKHQgaW5zdGFuY2VvZiBlZSkpcmV0dXJuITE7dmFyIGU9dDtyZXR1cm4gdGhpcy5tb2RlbFR5cGU9PT1lLm1vZGVsVHlwZSYmdGhpcy5zY2FsZT09PWUuc2NhbGV9LGNvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10LG49dGhpcy5nZXRNYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMoKSxpPWUuZ2V0TWF4aW11bVNpZ25pZmljYW50RGlnaXRzKCk7cmV0dXJuIG5ldyBiKG4pLmNvbXBhcmVUbyhuZXcgYihpKSl9LGdldFNjYWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2NhbGV9LGlzRmxvYXRpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb2RlbFR5cGU9PT1lZS5GTE9BVElOR3x8dGhpcy5tb2RlbFR5cGU9PT1lZS5GTE9BVElOR19TSU5HTEV9LGdldFR5cGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb2RlbFR5cGV9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9XCJVTktOT1dOXCI7cmV0dXJuIHRoaXMubW9kZWxUeXBlPT09ZWUuRkxPQVRJTkc/dD1cIkZsb2F0aW5nXCI6dGhpcy5tb2RlbFR5cGU9PT1lZS5GTE9BVElOR19TSU5HTEU/dD1cIkZsb2F0aW5nLVNpbmdsZVwiOnRoaXMubW9kZWxUeXBlPT09ZWUuRklYRUQmJih0PVwiRml4ZWQgKFNjYWxlPVwiK3RoaXMuZ2V0U2NhbGUoKStcIilcIiksdH0sbWFrZVByZWNpc2U6ZnVuY3Rpb24oKXtpZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgdD1hcmd1bWVudHNbMF07aWYoci5pc05hTih0KSlyZXR1cm4gdDtpZih0aGlzLm1vZGVsVHlwZT09PWVlLkZMT0FUSU5HX1NJTkdMRSl7dmFyIGU9dDtyZXR1cm4gZX1yZXR1cm4gdGhpcy5tb2RlbFR5cGU9PT1lZS5GSVhFRD9NYXRoLnJvdW5kKHQqdGhpcy5zY2FsZSkvdGhpcy5zY2FsZTp0fWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyl7dmFyIG49YXJndW1lbnRzWzBdO2lmKHRoaXMubW9kZWxUeXBlPT09ZWUuRkxPQVRJTkcpcmV0dXJuIG51bGw7bi54PXRoaXMubWFrZVByZWNpc2Uobi54KSxuLnk9dGhpcy5tYWtlUHJlY2lzZShuLnkpfX0sZ2V0TWF4aW11bVNpZ25pZmljYW50RGlnaXRzOmZ1bmN0aW9uKCl7dmFyIHQ9MTY7cmV0dXJuIHRoaXMubW9kZWxUeXBlPT09ZWUuRkxPQVRJTkc/dD0xNjp0aGlzLm1vZGVsVHlwZT09PWVlLkZMT0FUSU5HX1NJTkdMRT90PTY6dGhpcy5tb2RlbFR5cGU9PT1lZS5GSVhFRCYmKHQ9MStNYXRoLnRydW5jKE1hdGguY2VpbChNYXRoLmxvZyh0aGlzLmdldFNjYWxlKCkpL01hdGgubG9nKDEwKSkpKSx0fSxzZXRTY2FsZTpmdW5jdGlvbih0KXt0aGlzLnNjYWxlPU1hdGguYWJzKHQpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblt1LHNdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBlZX19KSxlZS5tb3N0UHJlY2lzZT1mdW5jdGlvbih0LGUpe3JldHVybiB0LmNvbXBhcmVUbyhlKT49MD90OmV9LGUobmUucHJvdG90eXBlLHtyZWFkUmVzb2x2ZTpmdW5jdGlvbigpe3JldHVybiBuZS5uYW1lVG9UeXBlTWFwLmdldCh0aGlzLm5hbWUpfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3VdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBuZX19KSxuZS5zZXJpYWxWZXJzaW9uVUlEPS01NTI4NjAyNjMxNzMxNTllNCxuZS5uYW1lVG9UeXBlTWFwPW5ldyB0ZSxlZS5UeXBlPW5lLGVlLnNlcmlhbFZlcnNpb25VSUQ9MHg2YmVlNjQwNGU5YTI1YzAwLGVlLkZJWEVEPW5ldyBuZShcIkZJWEVEXCIpLGVlLkZMT0FUSU5HPW5ldyBuZShcIkZMT0FUSU5HXCIpLGVlLkZMT0FUSU5HX1NJTkdMRT1uZXcgbmUoXCJGTE9BVElORyBTSU5HTEVcIiksZWUubWF4aW11bVByZWNpc2VWYWx1ZT05MDA3MTk5MjU0NzQwOTkyLGUoaWUucHJvdG90eXBlLHt0b0dlb21ldHJ5OmZ1bmN0aW9uKHQpe3JldHVybiB0LmlzTnVsbCgpP3RoaXMuY3JlYXRlUG9pbnQobnVsbCk6dC5nZXRNaW5YKCk9PT10LmdldE1heFgoKSYmdC5nZXRNaW5ZKCk9PT10LmdldE1heFkoKT90aGlzLmNyZWF0ZVBvaW50KG5ldyBnKHQuZ2V0TWluWCgpLHQuZ2V0TWluWSgpKSk6dC5nZXRNaW5YKCk9PT10LmdldE1heFgoKXx8dC5nZXRNaW5ZKCk9PT10LmdldE1heFkoKT90aGlzLmNyZWF0ZUxpbmVTdHJpbmcoW25ldyBnKHQuZ2V0TWluWCgpLHQuZ2V0TWluWSgpKSxuZXcgZyh0LmdldE1heFgoKSx0LmdldE1heFkoKSldKTp0aGlzLmNyZWF0ZVBvbHlnb24odGhpcy5jcmVhdGVMaW5lYXJSaW5nKFtuZXcgZyh0LmdldE1pblgoKSx0LmdldE1pblkoKSksbmV3IGcodC5nZXRNaW5YKCksdC5nZXRNYXhZKCkpLG5ldyBnKHQuZ2V0TWF4WCgpLHQuZ2V0TWF4WSgpKSxuZXcgZyh0LmdldE1heFgoKSx0LmdldE1pblkoKSksbmV3IGcodC5nZXRNaW5YKCksdC5nZXRNaW5ZKCkpXSksbnVsbCl9LGNyZWF0ZUxpbmVTdHJpbmc6ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5jcmVhdGVMaW5lU3RyaW5nKHRoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShbXSkpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5KXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuY3JlYXRlTGluZVN0cmluZyhudWxsIT09dD90aGlzLmdldENvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkoKS5jcmVhdGUodCk6bnVsbCl9aWYoUihhcmd1bWVudHNbMF0sRCkpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gbmV3IFN0KGUsdGhpcyl9fX0sY3JlYXRlTXVsdGlMaW5lU3RyaW5nOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIG5ldyBndChudWxsLHRoaXMpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIG5ldyBndCh0LHRoaXMpfX0sYnVpbGRHZW9tZXRyeTpmdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPSExLGk9ITEscj10Lml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKSxvPXMuZ2V0Q2xhc3MoKTtudWxsPT09ZSYmKGU9byksbyE9PWUmJihuPSEwKSxzLmlzR2VvbWV0cnlDb2xsZWN0aW9uT3JEZXJpdmVkKCkmJihpPSEwKX1pZihudWxsPT09ZSlyZXR1cm4gdGhpcy5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24oKTtpZihufHxpKXJldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihpZS50b0dlb21ldHJ5QXJyYXkodCkpO3ZhciBhPXQuaXRlcmF0b3IoKS5uZXh0KCksdT10LnNpemUoKT4xO2lmKHUpe2lmKGEgaW5zdGFuY2VvZiBUdClyZXR1cm4gdGhpcy5jcmVhdGVNdWx0aVBvbHlnb24oaWUudG9Qb2x5Z29uQXJyYXkodCkpO2lmKGEgaW5zdGFuY2VvZiBTdClyZXR1cm4gdGhpcy5jcmVhdGVNdWx0aUxpbmVTdHJpbmcoaWUudG9MaW5lU3RyaW5nQXJyYXkodCkpO2lmKGEgaW5zdGFuY2VvZiBMdClyZXR1cm4gdGhpcy5jcmVhdGVNdWx0aVBvaW50KGllLnRvUG9pbnRBcnJheSh0KSk7Zi5zaG91bGROZXZlclJlYWNoSGVyZShcIlVuaGFuZGxlZCBjbGFzczogXCIrYS5nZXRDbGFzcygpLmdldE5hbWUoKSl9cmV0dXJuIGF9LGNyZWF0ZU11bHRpUG9pbnRGcm9tQ29vcmRzOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNyZWF0ZU11bHRpUG9pbnQobnVsbCE9PXQ/dGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKHQpOm51bGwpfSxjcmVhdGVQb2ludDpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmNyZWF0ZVBvaW50KHRoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShbXSkpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jcmVhdGVQb2ludChudWxsIT09dD90aGlzLmdldENvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkoKS5jcmVhdGUoW3RdKTpudWxsKX1pZihSKGFyZ3VtZW50c1swXSxEKSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiBuZXcgTHQoZSx0aGlzKX19fSxnZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeX0sY3JlYXRlUG9seWdvbjpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBuZXcgVHQobnVsbCxudWxsLHRoaXMpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihSKGFyZ3VtZW50c1swXSxEKSl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNyZWF0ZVBvbHlnb24odGhpcy5jcmVhdGVMaW5lYXJSaW5nKHQpKX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5KXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuY3JlYXRlUG9seWdvbih0aGlzLmNyZWF0ZUxpbmVhclJpbmcoZSkpfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgYnQpe3ZhciBuPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jcmVhdGVQb2x5Z29uKG4sbnVsbCl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXTtyZXR1cm4gbmV3IFR0KGkscix0aGlzKX19LGdldFNSSUQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5TUklEfSxjcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb246ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbmV3IGZ0KG51bGwsdGhpcyk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gbmV3IGZ0KHQsdGhpcyl9fSxjcmVhdGVHZW9tZXRyeTpmdW5jdGlvbih0KXt2YXIgZT1uZXcgX3QodGhpcyk7cmV0dXJuIGUuZWRpdCh0LHtlZGl0OmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTthcmd1bWVudHNbMV07cmV0dXJuIHRoaXMuY29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeS5jcmVhdGUodCl9fX0pfSxnZXRQcmVjaXNpb25Nb2RlbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZWNpc2lvbk1vZGVsfSxjcmVhdGVMaW5lYXJSaW5nOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuY3JlYXRlTGluZWFyUmluZyh0aGlzLmdldENvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkoKS5jcmVhdGUoW10pKTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNyZWF0ZUxpbmVhclJpbmcobnVsbCE9PXQ/dGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKHQpOm51bGwpfWlmKFIoYXJndW1lbnRzWzBdLEQpKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIG5ldyBidChlLHRoaXMpfX19LGNyZWF0ZU11bHRpUG9seWdvbjpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBuZXcgT3QobnVsbCx0aGlzKTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiBuZXcgT3QodCx0aGlzKX19LGNyZWF0ZU11bHRpUG9pbnQ6ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbmV3IFB0KG51bGwsdGhpcyk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gbmV3IFB0KHQsdGhpcyl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmNyZWF0ZU11bHRpUG9pbnQobnVsbCE9PWU/dGhpcy5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkuY3JlYXRlKGUpOm51bGwpfWlmKFIoYXJndW1lbnRzWzBdLEQpKXt2YXIgbj1hcmd1bWVudHNbMF07aWYobnVsbD09PW4pcmV0dXJuIHRoaXMuY3JlYXRlTXVsdGlQb2ludChuZXcgQXJyYXkoMCkuZmlsbChudWxsKSk7Zm9yKHZhciBpPW5ldyBBcnJheShuLnNpemUoKSkuZmlsbChudWxsKSxyPTA7cjxuLnNpemUoKTtyKyspe3ZhciBzPXRoaXMuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZSgxLG4uZ2V0RGltZW5zaW9uKCkpO0N0LmNvcHkobixyLHMsMCwxKSxpW3JdPXRoaXMuY3JlYXRlUG9pbnQocyl9cmV0dXJuIHRoaXMuY3JlYXRlTXVsdGlQb2ludChpKX19fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblt1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaWV9fSksaWUudG9NdWx0aVBvbHlnb25BcnJheT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQXJyYXkodC5zaXplKCkpLmZpbGwobnVsbCk7cmV0dXJuIHQudG9BcnJheShlKX0saWUudG9HZW9tZXRyeUFycmF5PWZ1bmN0aW9uKHQpe2lmKG51bGw9PT10KXJldHVybiBudWxsO3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxpZS5nZXREZWZhdWx0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeT1mdW5jdGlvbigpe3JldHVybiBxdC5pbnN0YW5jZSgpfSxpZS50b011bHRpTGluZVN0cmluZ0FycmF5PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxpZS50b0xpbmVTdHJpbmdBcnJheT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQXJyYXkodC5zaXplKCkpLmZpbGwobnVsbCk7cmV0dXJuIHQudG9BcnJheShlKX0saWUudG9NdWx0aVBvaW50QXJyYXk9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpO3JldHVybiB0LnRvQXJyYXkoZSl9LGllLnRvTGluZWFyUmluZ0FycmF5PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxpZS50b1BvaW50QXJyYXk9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpO3JldHVybiB0LnRvQXJyYXkoZSl9LGllLnRvUG9seWdvbkFycmF5PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdC50b0FycmF5KGUpfSxpZS5jcmVhdGVQb2ludEZyb21JbnRlcm5hbENvb3JkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuZ2V0UHJlY2lzaW9uTW9kZWwoKS5tYWtlUHJlY2lzZSh0KSxlLmdldEZhY3RvcnkoKS5jcmVhdGVQb2ludCh0KX0saWUuc2VyaWFsVmVyc2lvblVJRD0tMHg1ZWE3NWYyMDUxZWViNDAwO3ZhciBvbz17dHlwZVN0cjovXlxccyooXFx3KylcXHMqXFwoXFxzKiguKilcXHMqXFwpXFxzKiQvLGVtcHR5VHlwZVN0cjovXlxccyooXFx3KylcXHMqRU1QVFlcXHMqJC8sc3BhY2VzOi9cXHMrLyxwYXJlbkNvbW1hOi9cXClcXHMqLFxccypcXCgvLGRvdWJsZVBhcmVuQ29tbWE6L1xcKVxccypcXClcXHMqLFxccypcXChcXHMqXFwoLyx0cmltUGFyZW5zOi9eXFxzKlxcKD8oLio/KVxcKT9cXHMqJC99O2UocmUucHJvdG90eXBlLHtyZWFkOmZ1bmN0aW9uKHQpe3ZhciBlLG4saTt0PXQucmVwbGFjZSgvW1xcblxccl0vZyxcIiBcIik7dmFyIHI9b28udHlwZVN0ci5leGVjKHQpO2lmKHQuc2VhcmNoKFwiRU1QVFlcIikhPT0tMSYmKHI9b28uZW1wdHlUeXBlU3RyLmV4ZWModCksclsyXT12b2lkIDApLHImJihuPXJbMV0udG9Mb3dlckNhc2UoKSxcbmk9clsyXSx1b1tuXSYmKGU9dW9bbl0uYXBwbHkodGhpcyxbaV0pKSksdm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcGFyc2UgV0tUIFwiK3QpO3JldHVybiBlfSx3cml0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5leHRyYWN0R2VvbWV0cnkodCl9LGV4dHJhY3RHZW9tZXRyeTpmdW5jdGlvbih0KXt2YXIgZT10LmdldEdlb21ldHJ5VHlwZSgpLnRvTG93ZXJDYXNlKCk7aWYoIWFvW2VdKXJldHVybiBudWxsO3ZhciBuLGk9ZS50b1VwcGVyQ2FzZSgpO3JldHVybiBuPXQuaXNFbXB0eSgpP2krXCIgRU1QVFlcIjppK1wiKFwiK2FvW2VdLmFwcGx5KHRoaXMsW3RdKStcIilcIn19KTt2YXIgYW89e2Nvb3JkaW5hdGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQueCtcIiBcIit0Lnl9LHBvaW50OmZ1bmN0aW9uKHQpe3JldHVybiBhby5jb29yZGluYXRlLmNhbGwodGhpcyx0LmNvb3JkaW5hdGVzLmNvb3JkaW5hdGVzWzBdKX0sbXVsdGlwb2ludDpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wLGk9dC5nZW9tZXRyaWVzLmxlbmd0aDtuPGk7KytuKWUucHVzaChcIihcIithby5wb2ludC5hcHBseSh0aGlzLFt0Lmdlb21ldHJpZXNbbl1dKStcIilcIik7cmV0dXJuIGUuam9pbihcIixcIil9LGxpbmVzdHJpbmc6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MCxpPXQucG9pbnRzLmNvb3JkaW5hdGVzLmxlbmd0aDtuPGk7KytuKWUucHVzaChhby5jb29yZGluYXRlLmFwcGx5KHRoaXMsW3QucG9pbnRzLmNvb3JkaW5hdGVzW25dXSkpO3JldHVybiBlLmpvaW4oXCIsXCIpfSxsaW5lYXJyaW5nOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTAsaT10LnBvaW50cy5jb29yZGluYXRlcy5sZW5ndGg7bjxpOysrbillLnB1c2goYW8uY29vcmRpbmF0ZS5hcHBseSh0aGlzLFt0LnBvaW50cy5jb29yZGluYXRlc1tuXV0pKTtyZXR1cm4gZS5qb2luKFwiLFwiKX0sbXVsdGlsaW5lc3RyaW5nOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTAsaT10Lmdlb21ldHJpZXMubGVuZ3RoO248aTsrK24pZS5wdXNoKFwiKFwiK2FvLmxpbmVzdHJpbmcuYXBwbHkodGhpcyxbdC5nZW9tZXRyaWVzW25dXSkrXCIpXCIpO3JldHVybiBlLmpvaW4oXCIsXCIpfSxwb2x5Z29uOmZ1bmN0aW9uKHQpe3ZhciBlPVtdO2UucHVzaChcIihcIithby5saW5lc3RyaW5nLmFwcGx5KHRoaXMsW3Quc2hlbGxdKStcIilcIik7Zm9yKHZhciBuPTAsaT10LmhvbGVzLmxlbmd0aDtuPGk7KytuKWUucHVzaChcIihcIithby5saW5lc3RyaW5nLmFwcGx5KHRoaXMsW3QuaG9sZXNbbl1dKStcIilcIik7cmV0dXJuIGUuam9pbihcIixcIil9LG11bHRpcG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wLGk9dC5nZW9tZXRyaWVzLmxlbmd0aDtuPGk7KytuKWUucHVzaChcIihcIithby5wb2x5Z29uLmFwcGx5KHRoaXMsW3QuZ2VvbWV0cmllc1tuXV0pK1wiKVwiKTtyZXR1cm4gZS5qb2luKFwiLFwiKX0sZ2VvbWV0cnljb2xsZWN0aW9uOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTAsaT10Lmdlb21ldHJpZXMubGVuZ3RoO248aTsrK24pZS5wdXNoKHRoaXMuZXh0cmFjdEdlb21ldHJ5KHQuZ2VvbWV0cmllc1tuXSkpO3JldHVybiBlLmpvaW4oXCIsXCIpfX0sdW89e3BvaW50OmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZVBvaW50KCk7dmFyIGU9dC50cmltKCkuc3BsaXQob28uc3BhY2VzKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlUG9pbnQobmV3IGcoTnVtYmVyLnBhcnNlRmxvYXQoZVswXSksTnVtYmVyLnBhcnNlRmxvYXQoZVsxXSkpKX0sbXVsdGlwb2ludDpmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXJldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVNdWx0aVBvaW50KCk7Zm9yKHZhciBlLG49dC50cmltKCkuc3BsaXQoXCIsXCIpLGk9W10scj0wLHM9bi5sZW5ndGg7cjxzOysrcillPW5bcl0ucmVwbGFjZShvby50cmltUGFyZW5zLFwiJDFcIiksaS5wdXNoKHVvLnBvaW50LmFwcGx5KHRoaXMsW2VdKSk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpUG9pbnQoaSl9LGxpbmVzdHJpbmc6ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dClyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZVN0cmluZygpO2Zvcih2YXIgZSxuPXQudHJpbSgpLnNwbGl0KFwiLFwiKSxpPVtdLHI9MCxzPW4ubGVuZ3RoO3I8czsrK3IpZT1uW3JdLnRyaW0oKS5zcGxpdChvby5zcGFjZXMpLGkucHVzaChuZXcgZyhOdW1iZXIucGFyc2VGbG9hdChlWzBdKSxOdW1iZXIucGFyc2VGbG9hdChlWzFdKSkpO3JldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lU3RyaW5nKGkpfSxsaW5lYXJyaW5nOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUxpbmVhclJpbmcoKTtmb3IodmFyIGUsbj10LnRyaW0oKS5zcGxpdChcIixcIiksaT1bXSxyPTAscz1uLmxlbmd0aDtyPHM7KytyKWU9bltyXS50cmltKCkuc3BsaXQob28uc3BhY2VzKSxpLnB1c2gobmV3IGcoTnVtYmVyLnBhcnNlRmxvYXQoZVswXSksTnVtYmVyLnBhcnNlRmxvYXQoZVsxXSkpKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZWFyUmluZyhpKX0sbXVsdGlsaW5lc3RyaW5nOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpTGluZVN0cmluZygpO2Zvcih2YXIgZSxuPXQudHJpbSgpLnNwbGl0KG9vLnBhcmVuQ29tbWEpLGk9W10scj0wLHM9bi5sZW5ndGg7cjxzOysrcillPW5bcl0ucmVwbGFjZShvby50cmltUGFyZW5zLFwiJDFcIiksaS5wdXNoKHVvLmxpbmVzdHJpbmcuYXBwbHkodGhpcyxbZV0pKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlMaW5lU3RyaW5nKGkpfSxwb2x5Z29uOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZVBvbHlnb24oKTtmb3IodmFyIGUsbixpLHIscz10LnRyaW0oKS5zcGxpdChvby5wYXJlbkNvbW1hKSxvPVtdLGE9MCx1PXMubGVuZ3RoO2E8dTsrK2EpZT1zW2FdLnJlcGxhY2Uob28udHJpbVBhcmVucyxcIiQxXCIpLG49dW8ubGluZXN0cmluZy5hcHBseSh0aGlzLFtlXSksaT10aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKG4ucG9pbnRzKSwwPT09YT9yPWk6by5wdXNoKGkpO3JldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVQb2x5Z29uKHIsbyl9LG11bHRpcG9seWdvbjpmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXJldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVNdWx0aVBvbHlnb24oKTtmb3IodmFyIGUsbj10LnRyaW0oKS5zcGxpdChvby5kb3VibGVQYXJlbkNvbW1hKSxpPVtdLHI9MCxzPW4ubGVuZ3RoO3I8czsrK3IpZT1uW3JdLnJlcGxhY2Uob28udHJpbVBhcmVucyxcIiQxXCIpLGkucHVzaCh1by5wb2x5Z29uLmFwcGx5KHRoaXMsW2VdKSk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpUG9seWdvbihpKX0sZ2VvbWV0cnljb2xsZWN0aW9uOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbigpO3Q9dC5yZXBsYWNlKC8sXFxzKihbQS1aYS16XSkvZyxcInwkMVwiKTtmb3IodmFyIGU9dC50cmltKCkuc3BsaXQoXCJ8XCIpLG49W10saT0wLHI9ZS5sZW5ndGg7aTxyOysraSluLnB1c2godGhpcy5yZWFkKGVbaV0pKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlR2VvbWV0cnlDb2xsZWN0aW9uKG4pfX07ZShzZS5wcm90b3R5cGUse3dyaXRlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBhcnNlci53cml0ZSh0KX19KSxlKHNlLHt0b0xpbmVTdHJpbmc6ZnVuY3Rpb24odCxlKXtpZigyIT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7cmV0dXJuXCJMSU5FU1RSSU5HICggXCIrdC54K1wiIFwiK3QueStcIiwgXCIrZS54K1wiIFwiK2UueStcIiApXCJ9fSksZShvZS5wcm90b3R5cGUse2dldEluZGV4QWxvbmdTZWdtZW50OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuY29tcHV0ZUludExpbmVJbmRleCgpLHRoaXMuaW50TGluZUluZGV4W3RdW2VdfSxnZXRUb3BvbG9neVN1bW1hcnk6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgUDtyZXR1cm4gdGhpcy5pc0VuZFBvaW50KCkmJnQuYXBwZW5kKFwiIGVuZHBvaW50XCIpLHRoaXMuX2lzUHJvcGVyJiZ0LmFwcGVuZChcIiBwcm9wZXJcIiksdGhpcy5pc0NvbGxpbmVhcigpJiZ0LmFwcGVuZChcIiBjb2xsaW5lYXJcIiksdC50b1N0cmluZygpfSxjb21wdXRlSW50ZXJzZWN0aW9uOmZ1bmN0aW9uKHQsZSxuLGkpe3RoaXMuaW5wdXRMaW5lc1swXVswXT10LHRoaXMuaW5wdXRMaW5lc1swXVsxXT1lLHRoaXMuaW5wdXRMaW5lc1sxXVswXT1uLHRoaXMuaW5wdXRMaW5lc1sxXVsxXT1pLHRoaXMucmVzdWx0PXRoaXMuY29tcHV0ZUludGVyc2VjdCh0LGUsbixpKX0sZ2V0SW50ZXJzZWN0aW9uTnVtOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVzdWx0fSxjb21wdXRlSW50TGluZUluZGV4OmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpbnVsbD09PXRoaXMuaW50TGluZUluZGV4JiYodGhpcy5pbnRMaW5lSW5kZXg9QXJyYXkoMikuZmlsbCgpLm1hcChmdW5jdGlvbigpe3JldHVybiBBcnJheSgyKX0pLHRoaXMuY29tcHV0ZUludExpbmVJbmRleCgwKSx0aGlzLmNvbXB1dGVJbnRMaW5lSW5kZXgoMSkpO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPXRoaXMuZ2V0RWRnZURpc3RhbmNlKHQsMCksbj10aGlzLmdldEVkZ2VEaXN0YW5jZSh0LDEpO2U+bj8odGhpcy5pbnRMaW5lSW5kZXhbdF1bMF09MCx0aGlzLmludExpbmVJbmRleFt0XVsxXT0xKToodGhpcy5pbnRMaW5lSW5kZXhbdF1bMF09MSx0aGlzLmludExpbmVJbmRleFt0XVsxXT0wKX19LGlzUHJvcGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzSW50ZXJzZWN0aW9uKCkmJnRoaXMuX2lzUHJvcGVyfSxzZXRQcmVjaXNpb25Nb2RlbDpmdW5jdGlvbih0KXt0aGlzLnByZWNpc2lvbk1vZGVsPXR9LGlzSW50ZXJpb3JJbnRlcnNlY3Rpb246ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4hIXRoaXMuaXNJbnRlcmlvckludGVyc2VjdGlvbigwKXx8ISF0aGlzLmlzSW50ZXJpb3JJbnRlcnNlY3Rpb24oMSk7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0wO2U8dGhpcy5yZXN1bHQ7ZSsrKWlmKCF0aGlzLmludFB0W2VdLmVxdWFsczJEKHRoaXMuaW5wdXRMaW5lc1t0XVswXSkmJiF0aGlzLmludFB0W2VdLmVxdWFsczJEKHRoaXMuaW5wdXRMaW5lc1t0XVsxXSkpcmV0dXJuITA7cmV0dXJuITF9fSxnZXRJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaW50UHRbdF19LGlzRW5kUG9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNJbnRlcnNlY3Rpb24oKSYmIXRoaXMuX2lzUHJvcGVyfSxoYXNJbnRlcnNlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXN1bHQhPT1vZS5OT19JTlRFUlNFQ1RJT059LGdldEVkZ2VEaXN0YW5jZTpmdW5jdGlvbih0LGUpe3ZhciBuPW9lLmNvbXB1dGVFZGdlRGlzdGFuY2UodGhpcy5pbnRQdFtlXSx0aGlzLmlucHV0TGluZXNbdF1bMF0sdGhpcy5pbnB1dExpbmVzW3RdWzFdKTtyZXR1cm4gbn0saXNDb2xsaW5lYXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXN1bHQ9PT1vZS5DT0xMSU5FQVJfSU5URVJTRUNUSU9OfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiBzZS50b0xpbmVTdHJpbmcodGhpcy5pbnB1dExpbmVzWzBdWzBdLHRoaXMuaW5wdXRMaW5lc1swXVsxXSkrXCIgLSBcIitzZS50b0xpbmVTdHJpbmcodGhpcy5pbnB1dExpbmVzWzFdWzBdLHRoaXMuaW5wdXRMaW5lc1sxXVsxXSkrdGhpcy5nZXRUb3BvbG9neVN1bW1hcnkoKX0sZ2V0RW5kcG9pbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5pbnB1dExpbmVzW3RdW2VdfSxpc0ludGVyc2VjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMucmVzdWx0O2UrKylpZih0aGlzLmludFB0W2VdLmVxdWFsczJEKHQpKXJldHVybiEwO3JldHVybiExfSxnZXRJbnRlcnNlY3Rpb25BbG9uZ1NlZ21lbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jb21wdXRlSW50TGluZUluZGV4KCksdGhpcy5pbnRQdFt0aGlzLmludExpbmVJbmRleFt0XVtlXV19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIG9lfX0pLG9lLmNvbXB1dGVFZGdlRGlzdGFuY2U9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPU1hdGguYWJzKG4ueC1lLngpLHI9TWF0aC5hYnMobi55LWUueSkscz0tMTtpZih0LmVxdWFscyhlKSlzPTA7ZWxzZSBpZih0LmVxdWFscyhuKSlzPWk+cj9pOnI7ZWxzZXt2YXIgbz1NYXRoLmFicyh0LngtZS54KSxhPU1hdGguYWJzKHQueS1lLnkpO3M9aT5yP286YSwwIT09c3x8dC5lcXVhbHMoZSl8fChzPU1hdGgubWF4KG8sYSkpfXJldHVybiBmLmlzVHJ1ZSghKDA9PT1zJiYhdC5lcXVhbHMoZSkpLFwiQmFkIGRpc3RhbmNlIGNhbGN1bGF0aW9uXCIpLHN9LG9lLm5vblJvYnVzdENvbXB1dGVFZGdlRGlzdGFuY2U9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQueC1lLngscj10LnktZS55LHM9TWF0aC5zcXJ0KGkqaStyKnIpO3JldHVybiBmLmlzVHJ1ZSghKDA9PT1zJiYhdC5lcXVhbHMoZSkpLFwiSW52YWxpZCBkaXN0YW5jZSBjYWxjdWxhdGlvblwiKSxzfSxvZS5ET05UX0lOVEVSU0VDVD0wLG9lLkRPX0lOVEVSU0VDVD0xLG9lLkNPTExJTkVBUj0yLG9lLk5PX0lOVEVSU0VDVElPTj0wLG9lLlBPSU5UX0lOVEVSU0VDVElPTj0xLG9lLkNPTExJTkVBUl9JTlRFUlNFQ1RJT049MixoKGFlLG9lKSxlKGFlLnByb3RvdHlwZSx7aXNJblNlZ21lbnRFbnZlbG9wZXM6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEModGhpcy5pbnB1dExpbmVzWzBdWzBdLHRoaXMuaW5wdXRMaW5lc1swXVsxXSksbj1uZXcgQyh0aGlzLmlucHV0TGluZXNbMV1bMF0sdGhpcy5pbnB1dExpbmVzWzFdWzFdKTtyZXR1cm4gZS5jb250YWlucyh0KSYmbi5jb250YWlucyh0KX0sY29tcHV0ZUludGVyc2VjdGlvbjpmdW5jdGlvbigpe2lmKDMhPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBvZS5wcm90b3R5cGUuY29tcHV0ZUludGVyc2VjdGlvbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdO3JldHVybiB0aGlzLl9pc1Byb3Blcj0hMSxDLmludGVyc2VjdHMoZSxuLHQpJiYwPT09aGUub3JpZW50YXRpb25JbmRleChlLG4sdCkmJjA9PT1oZS5vcmllbnRhdGlvbkluZGV4KG4sZSx0KT8odGhpcy5faXNQcm9wZXI9ITAsKHQuZXF1YWxzKGUpfHx0LmVxdWFscyhuKSkmJih0aGlzLl9pc1Byb3Blcj0hMSksdGhpcy5yZXN1bHQ9b2UuUE9JTlRfSU5URVJTRUNUSU9OLG51bGwpOnZvaWQodGhpcy5yZXN1bHQ9b2UuTk9fSU5URVJTRUNUSU9OKX0sbm9ybWFsaXplVG9NaW5pbXVtOmZ1bmN0aW9uKHQsZSxuLGkscil7ci54PXRoaXMuc21hbGxlc3RJbkFic1ZhbHVlKHQueCxlLngsbi54LGkueCksci55PXRoaXMuc21hbGxlc3RJbkFic1ZhbHVlKHQueSxlLnksbi55LGkueSksdC54LT1yLngsdC55LT1yLnksZS54LT1yLngsZS55LT1yLnksbi54LT1yLngsbi55LT1yLnksaS54LT1yLngsaS55LT1yLnl9LHNhZmVIQ29vcmRpbmF0ZUludGVyc2VjdGlvbjpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj1udWxsO3RyeXtyPUYuaW50ZXJzZWN0aW9uKHQsZSxuLGkpfWNhdGNoKHMpe2lmKCEocyBpbnN0YW5jZW9mIHcpKXRocm93IHM7cj1hZS5uZWFyZXN0RW5kcG9pbnQodCxlLG4saSl9ZmluYWxseXt9cmV0dXJuIHJ9LGludGVyc2VjdGlvbjpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj10aGlzLmludGVyc2VjdGlvbldpdGhOb3JtYWxpemF0aW9uKHQsZSxuLGkpO3JldHVybiB0aGlzLmlzSW5TZWdtZW50RW52ZWxvcGVzKHIpfHwocj1uZXcgZyhhZS5uZWFyZXN0RW5kcG9pbnQodCxlLG4saSkpKSxudWxsIT09dGhpcy5wcmVjaXNpb25Nb2RlbCYmdGhpcy5wcmVjaXNpb25Nb2RlbC5tYWtlUHJlY2lzZShyKSxyfSxzbWFsbGVzdEluQWJzVmFsdWU6ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dCxzPU1hdGguYWJzKHIpO3JldHVybiBNYXRoLmFicyhlKTxzJiYocj1lLHM9TWF0aC5hYnMoZSkpLE1hdGguYWJzKG4pPHMmJihyPW4scz1NYXRoLmFicyhuKSksTWF0aC5hYnMoaSk8cyYmKHI9aSkscn0sY2hlY2tERDpmdW5jdGlvbih0LGUsbixpLHIpe3ZhciBzPU0uaW50ZXJzZWN0aW9uKHQsZSxuLGkpLG89dGhpcy5pc0luU2VnbWVudEVudmVsb3BlcyhzKTtBLm91dC5wcmludGxuKFwiREQgaW4gZW52ID0gXCIrbytcIiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFwiK3MpLHIuZGlzdGFuY2Uocyk+MWUtNCYmQS5vdXQucHJpbnRsbihcIkRpc3RhbmNlID0gXCIrci5kaXN0YW5jZShzKSl9LGludGVyc2VjdGlvbldpdGhOb3JtYWxpemF0aW9uOmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPW5ldyBnKHQpLHM9bmV3IGcoZSksbz1uZXcgZyhuKSxhPW5ldyBnKGkpLHU9bmV3IGc7dGhpcy5ub3JtYWxpemVUb0VudkNlbnRyZShyLHMsbyxhLHUpO3ZhciBsPXRoaXMuc2FmZUhDb29yZGluYXRlSW50ZXJzZWN0aW9uKHIscyxvLGEpO3JldHVybiBsLngrPXUueCxsLnkrPXUueSxsfSxjb21wdXRlQ29sbGluZWFySW50ZXJzZWN0aW9uOmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPUMuaW50ZXJzZWN0cyh0LGUsbikscz1DLmludGVyc2VjdHModCxlLGkpLG89Qy5pbnRlcnNlY3RzKG4saSx0KSxhPUMuaW50ZXJzZWN0cyhuLGksZSk7cmV0dXJuIHImJnM/KHRoaXMuaW50UHRbMF09bix0aGlzLmludFB0WzFdPWksb2UuQ09MTElORUFSX0lOVEVSU0VDVElPTik6byYmYT8odGhpcy5pbnRQdFswXT10LHRoaXMuaW50UHRbMV09ZSxvZS5DT0xMSU5FQVJfSU5URVJTRUNUSU9OKTpyJiZvPyh0aGlzLmludFB0WzBdPW4sdGhpcy5pbnRQdFsxXT10LCFuLmVxdWFscyh0KXx8c3x8YT9vZS5DT0xMSU5FQVJfSU5URVJTRUNUSU9OOm9lLlBPSU5UX0lOVEVSU0VDVElPTik6ciYmYT8odGhpcy5pbnRQdFswXT1uLHRoaXMuaW50UHRbMV09ZSwhbi5lcXVhbHMoZSl8fHN8fG8/b2UuQ09MTElORUFSX0lOVEVSU0VDVElPTjpvZS5QT0lOVF9JTlRFUlNFQ1RJT04pOnMmJm8/KHRoaXMuaW50UHRbMF09aSx0aGlzLmludFB0WzFdPXQsIWkuZXF1YWxzKHQpfHxyfHxhP29lLkNPTExJTkVBUl9JTlRFUlNFQ1RJT046b2UuUE9JTlRfSU5URVJTRUNUSU9OKTpzJiZhPyh0aGlzLmludFB0WzBdPWksdGhpcy5pbnRQdFsxXT1lLCFpLmVxdWFscyhlKXx8cnx8bz9vZS5DT0xMSU5FQVJfSU5URVJTRUNUSU9OOm9lLlBPSU5UX0lOVEVSU0VDVElPTik6b2UuTk9fSU5URVJTRUNUSU9OfSxub3JtYWxpemVUb0VudkNlbnRyZTpmdW5jdGlvbih0LGUsbixpLHIpe3ZhciBzPXQueDxlLng/dC54OmUueCxvPXQueTxlLnk/dC55OmUueSxhPXQueD5lLng/dC54OmUueCx1PXQueT5lLnk/dC55OmUueSxsPW4ueDxpLng/bi54OmkueCxoPW4ueTxpLnk/bi55OmkueSxjPW4ueD5pLng/bi54OmkueCxmPW4ueT5pLnk/bi55OmkueSxnPXM+bD9zOmwsZD1hPGM/YTpjLHA9bz5oP286aCx2PXU8Zj91OmYsbT0oZytkKS8yLHk9KHArdikvMjtyLng9bSxyLnk9eSx0LngtPXIueCx0LnktPXIueSxlLngtPXIueCxlLnktPXIueSxuLngtPXIueCxuLnktPXIueSxpLngtPXIueCxpLnktPXIueX0sY29tcHV0ZUludGVyc2VjdDpmdW5jdGlvbih0LGUsbixpKXtpZih0aGlzLl9pc1Byb3Blcj0hMSwhQy5pbnRlcnNlY3RzKHQsZSxuLGkpKXJldHVybiBvZS5OT19JTlRFUlNFQ1RJT047dmFyIHI9aGUub3JpZW50YXRpb25JbmRleCh0LGUsbikscz1oZS5vcmllbnRhdGlvbkluZGV4KHQsZSxpKTtpZihyPjAmJnM+MHx8cjwwJiZzPDApcmV0dXJuIG9lLk5PX0lOVEVSU0VDVElPTjt2YXIgbz1oZS5vcmllbnRhdGlvbkluZGV4KG4saSx0KSxhPWhlLm9yaWVudGF0aW9uSW5kZXgobixpLGUpO2lmKG8+MCYmYT4wfHxvPDAmJmE8MClyZXR1cm4gb2UuTk9fSU5URVJTRUNUSU9OO3ZhciB1PTA9PT1yJiYwPT09cyYmMD09PW8mJjA9PT1hO3JldHVybiB1P3RoaXMuY29tcHV0ZUNvbGxpbmVhckludGVyc2VjdGlvbih0LGUsbixpKTooMD09PXJ8fDA9PT1zfHwwPT09b3x8MD09PWE/KHRoaXMuX2lzUHJvcGVyPSExLHQuZXF1YWxzMkQobil8fHQuZXF1YWxzMkQoaSk/dGhpcy5pbnRQdFswXT10OmUuZXF1YWxzMkQobil8fGUuZXF1YWxzMkQoaSk/dGhpcy5pbnRQdFswXT1lOjA9PT1yP3RoaXMuaW50UHRbMF09bmV3IGcobik6MD09PXM/dGhpcy5pbnRQdFswXT1uZXcgZyhpKTowPT09bz90aGlzLmludFB0WzBdPW5ldyBnKHQpOjA9PT1hJiYodGhpcy5pbnRQdFswXT1uZXcgZyhlKSkpOih0aGlzLl9pc1Byb3Blcj0hMCx0aGlzLmludFB0WzBdPXRoaXMuaW50ZXJzZWN0aW9uKHQsZSxuLGkpKSxvZS5QT0lOVF9JTlRFUlNFQ1RJT04pfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBhZX19KSxhZS5uZWFyZXN0RW5kcG9pbnQ9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dCxzPWhlLmRpc3RhbmNlUG9pbnRMaW5lKHQsbixpKSxvPWhlLmRpc3RhbmNlUG9pbnRMaW5lKGUsbixpKTtyZXR1cm4gbzxzJiYocz1vLHI9ZSksbz1oZS5kaXN0YW5jZVBvaW50TGluZShuLHQsZSksbzxzJiYocz1vLHI9biksbz1oZS5kaXN0YW5jZVBvaW50TGluZShpLHQsZSksbzxzJiYocz1vLHI9aSkscn0sZSh1ZS5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHVlfX0pLHVlLm9yaWVudGF0aW9uSW5kZXg9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPWUueC10Lngscj1lLnktdC55LHM9bi54LWUueCxvPW4ueS1lLnk7cmV0dXJuIHVlLnNpZ25PZkRldDJ4MihpLHIscyxvKX0sdWUuc2lnbk9mRGV0MngyPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPW51bGwscz1udWxsLG89bnVsbCxhPTA7aWYocj0xLDA9PT10fHwwPT09aSlyZXR1cm4gMD09PWV8fDA9PT1uPzA6ZT4wP24+MD8tcjpyOm4+MD9yOi1yO2lmKDA9PT1lfHwwPT09bilyZXR1cm4gaT4wP3Q+MD9yOi1yOnQ+MD8tcjpyO2lmKDA8ZT8wPGk/ZTw9aXx8KHI9LXIscz10LHQ9bixuPXMscz1lLGU9aSxpPXMpOmU8PS1pPyhyPS1yLG49LW4saT0taSk6KHM9dCx0PS1uLG49cyxzPWUsZT0taSxpPXMpOjA8aT8tZTw9aT8ocj0tcix0PS10LGU9LWUpOihzPS10LHQ9bixuPXMscz0tZSxlPWksaT1zKTplPj1pPyh0PS10LGU9LWUsbj0tbixpPS1pKToocj0tcixzPS10LHQ9LW4sbj1zLHM9LWUsZT0taSxpPXMpLDA8dCl7aWYoISgwPG4pKXJldHVybiByO2lmKCEodDw9bikpcmV0dXJuIHJ9ZWxzZXtpZigwPG4pcmV0dXJuLXI7aWYoISh0Pj1uKSlyZXR1cm4tcjtyPS1yLHQ9LXQsbj0tbn1mb3IoOzspe2lmKGErPTEsbz1NYXRoLmZsb29yKG4vdCksbi09byp0LGktPW8qZSxpPDApcmV0dXJuLXI7aWYoaT5lKXJldHVybiByO2lmKHQ+bituKXtpZihlPGkraSlyZXR1cm4gcn1lbHNle2lmKGU+aStpKXJldHVybi1yO249dC1uLGk9ZS1pLHI9LXJ9aWYoMD09PWkpcmV0dXJuIDA9PT1uPzA6LXI7aWYoMD09PW4pcmV0dXJuIHI7aWYobz1NYXRoLmZsb29yKHQvbiksdC09bypuLGUtPW8qaSxlPDApcmV0dXJuIHI7aWYoZT5pKXJldHVybi1yO2lmKG4+dCt0KXtpZihpPGUrZSlyZXR1cm4tcn1lbHNle2lmKGk+ZStlKXJldHVybiByO3Q9bi10LGU9aS1lLHI9LXJ9aWYoMD09PWUpcmV0dXJuIDA9PT10PzA6cjtpZigwPT09dClyZXR1cm4tcn19LGUobGUucHJvdG90eXBlLHtjb3VudFNlZ21lbnQ6ZnVuY3Rpb24odCxlKXtpZih0Lng8dGhpcy5wLngmJmUueDx0aGlzLnAueClyZXR1cm4gbnVsbDtpZih0aGlzLnAueD09PWUueCYmdGhpcy5wLnk9PT1lLnkpcmV0dXJuIHRoaXMuaXNQb2ludE9uU2VnbWVudD0hMCxudWxsO2lmKHQueT09PXRoaXMucC55JiZlLnk9PT10aGlzLnAueSl7dmFyIG49dC54LGk9ZS54O3JldHVybiBuPmkmJihuPWUueCxpPXQueCksdGhpcy5wLng+PW4mJnRoaXMucC54PD1pJiYodGhpcy5pc1BvaW50T25TZWdtZW50PSEwKSxudWxsfWlmKHQueT50aGlzLnAueSYmZS55PD10aGlzLnAueXx8ZS55PnRoaXMucC55JiZ0Lnk8PXRoaXMucC55KXt2YXIgcj10LngtdGhpcy5wLngscz10LnktdGhpcy5wLnksbz1lLngtdGhpcy5wLngsYT1lLnktdGhpcy5wLnksdT11ZS5zaWduT2ZEZXQyeDIocixzLG8sYSk7aWYoMD09PXUpcmV0dXJuIHRoaXMuaXNQb2ludE9uU2VnbWVudD0hMCxudWxsO2E8cyYmKHU9LXUpLHU+MCYmdGhpcy5jcm9zc2luZ0NvdW50Kyt9fSxpc1BvaW50SW5Qb2x5Z29uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0TG9jYXRpb24oKSE9PUwuRVhURVJJT1J9LGdldExvY2F0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNQb2ludE9uU2VnbWVudD9MLkJPVU5EQVJZOnRoaXMuY3Jvc3NpbmdDb3VudCUyPT09MT9MLklOVEVSSU9SOkwuRVhURVJJT1J9LGlzT25TZWdtZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNQb2ludE9uU2VnbWVudH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gbGV9fSksbGUubG9jYXRlUG9pbnRJblJpbmc9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcmJlIoYXJndW1lbnRzWzFdLEQpKXtmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49bmV3IGxlKHQpLGk9bmV3IGcscj1uZXcgZyxzPTE7czxlLnNpemUoKTtzKyspaWYoZS5nZXRDb29yZGluYXRlKHMsaSksZS5nZXRDb29yZGluYXRlKHMtMSxyKSxuLmNvdW50U2VnbWVudChpLHIpLG4uaXNPblNlZ21lbnQoKSlyZXR1cm4gbi5nZXRMb2NhdGlvbigpO3JldHVybiBuLmdldExvY2F0aW9uKCl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIEFycmF5KXtmb3IodmFyIG89YXJndW1lbnRzWzBdLGE9YXJndW1lbnRzWzFdLG49bmV3IGxlKG8pLHM9MTtzPGEubGVuZ3RoO3MrKyl7dmFyIGk9YVtzXSxyPWFbcy0xXTtpZihuLmNvdW50U2VnbWVudChpLHIpLG4uaXNPblNlZ21lbnQoKSlyZXR1cm4gbi5nZXRMb2NhdGlvbigpfXJldHVybiBuLmdldExvY2F0aW9uKCl9fSxlKGhlLnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaGV9fSksaGUub3JpZW50YXRpb25JbmRleD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIE0ub3JpZW50YXRpb25JbmRleCh0LGUsbil9LGhlLnNpZ25lZEFyZWE9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5KXt2YXIgdD1hcmd1bWVudHNbMF07aWYodC5sZW5ndGg8MylyZXR1cm4gMDtmb3IodmFyIGU9MCxuPXRbMF0ueCxpPTE7aTx0Lmxlbmd0aC0xO2krKyl7dmFyIHI9dFtpXS54LW4scz10W2krMV0ueSxvPXRbaS0xXS55O2UrPXIqKG8tcyl9cmV0dXJuIGUvMn1pZihSKGFyZ3VtZW50c1swXSxEKSl7dmFyIGE9YXJndW1lbnRzWzBdLHU9YS5zaXplKCk7aWYodTwzKXJldHVybiAwO3ZhciBsPW5ldyBnLGg9bmV3IGcsYz1uZXcgZzthLmdldENvb3JkaW5hdGUoMCxoKSxhLmdldENvb3JkaW5hdGUoMSxjKTt2YXIgbj1oLng7Yy54LT1uO2Zvcih2YXIgZT0wLGk9MTtpPHUtMTtpKyspbC55PWgueSxoLng9Yy54LGgueT1jLnksYS5nZXRDb29yZGluYXRlKGkrMSxjKSxjLngtPW4sZSs9aC54KihsLnktYy55KTtyZXR1cm4gZS8yfX0saGUuZGlzdGFuY2VMaW5lTGluZT1mdW5jdGlvbih0LGUsbixpKXtpZih0LmVxdWFscyhlKSlyZXR1cm4gaGUuZGlzdGFuY2VQb2ludExpbmUodCxuLGkpO2lmKG4uZXF1YWxzKGkpKXJldHVybiBoZS5kaXN0YW5jZVBvaW50TGluZShpLHQsZSk7dmFyIHI9ITE7aWYoQy5pbnRlcnNlY3RzKHQsZSxuLGkpKXt2YXIgcz0oZS54LXQueCkqKGkueS1uLnkpLShlLnktdC55KSooaS54LW4ueCk7aWYoMD09PXMpcj0hMDtlbHNle3ZhciBvPSh0Lnktbi55KSooaS54LW4ueCktKHQueC1uLngpKihpLnktbi55KSxhPSh0Lnktbi55KSooZS54LXQueCktKHQueC1uLngpKihlLnktdC55KSx1PWEvcyxsPW8vczsobDwwfHxsPjF8fHU8MHx8dT4xKSYmKHI9ITApfX1lbHNlIHI9ITA7cmV0dXJuIHI/VC5taW4oaGUuZGlzdGFuY2VQb2ludExpbmUodCxuLGkpLGhlLmRpc3RhbmNlUG9pbnRMaW5lKGUsbixpKSxoZS5kaXN0YW5jZVBvaW50TGluZShuLHQsZSksaGUuZGlzdGFuY2VQb2ludExpbmUoaSx0LGUpKTowfSxoZS5pc1BvaW50SW5SaW5nPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGhlLmxvY2F0ZVBvaW50SW5SaW5nKHQsZSkhPT1MLkVYVEVSSU9SfSxoZS5jb21wdXRlTGVuZ3RoPWZ1bmN0aW9uKHQpe3ZhciBlPXQuc2l6ZSgpO2lmKGU8PTEpcmV0dXJuIDA7dmFyIG49MCxpPW5ldyBnO3QuZ2V0Q29vcmRpbmF0ZSgwLGkpO2Zvcih2YXIgcj1pLngscz1pLnksbz0xO288ZTtvKyspe3QuZ2V0Q29vcmRpbmF0ZShvLGkpO3ZhciBhPWkueCx1PWkueSxsPWEtcixoPXUtcztuKz1NYXRoLnNxcnQobCpsK2gqaCkscj1hLHM9dX1yZXR1cm4gbn0saGUuaXNDQ1c9ZnVuY3Rpb24odCl7dmFyIGU9dC5sZW5ndGgtMTtpZihlPDMpdGhyb3cgbmV3IGkoXCJSaW5nIGhhcyBmZXdlciB0aGFuIDQgcG9pbnRzLCBzbyBvcmllbnRhdGlvbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFwiKTtmb3IodmFyIG49dFswXSxyPTAscz0xO3M8PWU7cysrKXt2YXIgbz10W3NdO28ueT5uLnkmJihuPW8scj1zKX12YXIgYT1yO2RvIGEtPTEsYTwwJiYoYT1lKTt3aGlsZSh0W2FdLmVxdWFsczJEKG4pJiZhIT09cik7dmFyIHU9cjtkbyB1PSh1KzEpJWU7d2hpbGUodFt1XS5lcXVhbHMyRChuKSYmdSE9PXIpO3ZhciBsPXRbYV0saD10W3VdO2lmKGwuZXF1YWxzMkQobil8fGguZXF1YWxzMkQobil8fGwuZXF1YWxzMkQoaCkpcmV0dXJuITE7dmFyIGM9aGUuY29tcHV0ZU9yaWVudGF0aW9uKGwsbixoKSxmPSExO3JldHVybiBmPTA9PT1jP2wueD5oLng6Yz4wfSxoZS5sb2NhdGVQb2ludEluUmluZz1mdW5jdGlvbih0LGUpe3JldHVybiBsZS5sb2NhdGVQb2ludEluUmluZyh0LGUpfSxoZS5kaXN0YW5jZVBvaW50TGluZVBlcnBlbmRpY3VsYXI9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPShuLngtZS54KSoobi54LWUueCkrKG4ueS1lLnkpKihuLnktZS55KSxyPSgoZS55LXQueSkqKG4ueC1lLngpLShlLngtdC54KSoobi55LWUueSkpL2k7cmV0dXJuIE1hdGguYWJzKHIpKk1hdGguc3FydChpKX0saGUuY29tcHV0ZU9yaWVudGF0aW9uPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gaGUub3JpZW50YXRpb25JbmRleCh0LGUsbil9LGhlLmRpc3RhbmNlUG9pbnRMaW5lPWZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtpZigwPT09ZS5sZW5ndGgpdGhyb3cgbmV3IGkoXCJMaW5lIGFycmF5IG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgdmVydGV4XCIpO2Zvcih2YXIgbj10LmRpc3RhbmNlKGVbMF0pLHI9MDtyPGUubGVuZ3RoLTE7cisrKXt2YXIgcz1oZS5kaXN0YW5jZVBvaW50TGluZSh0LGVbcl0sZVtyKzFdKTtzPG4mJihuPXMpfXJldHVybiBufWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbz1hcmd1bWVudHNbMF0sYT1hcmd1bWVudHNbMV0sdT1hcmd1bWVudHNbMl07aWYoYS54PT09dS54JiZhLnk9PT11LnkpcmV0dXJuIG8uZGlzdGFuY2UoYSk7dmFyIGw9KHUueC1hLngpKih1LngtYS54KSsodS55LWEueSkqKHUueS1hLnkpLGg9KChvLngtYS54KSoodS54LWEueCkrKG8ueS1hLnkpKih1LnktYS55KSkvbDtpZihoPD0wKXJldHVybiBvLmRpc3RhbmNlKGEpO2lmKGg+PTEpcmV0dXJuIG8uZGlzdGFuY2UodSk7dmFyIGM9KChhLnktby55KSoodS54LWEueCktKGEueC1vLngpKih1LnktYS55KSkvbDtyZXR1cm4gTWF0aC5hYnMoYykqTWF0aC5zcXJ0KGwpfX0saGUuaXNPbkxpbmU9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IGFlLGk9MTtpPGUubGVuZ3RoO2krKyl7dmFyIHI9ZVtpLTFdLHM9ZVtpXTtpZihuLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxyLHMpLG4uaGFzSW50ZXJzZWN0aW9uKCkpcmV0dXJuITB9cmV0dXJuITF9LGhlLkNMT0NLV0lTRT0tMSxoZS5SSUdIVD1oZS5DTE9DS1dJU0UsaGUuQ09VTlRFUkNMT0NLV0lTRT0xLGhlLkxFRlQ9aGUuQ09VTlRFUkNMT0NLV0lTRSxoZS5DT0xMSU5FQVI9MCxoZS5TVFJBSUdIVD1oZS5DT0xMSU5FQVIsZShjZS5wcm90b3R5cGUse21pblg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5taW4odGhpcy5wMC54LHRoaXMucDEueCl9LG9yaWVudGF0aW9uSW5kZXg6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGNlKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1oZS5vcmllbnRhdGlvbkluZGV4KHRoaXMucDAsdGhpcy5wMSx0LnAwKSxuPWhlLm9yaWVudGF0aW9uSW5kZXgodGhpcy5wMCx0aGlzLnAxLHQucDEpO3JldHVybiBlPj0wJiZuPj0wP01hdGgubWF4KGUsbik6ZTw9MCYmbjw9MD9NYXRoLm1heChlLG4pOjB9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnKXt2YXIgaT1hcmd1bWVudHNbMF07cmV0dXJuIGhlLm9yaWVudGF0aW9uSW5kZXgodGhpcy5wMCx0aGlzLnAxLGkpfX0sdG9HZW9tZXRyeTpmdW5jdGlvbih0KXtyZXR1cm4gdC5jcmVhdGVMaW5lU3RyaW5nKFt0aGlzLnAwLHRoaXMucDFdKX0saXNWZXJ0aWNhbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnAwLng9PT10aGlzLnAxLnh9LGVxdWFsczpmdW5jdGlvbih0KXtpZighKHQgaW5zdGFuY2VvZiBjZSkpcmV0dXJuITE7dmFyIGU9dDtyZXR1cm4gdGhpcy5wMC5lcXVhbHMoZS5wMCkmJnRoaXMucDEuZXF1YWxzKGUucDEpfSxpbnRlcnNlY3Rpb246ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGFlO3JldHVybiBlLmNvbXB1dGVJbnRlcnNlY3Rpb24odGhpcy5wMCx0aGlzLnAxLHQucDAsdC5wMSksZS5oYXNJbnRlcnNlY3Rpb24oKT9lLmdldEludGVyc2VjdGlvbigwKTpudWxsfSxwcm9qZWN0OmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnKXt2YXIgdD1hcmd1bWVudHNbMF07aWYodC5lcXVhbHModGhpcy5wMCl8fHQuZXF1YWxzKHRoaXMucDEpKXJldHVybiBuZXcgZyh0KTt2YXIgZT10aGlzLnByb2plY3Rpb25GYWN0b3IodCksbj1uZXcgZztyZXR1cm4gbi54PXRoaXMucDAueCtlKih0aGlzLnAxLngtdGhpcy5wMC54KSxuLnk9dGhpcy5wMC55K2UqKHRoaXMucDEueS10aGlzLnAwLnkpLG59aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBjZSl7dmFyIGk9YXJndW1lbnRzWzBdLHI9dGhpcy5wcm9qZWN0aW9uRmFjdG9yKGkucDApLHM9dGhpcy5wcm9qZWN0aW9uRmFjdG9yKGkucDEpO2lmKHI+PTEmJnM+PTEpcmV0dXJuIG51bGw7aWYocjw9MCYmczw9MClyZXR1cm4gbnVsbDt2YXIgbz10aGlzLnByb2plY3QoaS5wMCk7cjwwJiYobz10aGlzLnAwKSxyPjEmJihvPXRoaXMucDEpO3ZhciBhPXRoaXMucHJvamVjdChpLnAxKTtyZXR1cm4gczwwJiYoYT10aGlzLnAwKSxzPjEmJihhPXRoaXMucDEpLG5ldyBjZShvLGEpfX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7dGhpcy5wMS5jb21wYXJlVG8odGhpcy5wMCk8MCYmdGhpcy5yZXZlcnNlKCl9LGFuZ2xlOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguYXRhbjIodGhpcy5wMS55LXRoaXMucDAueSx0aGlzLnAxLngtdGhpcy5wMC54KX0sZ2V0Q29vcmRpbmF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/dGhpcy5wMDp0aGlzLnAxfSxkaXN0YW5jZVBlcnBlbmRpY3VsYXI6ZnVuY3Rpb24odCl7cmV0dXJuIGhlLmRpc3RhbmNlUG9pbnRMaW5lUGVycGVuZGljdWxhcih0LHRoaXMucDAsdGhpcy5wMSl9LG1pblk6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5taW4odGhpcy5wMC55LHRoaXMucDEueSl9LG1pZFBvaW50OmZ1bmN0aW9uKCl7cmV0dXJuIGNlLm1pZFBvaW50KHRoaXMucDAsdGhpcy5wMSl9LHByb2plY3Rpb25GYWN0b3I6ZnVuY3Rpb24odCl7aWYodC5lcXVhbHModGhpcy5wMCkpcmV0dXJuIDA7aWYodC5lcXVhbHModGhpcy5wMSkpcmV0dXJuIDE7dmFyIGU9dGhpcy5wMS54LXRoaXMucDAueCxuPXRoaXMucDEueS10aGlzLnAwLnksaT1lKmUrbipuO2lmKGk8PTApcmV0dXJuIHIuTmFOO3ZhciBzPSgodC54LXRoaXMucDAueCkqZSsodC55LXRoaXMucDAueSkqbikvaTtyZXR1cm4gc30sY2xvc2VzdFBvaW50czpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmludGVyc2VjdGlvbih0KTtpZihudWxsIT09ZSlyZXR1cm5bZSxlXTt2YXIgbj1uZXcgQXJyYXkoMikuZmlsbChudWxsKSxpPXIuTUFYX1ZBTFVFLHM9bnVsbCxvPXRoaXMuY2xvc2VzdFBvaW50KHQucDApO2k9by5kaXN0YW5jZSh0LnAwKSxuWzBdPW8sblsxXT10LnAwO3ZhciBhPXRoaXMuY2xvc2VzdFBvaW50KHQucDEpO3M9YS5kaXN0YW5jZSh0LnAxKSxzPGkmJihpPXMsblswXT1hLG5bMV09dC5wMSk7dmFyIHU9dC5jbG9zZXN0UG9pbnQodGhpcy5wMCk7cz11LmRpc3RhbmNlKHRoaXMucDApLHM8aSYmKGk9cyxuWzBdPXRoaXMucDAsblsxXT11KTt2YXIgbD10LmNsb3Nlc3RQb2ludCh0aGlzLnAxKTtyZXR1cm4gcz1sLmRpc3RhbmNlKHRoaXMucDEpLHM8aSYmKGk9cyxuWzBdPXRoaXMucDEsblsxXT1sKSxufSxjbG9zZXN0UG9pbnQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wcm9qZWN0aW9uRmFjdG9yKHQpO2lmKGU+MCYmZTwxKXJldHVybiB0aGlzLnByb2plY3QodCk7dmFyIG49dGhpcy5wMC5kaXN0YW5jZSh0KSxpPXRoaXMucDEuZGlzdGFuY2UodCk7cmV0dXJuIG48aT90aGlzLnAwOnRoaXMucDF9LG1heFg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5tYXgodGhpcy5wMC54LHRoaXMucDEueCl9LGdldExlbmd0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnAwLmRpc3RhbmNlKHRoaXMucDEpfSxjb21wYXJlVG86ZnVuY3Rpb24odCl7dmFyIGU9dCxuPXRoaXMucDAuY29tcGFyZVRvKGUucDApO3JldHVybiAwIT09bj9uOnRoaXMucDEuY29tcGFyZVRvKGUucDEpfSxyZXZlcnNlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wMDt0aGlzLnAwPXRoaXMucDEsdGhpcy5wMT10fSxlcXVhbHNUb3BvOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnAwLmVxdWFscyh0LnAwKSYmdGhpcy5wMS5lcXVhbHModC5wMSl8fHRoaXMucDAuZXF1YWxzKHQucDEpJiZ0aGlzLnAxLmVxdWFscyh0LnAwKX0sbGluZUludGVyc2VjdGlvbjpmdW5jdGlvbih0KXt0cnl7dmFyIGU9Ri5pbnRlcnNlY3Rpb24odGhpcy5wMCx0aGlzLnAxLHQucDAsdC5wMSk7cmV0dXJuIGV9Y2F0Y2godCl7aWYoISh0IGluc3RhbmNlb2YgdykpdGhyb3cgdH1maW5hbGx5e31yZXR1cm4gbnVsbH0sbWF4WTpmdW5jdGlvbigpe3JldHVybiBNYXRoLm1heCh0aGlzLnAwLnksdGhpcy5wMS55KX0scG9pbnRBbG9uZ09mZnNldDpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMucDAueCt0Kih0aGlzLnAxLngtdGhpcy5wMC54KSxpPXRoaXMucDAueSt0Kih0aGlzLnAxLnktdGhpcy5wMC55KSxyPXRoaXMucDEueC10aGlzLnAwLngscz10aGlzLnAxLnktdGhpcy5wMC55LG89TWF0aC5zcXJ0KHIqcitzKnMpLGE9MCx1PTA7aWYoMCE9PWUpe2lmKG88PTApdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbihcIkNhbm5vdCBjb21wdXRlIG9mZnNldCBmcm9tIHplcm8tbGVuZ3RoIGxpbmUgc2VnbWVudFwiKTthPWUqci9vLHU9ZSpzL299dmFyIGw9bi11LGg9aSthLGM9bmV3IGcobCxoKTtyZXR1cm4gY30sc2V0Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2V0Q29vcmRpbmF0ZXModC5wMCx0LnAxKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5wMC54PWUueCx0aGlzLnAwLnk9ZS55LHRoaXMucDEueD1uLngsdGhpcy5wMS55PW4ueX19LHNlZ21lbnRGcmFjdGlvbjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnByb2plY3Rpb25GYWN0b3IodCk7cmV0dXJuIGU8MD9lPTA6KGU+MXx8ci5pc05hTihlKSkmJihlPTEpLGV9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCJMSU5FU1RSSU5HKCBcIit0aGlzLnAwLngrXCIgXCIrdGhpcy5wMC55K1wiLCBcIit0aGlzLnAxLngrXCIgXCIrdGhpcy5wMS55K1wiKVwifSxpc0hvcml6b250YWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wMC55PT09dGhpcy5wMS55fSxkaXN0YW5jZTpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgY2Upe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gaGUuZGlzdGFuY2VMaW5lTGluZSh0aGlzLnAwLHRoaXMucDEsdC5wMCx0LnAxKX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gaGUuZGlzdGFuY2VQb2ludExpbmUoZSx0aGlzLnAwLHRoaXMucDEpfX0scG9pbnRBbG9uZzpmdW5jdGlvbih0KXt2YXIgZT1uZXcgZztyZXR1cm4gZS54PXRoaXMucDAueCt0Kih0aGlzLnAxLngtdGhpcy5wMC54KSxlLnk9dGhpcy5wMC55K3QqKHRoaXMucDEueS10aGlzLnAwLnkpLGV9LGhhc2hDb2RlOmZ1bmN0aW9uKCl7dmFyIHQ9amF2YS5sYW5nLkRvdWJsZS5kb3VibGVUb0xvbmdCaXRzKHRoaXMucDAueCk7dF49MzEqamF2YS5sYW5nLkRvdWJsZS5kb3VibGVUb0xvbmdCaXRzKHRoaXMucDAueSk7dmFyIGU9TWF0aC50cnVuYyh0KV5NYXRoLnRydW5jKHQ+PjMyKSxuPWphdmEubGFuZy5Eb3VibGUuZG91YmxlVG9Mb25nQml0cyh0aGlzLnAxLngpO25ePTMxKmphdmEubGFuZy5Eb3VibGUuZG91YmxlVG9Mb25nQml0cyh0aGlzLnAxLnkpO3ZhciBpPU1hdGgudHJ1bmMobileTWF0aC50cnVuYyhuPj4zMik7cmV0dXJuIGVeaX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bcyx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gY2V9fSksY2UubWlkUG9pbnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IGcoKHQueCtlLngpLzIsKHQueStlLnkpLzIpfSxjZS5zZXJpYWxWZXJzaW9uVUlEPTB4MmQyMTcyMTM1ZjQxMWMwMCxlKGZlLnByb3RvdHlwZSx7aXNJbnRlcnNlY3RzOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaXNEaXNqb2ludCgpfSxpc0NvdmVyczpmdW5jdGlvbigpe3ZhciB0PWZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLklOVEVSSU9SXSl8fGZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLkJPVU5EQVJZXSl8fGZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLkJPVU5EQVJZXVtMLklOVEVSSU9SXSl8fGZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLkJPVU5EQVJZXVtMLkJPVU5EQVJZXSk7cmV0dXJuIHQmJnRoaXMubWF0cml4W0wuRVhURVJJT1JdW0wuSU5URVJJT1JdPT09bHQuRkFMU0UmJnRoaXMubWF0cml4W0wuRVhURVJJT1JdW0wuQk9VTkRBUlldPT09bHQuRkFMU0V9LGlzQ292ZXJlZEJ5OmZ1bmN0aW9uKCl7dmFyIHQ9ZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuSU5URVJJT1JdKXx8ZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuQk9VTkRBUlldKXx8ZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuQk9VTkRBUlldW0wuSU5URVJJT1JdKXx8ZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuQk9VTkRBUlldW0wuQk9VTkRBUlldKTtyZXR1cm4gdCYmdGhpcy5tYXRyaXhbTC5JTlRFUklPUl1bTC5FWFRFUklPUl09PT1sdC5GQUxTRSYmdGhpcy5tYXRyaXhbTC5CT1VOREFSWV1bTC5FWFRFUklPUl09PT1sdC5GQUxTRX0sc2V0OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBuPU1hdGgudHJ1bmMoZS8zKSxpPWUlMzt0aGlzLm1hdHJpeFtuXVtpXT1sdC50b0RpbWVuc2lvblZhbHVlKHQuY2hhckF0KGUpKX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl07dGhpcy5tYXRyaXhbcl1bc109b319LGlzQ29udGFpbnM6ZnVuY3Rpb24oKXtyZXR1cm4gZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuSU5URVJJT1JdKSYmdGhpcy5tYXRyaXhbTC5FWFRFUklPUl1bTC5JTlRFUklPUl09PT1sdC5GQUxTRSYmdGhpcy5tYXRyaXhbTC5FWFRFUklPUl1bTC5CT1VOREFSWV09PT1sdC5GQUxTRX0sc2V0QXRMZWFzdDpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj1NYXRoLnRydW5jKGUvMyksaT1lJTM7dGhpcy5zZXRBdExlYXN0KG4saSxsdC50b0RpbWVuc2lvblZhbHVlKHQuY2hhckF0KGUpKSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHI9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLG89YXJndW1lbnRzWzJdO3RoaXMubWF0cml4W3JdW3NdPG8mJih0aGlzLm1hdHJpeFtyXVtzXT1vKX19LHNldEF0TGVhc3RJZlZhbGlkOmZ1bmN0aW9uKHQsZSxuKXt0Pj0wJiZlPj0wJiZ0aGlzLnNldEF0TGVhc3QodCxlLG4pfSxpc1dpdGhpbjpmdW5jdGlvbigpe3JldHVybiBmZS5pc1RydWUodGhpcy5tYXRyaXhbTC5JTlRFUklPUl1bTC5JTlRFUklPUl0pJiZ0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLkVYVEVSSU9SXT09PWx0LkZBTFNFJiZ0aGlzLm1hdHJpeFtMLkJPVU5EQVJZXVtMLkVYVEVSSU9SXT09PWx0LkZBTFNFfSxpc1RvdWNoZXM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD5lP3RoaXMuaXNUb3VjaGVzKGUsdCk6KHQ9PT1sdC5BJiZlPT09bHQuQXx8dD09PWx0LkwmJmU9PT1sdC5MfHx0PT09bHQuTCYmZT09PWx0LkF8fHQ9PT1sdC5QJiZlPT09bHQuQXx8dD09PWx0LlAmJmU9PT1sdC5MKSYmKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuSU5URVJJT1JdPT09bHQuRkFMU0UmJihmZS5pc1RydWUodGhpcy5tYXRyaXhbTC5JTlRFUklPUl1bTC5CT1VOREFSWV0pfHxmZS5pc1RydWUodGhpcy5tYXRyaXhbTC5CT1VOREFSWV1bTC5JTlRFUklPUl0pfHxmZS5pc1RydWUodGhpcy5tYXRyaXhbTC5CT1VOREFSWV1bTC5CT1VOREFSWV0pKSl9LGlzT3ZlcmxhcHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWx0LlAmJmU9PT1sdC5QfHx0PT09bHQuQSYmZT09PWx0LkE/ZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuSU5URVJJT1JdKSYmZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuRVhURVJJT1JdKSYmZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuRVhURVJJT1JdW0wuSU5URVJJT1JdKTp0PT09bHQuTCYmZT09PWx0LkwmJigxPT09dGhpcy5tYXRyaXhbTC5JTlRFUklPUl1bTC5JTlRFUklPUl0mJmZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLkVYVEVSSU9SXSkmJmZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLkVYVEVSSU9SXVtMLklOVEVSSU9SXSkpfSxpc0VxdWFsczpmdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZSYmKGZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLklOVEVSSU9SXSkmJnRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuRVhURVJJT1JdPT09bHQuRkFMU0UmJnRoaXMubWF0cml4W0wuQk9VTkRBUlldW0wuRVhURVJJT1JdPT09bHQuRkFMU0UmJnRoaXMubWF0cml4W0wuRVhURVJJT1JdW0wuSU5URVJJT1JdPT09bHQuRkFMU0UmJnRoaXMubWF0cml4W0wuRVhURVJJT1JdW0wuQk9VTkRBUlldPT09bHQuRkFMU0UpfSx0b1N0cmluZzpmdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgUChcIjEyMzQ1Njc4OVwiKSxlPTA7ZTwzO2UrKylmb3IodmFyIG49MDtuPDM7bisrKXQuc2V0Q2hhckF0KDMqZStuLGx0LnRvRGltZW5zaW9uU3ltYm9sKHRoaXMubWF0cml4W2VdW25dKSk7cmV0dXJuIHQudG9TdHJpbmcoKX0sc2V0QWxsOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8MztlKyspZm9yKHZhciBuPTA7bjwzO24rKyl0aGlzLm1hdHJpeFtlXVtuXT10fSxnZXQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5tYXRyaXhbdF1bZV19LHRyYW5zcG9zZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMubWF0cml4WzFdWzBdO3JldHVybiB0aGlzLm1hdHJpeFsxXVswXT10aGlzLm1hdHJpeFswXVsxXSx0aGlzLm1hdHJpeFswXVsxXT10LHQ9dGhpcy5tYXRyaXhbMl1bMF0sdGhpcy5tYXRyaXhbMl1bMF09dGhpcy5tYXRyaXhbMF1bMl0sdGhpcy5tYXRyaXhbMF1bMl09dCx0PXRoaXMubWF0cml4WzJdWzFdLHRoaXMubWF0cml4WzJdWzFdPXRoaXMubWF0cml4WzFdWzJdLHRoaXMubWF0cml4WzFdWzJdPXQsdGhpc30sbWF0Y2hlczpmdW5jdGlvbih0KXtpZig5IT09dC5sZW5ndGgpdGhyb3cgbmV3IGkoXCJTaG91bGQgYmUgbGVuZ3RoIDk6IFwiK3QpO2Zvcih2YXIgZT0wO2U8MztlKyspZm9yKHZhciBuPTA7bjwzO24rKylpZighZmUubWF0Y2hlcyh0aGlzLm1hdHJpeFtlXVtuXSx0LmNoYXJBdCgzKmUrbikpKXJldHVybiExO3JldHVybiEwfSxhZGQ6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTwzO2UrKylmb3IodmFyIG49MDtuPDM7bisrKXRoaXMuc2V0QXRMZWFzdChlLG4sdC5nZXQoZSxuKSl9LGlzRGlzam9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXRyaXhbTC5JTlRFUklPUl1bTC5JTlRFUklPUl09PT1sdC5GQUxTRSYmdGhpcy5tYXRyaXhbTC5JTlRFUklPUl1bTC5CT1VOREFSWV09PT1sdC5GQUxTRSYmdGhpcy5tYXRyaXhbTC5CT1VOREFSWV1bTC5JTlRFUklPUl09PT1sdC5GQUxTRSYmdGhpcy5tYXRyaXhbTC5CT1VOREFSWV1bTC5CT1VOREFSWV09PT1sdC5GQUxTRX0saXNDcm9zc2VzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9PT1sdC5QJiZlPT09bHQuTHx8dD09PWx0LlAmJmU9PT1sdC5BfHx0PT09bHQuTCYmZT09PWx0LkE/ZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuSU5URVJJT1JdKSYmZmUuaXNUcnVlKHRoaXMubWF0cml4W0wuSU5URVJJT1JdW0wuRVhURVJJT1JdKTp0PT09bHQuTCYmZT09PWx0LlB8fHQ9PT1sdC5BJiZlPT09bHQuUHx8dD09PWx0LkEmJmU9PT1sdC5MP2ZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLklOVEVSSU9SXVtMLklOVEVSSU9SXSkmJmZlLmlzVHJ1ZSh0aGlzLm1hdHJpeFtMLkVYVEVSSU9SXVtMLklOVEVSSU9SXSk6dD09PWx0LkwmJmU9PT1sdC5MJiYwPT09dGhpcy5tYXRyaXhbTC5JTlRFUklPUl1bTC5JTlRFUklPUl19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW29dfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBmZX19KSxmZS5tYXRjaGVzPWZ1bmN0aW9uKCl7aWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pJiZcInN0cmluZ1wiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07cmV0dXJuIGU9PT1sdC5TWU1fRE9OVENBUkV8fChlPT09bHQuU1lNX1RSVUUmJih0Pj0wfHx0PT09bHQuVFJVRSl8fChlPT09bHQuU1lNX0ZBTFNFJiZ0PT09bHQuRkFMU0V8fChlPT09bHQuU1lNX1AmJnQ9PT1sdC5QfHwoZT09PWx0LlNZTV9MJiZ0PT09bHQuTHx8ZT09PWx0LlNZTV9BJiZ0PT09bHQuQSkpKSl9aWYoXCJzdHJpbmdcIj09dHlwZW9mIGFyZ3VtZW50c1swXSYmXCJzdHJpbmdcIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9bmV3IGZlKG4pO3JldHVybiByLm1hdGNoZXMoaSl9fSxmZS5pc1RydWU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ+PTB8fHQ9PT1sdC5UUlVFfTt2YXIgbG89T2JqZWN0LmZyZWV6ZSh7Q29vcmRpbmF0ZTpnLENvb3JkaW5hdGVMaXN0Ok4sRW52ZWxvcGU6QyxMaW5lU2VnbWVudDpjZSxHZW9tZXRyeUZhY3Rvcnk6aWUsR2VvbWV0cnk6QixQb2ludDpMdCxMaW5lU3RyaW5nOlN0LExpbmVhclJpbmc6YnQsUG9seWdvbjpUdCxHZW9tZXRyeUNvbGxlY3Rpb246ZnQsTXVsdGlQb2ludDpQdCxNdWx0aUxpbmVTdHJpbmc6Z3QsTXVsdGlQb2x5Z29uOk90LERpbWVuc2lvbjpsdCxJbnRlcnNlY3Rpb25NYXRyaXg6ZmUsUHJlY2lzaW9uTW9kZWw6ZWV9KTtlKGdlLnByb3RvdHlwZSx7YWRkUG9pbnQ6ZnVuY3Rpb24odCl7dGhpcy5wdENvdW50Kz0xLHRoaXMucHRDZW50U3VtLngrPXQueCx0aGlzLnB0Q2VudFN1bS55Kz10Lnl9LHNldEJhc2VQb2ludDpmdW5jdGlvbih0KXtudWxsPT09dGhpcy5hcmVhQmFzZVB0JiYodGhpcy5hcmVhQmFzZVB0PXQpfSxhZGRMaW5lU2VnbWVudHM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj0wO248dC5sZW5ndGgtMTtuKyspe3ZhciBpPXRbbl0uZGlzdGFuY2UodFtuKzFdKTtpZigwIT09aSl7ZSs9aTt2YXIgcj0odFtuXS54K3RbbisxXS54KS8yO3RoaXMubGluZUNlbnRTdW0ueCs9aSpyO3ZhciBzPSh0W25dLnkrdFtuKzFdLnkpLzI7dGhpcy5saW5lQ2VudFN1bS55Kz1pKnN9fXRoaXMudG90YWxMZW5ndGgrPWUsMD09PWUmJnQubGVuZ3RoPjAmJnRoaXMuYWRkUG9pbnQodFswXSl9LGFkZEhvbGU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPWhlLmlzQ0NXKHQpLG49MDtuPHQubGVuZ3RoLTE7bisrKXRoaXMuYWRkVHJpYW5nbGUodGhpcy5hcmVhQmFzZVB0LHRbbl0sdFtuKzFdLGUpO3RoaXMuYWRkTGluZVNlZ21lbnRzKHQpfSxnZXRDZW50cm9pZDpmdW5jdGlvbigpe3ZhciB0PW5ldyBnO2lmKE1hdGguYWJzKHRoaXMuYXJlYXN1bTIpPjApdC54PXRoaXMuY2czLngvMy90aGlzLmFyZWFzdW0yLHQueT10aGlzLmNnMy55LzMvdGhpcy5hcmVhc3VtMjtlbHNlIGlmKHRoaXMudG90YWxMZW5ndGg+MCl0Lng9dGhpcy5saW5lQ2VudFN1bS54L3RoaXMudG90YWxMZW5ndGgsdC55PXRoaXMubGluZUNlbnRTdW0ueS90aGlzLnRvdGFsTGVuZ3RoO2Vsc2V7aWYoISh0aGlzLnB0Q291bnQ+MCkpcmV0dXJuIG51bGw7dC54PXRoaXMucHRDZW50U3VtLngvdGhpcy5wdENvdW50LHQueT10aGlzLnB0Q2VudFN1bS55L3RoaXMucHRDb3VudH1yZXR1cm4gdH0sYWRkU2hlbGw6ZnVuY3Rpb24odCl7dC5sZW5ndGg+MCYmdGhpcy5zZXRCYXNlUG9pbnQodFswXSk7Zm9yKHZhciBlPSFoZS5pc0NDVyh0KSxuPTA7bjx0Lmxlbmd0aC0xO24rKyl0aGlzLmFkZFRyaWFuZ2xlKHRoaXMuYXJlYUJhc2VQdCx0W25dLHRbbisxXSxlKTt0aGlzLmFkZExpbmVTZWdtZW50cyh0KX0sYWRkVHJpYW5nbGU6ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9aT8xOi0xO2dlLmNlbnRyb2lkMyh0LGUsbix0aGlzLnRyaWFuZ2xlQ2VudDMpO3ZhciBzPWdlLmFyZWEyKHQsZSxuKTt0aGlzLmNnMy54Kz1yKnMqdGhpcy50cmlhbmdsZUNlbnQzLngsdGhpcy5jZzMueSs9cipzKnRoaXMudHJpYW5nbGVDZW50My55LHRoaXMuYXJlYXN1bTIrPXIqc30sYWRkOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBUdCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuYWRkU2hlbGwodC5nZXRFeHRlcmlvclJpbmcoKS5nZXRDb29yZGluYXRlcygpKTtmb3IodmFyIGU9MDtlPHQuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7ZSsrKXRoaXMuYWRkSG9sZSh0LmdldEludGVyaW9yUmluZ04oZSkuZ2V0Q29vcmRpbmF0ZXMoKSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEIpe3ZhciBuPWFyZ3VtZW50c1swXTtpZihuLmlzRW1wdHkoKSlyZXR1cm4gbnVsbDtpZihuIGluc3RhbmNlb2YgTHQpdGhpcy5hZGRQb2ludChuLmdldENvb3JkaW5hdGUoKSk7ZWxzZSBpZihuIGluc3RhbmNlb2YgU3QpdGhpcy5hZGRMaW5lU2VnbWVudHMobi5nZXRDb29yZGluYXRlcygpKTtlbHNlIGlmKG4gaW5zdGFuY2VvZiBUdCl7dmFyIGk9bjt0aGlzLmFkZChpKX1lbHNlIGlmKG4gaW5zdGFuY2VvZiBmdClmb3IodmFyIHI9bixlPTA7ZTxyLmdldE51bUdlb21ldHJpZXMoKTtlKyspdGhpcy5hZGQoci5nZXRHZW9tZXRyeU4oZSkpfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZ2V9fSksZ2UuYXJlYTI9ZnVuY3Rpb24odCxlLG4pe3JldHVybihlLngtdC54KSoobi55LXQueSktKG4ueC10LngpKihlLnktdC55KX0sZ2UuY2VudHJvaWQzPWZ1bmN0aW9uKHQsZSxuLGkpe3JldHVybiBpLng9dC54K2UueCtuLngsaS55PXQueStlLnkrbi55LG51bGx9LGdlLmdldENlbnRyb2lkPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBnZSh0KTtyZXR1cm4gZS5nZXRDZW50cm9pZCgpfSxkZS5wcm90b3R5cGU9bmV3IEVycm9yLGRlLnByb3RvdHlwZS5uYW1lPVwiRW1wdHlTdGFja0V4Y2VwdGlvblwiLHBlLnByb3RvdHlwZT1uZXcgeSxwZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFycmF5Xy5wdXNoKHQpLCEwfSxwZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe2lmKHQ8MHx8dD49dGhpcy5zaXplKCkpdGhyb3cgbmV3IEluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb247cmV0dXJuIHRoaXMuYXJyYXlfW3RdfSxwZS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hcnJheV8ucHVzaCh0KSx0fSxwZS5wcm90b3R5cGUucG9wPWZ1bmN0aW9uKHQpe2lmKDA9PT10aGlzLmFycmF5Xy5sZW5ndGgpdGhyb3cgbmV3IGRlO3JldHVybiB0aGlzLmFycmF5Xy5wb3AoKX0scGUucHJvdG90eXBlLnBlZWs9ZnVuY3Rpb24oKXtpZigwPT09dGhpcy5hcnJheV8ubGVuZ3RoKXRocm93IG5ldyBkZTtyZXR1cm4gdGhpcy5hcnJheV9bdGhpcy5hcnJheV8ubGVuZ3RoLTFdfSxwZS5wcm90b3R5cGUuZW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuYXJyYXlfLmxlbmd0aH0scGUucHJvdG90eXBlLmlzRW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbXB0eSgpfSxwZS5wcm90b3R5cGUuc2VhcmNoPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFycmF5Xy5pbmRleE9mKHQpfSxwZS5wcm90b3R5cGUuc2l6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFycmF5Xy5sZW5ndGh9LHBlLnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MCxuPXRoaXMuYXJyYXlfLmxlbmd0aDtlPG47ZSsrKXQucHVzaCh0aGlzLmFycmF5X1tlXSk7cmV0dXJuIHR9LGUodmUucHJvdG90eXBlLHtmaWx0ZXI6ZnVuY3Rpb24odCl7dGhpcy50cmVlU2V0LmNvbnRhaW5zKHQpfHwodGhpcy5saXN0LmFkZCh0KSx0aGlzLnRyZWVTZXQuYWRkKHQpKX0sZ2V0Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgQXJyYXkodGhpcy5saXN0LnNpemUoKSkuZmlsbChudWxsKTtyZXR1cm4gdGhpcy5saXN0LnRvQXJyYXkodCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3pdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB2ZX19KSx2ZS5maWx0ZXJDb29yZGluYXRlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IHZlLG49MDtuPHQubGVuZ3RoO24rKyllLmZpbHRlcih0W25dKTtyZXR1cm4gZS5nZXRDb29yZGluYXRlcygpfSxlKG1lLnByb3RvdHlwZSx7cHJlU29ydDpmdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPTE7bjx0Lmxlbmd0aDtuKyspKHRbbl0ueTx0WzBdLnl8fHRbbl0ueT09PXRbMF0ueSYmdFtuXS54PHRbMF0ueCkmJihlPXRbMF0sdFswXT10W25dLHRbbl09ZSk7cmV0dXJuIHV0LnNvcnQodCwxLHQubGVuZ3RoLG5ldyB5ZSh0WzBdKSksdH0sY29tcHV0ZU9jdFJpbmc6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jb21wdXRlT2N0UHRzKHQpLG49bmV3IE47cmV0dXJuIG4uYWRkKGUsITEpLG4uc2l6ZSgpPDM/bnVsbDoobi5jbG9zZVJpbmcoKSxuLnRvQ29vcmRpbmF0ZUFycmF5KCkpfSxsaW5lT3JQb2x5Z29uOmZ1bmN0aW9uKHQpe2lmKHQ9dGhpcy5jbGVhblJpbmcodCksMz09PXQubGVuZ3RoKXJldHVybiB0aGlzLmdlb21GYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcoW3RbMF0sdFsxXV0pO3ZhciBlPXRoaXMuZ2VvbUZhY3RvcnkuY3JlYXRlTGluZWFyUmluZyh0KTtyZXR1cm4gdGhpcy5nZW9tRmFjdG9yeS5jcmVhdGVQb2x5Z29uKGUsbnVsbCl9LGNsZWFuUmluZzpmdW5jdGlvbih0KXtmLmVxdWFscyh0WzBdLHRbdC5sZW5ndGgtMV0pO2Zvcih2YXIgZT1uZXcgSSxuPW51bGwsaT0wO2k8PXQubGVuZ3RoLTI7aSsrKXt2YXIgcj10W2ldLHM9dFtpKzFdO3IuZXF1YWxzKHMpfHxudWxsIT09biYmdGhpcy5pc0JldHdlZW4obixyLHMpfHwoZS5hZGQociksbj1yKX1lLmFkZCh0W3QubGVuZ3RoLTFdKTt2YXIgbz1uZXcgQXJyYXkoZS5zaXplKCkpLmZpbGwobnVsbCk7cmV0dXJuIGUudG9BcnJheShvKX0saXNCZXR3ZWVuOmZ1bmN0aW9uKHQsZSxuKXtpZigwIT09aGUuY29tcHV0ZU9yaWVudGF0aW9uKHQsZSxuKSlyZXR1cm4hMTtpZih0LnghPT1uLngpe2lmKHQueDw9ZS54JiZlLng8PW4ueClyZXR1cm4hMDtpZihuLng8PWUueCYmZS54PD10LngpcmV0dXJuITB9aWYodC55IT09bi55KXtpZih0Lnk8PWUueSYmZS55PD1uLnkpcmV0dXJuITA7aWYobi55PD1lLnkmJmUueTw9dC55KXJldHVybiEwfXJldHVybiExfSxyZWR1Y2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jb21wdXRlT2N0UmluZyh0KTtpZihudWxsPT09ZSlyZXR1cm4gdDtmb3IodmFyIG49bmV3IGF0LGk9MDtpPGUubGVuZ3RoO2krKyluLmFkZChlW2ldKTtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyloZS5pc1BvaW50SW5SaW5nKHRbaV0sZSl8fG4uYWRkKHRbaV0pO3ZhciByPUgudG9Db29yZGluYXRlQXJyYXkobik7cmV0dXJuIHIubGVuZ3RoPDM/dGhpcy5wYWRBcnJheTMocik6cn0sZ2V0Q29udmV4SHVsbDpmdW5jdGlvbigpe2lmKDA9PT10aGlzLmlucHV0UHRzLmxlbmd0aClyZXR1cm4gdGhpcy5nZW9tRmFjdG9yeS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24obnVsbCk7aWYoMT09PXRoaXMuaW5wdXRQdHMubGVuZ3RoKXJldHVybiB0aGlzLmdlb21GYWN0b3J5LmNyZWF0ZVBvaW50KHRoaXMuaW5wdXRQdHNbMF0pO2lmKDI9PT10aGlzLmlucHV0UHRzLmxlbmd0aClyZXR1cm4gdGhpcy5nZW9tRmFjdG9yeS5jcmVhdGVMaW5lU3RyaW5nKHRoaXMuaW5wdXRQdHMpO3ZhciB0PXRoaXMuaW5wdXRQdHM7dGhpcy5pbnB1dFB0cy5sZW5ndGg+NTAmJih0PXRoaXMucmVkdWNlKHRoaXMuaW5wdXRQdHMpKTt2YXIgZT10aGlzLnByZVNvcnQodCksbj10aGlzLmdyYWhhbVNjYW4oZSksaT10aGlzLnRvQ29vcmRpbmF0ZUFycmF5KG4pO3JldHVybiB0aGlzLmxpbmVPclBvbHlnb24oaSl9LHBhZEFycmF5MzpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KDMpLmZpbGwobnVsbCksbj0wO248ZS5sZW5ndGg7bisrKW48dC5sZW5ndGg/ZVtuXT10W25dOmVbbl09dFswXTtyZXR1cm4gZX0sY29tcHV0ZU9jdFB0czpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KDgpLmZpbGwobnVsbCksbj0wO248ZS5sZW5ndGg7bisrKWVbbl09dFswXTtmb3IodmFyIGk9MTtpPHQubGVuZ3RoO2krKyl0W2ldLng8ZVswXS54JiYoZVswXT10W2ldKSx0W2ldLngtdFtpXS55PGVbMV0ueC1lWzFdLnkmJihlWzFdPXRbaV0pLHRbaV0ueT5lWzJdLnkmJihlWzJdPXRbaV0pLHRbaV0ueCt0W2ldLnk+ZVszXS54K2VbM10ueSYmKGVbM109dFtpXSksdFtpXS54PmVbNF0ueCYmKGVbNF09dFtpXSksdFtpXS54LXRbaV0ueT5lWzVdLngtZVs1XS55JiYoZVs1XT10W2ldKSx0W2ldLnk8ZVs2XS55JiYoZVs2XT10W2ldKSx0W2ldLngrdFtpXS55PGVbN10ueCtlWzddLnkmJihlWzddPXRbaV0pO3JldHVybiBlfSx0b0Nvb3JkaW5hdGVBcnJheTpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KHQuc2l6ZSgpKS5maWxsKG51bGwpLG49MDtuPHQuc2l6ZSgpO24rKyl7dmFyIGk9dC5nZXQobik7ZVtuXT1pfXJldHVybiBlfSxncmFoYW1TY2FuOmZ1bmN0aW9uKHQpe3ZhciBlPW51bGwsbj1uZXcgcGU7ZT1uLnB1c2godFswXSksZT1uLnB1c2godFsxXSksZT1uLnB1c2godFsyXSk7Zm9yKHZhciBpPTM7aTx0Lmxlbmd0aDtpKyspe2ZvcihlPW4ucG9wKCk7IW4uZW1wdHkoKSYmaGUuY29tcHV0ZU9yaWVudGF0aW9uKG4ucGVlaygpLGUsdFtpXSk+MDspZT1uLnBvcCgpO2U9bi5wdXNoKGUpLGU9bi5wdXNoKHRbaV0pO1xufXJldHVybiBlPW4ucHVzaCh0WzBdKSxufSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBtZX19KSxtZS5leHRyYWN0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHZlO3JldHVybiB0LmFwcGx5KGUpLGUuZ2V0Q29vcmRpbmF0ZXMoKX0sZSh5ZS5wcm90b3R5cGUse2NvbXBhcmU6ZnVuY3Rpb24odCxlKXt2YXIgbj10LGk9ZTtyZXR1cm4geWUucG9sYXJDb21wYXJlKHRoaXMub3JpZ2luLG4saSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2FdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB5ZX19KSx5ZS5wb2xhckNvbXBhcmU9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPWUueC10Lngscj1lLnktdC55LHM9bi54LXQueCxvPW4ueS10LnksYT1oZS5jb21wdXRlT3JpZW50YXRpb24odCxlLG4pO2lmKGE9PT1oZS5DT1VOVEVSQ0xPQ0tXSVNFKXJldHVybiAxO2lmKGE9PT1oZS5DTE9DS1dJU0UpcmV0dXJuLTE7dmFyIHU9aSppK3IqcixsPXMqcytvKm87cmV0dXJuIHU8bD8tMTp1Pmw/MTowfSxtZS5SYWRpYWxDb21wYXJhdG9yPXllLGUoeGUucHJvdG90eXBlLHt0cmFuc2Zvcm1Qb2ludDpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmZhY3RvcnkuY3JlYXRlUG9pbnQodGhpcy50cmFuc2Zvcm1Db29yZGluYXRlcyh0LmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLHQpKX0sdHJhbnNmb3JtUG9seWdvbjpmdW5jdGlvbih0LGUpe3ZhciBuPSEwLGk9dGhpcy50cmFuc2Zvcm1MaW5lYXJSaW5nKHQuZ2V0RXh0ZXJpb3JSaW5nKCksdCk7bnVsbCE9PWkmJmkgaW5zdGFuY2VvZiBidCYmIWkuaXNFbXB0eSgpfHwobj0hMSk7Zm9yKHZhciByPW5ldyBJLHM9MDtzPHQuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7cysrKXt2YXIgbz10aGlzLnRyYW5zZm9ybUxpbmVhclJpbmcodC5nZXRJbnRlcmlvclJpbmdOKHMpLHQpO251bGw9PT1vfHxvLmlzRW1wdHkoKXx8KG8gaW5zdGFuY2VvZiBidHx8KG49ITEpLHIuYWRkKG8pKX1pZihuKXJldHVybiB0aGlzLmZhY3RvcnkuY3JlYXRlUG9seWdvbihpLHIudG9BcnJheShbXSkpO3ZhciBhPW5ldyBJO3JldHVybiBudWxsIT09aSYmYS5hZGQoaSksYS5hZGRBbGwociksdGhpcy5mYWN0b3J5LmJ1aWxkR2VvbWV0cnkoYSl9LGNyZWF0ZUNvb3JkaW5hdGVTZXF1ZW5jZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5mYWN0b3J5LmdldENvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkoKS5jcmVhdGUodCl9LGdldElucHV0R2VvbWV0cnk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnB1dEdlb219LHRyYW5zZm9ybU11bHRpTGluZVN0cmluZzpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgSSxpPTA7aTx0LmdldE51bUdlb21ldHJpZXMoKTtpKyspe3ZhciByPXRoaXMudHJhbnNmb3JtTGluZVN0cmluZyh0LmdldEdlb21ldHJ5TihpKSx0KTtudWxsIT09ciYmKHIuaXNFbXB0eSgpfHxuLmFkZChyKSl9cmV0dXJuIHRoaXMuZmFjdG9yeS5idWlsZEdlb21ldHJ5KG4pfSx0cmFuc2Zvcm1Db29yZGluYXRlczpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmNvcHkodCl9LHRyYW5zZm9ybUxpbmVTdHJpbmc6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5mYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcodGhpcy50cmFuc2Zvcm1Db29yZGluYXRlcyh0LmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLHQpKX0sdHJhbnNmb3JtTXVsdGlQb2ludDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgSSxpPTA7aTx0LmdldE51bUdlb21ldHJpZXMoKTtpKyspe3ZhciByPXRoaXMudHJhbnNmb3JtUG9pbnQodC5nZXRHZW9tZXRyeU4oaSksdCk7bnVsbCE9PXImJihyLmlzRW1wdHkoKXx8bi5hZGQocikpfXJldHVybiB0aGlzLmZhY3RvcnkuYnVpbGRHZW9tZXRyeShuKX0sdHJhbnNmb3JtTXVsdGlQb2x5Z29uOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPW5ldyBJLGk9MDtpPHQuZ2V0TnVtR2VvbWV0cmllcygpO2krKyl7dmFyIHI9dGhpcy50cmFuc2Zvcm1Qb2x5Z29uKHQuZ2V0R2VvbWV0cnlOKGkpLHQpO251bGwhPT1yJiYoci5pc0VtcHR5KCl8fG4uYWRkKHIpKX1yZXR1cm4gdGhpcy5mYWN0b3J5LmJ1aWxkR2VvbWV0cnkobil9LGNvcHk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuY29weSgpfSx0cmFuc2Zvcm1HZW9tZXRyeUNvbGxlY3Rpb246ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEksaT0wO2k8dC5nZXROdW1HZW9tZXRyaWVzKCk7aSsrKXt2YXIgcj10aGlzLnRyYW5zZm9ybSh0LmdldEdlb21ldHJ5TihpKSk7bnVsbCE9PXImJih0aGlzLnBydW5lRW1wdHlHZW9tZXRyeSYmci5pc0VtcHR5KCl8fG4uYWRkKHIpKX1yZXR1cm4gdGhpcy5wcmVzZXJ2ZUdlb21ldHJ5Q29sbGVjdGlvblR5cGU/dGhpcy5mYWN0b3J5LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihpZS50b0dlb21ldHJ5QXJyYXkobikpOnRoaXMuZmFjdG9yeS5idWlsZEdlb21ldHJ5KG4pfSx0cmFuc2Zvcm06ZnVuY3Rpb24odCl7aWYodGhpcy5pbnB1dEdlb209dCx0aGlzLmZhY3Rvcnk9dC5nZXRGYWN0b3J5KCksdCBpbnN0YW5jZW9mIEx0KXJldHVybiB0aGlzLnRyYW5zZm9ybVBvaW50KHQsbnVsbCk7aWYodCBpbnN0YW5jZW9mIFB0KXJldHVybiB0aGlzLnRyYW5zZm9ybU11bHRpUG9pbnQodCxudWxsKTtpZih0IGluc3RhbmNlb2YgYnQpcmV0dXJuIHRoaXMudHJhbnNmb3JtTGluZWFyUmluZyh0LG51bGwpO2lmKHQgaW5zdGFuY2VvZiBTdClyZXR1cm4gdGhpcy50cmFuc2Zvcm1MaW5lU3RyaW5nKHQsbnVsbCk7aWYodCBpbnN0YW5jZW9mIGd0KXJldHVybiB0aGlzLnRyYW5zZm9ybU11bHRpTGluZVN0cmluZyh0LG51bGwpO2lmKHQgaW5zdGFuY2VvZiBUdClyZXR1cm4gdGhpcy50cmFuc2Zvcm1Qb2x5Z29uKHQsbnVsbCk7aWYodCBpbnN0YW5jZW9mIE90KXJldHVybiB0aGlzLnRyYW5zZm9ybU11bHRpUG9seWdvbih0LG51bGwpO2lmKHQgaW5zdGFuY2VvZiBmdClyZXR1cm4gdGhpcy50cmFuc2Zvcm1HZW9tZXRyeUNvbGxlY3Rpb24odCxudWxsKTt0aHJvdyBuZXcgaShcIlVua25vd24gR2VvbWV0cnkgc3VidHlwZTogXCIrdC5nZXRDbGFzcygpLmdldE5hbWUoKSl9LHRyYW5zZm9ybUxpbmVhclJpbmc6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRyYW5zZm9ybUNvb3JkaW5hdGVzKHQuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCksdCk7aWYobnVsbD09PW4pcmV0dXJuIHRoaXMuZmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKG51bGwpO3ZhciBpPW4uc2l6ZSgpO3JldHVybiBpPjAmJmk8NCYmIXRoaXMucHJlc2VydmVUeXBlP3RoaXMuZmFjdG9yeS5jcmVhdGVMaW5lU3RyaW5nKG4pOnRoaXMuZmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKG4pfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB4ZX19KSxlKEVlLnByb3RvdHlwZSx7c25hcFZlcnRpY2VzOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXRoaXMuX2lzQ2xvc2VkP3Quc2l6ZSgpLTE6dC5zaXplKCksaT0wO2k8bjtpKyspe3ZhciByPXQuZ2V0KGkpLHM9dGhpcy5maW5kU25hcEZvclZlcnRleChyLGUpO251bGwhPT1zJiYodC5zZXQoaSxuZXcgZyhzKSksMD09PWkmJnRoaXMuX2lzQ2xvc2VkJiZ0LnNldCh0LnNpemUoKS0xLG5ldyBnKHMpKSl9fSxmaW5kU25hcEZvclZlcnRleDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXtpZih0LmVxdWFsczJEKGVbbl0pKXJldHVybiBudWxsO2lmKHQuZGlzdGFuY2UoZVtuXSk8dGhpcy5zbmFwVG9sZXJhbmNlKXJldHVybiBlW25dfXJldHVybiBudWxsfSxzbmFwVG86ZnVuY3Rpb24odCl7dmFyIGU9bmV3IE4odGhpcy5zcmNQdHMpO3RoaXMuc25hcFZlcnRpY2VzKGUsdCksdGhpcy5zbmFwU2VnbWVudHMoZSx0KTt2YXIgbj1lLnRvQ29vcmRpbmF0ZUFycmF5KCk7cmV0dXJuIG59LHNuYXBTZWdtZW50czpmdW5jdGlvbih0LGUpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgbj1lLmxlbmd0aDtlWzBdLmVxdWFsczJEKGVbZS5sZW5ndGgtMV0pJiYobj1lLmxlbmd0aC0xKTtmb3IodmFyIGk9MDtpPG47aSsrKXt2YXIgcj1lW2ldLHM9dGhpcy5maW5kU2VnbWVudEluZGV4VG9TbmFwKHIsdCk7cz49MCYmdC5hZGQocysxLG5ldyBnKHIpLCExKX19LGZpbmRTZWdtZW50SW5kZXhUb1NuYXA6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49ci5NQVhfVkFMVUUsaT0tMSxzPTA7czxlLnNpemUoKS0xO3MrKyl7aWYodGhpcy5zZWcucDA9ZS5nZXQocyksdGhpcy5zZWcucDE9ZS5nZXQocysxKSx0aGlzLnNlZy5wMC5lcXVhbHMyRCh0KXx8dGhpcy5zZWcucDEuZXF1YWxzMkQodCkpe2lmKHRoaXMuYWxsb3dTbmFwcGluZ1RvU291cmNlVmVydGljZXMpY29udGludWU7cmV0dXJuLTF9dmFyIG89dGhpcy5zZWcuZGlzdGFuY2UodCk7bzx0aGlzLnNuYXBUb2xlcmFuY2UmJm88biYmKG49byxpPXMpfXJldHVybiBpfSxzZXRBbGxvd1NuYXBwaW5nVG9Tb3VyY2VWZXJ0aWNlczpmdW5jdGlvbih0KXt0aGlzLmFsbG93U25hcHBpbmdUb1NvdXJjZVZlcnRpY2VzPXR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEVlfX0pLEVlLmlzQ2xvc2VkPWZ1bmN0aW9uKHQpe3JldHVybiEodC5sZW5ndGg8PTEpJiZ0WzBdLmVxdWFsczJEKHRbdC5sZW5ndGgtMV0pfSxlKEllLnByb3RvdHlwZSx7c25hcFRvOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5leHRyYWN0VGFyZ2V0Q29vcmRpbmF0ZXModCksaT1uZXcgTmUoZSxuKTtyZXR1cm4gaS50cmFuc2Zvcm0odGhpcy5zcmNHZW9tKX0sc25hcFRvU2VsZjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZXh0cmFjdFRhcmdldENvb3JkaW5hdGVzKHRoaXMuc3JjR2VvbSksaT1uZXcgTmUodCxuLCghMCkpLHI9aS50cmFuc2Zvcm0odGhpcy5zcmNHZW9tKSxzPXI7cmV0dXJuIGUmJlIocyxSdCkmJihzPXIuYnVmZmVyKDApKSxzfSxjb21wdXRlU25hcFRvbGVyYW5jZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmNvbXB1dGVNaW5pbXVtU2VnbWVudExlbmd0aCh0KSxuPWUvMTA7cmV0dXJuIG59LGV4dHJhY3RUYXJnZXRDb29yZGluYXRlczpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IGF0LG49dC5nZXRDb29yZGluYXRlcygpLGk9MDtpPG4ubGVuZ3RoO2krKyllLmFkZChuW2ldKTtyZXR1cm4gZS50b0FycmF5KG5ldyBBcnJheSgwKS5maWxsKG51bGwpKX0sY29tcHV0ZU1pbmltdW1TZWdtZW50TGVuZ3RoOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1yLk1BWF9WQUxVRSxuPTA7bjx0Lmxlbmd0aC0xO24rKyl7dmFyIGk9dFtuXS5kaXN0YW5jZSh0W24rMV0pO2k8ZSYmKGU9aSl9cmV0dXJuIGV9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEllfX0pLEllLnNuYXA9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW5ldyBBcnJheSgyKS5maWxsKG51bGwpLHI9bmV3IEllKHQpO2lbMF09ci5zbmFwVG8oZSxuKTt2YXIgcz1uZXcgSWUoZSk7cmV0dXJuIGlbMV09cy5zbmFwVG8oaVswXSxuKSxpfSxJZS5jb21wdXRlT3ZlcmxheVNuYXBUb2xlcmFuY2U9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9SWUuY29tcHV0ZVNpemVCYXNlZFNuYXBUb2xlcmFuY2UodCksbj10LmdldFByZWNpc2lvbk1vZGVsKCk7aWYobi5nZXRUeXBlKCk9PT1lZS5GSVhFRCl7dmFyIGk9MS9uLmdldFNjYWxlKCkqMi8xLjQxNTtpPmUmJihlPWkpfXJldHVybiBlfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV07cmV0dXJuIE1hdGgubWluKEllLmNvbXB1dGVPdmVybGF5U25hcFRvbGVyYW5jZShyKSxJZS5jb21wdXRlT3ZlcmxheVNuYXBUb2xlcmFuY2UocykpfX0sSWUuY29tcHV0ZVNpemVCYXNlZFNuYXBUb2xlcmFuY2U9ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRFbnZlbG9wZUludGVybmFsKCksbj1NYXRoLm1pbihlLmdldEhlaWdodCgpLGUuZ2V0V2lkdGgoKSksaT1uKkllLlNOQVBfUFJFQ0lTSU9OX0ZBQ1RPUjtyZXR1cm4gaX0sSWUuc25hcFRvU2VsZj1mdW5jdGlvbih0LGUsbil7dmFyIGk9bmV3IEllKHQpO3JldHVybiBpLnNuYXBUb1NlbGYoZSxuKX0sSWUuU05BUF9QUkVDSVNJT05fRkFDVE9SPTFlLTksaChOZSx4ZSksZShOZS5wcm90b3R5cGUse3NuYXBMaW5lOmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IEVlKHQsdGhpcy5zbmFwVG9sZXJhbmNlKTtyZXR1cm4gbi5zZXRBbGxvd1NuYXBwaW5nVG9Tb3VyY2VWZXJ0aWNlcyh0aGlzLmlzU2VsZlNuYXApLG4uc25hcFRvKGUpfSx0cmFuc2Zvcm1Db29yZGluYXRlczpmdW5jdGlvbih0LGUpe3ZhciBuPXQudG9Db29yZGluYXRlQXJyYXkoKSxpPXRoaXMuc25hcExpbmUobix0aGlzLnNuYXBQdHMpO3JldHVybiB0aGlzLmZhY3RvcnkuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShpKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTmV9fSksZShDZS5wcm90b3R5cGUse2dldENvbW1vbjpmdW5jdGlvbigpe3JldHVybiByLmxvbmdCaXRzVG9Eb3VibGUodGhpcy5jb21tb25CaXRzKX0sYWRkOmZ1bmN0aW9uKHQpe3ZhciBlPXIuZG91YmxlVG9Mb25nQml0cyh0KTtpZih0aGlzLmlzRmlyc3QpcmV0dXJuIHRoaXMuY29tbW9uQml0cz1lLHRoaXMuY29tbW9uU2lnbkV4cD1DZS5zaWduRXhwQml0cyh0aGlzLmNvbW1vbkJpdHMpLHRoaXMuaXNGaXJzdD0hMSxudWxsO3ZhciBuPUNlLnNpZ25FeHBCaXRzKGUpO3JldHVybiBuIT09dGhpcy5jb21tb25TaWduRXhwPyh0aGlzLmNvbW1vbkJpdHM9MCxudWxsKToodGhpcy5jb21tb25NYW50aXNzYUJpdHNDb3VudD1DZS5udW1Db21tb25Nb3N0U2lnTWFudGlzc2FCaXRzKHRoaXMuY29tbW9uQml0cyxlKSx2b2lkKHRoaXMuY29tbW9uQml0cz1DZS56ZXJvTG93ZXJCaXRzKHRoaXMuY29tbW9uQml0cyw2NC0oMTIrdGhpcy5jb21tb25NYW50aXNzYUJpdHNDb3VudCkpKSl9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPXIubG9uZ0JpdHNUb0RvdWJsZSh0KSxuPUxvbmcudG9CaW5hcnlTdHJpbmcodCksaT1cIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIituLHM9aS5zdWJzdHJpbmcoaS5sZW5ndGgtNjQpLG89cy5zdWJzdHJpbmcoMCwxKStcIiAgXCIrcy5zdWJzdHJpbmcoMSwxMikrXCIoZXhwKSBcIitzLnN1YnN0cmluZygxMikrXCIgWyBcIitlK1wiIF1cIjtyZXR1cm4gb319LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIENlfX0pLENlLmdldEJpdD1mdW5jdGlvbih0LGUpe3ZhciBuPTE8PGU7cmV0dXJuIDAhPT0odCZuKT8xOjB9LENlLnNpZ25FeHBCaXRzPWZ1bmN0aW9uKHQpe3JldHVybiB0Pj41Mn0sQ2UuemVyb0xvd2VyQml0cz1mdW5jdGlvbih0LGUpe3ZhciBuPSgxPDxlKS0xLGk9fm4scj10Jmk7cmV0dXJuIHJ9LENlLm51bUNvbW1vbk1vc3RTaWdNYW50aXNzYUJpdHM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MCxpPTUyO2k+PTA7aS0tKXtpZihDZS5nZXRCaXQodCxpKSE9PUNlLmdldEJpdChlLGkpKXJldHVybiBuO24rK31yZXR1cm4gNTJ9LGUoU2UucHJvdG90eXBlLHthZGRDb21tb25CaXRzOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBMZSh0aGlzLmNvbW1vbkNvb3JkKTt0LmFwcGx5KGUpLHQuZ2VvbWV0cnlDaGFuZ2VkKCl9LHJlbW92ZUNvbW1vbkJpdHM6ZnVuY3Rpb24odCl7aWYoMD09PXRoaXMuY29tbW9uQ29vcmQueCYmMD09PXRoaXMuY29tbW9uQ29vcmQueSlyZXR1cm4gdDt2YXIgZT1uZXcgZyh0aGlzLmNvbW1vbkNvb3JkKTtlLng9LWUueCxlLnk9LWUueTt2YXIgbj1uZXcgTGUoZSk7cmV0dXJuIHQuYXBwbHkobiksdC5nZW9tZXRyeUNoYW5nZWQoKSx0fSxnZXRDb21tb25Db29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tbW9uQ29vcmR9LGFkZDpmdW5jdGlvbih0KXt0LmFwcGx5KHRoaXMuY2NGaWx0ZXIpLHRoaXMuY29tbW9uQ29vcmQ9dGhpcy5jY0ZpbHRlci5nZXRDb21tb25Db29yZGluYXRlKCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFNlfX0pLGUod2UucHJvdG90eXBlLHtmaWx0ZXI6ZnVuY3Rpb24odCl7dGhpcy5jb21tb25CaXRzWC5hZGQodC54KSx0aGlzLmNvbW1vbkJpdHNZLmFkZCh0LnkpfSxnZXRDb21tb25Db29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBnKHRoaXMuY29tbW9uQml0c1guZ2V0Q29tbW9uKCksdGhpcy5jb21tb25CaXRzWS5nZXRDb21tb24oKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3pdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB3ZX19KSxlKExlLnByb3RvdHlwZSx7ZmlsdGVyOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5nZXRPcmRpbmF0ZShlLDApK3RoaXMudHJhbnMueCxpPXQuZ2V0T3JkaW5hdGUoZSwxKSt0aGlzLnRyYW5zLnk7dC5zZXRPcmRpbmF0ZShlLDAsbiksdC5zZXRPcmRpbmF0ZShlLDEsaSl9LGlzRG9uZTpmdW5jdGlvbigpe3JldHVybiExfSxpc0dlb21ldHJ5Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiEwfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltjdF19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIExlfX0pLFNlLkNvbW1vbkNvb3JkaW5hdGVGaWx0ZXI9d2UsU2UuVHJhbnNsYXRlcj1MZSxlKFJlLnByb3RvdHlwZSx7bmV4dDpmdW5jdGlvbigpe2lmKHRoaXMuYXRTdGFydClyZXR1cm4gdGhpcy5hdFN0YXJ0PSExLFJlLmlzQXRvbWljKHRoaXMucGFyZW50KSYmdGhpcy5pbmRleCsrLHRoaXMucGFyZW50O2lmKG51bGwhPT10aGlzLnN1YmNvbGxlY3Rpb25JdGVyYXRvcil7aWYodGhpcy5zdWJjb2xsZWN0aW9uSXRlcmF0b3IuaGFzTmV4dCgpKXJldHVybiB0aGlzLnN1YmNvbGxlY3Rpb25JdGVyYXRvci5uZXh0KCk7dGhpcy5zdWJjb2xsZWN0aW9uSXRlcmF0b3I9bnVsbH1pZih0aGlzLmluZGV4Pj10aGlzLm1heCl0aHJvdyBuZXcgeDt2YXIgdD10aGlzLnBhcmVudC5nZXRHZW9tZXRyeU4odGhpcy5pbmRleCsrKTtyZXR1cm4gdCBpbnN0YW5jZW9mIGZ0Pyh0aGlzLnN1YmNvbGxlY3Rpb25JdGVyYXRvcj1uZXcgUmUodCksdGhpcy5zdWJjb2xsZWN0aW9uSXRlcmF0b3IubmV4dCgpKTp0fSxyZW1vdmU6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24odGhpcy5nZXRDbGFzcygpLmdldE5hbWUoKSl9LGhhc05leHQ6ZnVuY3Rpb24oKXtpZih0aGlzLmF0U3RhcnQpcmV0dXJuITA7aWYobnVsbCE9PXRoaXMuc3ViY29sbGVjdGlvbkl0ZXJhdG9yKXtpZih0aGlzLnN1YmNvbGxlY3Rpb25JdGVyYXRvci5oYXNOZXh0KCkpcmV0dXJuITA7dGhpcy5zdWJjb2xsZWN0aW9uSXRlcmF0b3I9bnVsbH1yZXR1cm4hKHRoaXMuaW5kZXg+PXRoaXMubWF4KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bcF19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFJlfX0pLFJlLmlzQXRvbWljPWZ1bmN0aW9uKHQpe3JldHVybiEodCBpbnN0YW5jZW9mIGZ0KX0sZShUZS5wcm90b3R5cGUse2xvY2F0ZUludGVybmFsOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIFR0KXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07aWYoZS5pc0VtcHR5KCkpcmV0dXJuIEwuRVhURVJJT1I7dmFyIG49ZS5nZXRFeHRlcmlvclJpbmcoKSxpPXRoaXMubG9jYXRlSW5Qb2x5Z29uUmluZyh0LG4pO2lmKGk9PT1MLkVYVEVSSU9SKXJldHVybiBMLkVYVEVSSU9SO2lmKGk9PT1MLkJPVU5EQVJZKXJldHVybiBMLkJPVU5EQVJZO2Zvcih2YXIgcj0wO3I8ZS5nZXROdW1JbnRlcmlvclJpbmcoKTtyKyspe3ZhciBzPWUuZ2V0SW50ZXJpb3JSaW5nTihyKSxvPXRoaXMubG9jYXRlSW5Qb2x5Z29uUmluZyh0LHMpO2lmKG89PT1MLklOVEVSSU9SKXJldHVybiBMLkVYVEVSSU9SO2lmKG89PT1MLkJPVU5EQVJZKXJldHVybiBMLkJPVU5EQVJZfXJldHVybiBMLklOVEVSSU9SfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBTdCl7dmFyIGE9YXJndW1lbnRzWzBdLHU9YXJndW1lbnRzWzFdO2lmKCF1LmdldEVudmVsb3BlSW50ZXJuYWwoKS5pbnRlcnNlY3RzKGEpKXJldHVybiBMLkVYVEVSSU9SO3ZhciBsPXUuZ2V0Q29vcmRpbmF0ZXMoKTtyZXR1cm4gdS5pc0Nsb3NlZCgpfHwhYS5lcXVhbHMobFswXSkmJiFhLmVxdWFscyhsW2wubGVuZ3RoLTFdKT9oZS5pc09uTGluZShhLGwpP0wuSU5URVJJT1I6TC5FWFRFUklPUjpMLkJPVU5EQVJZfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBMdCl7dmFyIGg9YXJndW1lbnRzWzBdLGM9YXJndW1lbnRzWzFdLGY9Yy5nZXRDb29yZGluYXRlKCk7cmV0dXJuIGYuZXF1YWxzMkQoaCk/TC5JTlRFUklPUjpMLkVYVEVSSU9SfX0sbG9jYXRlSW5Qb2x5Z29uUmluZzpmdW5jdGlvbih0LGUpe3JldHVybiBlLmdldEVudmVsb3BlSW50ZXJuYWwoKS5pbnRlcnNlY3RzKHQpP2hlLmxvY2F0ZVBvaW50SW5SaW5nKHQsZS5nZXRDb29yZGluYXRlcygpKTpMLkVYVEVSSU9SfSxpbnRlcnNlY3RzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMubG9jYXRlKHQsZSkhPT1MLkVYVEVSSU9SfSx1cGRhdGVMb2NhdGlvbkluZm86ZnVuY3Rpb24odCl7dD09PUwuSU5URVJJT1ImJih0aGlzLmlzSW49ITApLHQ9PT1MLkJPVU5EQVJZJiZ0aGlzLm51bUJvdW5kYXJpZXMrK30sY29tcHV0ZUxvY2F0aW9uOmZ1bmN0aW9uKHQsZSl7aWYoZSBpbnN0YW5jZW9mIEx0JiZ0aGlzLnVwZGF0ZUxvY2F0aW9uSW5mbyh0aGlzLmxvY2F0ZUludGVybmFsKHQsZSkpLGUgaW5zdGFuY2VvZiBTdCl0aGlzLnVwZGF0ZUxvY2F0aW9uSW5mbyh0aGlzLmxvY2F0ZUludGVybmFsKHQsZSkpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIFR0KXRoaXMudXBkYXRlTG9jYXRpb25JbmZvKHRoaXMubG9jYXRlSW50ZXJuYWwodCxlKSk7ZWxzZSBpZihlIGluc3RhbmNlb2YgZ3QpZm9yKHZhciBuPWUsaT0wO2k8bi5nZXROdW1HZW9tZXRyaWVzKCk7aSsrKXt2YXIgcj1uLmdldEdlb21ldHJ5TihpKTt0aGlzLnVwZGF0ZUxvY2F0aW9uSW5mbyh0aGlzLmxvY2F0ZUludGVybmFsKHQscikpfWVsc2UgaWYoZSBpbnN0YW5jZW9mIE90KWZvcih2YXIgcz1lLGk9MDtpPHMuZ2V0TnVtR2VvbWV0cmllcygpO2krKyl7dmFyIG89cy5nZXRHZW9tZXRyeU4oaSk7dGhpcy51cGRhdGVMb2NhdGlvbkluZm8odGhpcy5sb2NhdGVJbnRlcm5hbCh0LG8pKX1lbHNlIGlmKGUgaW5zdGFuY2VvZiBmdClmb3IodmFyIGE9bmV3IFJlKGUpO2EuaGFzTmV4dCgpOyl7dmFyIHU9YS5uZXh0KCk7dSE9PWUmJnRoaXMuY29tcHV0ZUxvY2F0aW9uKHQsdSl9fSxsb2NhdGU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5pc0VtcHR5KCk/TC5FWFRFUklPUjplIGluc3RhbmNlb2YgU3Q/dGhpcy5sb2NhdGVJbnRlcm5hbCh0LGUpOmUgaW5zdGFuY2VvZiBUdD90aGlzLmxvY2F0ZUludGVybmFsKHQsZSk6KHRoaXMuaXNJbj0hMSx0aGlzLm51bUJvdW5kYXJpZXM9MCx0aGlzLmNvbXB1dGVMb2NhdGlvbih0LGUpLHRoaXMuYm91bmRhcnlSdWxlLmlzSW5Cb3VuZGFyeSh0aGlzLm51bUJvdW5kYXJpZXMpP0wuQk9VTkRBUlk6dGhpcy5udW1Cb3VuZGFyaWVzPjB8fHRoaXMuaXNJbj9MLklOVEVSSU9SOkwuRVhURVJJT1IpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBUZX19KSxlKFBlLnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gUGV9fSksUGUub2N0YW50PWZ1bmN0aW9uKCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSYmXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO2lmKDA9PT10JiYwPT09ZSl0aHJvdyBuZXcgaShcIkNhbm5vdCBjb21wdXRlIHRoZSBvY3RhbnQgZm9yIHBvaW50ICggXCIrdCtcIiwgXCIrZStcIiApXCIpO3ZhciBuPU1hdGguYWJzKHQpLHI9TWF0aC5hYnMoZSk7cmV0dXJuIHQ+PTA/ZT49MD9uPj1yPzA6MTpuPj1yPzc6NjplPj0wP24+PXI/MzoyOm4+PXI/NDo1fWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBnKXt2YXIgcz1hcmd1bWVudHNbMF0sbz1hcmd1bWVudHNbMV0sYT1vLngtcy54LHU9by55LXMueTtpZigwPT09YSYmMD09PXUpdGhyb3cgbmV3IGkoXCJDYW5ub3QgY29tcHV0ZSB0aGUgb2N0YW50IGZvciB0d28gaWRlbnRpY2FsIHBvaW50cyBcIitzKTtyZXR1cm4gUGUub2N0YW50KGEsdSl9fSxlKGJlLnByb3RvdHlwZSx7Z2V0Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXt9LHNpemU6ZnVuY3Rpb24oKXt9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24odCl7fSxpc0Nsb3NlZDpmdW5jdGlvbigpe30sc2V0RGF0YTpmdW5jdGlvbih0KXt9LGdldERhdGE6ZnVuY3Rpb24oKXt9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGJlfX0pLGUoT2UucHJvdG90eXBlLHtnZXRDb29yZGluYXRlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0c30sc2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0cy5sZW5ndGh9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucHRzW3RdfSxpc0Nsb3NlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0c1swXS5lcXVhbHModGhpcy5wdHNbdGhpcy5wdHMubGVuZ3RoLTFdKX0sZ2V0U2VnbWVudE9jdGFudDpmdW5jdGlvbih0KXtyZXR1cm4gdD09PXRoaXMucHRzLmxlbmd0aC0xPy0xOlBlLm9jdGFudCh0aGlzLmdldENvb3JkaW5hdGUodCksdGhpcy5nZXRDb29yZGluYXRlKHQrMSkpfSxzZXREYXRhOmZ1bmN0aW9uKHQpe3RoaXMuZGF0YT10fSxnZXREYXRhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gc2UudG9MaW5lU3RyaW5nKG5ldyBHdCh0aGlzLnB0cykpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltiZV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE9lfX0pLGUoX2UucHJvdG90eXBlLHtnZXRCb3VuZHM6ZnVuY3Rpb24oKXt9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIF9lfX0pLGUoTWUucHJvdG90eXBlLHtnZXRJdGVtOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXRlbX0sZ2V0Qm91bmRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYm91bmRzfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltfZSx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTWV9fSksZShEZS5wcm90b3R5cGUse3BvbGw6ZnVuY3Rpb24oKXtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4gbnVsbDt2YXIgdD10aGlzLml0ZW1zLmdldCgxKTtyZXR1cm4gdGhpcy5pdGVtcy5zZXQoMSx0aGlzLml0ZW1zLmdldCh0aGlzLl9zaXplKSksdGhpcy5fc2l6ZS09MSx0aGlzLnJlb3JkZXIoMSksdH0sc2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zaXplfSxyZW9yZGVyOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1udWxsLG49dGhpcy5pdGVtcy5nZXQodCk7Mip0PD10aGlzLl9zaXplJiYoZT0yKnQsZSE9PXRoaXMuX3NpemUmJnRoaXMuaXRlbXMuZ2V0KGUrMSkuY29tcGFyZVRvKHRoaXMuaXRlbXMuZ2V0KGUpKTwwJiZlKyssdGhpcy5pdGVtcy5nZXQoZSkuY29tcGFyZVRvKG4pPDApO3Q9ZSl0aGlzLml0ZW1zLnNldCh0LHRoaXMuaXRlbXMuZ2V0KGUpKTt0aGlzLml0ZW1zLnNldCh0LG4pfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuX3NpemU9MCx0aGlzLml0ZW1zLmNsZWFyKCl9LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX3NpemV9LGFkZDpmdW5jdGlvbih0KXt0aGlzLml0ZW1zLmFkZChudWxsKSx0aGlzLl9zaXplKz0xO3ZhciBlPXRoaXMuX3NpemU7Zm9yKHRoaXMuaXRlbXMuc2V0KDAsdCk7dC5jb21wYXJlVG8odGhpcy5pdGVtcy5nZXQoTWF0aC50cnVuYyhlLzIpKSk8MDtlLz0yKXRoaXMuaXRlbXMuc2V0KGUsdGhpcy5pdGVtcy5nZXQoTWF0aC50cnVuYyhlLzIpKSk7dGhpcy5pdGVtcy5zZXQoZSx0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gRGV9fSksZShBZS5wcm90b3R5cGUse3Zpc2l0SXRlbTpmdW5jdGlvbih0KXt9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEFlfX0pLGUoRmUucHJvdG90eXBlLHtpbnNlcnQ6ZnVuY3Rpb24odCxlKXt9LHJlbW92ZTpmdW5jdGlvbih0LGUpe30scXVlcnk6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7YXJndW1lbnRzWzBdfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2FyZ3VtZW50c1swXSxhcmd1bWVudHNbMV19fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBGZX19KSxlKEdlLnByb3RvdHlwZSx7Z2V0TGV2ZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZXZlbH0sc2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoaWxkQm91bmRhYmxlcy5zaXplKCl9LGdldENoaWxkQm91bmRhYmxlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoaWxkQm91bmRhYmxlc30sYWRkQ2hpbGRCb3VuZGFibGU6ZnVuY3Rpb24odCl7Zi5pc1RydWUobnVsbD09PXRoaXMuYm91bmRzKSx0aGlzLmNoaWxkQm91bmRhYmxlcy5hZGQodCl9LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGlsZEJvdW5kYWJsZXMuaXNFbXB0eSgpfSxnZXRCb3VuZHM6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuYm91bmRzJiYodGhpcy5ib3VuZHM9dGhpcy5jb21wdXRlQm91bmRzKCkpLHRoaXMuYm91bmRzfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltfZSx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gR2V9fSksR2Uuc2VyaWFsVmVyc2lvblVJRD0weDVhMWU1NWVjNDEzNjk4MDA7dmFyIGhvPXtyZXZlcnNlT3JkZXI6ZnVuY3Rpb24oKXtyZXR1cm57Y29tcGFyZTpmdW5jdGlvbih0LGUpe3JldHVybiBlLmNvbXBhcmVUbyh0KX19fSxtaW46ZnVuY3Rpb24odCl7cmV0dXJuIGhvLnNvcnQodCksdC5nZXQoMCl9LHNvcnQ6ZnVuY3Rpb24odCxlKXt2YXIgbj10LnRvQXJyYXkoKTtlP3V0LnNvcnQobixlKTp1dC5zb3J0KG4pO2Zvcih2YXIgaT10Lml0ZXJhdG9yKCkscj0wLHM9bi5sZW5ndGg7cjxzO3IrKylpLm5leHQoKSxpLnNldChuW3JdKX0sc2luZ2xldG9uTGlzdDpmdW5jdGlvbih0KXt2YXIgZT1uZXcgSTtyZXR1cm4gZS5hZGQodCksZX19O2UocWUucHJvdG90eXBlLHtleHBhbmRUb1F1ZXVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49cWUuaXNDb21wb3NpdGUodGhpcy5ib3VuZGFibGUxKSxyPXFlLmlzQ29tcG9zaXRlKHRoaXMuYm91bmRhYmxlMik7aWYobiYmcilyZXR1cm4gcWUuYXJlYSh0aGlzLmJvdW5kYWJsZTEpPnFlLmFyZWEodGhpcy5ib3VuZGFibGUyKT8odGhpcy5leHBhbmQodGhpcy5ib3VuZGFibGUxLHRoaXMuYm91bmRhYmxlMix0LGUpLG51bGwpOih0aGlzLmV4cGFuZCh0aGlzLmJvdW5kYWJsZTIsdGhpcy5ib3VuZGFibGUxLHQsZSksbnVsbCk7aWYobilyZXR1cm4gdGhpcy5leHBhbmQodGhpcy5ib3VuZGFibGUxLHRoaXMuYm91bmRhYmxlMix0LGUpLG51bGw7aWYocilyZXR1cm4gdGhpcy5leHBhbmQodGhpcy5ib3VuZGFibGUyLHRoaXMuYm91bmRhYmxlMSx0LGUpLG51bGw7dGhyb3cgbmV3IGkoXCJuZWl0aGVyIGJvdW5kYWJsZSBpcyBjb21wb3NpdGVcIil9LGlzTGVhdmVzOmZ1bmN0aW9uKCl7cmV0dXJuIShxZS5pc0NvbXBvc2l0ZSh0aGlzLmJvdW5kYWJsZTEpfHxxZS5pc0NvbXBvc2l0ZSh0aGlzLmJvdW5kYWJsZTIpKX0sY29tcGFyZVRvOmZ1bmN0aW9uKHQpe3ZhciBlPXQ7cmV0dXJuIHRoaXMuX2Rpc3RhbmNlPGUuX2Rpc3RhbmNlPy0xOnRoaXMuX2Rpc3RhbmNlPmUuX2Rpc3RhbmNlPzE6MH0sZXhwYW5kOmZ1bmN0aW9uKHQsZSxuLGkpe2Zvcih2YXIgcj10LmdldENoaWxkQm91bmRhYmxlcygpLHM9ci5pdGVyYXRvcigpO3MuaGFzTmV4dCgpOyl7dmFyIG89cy5uZXh0KCksYT1uZXcgcWUobyxlLHRoaXMuaXRlbURpc3RhbmNlKTthLmdldERpc3RhbmNlKCk8aSYmbi5hZGQoYSl9fSxnZXRCb3VuZGFibGU6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10P3RoaXMuYm91bmRhYmxlMTp0aGlzLmJvdW5kYWJsZTJ9LGdldERpc3RhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Rpc3RhbmNlfSxkaXN0YW5jZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzTGVhdmVzKCk/dGhpcy5pdGVtRGlzdGFuY2UuZGlzdGFuY2UodGhpcy5ib3VuZGFibGUxLHRoaXMuYm91bmRhYmxlMik6dGhpcy5ib3VuZGFibGUxLmdldEJvdW5kcygpLmRpc3RhbmNlKHRoaXMuYm91bmRhYmxlMi5nZXRCb3VuZHMoKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3NdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBxZX19KSxxZS5hcmVhPWZ1bmN0aW9uKHQpe3JldHVybiB0LmdldEJvdW5kcygpLmdldEFyZWEoKX0scWUuaXNDb21wb3NpdGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBHZX0sZShCZS5wcm90b3R5cGUse2dldE5vZGVDYXBhY2l0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVDYXBhY2l0eX0sbGFzdE5vZGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0KHQuc2l6ZSgpLTEpfSxzaXplOmZ1bmN0aW9uIHQoKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5pc0VtcHR5KCk/MDoodGhpcy5idWlsZCgpLHRoaXMuc2l6ZSh0aGlzLnJvb3QpKTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBlPWFyZ3VtZW50c1swXSx0PTAsbj1lLmdldENoaWxkQm91bmRhYmxlcygpLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpIGluc3RhbmNlb2YgR2U/dCs9dGhpcy5zaXplKGkpOmkgaW5zdGFuY2VvZiBNZSYmKHQrPTEpfXJldHVybiB0fX0scmVtb3ZlSXRlbTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1udWxsLGk9dC5nZXRDaGlsZEJvdW5kYWJsZXMoKS5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7ciBpbnN0YW5jZW9mIE1lJiZyLmdldEl0ZW0oKT09PWUmJihuPXIpfXJldHVybiBudWxsIT09biYmKHQuZ2V0Q2hpbGRCb3VuZGFibGVzKCkucmVtb3ZlKG4pLCEwKX0saXRlbXNUcmVlOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe3RoaXMuYnVpbGQoKTt2YXIgdD10aGlzLml0ZW1zVHJlZSh0aGlzLnJvb3QpO3JldHVybiBudWxsPT09dD9uZXcgSTp0fWlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIGU9YXJndW1lbnRzWzBdLG49bmV3IEksaT1lLmdldENoaWxkQm91bmRhYmxlcygpLml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtpZihyIGluc3RhbmNlb2YgR2Upe3ZhciBzPXRoaXMuaXRlbXNUcmVlKHIpO251bGwhPT1zJiZuLmFkZChzKX1lbHNlIHIgaW5zdGFuY2VvZiBNZT9uLmFkZChyLmdldEl0ZW0oKSk6Zi5zaG91bGROZXZlclJlYWNoSGVyZSgpfXJldHVybiBuLnNpemUoKTw9MD9udWxsOm59fSxpbnNlcnQ6ZnVuY3Rpb24odCxlKXtmLmlzVHJ1ZSghdGhpcy5idWlsdCxcIkNhbm5vdCBpbnNlcnQgaXRlbXMgaW50byBhbiBTVFIgcGFja2VkIFItdHJlZSBhZnRlciBpdCBoYXMgYmVlbiBidWlsdC5cIiksdGhpcy5pdGVtQm91bmRhYmxlcy5hZGQobmV3IE1lKHQsZSkpfSxib3VuZGFibGVzQXRMZXZlbDpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgSTtyZXR1cm4gdGhpcy5ib3VuZGFibGVzQXRMZXZlbCh0LHRoaXMucm9vdCxlKSxlfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl07aWYoZi5pc1RydWUobj4tMiksaS5nZXRMZXZlbCgpPT09bilyZXR1cm4gci5hZGQoaSksbnVsbDtmb3IodmFyIHM9aS5nZXRDaGlsZEJvdW5kYWJsZXMoKS5pdGVyYXRvcigpO3MuaGFzTmV4dCgpOyl7dmFyIG89cy5uZXh0KCk7byBpbnN0YW5jZW9mIEdlP3RoaXMuYm91bmRhYmxlc0F0TGV2ZWwobixvLHIpOihmLmlzVHJ1ZShvIGluc3RhbmNlb2YgTWUpLG49PT0tMSYmci5hZGQobykpfXJldHVybiBudWxsfX0scXVlcnk6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuYnVpbGQoKTt2YXIgZT1uZXcgSTtyZXR1cm4gdGhpcy5pc0VtcHR5KCk/ZToodGhpcy5nZXRJbnRlcnNlY3RzT3AoKS5pbnRlcnNlY3RzKHRoaXMucm9vdC5nZXRCb3VuZHMoKSx0KSYmdGhpcy5xdWVyeSh0LHRoaXMucm9vdCxlKSxlKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO2lmKHRoaXMuYnVpbGQoKSx0aGlzLmlzRW1wdHkoKSlyZXR1cm4gbnVsbDt0aGlzLmdldEludGVyc2VjdHNPcCgpLmludGVyc2VjdHModGhpcy5yb290LmdldEJvdW5kcygpLG4pJiZ0aGlzLnF1ZXJ5KG4sdGhpcy5yb290LGkpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpaWYoUihhcmd1bWVudHNbMl0sQWUpJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE9iamVjdCYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBHZSlmb3IodmFyIHI9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLG89YXJndW1lbnRzWzJdLGE9cy5nZXRDaGlsZEJvdW5kYWJsZXMoKSx1PTA7dTxhLnNpemUoKTt1Kyspe3ZhciBsPWEuZ2V0KHUpO3RoaXMuZ2V0SW50ZXJzZWN0c09wKCkuaW50ZXJzZWN0cyhsLmdldEJvdW5kcygpLHIpJiYobCBpbnN0YW5jZW9mIEdlP3RoaXMucXVlcnkocixsLG8pOmwgaW5zdGFuY2VvZiBNZT9vLnZpc2l0SXRlbShsLmdldEl0ZW0oKSk6Zi5zaG91bGROZXZlclJlYWNoSGVyZSgpKX1lbHNlIGlmKFIoYXJndW1lbnRzWzJdLHkpJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE9iamVjdCYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBHZSlmb3IodmFyIGg9YXJndW1lbnRzWzBdLGM9YXJndW1lbnRzWzFdLGc9YXJndW1lbnRzWzJdLGE9Yy5nZXRDaGlsZEJvdW5kYWJsZXMoKSx1PTA7dTxhLnNpemUoKTt1Kyspe3ZhciBsPWEuZ2V0KHUpO3RoaXMuZ2V0SW50ZXJzZWN0c09wKCkuaW50ZXJzZWN0cyhsLmdldEJvdW5kcygpLGgpJiYobCBpbnN0YW5jZW9mIEdlP3RoaXMucXVlcnkoaCxsLGcpOmwgaW5zdGFuY2VvZiBNZT9nLmFkZChsLmdldEl0ZW0oKSk6Zi5zaG91bGROZXZlclJlYWNoSGVyZSgpKX19LGJ1aWxkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnVpbHQ/bnVsbDoodGhpcy5yb290PXRoaXMuaXRlbUJvdW5kYWJsZXMuaXNFbXB0eSgpP3RoaXMuY3JlYXRlTm9kZSgwKTp0aGlzLmNyZWF0ZUhpZ2hlckxldmVscyh0aGlzLml0ZW1Cb3VuZGFibGVzLC0xKSx0aGlzLml0ZW1Cb3VuZGFibGVzPW51bGwsdm9pZCh0aGlzLmJ1aWx0PSEwKSl9LGdldFJvb3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5idWlsZCgpLHRoaXMucm9vdH0scmVtb3ZlOmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5idWlsZCgpLCEhdGhpcy5nZXRJbnRlcnNlY3RzT3AoKS5pbnRlcnNlY3RzKHRoaXMucm9vdC5nZXRCb3VuZHMoKSx0KSYmdGhpcy5yZW1vdmUodCx0aGlzLnJvb3QsZSl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXSxzPXRoaXMucmVtb3ZlSXRlbShpLHIpO2lmKHMpcmV0dXJuITA7Zm9yKHZhciBvPW51bGwsYT1pLmdldENoaWxkQm91bmRhYmxlcygpLml0ZXJhdG9yKCk7YS5oYXNOZXh0KCk7KXt2YXIgdT1hLm5leHQoKTtpZih0aGlzLmdldEludGVyc2VjdHNPcCgpLmludGVyc2VjdHModS5nZXRCb3VuZHMoKSxuKSYmdSBpbnN0YW5jZW9mIEdlJiYocz10aGlzLnJlbW92ZShuLHUscikpKXtvPXU7YnJlYWt9fXJldHVybiBudWxsIT09byYmby5nZXRDaGlsZEJvdW5kYWJsZXMoKS5pc0VtcHR5KCkmJmkuZ2V0Q2hpbGRCb3VuZGFibGVzKCkucmVtb3ZlKG8pLHN9fSxjcmVhdGVIaWdoZXJMZXZlbHM6ZnVuY3Rpb24odCxlKXtmLmlzVHJ1ZSghdC5pc0VtcHR5KCkpO3ZhciBuPXRoaXMuY3JlYXRlUGFyZW50Qm91bmRhYmxlcyh0LGUrMSk7cmV0dXJuIDE9PT1uLnNpemUoKT9uLmdldCgwKTp0aGlzLmNyZWF0ZUhpZ2hlckxldmVscyhuLGUrMSl9LGRlcHRoOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuaXNFbXB0eSgpPzA6KHRoaXMuYnVpbGQoKSx0aGlzLmRlcHRoKHRoaXMucm9vdCkpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9MCxuPXQuZ2V0Q2hpbGRCb3VuZGFibGVzKCkuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2lmKGkgaW5zdGFuY2VvZiBHZSl7dmFyIHI9dGhpcy5kZXB0aChpKTtyPmUmJihlPXIpfX1yZXR1cm4gZSsxfX0sY3JlYXRlUGFyZW50Qm91bmRhYmxlczpmdW5jdGlvbih0LGUpe2YuaXNUcnVlKCF0LmlzRW1wdHkoKSk7dmFyIG49bmV3IEk7bi5hZGQodGhpcy5jcmVhdGVOb2RlKGUpKTt2YXIgaT1uZXcgSSh0KTtoby5zb3J0KGksdGhpcy5nZXRDb21wYXJhdG9yKCkpO2Zvcih2YXIgcj1pLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKTt0aGlzLmxhc3ROb2RlKG4pLmdldENoaWxkQm91bmRhYmxlcygpLnNpemUoKT09PXRoaXMuZ2V0Tm9kZUNhcGFjaXR5KCkmJm4uYWRkKHRoaXMuY3JlYXRlTm9kZShlKSksdGhpcy5sYXN0Tm9kZShuKS5hZGRDaGlsZEJvdW5kYWJsZShzKX1yZXR1cm4gbn0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJ1aWx0P3RoaXMucm9vdC5pc0VtcHR5KCk6dGhpcy5pdGVtQm91bmRhYmxlcy5pc0VtcHR5KCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3VdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBCZX19KSxCZS5jb21wYXJlRG91Ymxlcz1mdW5jdGlvbih0LGUpe3JldHVybiB0PmU/MTp0PGU/LTE6MH0sQmUuSW50ZXJzZWN0c09wPXplLEJlLnNlcmlhbFZlcnNpb25VSUQ9LTB4MzVlZjY0YzgyZDRjNTQwMCxCZS5ERUZBVUxUX05PREVfQ0FQQUNJVFk9MTAsZShWZS5wcm90b3R5cGUse2Rpc3RhbmNlOmZ1bmN0aW9uKHQsZSl7fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBWZX19KSxoKGtlLEJlKSxlKGtlLnByb3RvdHlwZSx7Y3JlYXRlUGFyZW50Qm91bmRhYmxlc0Zyb21WZXJ0aWNhbFNsaWNlczpmdW5jdGlvbih0LGUpe2YuaXNUcnVlKHQubGVuZ3RoPjApO2Zvcih2YXIgbj1uZXcgSSxpPTA7aTx0Lmxlbmd0aDtpKyspbi5hZGRBbGwodGhpcy5jcmVhdGVQYXJlbnRCb3VuZGFibGVzRnJvbVZlcnRpY2FsU2xpY2UodFtpXSxlKSk7cmV0dXJuIG59LGNyZWF0ZU5vZGU6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBZZSh0KX0sc2l6ZTpmdW5jdGlvbigpe3JldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aD9CZS5wcm90b3R5cGUuc2l6ZS5jYWxsKHRoaXMpOkJlLnByb3RvdHlwZS5zaXplLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0saW5zZXJ0OmZ1bmN0aW9uKCl7aWYoMiE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIEJlLnByb3RvdHlwZS5pbnNlcnQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtyZXR1cm4gdC5pc051bGwoKT9udWxsOnZvaWQgQmUucHJvdG90eXBlLmluc2VydC5jYWxsKHRoaXMsdCxlKX0sZ2V0SW50ZXJzZWN0c09wOmZ1bmN0aW9uKCl7cmV0dXJuIGtlLmludGVyc2VjdHNPcH0sdmVydGljYWxTbGljZXM6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49TWF0aC50cnVuYyhNYXRoLmNlaWwodC5zaXplKCkvZSkpLGk9bmV3IEFycmF5KGUpLmZpbGwobnVsbCkscj10Lml0ZXJhdG9yKCkscz0wO3M8ZTtzKyspe2lbc109bmV3IEk7Zm9yKHZhciBvPTA7ci5oYXNOZXh0KCkmJm88bjspe3ZhciBhPXIubmV4dCgpO2lbc10uYWRkKGEpLG8rK319cmV0dXJuIGl9LHF1ZXJ5OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gQmUucHJvdG90eXBlLnF1ZXJ5LmNhbGwodGhpcyx0KX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO0JlLnByb3RvdHlwZS5xdWVyeS5jYWxsKHRoaXMsZSxuKX1lbHNlIGlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKWlmKFIoYXJndW1lbnRzWzJdLEFlKSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBPYmplY3QmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgR2Upe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXTtCZS5wcm90b3R5cGUucXVlcnkuY2FsbCh0aGlzLGkscixzKX1lbHNlIGlmKFIoYXJndW1lbnRzWzJdLHkpJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE9iamVjdCYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBHZSl7dmFyIG89YXJndW1lbnRzWzBdLGE9YXJndW1lbnRzWzFdLHU9YXJndW1lbnRzWzJdO0JlLnByb3RvdHlwZS5xdWVyeS5jYWxsKHRoaXMsbyxhLHUpfX0sZ2V0Q29tcGFyYXRvcjpmdW5jdGlvbigpe3JldHVybiBrZS55Q29tcGFyYXRvcn0sY3JlYXRlUGFyZW50Qm91bmRhYmxlc0Zyb21WZXJ0aWNhbFNsaWNlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIEJlLnByb3RvdHlwZS5jcmVhdGVQYXJlbnRCb3VuZGFibGVzLmNhbGwodGhpcyx0LGUpfSxyZW1vdmU6ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3JldHVybiBCZS5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcyx0LGUpfXJldHVybiBCZS5wcm90b3R5cGUucmVtb3ZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZGVwdGg6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/QmUucHJvdG90eXBlLmRlcHRoLmNhbGwodGhpcyk6QmUucHJvdG90eXBlLmRlcHRoLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sY3JlYXRlUGFyZW50Qm91bmRhYmxlczpmdW5jdGlvbih0LGUpe2YuaXNUcnVlKCF0LmlzRW1wdHkoKSk7dmFyIG49TWF0aC50cnVuYyhNYXRoLmNlaWwodC5zaXplKCkvdGhpcy5nZXROb2RlQ2FwYWNpdHkoKSkpLGk9bmV3IEkodCk7aG8uc29ydChpLGtlLnhDb21wYXJhdG9yKTt2YXIgcj10aGlzLnZlcnRpY2FsU2xpY2VzKGksTWF0aC50cnVuYyhNYXRoLmNlaWwoTWF0aC5zcXJ0KG4pKSkpO3JldHVybiB0aGlzLmNyZWF0ZVBhcmVudEJvdW5kYWJsZXNGcm9tVmVydGljYWxTbGljZXMocixlKX0sbmVhcmVzdE5laWdoYm91cjpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihSKGFyZ3VtZW50c1swXSxWZSkpe3ZhciB0PWFyZ3VtZW50c1swXSxlPW5ldyBxZSh0aGlzLmdldFJvb3QoKSx0aGlzLmdldFJvb3QoKSx0KTtyZXR1cm4gdGhpcy5uZWFyZXN0TmVpZ2hib3VyKGUpfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgcWUpe3ZhciBuPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5uZWFyZXN0TmVpZ2hib3VyKG4sci5QT1NJVElWRV9JTkZJTklUWSl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2Yga2UmJlIoYXJndW1lbnRzWzFdLFZlKSl7dmFyIGk9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGU9bmV3IHFlKHRoaXMuZ2V0Um9vdCgpLGkuZ2V0Um9vdCgpLHMpO3JldHVybiB0aGlzLm5lYXJlc3ROZWlnaGJvdXIoZSl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBxZSYmXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIG89YXJndW1lbnRzWzBdLGE9YXJndW1lbnRzWzFdLHU9YSxsPW51bGwsaD1uZXcgRGU7Zm9yKGguYWRkKG8pOyFoLmlzRW1wdHkoKSYmdT4wOyl7dmFyIGM9aC5wb2xsKCksZj1jLmdldERpc3RhbmNlKCk7aWYoZj49dSlicmVhaztjLmlzTGVhdmVzKCk/KHU9ZixsPWMpOmMuZXhwYW5kVG9RdWV1ZShoLHUpfXJldHVybltsLmdldEJvdW5kYWJsZSgwKS5nZXRJdGVtKCksbC5nZXRCb3VuZGFibGUoMSkuZ2V0SXRlbSgpXX19ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGc9YXJndW1lbnRzWzBdLGQ9YXJndW1lbnRzWzFdLHA9YXJndW1lbnRzWzJdLHY9bmV3IE1lKGcsZCksZT1uZXcgcWUodGhpcy5nZXRSb290KCksdixwKTtyZXR1cm4gdGhpcy5uZWFyZXN0TmVpZ2hib3VyKGUpWzBdfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bRmUsdV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGtlfX0pLGtlLmNlbnRyZVg9ZnVuY3Rpb24odCl7cmV0dXJuIGtlLmF2Zyh0LmdldE1pblgoKSx0LmdldE1heFgoKSl9LGtlLmF2Zz1mdW5jdGlvbih0LGUpe3JldHVybih0K2UpLzJ9LGtlLmNlbnRyZVk9ZnVuY3Rpb24odCl7cmV0dXJuIGtlLmF2Zyh0LmdldE1pblkoKSx0LmdldE1heFkoKSl9LGgoWWUsR2UpLGUoWWUucHJvdG90eXBlLHtjb21wdXRlQm91bmRzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW51bGwsZT10aGlzLmdldENoaWxkQm91bmRhYmxlcygpLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtudWxsPT09dD90PW5ldyBDKG4uZ2V0Qm91bmRzKCkpOnQuZXhwYW5kVG9JbmNsdWRlKG4uZ2V0Qm91bmRzKCkpfXJldHVybiB0fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBZZX19KSxrZS5TVFJ0cmVlTm9kZT1ZZSxrZS5zZXJpYWxWZXJzaW9uVUlEPTB4Mzk5MjBmN2Q1ZjI2MWUwLGtlLnhDb21wYXJhdG9yPXtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblthXX0sY29tcGFyZTpmdW5jdGlvbih0LGUpe3JldHVybiBCZS5jb21wYXJlRG91YmxlcyhrZS5jZW50cmVYKHQuZ2V0Qm91bmRzKCkpLGtlLmNlbnRyZVgoZS5nZXRCb3VuZHMoKSkpfX0sa2UueUNvbXBhcmF0b3I9e2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2FdfSxjb21wYXJlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIEJlLmNvbXBhcmVEb3VibGVzKGtlLmNlbnRyZVkodC5nZXRCb3VuZHMoKSksa2UuY2VudHJlWShlLmdldEJvdW5kcygpKSl9fSxrZS5pbnRlcnNlY3RzT3A9e2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW0ludGVyc2VjdHNPcF19LGludGVyc2VjdHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5pbnRlcnNlY3RzKGUpfX0sa2UuREVGQVVMVF9OT0RFX0NBUEFDSVRZPTEwLGUoVWUucHJvdG90eXBlLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBVZX19KSxVZS5yZWxhdGl2ZVNpZ249ZnVuY3Rpb24odCxlKXtyZXR1cm4gdDxlPy0xOnQ+ZT8xOjB9LFVlLmNvbXBhcmU9ZnVuY3Rpb24odCxlLG4pe2lmKGUuZXF1YWxzMkQobikpcmV0dXJuIDA7dmFyIGk9VWUucmVsYXRpdmVTaWduKGUueCxuLngpLHI9VWUucmVsYXRpdmVTaWduKGUueSxuLnkpO3N3aXRjaCh0KXtjYXNlIDA6cmV0dXJuIFVlLmNvbXBhcmVWYWx1ZShpLHIpO2Nhc2UgMTpyZXR1cm4gVWUuY29tcGFyZVZhbHVlKHIsaSk7Y2FzZSAyOnJldHVybiBVZS5jb21wYXJlVmFsdWUociwtaSk7Y2FzZSAzOnJldHVybiBVZS5jb21wYXJlVmFsdWUoLWkscik7Y2FzZSA0OnJldHVybiBVZS5jb21wYXJlVmFsdWUoLWksLXIpO2Nhc2UgNTpyZXR1cm4gVWUuY29tcGFyZVZhbHVlKC1yLC1pKTtjYXNlIDY6cmV0dXJuIFVlLmNvbXBhcmVWYWx1ZSgtcixpKTtjYXNlIDc6cmV0dXJuIFVlLmNvbXBhcmVWYWx1ZShpLC1yKX1yZXR1cm4gZi5zaG91bGROZXZlclJlYWNoSGVyZShcImludmFsaWQgb2N0YW50IHZhbHVlXCIpLDB9LFVlLmNvbXBhcmVWYWx1ZT1mdW5jdGlvbih0LGUpe3JldHVybiB0PDA/LTE6dD4wPzE6ZTwwPy0xOmU+MD8xOjB9LGUoWGUucHJvdG90eXBlLHtnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmR9LHByaW50OmZ1bmN0aW9uKHQpe3QucHJpbnQodGhpcy5jb29yZCksdC5wcmludChcIiBzZWcgIyA9IFwiK3RoaXMuc2VnbWVudEluZGV4KX0sY29tcGFyZVRvOmZ1bmN0aW9uKHQpe3ZhciBlPXQ7cmV0dXJuIHRoaXMuc2VnbWVudEluZGV4PGUuc2VnbWVudEluZGV4Py0xOnRoaXMuc2VnbWVudEluZGV4PmUuc2VnbWVudEluZGV4PzE6dGhpcy5jb29yZC5lcXVhbHMyRChlLmNvb3JkKT8wOlVlLmNvbXBhcmUodGhpcy5zZWdtZW50T2N0YW50LHRoaXMuY29vcmQsZS5jb29yZCl9LGlzRW5kUG9pbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10aGlzLnNlZ21lbnRJbmRleCYmIXRoaXMuX2lzSW50ZXJpb3J8fHRoaXMuc2VnbWVudEluZGV4PT09dH0saXNJbnRlcmlvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc0ludGVyaW9yfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltzXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gWGV9fSksZShIZS5wcm90b3R5cGUse2dldFNwbGl0Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgTjt0aGlzLmFkZEVuZHBvaW50cygpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCksbj1lLm5leHQoKTtlLmhhc05leHQoKTspe3ZhciBpPWUubmV4dCgpO3RoaXMuYWRkRWRnZUNvb3JkaW5hdGVzKG4saSx0KSxuPWl9cmV0dXJuIHQudG9Db29yZGluYXRlQXJyYXkoKX0sYWRkQ29sbGFwc2VkTm9kZXM6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgSTt0aGlzLmZpbmRDb2xsYXBzZXNGcm9tSW5zZXJ0ZWROb2Rlcyh0KSx0aGlzLmZpbmRDb2xsYXBzZXNGcm9tRXhpc3RpbmdWZXJ0aWNlcyh0KTtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCkuaW50VmFsdWUoKTt0aGlzLmFkZCh0aGlzLmVkZ2UuZ2V0Q29vcmRpbmF0ZShuKSxuKX19LHByaW50OmZ1bmN0aW9uKHQpe3QucHJpbnRsbihcIkludGVyc2VjdGlvbnM6XCIpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLnByaW50KHQpfX0sZmluZENvbGxhcHNlc0Zyb21FeGlzdGluZ1ZlcnRpY2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5lZGdlLnNpemUoKS0yO2UrKyl7dmFyIG49dGhpcy5lZGdlLmdldENvb3JkaW5hdGUoZSksaT0odGhpcy5lZGdlLmdldENvb3JkaW5hdGUoZSsxKSx0aGlzLmVkZ2UuZ2V0Q29vcmRpbmF0ZShlKzIpKTtuLmVxdWFsczJEKGkpJiZ0LmFkZChuZXcgYihlKzEpKX19LGFkZEVkZ2VDb29yZGluYXRlczpmdW5jdGlvbih0LGUsbil7dmFyIGk9ZS5zZWdtZW50SW5kZXgtdC5zZWdtZW50SW5kZXgrMixyPXRoaXMuZWRnZS5nZXRDb29yZGluYXRlKGUuc2VnbWVudEluZGV4KSxzPWUuaXNJbnRlcmlvcigpfHwhZS5jb29yZC5lcXVhbHMyRChyKTtzfHxpLS07bi5hZGQobmV3IGcodC5jb29yZCksITEpO2Zvcih2YXIgbz10LnNlZ21lbnRJbmRleCsxO288PWUuc2VnbWVudEluZGV4O28rKyluLmFkZCh0aGlzLmVkZ2UuZ2V0Q29vcmRpbmF0ZShvKSk7cyYmbi5hZGQobmV3IGcoZS5jb29yZCkpfSxpdGVyYXRvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVNYXAudmFsdWVzKCkuaXRlcmF0b3IoKX0sYWRkU3BsaXRFZGdlczpmdW5jdGlvbih0KXt0aGlzLmFkZEVuZHBvaW50cygpLHRoaXMuYWRkQ29sbGFwc2VkTm9kZXMoKTtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpLG49ZS5uZXh0KCk7ZS5oYXNOZXh0KCk7KXt2YXIgaT1lLm5leHQoKSxyPXRoaXMuY3JlYXRlU3BsaXRFZGdlKG4saSk7dC5hZGQociksbj1pfX0sZmluZENvbGxhcHNlSW5kZXg6ZnVuY3Rpb24odCxlLG4pe2lmKCF0LmNvb3JkLmVxdWFsczJEKGUuY29vcmQpKXJldHVybiExO3ZhciBpPWUuc2VnbWVudEluZGV4LXQuc2VnbWVudEluZGV4O3JldHVybiBlLmlzSW50ZXJpb3IoKXx8aS0tLDE9PT1pJiYoblswXT10LnNlZ21lbnRJbmRleCsxLCEwKX0sZmluZENvbGxhcHNlc0Zyb21JbnNlcnRlZE5vZGVzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgQXJyYXkoMSkuZmlsbChudWxsKSxuPXRoaXMuaXRlcmF0b3IoKSxpPW4ubmV4dCgpO24uaGFzTmV4dCgpOyl7dmFyIHI9bi5uZXh0KCkscz10aGlzLmZpbmRDb2xsYXBzZUluZGV4KGkscixlKTtzJiZ0LmFkZChuZXcgYihlWzBdKSksaT1yfX0sZ2V0RWRnZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVkZ2V9LGFkZEVuZHBvaW50czpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZWRnZS5zaXplKCktMTt0aGlzLmFkZCh0aGlzLmVkZ2UuZ2V0Q29vcmRpbmF0ZSgwKSwwKSx0aGlzLmFkZCh0aGlzLmVkZ2UuZ2V0Q29vcmRpbmF0ZSh0KSx0KX0sY3JlYXRlU3BsaXRFZGdlOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5zZWdtZW50SW5kZXgtdC5zZWdtZW50SW5kZXgrMixpPXRoaXMuZWRnZS5nZXRDb29yZGluYXRlKGUuc2VnbWVudEluZGV4KSxyPWUuaXNJbnRlcmlvcigpfHwhZS5jb29yZC5lcXVhbHMyRChpKTtyfHxuLS07dmFyIHM9bmV3IEFycmF5KG4pLmZpbGwobnVsbCksbz0wO3NbbysrXT1uZXcgZyh0LmNvb3JkKTtmb3IodmFyIGE9dC5zZWdtZW50SW5kZXgrMTthPD1lLnNlZ21lbnRJbmRleDthKyspc1tvKytdPXRoaXMuZWRnZS5nZXRDb29yZGluYXRlKGEpO3JldHVybiByJiYoc1tvXT1uZXcgZyhlLmNvb3JkKSksbmV3IEtlKHMsdGhpcy5lZGdlLmdldERhdGEoKSl9LGFkZDpmdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBYZSh0aGlzLmVkZ2UsdCxlLHRoaXMuZWRnZS5nZXRTZWdtZW50T2N0YW50KGUpKSxpPXRoaXMubm9kZU1hcC5nZXQobik7cmV0dXJuIG51bGwhPT1pPyhmLmlzVHJ1ZShpLmNvb3JkLmVxdWFsczJEKHQpLFwiRm91bmQgZXF1YWwgbm9kZXMgd2l0aCBkaWZmZXJlbnQgY29vcmRpbmF0ZXNcIiksaSk6KHRoaXMubm9kZU1hcC5wdXQobixuKSxuKX0sY2hlY2tTcGxpdEVkZ2VzQ29ycmVjdG5lc3M6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5lZGdlLmdldENvb3JkaW5hdGVzKCksbj10LmdldCgwKSxpPW4uZ2V0Q29vcmRpbmF0ZSgwKTtpZighaS5lcXVhbHMyRChlWzBdKSl0aHJvdyBuZXcgbChcImJhZCBzcGxpdCBlZGdlIHN0YXJ0IHBvaW50IGF0IFwiK2kpO3ZhciByPXQuZ2V0KHQuc2l6ZSgpLTEpLHM9ci5nZXRDb29yZGluYXRlcygpLG89c1tzLmxlbmd0aC0xXTtpZighby5lcXVhbHMyRChlW2UubGVuZ3RoLTFdKSl0aHJvdyBuZXcgbChcImJhZCBzcGxpdCBlZGdlIGVuZCBwb2ludCBhdCBcIitvKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gSGV9fSksZShXZS5wcm90b3R5cGUse25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuY3Vyck5vZGU/KHRoaXMuY3Vyck5vZGU9dGhpcy5uZXh0Tm9kZSx0aGlzLmN1cnJTZWdJbmRleD10aGlzLmN1cnJOb2RlLnNlZ21lbnRJbmRleCx0aGlzLnJlYWROZXh0Tm9kZSgpLHRoaXMuY3Vyck5vZGUpOm51bGw9PT10aGlzLm5leHROb2RlP251bGw6dGhpcy5uZXh0Tm9kZS5zZWdtZW50SW5kZXg9PT10aGlzLmN1cnJOb2RlLnNlZ21lbnRJbmRleD8odGhpcy5jdXJyTm9kZT10aGlzLm5leHROb2RlLHRoaXMuY3VyclNlZ0luZGV4PXRoaXMuY3Vyck5vZGUuc2VnbWVudEluZGV4LHRoaXMucmVhZE5leHROb2RlKCksdGhpcy5jdXJyTm9kZSk6KHRoaXMubmV4dE5vZGUuc2VnbWVudEluZGV4PnRoaXMuY3Vyck5vZGUuc2VnbWVudEluZGV4LG51bGwpfSxyZW1vdmU6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24odGhpcy5nZXRDbGFzcygpLmdldE5hbWUoKSl9LGhhc05leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMubmV4dE5vZGV9LHJlYWROZXh0Tm9kZTpmdW5jdGlvbigpe3RoaXMubm9kZUl0Lmhhc05leHQoKT90aGlzLm5leHROb2RlPXRoaXMubm9kZUl0Lm5leHQoKTp0aGlzLm5leHROb2RlPW51bGx9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3BdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBXZX19KSxlKGplLnByb3RvdHlwZSx7YWRkSW50ZXJzZWN0aW9uOmZ1bmN0aW9uKHQsZSl7fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltiZV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGplfX0pLGUoS2UucHJvdG90eXBlLHtnZXRDb29yZGluYXRlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0c30sc2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0cy5sZW5ndGh9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucHRzW3RdfSxpc0Nsb3NlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0c1swXS5lcXVhbHModGhpcy5wdHNbdGhpcy5wdHMubGVuZ3RoLTFdKX0sZ2V0U2VnbWVudE9jdGFudDpmdW5jdGlvbih0KXtyZXR1cm4gdD09PXRoaXMucHRzLmxlbmd0aC0xPy0xOnRoaXMuc2FmZU9jdGFudCh0aGlzLmdldENvb3JkaW5hdGUodCksdGhpcy5nZXRDb29yZGluYXRlKHQrMSkpfSxzZXREYXRhOmZ1bmN0aW9uKHQpe3RoaXMuZGF0YT10fSxzYWZlT2N0YW50OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuZXF1YWxzMkQoZSk/MDpQZS5vY3RhbnQodCxlKX0sZ2V0RGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGF9LGFkZEludGVyc2VjdGlvbjpmdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07dGhpcy5hZGRJbnRlcnNlY3Rpb25Ob2RlKHQsZSl9ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9KGFyZ3VtZW50c1syXSxhcmd1bWVudHNbM10pLHM9bmV3IGcobi5nZXRJbnRlcnNlY3Rpb24ocikpO3RoaXMuYWRkSW50ZXJzZWN0aW9uKHMsaSl9fSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiBzZS50b0xpbmVTdHJpbmcobmV3IEd0KHRoaXMucHRzKSl9LGdldE5vZGVMaXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZUxpc3R9LGFkZEludGVyc2VjdGlvbk5vZGU6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLGk9bisxO2lmKGk8dGhpcy5wdHMubGVuZ3RoKXt2YXIgcj10aGlzLnB0c1tpXTt0LmVxdWFsczJEKHIpJiYobj1pKX12YXIgcz10aGlzLm5vZGVMaXN0LmFkZCh0LG4pO3JldHVybiBzfSxhZGRJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9MDtpPHQuZ2V0SW50ZXJzZWN0aW9uTnVtKCk7aSsrKXRoaXMuYWRkSW50ZXJzZWN0aW9uKHQsZSxuLGkpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltqZV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEtlfX0pLEtlLmdldE5vZGVkU3Vic3RyaW5ncz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgSTtyZXR1cm4gS2UuZ2V0Tm9kZWRTdWJzdHJpbmdzKHQsZSksZX1pZigyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLHI9bi5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7dmFyIHM9ci5uZXh0KCk7cy5nZXROb2RlTGlzdCgpLmFkZFNwbGl0RWRnZXMoaSl9fSxlKFplLnByb3RvdHlwZSx7b3ZlcmxhcDpmdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXthcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdfWVsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXSxpPWFyZ3VtZW50c1szXTt0LmdldExpbmVTZWdtZW50KGUsdGhpcy5vdmVybGFwU2VnMSksXG5uLmdldExpbmVTZWdtZW50KGksdGhpcy5vdmVybGFwU2VnMiksdGhpcy5vdmVybGFwKHRoaXMub3ZlcmxhcFNlZzEsdGhpcy5vdmVybGFwU2VnMil9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBaZX19KSxlKFFlLnByb3RvdHlwZSx7Z2V0TGluZVNlZ21lbnQ6ZnVuY3Rpb24odCxlKXtlLnAwPXRoaXMucHRzW3RdLGUucDE9dGhpcy5wdHNbdCsxXX0sY29tcHV0ZVNlbGVjdDpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj10aGlzLnB0c1tlXSxzPXRoaXMucHRzW25dO2lmKGkudGVtcEVudjEuaW5pdChyLHMpLG4tZT09PTEpcmV0dXJuIGkuc2VsZWN0KHRoaXMsZSksbnVsbDtpZighdC5pbnRlcnNlY3RzKGkudGVtcEVudjEpKXJldHVybiBudWxsO3ZhciBvPU1hdGgudHJ1bmMoKGUrbikvMik7ZTxvJiZ0aGlzLmNvbXB1dGVTZWxlY3QodCxlLG8saSksbzxuJiZ0aGlzLmNvbXB1dGVTZWxlY3QodCxvLG4saSl9LGdldENvb3JkaW5hdGVzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLmVuZC10aGlzLnN0YXJ0KzEpLmZpbGwobnVsbCksZT0wLG49dGhpcy5zdGFydDtuPD10aGlzLmVuZDtuKyspdFtlKytdPXRoaXMucHRzW25dO3JldHVybiB0fSxjb21wdXRlT3ZlcmxhcHM6ZnVuY3Rpb24odCxlKXt0aGlzLmNvbXB1dGVPdmVybGFwc0ludGVybmFsKHRoaXMuc3RhcnQsdGhpcy5lbmQsdCx0LnN0YXJ0LHQuZW5kLGUpfSxzZXRJZDpmdW5jdGlvbih0KXt0aGlzLmlkPXR9LHNlbGVjdDpmdW5jdGlvbih0LGUpe3RoaXMuY29tcHV0ZVNlbGVjdCh0LHRoaXMuc3RhcnQsdGhpcy5lbmQsZSl9LGdldEVudmVsb3BlOmZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMuZW52KXt2YXIgdD10aGlzLnB0c1t0aGlzLnN0YXJ0XSxlPXRoaXMucHRzW3RoaXMuZW5kXTt0aGlzLmVudj1uZXcgQyh0LGUpfXJldHVybiB0aGlzLmVudn0sZ2V0RW5kSW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmR9LGdldFN0YXJ0SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydH0sZ2V0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRleHR9LGdldElkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaWR9LGNvbXB1dGVPdmVybGFwc0ludGVybmFsOmZ1bmN0aW9uKHQsZSxuLGkscixzKXt2YXIgbz10aGlzLnB0c1t0XSxhPXRoaXMucHRzW2VdLHU9bi5wdHNbaV0sbD1uLnB0c1tyXTtpZihlLXQ9PT0xJiZyLWk9PT0xKXJldHVybiBzLm92ZXJsYXAodGhpcyx0LG4saSksbnVsbDtpZihzLnRlbXBFbnYxLmluaXQobyxhKSxzLnRlbXBFbnYyLmluaXQodSxsKSwhcy50ZW1wRW52MS5pbnRlcnNlY3RzKHMudGVtcEVudjIpKXJldHVybiBudWxsO3ZhciBoPU1hdGgudHJ1bmMoKHQrZSkvMiksYz1NYXRoLnRydW5jKChpK3IpLzIpO3Q8aCYmKGk8YyYmdGhpcy5jb21wdXRlT3ZlcmxhcHNJbnRlcm5hbCh0LGgsbixpLGMscyksYzxyJiZ0aGlzLmNvbXB1dGVPdmVybGFwc0ludGVybmFsKHQsaCxuLGMscixzKSksaDxlJiYoaTxjJiZ0aGlzLmNvbXB1dGVPdmVybGFwc0ludGVybmFsKGgsZSxuLGksYyxzKSxjPHImJnRoaXMuY29tcHV0ZU92ZXJsYXBzSW50ZXJuYWwoaCxlLG4sYyxyLHMpKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gUWV9fSksZShKZS5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEplfX0pLEplLmlzTm9ydGhlcm49ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1KZS5ORXx8dD09PUplLk5XfSxKZS5pc09wcG9zaXRlPWZ1bmN0aW9uKHQsZSl7aWYodD09PWUpcmV0dXJuITE7dmFyIG49KHQtZSs0KSU0O3JldHVybiAyPT09bn0sSmUuY29tbW9uSGFsZlBsYW5lPWZ1bmN0aW9uKHQsZSl7aWYodD09PWUpcmV0dXJuIHQ7dmFyIG49KHQtZSs0KSU0O2lmKDI9PT1uKXJldHVybi0xO3ZhciBpPXQ8ZT90OmUscj10PmU/dDplO3JldHVybiAwPT09aSYmMz09PXI/MzppfSxKZS5pc0luSGFsZlBsYW5lPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9PT1KZS5TRT90PT09SmUuU0V8fHQ9PT1KZS5TVzp0PT09ZXx8dD09PWUrMX0sSmUucXVhZHJhbnQ9ZnVuY3Rpb24oKXtpZihcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzBdJiZcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzFdKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07aWYoMD09PXQmJjA9PT1lKXRocm93IG5ldyBpKFwiQ2Fubm90IGNvbXB1dGUgdGhlIHF1YWRyYW50IGZvciBwb2ludCAoIFwiK3QrXCIsIFwiK2UrXCIgKVwiKTtyZXR1cm4gdD49MD9lPj0wP0plLk5FOkplLlNFOmU+PTA/SmUuTlc6SmUuU1d9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIGcpe3ZhciBuPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXTtpZihyLng9PT1uLngmJnIueT09PW4ueSl0aHJvdyBuZXcgaShcIkNhbm5vdCBjb21wdXRlIHRoZSBxdWFkcmFudCBmb3IgdHdvIGlkZW50aWNhbCBwb2ludHMgXCIrbik7cmV0dXJuIHIueD49bi54P3IueT49bi55P0plLk5FOkplLlNFOnIueT49bi55P0plLk5XOkplLlNXfX0sSmUuTkU9MCxKZS5OVz0xLEplLlNXPTIsSmUuU0U9MyxlKCRlLnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gJGV9fSksJGUuZ2V0Q2hhaW5TdGFydEluZGljZXM9ZnVuY3Rpb24odCl7dmFyIGU9MCxuPW5ldyBJO24uYWRkKG5ldyBiKGUpKTtkb3t2YXIgaT0kZS5maW5kQ2hhaW5FbmQodCxlKTtuLmFkZChuZXcgYihpKSksZT1pfXdoaWxlKGU8dC5sZW5ndGgtMSk7dmFyIHI9JGUudG9JbnRBcnJheShuKTtyZXR1cm4gcn0sJGUuZmluZENoYWluRW5kPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPWU7bjx0Lmxlbmd0aC0xJiZ0W25dLmVxdWFsczJEKHRbbisxXSk7KW4rKztpZihuPj10Lmxlbmd0aC0xKXJldHVybiB0Lmxlbmd0aC0xO2Zvcih2YXIgaT1KZS5xdWFkcmFudCh0W25dLHRbbisxXSkscj1lKzE7cjx0Lmxlbmd0aDspe2lmKCF0W3ItMV0uZXF1YWxzMkQodFtyXSkpe3ZhciBzPUplLnF1YWRyYW50KHRbci0xXSx0W3JdKTtpZihzIT09aSlicmVha31yKyt9cmV0dXJuIHItMX0sJGUuZ2V0Q2hhaW5zPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gJGUuZ2V0Q2hhaW5zKHQsbnVsbCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1uZXcgSSxyPSRlLmdldENoYWluU3RhcnRJbmRpY2VzKGUpLHM9MDtzPHIubGVuZ3RoLTE7cysrKXt2YXIgbz1uZXcgUWUoZSxyW3NdLHJbcysxXSxuKTtpLmFkZChvKX1yZXR1cm4gaX19LCRlLnRvSW50QXJyYXk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXT10LmdldChuKS5pbnRWYWx1ZSgpO3JldHVybiBlfSxlKHRuLnByb3RvdHlwZSx7Y29tcHV0ZU5vZGVzOmZ1bmN0aW9uKHQpe30sZ2V0Tm9kZWRTdWJzdHJpbmdzOmZ1bmN0aW9uKCl7fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB0bn19KSxlKGVuLnByb3RvdHlwZSx7c2V0U2VnbWVudEludGVyc2VjdG9yOmZ1bmN0aW9uKHQpe3RoaXMuc2VnSW50PXR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3RuXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZW59fSksaChubixlbiksZShubi5wcm90b3R5cGUse2dldE1vbm90b25lQ2hhaW5zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9ub0NoYWluc30sZ2V0Tm9kZWRTdWJzdHJpbmdzOmZ1bmN0aW9uKCl7cmV0dXJuIEtlLmdldE5vZGVkU3Vic3RyaW5ncyh0aGlzLm5vZGVkU2VnU3RyaW5ncyl9LGdldEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5kZXh9LGFkZDpmdW5jdGlvbih0KXtmb3IodmFyIGU9JGUuZ2V0Q2hhaW5zKHQuZ2V0Q29vcmRpbmF0ZXMoKSx0KSxuPWUuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2kuc2V0SWQodGhpcy5pZENvdW50ZXIrKyksdGhpcy5pbmRleC5pbnNlcnQoaS5nZXRFbnZlbG9wZSgpLGkpLHRoaXMubW9ub0NoYWlucy5hZGQoaSl9fSxjb21wdXRlTm9kZXM6ZnVuY3Rpb24odCl7dGhpcy5ub2RlZFNlZ1N0cmluZ3M9dDtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl0aGlzLmFkZChlLm5leHQoKSk7dGhpcy5pbnRlcnNlY3RDaGFpbnMoKX0saW50ZXJzZWN0Q2hhaW5zOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBybih0aGlzLnNlZ0ludCksZT10aGlzLm1vbm9DaGFpbnMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspZm9yKHZhciBuPWUubmV4dCgpLGk9dGhpcy5pbmRleC5xdWVyeShuLmdldEVudmVsb3BlKCkpLHI9aS5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7dmFyIHM9ci5uZXh0KCk7aWYocy5nZXRJZCgpPm4uZ2V0SWQoKSYmKG4uY29tcHV0ZU92ZXJsYXBzKHMsdCksdGhpcy5uT3ZlcmxhcHMrKyksdGhpcy5zZWdJbnQuaXNEb25lKCkpcmV0dXJuIG51bGx9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBubn19KSxoKHJuLFplKSxlKHJuLnByb3RvdHlwZSx7b3ZlcmxhcDpmdW5jdGlvbigpe2lmKDQhPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBaZS5wcm90b3R5cGUub3ZlcmxhcC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdLHI9dC5nZXRDb250ZXh0KCkscz1uLmdldENvbnRleHQoKTt0aGlzLnNpLnByb2Nlc3NJbnRlcnNlY3Rpb25zKHIsZSxzLGkpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBybn19KSxubi5TZWdtZW50T3ZlcmxhcEFjdGlvbj1ybixoKHNuLGwpLGUoc24ucHJvdG90eXBlLHtnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHNufX0pLHNuLm1zZ1dpdGhDb29yZD1mdW5jdGlvbih0LGUpe3JldHVybiBudWxsIT09ZT90K1wiIFsgXCIrZStcIiBdXCI6dH0sZShvbi5wcm90b3R5cGUse3Byb2Nlc3NJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKHQsZSxuLGkpe30saXNEb25lOmZ1bmN0aW9uKCl7fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBvbn19KSxlKGFuLnByb3RvdHlwZSx7Z2V0SW50ZXJpb3JJbnRlcnNlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnRlcmlvckludGVyc2VjdGlvbn0sc2V0Q2hlY2tFbmRTZWdtZW50c09ubHk6ZnVuY3Rpb24odCl7dGhpcy5pc0NoZWNrRW5kU2VnbWVudHNPbmx5PXR9LGdldEludGVyc2VjdGlvblNlZ21lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50U2VnbWVudHN9LGNvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uQ291bnR9LGdldEludGVyc2VjdGlvbnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25zfSxzZXRGaW5kQWxsSW50ZXJzZWN0aW9uczpmdW5jdGlvbih0KXt0aGlzLmZpbmRBbGxJbnRlcnNlY3Rpb25zPXR9LHNldEtlZXBJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKHQpe3RoaXMua2VlcEludGVyc2VjdGlvbnM9dH0scHJvY2Vzc0ludGVyc2VjdGlvbnM6ZnVuY3Rpb24odCxlLG4saSl7aWYoIXRoaXMuZmluZEFsbEludGVyc2VjdGlvbnMmJnRoaXMuaGFzSW50ZXJzZWN0aW9uKCkpcmV0dXJuIG51bGw7aWYodD09PW4mJmU9PT1pKXJldHVybiBudWxsO2lmKHRoaXMuaXNDaGVja0VuZFNlZ21lbnRzT25seSl7dmFyIHI9dGhpcy5pc0VuZFNlZ21lbnQodCxlKXx8dGhpcy5pc0VuZFNlZ21lbnQobixpKTtpZighcilyZXR1cm4gbnVsbH12YXIgcz10LmdldENvb3JkaW5hdGVzKClbZV0sbz10LmdldENvb3JkaW5hdGVzKClbZSsxXSxhPW4uZ2V0Q29vcmRpbmF0ZXMoKVtpXSx1PW4uZ2V0Q29vcmRpbmF0ZXMoKVtpKzFdO3RoaXMubGkuY29tcHV0ZUludGVyc2VjdGlvbihzLG8sYSx1KSx0aGlzLmxpLmhhc0ludGVyc2VjdGlvbigpJiZ0aGlzLmxpLmlzSW50ZXJpb3JJbnRlcnNlY3Rpb24oKSYmKHRoaXMuaW50U2VnbWVudHM9bmV3IEFycmF5KDQpLmZpbGwobnVsbCksdGhpcy5pbnRTZWdtZW50c1swXT1zLHRoaXMuaW50U2VnbWVudHNbMV09byx0aGlzLmludFNlZ21lbnRzWzJdPWEsdGhpcy5pbnRTZWdtZW50c1szXT11LHRoaXMuaW50ZXJpb3JJbnRlcnNlY3Rpb249dGhpcy5saS5nZXRJbnRlcnNlY3Rpb24oMCksdGhpcy5rZWVwSW50ZXJzZWN0aW9ucyYmdGhpcy5pbnRlcnNlY3Rpb25zLmFkZCh0aGlzLmludGVyaW9ySW50ZXJzZWN0aW9uKSx0aGlzLmludGVyc2VjdGlvbkNvdW50KyspfSxpc0VuZFNlZ21lbnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gMD09PWV8fGU+PXQuc2l6ZSgpLTJ9LGhhc0ludGVyc2VjdGlvbjpmdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5pbnRlcmlvckludGVyc2VjdGlvbn0saXNEb25lOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuZmluZEFsbEludGVyc2VjdGlvbnMmJm51bGwhPT10aGlzLmludGVyaW9ySW50ZXJzZWN0aW9ufSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltvbl19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGFufX0pLGFuLmNyZWF0ZUFsbEludGVyc2VjdGlvbnNGaW5kZXI9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGFuKHQpO3JldHVybiBlLnNldEZpbmRBbGxJbnRlcnNlY3Rpb25zKCEwKSxlfSxhbi5jcmVhdGVBbnlJbnRlcnNlY3Rpb25GaW5kZXI9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBhbih0KX0sYW4uY3JlYXRlSW50ZXJzZWN0aW9uQ291bnRlcj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgYW4odCk7cmV0dXJuIGUuc2V0RmluZEFsbEludGVyc2VjdGlvbnMoITApLGUuc2V0S2VlcEludGVyc2VjdGlvbnMoITEpLGV9LGUodW4ucHJvdG90eXBlLHtleGVjdXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLnNlZ0ludD9udWxsOnZvaWQgdGhpcy5jaGVja0ludGVyaW9ySW50ZXJzZWN0aW9ucygpfSxnZXRJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VnSW50LmdldEludGVyc2VjdGlvbnMoKX0saXNWYWxpZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmV4ZWN1dGUoKSx0aGlzLl9pc1ZhbGlkfSxzZXRGaW5kQWxsSW50ZXJzZWN0aW9uczpmdW5jdGlvbih0KXt0aGlzLmZpbmRBbGxJbnRlcnNlY3Rpb25zPXR9LGNoZWNrSW50ZXJpb3JJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKCl7dGhpcy5faXNWYWxpZD0hMCx0aGlzLnNlZ0ludD1uZXcgYW4odGhpcy5saSksdGhpcy5zZWdJbnQuc2V0RmluZEFsbEludGVyc2VjdGlvbnModGhpcy5maW5kQWxsSW50ZXJzZWN0aW9ucyk7dmFyIHQ9bmV3IG5uO2lmKHQuc2V0U2VnbWVudEludGVyc2VjdG9yKHRoaXMuc2VnSW50KSx0LmNvbXB1dGVOb2Rlcyh0aGlzLnNlZ1N0cmluZ3MpLHRoaXMuc2VnSW50Lmhhc0ludGVyc2VjdGlvbigpKXJldHVybiB0aGlzLl9pc1ZhbGlkPSExLG51bGx9LGNoZWNrVmFsaWQ6ZnVuY3Rpb24oKXtpZih0aGlzLmV4ZWN1dGUoKSwhdGhpcy5faXNWYWxpZCl0aHJvdyBuZXcgc24odGhpcy5nZXRFcnJvck1lc3NhZ2UoKSx0aGlzLnNlZ0ludC5nZXRJbnRlcmlvckludGVyc2VjdGlvbigpKX0sZ2V0RXJyb3JNZXNzYWdlOmZ1bmN0aW9uKCl7aWYodGhpcy5faXNWYWxpZClyZXR1cm5cIm5vIGludGVyc2VjdGlvbnMgZm91bmRcIjt2YXIgdD10aGlzLnNlZ0ludC5nZXRJbnRlcnNlY3Rpb25TZWdtZW50cygpO3JldHVyblwiZm91bmQgbm9uLW5vZGVkIGludGVyc2VjdGlvbiBiZXR3ZWVuIFwiK3NlLnRvTGluZVN0cmluZyh0WzBdLHRbMV0pK1wiIGFuZCBcIitzZS50b0xpbmVTdHJpbmcodFsyXSx0WzNdKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdW59fSksdW4uY29tcHV0ZUludGVyc2VjdGlvbnM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHVuKHQpO3JldHVybiBlLnNldEZpbmRBbGxJbnRlcnNlY3Rpb25zKCEwKSxlLmlzVmFsaWQoKSxlLmdldEludGVyc2VjdGlvbnMoKX0sZShsbi5wcm90b3R5cGUse2NoZWNrVmFsaWQ6ZnVuY3Rpb24oKXt0aGlzLm52LmNoZWNrVmFsaWQoKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gbG59fSksbG4udG9TZWdtZW50U3RyaW5ncz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEksbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtlLmFkZChuZXcgT2UoaS5nZXRDb29yZGluYXRlcygpLGkpKX1yZXR1cm4gZX0sbG4uY2hlY2tWYWxpZD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgbG4odCk7ZS5jaGVja1ZhbGlkKCl9LGUoaG4ucHJvdG90eXBlLHttYXA6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBJLG49MDtuPHQuZ2V0TnVtR2VvbWV0cmllcygpO24rKyl7dmFyIGk9dGhpcy5tYXBPcC5tYXAodC5nZXRHZW9tZXRyeU4obikpO2kuaXNFbXB0eSgpfHxlLmFkZChpKX1yZXR1cm4gdC5nZXRGYWN0b3J5KCkuY3JlYXRlR2VvbWV0cnlDb2xsZWN0aW9uKGllLnRvR2VvbWV0cnlBcnJheShlKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGhufX0pLGhuLm1hcD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBobihlKTtyZXR1cm4gbi5tYXAodCl9LGUoY24ucHJvdG90eXBlLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBjbn19KSxjbi5vcHBvc2l0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdD09PWNuLkxFRlQ/Y24uUklHSFQ6dD09PWNuLlJJR0hUP2NuLkxFRlQ6dH0sY24uT049MCxjbi5MRUZUPTEsY24uUklHSFQ9MixlKGZuLnByb3RvdHlwZSx7c2V0QWxsTG9jYXRpb25zOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5sb2NhdGlvbi5sZW5ndGg7ZSsrKXRoaXMubG9jYXRpb25bZV09dH0saXNOdWxsOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLmxvY2F0aW9uLmxlbmd0aDt0KyspaWYodGhpcy5sb2NhdGlvblt0XSE9PUwuTk9ORSlyZXR1cm4hMTtyZXR1cm4hMH0sc2V0QWxsTG9jYXRpb25zSWZOdWxsOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dGhpcy5sb2NhdGlvbi5sZW5ndGg7ZSsrKXRoaXMubG9jYXRpb25bZV09PT1MLk5PTkUmJih0aGlzLmxvY2F0aW9uW2VdPXQpfSxpc0xpbmU6ZnVuY3Rpb24oKXtyZXR1cm4gMT09PXRoaXMubG9jYXRpb24ubGVuZ3RofSxtZXJnZTpmdW5jdGlvbih0KXtpZih0LmxvY2F0aW9uLmxlbmd0aD50aGlzLmxvY2F0aW9uLmxlbmd0aCl7dmFyIGU9bmV3IEFycmF5KDMpLmZpbGwobnVsbCk7ZVtjbi5PTl09dGhpcy5sb2NhdGlvbltjbi5PTl0sZVtjbi5MRUZUXT1MLk5PTkUsZVtjbi5SSUdIVF09TC5OT05FLHRoaXMubG9jYXRpb249ZX1mb3IodmFyIG49MDtuPHRoaXMubG9jYXRpb24ubGVuZ3RoO24rKyl0aGlzLmxvY2F0aW9uW25dPT09TC5OT05FJiZuPHQubG9jYXRpb24ubGVuZ3RoJiYodGhpcy5sb2NhdGlvbltuXT10LmxvY2F0aW9uW25dKX0sZ2V0TG9jYXRpb25zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9jYXRpb259LGZsaXA6ZnVuY3Rpb24oKXtpZih0aGlzLmxvY2F0aW9uLmxlbmd0aDw9MSlyZXR1cm4gbnVsbDt2YXIgdD10aGlzLmxvY2F0aW9uW2NuLkxFRlRdO3RoaXMubG9jYXRpb25bY24uTEVGVF09dGhpcy5sb2NhdGlvbltjbi5SSUdIVF0sdGhpcy5sb2NhdGlvbltjbi5SSUdIVF09dH0sdG9TdHJpbmc6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgUDtyZXR1cm4gdGhpcy5sb2NhdGlvbi5sZW5ndGg+MSYmdC5hcHBlbmQoTC50b0xvY2F0aW9uU3ltYm9sKHRoaXMubG9jYXRpb25bY24uTEVGVF0pKSx0LmFwcGVuZChMLnRvTG9jYXRpb25TeW1ib2wodGhpcy5sb2NhdGlvbltjbi5PTl0pKSx0aGlzLmxvY2F0aW9uLmxlbmd0aD4xJiZ0LmFwcGVuZChMLnRvTG9jYXRpb25TeW1ib2wodGhpcy5sb2NhdGlvbltjbi5SSUdIVF0pKSx0LnRvU3RyaW5nKCl9LHNldExvY2F0aW9uczpmdW5jdGlvbih0LGUsbil7dGhpcy5sb2NhdGlvbltjbi5PTl09dCx0aGlzLmxvY2F0aW9uW2NuLkxFRlRdPWUsdGhpcy5sb2NhdGlvbltjbi5SSUdIVF09bn0sZ2V0OmZ1bmN0aW9uKHQpe3JldHVybiB0PHRoaXMubG9jYXRpb24ubGVuZ3RoP3RoaXMubG9jYXRpb25bdF06TC5OT05FfSxpc0FyZWE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2NhdGlvbi5sZW5ndGg+MX0saXNBbnlOdWxsOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLmxvY2F0aW9uLmxlbmd0aDt0KyspaWYodGhpcy5sb2NhdGlvblt0XT09PUwuTk9ORSlyZXR1cm4hMDtyZXR1cm4hMX0sc2V0TG9jYXRpb246ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2V0TG9jYXRpb24oY24uT04sdCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3RoaXMubG9jYXRpb25bZV09bn19LGluaXQ6ZnVuY3Rpb24odCl7dGhpcy5sb2NhdGlvbj1uZXcgQXJyYXkodCkuZmlsbChudWxsKSx0aGlzLnNldEFsbExvY2F0aW9ucyhMLk5PTkUpfSxpc0VxdWFsT25TaWRlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMubG9jYXRpb25bZV09PT10LmxvY2F0aW9uW2VdfSxhbGxQb3NpdGlvbnNFcXVhbDpmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMubG9jYXRpb24ubGVuZ3RoO2UrKylpZih0aGlzLmxvY2F0aW9uW2VdIT09dClyZXR1cm4hMTtyZXR1cm4hMH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZm59fSksZShnbi5wcm90b3R5cGUse2dldEdlb21ldHJ5Q291bnQ6ZnVuY3Rpb24oKXt2YXIgdD0wO3JldHVybiB0aGlzLmVsdFswXS5pc051bGwoKXx8dCsrLHRoaXMuZWx0WzFdLmlzTnVsbCgpfHx0KyssdH0sc2V0QWxsTG9jYXRpb25zOmZ1bmN0aW9uKHQsZSl7dGhpcy5lbHRbdF0uc2V0QWxsTG9jYXRpb25zKGUpfSxpc051bGw6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZWx0W3RdLmlzTnVsbCgpfSxzZXRBbGxMb2NhdGlvbnNJZk51bGw6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2V0QWxsTG9jYXRpb25zSWZOdWxsKDAsdCksdGhpcy5zZXRBbGxMb2NhdGlvbnNJZk51bGwoMSx0KX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07dGhpcy5lbHRbZV0uc2V0QWxsTG9jYXRpb25zSWZOdWxsKG4pfX0saXNMaW5lOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVsdFt0XS5pc0xpbmUoKX0sbWVyZ2U6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTwyO2UrKyludWxsPT09dGhpcy5lbHRbZV0mJm51bGwhPT10LmVsdFtlXT90aGlzLmVsdFtlXT1uZXcgZm4odC5lbHRbZV0pOnRoaXMuZWx0W2VdLm1lcmdlKHQuZWx0W2VdKX0sZmxpcDpmdW5jdGlvbigpe3RoaXMuZWx0WzBdLmZsaXAoKSx0aGlzLmVsdFsxXS5mbGlwKCl9LGdldExvY2F0aW9uOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5lbHRbdF0uZ2V0KGNuLk9OKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3JldHVybiB0aGlzLmVsdFtlXS5nZXQobil9fSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciB0PW5ldyBQO3JldHVybiBudWxsIT09dGhpcy5lbHRbMF0mJih0LmFwcGVuZChcIkE6XCIpLHQuYXBwZW5kKHRoaXMuZWx0WzBdLnRvU3RyaW5nKCkpKSxudWxsIT09dGhpcy5lbHRbMV0mJih0LmFwcGVuZChcIiBCOlwiKSx0LmFwcGVuZCh0aGlzLmVsdFsxXS50b1N0cmluZygpKSksdC50b1N0cmluZygpfSxpc0FyZWE6ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5lbHRbMF0uaXNBcmVhKCl8fHRoaXMuZWx0WzFdLmlzQXJlYSgpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZWx0W3RdLmlzQXJlYSgpfX0saXNBbnlOdWxsOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVsdFt0XS5pc0FueU51bGwoKX0sc2V0TG9jYXRpb246ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3RoaXMuZWx0W3RdLnNldExvY2F0aW9uKGNuLk9OLGUpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXTt0aGlzLmVsdFtuXS5zZXRMb2NhdGlvbihpLHIpfX0saXNFcXVhbE9uU2lkZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVsdFswXS5pc0VxdWFsT25TaWRlKHQuZWx0WzBdLGUpJiZ0aGlzLmVsdFsxXS5pc0VxdWFsT25TaWRlKHQuZWx0WzFdLGUpfSxhbGxQb3NpdGlvbnNFcXVhbDpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVsdFt0XS5hbGxQb3NpdGlvbnNFcXVhbChlKX0sdG9MaW5lOmZ1bmN0aW9uKHQpe3RoaXMuZWx0W3RdLmlzQXJlYSgpJiYodGhpcy5lbHRbdF09bmV3IGZuKHRoaXMuZWx0W3RdLmxvY2F0aW9uWzBdKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGdufX0pLGduLnRvTGluZUxhYmVsPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgZ24oTC5OT05FKSxuPTA7bjwyO24rKyllLnNldExvY2F0aW9uKG4sdC5nZXRMb2NhdGlvbihuKSk7cmV0dXJuIGV9LGUoZG4ucHJvdG90eXBlLHtjb21wdXRlUmluZzpmdW5jdGlvbigpe2lmKG51bGwhPT10aGlzLnJpbmcpcmV0dXJuIG51bGw7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLnB0cy5zaXplKCkpLmZpbGwobnVsbCksZT0wO2U8dGhpcy5wdHMuc2l6ZSgpO2UrKyl0W2VdPXRoaXMucHRzLmdldChlKTt0aGlzLnJpbmc9dGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZWFyUmluZyh0KSx0aGlzLl9pc0hvbGU9aGUuaXNDQ1codGhpcy5yaW5nLmdldENvb3JkaW5hdGVzKCkpfSxpc0lzb2xhdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIDE9PT10aGlzLmxhYmVsLmdldEdlb21ldHJ5Q291bnQoKX0sY29tcHV0ZVBvaW50czpmdW5jdGlvbih0KXt0aGlzLnN0YXJ0RGU9dDt2YXIgZT10LG49ITA7ZG97aWYobnVsbD09PWUpdGhyb3cgbmV3IHNuKFwiRm91bmQgbnVsbCBEaXJlY3RlZEVkZ2VcIik7aWYoZS5nZXRFZGdlUmluZygpPT09dGhpcyl0aHJvdyBuZXcgc24oXCJEaXJlY3RlZCBFZGdlIHZpc2l0ZWQgdHdpY2UgZHVyaW5nIHJpbmctYnVpbGRpbmcgYXQgXCIrZS5nZXRDb29yZGluYXRlKCkpO3RoaXMuZWRnZXMuYWRkKGUpO3ZhciBpPWUuZ2V0TGFiZWwoKTtmLmlzVHJ1ZShpLmlzQXJlYSgpKSx0aGlzLm1lcmdlTGFiZWwoaSksdGhpcy5hZGRQb2ludHMoZS5nZXRFZGdlKCksZS5pc0ZvcndhcmQoKSxuKSxuPSExLHRoaXMuc2V0RWRnZVJpbmcoZSx0aGlzKSxlPXRoaXMuZ2V0TmV4dChlKX13aGlsZShlIT09dGhpcy5zdGFydERlKX0sZ2V0TGluZWFyUmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJpbmd9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucHRzLmdldCh0KX0sY29tcHV0ZU1heE5vZGVEZWdyZWU6ZnVuY3Rpb24oKXt0aGlzLm1heE5vZGVEZWdyZWU9MDt2YXIgdD10aGlzLnN0YXJ0RGU7ZG97dmFyIGU9dC5nZXROb2RlKCksbj1lLmdldEVkZ2VzKCkuZ2V0T3V0Z29pbmdEZWdyZWUodGhpcyk7bj50aGlzLm1heE5vZGVEZWdyZWUmJih0aGlzLm1heE5vZGVEZWdyZWU9biksdD10aGlzLmdldE5leHQodCl9d2hpbGUodCE9PXRoaXMuc3RhcnREZSk7dGhpcy5tYXhOb2RlRGVncmVlKj0yfSxhZGRQb2ludHM6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQuZ2V0Q29vcmRpbmF0ZXMoKTtpZihlKXt2YXIgcj0xO24mJihyPTApO2Zvcih2YXIgcz1yO3M8aS5sZW5ndGg7cysrKXRoaXMucHRzLmFkZChpW3NdKX1lbHNle3ZhciByPWkubGVuZ3RoLTI7biYmKHI9aS5sZW5ndGgtMSk7Zm9yKHZhciBzPXI7cz49MDtzLS0pdGhpcy5wdHMuYWRkKGlbc10pfX0saXNIb2xlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzSG9sZX0sc2V0SW5SZXN1bHQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN0YXJ0RGU7ZG8gdC5nZXRFZGdlKCkuc2V0SW5SZXN1bHQoITApLHQ9dC5nZXROZXh0KCk7d2hpbGUodCE9PXRoaXMuc3RhcnREZSl9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRMaW5lYXJSaW5nKCksbj1lLmdldEVudmVsb3BlSW50ZXJuYWwoKTtpZighbi5jb250YWlucyh0KSlyZXR1cm4hMTtpZighaGUuaXNQb2ludEluUmluZyh0LGUuZ2V0Q29vcmRpbmF0ZXMoKSkpcmV0dXJuITE7Zm9yKHZhciBpPXRoaXMuaG9sZXMuaXRlcmF0b3IoKTtpLmhhc05leHQoKTspe3ZhciByPWkubmV4dCgpO2lmKHIuY29udGFpbnNQb2ludCh0KSlyZXR1cm4hMX1yZXR1cm4hMH0sYWRkSG9sZTpmdW5jdGlvbih0KXt0aGlzLmhvbGVzLmFkZCh0KX0saXNTaGVsbDpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5zaGVsbH0sZ2V0TGFiZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYWJlbH0sZ2V0RWRnZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGdlc30sZ2V0TWF4Tm9kZURlZ3JlZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heE5vZGVEZWdyZWU8MCYmdGhpcy5jb21wdXRlTWF4Tm9kZURlZ3JlZSgpLHRoaXMubWF4Tm9kZURlZ3JlZX0sZ2V0U2hlbGw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGVsbH0sbWVyZ2VMYWJlbDpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5tZXJnZUxhYmVsKHQsMCksdGhpcy5tZXJnZUxhYmVsKHQsMSl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9ZS5nZXRMb2NhdGlvbihuLGNuLlJJR0hUKTtpZihpPT09TC5OT05FKXJldHVybiBudWxsO2lmKHRoaXMubGFiZWwuZ2V0TG9jYXRpb24obik9PT1MLk5PTkUpcmV0dXJuIHRoaXMubGFiZWwuc2V0TG9jYXRpb24obixpKSxudWxsfX0sc2V0U2hlbGw6ZnVuY3Rpb24odCl7dGhpcy5zaGVsbD10LG51bGwhPT10JiZ0LmFkZEhvbGUodGhpcyl9LHRvUG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KHRoaXMuaG9sZXMuc2l6ZSgpKS5maWxsKG51bGwpLG49MDtuPHRoaXMuaG9sZXMuc2l6ZSgpO24rKyllW25dPXRoaXMuaG9sZXMuZ2V0KG4pLmdldExpbmVhclJpbmcoKTt2YXIgaT10LmNyZWF0ZVBvbHlnb24odGhpcy5nZXRMaW5lYXJSaW5nKCksZSk7cmV0dXJuIGl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGRufX0pLGgocG4sZG4pLGUocG4ucHJvdG90eXBlLHtzZXRFZGdlUmluZzpmdW5jdGlvbih0LGUpe3Quc2V0TWluRWRnZVJpbmcoZSl9LGdldE5leHQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0TmV4dE1pbigpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBwbn19KSxoKHZuLGRuKSxlKHZuLnByb3RvdHlwZSx7YnVpbGRNaW5pbWFsUmluZ3M6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgSSxlPXRoaXMuc3RhcnREZTtkb3tpZihudWxsPT09ZS5nZXRNaW5FZGdlUmluZygpKXt2YXIgbj1uZXcgcG4oZSx0aGlzLmdlb21ldHJ5RmFjdG9yeSk7dC5hZGQobil9ZT1lLmdldE5leHQoKX13aGlsZShlIT09dGhpcy5zdGFydERlKTtyZXR1cm4gdH0sc2V0RWRnZVJpbmc6ZnVuY3Rpb24odCxlKXt0LnNldEVkZ2VSaW5nKGUpfSxsaW5rRGlyZWN0ZWRFZGdlc0Zvck1pbmltYWxFZGdlUmluZ3M6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN0YXJ0RGU7ZG97dmFyIGU9dC5nZXROb2RlKCk7ZS5nZXRFZGdlcygpLmxpbmtNaW5pbWFsRGlyZWN0ZWRFZGdlcyh0aGlzKSx0PXQuZ2V0TmV4dCgpfXdoaWxlKHQhPT10aGlzLnN0YXJ0RGUpfSxnZXROZXh0OmZ1bmN0aW9uKHQpe3JldHVybiB0LmdldE5leHQoKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdm59fSksZShtbi5wcm90b3R5cGUse3NldFZpc2l0ZWQ6ZnVuY3Rpb24odCl7dGhpcy5faXNWaXNpdGVkPXR9LHNldEluUmVzdWx0OmZ1bmN0aW9uKHQpe3RoaXMuX2lzSW5SZXN1bHQ9dH0saXNDb3ZlcmVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzQ292ZXJlZH0saXNDb3ZlcmVkU2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzQ292ZXJlZFNldH0sc2V0TGFiZWw6ZnVuY3Rpb24odCl7dGhpcy5sYWJlbD10fSxnZXRMYWJlbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxhYmVsfSxzZXRDb3ZlcmVkOmZ1bmN0aW9uKHQpe3RoaXMuX2lzQ292ZXJlZD10LHRoaXMuX2lzQ292ZXJlZFNldD0hMH0sdXBkYXRlSU06ZnVuY3Rpb24odCl7Zi5pc1RydWUodGhpcy5sYWJlbC5nZXRHZW9tZXRyeUNvdW50KCk+PTIsXCJmb3VuZCBwYXJ0aWFsIGxhYmVsXCIpLHRoaXMuY29tcHV0ZUlNKHQpfSxpc0luUmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzSW5SZXN1bHR9LGlzVmlzaXRlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc1Zpc2l0ZWR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIG1ufX0pLGgoeW4sbW4pLGUoeW4ucHJvdG90eXBlLHtpc0luY2lkZW50RWRnZUluUmVzdWx0OmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ2V0RWRnZXMoKS5nZXRFZGdlcygpLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTtpZihlLmdldEVkZ2UoKS5pc0luUmVzdWx0KCkpcmV0dXJuITB9cmV0dXJuITF9LGlzSXNvbGF0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gMT09PXRoaXMubGFiZWwuZ2V0R2VvbWV0cnlDb3VudCgpfSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmR9LHByaW50OmZ1bmN0aW9uKHQpe3QucHJpbnRsbihcIm5vZGUgXCIrdGhpcy5jb29yZCtcIiBsYmw6IFwiK3RoaXMubGFiZWwpfSxjb21wdXRlSU06ZnVuY3Rpb24odCl7fSxjb21wdXRlTWVyZ2VkTG9jYXRpb246ZnVuY3Rpb24odCxlKXt2YXIgbj1MLk5PTkU7aWYobj10aGlzLmxhYmVsLmdldExvY2F0aW9uKGUpLCF0LmlzTnVsbChlKSl7dmFyIGk9dC5nZXRMb2NhdGlvbihlKTtuIT09TC5CT1VOREFSWSYmKG49aSl9cmV0dXJuIG59LHNldExhYmVsOmZ1bmN0aW9uKCl7aWYoMiE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIG1uLnByb3RvdHlwZS5zZXRMYWJlbC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO251bGw9PT10aGlzLmxhYmVsP3RoaXMubGFiZWw9bmV3IGduKHQsZSk6dGhpcy5sYWJlbC5zZXRMb2NhdGlvbih0LGUpfSxnZXRFZGdlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVkZ2VzfSxtZXJnZUxhYmVsOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiB5bil7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubWVyZ2VMYWJlbCh0LmxhYmVsKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZ24pZm9yKHZhciBlPWFyZ3VtZW50c1swXSxuPTA7bjwyO24rKyl7dmFyIGk9dGhpcy5jb21wdXRlTWVyZ2VkTG9jYXRpb24oZSxuKSxyPXRoaXMubGFiZWwuZ2V0TG9jYXRpb24obik7cj09PUwuTk9ORSYmdGhpcy5sYWJlbC5zZXRMb2NhdGlvbihuLGkpfX0sYWRkOmZ1bmN0aW9uKHQpe3RoaXMuZWRnZXMuaW5zZXJ0KHQpLHQuc2V0Tm9kZSh0aGlzKX0sc2V0TGFiZWxCb3VuZGFyeTpmdW5jdGlvbih0KXtpZihudWxsPT09dGhpcy5sYWJlbClyZXR1cm4gbnVsbDt2YXIgZT1MLk5PTkU7bnVsbCE9PXRoaXMubGFiZWwmJihlPXRoaXMubGFiZWwuZ2V0TG9jYXRpb24odCkpO3ZhciBuPW51bGw7c3dpdGNoKGUpe2Nhc2UgTC5CT1VOREFSWTpuPUwuSU5URVJJT1I7YnJlYWs7Y2FzZSBMLklOVEVSSU9SOm49TC5CT1VOREFSWTticmVhaztkZWZhdWx0Om49TC5CT1VOREFSWX10aGlzLmxhYmVsLnNldExvY2F0aW9uKHQsbil9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHlufX0pLGUoeG4ucHJvdG90eXBlLHtmaW5kOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGVNYXAuZ2V0KHQpfSxhZGROb2RlOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnKXt2YXIgdD1hcmd1bWVudHNbMF0sZT10aGlzLm5vZGVNYXAuZ2V0KHQpO3JldHVybiBudWxsPT09ZSYmKGU9dGhpcy5ub2RlRmFjdC5jcmVhdGVOb2RlKHQpLHRoaXMubm9kZU1hcC5wdXQodCxlKSksZX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIHluKXt2YXIgbj1hcmd1bWVudHNbMF0sZT10aGlzLm5vZGVNYXAuZ2V0KG4uZ2V0Q29vcmRpbmF0ZSgpKTtyZXR1cm4gbnVsbD09PWU/KHRoaXMubm9kZU1hcC5wdXQobi5nZXRDb29yZGluYXRlKCksbiksbik6KGUubWVyZ2VMYWJlbChuKSxlKX19LHByaW50OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLnByaW50KHQpfX0saXRlcmF0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlTWFwLnZhbHVlcygpLml0ZXJhdG9yKCl9LHZhbHVlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVNYXAudmFsdWVzKCl9LGdldEJvdW5kYXJ5Tm9kZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBJLG49dGhpcy5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7aS5nZXRMYWJlbCgpLmdldExvY2F0aW9uKHQpPT09TC5CT1VOREFSWSYmZS5hZGQoaSl9cmV0dXJuIGV9LGFkZDpmdW5jdGlvbih0KXt2YXIgZT10LmdldENvb3JkaW5hdGUoKSxuPXRoaXMuYWRkTm9kZShlKTtuLmFkZCh0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4geG59fSksZShFbi5wcm90b3R5cGUse2NvbXBhcmVEaXJlY3Rpb246ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZHg9PT10LmR4JiZ0aGlzLmR5PT09dC5keT8wOnRoaXMucXVhZHJhbnQ+dC5xdWFkcmFudD8xOnRoaXMucXVhZHJhbnQ8dC5xdWFkcmFudD8tMTpoZS5jb21wdXRlT3JpZW50YXRpb24odC5wMCx0LnAxLHRoaXMucDEpfSxnZXREeTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmR5fSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucDB9LHNldE5vZGU6ZnVuY3Rpb24odCl7dGhpcy5ub2RlPXR9LHByaW50OmZ1bmN0aW9uKHQpe3ZhciBlPU1hdGguYXRhbjIodGhpcy5keSx0aGlzLmR4KSxuPXRoaXMuZ2V0Q2xhc3MoKS5nZXROYW1lKCksaT1uLmxhc3RJbmRleE9mKFwiLlwiKSxyPW4uc3Vic3RyaW5nKGkrMSk7dC5wcmludChcIiAgXCIrcitcIjogXCIrdGhpcy5wMCtcIiAtIFwiK3RoaXMucDErXCIgXCIrdGhpcy5xdWFkcmFudCtcIjpcIitlK1wiICAgXCIrdGhpcy5sYWJlbCl9LGNvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLmNvbXBhcmVEaXJlY3Rpb24oZSl9LGdldERpcmVjdGVkQ29vcmRpbmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnAxfSxnZXREeDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmR4fSxnZXRMYWJlbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxhYmVsfSxnZXRFZGdlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZX0sZ2V0UXVhZHJhbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5xdWFkcmFudH0sZ2V0Tm9kZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGV9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9TWF0aC5hdGFuMih0aGlzLmR5LHRoaXMuZHgpLGU9dGhpcy5nZXRDbGFzcygpLmdldE5hbWUoKSxuPWUubGFzdEluZGV4T2YoXCIuXCIpLGk9ZS5zdWJzdHJpbmcobisxKTtyZXR1cm5cIiAgXCIraStcIjogXCIrdGhpcy5wMCtcIiAtIFwiK3RoaXMucDErXCIgXCIrdGhpcy5xdWFkcmFudCtcIjpcIit0K1wiICAgXCIrdGhpcy5sYWJlbH0sY29tcHV0ZUxhYmVsOmZ1bmN0aW9uKHQpe30saW5pdDpmdW5jdGlvbih0LGUpe3RoaXMucDA9dCx0aGlzLnAxPWUsdGhpcy5keD1lLngtdC54LHRoaXMuZHk9ZS55LXQueSx0aGlzLnF1YWRyYW50PUplLnF1YWRyYW50KHRoaXMuZHgsdGhpcy5keSksZi5pc1RydWUoISgwPT09dGhpcy5keCYmMD09PXRoaXMuZHkpLFwiRWRnZUVuZCB3aXRoIGlkZW50aWNhbCBlbmRwb2ludHMgZm91bmRcIil9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3NdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBFbn19KSxoKEluLEVuKSxlKEluLnByb3RvdHlwZSx7Z2V0TmV4dE1pbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5leHRNaW59LGdldERlcHRoOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRlcHRoW3RdfSxzZXRWaXNpdGVkOmZ1bmN0aW9uKHQpe3RoaXMuX2lzVmlzaXRlZD10fSxjb21wdXRlRGlyZWN0ZWRMYWJlbDpmdW5jdGlvbigpe3RoaXMubGFiZWw9bmV3IGduKHRoaXMuZWRnZS5nZXRMYWJlbCgpKSx0aGlzLl9pc0ZvcndhcmR8fHRoaXMubGFiZWwuZmxpcCgpfSxnZXROZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV4dH0sc2V0RGVwdGg6ZnVuY3Rpb24odCxlKXtpZih0aGlzLmRlcHRoW3RdIT09LTk5OSYmdGhpcy5kZXB0aFt0XSE9PWUpdGhyb3cgbmV3IHNuKFwiYXNzaWduZWQgZGVwdGhzIGRvIG5vdCBtYXRjaFwiLHRoaXMuZ2V0Q29vcmRpbmF0ZSgpKTt0aGlzLmRlcHRoW3RdPWV9LGlzSW50ZXJpb3JBcmVhRWRnZTpmdW5jdGlvbiB0KCl7Zm9yKHZhciB0PSEwLGU9MDtlPDI7ZSsrKXRoaXMubGFiZWwuaXNBcmVhKGUpJiZ0aGlzLmxhYmVsLmdldExvY2F0aW9uKGUsY24uTEVGVCk9PT1MLklOVEVSSU9SJiZ0aGlzLmxhYmVsLmdldExvY2F0aW9uKGUsY24uUklHSFQpPT09TC5JTlRFUklPUnx8KHQ9ITEpO3JldHVybiB0fSxzZXROZXh0TWluOmZ1bmN0aW9uKHQpe3RoaXMubmV4dE1pbj10fSxwcmludDpmdW5jdGlvbih0KXtFbi5wcm90b3R5cGUucHJpbnQuY2FsbCh0aGlzLHQpLHQucHJpbnQoXCIgXCIrdGhpcy5kZXB0aFtjbi5MRUZUXStcIi9cIit0aGlzLmRlcHRoW2NuLlJJR0hUXSksdC5wcmludChcIiAoXCIrdGhpcy5nZXREZXB0aERlbHRhKCkrXCIpXCIpLHRoaXMuX2lzSW5SZXN1bHQmJnQucHJpbnQoXCIgaW5SZXN1bHRcIil9LHNldE1pbkVkZ2VSaW5nOmZ1bmN0aW9uKHQpe3RoaXMubWluRWRnZVJpbmc9dH0saXNMaW5lRWRnZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMubGFiZWwuaXNMaW5lKDApfHx0aGlzLmxhYmVsLmlzTGluZSgxKSxlPSF0aGlzLmxhYmVsLmlzQXJlYSgwKXx8dGhpcy5sYWJlbC5hbGxQb3NpdGlvbnNFcXVhbCgwLEwuRVhURVJJT1IpLG49IXRoaXMubGFiZWwuaXNBcmVhKDEpfHx0aGlzLmxhYmVsLmFsbFBvc2l0aW9uc0VxdWFsKDEsTC5FWFRFUklPUik7cmV0dXJuIHQmJmUmJm59LHNldEVkZ2VSaW5nOmZ1bmN0aW9uKHQpe3RoaXMuZWRnZVJpbmc9dH0sZ2V0TWluRWRnZVJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5taW5FZGdlUmluZ30sZ2V0RGVwdGhEZWx0YTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZWRnZS5nZXREZXB0aERlbHRhKCk7cmV0dXJuIHRoaXMuX2lzRm9yd2FyZHx8KHQ9LXQpLHR9LHNldEluUmVzdWx0OmZ1bmN0aW9uKHQpe3RoaXMuX2lzSW5SZXN1bHQ9dH0sZ2V0U3ltOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3ltfSxpc0ZvcndhcmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNGb3J3YXJkfSxnZXRFZGdlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZX0scHJpbnRFZGdlOmZ1bmN0aW9uKHQpe3RoaXMucHJpbnQodCksdC5wcmludChcIiBcIiksdGhpcy5faXNGb3J3YXJkP3RoaXMuZWRnZS5wcmludCh0KTp0aGlzLmVkZ2UucHJpbnRSZXZlcnNlKHQpfSxzZXRTeW06ZnVuY3Rpb24odCl7dGhpcy5zeW09dH0sc2V0VmlzaXRlZEVkZ2U6ZnVuY3Rpb24odCl7dGhpcy5zZXRWaXNpdGVkKHQpLHRoaXMuc3ltLnNldFZpc2l0ZWQodCl9LHNldEVkZ2VEZXB0aHM6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldEVkZ2UoKS5nZXREZXB0aERlbHRhKCk7dGhpcy5faXNGb3J3YXJkfHwobj0tbik7dmFyIGk9MTt0PT09Y24uTEVGVCYmKGk9LTEpO3ZhciByPWNuLm9wcG9zaXRlKHQpLHM9bippLG89ZStzO3RoaXMuc2V0RGVwdGgodCxlKSx0aGlzLnNldERlcHRoKHIsbyl9LGdldEVkZ2VSaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZVJpbmd9LGlzSW5SZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNJblJlc3VsdH0sc2V0TmV4dDpmdW5jdGlvbih0KXt0aGlzLm5leHQ9dH0saXNWaXNpdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzVmlzaXRlZH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gSW59fSksSW4uZGVwdGhGYWN0b3I9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PUwuRVhURVJJT1ImJmU9PT1MLklOVEVSSU9SPzE6dD09PUwuSU5URVJJT1ImJmU9PT1MLkVYVEVSSU9SPy0xOjB9LGUoTm4ucHJvdG90eXBlLHtjcmVhdGVOb2RlOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgeW4odCxudWxsKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTm59fSksZShDbi5wcm90b3R5cGUse3ByaW50RWRnZXM6ZnVuY3Rpb24odCl7dC5wcmludGxuKFwiRWRnZXM6XCIpO2Zvcih2YXIgZT0wO2U8dGhpcy5lZGdlcy5zaXplKCk7ZSsrKXt0LnByaW50bG4oXCJlZGdlIFwiK2UrXCI6XCIpO3ZhciBuPXRoaXMuZWRnZXMuZ2V0KGUpO24ucHJpbnQodCksbi5laUxpc3QucHJpbnQodCl9fSxmaW5kOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGVzLmZpbmQodCl9LGFkZE5vZGU6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIHluKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMubm9kZXMuYWRkTm9kZSh0KX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5ub2Rlcy5hZGROb2RlKGUpfX0sZ2V0Tm9kZUl0ZXJhdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXMuaXRlcmF0b3IoKX0sbGlua1Jlc3VsdERpcmVjdGVkRWRnZXM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ub2Rlcy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7ZS5nZXRFZGdlcygpLmxpbmtSZXN1bHREaXJlY3RlZEVkZ2VzKCl9fSxkZWJ1Z1ByaW50bG46ZnVuY3Rpb24odCl7QS5vdXQucHJpbnRsbih0KX0saXNCb3VuZGFyeU5vZGU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLm5vZGVzLmZpbmQoZSk7aWYobnVsbD09PW4pcmV0dXJuITE7dmFyIGk9bi5nZXRMYWJlbCgpO3JldHVybiBudWxsIT09aSYmaS5nZXRMb2NhdGlvbih0KT09PUwuQk9VTkRBUll9LGxpbmtBbGxEaXJlY3RlZEVkZ2VzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMubm9kZXMuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpO2UuZ2V0RWRnZXMoKS5saW5rQWxsRGlyZWN0ZWRFZGdlcygpfX0sbWF0Y2hJblNhbWVEaXJlY3Rpb246ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuISF0LmVxdWFscyhuKSYmKGhlLmNvbXB1dGVPcmllbnRhdGlvbih0LGUsaSk9PT1oZS5DT0xMSU5FQVImJkplLnF1YWRyYW50KHQsZSk9PT1KZS5xdWFkcmFudChuLGkpKX0sZ2V0RWRnZUVuZHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGdlRW5kTGlzdH0sZGVidWdQcmludDpmdW5jdGlvbih0KXtBLm91dC5wcmludCh0KX0sZ2V0RWRnZUl0ZXJhdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZXMuaXRlcmF0b3IoKX0sZmluZEVkZ2VJblNhbWVEaXJlY3Rpb246ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPHRoaXMuZWRnZXMuc2l6ZSgpO24rKyl7dmFyIGk9dGhpcy5lZGdlcy5nZXQobikscj1pLmdldENvb3JkaW5hdGVzKCk7aWYodGhpcy5tYXRjaEluU2FtZURpcmVjdGlvbih0LGUsclswXSxyWzFdKSlyZXR1cm4gaTtpZih0aGlzLm1hdGNoSW5TYW1lRGlyZWN0aW9uKHQsZSxyW3IubGVuZ3RoLTFdLHJbci5sZW5ndGgtMl0pKXJldHVybiBpfXJldHVybiBudWxsfSxpbnNlcnRFZGdlOmZ1bmN0aW9uKHQpe3RoaXMuZWRnZXMuYWRkKHQpfSxmaW5kRWRnZUVuZDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5nZXRFZGdlRW5kcygpLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtpZihuLmdldEVkZ2UoKT09PXQpcmV0dXJuIG59cmV0dXJuIG51bGx9LGFkZEVkZ2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLmVkZ2VzLmFkZChuKTt2YXIgaT1uZXcgSW4obiwoITApKSxyPW5ldyBJbihuLCghMSkpO2kuc2V0U3ltKHIpLHIuc2V0U3ltKGkpLHRoaXMuYWRkKGkpLHRoaXMuYWRkKHIpfX0sYWRkOmZ1bmN0aW9uKHQpe3RoaXMubm9kZXMuYWRkKHQpLHRoaXMuZWRnZUVuZExpc3QuYWRkKHQpfSxnZXROb2RlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVzLnZhbHVlcygpfSxmaW5kRWRnZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248dGhpcy5lZGdlcy5zaXplKCk7bisrKXt2YXIgaT10aGlzLmVkZ2VzLmdldChuKSxyPWkuZ2V0Q29vcmRpbmF0ZXMoKTtpZih0LmVxdWFscyhyWzBdKSYmZS5lcXVhbHMoclsxXSkpcmV0dXJuIGl9cmV0dXJuIG51bGx9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIENufX0pLENuLmxpbmtSZXN1bHREaXJlY3RlZEVkZ2VzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLmdldEVkZ2VzKCkubGlua1Jlc3VsdERpcmVjdGVkRWRnZXMoKX19LGUoU24ucHJvdG90eXBlLHtzb3J0U2hlbGxzQW5kSG9sZXM6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtyLmlzSG9sZSgpP24uYWRkKHIpOmUuYWRkKHIpfX0sY29tcHV0ZVBvbHlnb25zOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgSSxuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpLHI9aS50b1BvbHlnb24odGhpcy5nZW9tZXRyeUZhY3RvcnkpO2UuYWRkKHIpfXJldHVybiBlfSxwbGFjZUZyZWVIb2xlczpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZihudWxsPT09aS5nZXRTaGVsbCgpKXt2YXIgcj10aGlzLmZpbmRFZGdlUmluZ0NvbnRhaW5pbmcoaSx0KTtpZihudWxsPT09cil0aHJvdyBuZXcgc24oXCJ1bmFibGUgdG8gYXNzaWduIGhvbGUgdG8gYSBzaGVsbFwiLGkuZ2V0Q29vcmRpbmF0ZSgwKSk7aS5zZXRTaGVsbChyKX19fSxidWlsZE1pbmltYWxFZGdlUmluZ3M6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT1uZXcgSSxyPXQuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3ZhciBzPXIubmV4dCgpO2lmKHMuZ2V0TWF4Tm9kZURlZ3JlZSgpPjIpe3MubGlua0RpcmVjdGVkRWRnZXNGb3JNaW5pbWFsRWRnZVJpbmdzKCk7dmFyIG89cy5idWlsZE1pbmltYWxSaW5ncygpLGE9dGhpcy5maW5kU2hlbGwobyk7bnVsbCE9PWE/KHRoaXMucGxhY2VQb2x5Z29uSG9sZXMoYSxvKSxlLmFkZChhKSk6bi5hZGRBbGwobyl9ZWxzZSBpLmFkZChzKX1yZXR1cm4gaX0sY29udGFpbnNQb2ludDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5zaGVsbExpc3QuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO2lmKG4uY29udGFpbnNQb2ludCh0KSlyZXR1cm4hMH1yZXR1cm4hMX0sYnVpbGRNYXhpbWFsRWRnZVJpbmdzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgSSxuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2lmKGkuaXNJblJlc3VsdCgpJiZpLmdldExhYmVsKCkuaXNBcmVhKCkmJm51bGw9PT1pLmdldEVkZ2VSaW5nKCkpe3ZhciByPW5ldyB2bihpLHRoaXMuZ2VvbWV0cnlGYWN0b3J5KTtlLmFkZChyKSxyLnNldEluUmVzdWx0KCl9fXJldHVybiBlfSxwbGFjZVBvbHlnb25Ib2xlczpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpLmlzSG9sZSgpJiZpLnNldFNoZWxsKHQpfX0sZ2V0UG9seWdvbnM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNvbXB1dGVQb2x5Z29ucyh0aGlzLnNoZWxsTGlzdCk7cmV0dXJuIHR9LGZpbmRFZGdlUmluZ0NvbnRhaW5pbmc6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5nZXRMaW5lYXJSaW5nKCksaT1uLmdldEVudmVsb3BlSW50ZXJuYWwoKSxyPW4uZ2V0Q29vcmRpbmF0ZU4oMCkscz1udWxsLG89bnVsbCxhPWUuaXRlcmF0b3IoKTthLmhhc05leHQoKTspe3ZhciB1PWEubmV4dCgpLGw9dS5nZXRMaW5lYXJSaW5nKCksaD1sLmdldEVudmVsb3BlSW50ZXJuYWwoKTtudWxsIT09cyYmKG89cy5nZXRMaW5lYXJSaW5nKCkuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKTt2YXIgYz0hMTtoLmNvbnRhaW5zKGkpJiZoZS5pc1BvaW50SW5SaW5nKHIsbC5nZXRDb29yZGluYXRlcygpKSYmKGM9ITApLGMmJihudWxsPT09c3x8by5jb250YWlucyhoKSkmJihzPXUpfXJldHVybiBzfSxmaW5kU2hlbGw6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj1udWxsLGk9dC5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7ci5pc0hvbGUoKXx8KG49cixlKyspfXJldHVybiBmLmlzVHJ1ZShlPD0xLFwiZm91bmQgdHdvIHNoZWxscyBpbiBNaW5pbWFsRWRnZVJpbmcgbGlzdFwiKSxufSxhZGQ6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuYWRkKHQuZ2V0RWRnZUVuZHMoKSx0LmdldE5vZGVzKCkpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtDbi5saW5rUmVzdWx0RGlyZWN0ZWRFZGdlcyhuKTt2YXIgaT10aGlzLmJ1aWxkTWF4aW1hbEVkZ2VSaW5ncyhlKSxyPW5ldyBJLHM9dGhpcy5idWlsZE1pbmltYWxFZGdlUmluZ3MoaSx0aGlzLnNoZWxsTGlzdCxyKTt0aGlzLnNvcnRTaGVsbHNBbmRIb2xlcyhzLHRoaXMuc2hlbGxMaXN0LHIpLHRoaXMucGxhY2VGcmVlSG9sZXModGhpcy5zaGVsbExpc3Qscil9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBTbn19KSxlKHduLnByb3RvdHlwZSx7Y29sbGVjdExpbmVzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLm9wLmdldEdyYXBoKCkuZ2V0RWRnZUVuZHMoKS5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7dGhpcy5jb2xsZWN0TGluZUVkZ2Uobix0LHRoaXMubGluZUVkZ2VzTGlzdCksdGhpcy5jb2xsZWN0Qm91bmRhcnlUb3VjaEVkZ2Uobix0LHRoaXMubGluZUVkZ2VzTGlzdCl9fSxsYWJlbElzb2xhdGVkTGluZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMucHRMb2NhdG9yLmxvY2F0ZSh0LmdldENvb3JkaW5hdGUoKSx0aGlzLm9wLmdldEFyZ0dlb21ldHJ5KGUpKTt0LmdldExhYmVsKCkuc2V0TG9jYXRpb24oZSxuKX0sYnVpbGQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZmluZENvdmVyZWRMaW5lRWRnZXMoKSx0aGlzLmNvbGxlY3RMaW5lcyh0KSx0aGlzLmJ1aWxkTGluZXModCksdGhpcy5yZXN1bHRMaW5lTGlzdH0sY29sbGVjdExpbmVFZGdlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmdldExhYmVsKCkscj10LmdldEVkZ2UoKTt0LmlzTGluZUVkZ2UoKSYmKHQuaXNWaXNpdGVkKCl8fCFpaS5pc1Jlc3VsdE9mT3AoaSxlKXx8ci5pc0NvdmVyZWQoKXx8KG4uYWRkKHIpLHQuc2V0VmlzaXRlZEVkZ2UoITApKSl9LGZpbmRDb3ZlcmVkTGluZUVkZ2VzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMub3AuZ2V0R3JhcGgoKS5nZXROb2RlcygpLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTtlLmdldEVkZ2VzKCkuZmluZENvdmVyZWRMaW5lRWRnZXMoKX1mb3IodmFyIG49dGhpcy5vcC5nZXRHcmFwaCgpLmdldEVkZ2VFbmRzKCkuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpLHI9aS5nZXRFZGdlKCk7aWYoaS5pc0xpbmVFZGdlKCkmJiFyLmlzQ292ZXJlZFNldCgpKXt2YXIgcz10aGlzLm9wLmlzQ292ZXJlZEJ5QShpLmdldENvb3JkaW5hdGUoKSk7ci5zZXRDb3ZlcmVkKHMpfX19LGxhYmVsSXNvbGF0ZWRMaW5lczpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCksaT1uLmdldExhYmVsKCk7bi5pc0lzb2xhdGVkKCkmJihpLmlzTnVsbCgwKT90aGlzLmxhYmVsSXNvbGF0ZWRMaW5lKG4sMCk6dGhpcy5sYWJlbElzb2xhdGVkTGluZShuLDEpKX19LGJ1aWxkTGluZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMubGluZUVkZ2VzTGlzdC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCksaT0obi5nZXRMYWJlbCgpLHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcobi5nZXRDb29yZGluYXRlcygpKSk7dGhpcy5yZXN1bHRMaW5lTGlzdC5hZGQoaSksbi5zZXRJblJlc3VsdCghMCl9fSxjb2xsZWN0Qm91bmRhcnlUb3VjaEVkZ2U6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQuZ2V0TGFiZWwoKTtyZXR1cm4gdC5pc0xpbmVFZGdlKCk/bnVsbDp0LmlzVmlzaXRlZCgpP251bGw6dC5pc0ludGVyaW9yQXJlYUVkZ2UoKT9udWxsOnQuZ2V0RWRnZSgpLmlzSW5SZXN1bHQoKT9udWxsOihmLmlzVHJ1ZSghKHQuaXNJblJlc3VsdCgpfHx0LmdldFN5bSgpLmlzSW5SZXN1bHQoKSl8fCF0LmdldEVkZ2UoKS5pc0luUmVzdWx0KCkpLHZvaWQoaWkuaXNSZXN1bHRPZk9wKGksZSkmJmU9PT1paS5JTlRFUlNFQ1RJT04mJihuLmFkZCh0LmdldEVkZ2UoKSksdC5zZXRWaXNpdGVkRWRnZSghMCkpKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHdufX0pLGUoTG4ucHJvdG90eXBlLHtmaWx0ZXJDb3ZlcmVkTm9kZVRvUG9pbnQ6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRDb29yZGluYXRlKCk7aWYoIXRoaXMub3AuaXNDb3ZlcmVkQnlMQShlKSl7dmFyIG49dGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlUG9pbnQoZSk7dGhpcy5yZXN1bHRQb2ludExpc3QuYWRkKG4pfX0sZXh0cmFjdE5vbkNvdmVyZWRSZXN1bHROb2RlczpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5vcC5nZXRHcmFwaCgpLmdldE5vZGVzKCkuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO2lmKCEobi5pc0luUmVzdWx0KCl8fG4uaXNJbmNpZGVudEVkZ2VJblJlc3VsdCgpfHwwIT09bi5nZXRFZGdlcygpLmdldERlZ3JlZSgpJiZ0IT09aWkuSU5URVJTRUNUSU9OKSl7dmFyIGk9bi5nZXRMYWJlbCgpO2lpLmlzUmVzdWx0T2ZPcChpLHQpJiZ0aGlzLmZpbHRlckNvdmVyZWROb2RlVG9Qb2ludChuKX19fSxidWlsZDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5leHRyYWN0Tm9uQ292ZXJlZFJlc3VsdE5vZGVzKHQpLHRoaXMucmVzdWx0UG9pbnRMaXN0fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBMbn19KSxlKFJuLnByb3RvdHlwZSx7bG9jYXRlOmZ1bmN0aW9uKHQpe30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gUm59fSksZShUbi5wcm90b3R5cGUse2xvY2F0ZTpmdW5jdGlvbih0KXtyZXR1cm4gVG4ubG9jYXRlKHQsdGhpcy5nZW9tKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bUm5dfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBUbn19KSxUbi5pc1BvaW50SW5SaW5nPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISFlLmdldEVudmVsb3BlSW50ZXJuYWwoKS5pbnRlcnNlY3RzKHQpJiZoZS5pc1BvaW50SW5SaW5nKHQsZS5nZXRDb29yZGluYXRlcygpKX0sVG4uY29udGFpbnNQb2ludEluUG9seWdvbj1mdW5jdGlvbih0LGUpe2lmKGUuaXNFbXB0eSgpKXJldHVybiExO3ZhciBuPWUuZ2V0RXh0ZXJpb3JSaW5nKCk7aWYoIVRuLmlzUG9pbnRJblJpbmcodCxuKSlyZXR1cm4hMTtmb3IodmFyIGk9MDtpPGUuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7aSsrKXt2YXIgcj1lLmdldEludGVyaW9yUmluZ04oaSk7aWYoVG4uaXNQb2ludEluUmluZyh0LHIpKXJldHVybiExfXJldHVybiEwfSxUbi5jb250YWluc1BvaW50PWZ1bmN0aW9uKHQsZSl7aWYoZSBpbnN0YW5jZW9mIFR0KXJldHVybiBUbi5jb250YWluc1BvaW50SW5Qb2x5Z29uKHQsZSk7aWYoZSBpbnN0YW5jZW9mIGZ0KWZvcih2YXIgbj1uZXcgUmUoZSk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZihpIT09ZSYmVG4uY29udGFpbnNQb2ludCh0LGkpKXJldHVybiEwfXJldHVybiExfSxUbi5sb2NhdGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5pc0VtcHR5KCk/TC5FWFRFUklPUjpUbi5jb250YWluc1BvaW50KHQsZSk/TC5JTlRFUklPUjpMLkVYVEVSSU9SfSxlKFBuLnByb3RvdHlwZSx7Z2V0TmV4dENXOmZ1bmN0aW9uKHQpe3RoaXMuZ2V0RWRnZXMoKTt2YXIgZT10aGlzLmVkZ2VMaXN0LmluZGV4T2YodCksbj1lLTE7cmV0dXJuIDA9PT1lJiYobj10aGlzLmVkZ2VMaXN0LnNpemUoKS0xKSx0aGlzLmVkZ2VMaXN0LmdldChuKX0scHJvcGFnYXRlU2lkZUxhYmVsczpmdW5jdGlvbih0KXtmb3IodmFyIGU9TC5OT05FLG49dGhpcy5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCkscj1pLmdldExhYmVsKCk7ci5pc0FyZWEodCkmJnIuZ2V0TG9jYXRpb24odCxjbi5MRUZUKSE9PUwuTk9ORSYmKGU9ci5nZXRMb2NhdGlvbih0LGNuLkxFRlQpKX1pZihlPT09TC5OT05FKXJldHVybiBudWxsO2Zvcih2YXIgcz1lLG49dGhpcy5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCkscj1pLmdldExhYmVsKCk7aWYoci5nZXRMb2NhdGlvbih0LGNuLk9OKT09PUwuTk9ORSYmci5zZXRMb2NhdGlvbih0LGNuLk9OLHMpLHIuaXNBcmVhKHQpKXt2YXIgbz1yLmdldExvY2F0aW9uKHQsY24uTEVGVCksYT1yLmdldExvY2F0aW9uKHQsY24uUklHSFQpO2lmKGEhPT1MLk5PTkUpe2lmKGEhPT1zKXRocm93IG5ldyBzbihcInNpZGUgbG9jYXRpb24gY29uZmxpY3RcIixpLmdldENvb3JkaW5hdGUoKSk7bz09PUwuTk9ORSYmZi5zaG91bGROZXZlclJlYWNoSGVyZShcImZvdW5kIHNpbmdsZSBudWxsIHNpZGUgKGF0IFwiK2kuZ2V0Q29vcmRpbmF0ZSgpK1wiKVwiKSxzPW99ZWxzZSBmLmlzVHJ1ZShyLmdldExvY2F0aW9uKHQsY24uTEVGVCk9PT1MLk5PTkUsXCJmb3VuZCBzaW5nbGUgbnVsbCBzaWRlXCIpLHIuc2V0TG9jYXRpb24odCxjbi5SSUdIVCxzKSxyLnNldExvY2F0aW9uKHQsY24uTEVGVCxzKX19fSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5pdGVyYXRvcigpO2lmKCF0Lmhhc05leHQoKSlyZXR1cm4gbnVsbDt2YXIgZT10Lm5leHQoKTtyZXR1cm4gZS5nZXRDb29yZGluYXRlKCl9LHByaW50OmZ1bmN0aW9uKHQpe0Eub3V0LnByaW50bG4oXCJFZGdlRW5kU3RhcjogICBcIit0aGlzLmdldENvb3JkaW5hdGUoKSk7Zm9yKHZhciBlPXRoaXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO1xubi5wcmludCh0KX19LGlzQXJlYUxhYmVsc0NvbnNpc3RlbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY29tcHV0ZUVkZ2VFbmRMYWJlbHModC5nZXRCb3VuZGFyeU5vZGVSdWxlKCkpLHRoaXMuY2hlY2tBcmVhTGFiZWxzQ29uc2lzdGVudCgwKX0sY2hlY2tBcmVhTGFiZWxzQ29uc2lzdGVudDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEVkZ2VzKCk7aWYoZS5zaXplKCk8PTApcmV0dXJuITA7dmFyIG49ZS5zaXplKCktMSxpPWUuZ2V0KG4pLmdldExhYmVsKCkscj1pLmdldExvY2F0aW9uKHQsY24uTEVGVCk7Zi5pc1RydWUociE9PUwuTk9ORSxcIkZvdW5kIHVubGFiZWxsZWQgYXJlYSBlZGdlXCIpO2Zvcih2YXIgcz1yLG89dGhpcy5pdGVyYXRvcigpO28uaGFzTmV4dCgpOyl7dmFyIGE9by5uZXh0KCksdT1hLmdldExhYmVsKCk7Zi5pc1RydWUodS5pc0FyZWEodCksXCJGb3VuZCBub24tYXJlYSBlZGdlXCIpO3ZhciBsPXUuZ2V0TG9jYXRpb24odCxjbi5MRUZUKSxoPXUuZ2V0TG9jYXRpb24odCxjbi5SSUdIVCk7aWYobD09PWgpcmV0dXJuITE7aWYoaCE9PXMpcmV0dXJuITE7cz1sfXJldHVybiEwfSxmaW5kSW5kZXg6ZnVuY3Rpb24odCl7dGhpcy5pdGVyYXRvcigpO2Zvcih2YXIgZT0wO2U8dGhpcy5lZGdlTGlzdC5zaXplKCk7ZSsrKXt2YXIgbj10aGlzLmVkZ2VMaXN0LmdldChlKTtpZihuPT09dClyZXR1cm4gZX1yZXR1cm4tMX0saXRlcmF0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRFZGdlcygpLml0ZXJhdG9yKCl9LGdldEVkZ2VzOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLmVkZ2VMaXN0JiYodGhpcy5lZGdlTGlzdD1uZXcgSSh0aGlzLmVkZ2VNYXAudmFsdWVzKCkpKSx0aGlzLmVkZ2VMaXN0fSxnZXRMb2NhdGlvbjpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMucHRJbkFyZWFMb2NhdGlvblt0XT09PUwuTk9ORSYmKHRoaXMucHRJbkFyZWFMb2NhdGlvblt0XT1Ubi5sb2NhdGUoZSxuW3RdLmdldEdlb21ldHJ5KCkpKSx0aGlzLnB0SW5BcmVhTG9jYXRpb25bdF19LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFA7dC5hcHBlbmQoXCJFZGdlRW5kU3RhcjogICBcIit0aGlzLmdldENvb3JkaW5hdGUoKSksdC5hcHBlbmQoXCJcXG5cIik7Zm9yKHZhciBlPXRoaXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3QuYXBwZW5kKG4pLHQuYXBwZW5kKFwiXFxuXCIpfXJldHVybiB0LnRvU3RyaW5nKCl9LGNvbXB1dGVFZGdlRW5kTGFiZWxzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLmNvbXB1dGVMYWJlbCh0KX19LGNvbXB1dGVMYWJlbGxpbmc6ZnVuY3Rpb24odCl7dGhpcy5jb21wdXRlRWRnZUVuZExhYmVscyh0WzBdLmdldEJvdW5kYXJ5Tm9kZVJ1bGUoKSksdGhpcy5wcm9wYWdhdGVTaWRlTGFiZWxzKDApLHRoaXMucHJvcGFnYXRlU2lkZUxhYmVscygxKTtmb3IodmFyIGU9WyExLCExXSxuPXRoaXMuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspZm9yKHZhciBpPW4ubmV4dCgpLHI9aS5nZXRMYWJlbCgpLHM9MDtzPDI7cysrKXIuaXNMaW5lKHMpJiZyLmdldExvY2F0aW9uKHMpPT09TC5CT1VOREFSWSYmKGVbc109ITApO2Zvcih2YXIgbj10aGlzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KWZvcih2YXIgaT1uLm5leHQoKSxyPWkuZ2V0TGFiZWwoKSxzPTA7czwyO3MrKylpZihyLmlzQW55TnVsbChzKSl7dmFyIG89TC5OT05FO2lmKGVbc10pbz1MLkVYVEVSSU9SO2Vsc2V7dmFyIGE9aS5nZXRDb29yZGluYXRlKCk7bz10aGlzLmdldExvY2F0aW9uKHMsYSx0KX1yLnNldEFsbExvY2F0aW9uc0lmTnVsbChzLG8pfX0sZ2V0RGVncmVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZU1hcC5zaXplKCl9LGluc2VydEVkZ2VFbmQ6ZnVuY3Rpb24odCxlKXt0aGlzLmVkZ2VNYXAucHV0KHQsZSksdGhpcy5lZGdlTGlzdD1udWxsfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBQbn19KSxoKGJuLFBuKSxlKGJuLnByb3RvdHlwZSx7bGlua1Jlc3VsdERpcmVjdGVkRWRnZXM6ZnVuY3Rpb24oKXt0aGlzLmdldFJlc3VsdEFyZWFFZGdlcygpO2Zvcih2YXIgdD1udWxsLGU9bnVsbCxuPXRoaXMuU0NBTk5JTkdfRk9SX0lOQ09NSU5HLGk9MDtpPHRoaXMucmVzdWx0QXJlYUVkZ2VMaXN0LnNpemUoKTtpKyspe3ZhciByPXRoaXMucmVzdWx0QXJlYUVkZ2VMaXN0LmdldChpKSxzPXIuZ2V0U3ltKCk7aWYoci5nZXRMYWJlbCgpLmlzQXJlYSgpKXN3aXRjaChudWxsPT09dCYmci5pc0luUmVzdWx0KCkmJih0PXIpLG4pe2Nhc2UgdGhpcy5TQ0FOTklOR19GT1JfSU5DT01JTkc6aWYoIXMuaXNJblJlc3VsdCgpKWNvbnRpbnVlO2U9cyxuPXRoaXMuTElOS0lOR19UT19PVVRHT0lORzticmVhaztjYXNlIHRoaXMuTElOS0lOR19UT19PVVRHT0lORzppZighci5pc0luUmVzdWx0KCkpY29udGludWU7ZS5zZXROZXh0KHIpLG49dGhpcy5TQ0FOTklOR19GT1JfSU5DT01JTkd9fWlmKG49PT10aGlzLkxJTktJTkdfVE9fT1VUR09JTkcpe2lmKG51bGw9PT10KXRocm93IG5ldyBzbihcIm5vIG91dGdvaW5nIGRpckVkZ2UgZm91bmRcIix0aGlzLmdldENvb3JkaW5hdGUoKSk7Zi5pc1RydWUodC5pc0luUmVzdWx0KCksXCJ1bmFibGUgdG8gbGluayBsYXN0IGluY29taW5nIGRpckVkZ2VcIiksZS5zZXROZXh0KHQpfX0saW5zZXJ0OmZ1bmN0aW9uKHQpe3ZhciBlPXQ7dGhpcy5pbnNlcnRFZGdlRW5kKGUsZSl9LGdldFJpZ2h0bW9zdEVkZ2U6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldEVkZ2VzKCksZT10LnNpemUoKTtpZihlPDEpcmV0dXJuIG51bGw7dmFyIG49dC5nZXQoMCk7aWYoMT09PWUpcmV0dXJuIG47dmFyIGk9dC5nZXQoZS0xKSxyPW4uZ2V0UXVhZHJhbnQoKSxzPWkuZ2V0UXVhZHJhbnQoKTtpZihKZS5pc05vcnRoZXJuKHIpJiZKZS5pc05vcnRoZXJuKHMpKXJldHVybiBuO2lmKCFKZS5pc05vcnRoZXJuKHIpJiYhSmUuaXNOb3J0aGVybihzKSlyZXR1cm4gaTtyZXR1cm4gMCE9PW4uZ2V0RHkoKT9uOjAhPT1pLmdldER5KCk/aTooZi5zaG91bGROZXZlclJlYWNoSGVyZShcImZvdW5kIHR3byBob3Jpem9udGFsIGVkZ2VzIGluY2lkZW50IG9uIG5vZGVcIiksbnVsbCl9LHByaW50OmZ1bmN0aW9uKHQpe0Eub3V0LnByaW50bG4oXCJEaXJlY3RlZEVkZ2VTdGFyOiBcIit0aGlzLmdldENvb3JkaW5hdGUoKSk7Zm9yKHZhciBlPXRoaXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3QucHJpbnQoXCJvdXQgXCIpLG4ucHJpbnQodCksdC5wcmludGxuKCksdC5wcmludChcImluIFwiKSxuLmdldFN5bSgpLnByaW50KHQpLHQucHJpbnRsbigpfX0sZ2V0UmVzdWx0QXJlYUVkZ2VzOmZ1bmN0aW9uKCl7aWYobnVsbCE9PXRoaXMucmVzdWx0QXJlYUVkZ2VMaXN0KXJldHVybiB0aGlzLnJlc3VsdEFyZWFFZGdlTGlzdDt0aGlzLnJlc3VsdEFyZWFFZGdlTGlzdD1uZXcgSTtmb3IodmFyIHQ9dGhpcy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7KGUuaXNJblJlc3VsdCgpfHxlLmdldFN5bSgpLmlzSW5SZXN1bHQoKSkmJnRoaXMucmVzdWx0QXJlYUVkZ2VMaXN0LmFkZChlKX1yZXR1cm4gdGhpcy5yZXN1bHRBcmVhRWRnZUxpc3R9LHVwZGF0ZUxhYmVsbGluZzpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCksaT1uLmdldExhYmVsKCk7aS5zZXRBbGxMb2NhdGlvbnNJZk51bGwoMCx0LmdldExvY2F0aW9uKDApKSxpLnNldEFsbExvY2F0aW9uc0lmTnVsbCgxLHQuZ2V0TG9jYXRpb24oMSkpfX0sbGlua0FsbERpcmVjdGVkRWRnZXM6ZnVuY3Rpb24oKXt0aGlzLmdldEVkZ2VzKCk7Zm9yKHZhciB0PW51bGwsZT1udWxsLG49dGhpcy5lZGdlTGlzdC5zaXplKCktMTtuPj0wO24tLSl7dmFyIGk9dGhpcy5lZGdlTGlzdC5nZXQobikscj1pLmdldFN5bSgpO251bGw9PT1lJiYoZT1yKSxudWxsIT09dCYmci5zZXROZXh0KHQpLHQ9aX1lLnNldE5leHQodCl9LGNvbXB1dGVEZXB0aHM6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy5maW5kSW5kZXgodCksbj0odC5nZXRMYWJlbCgpLHQuZ2V0RGVwdGgoY24uTEVGVCkpLGk9dC5nZXREZXB0aChjbi5SSUdIVCkscj10aGlzLmNvbXB1dGVEZXB0aHMoZSsxLHRoaXMuZWRnZUxpc3Quc2l6ZSgpLG4pLHM9dGhpcy5jb21wdXRlRGVwdGhzKDAsZSxyKTtpZihzIT09aSl0aHJvdyBuZXcgc24oXCJkZXB0aCBtaXNtYXRjaCBhdCBcIit0LmdldENvb3JkaW5hdGUoKSl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciBvPWFyZ3VtZW50c1swXSxhPWFyZ3VtZW50c1sxXSx1PWFyZ3VtZW50c1syXSxsPXUsaD1vO2g8YTtoKyspe3ZhciBjPXRoaXMuZWRnZUxpc3QuZ2V0KGgpO2MuZ2V0TGFiZWwoKTtjLnNldEVkZ2VEZXB0aHMoY24uUklHSFQsbCksbD1jLmdldERlcHRoKGNuLkxFRlQpfXJldHVybiBsfX0sbWVyZ2VTeW1MYWJlbHM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCksbj1lLmdldExhYmVsKCk7bi5tZXJnZShlLmdldFN5bSgpLmdldExhYmVsKCkpfX0sbGlua01pbmltYWxEaXJlY3RlZEVkZ2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1udWxsLG49bnVsbCxpPXRoaXMuU0NBTk5JTkdfRk9SX0lOQ09NSU5HLHI9dGhpcy5yZXN1bHRBcmVhRWRnZUxpc3Quc2l6ZSgpLTE7cj49MDtyLS0pe3ZhciBzPXRoaXMucmVzdWx0QXJlYUVkZ2VMaXN0LmdldChyKSxvPXMuZ2V0U3ltKCk7c3dpdGNoKG51bGw9PT1lJiZzLmdldEVkZ2VSaW5nKCk9PT10JiYoZT1zKSxpKXtjYXNlIHRoaXMuU0NBTk5JTkdfRk9SX0lOQ09NSU5HOmlmKG8uZ2V0RWRnZVJpbmcoKSE9PXQpY29udGludWU7bj1vLGk9dGhpcy5MSU5LSU5HX1RPX09VVEdPSU5HO2JyZWFrO2Nhc2UgdGhpcy5MSU5LSU5HX1RPX09VVEdPSU5HOmlmKHMuZ2V0RWRnZVJpbmcoKSE9PXQpY29udGludWU7bi5zZXROZXh0TWluKHMpLGk9dGhpcy5TQ0FOTklOR19GT1JfSU5DT01JTkd9fWk9PT10aGlzLkxJTktJTkdfVE9fT1VUR09JTkcmJihmLmlzVHJ1ZShudWxsIT09ZSxcImZvdW5kIG51bGwgZm9yIGZpcnN0IG91dGdvaW5nIGRpckVkZ2VcIiksZi5pc1RydWUoZS5nZXRFZGdlUmluZygpPT09dCxcInVuYWJsZSB0byBsaW5rIGxhc3QgaW5jb21pbmcgZGlyRWRnZVwiKSxuLnNldE5leHRNaW4oZSkpfSxnZXRPdXRnb2luZ0RlZ3JlZTpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIHQ9MCxlPXRoaXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO24uaXNJblJlc3VsdCgpJiZ0Kyt9cmV0dXJuIHR9aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgaT1hcmd1bWVudHNbMF0sdD0wLGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bi5nZXRFZGdlUmluZygpPT09aSYmdCsrfXJldHVybiB0fX0sZ2V0TGFiZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYWJlbH0sZmluZENvdmVyZWRMaW5lRWRnZXM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9TC5OT05FLGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCksaT1uLmdldFN5bSgpO2lmKCFuLmlzTGluZUVkZ2UoKSl7aWYobi5pc0luUmVzdWx0KCkpe3Q9TC5JTlRFUklPUjticmVha31pZihpLmlzSW5SZXN1bHQoKSl7dD1MLkVYVEVSSU9SO2JyZWFrfX19aWYodD09PUwuTk9ORSlyZXR1cm4gbnVsbDtmb3IodmFyIHI9dCxlPXRoaXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLGk9bi5nZXRTeW0oKTtuLmlzTGluZUVkZ2UoKT9uLmdldEVkZ2UoKS5zZXRDb3ZlcmVkKHI9PT1MLklOVEVSSU9SKToobi5pc0luUmVzdWx0KCkmJihyPUwuRVhURVJJT1IpLGkuaXNJblJlc3VsdCgpJiYocj1MLklOVEVSSU9SKSl9fSxjb21wdXRlTGFiZWxsaW5nOmZ1bmN0aW9uKHQpe1BuLnByb3RvdHlwZS5jb21wdXRlTGFiZWxsaW5nLmNhbGwodGhpcyx0KSx0aGlzLmxhYmVsPW5ldyBnbihMLk5PTkUpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KWZvcih2YXIgbj1lLm5leHQoKSxpPW4uZ2V0RWRnZSgpLHI9aS5nZXRMYWJlbCgpLHM9MDtzPDI7cysrKXt2YXIgbz1yLmdldExvY2F0aW9uKHMpO28hPT1MLklOVEVSSU9SJiZvIT09TC5CT1VOREFSWXx8dGhpcy5sYWJlbC5zZXRMb2NhdGlvbihzLEwuSU5URVJJT1IpfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gYm59fSksaChPbixObiksZShPbi5wcm90b3R5cGUse2NyZWF0ZU5vZGU6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB5bih0LG5ldyBibil9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE9ufX0pLGUoX24ucHJvdG90eXBlLHtjb21wdXRlSW50ZXJzZWN0aW9uczpmdW5jdGlvbih0LGUpe3RoaXMubWNlLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW4odGhpcy5jaGFpbkluZGV4LHQubWNlLHQuY2hhaW5JbmRleCxlKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gX259fSksZShNbi5wcm90b3R5cGUse2lzRGVsZXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXZlbnRUeXBlPT09TW4uREVMRVRFfSxzZXREZWxldGVFdmVudEluZGV4OmZ1bmN0aW9uKHQpe3RoaXMuZGVsZXRlRXZlbnRJbmRleD10fSxnZXRPYmplY3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYmp9LGNvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLnhWYWx1ZTxlLnhWYWx1ZT8tMTp0aGlzLnhWYWx1ZT5lLnhWYWx1ZT8xOnRoaXMuZXZlbnRUeXBlPGUuZXZlbnRUeXBlPy0xOnRoaXMuZXZlbnRUeXBlPmUuZXZlbnRUeXBlPzE6MH0sZ2V0SW5zZXJ0RXZlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnNlcnRFdmVudH0saXNJbnNlcnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ldmVudFR5cGU9PT1Nbi5JTlNFUlR9LGlzU2FtZUxhYmVsOmZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dGhpcy5sYWJlbCYmdGhpcy5sYWJlbD09PXQubGFiZWx9LGdldERlbGV0ZUV2ZW50SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZWxldGVFdmVudEluZGV4fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltzXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTW59fSksTW4uSU5TRVJUPTEsTW4uREVMRVRFPTIsZShEbi5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIERufX0pLGUoQW4ucHJvdG90eXBlLHtpc1RyaXZpYWxJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCxlLG4saSl7aWYodD09PW4mJjE9PT10aGlzLmxpLmdldEludGVyc2VjdGlvbk51bSgpKXtpZihBbi5pc0FkamFjZW50U2VnbWVudHMoZSxpKSlyZXR1cm4hMDtpZih0LmlzQ2xvc2VkKCkpe3ZhciByPXQuZ2V0TnVtUG9pbnRzKCktMTtpZigwPT09ZSYmaT09PXJ8fDA9PT1pJiZlPT09cilyZXR1cm4hMH19cmV0dXJuITF9LGdldFByb3BlckludGVyc2VjdGlvblBvaW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcGVySW50ZXJzZWN0aW9uUG9pbnR9LHNldElzRG9uZUlmUHJvcGVySW50OmZ1bmN0aW9uKHQpe3RoaXMuaXNEb25lV2hlblByb3BlckludD10fSxoYXNQcm9wZXJJbnRlcmlvckludGVyc2VjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc1Byb3BlckludGVyaW9yfSxpc0JvdW5kYXJ5UG9pbnRJbnRlcm5hbDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKSxyPWkuZ2V0Q29vcmRpbmF0ZSgpO2lmKHQuaXNJbnRlcnNlY3Rpb24ocikpcmV0dXJuITB9cmV0dXJuITF9LGhhc1Byb3BlckludGVyc2VjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc1Byb3Blcn0saGFzSW50ZXJzZWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc0ludGVyc2VjdGlvbn0saXNEb25lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzRG9uZX0saXNCb3VuZGFyeVBvaW50OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGwhPT1lJiYoISF0aGlzLmlzQm91bmRhcnlQb2ludEludGVybmFsKHQsZVswXSl8fCEhdGhpcy5pc0JvdW5kYXJ5UG9pbnRJbnRlcm5hbCh0LGVbMV0pKX0sc2V0Qm91bmRhcnlOb2RlczpmdW5jdGlvbih0LGUpe3RoaXMuYmR5Tm9kZXM9bmV3IEFycmF5KDIpLmZpbGwobnVsbCksdGhpcy5iZHlOb2Rlc1swXT10LHRoaXMuYmR5Tm9kZXNbMV09ZX0sYWRkSW50ZXJzZWN0aW9uczpmdW5jdGlvbih0LGUsbixpKXtpZih0PT09biYmZT09PWkpcmV0dXJuIG51bGw7dGhpcy5udW1UZXN0cysrO3ZhciByPXQuZ2V0Q29vcmRpbmF0ZXMoKVtlXSxzPXQuZ2V0Q29vcmRpbmF0ZXMoKVtlKzFdLG89bi5nZXRDb29yZGluYXRlcygpW2ldLGE9bi5nZXRDb29yZGluYXRlcygpW2krMV07dGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHIscyxvLGEpLHRoaXMubGkuaGFzSW50ZXJzZWN0aW9uKCkmJih0aGlzLnJlY29yZElzb2xhdGVkJiYodC5zZXRJc29sYXRlZCghMSksbi5zZXRJc29sYXRlZCghMSkpLHRoaXMubnVtSW50ZXJzZWN0aW9ucysrLHRoaXMuaXNUcml2aWFsSW50ZXJzZWN0aW9uKHQsZSxuLGkpfHwodGhpcy5faGFzSW50ZXJzZWN0aW9uPSEwLCF0aGlzLmluY2x1ZGVQcm9wZXImJnRoaXMubGkuaXNQcm9wZXIoKXx8KHQuYWRkSW50ZXJzZWN0aW9ucyh0aGlzLmxpLGUsMCksbi5hZGRJbnRlcnNlY3Rpb25zKHRoaXMubGksaSwxKSksdGhpcy5saS5pc1Byb3BlcigpJiYodGhpcy5wcm9wZXJJbnRlcnNlY3Rpb25Qb2ludD10aGlzLmxpLmdldEludGVyc2VjdGlvbigwKS5jb3B5KCksdGhpcy5oYXNQcm9wZXI9ITAsdGhpcy5pc0RvbmVXaGVuUHJvcGVySW50JiYodGhpcy5faXNEb25lPSEwKSx0aGlzLmlzQm91bmRhcnlQb2ludCh0aGlzLmxpLHRoaXMuYmR5Tm9kZXMpfHwodGhpcy5oYXNQcm9wZXJJbnRlcmlvcj0hMCkpKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEFufX0pLEFuLmlzQWRqYWNlbnRTZWdtZW50cz1mdW5jdGlvbih0LGUpe3JldHVybiAxPT09TWF0aC5hYnModC1lKX0saChGbixEbiksZShGbi5wcm90b3R5cGUse3ByZXBhcmVFdmVudHM6ZnVuY3Rpb24oKXtoby5zb3J0KHRoaXMuZXZlbnRzKTtmb3IodmFyIHQ9MDt0PHRoaXMuZXZlbnRzLnNpemUoKTt0Kyspe3ZhciBlPXRoaXMuZXZlbnRzLmdldCh0KTtlLmlzRGVsZXRlKCkmJmUuZ2V0SW5zZXJ0RXZlbnQoKS5zZXREZWxldGVFdmVudEluZGV4KHQpfX0sY29tcHV0ZUludGVyc2VjdGlvbnM6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubk92ZXJsYXBzPTAsdGhpcy5wcmVwYXJlRXZlbnRzKCk7Zm9yKHZhciBlPTA7ZTx0aGlzLmV2ZW50cy5zaXplKCk7ZSsrKXt2YXIgbj10aGlzLmV2ZW50cy5nZXQoZSk7aWYobi5pc0luc2VydCgpJiZ0aGlzLnByb2Nlc3NPdmVybGFwcyhlLG4uZ2V0RGVsZXRlRXZlbnRJbmRleCgpLG4sdCksdC5pc0RvbmUoKSlicmVha319ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aClpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIEFuJiZSKGFyZ3VtZW50c1swXSx5KSYmUihhcmd1bWVudHNbMV0seSkpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXTt0aGlzLmFkZEVkZ2VzKGksaSksdGhpcy5hZGRFZGdlcyhyLHIpLHRoaXMuY29tcHV0ZUludGVyc2VjdGlvbnMocyl9ZWxzZSBpZihcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1syXSYmUihhcmd1bWVudHNbMF0seSkmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgQW4pe3ZhciBvPWFyZ3VtZW50c1swXSxhPWFyZ3VtZW50c1sxXSx1PWFyZ3VtZW50c1syXTt1P3RoaXMuYWRkRWRnZXMobyxudWxsKTp0aGlzLmFkZEVkZ2VzKG8pLHRoaXMuY29tcHV0ZUludGVyc2VjdGlvbnMoYSl9fSxhZGRFZGdlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuZ2V0TW9ub3RvbmVDaGFpbkVkZ2UoKSxpPW4uZ2V0U3RhcnRJbmRleGVzKCkscj0wO3I8aS5sZW5ndGgtMTtyKyspe3ZhciBzPW5ldyBfbihuLHIpLG89bmV3IE1uKGUsbi5nZXRNaW5YKHIpLHMpO3RoaXMuZXZlbnRzLmFkZChvKSx0aGlzLmV2ZW50cy5hZGQobmV3IE1uKG4uZ2V0TWF4WChyKSxvKSl9fSxwcm9jZXNzT3ZlcmxhcHM6ZnVuY3Rpb24odCxlLG4saSl7Zm9yKHZhciByPW4uZ2V0T2JqZWN0KCkscz10O3M8ZTtzKyspe3ZhciBvPXRoaXMuZXZlbnRzLmdldChzKTtpZihvLmlzSW5zZXJ0KCkpe3ZhciBhPW8uZ2V0T2JqZWN0KCk7bi5pc1NhbWVMYWJlbChvKXx8KHIuY29tcHV0ZUludGVyc2VjdGlvbnMoYSxpKSx0aGlzLm5PdmVybGFwcysrKX19fSxhZGRFZGdlczpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgdD1hcmd1bWVudHNbMF0sZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLmFkZEVkZ2UobixuKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0sZT1pLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLmFkZEVkZ2UobixyKX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEZufX0pLGUoR24ucHJvdG90eXBlLHtnZXRNaW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5taW59LGludGVyc2VjdHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4hKHRoaXMubWluPmV8fHRoaXMubWF4PHQpfSxnZXRNYXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXh9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHNlLnRvTGluZVN0cmluZyhuZXcgZyh0aGlzLm1pbiwwKSxuZXcgZyh0aGlzLm1heCwwKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEdufX0pLGUocW4ucHJvdG90eXBlLHtjb21wYXJlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dCxpPWUscj0obi5taW4rbi5tYXgpLzIscz0oaS5taW4raS5tYXgpLzI7cmV0dXJuIHI8cz8tMTpyPnM/MTowfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblthXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcW59fSksR24uTm9kZUNvbXBhcmF0b3I9cW4saChCbixHbiksZShCbi5wcm90b3R5cGUse3F1ZXJ5OmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5pbnRlcnNlY3RzKHQsZSk/dm9pZCBuLnZpc2l0SXRlbSh0aGlzLml0ZW0pOm51bGx9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEJufX0pLGgoem4sR24pLGUoem4ucHJvdG90eXBlLHtidWlsZEV4dGVudDpmdW5jdGlvbih0LGUpe3RoaXMubWluPU1hdGgubWluKHQubWluLGUubWluKSx0aGlzLm1heD1NYXRoLm1heCh0Lm1heCxlLm1heCl9LHF1ZXJ5OmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5pbnRlcnNlY3RzKHQsZSk/KG51bGwhPT10aGlzLm5vZGUxJiZ0aGlzLm5vZGUxLnF1ZXJ5KHQsZSxuKSx2b2lkKG51bGwhPT10aGlzLm5vZGUyJiZ0aGlzLm5vZGUyLnF1ZXJ5KHQsZSxuKSkpOm51bGx9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHpufX0pLGUoVm4ucHJvdG90eXBlLHtidWlsZFRyZWU6ZnVuY3Rpb24oKXtoby5zb3J0KHRoaXMubGVhdmVzLG5ldyBJbnRlcnZhbFJUcmVlTm9kZS5Ob2RlQ29tcGFyYXRvcik7Zm9yKHZhciB0PXRoaXMubGVhdmVzLGU9bnVsbCxuPW5ldyBJOzspe2lmKHRoaXMuYnVpbGRMZXZlbCh0LG4pLDE9PT1uLnNpemUoKSlyZXR1cm4gbi5nZXQoMCk7ZT10LHQ9bixuPWV9fSxpbnNlcnQ6ZnVuY3Rpb24odCxlLG4pe2lmKG51bGwhPT10aGlzLnJvb3QpdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbihcIkluZGV4IGNhbm5vdCBiZSBhZGRlZCB0byBvbmNlIGl0IGhhcyBiZWVuIHF1ZXJpZWRcIik7dGhpcy5sZWF2ZXMuYWRkKG5ldyBCbih0LGUsbikpfSxxdWVyeTpmdW5jdGlvbih0LGUsbil7dGhpcy5pbml0KCksdGhpcy5yb290LnF1ZXJ5KHQsZSxuKX0sYnVpbGRSb290OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLnJvb3Q/bnVsbDp2b2lkKHRoaXMucm9vdD10aGlzLmJ1aWxkVHJlZSgpKX0scHJpbnROb2RlOmZ1bmN0aW9uKHQpe0Eub3V0LnByaW50bG4oc2UudG9MaW5lU3RyaW5nKG5ldyBnKHQubWluLHRoaXMubGV2ZWwpLG5ldyBnKHQubWF4LHRoaXMubGV2ZWwpKSl9LGluaXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMucm9vdD9udWxsOnZvaWQgdGhpcy5idWlsZFJvb3QoKX0sYnVpbGRMZXZlbDpmdW5jdGlvbih0LGUpe3RoaXMubGV2ZWwrKyxlLmNsZWFyKCk7Zm9yKHZhciBuPTA7bjx0LnNpemUoKTtuKz0yKXt2YXIgaT10LmdldChuKSxyPW4rMTx0LnNpemUoKT90LmdldChuKTpudWxsO2lmKG51bGw9PT1yKWUuYWRkKGkpO2Vsc2V7dmFyIHM9bmV3IHpuKHQuZ2V0KG4pLHQuZ2V0KG4rMSkpO2UuYWRkKHMpfX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFZufX0pLGUoa24ucHJvdG90eXBlLHtmaWx0ZXI6ZnVuY3Rpb24odCl7aWYodGhpcy5pc0ZvcmNlZFRvTGluZVN0cmluZyYmdCBpbnN0YW5jZW9mIGJ0KXt2YXIgZT10LmdldEZhY3RvcnkoKS5jcmVhdGVMaW5lU3RyaW5nKHQuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlKCkpO3JldHVybiB0aGlzLmxpbmVzLmFkZChlKSxudWxsfXQgaW5zdGFuY2VvZiBTdCYmdGhpcy5saW5lcy5hZGQodCl9LHNldEZvcmNlVG9MaW5lU3RyaW5nOmZ1bmN0aW9uKHQpe3RoaXMuaXNGb3JjZWRUb0xpbmVTdHJpbmc9dH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bcV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGtufX0pLGtuLmdldEdlb21ldHJ5PWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdC5nZXRGYWN0b3J5KCkuYnVpbGRHZW9tZXRyeShrbi5nZXRMaW5lcyh0KSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gZS5nZXRGYWN0b3J5KCkuYnVpbGRHZW9tZXRyeShrbi5nZXRMaW5lcyhlLG4pKX19LGtuLmdldExpbmVzPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4ga24uZ2V0TGluZXModCwhMSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFIoYXJndW1lbnRzWzBdLHYpJiZSKGFyZ3VtZW50c1sxXSx2KSl7Zm9yKHZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPWUuaXRlcmF0b3IoKTtpLmhhc05leHQoKTspe3ZhciByPWkubmV4dCgpO2tuLmdldExpbmVzKHIsbil9cmV0dXJuIG59aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCJiZcImJvb2xlYW5cIj09dHlwZW9mIGFyZ3VtZW50c1sxXSl7dmFyIHM9YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdLGE9bmV3IEk7cmV0dXJuIHMuYXBwbHkobmV3IGtuKGEsbykpLGF9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCJiZSKGFyZ3VtZW50c1sxXSx2KSl7dmFyIHU9YXJndW1lbnRzWzBdLGw9YXJndW1lbnRzWzFdO3JldHVybiB1IGluc3RhbmNlb2YgU3Q/bC5hZGQodSk6dS5hcHBseShuZXcga24obCkpLGx9fWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFwiYm9vbGVhblwiPT10eXBlb2YgYXJndW1lbnRzWzJdJiZSKGFyZ3VtZW50c1swXSx2KSYmUihhcmd1bWVudHNbMV0sdikpe2Zvcih2YXIgaD1hcmd1bWVudHNbMF0sYz1hcmd1bWVudHNbMV0sZj1hcmd1bWVudHNbMl0saT1oLml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtrbi5nZXRMaW5lcyhyLGMsZil9cmV0dXJuIGN9aWYoXCJib29sZWFuXCI9PXR5cGVvZiBhcmd1bWVudHNbMl0mJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgQiYmUihhcmd1bWVudHNbMV0sdikpe3ZhciBnPWFyZ3VtZW50c1swXSxkPWFyZ3VtZW50c1sxXSxwPWFyZ3VtZW50c1syXTtyZXR1cm4gZy5hcHBseShuZXcga24oZCxwKSksZH19fSxlKFluLnByb3RvdHlwZSx7dmlzaXRJdGVtOmZ1bmN0aW9uKHQpe3RoaXMuaXRlbXMuYWRkKHQpfSxnZXRJdGVtczpmdW5jdGlvbigpe3JldHVybiB0aGlzLml0ZW1zfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltBZV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFlufX0pLGUoVW4ucHJvdG90eXBlLHtsb2NhdGU6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGxlKHQpLG49bmV3IFhuKGUpO3JldHVybiB0aGlzLmluZGV4LnF1ZXJ5KHQueSx0LnksbiksZS5nZXRMb2NhdGlvbigpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltSbl19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFVufX0pLGUoWG4ucHJvdG90eXBlLHt2aXNpdEl0ZW06ZnVuY3Rpb24odCl7dmFyIGU9dDt0aGlzLmNvdW50ZXIuY291bnRTZWdtZW50KGUuZ2V0Q29vcmRpbmF0ZSgwKSxlLmdldENvb3JkaW5hdGUoMSkpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltBZV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFhufX0pLGUoSG4ucHJvdG90eXBlLHtpbml0OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1rbi5nZXRMaW5lcyh0KSxuPWUuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpLHI9aS5nZXRDb29yZGluYXRlcygpO3RoaXMuYWRkTGluZShyKX19LGFkZExpbmU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTx0Lmxlbmd0aDtlKyspe3ZhciBuPW5ldyBjZSh0W2UtMV0sdFtlXSksaT1NYXRoLm1pbihuLnAwLnksbi5wMS55KSxyPU1hdGgubWF4KG4ucDAueSxuLnAxLnkpO3RoaXMuaW5kZXguaW5zZXJ0KGkscixuKX19LHF1ZXJ5OmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPW5ldyBZbjtyZXR1cm4gdGhpcy5pbmRleC5xdWVyeSh0LGUsbiksbi5nZXRJdGVtcygpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl07dGhpcy5pbmRleC5xdWVyeShpLHIscyl9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBIbn19KSxVbi5TZWdtZW50VmlzaXRvcj1YbixVbi5JbnRlcnZhbEluZGV4ZWRHZW9tZXRyeT1IbixlKFduLnByb3RvdHlwZSx7Z2V0U2VnbWVudEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VnbWVudEluZGV4fSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmR9LHByaW50OmZ1bmN0aW9uKHQpe3QucHJpbnQodGhpcy5jb29yZCksdC5wcmludChcIiBzZWcgIyA9IFwiK3RoaXMuc2VnbWVudEluZGV4KSx0LnByaW50bG4oXCIgZGlzdCA9IFwiK3RoaXMuZGlzdCl9LGNvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLmNvbXBhcmUoZS5zZWdtZW50SW5kZXgsZS5kaXN0KX0saXNFbmRQb2ludDpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXRoaXMuc2VnbWVudEluZGV4JiYwPT09dGhpcy5kaXN0fHx0aGlzLnNlZ21lbnRJbmRleD09PXR9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29vcmQrXCIgc2VnICMgPSBcIit0aGlzLnNlZ21lbnRJbmRleCtcIiBkaXN0ID0gXCIrdGhpcy5kaXN0fSxnZXREaXN0YW5jZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpc3R9LGNvbXBhcmU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5zZWdtZW50SW5kZXg8dD8tMTp0aGlzLnNlZ21lbnRJbmRleD50PzE6dGhpcy5kaXN0PGU/LTE6dGhpcy5kaXN0PmU/MTowfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltzXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gV259fSksZShqbi5wcm90b3R5cGUse3ByaW50OmZ1bmN0aW9uKHQpe3QucHJpbnRsbihcIkludGVyc2VjdGlvbnM6XCIpO2Zvcih2YXIgZT10aGlzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLnByaW50KHQpfX0saXRlcmF0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlTWFwLnZhbHVlcygpLml0ZXJhdG9yKCl9LGFkZFNwbGl0RWRnZXM6ZnVuY3Rpb24odCl7dGhpcy5hZGRFbmRwb2ludHMoKTtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpLG49ZS5uZXh0KCk7ZS5oYXNOZXh0KCk7KXt2YXIgaT1lLm5leHQoKSxyPXRoaXMuY3JlYXRlU3BsaXRFZGdlKG4saSk7dC5hZGQociksbj1pfX0sYWRkRW5kcG9pbnRzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lZGdlLnB0cy5sZW5ndGgtMTt0aGlzLmFkZCh0aGlzLmVkZ2UucHRzWzBdLDAsMCksdGhpcy5hZGQodGhpcy5lZGdlLnB0c1t0XSx0LDApfSxjcmVhdGVTcGxpdEVkZ2U6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnNlZ21lbnRJbmRleC10LnNlZ21lbnRJbmRleCsyLGk9dGhpcy5lZGdlLnB0c1tlLnNlZ21lbnRJbmRleF0scj1lLmRpc3Q+MHx8IWUuY29vcmQuZXF1YWxzMkQoaSk7cnx8bi0tO3ZhciBzPW5ldyBBcnJheShuKS5maWxsKG51bGwpLG89MDtzW28rK109bmV3IGcodC5jb29yZCk7Zm9yKHZhciBhPXQuc2VnbWVudEluZGV4KzE7YTw9ZS5zZWdtZW50SW5kZXg7YSsrKXNbbysrXT10aGlzLmVkZ2UucHRzW2FdO3JldHVybiByJiYoc1tvXT1lLmNvb3JkKSxuZXcgSm4ocyxuZXcgZ24odGhpcy5lZGdlLmxhYmVsKSl9LGFkZDpmdW5jdGlvbih0LGUsbil7dmFyIGk9bmV3IFduKHQsZSxuKSxyPXRoaXMubm9kZU1hcC5nZXQoaSk7cmV0dXJuIG51bGwhPT1yP3I6KHRoaXMubm9kZU1hcC5wdXQoaSxpKSxpKX0saXNJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO2lmKG4uY29vcmQuZXF1YWxzKHQpKXJldHVybiEwfXJldHVybiExfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBqbn19KSxlKEtuLnByb3RvdHlwZSx7Z2V0Q2hhaW5TdGFydEluZGljZXM6ZnVuY3Rpb24odCl7dmFyIGU9MCxuPW5ldyBJO24uYWRkKG5ldyBiKGUpKTtkb3t2YXIgaT10aGlzLmZpbmRDaGFpbkVuZCh0LGUpO24uYWRkKG5ldyBiKGkpKSxlPWl9d2hpbGUoZTx0Lmxlbmd0aC0xKTt2YXIgcj1Lbi50b0ludEFycmF5KG4pO3JldHVybiByfSxmaW5kQ2hhaW5FbmQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49SmUucXVhZHJhbnQodFtlXSx0W2UrMV0pLGk9ZSsxO2k8dC5sZW5ndGg7KXt2YXIgcj1KZS5xdWFkcmFudCh0W2ktMV0sdFtpXSk7aWYociE9PW4pYnJlYWs7aSsrfXJldHVybiBpLTF9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEtufX0pLEtuLnRvSW50QXJyYXk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXT10LmdldChuKS5pbnRWYWx1ZSgpO3JldHVybiBlfSxlKFpuLnByb3RvdHlwZSx7Z2V0Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdHN9LGdldE1heFg6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wdHNbdGhpcy5zdGFydEluZGV4W3RdXS54LG49dGhpcy5wdHNbdGhpcy5zdGFydEluZGV4W3QrMV1dLng7cmV0dXJuIGU+bj9lOm59LGdldE1pblg6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wdHNbdGhpcy5zdGFydEluZGV4W3RdXS54LG49dGhpcy5wdHNbdGhpcy5zdGFydEluZGV4W3QrMV1dLng7cmV0dXJuIGU8bj9lOm59LGNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW46ZnVuY3Rpb24oKXtpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdO3RoaXMuY29tcHV0ZUludGVyc2VjdHNGb3JDaGFpbih0aGlzLnN0YXJ0SW5kZXhbdF0sdGhpcy5zdGFydEluZGV4W3QrMV0sZSxlLnN0YXJ0SW5kZXhbbl0sZS5zdGFydEluZGV4W24rMV0saSl9ZWxzZSBpZig2PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHI9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLG89YXJndW1lbnRzWzJdLGE9YXJndW1lbnRzWzNdLHU9YXJndW1lbnRzWzRdLGw9YXJndW1lbnRzWzVdLGg9dGhpcy5wdHNbcl0sYz10aGlzLnB0c1tzXSxmPW8ucHRzW2FdLGc9by5wdHNbdV07aWYocy1yPT09MSYmdS1hPT09MSlyZXR1cm4gbC5hZGRJbnRlcnNlY3Rpb25zKHRoaXMuZSxyLG8uZSxhKSxudWxsO2lmKHRoaXMuZW52MS5pbml0KGgsYyksdGhpcy5lbnYyLmluaXQoZixnKSwhdGhpcy5lbnYxLmludGVyc2VjdHModGhpcy5lbnYyKSlyZXR1cm4gbnVsbDt2YXIgZD1NYXRoLnRydW5jKChyK3MpLzIpLHA9TWF0aC50cnVuYygoYSt1KS8yKTtyPGQmJihhPHAmJnRoaXMuY29tcHV0ZUludGVyc2VjdHNGb3JDaGFpbihyLGQsbyxhLHAsbCkscDx1JiZ0aGlzLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW4ocixkLG8scCx1LGwpKSxkPHMmJihhPHAmJnRoaXMuY29tcHV0ZUludGVyc2VjdHNGb3JDaGFpbihkLHMsbyxhLHAsbCkscDx1JiZ0aGlzLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW4oZCxzLG8scCx1LGwpKX19LGdldFN0YXJ0SW5kZXhlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0SW5kZXh9LGNvbXB1dGVJbnRlcnNlY3RzOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0aGlzLnN0YXJ0SW5kZXgubGVuZ3RoLTE7bisrKWZvcih2YXIgaT0wO2k8dC5zdGFydEluZGV4Lmxlbmd0aC0xO2krKyl0aGlzLmNvbXB1dGVJbnRlcnNlY3RzRm9yQ2hhaW4obix0LGksZSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFpufX0pLGUoUW4ucHJvdG90eXBlLHtnZXREZXB0aDpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmRlcHRoW3RdW2VdfSxzZXREZXB0aDpmdW5jdGlvbih0LGUsbil7dGhpcy5kZXB0aFt0XVtlXT1ufSxpc051bGw6ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciB0PTA7dDwyO3QrKylmb3IodmFyIGU9MDtlPDM7ZSsrKWlmKHRoaXMuZGVwdGhbdF1bZV0hPT1Rbi5OVUxMX1ZBTFVFKXJldHVybiExO3JldHVybiEwfWlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZGVwdGhbbl1bMV09PT1Rbi5OVUxMX1ZBTFVFfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV07cmV0dXJuIHRoaXMuZGVwdGhbaV1bcl09PT1Rbi5OVUxMX1ZBTFVFfX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDwyO3QrKylpZighdGhpcy5pc051bGwodCkpe3ZhciBlPXRoaXMuZGVwdGhbdF1bMV07dGhpcy5kZXB0aFt0XVsyXTxlJiYoZT10aGlzLmRlcHRoW3RdWzJdKSxlPDAmJihlPTApO2Zvcih2YXIgbj0xO248MztuKyspe3ZhciBpPTA7dGhpcy5kZXB0aFt0XVtuXT5lJiYoaT0xKSx0aGlzLmRlcHRoW3RdW25dPWl9fX0sZ2V0RGVsdGE6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGVwdGhbdF1bY24uUklHSFRdLXRoaXMuZGVwdGhbdF1bY24uTEVGVF19LGdldExvY2F0aW9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZGVwdGhbdF1bZV08PTA/TC5FWFRFUklPUjpMLklOVEVSSU9SfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwiQTogXCIrdGhpcy5kZXB0aFswXVsxXStcIixcIit0aGlzLmRlcHRoWzBdWzJdK1wiIEI6IFwiK3RoaXMuZGVwdGhbMV1bMV0rXCIsXCIrdGhpcy5kZXB0aFsxXVsyXX0sYWRkOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPTA7ZTwyO2UrKylmb3IodmFyIG49MTtuPDM7bisrKXt2YXIgaT10LmdldExvY2F0aW9uKGUsbik7aSE9PUwuRVhURVJJT1ImJmkhPT1MLklOVEVSSU9SfHwodGhpcy5pc051bGwoZSxuKT90aGlzLmRlcHRoW2VdW25dPVFuLmRlcHRoQXRMb2NhdGlvbihpKTp0aGlzLmRlcHRoW2VdW25dKz1Rbi5kZXB0aEF0TG9jYXRpb24oaSkpfWVsc2UgaWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXTtvPT09TC5JTlRFUklPUiYmdGhpcy5kZXB0aFtyXVtzXSsrfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gUW59fSksUW4uZGVwdGhBdExvY2F0aW9uPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09TC5FWFRFUklPUj8wOnQ9PT1MLklOVEVSSU9SPzE6UW4uTlVMTF9WQUxVRX0sUW4uTlVMTF9WQUxVRT0tMSxoKEpuLG1uKSxlKEpuLnByb3RvdHlwZSx7Z2V0RGVwdGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZXB0aH0sZ2V0Q29sbGFwc2VkRWRnZTpmdW5jdGlvbigpe3ZhciB0PW5ldyBBcnJheSgyKS5maWxsKG51bGwpO3RbMF09dGhpcy5wdHNbMF0sdFsxXT10aGlzLnB0c1sxXTt2YXIgZT1uZXcgSm4odCxnbi50b0xpbmVMYWJlbCh0aGlzLmxhYmVsKSk7cmV0dXJuIGV9LGlzSXNvbGF0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNJc29sYXRlZH0sZ2V0Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdHN9LHNldElzb2xhdGVkOmZ1bmN0aW9uKHQpe3RoaXMuX2lzSXNvbGF0ZWQ9dH0sc2V0TmFtZTpmdW5jdGlvbih0KXt0aGlzLm5hbWU9dH0sZXF1YWxzOmZ1bmN0aW9uKHQpe2lmKCEodCBpbnN0YW5jZW9mIEpuKSlyZXR1cm4hMTt2YXIgZT10O2lmKHRoaXMucHRzLmxlbmd0aCE9PWUucHRzLmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIG49ITAsaT0hMCxyPXRoaXMucHRzLmxlbmd0aCxzPTA7czx0aGlzLnB0cy5sZW5ndGg7cysrKWlmKHRoaXMucHRzW3NdLmVxdWFsczJEKGUucHRzW3NdKXx8KG49ITEpLHRoaXMucHRzW3NdLmVxdWFsczJEKGUucHRzWy0tcl0pfHwoaT0hMSksIW4mJiFpKXJldHVybiExO3JldHVybiEwfSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMucHRzLmxlbmd0aD4wP3RoaXMucHRzWzBdOm51bGw7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5wdHNbdF19fSxwcmludDpmdW5jdGlvbih0KXt0LnByaW50KFwiZWRnZSBcIit0aGlzLm5hbWUrXCI6IFwiKSx0LnByaW50KFwiTElORVNUUklORyAoXCIpO2Zvcih2YXIgZT0wO2U8dGhpcy5wdHMubGVuZ3RoO2UrKyllPjAmJnQucHJpbnQoXCIsXCIpLHQucHJpbnQodGhpcy5wdHNbZV0ueCtcIiBcIit0aGlzLnB0c1tlXS55KTt0LnByaW50KFwiKSAgXCIrdGhpcy5sYWJlbCtcIiBcIit0aGlzLmRlcHRoRGVsdGEpfSxjb21wdXRlSU06ZnVuY3Rpb24odCl7Sm4udXBkYXRlSU0odGhpcy5sYWJlbCx0KX0saXNDb2xsYXBzZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMubGFiZWwuaXNBcmVhKCkmJigzPT09dGhpcy5wdHMubGVuZ3RoJiYhIXRoaXMucHRzWzBdLmVxdWFscyh0aGlzLnB0c1syXSkpfSxpc0Nsb3NlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0c1swXS5lcXVhbHModGhpcy5wdHNbdGhpcy5wdHMubGVuZ3RoLTFdKX0sZ2V0TWF4aW11bVNlZ21lbnRJbmRleDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0cy5sZW5ndGgtMX0sZ2V0RGVwdGhEZWx0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRlcHRoRGVsdGF9LGdldE51bVBvaW50czpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0cy5sZW5ndGh9LHByaW50UmV2ZXJzZTpmdW5jdGlvbih0KXt0LnByaW50KFwiZWRnZSBcIit0aGlzLm5hbWUrXCI6IFwiKTtmb3IodmFyIGU9dGhpcy5wdHMubGVuZ3RoLTE7ZT49MDtlLS0pdC5wcmludCh0aGlzLnB0c1tlXStcIiBcIik7dC5wcmludGxuKFwiXCIpfSxnZXRNb25vdG9uZUNoYWluRWRnZTpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5tY2UmJih0aGlzLm1jZT1uZXcgWm4odGhpcykpLHRoaXMubWNlfSxnZXRFbnZlbG9wZTpmdW5jdGlvbigpe2lmKG51bGw9PT10aGlzLmVudil7dGhpcy5lbnY9bmV3IEM7Zm9yKHZhciB0PTA7dDx0aGlzLnB0cy5sZW5ndGg7dCsrKXRoaXMuZW52LmV4cGFuZFRvSW5jbHVkZSh0aGlzLnB0c1t0XSl9cmV0dXJuIHRoaXMuZW52fSxhZGRJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9bmV3IGcodC5nZXRJbnRlcnNlY3Rpb24oaSkpLHM9ZSxvPXQuZ2V0RWRnZURpc3RhbmNlKG4saSksYT1zKzE7aWYoYTx0aGlzLnB0cy5sZW5ndGgpe3ZhciB1PXRoaXMucHRzW2FdO3IuZXF1YWxzMkQodSkmJihzPWEsbz0wKX10aGlzLmVpTGlzdC5hZGQocixzLG8pfSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciB0PW5ldyBQO3QuYXBwZW5kKFwiZWRnZSBcIit0aGlzLm5hbWUrXCI6IFwiKSx0LmFwcGVuZChcIkxJTkVTVFJJTkcgKFwiKTtmb3IodmFyIGU9MDtlPHRoaXMucHRzLmxlbmd0aDtlKyspZT4wJiZ0LmFwcGVuZChcIixcIiksdC5hcHBlbmQodGhpcy5wdHNbZV0ueCtcIiBcIit0aGlzLnB0c1tlXS55KTtyZXR1cm4gdC5hcHBlbmQoXCIpICBcIit0aGlzLmxhYmVsK1wiIFwiK3RoaXMuZGVwdGhEZWx0YSksdC50b1N0cmluZygpfSxpc1BvaW50d2lzZUVxdWFsOmZ1bmN0aW9uKHQpe2lmKHRoaXMucHRzLmxlbmd0aCE9PXQucHRzLmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIGU9MDtlPHRoaXMucHRzLmxlbmd0aDtlKyspaWYoIXRoaXMucHRzW2VdLmVxdWFsczJEKHQucHRzW2VdKSlyZXR1cm4hMTtyZXR1cm4hMH0sc2V0RGVwdGhEZWx0YTpmdW5jdGlvbih0KXt0aGlzLmRlcHRoRGVsdGE9dH0sZ2V0RWRnZUludGVyc2VjdGlvbkxpc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5laUxpc3R9LGFkZEludGVyc2VjdGlvbnM6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT0wO2k8dC5nZXRJbnRlcnNlY3Rpb25OdW0oKTtpKyspdGhpcy5hZGRJbnRlcnNlY3Rpb24odCxlLG4saSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEpufX0pLEpuLnVwZGF0ZUlNPWZ1bmN0aW9uKCl7aWYoMiE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIG1uLnByb3RvdHlwZS51cGRhdGVJTS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO2Uuc2V0QXRMZWFzdElmVmFsaWQodC5nZXRMb2NhdGlvbigwLGNuLk9OKSx0LmdldExvY2F0aW9uKDEsY24uT04pLDEpLHQuaXNBcmVhKCkmJihlLnNldEF0TGVhc3RJZlZhbGlkKHQuZ2V0TG9jYXRpb24oMCxjbi5MRUZUKSx0LmdldExvY2F0aW9uKDEsY24uTEVGVCksMiksZS5zZXRBdExlYXN0SWZWYWxpZCh0LmdldExvY2F0aW9uKDAsY24uUklHSFQpLHQuZ2V0TG9jYXRpb24oMSxjbi5SSUdIVCksMikpfSxoKCRuLENuKSxlKCRuLnByb3RvdHlwZSx7aW5zZXJ0Qm91bmRhcnlQb2ludDpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMubm9kZXMuYWRkTm9kZShlKSxpPW4uZ2V0TGFiZWwoKSxyPTEscz1MLk5PTkU7cz1pLmdldExvY2F0aW9uKHQsY24uT04pLHM9PT1MLkJPVU5EQVJZJiZyKys7dmFyIG89JG4uZGV0ZXJtaW5lQm91bmRhcnkodGhpcy5ib3VuZGFyeU5vZGVSdWxlLHIpO2kuc2V0TG9jYXRpb24odCxvKX0sY29tcHV0ZVNlbGZOb2RlczpmdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV07cmV0dXJuIHRoaXMuY29tcHV0ZVNlbGZOb2Rlcyh0LGUsITEpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj1hcmd1bWVudHNbMl0scz1uZXcgQW4obiwoITApLCghMSkpO3Muc2V0SXNEb25lSWZQcm9wZXJJbnQocik7dmFyIG89dGhpcy5jcmVhdGVFZGdlU2V0SW50ZXJzZWN0b3IoKSxhPXRoaXMucGFyZW50R2VvbSBpbnN0YW5jZW9mIGJ0fHx0aGlzLnBhcmVudEdlb20gaW5zdGFuY2VvZiBUdHx8dGhpcy5wYXJlbnRHZW9tIGluc3RhbmNlb2YgT3QsdT1pfHwhYTtyZXR1cm4gby5jb21wdXRlSW50ZXJzZWN0aW9ucyh0aGlzLmVkZ2VzLHMsdSksdGhpcy5hZGRTZWxmSW50ZXJzZWN0aW9uTm9kZXModGhpcy5hcmdJbmRleCksc319LGNvbXB1dGVTcGxpdEVkZ2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmVkZ2VzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLmVpTGlzdC5hZGRTcGxpdEVkZ2VzKHQpfX0sY29tcHV0ZUVkZ2VJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgQW4oZSxuLCghMCkpO2kuc2V0Qm91bmRhcnlOb2Rlcyh0aGlzLmdldEJvdW5kYXJ5Tm9kZXMoKSx0LmdldEJvdW5kYXJ5Tm9kZXMoKSk7dmFyIHI9dGhpcy5jcmVhdGVFZGdlU2V0SW50ZXJzZWN0b3IoKTtyZXR1cm4gci5jb21wdXRlSW50ZXJzZWN0aW9ucyh0aGlzLmVkZ2VzLHQuZWRnZXMsaSksaX0sZ2V0R2VvbWV0cnk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnRHZW9tfSxnZXRCb3VuZGFyeU5vZGVSdWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYm91bmRhcnlOb2RlUnVsZX0saGFzVG9vRmV3UG9pbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc1Rvb0Zld1BvaW50c30sYWRkUG9pbnQ6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEx0KXt2YXIgdD1hcmd1bWVudHNbMF0sZT10LmdldENvb3JkaW5hdGUoKTt0aGlzLmluc2VydFBvaW50KHRoaXMuYXJnSW5kZXgsZSxMLklOVEVSSU9SKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyl7dmFyIG49YXJndW1lbnRzWzBdO3RoaXMuaW5zZXJ0UG9pbnQodGhpcy5hcmdJbmRleCxuLEwuSU5URVJJT1IpfX0sYWRkUG9seWdvbjpmdW5jdGlvbih0KXt0aGlzLmFkZFBvbHlnb25SaW5nKHQuZ2V0RXh0ZXJpb3JSaW5nKCksTC5FWFRFUklPUixMLklOVEVSSU9SKTtmb3IodmFyIGU9MDtlPHQuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7ZSsrKXt2YXIgbj10LmdldEludGVyaW9yUmluZ04oZSk7dGhpcy5hZGRQb2x5Z29uUmluZyhuLEwuSU5URVJJT1IsTC5FWFRFUklPUil9fSxhZGRFZGdlOmZ1bmN0aW9uKHQpe3RoaXMuaW5zZXJ0RWRnZSh0KTt2YXIgZT10LmdldENvb3JkaW5hdGVzKCk7dGhpcy5pbnNlcnRQb2ludCh0aGlzLmFyZ0luZGV4LGVbMF0sTC5CT1VOREFSWSksdGhpcy5pbnNlcnRQb2ludCh0aGlzLmFyZ0luZGV4LGVbZS5sZW5ndGgtMV0sTC5CT1VOREFSWSl9LGFkZExpbmVTdHJpbmc6ZnVuY3Rpb24odCl7dmFyIGU9SC5yZW1vdmVSZXBlYXRlZFBvaW50cyh0LmdldENvb3JkaW5hdGVzKCkpO2lmKGUubGVuZ3RoPDIpcmV0dXJuIHRoaXMuX2hhc1Rvb0Zld1BvaW50cz0hMCx0aGlzLmludmFsaWRQb2ludD1lWzBdLG51bGw7dmFyIG49bmV3IEpuKGUsbmV3IGduKHRoaXMuYXJnSW5kZXgsTC5JTlRFUklPUikpO3RoaXMubGluZUVkZ2VNYXAucHV0KHQsbiksdGhpcy5pbnNlcnRFZGdlKG4pLGYuaXNUcnVlKGUubGVuZ3RoPj0yLFwiZm91bmQgTGluZVN0cmluZyB3aXRoIHNpbmdsZSBwb2ludFwiKSx0aGlzLmluc2VydEJvdW5kYXJ5UG9pbnQodGhpcy5hcmdJbmRleCxlWzBdKSx0aGlzLmluc2VydEJvdW5kYXJ5UG9pbnQodGhpcy5hcmdJbmRleCxlW2UubGVuZ3RoLTFdKX0sZ2V0SW52YWxpZFBvaW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW52YWxpZFBvaW50fSxnZXRCb3VuZGFyeVBvaW50czpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmdldEJvdW5kYXJ5Tm9kZXMoKSxlPW5ldyBBcnJheSh0LnNpemUoKSkuZmlsbChudWxsKSxuPTAsaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtlW24rK109ci5nZXRDb29yZGluYXRlKCkuY29weSgpfXJldHVybiBlfSxnZXRCb3VuZGFyeU5vZGVzOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLmJvdW5kYXJ5Tm9kZXMmJih0aGlzLmJvdW5kYXJ5Tm9kZXM9dGhpcy5ub2Rlcy5nZXRCb3VuZGFyeU5vZGVzKHRoaXMuYXJnSW5kZXgpKSx0aGlzLmJvdW5kYXJ5Tm9kZXN9LGFkZFNlbGZJbnRlcnNlY3Rpb25Ob2RlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5pc0JvdW5kYXJ5Tm9kZSh0LGUpP251bGw6dm9pZChuPT09TC5CT1VOREFSWSYmdGhpcy51c2VCb3VuZGFyeURldGVybWluYXRpb25SdWxlP3RoaXMuaW5zZXJ0Qm91bmRhcnlQb2ludCh0LGUpOnRoaXMuaW5zZXJ0UG9pbnQodCxlLG4pKX0sYWRkUG9seWdvblJpbmc6ZnVuY3Rpb24odCxlLG4pe2lmKHQuaXNFbXB0eSgpKXJldHVybiBudWxsO3ZhciBpPUgucmVtb3ZlUmVwZWF0ZWRQb2ludHModC5nZXRDb29yZGluYXRlcygpKTtpZihpLmxlbmd0aDw0KXJldHVybiB0aGlzLl9oYXNUb29GZXdQb2ludHM9ITAsdGhpcy5pbnZhbGlkUG9pbnQ9aVswXSxudWxsO3ZhciByPWUscz1uO2hlLmlzQ0NXKGkpJiYocj1uLHM9ZSk7dmFyIG89bmV3IEpuKGksbmV3IGduKHRoaXMuYXJnSW5kZXgsTC5CT1VOREFSWSxyLHMpKTt0aGlzLmxpbmVFZGdlTWFwLnB1dCh0LG8pLHRoaXMuaW5zZXJ0RWRnZShvKSx0aGlzLmluc2VydFBvaW50KHRoaXMuYXJnSW5kZXgsaVswXSxMLkJPVU5EQVJZKX0saW5zZXJ0UG9pbnQ6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMubm9kZXMuYWRkTm9kZShlKSxyPWkuZ2V0TGFiZWwoKTtudWxsPT09cj9pLmxhYmVsPW5ldyBnbih0LG4pOnIuc2V0TG9jYXRpb24odCxuKX0sY3JlYXRlRWRnZVNldEludGVyc2VjdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBGbn0sYWRkU2VsZkludGVyc2VjdGlvbk5vZGVzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmVkZ2VzLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KWZvcih2YXIgbj1lLm5leHQoKSxpPW4uZ2V0TGFiZWwoKS5nZXRMb2NhdGlvbih0KSxyPW4uZWlMaXN0Lml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKTt0aGlzLmFkZFNlbGZJbnRlcnNlY3Rpb25Ob2RlKHQscy5jb29yZCxpKX19LGFkZDpmdW5jdGlvbigpe2lmKDEhPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBDbi5wcm90b3R5cGUuYWRkLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgdD1hcmd1bWVudHNbMF07aWYodC5pc0VtcHR5KCkpcmV0dXJuIG51bGw7aWYodCBpbnN0YW5jZW9mIE90JiYodGhpcy51c2VCb3VuZGFyeURldGVybWluYXRpb25SdWxlPSExKSx0IGluc3RhbmNlb2YgVHQpdGhpcy5hZGRQb2x5Z29uKHQpO2Vsc2UgaWYodCBpbnN0YW5jZW9mIFN0KXRoaXMuYWRkTGluZVN0cmluZyh0KTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBMdCl0aGlzLmFkZFBvaW50KHQpO2Vsc2UgaWYodCBpbnN0YW5jZW9mIFB0KXRoaXMuYWRkQ29sbGVjdGlvbih0KTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBndCl0aGlzLmFkZENvbGxlY3Rpb24odCk7ZWxzZSBpZih0IGluc3RhbmNlb2YgT3QpdGhpcy5hZGRDb2xsZWN0aW9uKHQpO2Vsc2V7aWYoISh0IGluc3RhbmNlb2YgZnQpKXRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbih0LmdldENsYXNzKCkuZ2V0TmFtZSgpKTt0aGlzLmFkZENvbGxlY3Rpb24odCl9fSxhZGRDb2xsZWN0aW9uOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5nZXROdW1HZW9tZXRyaWVzKCk7ZSsrKXt2YXIgbj10LmdldEdlb21ldHJ5TihlKTt0aGlzLmFkZChuKX19LGxvY2F0ZTpmdW5jdGlvbih0KXtyZXR1cm4gUih0aGlzLnBhcmVudEdlb20sUnQpJiZ0aGlzLnBhcmVudEdlb20uZ2V0TnVtR2VvbWV0cmllcygpPjUwPyhudWxsPT09dGhpcy5hcmVhUHRMb2NhdG9yJiYodGhpcy5hcmVhUHRMb2NhdG9yPW5ldyBVbih0aGlzLnBhcmVudEdlb20pKSx0aGlzLmFyZWFQdExvY2F0b3IubG9jYXRlKHQpKTp0aGlzLnB0TG9jYXRvci5sb2NhdGUodCx0aGlzLnBhcmVudEdlb20pfSxmaW5kRWRnZTpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMubGluZUVkZ2VNYXAuZ2V0KHQpfXJldHVybiBDbi5wcm90b3R5cGUuZmluZEVkZ2UuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiAkbn19KSwkbi5kZXRlcm1pbmVCb3VuZGFyeT1mdW5jdGlvbih0LGUpe3JldHVybiB0LmlzSW5Cb3VuZGFyeShlKT9MLkJPVU5EQVJZOkwuSU5URVJJT1J9LGUodGkucHJvdG90eXBlLHtnZXRBcmdHZW9tZXRyeTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hcmdbdF0uZ2V0R2VvbWV0cnkoKX0sc2V0Q29tcHV0YXRpb25QcmVjaXNpb246ZnVuY3Rpb24odCl7dGhpcy5yZXN1bHRQcmVjaXNpb25Nb2RlbD10LHRoaXMubGkuc2V0UHJlY2lzaW9uTW9kZWwodGhpcy5yZXN1bHRQcmVjaXNpb25Nb2RlbCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHRpfX0pLGUoZWkucHJvdG90eXBlLHtjb21wYXJlVG86ZnVuY3Rpb24odCl7dmFyIGU9dCxuPWVpLmNvbXBhcmVPcmllbnRlZCh0aGlzLnB0cyx0aGlzLl9vcmllbnRhdGlvbixlLnB0cyxlLl9vcmllbnRhdGlvbik7cmV0dXJuIG59LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3NdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBlaX19KSxlaS5vcmllbnRhdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4gMT09PUguaW5jcmVhc2luZ0RpcmVjdGlvbih0KX0sZWkuY29tcGFyZU9yaWVudGVkPWZ1bmN0aW9uKHQsZSxuLGkpe2Zvcih2YXIgcj1lPzE6LTEscz1pPzE6LTEsbz1lP3QubGVuZ3RoOi0xLGE9aT9uLmxlbmd0aDotMSx1PWU/MDp0Lmxlbmd0aC0xLGw9aT8wOm4ubGVuZ3RoLTE7Oyl7dmFyIGg9dFt1XS5jb21wYXJlVG8obltsXSk7aWYoMCE9PWgpcmV0dXJuIGg7dSs9cixsKz1zO3ZhciBjPXU9PT1vLGY9bD09PWE7aWYoYyYmIWYpcmV0dXJuLTE7aWYoIWMmJmYpcmV0dXJuIDE7aWYoYyYmZilyZXR1cm4gMH19LGUobmkucHJvdG90eXBlLHtwcmludDpmdW5jdGlvbih0KXt0LnByaW50KFwiTVVMVElMSU5FU1RSSU5HICggXCIpO2Zvcih2YXIgZT0wO2U8dGhpcy5lZGdlcy5zaXplKCk7ZSsrKXt2YXIgbj10aGlzLmVkZ2VzLmdldChlKTtlPjAmJnQucHJpbnQoXCIsXCIpLHQucHJpbnQoXCIoXCIpO2Zvcih2YXIgaT1uLmdldENvb3JkaW5hdGVzKCkscj0wO3I8aS5sZW5ndGg7cisrKXI+MCYmdC5wcmludChcIixcIiksdC5wcmludChpW3JdLngrXCIgXCIraVtyXS55KTt0LnByaW50bG4oXCIpXCIpfXQucHJpbnQoXCIpICBcIil9LGFkZEFsbDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl0aGlzLmFkZChlLm5leHQoKSl9LGZpbmRFZGdlSW5kZXg6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLmVkZ2VzLnNpemUoKTtlKyspaWYodGhpcy5lZGdlcy5nZXQoZSkuZXF1YWxzKHQpKXJldHVybiBlO3JldHVybi0xfSxpdGVyYXRvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVkZ2VzLml0ZXJhdG9yKCl9LGdldEVkZ2VzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZXN9LGdldDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lZGdlcy5nZXQodCl9LGZpbmRFcXVhbEVkZ2U6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGVpKHQuZ2V0Q29vcmRpbmF0ZXMoKSksbj10aGlzLm9jYU1hcC5nZXQoZSk7cmV0dXJuIG59LGFkZDpmdW5jdGlvbih0KXt0aGlzLmVkZ2VzLmFkZCh0KTt2YXIgZT1uZXcgZWkodC5nZXRDb29yZGluYXRlcygpKTt0aGlzLm9jYU1hcC5wdXQoZSx0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gbml9fSksaChpaSx0aSksZShpaS5wcm90b3R5cGUse2luc2VydFVuaXF1ZUVkZ2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5lZGdlTGlzdC5maW5kRXF1YWxFZGdlKHQpO2lmKG51bGwhPT1lKXt2YXIgbj1lLmdldExhYmVsKCksaT10LmdldExhYmVsKCk7ZS5pc1BvaW50d2lzZUVxdWFsKHQpfHwoaT1uZXcgZ24odC5nZXRMYWJlbCgpKSxpLmZsaXAoKSk7dmFyIHI9ZS5nZXREZXB0aCgpO3IuaXNOdWxsKCkmJnIuYWRkKG4pLHIuYWRkKGkpLG4ubWVyZ2UoaSl9ZWxzZSB0aGlzLmVkZ2VMaXN0LmFkZCh0KX0sZ2V0R3JhcGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ncmFwaH0sY2FuY2VsRHVwbGljYXRlUmVzdWx0RWRnZXM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ncmFwaC5nZXRFZGdlRW5kcygpLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKSxuPWUuZ2V0U3ltKCk7ZS5pc0luUmVzdWx0KCkmJm4uaXNJblJlc3VsdCgpJiYoZS5zZXRJblJlc3VsdCghMSksbi5zZXRJblJlc3VsdCghMSkpfX0saXNDb3ZlcmVkQnlMQTpmdW5jdGlvbih0KXtyZXR1cm4hIXRoaXMuaXNDb3ZlcmVkKHQsdGhpcy5yZXN1bHRMaW5lTGlzdCl8fCEhdGhpcy5pc0NvdmVyZWQodCx0aGlzLnJlc3VsdFBvbHlMaXN0KX0sY29tcHV0ZUdlb21ldHJ5OmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPW5ldyBJO3JldHVybiByLmFkZEFsbCh0KSxyLmFkZEFsbChlKSxyLmFkZEFsbChuKSxyLmlzRW1wdHkoKT9paS5jcmVhdGVFbXB0eVJlc3VsdChpLHRoaXMuYXJnWzBdLmdldEdlb21ldHJ5KCksdGhpcy5hcmdbMV0uZ2V0R2VvbWV0cnkoKSx0aGlzLmdlb21GYWN0KTp0aGlzLmdlb21GYWN0LmJ1aWxkR2VvbWV0cnkocil9LG1lcmdlU3ltTGFiZWxzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ3JhcGguZ2V0Tm9kZXMoKS5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7ZS5nZXRFZGdlcygpLm1lcmdlU3ltTGFiZWxzKCl9fSxpc0NvdmVyZWQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49ZS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCkscj10aGlzLnB0TG9jYXRvci5sb2NhdGUodCxpKTtpZihyIT09TC5FWFRFUklPUilyZXR1cm4hMH1yZXR1cm4hMX0scmVwbGFjZUNvbGxhcHNlZEVkZ2VzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBJLGU9dGhpcy5lZGdlTGlzdC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bi5pc0NvbGxhcHNlZCgpJiYoZS5yZW1vdmUoKSx0LmFkZChuLmdldENvbGxhcHNlZEVkZ2UoKSkpfXRoaXMuZWRnZUxpc3QuYWRkQWxsKHQpfSx1cGRhdGVOb2RlTGFiZWxsaW5nOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ3JhcGguZ2V0Tm9kZXMoKS5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCksbj1lLmdldEVkZ2VzKCkuZ2V0TGFiZWwoKTtlLmdldExhYmVsKCkubWVyZ2Uobil9fSxnZXRSZXN1bHRHZW9tZXRyeTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jb21wdXRlT3ZlcmxheSh0KSx0aGlzLnJlc3VsdEdlb219LGluc2VydFVuaXF1ZUVkZ2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLmluc2VydFVuaXF1ZUVkZ2Uobil9fSxjb21wdXRlT3ZlcmxheTpmdW5jdGlvbih0KXt0aGlzLmNvcHlQb2ludHMoMCksdGhpcy5jb3B5UG9pbnRzKDEpLHRoaXMuYXJnWzBdLmNvbXB1dGVTZWxmTm9kZXModGhpcy5saSwhMSksdGhpcy5hcmdbMV0uY29tcHV0ZVNlbGZOb2Rlcyh0aGlzLmxpLCExKSx0aGlzLmFyZ1swXS5jb21wdXRlRWRnZUludGVyc2VjdGlvbnModGhpcy5hcmdbMV0sdGhpcy5saSwhMCk7dmFyIGU9bmV3IEk7dGhpcy5hcmdbMF0uY29tcHV0ZVNwbGl0RWRnZXMoZSksdGhpcy5hcmdbMV0uY29tcHV0ZVNwbGl0RWRnZXMoZSk7dGhpcy5pbnNlcnRVbmlxdWVFZGdlcyhlKSx0aGlzLmNvbXB1dGVMYWJlbHNGcm9tRGVwdGhzKCksdGhpcy5yZXBsYWNlQ29sbGFwc2VkRWRnZXMoKSxcbmxuLmNoZWNrVmFsaWQodGhpcy5lZGdlTGlzdC5nZXRFZGdlcygpKSx0aGlzLmdyYXBoLmFkZEVkZ2VzKHRoaXMuZWRnZUxpc3QuZ2V0RWRnZXMoKSksdGhpcy5jb21wdXRlTGFiZWxsaW5nKCksdGhpcy5sYWJlbEluY29tcGxldGVOb2RlcygpLHRoaXMuZmluZFJlc3VsdEFyZWFFZGdlcyh0KSx0aGlzLmNhbmNlbER1cGxpY2F0ZVJlc3VsdEVkZ2VzKCk7dmFyIG49bmV3IFNuKHRoaXMuZ2VvbUZhY3QpO24uYWRkKHRoaXMuZ3JhcGgpLHRoaXMucmVzdWx0UG9seUxpc3Q9bi5nZXRQb2x5Z29ucygpO3ZhciBpPW5ldyB3bih0aGlzLHRoaXMuZ2VvbUZhY3QsdGhpcy5wdExvY2F0b3IpO3RoaXMucmVzdWx0TGluZUxpc3Q9aS5idWlsZCh0KTt2YXIgcj1uZXcgTG4odGhpcyx0aGlzLmdlb21GYWN0LHRoaXMucHRMb2NhdG9yKTt0aGlzLnJlc3VsdFBvaW50TGlzdD1yLmJ1aWxkKHQpLHRoaXMucmVzdWx0R2VvbT10aGlzLmNvbXB1dGVHZW9tZXRyeSh0aGlzLnJlc3VsdFBvaW50TGlzdCx0aGlzLnJlc3VsdExpbmVMaXN0LHRoaXMucmVzdWx0UG9seUxpc3QsdCl9LGxhYmVsSW5jb21wbGV0ZU5vZGU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnB0TG9jYXRvci5sb2NhdGUodC5nZXRDb29yZGluYXRlKCksdGhpcy5hcmdbZV0uZ2V0R2VvbWV0cnkoKSk7dC5nZXRMYWJlbCgpLnNldExvY2F0aW9uKGUsbil9LGNvcHlQb2ludHM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuYXJnW3RdLmdldE5vZGVJdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCksaT10aGlzLmdyYXBoLmFkZE5vZGUobi5nZXRDb29yZGluYXRlKCkpO2kuc2V0TGFiZWwodCxuLmdldExhYmVsKCkuZ2V0TG9jYXRpb24odCkpfX0sZmluZFJlc3VsdEFyZWFFZGdlczpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5ncmFwaC5nZXRFZGdlRW5kcygpLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKSxpPW4uZ2V0TGFiZWwoKTtpLmlzQXJlYSgpJiYhbi5pc0ludGVyaW9yQXJlYUVkZ2UoKSYmaWkuaXNSZXN1bHRPZk9wKGkuZ2V0TG9jYXRpb24oMCxjbi5SSUdIVCksaS5nZXRMb2NhdGlvbigxLGNuLlJJR0hUKSx0KSYmbi5zZXRJblJlc3VsdCghMCl9fSxjb21wdXRlTGFiZWxzRnJvbURlcHRoczpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmVkZ2VMaXN0Lml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKSxuPWUuZ2V0TGFiZWwoKSxpPWUuZ2V0RGVwdGgoKTtpZighaS5pc051bGwoKSl7aS5ub3JtYWxpemUoKTtmb3IodmFyIHI9MDtyPDI7cisrKW4uaXNOdWxsKHIpfHwhbi5pc0FyZWEoKXx8aS5pc051bGwocil8fCgwPT09aS5nZXREZWx0YShyKT9uLnRvTGluZShyKTooZi5pc1RydWUoIWkuaXNOdWxsKHIsY24uTEVGVCksXCJkZXB0aCBvZiBMRUZUIHNpZGUgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkXCIpLG4uc2V0TG9jYXRpb24ocixjbi5MRUZULGkuZ2V0TG9jYXRpb24ocixjbi5MRUZUKSksZi5pc1RydWUoIWkuaXNOdWxsKHIsY24uUklHSFQpLFwiZGVwdGggb2YgUklHSFQgc2lkZSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcIiksbi5zZXRMb2NhdGlvbihyLGNuLlJJR0hULGkuZ2V0TG9jYXRpb24ocixjbi5SSUdIVCkpKSl9fX0sY29tcHV0ZUxhYmVsbGluZzpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmdyYXBoLmdldE5vZGVzKCkuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpO2UuZ2V0RWRnZXMoKS5jb21wdXRlTGFiZWxsaW5nKHRoaXMuYXJnKX10aGlzLm1lcmdlU3ltTGFiZWxzKCksdGhpcy51cGRhdGVOb2RlTGFiZWxsaW5nKCl9LGxhYmVsSW5jb21wbGV0ZU5vZGVzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT10aGlzLmdyYXBoLmdldE5vZGVzKCkuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLGk9bi5nZXRMYWJlbCgpO24uaXNJc29sYXRlZCgpJiYodCsrLGkuaXNOdWxsKDApP3RoaXMubGFiZWxJbmNvbXBsZXRlTm9kZShuLDApOnRoaXMubGFiZWxJbmNvbXBsZXRlTm9kZShuLDEpKSxuLmdldEVkZ2VzKCkudXBkYXRlTGFiZWxsaW5nKGkpfX0saXNDb3ZlcmVkQnlBOmZ1bmN0aW9uKHQpe3JldHVybiEhdGhpcy5pc0NvdmVyZWQodCx0aGlzLnJlc3VsdFBvbHlMaXN0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaWl9fSksaWkub3ZlcmxheU9wPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgaWkodCxlKSxyPWkuZ2V0UmVzdWx0R2VvbWV0cnkobik7cmV0dXJuIHJ9LGlpLmludGVyc2VjdGlvbj1mdW5jdGlvbih0LGUpe2lmKHQuaXNFbXB0eSgpfHxlLmlzRW1wdHkoKSlyZXR1cm4gaWkuY3JlYXRlRW1wdHlSZXN1bHQoaWkuSU5URVJTRUNUSU9OLHQsZSx0LmdldEZhY3RvcnkoKSk7aWYodC5pc0dlb21ldHJ5Q29sbGVjdGlvbigpKXt2YXIgbj1lO3JldHVybiBobi5tYXAodCx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bTWFwT3BdfSxtYXA6ZnVuY3Rpb24odCl7cmV0dXJuIHQuaW50ZXJzZWN0aW9uKG4pfX0pfXJldHVybiB0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKHQpLHQuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24oZSksc2kub3ZlcmxheU9wKHQsZSxpaS5JTlRFUlNFQ1RJT04pfSxpaS5zeW1EaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7aWYodC5pc0VtcHR5KCl8fGUuaXNFbXB0eSgpKXtpZih0LmlzRW1wdHkoKSYmZS5pc0VtcHR5KCkpcmV0dXJuIGlpLmNyZWF0ZUVtcHR5UmVzdWx0KGlpLlNZTURJRkZFUkVOQ0UsdCxlLHQuZ2V0RmFjdG9yeSgpKTtpZih0LmlzRW1wdHkoKSlyZXR1cm4gZS5jb3B5KCk7aWYoZS5pc0VtcHR5KCkpcmV0dXJuIHQuY29weSgpfXJldHVybiB0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKHQpLHQuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24oZSksc2kub3ZlcmxheU9wKHQsZSxpaS5TWU1ESUZGRVJFTkNFKX0saWkucmVzdWx0RGltZW5zaW9uPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1lLmdldERpbWVuc2lvbigpLHI9bi5nZXREaW1lbnNpb24oKSxzPS0xO3N3aXRjaCh0KXtjYXNlIGlpLklOVEVSU0VDVElPTjpzPU1hdGgubWluKGkscik7YnJlYWs7Y2FzZSBpaS5VTklPTjpzPU1hdGgubWF4KGkscik7YnJlYWs7Y2FzZSBpaS5ESUZGRVJFTkNFOnM9aTticmVhaztjYXNlIGlpLlNZTURJRkZFUkVOQ0U6cz1NYXRoLm1heChpLHIpfXJldHVybiBzfSxpaS5jcmVhdGVFbXB0eVJlc3VsdD1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1udWxsO3N3aXRjaChpaS5yZXN1bHREaW1lbnNpb24odCxlLG4pKXtjYXNlLTE6cj1pLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihuZXcgQXJyYXkoMCkuZmlsbChudWxsKSk7YnJlYWs7Y2FzZSAwOnI9aS5jcmVhdGVQb2ludCgpO2JyZWFrO2Nhc2UgMTpyPWkuY3JlYXRlTGluZVN0cmluZygpO2JyZWFrO2Nhc2UgMjpyPWkuY3JlYXRlUG9seWdvbigpfXJldHVybiByfSxpaS5kaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuaXNFbXB0eSgpP2lpLmNyZWF0ZUVtcHR5UmVzdWx0KGlpLkRJRkZFUkVOQ0UsdCxlLHQuZ2V0RmFjdG9yeSgpKTplLmlzRW1wdHkoKT90LmNvcHkoKToodC5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbih0KSx0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKGUpLHNpLm92ZXJsYXlPcCh0LGUsaWkuRElGRkVSRU5DRSkpfSxpaS5pc1Jlc3VsdE9mT3A9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49dC5nZXRMb2NhdGlvbigwKSxpPXQuZ2V0TG9jYXRpb24oMSk7cmV0dXJuIGlpLmlzUmVzdWx0T2ZPcChuLGksZSl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXTtzd2l0Y2gocj09PUwuQk9VTkRBUlkmJihyPUwuSU5URVJJT1IpLHM9PT1MLkJPVU5EQVJZJiYocz1MLklOVEVSSU9SKSxvKXtjYXNlIGlpLklOVEVSU0VDVElPTjpyZXR1cm4gcj09PUwuSU5URVJJT1ImJnM9PT1MLklOVEVSSU9SO2Nhc2UgaWkuVU5JT046cmV0dXJuIHI9PT1MLklOVEVSSU9SfHxzPT09TC5JTlRFUklPUjtjYXNlIGlpLkRJRkZFUkVOQ0U6cmV0dXJuIHI9PT1MLklOVEVSSU9SJiZzIT09TC5JTlRFUklPUjtjYXNlIGlpLlNZTURJRkZFUkVOQ0U6cmV0dXJuIHI9PT1MLklOVEVSSU9SJiZzIT09TC5JTlRFUklPUnx8ciE9PUwuSU5URVJJT1ImJnM9PT1MLklOVEVSSU9SfXJldHVybiExfX0saWkuSU5URVJTRUNUSU9OPTEsaWkuVU5JT049MixpaS5ESUZGRVJFTkNFPTMsaWkuU1lNRElGRkVSRU5DRT00LGUocmkucHJvdG90eXBlLHtzZWxmU25hcDpmdW5jdGlvbih0KXt2YXIgZT1uZXcgSWUodCksbj1lLnNuYXBUbyh0LHRoaXMuc25hcFRvbGVyYW5jZSk7cmV0dXJuIG59LHJlbW92ZUNvbW1vbkJpdHM6ZnVuY3Rpb24odCl7dGhpcy5jYnI9bmV3IFNlLHRoaXMuY2JyLmFkZCh0WzBdKSx0aGlzLmNici5hZGQodFsxXSk7dmFyIGU9bmV3IEFycmF5KDIpLmZpbGwobnVsbCk7cmV0dXJuIGVbMF09dGhpcy5jYnIucmVtb3ZlQ29tbW9uQml0cyh0WzBdLmNvcHkoKSksZVsxXT10aGlzLmNici5yZW1vdmVDb21tb25CaXRzKHRbMV0uY29weSgpKSxlfSxwcmVwYXJlUmVzdWx0OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNici5hZGRDb21tb25CaXRzKHQpLHR9LGdldFJlc3VsdEdlb21ldHJ5OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc25hcCh0aGlzLmdlb20pLG49aWkub3ZlcmxheU9wKGVbMF0sZVsxXSx0KTtyZXR1cm4gdGhpcy5wcmVwYXJlUmVzdWx0KG4pfSxjaGVja1ZhbGlkOmZ1bmN0aW9uKHQpe3QuaXNWYWxpZCgpfHxBLm91dC5wcmludGxuKFwiU25hcHBlZCBnZW9tZXRyeSBpcyBpbnZhbGlkXCIpfSxjb21wdXRlU25hcFRvbGVyYW5jZTpmdW5jdGlvbigpe3RoaXMuc25hcFRvbGVyYW5jZT1JZS5jb21wdXRlT3ZlcmxheVNuYXBUb2xlcmFuY2UodGhpcy5nZW9tWzBdLHRoaXMuZ2VvbVsxXSl9LHNuYXA6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5yZW1vdmVDb21tb25CaXRzKHQpLG49SWUuc25hcChlWzBdLGVbMV0sdGhpcy5zbmFwVG9sZXJhbmNlKTtyZXR1cm4gbn0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcml9fSkscmkub3ZlcmxheU9wPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgcmkodCxlKTtyZXR1cm4gaS5nZXRSZXN1bHRHZW9tZXRyeShuKX0scmkudW5pb249ZnVuY3Rpb24odCxlKXtyZXR1cm4gcmkub3ZlcmxheU9wKHQsZSxpaS5VTklPTil9LHJpLmludGVyc2VjdGlvbj1mdW5jdGlvbih0LGUpe3JldHVybiByaS5vdmVybGF5T3AodCxlLGlpLklOVEVSU0VDVElPTil9LHJpLnN5bURpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gcmkub3ZlcmxheU9wKHQsZSxpaS5TWU1ESUZGRVJFTkNFKX0scmkuZGlmZmVyZW5jZT1mdW5jdGlvbih0LGUpe3JldHVybiByaS5vdmVybGF5T3AodCxlLGlpLkRJRkZFUkVOQ0UpfSxlKHNpLnByb3RvdHlwZSx7Z2V0UmVzdWx0R2VvbWV0cnk6ZnVuY3Rpb24odCl7dmFyIGU9bnVsbCxuPSExLGk9bnVsbDt0cnl7ZT1paS5vdmVybGF5T3AodGhpcy5nZW9tWzBdLHRoaXMuZ2VvbVsxXSx0KTt2YXIgcj0hMDtyJiYobj0hMCl9Y2F0Y2godCl7aWYoISh0IGluc3RhbmNlb2YgbCkpdGhyb3cgdDtpPXR9ZmluYWxseXt9aWYoIW4pdHJ5e2U9cmkub3ZlcmxheU9wKHRoaXMuZ2VvbVswXSx0aGlzLmdlb21bMV0sdCl9Y2F0Y2godCl7dGhyb3cgdCBpbnN0YW5jZW9mIGw/aTp0fWZpbmFsbHl7fXJldHVybiBlfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBzaX19KSxzaS5vdmVybGF5T3A9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW5ldyBzaSh0LGUpO3JldHVybiBpLmdldFJlc3VsdEdlb21ldHJ5KG4pfSxzaS51bmlvbj1mdW5jdGlvbih0LGUpe3JldHVybiBzaS5vdmVybGF5T3AodCxlLGlpLlVOSU9OKX0sc2kuaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHNpLm92ZXJsYXlPcCh0LGUsaWkuSU5URVJTRUNUSU9OKX0sc2kuc3ltRGlmZmVyZW5jZT1mdW5jdGlvbih0LGUpe3JldHVybiBzaS5vdmVybGF5T3AodCxlLGlpLlNZTURJRkZFUkVOQ0UpfSxzaS5kaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHNpLm92ZXJsYXlPcCh0LGUsaWkuRElGRkVSRU5DRSl9LGUob2kucHJvdG90eXBlLHthZGRQb2x5Z29uOmZ1bmN0aW9uKHQpe2lmKHQuaXNFbXB0eSgpKXJldHVybiBudWxsO3ZhciBlPW51bGwsbj0wLGk9dGhpcy5ob3Jpem9udGFsQmlzZWN0b3IodCk7aWYoMD09PWkuZ2V0TGVuZ3RoKCkpbj0wLGU9aS5nZXRDb29yZGluYXRlKCk7ZWxzZXt2YXIgcj1zaS5vdmVybGF5T3AoaSx0LGlpLklOVEVSU0VDVElPTikscz10aGlzLndpZGVzdEdlb21ldHJ5KHIpO249cy5nZXRFbnZlbG9wZUludGVybmFsKCkuZ2V0V2lkdGgoKSxlPW9pLmNlbnRyZShzLmdldEVudmVsb3BlSW50ZXJuYWwoKSl9KG51bGw9PT10aGlzLmludGVyaW9yUG9pbnR8fG4+dGhpcy5tYXhXaWR0aCkmJih0aGlzLmludGVyaW9yUG9pbnQ9ZSx0aGlzLm1heFdpZHRoPW4pfSxnZXRJbnRlcmlvclBvaW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZXJpb3JQb2ludH0sd2lkZXN0R2VvbWV0cnk6ZnVuY3Rpb24gdCgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZnQpe3ZhciBlPWFyZ3VtZW50c1swXTtpZihlLmlzRW1wdHkoKSlyZXR1cm4gZTtmb3IodmFyIHQ9ZS5nZXRHZW9tZXRyeU4oMCksbj0xO248ZS5nZXROdW1HZW9tZXRyaWVzKCk7bisrKWUuZ2V0R2VvbWV0cnlOKG4pLmdldEVudmVsb3BlSW50ZXJuYWwoKS5nZXRXaWR0aCgpPnQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLmdldFdpZHRoKCkmJih0PWUuZ2V0R2VvbWV0cnlOKG4pKTtyZXR1cm4gdH1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEIpe3ZhciBpPWFyZ3VtZW50c1swXTtyZXR1cm4gaSBpbnN0YW5jZW9mIGZ0P3RoaXMud2lkZXN0R2VvbWV0cnkoaSk6aX19LGhvcml6b250YWxCaXNlY3RvcjpmdW5jdGlvbih0KXt2YXIgZT10LmdldEVudmVsb3BlSW50ZXJuYWwoKSxuPWFpLmdldEJpc2VjdG9yWSh0KTtyZXR1cm4gdGhpcy5mYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcoW25ldyBnKGUuZ2V0TWluWCgpLG4pLG5ldyBnKGUuZ2V0TWF4WCgpLG4pXSl9LGFkZDpmdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgVHQpdGhpcy5hZGRQb2x5Z29uKHQpO2Vsc2UgaWYodCBpbnN0YW5jZW9mIGZ0KWZvcih2YXIgZT10LG49MDtuPGUuZ2V0TnVtR2VvbWV0cmllcygpO24rKyl0aGlzLmFkZChlLmdldEdlb21ldHJ5TihuKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIG9pfX0pLG9pLmNlbnRyZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGcob2kuYXZnKHQuZ2V0TWluWCgpLHQuZ2V0TWF4WCgpKSxvaS5hdmcodC5nZXRNaW5ZKCksdC5nZXRNYXhZKCkpKX0sb2kuYXZnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKHQrZSkvMn0sZShhaS5wcm90b3R5cGUse3VwZGF0ZUludGVydmFsOmZ1bmN0aW9uKHQpe3Q8PXRoaXMuY2VudHJlWT90PnRoaXMubG9ZJiYodGhpcy5sb1k9dCk6dD50aGlzLmNlbnRyZVkmJnQ8dGhpcy5oaVkmJih0aGlzLmhpWT10KX0sZ2V0QmlzZWN0b3JZOmZ1bmN0aW9uKCl7dGhpcy5wcm9jZXNzKHRoaXMucG9seS5nZXRFeHRlcmlvclJpbmcoKSk7Zm9yKHZhciB0PTA7dDx0aGlzLnBvbHkuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7dCsrKXRoaXMucHJvY2Vzcyh0aGlzLnBvbHkuZ2V0SW50ZXJpb3JSaW5nTih0KSk7dmFyIGU9b2kuYXZnKHRoaXMuaGlZLHRoaXMubG9ZKTtyZXR1cm4gZX0scHJvY2VzczpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSxuPTA7bjxlLnNpemUoKTtuKyspe3ZhciBpPWUuZ2V0WShuKTt0aGlzLnVwZGF0ZUludGVydmFsKGkpfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gYWl9fSksYWkuZ2V0QmlzZWN0b3JZPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBhaSh0KTtyZXR1cm4gZS5nZXRCaXNlY3RvclkoKX0sb2kuU2FmZUJpc2VjdG9yRmluZGVyPWFpLGUodWkucHJvdG90eXBlLHthZGRFbmRwb2ludHM6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEIpe3ZhciB0PWFyZ3VtZW50c1swXTtpZih0IGluc3RhbmNlb2YgU3QpdGhpcy5hZGRFbmRwb2ludHModC5nZXRDb29yZGluYXRlcygpKTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBmdClmb3IodmFyIGU9dCxuPTA7bjxlLmdldE51bUdlb21ldHJpZXMoKTtuKyspdGhpcy5hZGRFbmRwb2ludHMoZS5nZXRHZW9tZXRyeU4obikpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBBcnJheSl7dmFyIGk9YXJndW1lbnRzWzBdO3RoaXMuYWRkKGlbMF0pLHRoaXMuYWRkKGlbaS5sZW5ndGgtMV0pfX0sZ2V0SW50ZXJpb3JQb2ludDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmludGVyaW9yUG9pbnR9LGFkZEludGVyaW9yOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCKXt2YXIgdD1hcmd1bWVudHNbMF07aWYodCBpbnN0YW5jZW9mIFN0KXRoaXMuYWRkSW50ZXJpb3IodC5nZXRDb29yZGluYXRlcygpKTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBmdClmb3IodmFyIGU9dCxuPTA7bjxlLmdldE51bUdlb21ldHJpZXMoKTtuKyspdGhpcy5hZGRJbnRlcmlvcihlLmdldEdlb21ldHJ5TihuKSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5KWZvcih2YXIgaT1hcmd1bWVudHNbMF0sbj0xO248aS5sZW5ndGgtMTtuKyspdGhpcy5hZGQoaVtuXSl9LGFkZDpmdW5jdGlvbih0KXt2YXIgZT10LmRpc3RhbmNlKHRoaXMuY2VudHJvaWQpO2U8dGhpcy5taW5EaXN0YW5jZSYmKHRoaXMuaW50ZXJpb3JQb2ludD1uZXcgZyh0KSx0aGlzLm1pbkRpc3RhbmNlPWUpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB1aX19KSxlKGxpLnByb3RvdHlwZSx7Z2V0SW50ZXJpb3JQb2ludDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmludGVyaW9yUG9pbnR9LGFkZDpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQil7dmFyIHQ9YXJndW1lbnRzWzBdO2lmKHQgaW5zdGFuY2VvZiBMdCl0aGlzLmFkZCh0LmdldENvb3JkaW5hdGUoKSk7ZWxzZSBpZih0IGluc3RhbmNlb2YgZnQpZm9yKHZhciBlPXQsbj0wO248ZS5nZXROdW1HZW9tZXRyaWVzKCk7bisrKXRoaXMuYWRkKGUuZ2V0R2VvbWV0cnlOKG4pKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyl7dmFyIGk9YXJndW1lbnRzWzBdLHI9aS5kaXN0YW5jZSh0aGlzLmNlbnRyb2lkKTtyPHRoaXMubWluRGlzdGFuY2UmJih0aGlzLmludGVyaW9yUG9pbnQ9bmV3IGcoaSksdGhpcy5taW5EaXN0YW5jZT1yKX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGxpfX0pLGUoaGkucHJvdG90eXBlLHtzZWxlY3Q6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7YXJndW1lbnRzWzBdfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTt0LmdldExpbmVTZWdtZW50KGUsdGhpcy5zZWxlY3RlZFNlZ21lbnQpLHRoaXMuc2VsZWN0KHRoaXMuc2VsZWN0ZWRTZWdtZW50KX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGhpfX0pLGUoY2kucHJvdG90eXBlLHtoYXNDaGlsZHJlbjpmdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8Mjt0KyspaWYobnVsbCE9PXRoaXMuc3Vibm9kZVt0XSlyZXR1cm4hMDtyZXR1cm4hMX0saXNQcnVuYWJsZTpmdW5jdGlvbigpe3JldHVybiEodGhpcy5oYXNDaGlsZHJlbigpfHx0aGlzLmhhc0l0ZW1zKCkpfSxhZGRBbGxJdGVtczpmdW5jdGlvbih0KXt0LmFkZEFsbCh0aGlzLml0ZW1zKTtmb3IodmFyIGU9MDtlPDI7ZSsrKW51bGwhPT10aGlzLnN1Ym5vZGVbZV0mJnRoaXMuc3Vibm9kZVtlXS5hZGRBbGxJdGVtcyh0KTtyZXR1cm4gdH0sc2l6ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9MDtlPDI7ZSsrKW51bGwhPT10aGlzLnN1Ym5vZGVbZV0mJih0Kz10aGlzLnN1Ym5vZGVbZV0uc2l6ZSgpKTtyZXR1cm4gdCt0aGlzLml0ZW1zLnNpemUoKX0sYWRkQWxsSXRlbXNGcm9tT3ZlcmxhcHBpbmc6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09PXR8fHRoaXMuaXNTZWFyY2hNYXRjaCh0KT8oZS5hZGRBbGwodGhpcy5pdGVtcyksbnVsbCE9PXRoaXMuc3Vibm9kZVswXSYmdGhpcy5zdWJub2RlWzBdLmFkZEFsbEl0ZW1zRnJvbU92ZXJsYXBwaW5nKHQsZSksdm9pZChudWxsIT09dGhpcy5zdWJub2RlWzFdJiZ0aGlzLnN1Ym5vZGVbMV0uYWRkQWxsSXRlbXNGcm9tT3ZlcmxhcHBpbmcodCxlKSkpOm51bGx9LGhhc0l0ZW1zOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaXRlbXMuaXNFbXB0eSgpfSxyZW1vdmU6ZnVuY3Rpb24odCxlKXtpZighdGhpcy5pc1NlYXJjaE1hdGNoKHQpKXJldHVybiExO2Zvcih2YXIgbj0hMSxpPTA7aTwyO2krKylpZihudWxsIT09dGhpcy5zdWJub2RlW2ldJiYobj10aGlzLnN1Ym5vZGVbaV0ucmVtb3ZlKHQsZSkpKXt0aGlzLnN1Ym5vZGVbaV0uaXNQcnVuYWJsZSgpJiYodGhpcy5zdWJub2RlW2ldPW51bGwpO2JyZWFrfXJldHVybiBuP246bj10aGlzLml0ZW1zLnJlbW92ZShlKX0sZ2V0SXRlbXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pdGVtc30sZGVwdGg6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MCxlPTA7ZTwyO2UrKylpZihudWxsIT09dGhpcy5zdWJub2RlW2VdKXt2YXIgbj10aGlzLnN1Ym5vZGVbZV0uZGVwdGgoKTtuPnQmJih0PW4pfXJldHVybiB0KzF9LG5vZGVTaXplOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT0wO2U8MjtlKyspbnVsbCE9PXRoaXMuc3Vibm9kZVtlXSYmKHQrPXRoaXMuc3Vibm9kZVtlXS5ub2RlU2l6ZSgpKTtyZXR1cm4gdCsxfSxhZGQ6ZnVuY3Rpb24odCl7dGhpcy5pdGVtcy5hZGQodCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGNpfX0pLGNpLmdldFN1Ym5vZGVJbmRleD1mdW5jdGlvbih0LGUpe3ZhciBuPS0xO3JldHVybiB0Lm1pbj49ZSYmKG49MSksdC5tYXg8PWUmJihuPTApLG59LGUoZmkucHJvdG90eXBlLHtleHBhbmRUb0luY2x1ZGU6ZnVuY3Rpb24odCl7dC5tYXg+dGhpcy5tYXgmJih0aGlzLm1heD10Lm1heCksdC5taW48dGhpcy5taW4mJih0aGlzLm1pbj10Lm1pbil9LGdldFdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4LXRoaXMubWlufSxvdmVybGFwczpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMub3ZlcmxhcHModC5taW4sdC5tYXgpfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07cmV0dXJuISh0aGlzLm1pbj5ufHx0aGlzLm1heDxlKX19LGdldE1pbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1pbn0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm5cIltcIit0aGlzLm1pbitcIiwgXCIrdGhpcy5tYXgrXCJdXCJ9LGNvbnRhaW5zOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZmkpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5jb250YWlucyh0Lm1pbix0Lm1heCl9aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1swXSl7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiBlPj10aGlzLm1pbiYmZTw9dGhpcy5tYXh9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXTtyZXR1cm4gbj49dGhpcy5taW4mJmk8PXRoaXMubWF4fX0saW5pdDpmdW5jdGlvbih0LGUpe3RoaXMubWluPXQsdGhpcy5tYXg9ZSx0PmUmJih0aGlzLm1pbj1lLHRoaXMubWF4PXQpfSxnZXRNYXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXh9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGZpfX0pLGdpLmV4cG9uZW50PWZ1bmN0aW9uKHQpe3JldHVybiBkaSg2NCx0KS0xMDIzfSxnaS5wb3dlck9mMj1mdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5wb3coMix0KX0sZShwaS5wcm90b3R5cGUse2dldEludGVydmFsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZXJ2YWx9LGdldExldmVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGV2ZWx9LGNvbXB1dGVLZXk6ZnVuY3Rpb24odCl7Zm9yKHRoaXMubGV2ZWw9cGkuY29tcHV0ZUxldmVsKHQpLHRoaXMuaW50ZXJ2YWw9bmV3IGZpLHRoaXMuY29tcHV0ZUludGVydmFsKHRoaXMubGV2ZWwsdCk7IXRoaXMuaW50ZXJ2YWwuY29udGFpbnModCk7KXRoaXMubGV2ZWwrPTEsdGhpcy5jb21wdXRlSW50ZXJ2YWwodGhpcy5sZXZlbCx0KX0sY29tcHV0ZUludGVydmFsOmZ1bmN0aW9uKHQsZSl7dmFyIG49Z2kucG93ZXJPZjIodCk7dGhpcy5wdD1NYXRoLmZsb29yKGUuZ2V0TWluKCkvbikqbix0aGlzLmludGVydmFsLmluaXQodGhpcy5wdCx0aGlzLnB0K24pfSxnZXRQb2ludDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBwaX19KSxwaS5jb21wdXRlTGV2ZWw9ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRXaWR0aCgpLG49Z2kuZXhwb25lbnQoZSkrMTtyZXR1cm4gbn0saCh2aSxjaSksZSh2aS5wcm90b3R5cGUse2dldEludGVydmFsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZXJ2YWx9LGZpbmQ6ZnVuY3Rpb24odCl7dmFyIGU9Y2kuZ2V0U3Vibm9kZUluZGV4KHQsdGhpcy5jZW50cmUpO2lmKGU9PT0tMSlyZXR1cm4gdGhpcztpZihudWxsIT09dGhpcy5zdWJub2RlW2VdKXt2YXIgbj10aGlzLnN1Ym5vZGVbZV07cmV0dXJuIG4uZmluZCh0KX1yZXR1cm4gdGhpc30saW5zZXJ0OmZ1bmN0aW9uKHQpe2YuaXNUcnVlKG51bGw9PT10aGlzLmludGVydmFsfHx0aGlzLmludGVydmFsLmNvbnRhaW5zKHQuaW50ZXJ2YWwpKTt2YXIgZT1jaS5nZXRTdWJub2RlSW5kZXgodC5pbnRlcnZhbCx0aGlzLmNlbnRyZSk7aWYodC5sZXZlbD09PXRoaXMubGV2ZWwtMSl0aGlzLnN1Ym5vZGVbZV09dDtlbHNle3ZhciBuPXRoaXMuY3JlYXRlU3Vibm9kZShlKTtuLmluc2VydCh0KSx0aGlzLnN1Ym5vZGVbZV09bn19LGlzU2VhcmNoTWF0Y2g6ZnVuY3Rpb24odCl7cmV0dXJuIHQub3ZlcmxhcHModGhpcy5pbnRlcnZhbCl9LGdldFN1Ym5vZGU6ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PT10aGlzLnN1Ym5vZGVbdF0mJih0aGlzLnN1Ym5vZGVbdF09dGhpcy5jcmVhdGVTdWJub2RlKHQpKSx0aGlzLnN1Ym5vZGVbdF19LGdldE5vZGU6ZnVuY3Rpb24odCl7dmFyIGU9Y2kuZ2V0U3Vibm9kZUluZGV4KHQsdGhpcy5jZW50cmUpO2lmKGUhPT0tMSl7dmFyIG49dGhpcy5nZXRTdWJub2RlKGUpO3JldHVybiBuLmdldE5vZGUodCl9cmV0dXJuIHRoaXN9LGNyZWF0ZVN1Ym5vZGU6ZnVuY3Rpb24odCl7dmFyIGU9MCxuPTA7c3dpdGNoKHQpe2Nhc2UgMDplPXRoaXMuaW50ZXJ2YWwuZ2V0TWluKCksbj10aGlzLmNlbnRyZTticmVhaztjYXNlIDE6ZT10aGlzLmNlbnRyZSxuPXRoaXMuaW50ZXJ2YWwuZ2V0TWF4KCl9dmFyIGk9bmV3IGZpKGUsbikscj1uZXcgdmkoaSx0aGlzLmxldmVsLTEpO3JldHVybiByfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB2aX19KSx2aS5jcmVhdGVOb2RlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBwaSh0KSxuPW5ldyB2aShlLmdldEludGVydmFsKCksZS5nZXRMZXZlbCgpKTtyZXR1cm4gbn0sdmkuY3JlYXRlRXhwYW5kZWQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgZmkoZSk7bnVsbCE9PXQmJm4uZXhwYW5kVG9JbmNsdWRlKHQuaW50ZXJ2YWwpO3ZhciBpPXZpLmNyZWF0ZU5vZGUobik7cmV0dXJuIG51bGwhPT10JiZpLmluc2VydCh0KSxpfSxlKG1pLnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gbWl9fSk7bWkuaXNaZXJvV2lkdGg9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLXQ7aWYoMD09PW4pcmV0dXJuITA7dmFyIGk9TWF0aC5tYXgoTWF0aC5hYnModCksTWF0aC5hYnMoZSkpLHI9bi9pLHM9Z2kuZXhwb25lbnQocik7cmV0dXJuIHM8PW1pLk1JTl9CSU5BUllfRVhQT05FTlR9O21pLk1JTl9CSU5BUllfRVhQT05FTlQ9LTUwLGgoeWksY2kpLGUoeWkucHJvdG90eXBlLHtpbnNlcnQ6ZnVuY3Rpb24odCxlKXt2YXIgbj1jaS5nZXRTdWJub2RlSW5kZXgodCx5aS5vcmlnaW4pO2lmKG49PT0tMSlyZXR1cm4gdGhpcy5hZGQoZSksbnVsbDt2YXIgaT10aGlzLnN1Ym5vZGVbbl07aWYobnVsbD09PWl8fCFpLmdldEludGVydmFsKCkuY29udGFpbnModCkpe3ZhciByPXZpLmNyZWF0ZUV4cGFuZGVkKGksdCk7dGhpcy5zdWJub2RlW25dPXJ9dGhpcy5pbnNlcnRDb250YWluZWQodGhpcy5zdWJub2RlW25dLHQsZSl9LGlzU2VhcmNoTWF0Y2g6ZnVuY3Rpb24odCl7cmV0dXJuITB9LGluc2VydENvbnRhaW5lZDpmdW5jdGlvbih0LGUsbil7Zi5pc1RydWUodC5nZXRJbnRlcnZhbCgpLmNvbnRhaW5zKGUpKTt2YXIgaT1taS5pc1plcm9XaWR0aChlLmdldE1pbigpLGUuZ2V0TWF4KCkpLHI9bnVsbDtyPWk/dC5maW5kKGUpOnQuZ2V0Tm9kZShlKSxyLmFkZChuKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4geWl9fSkseWkub3JpZ2luPTAsZSh4aS5wcm90b3R5cGUse3NpemU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMucm9vdD90aGlzLnJvb3Quc2l6ZSgpOjB9LGluc2VydDpmdW5jdGlvbih0LGUpe3RoaXMuY29sbGVjdFN0YXRzKHQpO3ZhciBuPXhpLmVuc3VyZUV4dGVudCh0LHRoaXMubWluRXh0ZW50KTt0aGlzLnJvb3QuaW5zZXJ0KG4sZSl9LHF1ZXJ5OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5xdWVyeShuZXcgZmkodCx0KSl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBmaSl7dmFyIGU9YXJndW1lbnRzWzBdLG49bmV3IEk7cmV0dXJuIHRoaXMucXVlcnkoZSxuKSxufX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV07dGhpcy5yb290LmFkZEFsbEl0ZW1zRnJvbU92ZXJsYXBwaW5nKGkscil9fSxpdGVyYXRvcjpmdW5jdGlvbigpe3ZhciB0PW5ldyBJO3JldHVybiB0aGlzLnJvb3QuYWRkQWxsSXRlbXModCksdC5pdGVyYXRvcigpfSxyZW1vdmU6ZnVuY3Rpb24odCxlKXt2YXIgbj14aS5lbnN1cmVFeHRlbnQodCx0aGlzLm1pbkV4dGVudCk7cmV0dXJuIHRoaXMucm9vdC5yZW1vdmUobixlKX0sY29sbGVjdFN0YXRzOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0V2lkdGgoKTtlPHRoaXMubWluRXh0ZW50JiZlPjAmJih0aGlzLm1pbkV4dGVudD1lKX0sZGVwdGg6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMucm9vdD90aGlzLnJvb3QuZGVwdGgoKTowfSxub2RlU2l6ZTpmdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5yb290P3RoaXMucm9vdC5ub2RlU2l6ZSgpOjB9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHhpfX0pLHhpLmVuc3VyZUV4dGVudD1mdW5jdGlvbih0LGUpe3ZhciBuPXQuZ2V0TWluKCksaT10LmdldE1heCgpO3JldHVybiBuIT09aT90OihuPT09aSYmKG4tPWUvMixpPW4rZS8yKSxuZXcgZmkobixpKSl9LGUoRWkucHJvdG90eXBlLHtpc0luc2lkZTpmdW5jdGlvbih0KXt9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEVpfX0pLGUoSWkucHJvdG90eXBlLHt0ZXN0TGluZVNlZ21lbnQ6ZnVuY3Rpb24odCxlKXt2YXIgbj1udWxsLGk9bnVsbCxyPW51bGwscz1udWxsLG89bnVsbCxhPWUucDAsdT1lLnAxO2k9YS54LXQueCxyPWEueS10Lnkscz11LngtdC54LG89dS55LXQueSwocj4wJiZvPD0wfHxvPjAmJnI8PTApJiYobj11ZS5zaWduT2ZEZXQyeDIoaSxyLHMsbykvKG8tciksMDxuJiZ0aGlzLmNyb3NzaW5ncysrKX0sYnVpbGRJbmRleDpmdW5jdGlvbigpe3RoaXMudHJlZT1uZXcgeGk7Zm9yKHZhciB0PUgucmVtb3ZlUmVwZWF0ZWRQb2ludHModGhpcy5yaW5nLmdldENvb3JkaW5hdGVzKCkpLGU9JGUuZ2V0Q2hhaW5zKHQpLG49MDtuPGUuc2l6ZSgpO24rKyl7dmFyIGk9ZS5nZXQobikscj1pLmdldEVudmVsb3BlKCk7dGhpcy5pbnRlcnZhbC5taW49ci5nZXRNaW5ZKCksdGhpcy5pbnRlcnZhbC5tYXg9ci5nZXRNYXhZKCksdGhpcy50cmVlLmluc2VydCh0aGlzLmludGVydmFsLGkpfX0sdGVzdE1vbm90b25lQ2hhaW46ZnVuY3Rpb24odCxlLG4pe24uc2VsZWN0KHQsZSl9LGlzSW5zaWRlOmZ1bmN0aW9uKHQpe3RoaXMuY3Jvc3NpbmdzPTA7dmFyIGU9bmV3IEMoci5ORUdBVElWRV9JTkZJTklUWSxyLlBPU0lUSVZFX0lORklOSVRZLHQueSx0LnkpO3RoaXMuaW50ZXJ2YWwubWluPXQueSx0aGlzLmludGVydmFsLm1heD10Lnk7Zm9yKHZhciBuPXRoaXMudHJlZS5xdWVyeSh0aGlzLmludGVydmFsKSxpPW5ldyBOaSh0aGlzLHQpLHM9bi5pdGVyYXRvcigpO3MuaGFzTmV4dCgpOyl7dmFyIG89cy5uZXh0KCk7dGhpcy50ZXN0TW9ub3RvbmVDaGFpbihlLGksbyl9cmV0dXJuIHRoaXMuY3Jvc3NpbmdzJTI9PT0xfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltFaV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIElpfX0pLGgoTmksaGkpLGUoTmkucHJvdG90eXBlLHtzZWxlY3Q6ZnVuY3Rpb24oKXtpZigxIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gaGkucHJvdG90eXBlLnNlbGVjdC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubWNwLnRlc3RMaW5lU2VnbWVudCh0aGlzLnAsdCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE5pfX0pLElpLk1DU2VsZWN0ZXI9TmksZShDaS5wcm90b3R5cGUse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIENpfX0pLENpLnRvRGVncmVlcz1mdW5jdGlvbih0KXtyZXR1cm4gMTgwKnQvTWF0aC5QSX0sQ2kubm9ybWFsaXplPWZ1bmN0aW9uKHQpe2Zvcig7dD5NYXRoLlBJOyl0LT1DaS5QSV9USU1FU18yO2Zvcig7dDw9LU1hdGguUEk7KXQrPUNpLlBJX1RJTUVTXzI7cmV0dXJuIHR9LENpLmFuZ2xlPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gTWF0aC5hdGFuMih0LnksdC54KX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9bi54LWUueCxyPW4ueS1lLnk7cmV0dXJuIE1hdGguYXRhbjIocixpKX19LENpLmlzQWN1dGU9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQueC1lLngscj10LnktZS55LHM9bi54LWUueCxvPW4ueS1lLnksYT1pKnMrcipvO3JldHVybiBhPjB9LENpLmlzT2J0dXNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LngtZS54LHI9dC55LWUueSxzPW4ueC1lLngsbz1uLnktZS55LGE9aSpzK3IqbztyZXR1cm4gYTwwfSxDaS5pbnRlcmlvckFuZ2xlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1DaS5hbmdsZShlLHQpLHI9Q2kuYW5nbGUoZSxuKTtyZXR1cm4gTWF0aC5hYnMoci1pKX0sQ2kubm9ybWFsaXplUG9zaXRpdmU9ZnVuY3Rpb24odCl7aWYodDwwKXtmb3IoO3Q8MDspdCs9Q2kuUElfVElNRVNfMjt0Pj1DaS5QSV9USU1FU18yJiYodD0wKX1lbHNle2Zvcig7dD49Q2kuUElfVElNRVNfMjspdC09Q2kuUElfVElNRVNfMjt0PDAmJih0PTApfXJldHVybiB0fSxDaS5hbmdsZUJldHdlZW49ZnVuY3Rpb24odCxlLG4pe3ZhciBpPUNpLmFuZ2xlKGUsdCkscj1DaS5hbmdsZShlLG4pO3JldHVybiBDaS5kaWZmKGkscil9LENpLmRpZmY9ZnVuY3Rpb24odCxlKXt2YXIgbj1udWxsO3JldHVybiBuPXQ8ZT9lLXQ6dC1lLG4+TWF0aC5QSSYmKG49MipNYXRoLlBJLW4pLG59LENpLnRvUmFkaWFucz1mdW5jdGlvbih0KXtyZXR1cm4gdCpNYXRoLlBJLzE4MH0sQ2kuZ2V0VHVybj1mdW5jdGlvbih0LGUpe3ZhciBuPU1hdGguc2luKGUtdCk7cmV0dXJuIG4+MD9DaS5DT1VOVEVSQ0xPQ0tXSVNFOm48MD9DaS5DTE9DS1dJU0U6Q2kuTk9ORX0sQ2kuYW5nbGVCZXR3ZWVuT3JpZW50ZWQ9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPUNpLmFuZ2xlKGUsdCkscj1DaS5hbmdsZShlLG4pLHM9ci1pO3JldHVybiBzPD0tTWF0aC5QST9zK0NpLlBJX1RJTUVTXzI6cz5NYXRoLlBJP3MtQ2kuUElfVElNRVNfMjpzfSxDaS5QSV9USU1FU18yPTIqTWF0aC5QSSxDaS5QSV9PVkVSXzI9TWF0aC5QSS8yLENpLlBJX09WRVJfND1NYXRoLlBJLzQsQ2kuQ09VTlRFUkNMT0NLV0lTRT1oZS5DT1VOVEVSQ0xPQ0tXSVNFLENpLkNMT0NLV0lTRT1oZS5DTE9DS1dJU0UsQ2kuTk9ORT1oZS5DT0xMSU5FQVIsZShTaS5wcm90b3R5cGUse2FyZWE6ZnVuY3Rpb24oKXtyZXR1cm4gU2kuYXJlYSh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LHNpZ25lZEFyZWE6ZnVuY3Rpb24oKXtyZXR1cm4gU2kuc2lnbmVkQXJlYSh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LGludGVycG9sYXRlWjpmdW5jdGlvbih0KXtpZihudWxsPT09dCl0aHJvdyBuZXcgaShcIlN1cHBsaWVkIHBvaW50IGlzIG51bGwuXCIpO3JldHVybiBTaS5pbnRlcnBvbGF0ZVoodCx0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LGxvbmdlc3RTaWRlTGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIFNpLmxvbmdlc3RTaWRlTGVuZ3RoKHRoaXMucDAsdGhpcy5wMSx0aGlzLnAyKX0saXNBY3V0ZTpmdW5jdGlvbigpe3JldHVybiBTaS5pc0FjdXRlKHRoaXMucDAsdGhpcy5wMSx0aGlzLnAyKX0sY2lyY3VtY2VudHJlOmZ1bmN0aW9uKCl7cmV0dXJuIFNpLmNpcmN1bWNlbnRyZSh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LGFyZWEzRDpmdW5jdGlvbigpe3JldHVybiBTaS5hcmVhM0QodGhpcy5wMCx0aGlzLnAxLHRoaXMucDIpfSxjZW50cm9pZDpmdW5jdGlvbigpe3JldHVybiBTaS5jZW50cm9pZCh0aGlzLnAwLHRoaXMucDEsdGhpcy5wMil9LGluQ2VudHJlOmZ1bmN0aW9uKCl7cmV0dXJuIFNpLmluQ2VudHJlKHRoaXMucDAsdGhpcy5wMSx0aGlzLnAyKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gU2l9fSksU2kuYXJlYT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIE1hdGguYWJzKCgobi54LXQueCkqKGUueS10LnkpLShlLngtdC54KSoobi55LXQueSkpLzIpfSxTaS5zaWduZWRBcmVhPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4oKG4ueC10LngpKihlLnktdC55KS0oZS54LXQueCkqKG4ueS10LnkpKS8yfSxTaS5kZXQ9ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIHQqaS1lKm59LFNpLmludGVycG9sYXRlWj1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1lLngscz1lLnksbz1uLngtcixhPWkueC1yLHU9bi55LXMsbD1pLnktcyxoPW8qbC1hKnUsYz10LngtcixmPXQueS1zLGc9KGwqYy1hKmYpL2gsZD0oLXUqYytvKmYpL2gscD1lLnorZyoobi56LWUueikrZCooaS56LWUueik7cmV0dXJuIHB9LFNpLmxvbmdlc3RTaWRlTGVuZ3RoPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmRpc3RhbmNlKGUpLHI9ZS5kaXN0YW5jZShuKSxzPW4uZGlzdGFuY2UodCksbz1pO3JldHVybiByPm8mJihvPXIpLHM+byYmKG89cyksb30sU2kuaXNBY3V0ZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuISFDaS5pc0FjdXRlKHQsZSxuKSYmKCEhQ2kuaXNBY3V0ZShlLG4sdCkmJiEhQ2kuaXNBY3V0ZShuLHQsZSkpfSxTaS5jaXJjdW1jZW50cmU9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4ueCxyPW4ueSxzPXQueC1pLG89dC55LXIsYT1lLngtaSx1PWUueS1yLGw9MipTaS5kZXQocyxvLGEsdSksaD1TaS5kZXQobyxzKnMrbypvLHUsYSphK3UqdSksYz1TaS5kZXQocyxzKnMrbypvLGEsYSphK3UqdSksZj1pLWgvbCxkPXIrYy9sO3JldHVybiBuZXcgZyhmLGQpfSxTaS5wZXJwZW5kaWN1bGFyQmlzZWN0b3I9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLngtdC54LGk9ZS55LXQueSxyPW5ldyBGKHQueCtuLzIsdC55K2kvMiwxKSxzPW5ldyBGKHQueC1pK24vMix0LnkrbitpLzIsMSk7cmV0dXJuIG5ldyBGKHIscyl9LFNpLmFuZ2xlQmlzZWN0b3I9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPWUuZGlzdGFuY2UodCkscj1lLmRpc3RhbmNlKG4pLHM9aS8oaStyKSxvPW4ueC10LngsYT1uLnktdC55LHU9bmV3IGcodC54K3Mqbyx0LnkrcyphKTtyZXR1cm4gdX0sU2kuYXJlYTNEPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1lLngtdC54LHI9ZS55LXQueSxzPWUuei10Lnosbz1uLngtdC54LGE9bi55LXQueSx1PW4uei10LnosbD1yKnUtcyphLGg9cypvLWkqdSxjPWkqYS1yKm8sZj1sKmwraCpoK2MqYyxnPU1hdGguc3FydChmKS8yO3JldHVybiBnfSxTaS5jZW50cm9pZD1mdW5jdGlvbih0LGUsbil7dmFyIGk9KHQueCtlLngrbi54KS8zLHI9KHQueStlLnkrbi55KS8zO3JldHVybiBuZXcgZyhpLHIpfSxTaS5pbkNlbnRyZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9ZS5kaXN0YW5jZShuKSxyPXQuZGlzdGFuY2Uobikscz10LmRpc3RhbmNlKGUpLG89aStyK3MsYT0oaSp0LngrciplLngrcypuLngpL28sdT0oaSp0LnkrciplLnkrcypuLnkpL287cmV0dXJuIG5ldyBnKGEsdSl9LGUod2kucHJvdG90eXBlLHtnZXRSYWRpdXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb21wdXRlKCksdGhpcy5yYWRpdXN9LGdldERpYW1ldGVyOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuY29tcHV0ZSgpLHRoaXMuZXh0cmVtYWxQdHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIHRoaXMuaW5wdXQuZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVTdHJpbmcoKTtjYXNlIDE6cmV0dXJuIHRoaXMuaW5wdXQuZ2V0RmFjdG9yeSgpLmNyZWF0ZVBvaW50KHRoaXMuY2VudHJlKX12YXIgdD10aGlzLmV4dHJlbWFsUHRzWzBdLGU9dGhpcy5leHRyZW1hbFB0c1sxXTtyZXR1cm4gdGhpcy5pbnB1dC5nZXRGYWN0b3J5KCkuY3JlYXRlTGluZVN0cmluZyhbdCxlXSl9LGdldEV4dHJlbWFsUG9pbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcHV0ZSgpLHRoaXMuZXh0cmVtYWxQdHN9LGNvbXB1dGVDaXJjbGVQb2ludHM6ZnVuY3Rpb24oKXtpZih0aGlzLmlucHV0LmlzRW1wdHkoKSlyZXR1cm4gdGhpcy5leHRyZW1hbFB0cz1uZXcgQXJyYXkoMCkuZmlsbChudWxsKSxudWxsO2lmKDE9PT10aGlzLmlucHV0LmdldE51bVBvaW50cygpKXt2YXIgdD10aGlzLmlucHV0LmdldENvb3JkaW5hdGVzKCk7cmV0dXJuIHRoaXMuZXh0cmVtYWxQdHM9W25ldyBnKHRbMF0pXSxudWxsfXZhciBlPXRoaXMuaW5wdXQuY29udmV4SHVsbCgpLG49ZS5nZXRDb29yZGluYXRlcygpLHQ9bjtpZihuWzBdLmVxdWFsczJEKG5bbi5sZW5ndGgtMV0pJiYodD1uZXcgQXJyYXkobi5sZW5ndGgtMSkuZmlsbChudWxsKSxILmNvcHlEZWVwKG4sMCx0LDAsbi5sZW5ndGgtMSkpLHQubGVuZ3RoPD0yKXJldHVybiB0aGlzLmV4dHJlbWFsUHRzPUguY29weURlZXAodCksbnVsbDtmb3IodmFyIGk9d2kubG93ZXN0UG9pbnQodCkscj13aS5wb2ludFdpdE1pbkFuZ2xlV2l0aFgodCxpKSxzPTA7czx0Lmxlbmd0aDtzKyspe3ZhciBvPXdpLnBvaW50V2l0aE1pbkFuZ2xlV2l0aFNlZ21lbnQodCxpLHIpO2lmKENpLmlzT2J0dXNlKGksbyxyKSlyZXR1cm4gdGhpcy5leHRyZW1hbFB0cz1bbmV3IGcoaSksbmV3IGcocildLG51bGw7aWYoQ2kuaXNPYnR1c2UobyxpLHIpKWk9bztlbHNle2lmKCFDaS5pc09idHVzZShvLHIsaSkpcmV0dXJuIHRoaXMuZXh0cmVtYWxQdHM9W25ldyBnKGkpLG5ldyBnKHIpLG5ldyBnKG8pXSxudWxsO3I9b319Zi5zaG91bGROZXZlclJlYWNoSGVyZShcIkxvZ2ljIGZhaWx1cmUgaW4gTWluaW11bSBCb3VuZGluZyBDaXJjbGUgYWxnb3JpdGhtIVwiKX0sY29tcHV0ZTpmdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5leHRyZW1hbFB0cz9udWxsOih0aGlzLmNvbXB1dGVDaXJjbGVQb2ludHMoKSx0aGlzLmNvbXB1dGVDZW50cmUoKSx2b2lkKG51bGwhPT10aGlzLmNlbnRyZSYmKHRoaXMucmFkaXVzPXRoaXMuY2VudHJlLmRpc3RhbmNlKHRoaXMuZXh0cmVtYWxQdHNbMF0pKSkpfSxnZXRGYXJ0aGVzdFBvaW50czpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmNvbXB1dGUoKSx0aGlzLmV4dHJlbWFsUHRzLmxlbmd0aCl7Y2FzZSAwOnJldHVybiB0aGlzLmlucHV0LmdldEZhY3RvcnkoKS5jcmVhdGVMaW5lU3RyaW5nKCk7Y2FzZSAxOnJldHVybiB0aGlzLmlucHV0LmdldEZhY3RvcnkoKS5jcmVhdGVQb2ludCh0aGlzLmNlbnRyZSl9dmFyIHQ9dGhpcy5leHRyZW1hbFB0c1swXSxlPXRoaXMuZXh0cmVtYWxQdHNbdGhpcy5leHRyZW1hbFB0cy5sZW5ndGgtMV07cmV0dXJuIHRoaXMuaW5wdXQuZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVTdHJpbmcoW3QsZV0pfSxnZXRDaXJjbGU6ZnVuY3Rpb24oKXtpZih0aGlzLmNvbXB1dGUoKSxudWxsPT09dGhpcy5jZW50cmUpcmV0dXJuIHRoaXMuaW5wdXQuZ2V0RmFjdG9yeSgpLmNyZWF0ZVBvbHlnb24oKTt2YXIgdD10aGlzLmlucHV0LmdldEZhY3RvcnkoKS5jcmVhdGVQb2ludCh0aGlzLmNlbnRyZSk7cmV0dXJuIDA9PT10aGlzLnJhZGl1cz90OnQuYnVmZmVyKHRoaXMucmFkaXVzKX0sZ2V0Q2VudHJlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcHV0ZSgpLHRoaXMuY2VudHJlfSxjb21wdXRlQ2VudHJlOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZXh0cmVtYWxQdHMubGVuZ3RoKXtjYXNlIDA6dGhpcy5jZW50cmU9bnVsbDticmVhaztjYXNlIDE6dGhpcy5jZW50cmU9dGhpcy5leHRyZW1hbFB0c1swXTticmVhaztjYXNlIDI6dGhpcy5jZW50cmU9bmV3IGcoKHRoaXMuZXh0cmVtYWxQdHNbMF0ueCt0aGlzLmV4dHJlbWFsUHRzWzFdLngpLzIsKHRoaXMuZXh0cmVtYWxQdHNbMF0ueSt0aGlzLmV4dHJlbWFsUHRzWzFdLnkpLzIpO2JyZWFrO2Nhc2UgMzp0aGlzLmNlbnRyZT1TaS5jaXJjdW1jZW50cmUodGhpcy5leHRyZW1hbFB0c1swXSx0aGlzLmV4dHJlbWFsUHRzWzFdLHRoaXMuZXh0cmVtYWxQdHNbMl0pfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gd2l9fSksd2kucG9pbnRXaXRNaW5BbmdsZVdpdGhYPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXIuTUFYX1ZBTFVFLGk9bnVsbCxzPTA7czx0Lmxlbmd0aDtzKyspe3ZhciBvPXRbc107aWYobyE9PWUpe3ZhciBhPW8ueC1lLngsdT1vLnktZS55O3U8MCYmKHU9LXUpO3ZhciBsPU1hdGguc3FydChhKmErdSp1KSxoPXUvbDtoPG4mJihuPWgsaT1vKX19cmV0dXJuIGl9LHdpLmxvd2VzdFBvaW50PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10WzBdLG49MTtuPHQubGVuZ3RoO24rKyl0W25dLnk8ZS55JiYoZT10W25dKTtyZXR1cm4gZX0sd2kucG9pbnRXaXRoTWluQW5nbGVXaXRoU2VnbWVudD1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPXIuTUFYX1ZBTFVFLHM9bnVsbCxvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBhPXRbb107aWYoYSE9PWUmJmEhPT1uKXt2YXIgdT1DaS5hbmdsZUJldHdlZW4oZSxhLG4pO3U8aSYmKGk9dSxzPWEpfX1yZXR1cm4gc30sZShMaS5wcm90b3R5cGUse2dldFdpZHRoQ29vcmRpbmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbXB1dGVNaW5pbXVtRGlhbWV0ZXIoKSx0aGlzLm1pbldpZHRoUHR9LGdldFN1cHBvcnRpbmdTZWdtZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcHV0ZU1pbmltdW1EaWFtZXRlcigpLHRoaXMuaW5wdXRHZW9tLmdldEZhY3RvcnkoKS5jcmVhdGVMaW5lU3RyaW5nKFt0aGlzLm1pbkJhc2VTZWcucDAsdGhpcy5taW5CYXNlU2VnLnAxXSl9LGdldERpYW1ldGVyOmZ1bmN0aW9uKCl7aWYodGhpcy5jb21wdXRlTWluaW11bURpYW1ldGVyKCksbnVsbD09PXRoaXMubWluV2lkdGhQdClyZXR1cm4gdGhpcy5pbnB1dEdlb20uZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVTdHJpbmcobnVsbCk7dmFyIHQ9dGhpcy5taW5CYXNlU2VnLnByb2plY3QodGhpcy5taW5XaWR0aFB0KTtyZXR1cm4gdGhpcy5pbnB1dEdlb20uZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVTdHJpbmcoW3QsdGhpcy5taW5XaWR0aFB0XSl9LGNvbXB1dGVXaWR0aENvbnZleDpmdW5jdGlvbih0KXt0IGluc3RhbmNlb2YgVHQ/dGhpcy5jb252ZXhIdWxsUHRzPXQuZ2V0RXh0ZXJpb3JSaW5nKCkuZ2V0Q29vcmRpbmF0ZXMoKTp0aGlzLmNvbnZleEh1bGxQdHM9dC5nZXRDb29yZGluYXRlcygpLDA9PT10aGlzLmNvbnZleEh1bGxQdHMubGVuZ3RoPyh0aGlzLm1pbldpZHRoPTAsdGhpcy5taW5XaWR0aFB0PW51bGwsdGhpcy5taW5CYXNlU2VnPW51bGwpOjE9PT10aGlzLmNvbnZleEh1bGxQdHMubGVuZ3RoPyh0aGlzLm1pbldpZHRoPTAsdGhpcy5taW5XaWR0aFB0PXRoaXMuY29udmV4SHVsbFB0c1swXSx0aGlzLm1pbkJhc2VTZWcucDA9dGhpcy5jb252ZXhIdWxsUHRzWzBdLHRoaXMubWluQmFzZVNlZy5wMT10aGlzLmNvbnZleEh1bGxQdHNbMF0pOjI9PT10aGlzLmNvbnZleEh1bGxQdHMubGVuZ3RofHwzPT09dGhpcy5jb252ZXhIdWxsUHRzLmxlbmd0aD8odGhpcy5taW5XaWR0aD0wLHRoaXMubWluV2lkdGhQdD10aGlzLmNvbnZleEh1bGxQdHNbMF0sdGhpcy5taW5CYXNlU2VnLnAwPXRoaXMuY29udmV4SHVsbFB0c1swXSx0aGlzLm1pbkJhc2VTZWcucDE9dGhpcy5jb252ZXhIdWxsUHRzWzFdKTp0aGlzLmNvbXB1dGVDb252ZXhSaW5nTWluRGlhbWV0ZXIodGhpcy5jb252ZXhIdWxsUHRzKX0sY29tcHV0ZUNvbnZleFJpbmdNaW5EaWFtZXRlcjpmdW5jdGlvbih0KXt0aGlzLm1pbldpZHRoPXIuTUFYX1ZBTFVFO2Zvcih2YXIgZT0xLG49bmV3IGNlLGk9MDtpPHQubGVuZ3RoLTE7aSsrKW4ucDA9dFtpXSxuLnAxPXRbaSsxXSxlPXRoaXMuZmluZE1heFBlcnBEaXN0YW5jZSh0LG4sZSl9LGNvbXB1dGVNaW5pbXVtRGlhbWV0ZXI6ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5taW5XaWR0aFB0KXJldHVybiBudWxsO2lmKHRoaXMuaXNDb252ZXgpdGhpcy5jb21wdXRlV2lkdGhDb252ZXgodGhpcy5pbnB1dEdlb20pO2Vsc2V7dmFyIHQ9bmV3IG1lKHRoaXMuaW5wdXRHZW9tKS5nZXRDb252ZXhIdWxsKCk7dGhpcy5jb21wdXRlV2lkdGhDb252ZXgodCl9fSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb21wdXRlTWluaW11bURpYW1ldGVyKCksdGhpcy5taW5XaWR0aH0sZmluZE1heFBlcnBEaXN0YW5jZTpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPWUuZGlzdGFuY2VQZXJwZW5kaWN1bGFyKHRbbl0pLHI9aSxzPW4sbz1zO3I+PWk7KWk9cixzPW8sbz1MaS5uZXh0SW5kZXgodCxzKSxyPWUuZGlzdGFuY2VQZXJwZW5kaWN1bGFyKHRbb10pO3JldHVybiBpPHRoaXMubWluV2lkdGgmJih0aGlzLm1pblB0SW5kZXg9cyx0aGlzLm1pbldpZHRoPWksdGhpcy5taW5XaWR0aFB0PXRbdGhpcy5taW5QdEluZGV4XSx0aGlzLm1pbkJhc2VTZWc9bmV3IGNlKGUpKSxzfSxnZXRNaW5pbXVtUmVjdGFuZ2xlOmZ1bmN0aW9uKCl7aWYodGhpcy5jb21wdXRlTWluaW11bURpYW1ldGVyKCksMD09PXRoaXMubWluV2lkdGgpcmV0dXJuIHRoaXMubWluQmFzZVNlZy5wMC5lcXVhbHMyRCh0aGlzLm1pbkJhc2VTZWcucDEpP3RoaXMuaW5wdXRHZW9tLmdldEZhY3RvcnkoKS5jcmVhdGVQb2ludCh0aGlzLm1pbkJhc2VTZWcucDApOnRoaXMubWluQmFzZVNlZy50b0dlb21ldHJ5KHRoaXMuaW5wdXRHZW9tLmdldEZhY3RvcnkoKSk7Zm9yKHZhciB0PXRoaXMubWluQmFzZVNlZy5wMS54LXRoaXMubWluQmFzZVNlZy5wMC54LGU9dGhpcy5taW5CYXNlU2VnLnAxLnktdGhpcy5taW5CYXNlU2VnLnAwLnksbj1yLk1BWF9WQUxVRSxpPS1yLk1BWF9WQUxVRSxzPXIuTUFYX1ZBTFVFLG89LXIuTUFYX1ZBTFVFLGE9MDthPHRoaXMuY29udmV4SHVsbFB0cy5sZW5ndGg7YSsrKXt2YXIgdT1MaS5jb21wdXRlQyh0LGUsdGhpcy5jb252ZXhIdWxsUHRzW2FdKTt1PmkmJihpPXUpLHU8biYmKG49dSk7dmFyIGw9TGkuY29tcHV0ZUMoLWUsdCx0aGlzLmNvbnZleEh1bGxQdHNbYV0pO2w+byYmKG89bCksbDxzJiYocz1sKX12YXIgaD1MaS5jb21wdXRlU2VnbWVudEZvckxpbmUoLXQsLWUsbyksYz1MaS5jb21wdXRlU2VnbWVudEZvckxpbmUoLXQsLWUscyksZj1MaS5jb21wdXRlU2VnbWVudEZvckxpbmUoLWUsdCxpKSxnPUxpLmNvbXB1dGVTZWdtZW50Rm9yTGluZSgtZSx0LG4pLGQ9Zi5saW5lSW50ZXJzZWN0aW9uKGgpLHA9Zy5saW5lSW50ZXJzZWN0aW9uKGgpLHY9Zy5saW5lSW50ZXJzZWN0aW9uKGMpLG09Zi5saW5lSW50ZXJzZWN0aW9uKGMpLHk9dGhpcy5pbnB1dEdlb20uZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVhclJpbmcoW2QscCx2LG0sZF0pO3JldHVybiB0aGlzLmlucHV0R2VvbS5nZXRGYWN0b3J5KCkuY3JlYXRlUG9seWdvbih5LG51bGwpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBMaX19KSxMaS5uZXh0SW5kZXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZSsrLGU+PXQubGVuZ3RoJiYoZT0wKSxlfSxMaS5jb21wdXRlQz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHQqbi55LWUqbi54fSxMaS5nZXRNaW5pbXVtRGlhbWV0ZXI9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBMaSh0KS5nZXREaWFtZXRlcigpfSxMaS5nZXRNaW5pbXVtUmVjdGFuZ2xlPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgTGkodCkuZ2V0TWluaW11bVJlY3RhbmdsZSgpfSxMaS5jb21wdXRlU2VnbWVudEZvckxpbmU9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW51bGwscj1udWxsO3JldHVybiBNYXRoLmFicyhlKT5NYXRoLmFicyh0KT8oaT1uZXcgZygwLG4vZSkscj1uZXcgZygxLG4vZS10L2UpKTooaT1uZXcgZyhuL3QsMCkscj1uZXcgZyhuL3QtZS90LDEpKSxuZXcgY2UoaSxyKX07dmFyIGNvPU9iamVjdC5mcmVlemUoe0NlbnRyb2lkOmdlLENHQWxnb3JpdGhtczpoZSxDb252ZXhIdWxsOm1lLEludGVyaW9yUG9pbnRBcmVhOm9pLEludGVyaW9yUG9pbnRMaW5lOnVpLEludGVyaW9yUG9pbnRQb2ludDpsaSxSb2J1c3RMaW5lSW50ZXJzZWN0b3I6YWUsTUNQb2ludEluUmluZzpJaSxNaW5pbXVtQm91bmRpbmdDaXJjbGU6d2ksTWluaW11bURpYW1ldGVyOkxpfSk7ZShSaS5wcm90b3R5cGUse2dldFJlc3VsdEdlb21ldHJ5OmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUaSh0aGlzLmRpc3RhbmNlVG9sZXJhbmNlKS50cmFuc2Zvcm0odGhpcy5pbnB1dEdlb20pfSxzZXREaXN0YW5jZVRvbGVyYW5jZTpmdW5jdGlvbih0KXtpZih0PD0wKXRocm93IG5ldyBpKFwiVG9sZXJhbmNlIG11c3QgYmUgcG9zaXRpdmVcIik7dGhpcy5kaXN0YW5jZVRvbGVyYW5jZT10fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBSaX19KSxSaS5kZW5zaWZ5UG9pbnRzPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9bmV3IGNlLHI9bmV3IE4scz0wO3M8dC5sZW5ndGgtMTtzKyspe2kucDA9dFtzXSxpLnAxPXRbcysxXSxyLmFkZChpLnAwLCExKTt2YXIgbz1pLmdldExlbmd0aCgpLGE9TWF0aC50cnVuYyhvL2UpKzE7aWYoYT4xKWZvcih2YXIgdT1vL2EsbD0xO2w8YTtsKyspe3ZhciBoPWwqdS9vLGM9aS5wb2ludEFsb25nKGgpO24ubWFrZVByZWNpc2UoYyksci5hZGQoYywhMSl9fXJldHVybiByLmFkZCh0W3QubGVuZ3RoLTFdLCExKSxyLnRvQ29vcmRpbmF0ZUFycmF5KCl9LFJpLmRlbnNpZnk9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgUmkodCk7cmV0dXJuIG4uc2V0RGlzdGFuY2VUb2xlcmFuY2UoZSksbi5nZXRSZXN1bHRHZW9tZXRyeSgpfSxoKFRpLHhlKSxlKFRpLnByb3RvdHlwZSx7dHJhbnNmb3JtTXVsdGlQb2x5Z29uOmZ1bmN0aW9uKHQsZSl7dmFyIG49eGUucHJvdG90eXBlLnRyYW5zZm9ybU11bHRpUG9seWdvbi5jYWxsKHRoaXMsdCxlKTtyZXR1cm4gdGhpcy5jcmVhdGVWYWxpZEFyZWEobil9LHRyYW5zZm9ybVBvbHlnb246ZnVuY3Rpb24odCxlKXt2YXIgbj14ZS5wcm90b3R5cGUudHJhbnNmb3JtUG9seWdvbi5jYWxsKHRoaXMsdCxlKTtyZXR1cm4gZSBpbnN0YW5jZW9mIE90P246dGhpcy5jcmVhdGVWYWxpZEFyZWEobil9LHRyYW5zZm9ybUNvb3JkaW5hdGVzOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC50b0Nvb3JkaW5hdGVBcnJheSgpLGk9UmkuZGVuc2lmeVBvaW50cyhuLHRoaXMuZGlzdGFuY2VUb2xlcmFuY2UsZS5nZXRQcmVjaXNpb25Nb2RlbCgpKTtyZXR1cm4gZSBpbnN0YW5jZW9mIFN0JiYxPT09aS5sZW5ndGgmJihpPW5ldyBBcnJheSgwKS5maWxsKG51bGwpKSx0aGlzLmZhY3RvcnkuZ2V0Q29vcmRpbmF0ZVNlcXVlbmNlRmFjdG9yeSgpLmNyZWF0ZShpKX0sY3JlYXRlVmFsaWRBcmVhOmZ1bmN0aW9uKHQpe3JldHVybiB0LmJ1ZmZlcigwKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gVGl9fSksUmkuRGVuc2lmeVRyYW5zZm9ybWVyPVRpO3ZhciBmbz1PYmplY3QuZnJlZXplKHtEZW5zaWZpZXI6Uml9KTtlKFBpLnByb3RvdHlwZSx7ZmluZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2Rve2lmKG51bGw9PT1lKXJldHVybiBudWxsO2lmKGUuZGVzdCgpLmVxdWFsczJEKHQpKXJldHVybiBlO2U9ZS5vTmV4dCgpfXdoaWxlKGUhPT10aGlzKTtyZXR1cm4gbnVsbH0sZGVzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zeW0uX29yaWd9LG9OZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N5bS5fbmV4dH0saW5zZXJ0OmZ1bmN0aW9uKHQpe2lmKHRoaXMub05leHQoKT09PXRoaXMpcmV0dXJuIHRoaXMuaW5zZXJ0QWZ0ZXIodCksbnVsbDt2YXIgZT10aGlzLmNvbXBhcmVUbyh0KSxuPXRoaXM7ZG97dmFyIGk9bi5vTmV4dCgpLHI9aS5jb21wYXJlVG8odCk7aWYociE9PWV8fGk9PT10aGlzKXJldHVybiBuLmluc2VydEFmdGVyKHQpLG51bGw7bj1pfXdoaWxlKG4hPT10aGlzKTtmLnNob3VsZE5ldmVyUmVhY2hIZXJlKCl9LGluc2VydEFmdGVyOmZ1bmN0aW9uKHQpe2YuZXF1YWxzKHRoaXMuX29yaWcsdC5vcmlnKCkpO3ZhciBlPXRoaXMub05leHQoKTt0aGlzLl9zeW0uc2V0TmV4dCh0KSx0LnN5bSgpLnNldE5leHQoZSl9LGRlZ3JlZTpmdW5jdGlvbiB0KCl7dmFyIHQ9MCxlPXRoaXM7ZG8gdCsrLGU9ZS5vTmV4dCgpO3doaWxlKGUhPT10aGlzKTtyZXR1cm4gdH0sZXF1YWxzOmZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5fb3JpZy5lcXVhbHMyRCh0KSYmdGhpcy5fc3ltLl9vcmlnLmVxdWFscyhlKX19LGRlbHRhWTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zeW0uX29yaWcueS10aGlzLl9vcmlnLnl9LHN5bTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zeW19LHByZXY6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3ltLm5leHQoKS5fc3ltfSxjb21wYXJlQW5ndWxhckRpcmVjdGlvbjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmRlbHRhWCgpLG49dGhpcy5kZWx0YVkoKSxpPXQuZGVsdGFYKCkscj10LmRlbHRhWSgpO2lmKGU9PT1pJiZuPT09cilyZXR1cm4gMDt2YXIgcz1KZS5xdWFkcmFudChlLG4pLG89SmUucXVhZHJhbnQoaSxyKTtyZXR1cm4gcz5vPzE6czxvPy0xOmhlLmNvbXB1dGVPcmllbnRhdGlvbih0Ll9vcmlnLHQuZGVzdCgpLHRoaXMuZGVzdCgpKX0scHJldk5vZGU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpczsyPT09dC5kZWdyZWUoKTspaWYodD10LnByZXYoKSx0PT09dGhpcylyZXR1cm4gbnVsbDtyZXR1cm4gdH0sY29tcGFyZVRvOmZ1bmN0aW9uKHQpe3ZhciBlPXQsbj10aGlzLmNvbXBhcmVBbmd1bGFyRGlyZWN0aW9uKGUpO3JldHVybiBufSxuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25leHR9LHNldFN5bTpmdW5jdGlvbih0KXt0aGlzLl9zeW09dH0sb3JpZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vcmlnfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwiSEUoXCIrdGhpcy5fb3JpZy54K1wiIFwiK3RoaXMuX29yaWcueStcIiwgXCIrdGhpcy5fc3ltLl9vcmlnLngrXCIgXCIrdGhpcy5fc3ltLl9vcmlnLnkrXCIpXCJ9LHNldE5leHQ6ZnVuY3Rpb24odCl7dGhpcy5fbmV4dD10fSxpbml0OmZ1bmN0aW9uKHQpe3RoaXMuc2V0U3ltKHQpLHQuc2V0U3ltKHRoaXMpLHRoaXMuc2V0TmV4dCh0KSx0LnNldE5leHQodGhpcyl9LGRlbHRhWDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zeW0uX29yaWcueC10aGlzLl9vcmlnLnh9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFBpfX0pLFBpLmluaXQ9ZnVuY3Rpb24odCxlKXtpZihudWxsIT09dC5fc3ltfHxudWxsIT09ZS5fc3ltfHxudWxsIT09dC5fbmV4dHx8bnVsbCE9PWUuX25leHQpdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbihcIkVkZ2VzIGFyZSBhbHJlYWR5IGluaXRpYWxpemVkXCIpO3JldHVybiB0LmluaXQoZSksdH0sUGkuY3JlYXRlPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IFBpKHQpLGk9bmV3IFBpKGUpO3JldHVybiBuLmluaXQoaSksbn0saChiaSxQaSksZShiaS5wcm90b3R5cGUse21hcms6ZnVuY3Rpb24oKXt0aGlzLl9pc01hcmtlZD0hMH0sc2V0TWFyazpmdW5jdGlvbih0KXt0aGlzLl9pc01hcmtlZD10fSxpc01hcmtlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc01hcmtlZH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gYml9fSksYmkuc2V0TWFya0JvdGg9ZnVuY3Rpb24odCxlKXt0LnNldE1hcmsoZSksdC5zeW0oKS5zZXRNYXJrKGUpfSxiaS5pc01hcmtlZD1mdW5jdGlvbih0KXtyZXR1cm4gdC5pc01hcmtlZCgpfSxiaS5zZXRNYXJrPWZ1bmN0aW9uKHQsZSl7dC5zZXRNYXJrKGUpfSxiaS5tYXJrQm90aD1mdW5jdGlvbih0KXt0Lm1hcmsoKSx0LnN5bSgpLm1hcmsoKX0sYmkubWFyaz1mdW5jdGlvbih0KXt0Lm1hcmsoKX0sZShPaS5wcm90b3R5cGUse2luc2VydDpmdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5jcmVhdGUodCxlKTtudWxsIT09bj9uLmluc2VydChpKTp0aGlzLnZlcnRleE1hcC5wdXQodCxpKTt2YXIgcj10aGlzLnZlcnRleE1hcC5nZXQoZSk7cmV0dXJuIG51bGwhPT1yP3IuaW5zZXJ0KGkuc3ltKCkpOnRoaXMudmVydGV4TWFwLnB1dChlLGkuc3ltKCkpLGl9LGNyZWF0ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuY3JlYXRlRWRnZSh0KSxpPXRoaXMuY3JlYXRlRWRnZShlKTtyZXR1cm4gUGkuaW5pdChuLGkpLG59LGNyZWF0ZUVkZ2U6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBQaSh0KX0sYWRkRWRnZTpmdW5jdGlvbih0LGUpe2lmKCFPaS5pc1ZhbGlkRWRnZSh0LGUpKXJldHVybiBudWxsO3ZhciBuPXRoaXMudmVydGV4TWFwLmdldCh0KSxpPW51bGw7aWYobnVsbCE9PW4mJihpPW4uZmluZChlKSksbnVsbCE9PWkpcmV0dXJuIGk7dmFyIHI9dGhpcy5pbnNlcnQodCxlLG4pO3JldHVybiByfSxnZXRWZXJ0ZXhFZGdlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZlcnRleE1hcC52YWx1ZXMoKX0sZmluZEVkZ2U6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnZlcnRleE1hcC5nZXQodCk7cmV0dXJuIG51bGw9PT1uP251bGw6bi5maW5kKGUpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe1xucmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE9pfX0pLE9pLmlzVmFsaWRFZGdlPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5jb21wYXJlVG8odCk7cmV0dXJuIDAhPT1ufSxoKF9pLGJpKSxlKF9pLnByb3RvdHlwZSx7c2V0U3RhcnQ6ZnVuY3Rpb24oKXt0aGlzLl9pc1N0YXJ0PSEwfSxpc1N0YXJ0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzU3RhcnR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIF9pfX0pLGgoTWksT2kpLGUoTWkucHJvdG90eXBlLHtjcmVhdGVFZGdlOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgX2kodCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE1pfX0pLGUoRGkucHJvdG90eXBlLHthZGRMaW5lOmZ1bmN0aW9uKHQpe3RoaXMubGluZXMuYWRkKHRoaXMuZmFjdG9yeS5jcmVhdGVMaW5lU3RyaW5nKHQudG9Db29yZGluYXRlQXJyYXkoKSkpfSx1cGRhdGVSaW5nU3RhcnRFZGdlOmZ1bmN0aW9uKHQpe3JldHVybiB0LmlzU3RhcnQoKXx8KHQ9dC5zeW0oKSx0LmlzU3RhcnQoKSk/bnVsbD09PXRoaXMucmluZ1N0YXJ0RWRnZT8odGhpcy5yaW5nU3RhcnRFZGdlPXQsbnVsbCk6dm9pZCh0Lm9yaWcoKS5jb21wYXJlVG8odGhpcy5yaW5nU3RhcnRFZGdlLm9yaWcoKSk8MCYmKHRoaXMucmluZ1N0YXJ0RWRnZT10KSk6bnVsbH0sZ2V0UmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLnJlc3VsdCYmdGhpcy5jb21wdXRlUmVzdWx0KCksdGhpcy5yZXN1bHR9LHByb2Nlc3M6ZnVuY3Rpb24odCl7dmFyIGU9dC5wcmV2Tm9kZSgpO251bGw9PT1lJiYoZT10KSx0aGlzLnN0YWNrRWRnZXMoZSksdGhpcy5idWlsZExpbmVzKCl9LGJ1aWxkUmluZzpmdW5jdGlvbih0KXt2YXIgZT1uZXcgTixuPXQ7Zm9yKGUuYWRkKG4ub3JpZygpLmNvcHkoKSwhMSk7Mj09PW4uc3ltKCkuZGVncmVlKCk7KXt2YXIgaT1uLm5leHQoKTtpZihpPT09dClicmVhaztlLmFkZChpLm9yaWcoKS5jb3B5KCksITEpLG49aX1lLmFkZChuLmRlc3QoKS5jb3B5KCksITEpLHRoaXMuYWRkTGluZShlKX0sYnVpbGRMaW5lOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBOLG49dDtmb3IodGhpcy5yaW5nU3RhcnRFZGdlPW51bGwsYmkubWFya0JvdGgobiksZS5hZGQobi5vcmlnKCkuY29weSgpLCExKTsyPT09bi5zeW0oKS5kZWdyZWUoKTspe3RoaXMudXBkYXRlUmluZ1N0YXJ0RWRnZShuKTt2YXIgaT1uLm5leHQoKTtpZihpPT09dClyZXR1cm4gdGhpcy5idWlsZFJpbmcodGhpcy5yaW5nU3RhcnRFZGdlKSxudWxsO2UuYWRkKGkub3JpZygpLmNvcHkoKSwhMSksbj1pLGJpLm1hcmtCb3RoKG4pfWUuYWRkKG4uZGVzdCgpLmNvcHkoKSwhMSksdGhpcy5zdGFja0VkZ2VzKG4uc3ltKCkpLHRoaXMuYWRkTGluZShlKX0sc3RhY2tFZGdlczpmdW5jdGlvbih0KXt2YXIgZT10O2RvIGJpLmlzTWFya2VkKGUpfHx0aGlzLm5vZGVFZGdlU3RhY2suYWRkKGUpLGU9ZS5vTmV4dCgpO3doaWxlKGUhPT10KX0sY29tcHV0ZVJlc3VsdDpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmdyYXBoLmdldFZlcnRleEVkZ2VzKCksZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtiaS5pc01hcmtlZChuKXx8dGhpcy5wcm9jZXNzKG4pfXRoaXMucmVzdWx0PXRoaXMuZmFjdG9yeS5idWlsZEdlb21ldHJ5KHRoaXMubGluZXMpfSxidWlsZExpbmVzOmZ1bmN0aW9uKCl7Zm9yKDshdGhpcy5ub2RlRWRnZVN0YWNrLmVtcHR5KCk7KXt2YXIgdD10aGlzLm5vZGVFZGdlU3RhY2sucG9wKCk7YmkuaXNNYXJrZWQodCl8fHRoaXMuYnVpbGRMaW5lKHQpfX0sYWRkOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCKXt2YXIgdD1hcmd1bWVudHNbMF07dC5hcHBseSh7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bcV19LGZpbHRlcjpmdW5jdGlvbih0KXt0IGluc3RhbmNlb2YgU3QmJnRoaXMuYWRkKHQpfX0pfWVsc2UgaWYoUihhcmd1bWVudHNbMF0sdikpZm9yKHZhciBlPWFyZ3VtZW50c1swXSxuPWUuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO3RoaXMuYWRkKGkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBTdCl7dmFyIHI9YXJndW1lbnRzWzBdO251bGw9PT10aGlzLmZhY3RvcnkmJih0aGlzLmZhY3Rvcnk9ci5nZXRGYWN0b3J5KCkpO2Zvcih2YXIgcz1yLmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLG89ITEsbj0xO248cy5zaXplKCk7bisrKXt2YXIgYT10aGlzLmdyYXBoLmFkZEVkZ2Uocy5nZXRDb29yZGluYXRlKG4tMSkscy5nZXRDb29yZGluYXRlKG4pKTtudWxsIT09YSYmKG98fChhLnNldFN0YXJ0KCksbz0hMCkpfX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIERpfX0pLERpLmRpc3NvbHZlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBEaTtyZXR1cm4gZS5hZGQodCksZS5nZXRSZXN1bHQoKX07dmFyIGdvPU9iamVjdC5mcmVlemUoe0xpbmVEaXNzb2x2ZXI6RGl9KSxwbz1PYmplY3QuZnJlZXplKHtHZW9tZXRyeUdyYXBoOiRufSk7ZShBaS5wcm90b3R5cGUse2hhc0NoaWxkcmVuOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDw0O3QrKylpZihudWxsIT09dGhpcy5zdWJub2RlW3RdKXJldHVybiEwO3JldHVybiExfSxpc1BydW5hYmxlOmZ1bmN0aW9uKCl7cmV0dXJuISh0aGlzLmhhc0NoaWxkcmVuKCl8fHRoaXMuaGFzSXRlbXMoKSl9LGFkZEFsbEl0ZW1zOmZ1bmN0aW9uKHQpe3QuYWRkQWxsKHRoaXMuaXRlbXMpO2Zvcih2YXIgZT0wO2U8NDtlKyspbnVsbCE9PXRoaXMuc3Vibm9kZVtlXSYmdGhpcy5zdWJub2RlW2VdLmFkZEFsbEl0ZW1zKHQpO3JldHVybiB0fSxnZXROb2RlQ291bnQ6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MCxlPTA7ZTw0O2UrKyludWxsIT09dGhpcy5zdWJub2RlW2VdJiYodCs9dGhpcy5zdWJub2RlW2VdLnNpemUoKSk7cmV0dXJuIHQrMX0sc2l6ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9MDtlPDQ7ZSsrKW51bGwhPT10aGlzLnN1Ym5vZGVbZV0mJih0Kz10aGlzLnN1Ym5vZGVbZV0uc2l6ZSgpKTtyZXR1cm4gdCt0aGlzLml0ZW1zLnNpemUoKX0sYWRkQWxsSXRlbXNGcm9tT3ZlcmxhcHBpbmc6ZnVuY3Rpb24odCxlKXtpZighdGhpcy5pc1NlYXJjaE1hdGNoKHQpKXJldHVybiBudWxsO2UuYWRkQWxsKHRoaXMuaXRlbXMpO2Zvcih2YXIgbj0wO248NDtuKyspbnVsbCE9PXRoaXMuc3Vibm9kZVtuXSYmdGhpcy5zdWJub2RlW25dLmFkZEFsbEl0ZW1zRnJvbU92ZXJsYXBwaW5nKHQsZSl9LHZpc2l0SXRlbXM6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dGhpcy5pdGVtcy5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyllLnZpc2l0SXRlbShuLm5leHQoKSl9LGhhc0l0ZW1zOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaXRlbXMuaXNFbXB0eSgpfSxyZW1vdmU6ZnVuY3Rpb24odCxlKXtpZighdGhpcy5pc1NlYXJjaE1hdGNoKHQpKXJldHVybiExO2Zvcih2YXIgbj0hMSxpPTA7aTw0O2krKylpZihudWxsIT09dGhpcy5zdWJub2RlW2ldJiYobj10aGlzLnN1Ym5vZGVbaV0ucmVtb3ZlKHQsZSkpKXt0aGlzLnN1Ym5vZGVbaV0uaXNQcnVuYWJsZSgpJiYodGhpcy5zdWJub2RlW2ldPW51bGwpO2JyZWFrfXJldHVybiBuP246bj10aGlzLml0ZW1zLnJlbW92ZShlKX0sdmlzaXQ6ZnVuY3Rpb24odCxlKXtpZighdGhpcy5pc1NlYXJjaE1hdGNoKHQpKXJldHVybiBudWxsO3RoaXMudmlzaXRJdGVtcyh0LGUpO2Zvcih2YXIgbj0wO248NDtuKyspbnVsbCE9PXRoaXMuc3Vibm9kZVtuXSYmdGhpcy5zdWJub2RlW25dLnZpc2l0KHQsZSl9LGdldEl0ZW1zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXRlbXN9LGRlcHRoOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT0wO2U8NDtlKyspaWYobnVsbCE9PXRoaXMuc3Vibm9kZVtlXSl7dmFyIG49dGhpcy5zdWJub2RlW2VdLmRlcHRoKCk7bj50JiYodD1uKX1yZXR1cm4gdCsxfSxpc0VtcHR5OmZ1bmN0aW9uIHQoKXt2YXIgdD0hMDt0aGlzLml0ZW1zLmlzRW1wdHkoKXx8KHQ9ITEpO2Zvcih2YXIgZT0wO2U8NDtlKyspbnVsbCE9PXRoaXMuc3Vibm9kZVtlXSYmKHRoaXMuc3Vibm9kZVtlXS5pc0VtcHR5KCl8fCh0PSExKSk7cmV0dXJuIHR9LGFkZDpmdW5jdGlvbih0KXt0aGlzLml0ZW1zLmFkZCh0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bdV19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEFpfX0pLEFpLmdldFN1Ym5vZGVJbmRleD1mdW5jdGlvbih0LGUsbil7dmFyIGk9LTE7cmV0dXJuIHQuZ2V0TWluWCgpPj1lJiYodC5nZXRNaW5ZKCk+PW4mJihpPTMpLHQuZ2V0TWF4WSgpPD1uJiYoaT0xKSksdC5nZXRNYXhYKCk8PWUmJih0LmdldE1pblkoKT49biYmKGk9MiksdC5nZXRNYXhZKCk8PW4mJihpPTApKSxpfSxlKEZpLnByb3RvdHlwZSx7Z2V0TGV2ZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZXZlbH0sY29tcHV0ZUtleTpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07Zm9yKHRoaXMubGV2ZWw9RmkuY29tcHV0ZVF1YWRMZXZlbCh0KSx0aGlzLmVudj1uZXcgQyx0aGlzLmNvbXB1dGVLZXkodGhpcy5sZXZlbCx0KTshdGhpcy5lbnYuY29udGFpbnModCk7KXRoaXMubGV2ZWwrPTEsdGhpcy5jb21wdXRlS2V5KHRoaXMubGV2ZWwsdCl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdLGk9Z2kucG93ZXJPZjIoZSk7dGhpcy5wdC54PU1hdGguZmxvb3Iobi5nZXRNaW5YKCkvaSkqaSx0aGlzLnB0Lnk9TWF0aC5mbG9vcihuLmdldE1pblkoKS9pKSppLHRoaXMuZW52LmluaXQodGhpcy5wdC54LHRoaXMucHQueCtpLHRoaXMucHQueSx0aGlzLnB0LnkraSl9fSxnZXRFbnZlbG9wZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVudn0sZ2V0Q2VudHJlOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBnKCh0aGlzLmVudi5nZXRNaW5YKCkrdGhpcy5lbnYuZ2V0TWF4WCgpKS8yLCh0aGlzLmVudi5nZXRNaW5ZKCkrdGhpcy5lbnYuZ2V0TWF4WSgpKS8yKX0sZ2V0UG9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gRml9fSksRmkuY29tcHV0ZVF1YWRMZXZlbD1mdW5jdGlvbih0KXt2YXIgZT10LmdldFdpZHRoKCksbj10LmdldEhlaWdodCgpLGk9ZT5uP2U6bixyPWdpLmV4cG9uZW50KGkpKzE7cmV0dXJuIHJ9LGgoR2ksQWkpLGUoR2kucHJvdG90eXBlLHtmaW5kOmZ1bmN0aW9uKHQpe3ZhciBlPUFpLmdldFN1Ym5vZGVJbmRleCh0LHRoaXMuY2VudHJleCx0aGlzLmNlbnRyZXkpO2lmKGU9PT0tMSlyZXR1cm4gdGhpcztpZihudWxsIT09dGhpcy5zdWJub2RlW2VdKXt2YXIgbj10aGlzLnN1Ym5vZGVbZV07cmV0dXJuIG4uZmluZCh0KX1yZXR1cm4gdGhpc30saXNTZWFyY2hNYXRjaDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lbnYuaW50ZXJzZWN0cyh0KX0sZ2V0U3Vibm9kZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09PXRoaXMuc3Vibm9kZVt0XSYmKHRoaXMuc3Vibm9kZVt0XT10aGlzLmNyZWF0ZVN1Ym5vZGUodCkpLHRoaXMuc3Vibm9kZVt0XX0sZ2V0RW52ZWxvcGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbnZ9LGdldE5vZGU6ZnVuY3Rpb24odCl7dmFyIGU9QWkuZ2V0U3Vibm9kZUluZGV4KHQsdGhpcy5jZW50cmV4LHRoaXMuY2VudHJleSk7aWYoZSE9PS0xKXt2YXIgbj10aGlzLmdldFN1Ym5vZGUoZSk7cmV0dXJuIG4uZ2V0Tm9kZSh0KX1yZXR1cm4gdGhpc30sY3JlYXRlU3Vibm9kZTpmdW5jdGlvbih0KXt2YXIgZT0wLG49MCxpPTAscj0wO3N3aXRjaCh0KXtjYXNlIDA6ZT10aGlzLmVudi5nZXRNaW5YKCksbj10aGlzLmNlbnRyZXgsaT10aGlzLmVudi5nZXRNaW5ZKCkscj10aGlzLmNlbnRyZXk7YnJlYWs7Y2FzZSAxOmU9dGhpcy5jZW50cmV4LG49dGhpcy5lbnYuZ2V0TWF4WCgpLGk9dGhpcy5lbnYuZ2V0TWluWSgpLHI9dGhpcy5jZW50cmV5O2JyZWFrO2Nhc2UgMjplPXRoaXMuZW52LmdldE1pblgoKSxuPXRoaXMuY2VudHJleCxpPXRoaXMuY2VudHJleSxyPXRoaXMuZW52LmdldE1heFkoKTticmVhaztjYXNlIDM6ZT10aGlzLmNlbnRyZXgsbj10aGlzLmVudi5nZXRNYXhYKCksaT10aGlzLmNlbnRyZXkscj10aGlzLmVudi5nZXRNYXhZKCl9dmFyIHM9bmV3IEMoZSxuLGksciksbz1uZXcgR2kocyx0aGlzLmxldmVsLTEpO3JldHVybiBvfSxpbnNlcnROb2RlOmZ1bmN0aW9uKHQpe2YuaXNUcnVlKG51bGw9PT10aGlzLmVudnx8dGhpcy5lbnYuY29udGFpbnModC5lbnYpKTt2YXIgZT1BaS5nZXRTdWJub2RlSW5kZXgodC5lbnYsdGhpcy5jZW50cmV4LHRoaXMuY2VudHJleSk7aWYodC5sZXZlbD09PXRoaXMubGV2ZWwtMSl0aGlzLnN1Ym5vZGVbZV09dDtlbHNle3ZhciBuPXRoaXMuY3JlYXRlU3Vibm9kZShlKTtuLmluc2VydE5vZGUodCksdGhpcy5zdWJub2RlW2VdPW59fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBHaX19KSxHaS5jcmVhdGVOb2RlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBGaSh0KSxuPW5ldyBHaShlLmdldEVudmVsb3BlKCksZS5nZXRMZXZlbCgpKTtyZXR1cm4gbn0sR2kuY3JlYXRlRXhwYW5kZWQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgQyhlKTtudWxsIT09dCYmbi5leHBhbmRUb0luY2x1ZGUodC5lbnYpO3ZhciBpPUdpLmNyZWF0ZU5vZGUobik7cmV0dXJuIG51bGwhPT10JiZpLmluc2VydE5vZGUodCksaX0saChxaSxBaSksZShxaS5wcm90b3R5cGUse2luc2VydDpmdW5jdGlvbih0LGUpe3ZhciBuPUFpLmdldFN1Ym5vZGVJbmRleCh0LHFpLm9yaWdpbi54LHFpLm9yaWdpbi55KTtpZihuPT09LTEpcmV0dXJuIHRoaXMuYWRkKGUpLG51bGw7dmFyIGk9dGhpcy5zdWJub2RlW25dO2lmKG51bGw9PT1pfHwhaS5nZXRFbnZlbG9wZSgpLmNvbnRhaW5zKHQpKXt2YXIgcj1HaS5jcmVhdGVFeHBhbmRlZChpLHQpO3RoaXMuc3Vibm9kZVtuXT1yfXRoaXMuaW5zZXJ0Q29udGFpbmVkKHRoaXMuc3Vibm9kZVtuXSx0LGUpfSxpc1NlYXJjaE1hdGNoOmZ1bmN0aW9uKHQpe3JldHVybiEwfSxpbnNlcnRDb250YWluZWQ6ZnVuY3Rpb24odCxlLG4pe2YuaXNUcnVlKHQuZ2V0RW52ZWxvcGUoKS5jb250YWlucyhlKSk7dmFyIGk9bWkuaXNaZXJvV2lkdGgoZS5nZXRNaW5YKCksZS5nZXRNYXhYKCkpLHI9bWkuaXNaZXJvV2lkdGgoZS5nZXRNaW5ZKCksZS5nZXRNYXhZKCkpLHM9bnVsbDtzPWl8fHI/dC5maW5kKGUpOnQuZ2V0Tm9kZShlKSxzLmFkZChuKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcWl9fSkscWkub3JpZ2luPW5ldyBnKDAsMCksZShCaS5wcm90b3R5cGUse3NpemU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMucm9vdD90aGlzLnJvb3Quc2l6ZSgpOjB9LGluc2VydDpmdW5jdGlvbih0LGUpe3RoaXMuY29sbGVjdFN0YXRzKHQpO3ZhciBuPUJpLmVuc3VyZUV4dGVudCh0LHRoaXMubWluRXh0ZW50KTt0aGlzLnJvb3QuaW5zZXJ0KG4sZSl9LHF1ZXJ5OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPW5ldyBZbjtyZXR1cm4gdGhpcy5xdWVyeSh0LGUpLGUuZ2V0SXRlbXMoKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdO3RoaXMucm9vdC52aXNpdChuLGkpfX0scXVlcnlBbGw6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgSTtyZXR1cm4gdGhpcy5yb290LmFkZEFsbEl0ZW1zKHQpLHR9LHJlbW92ZTpmdW5jdGlvbih0LGUpe3ZhciBuPUJpLmVuc3VyZUV4dGVudCh0LHRoaXMubWluRXh0ZW50KTtyZXR1cm4gdGhpcy5yb290LnJlbW92ZShuLGUpfSxjb2xsZWN0U3RhdHM6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRXaWR0aCgpO2U8dGhpcy5taW5FeHRlbnQmJmU+MCYmKHRoaXMubWluRXh0ZW50PWUpO3ZhciBuPXQuZ2V0SGVpZ2h0KCk7bjx0aGlzLm1pbkV4dGVudCYmbj4wJiYodGhpcy5taW5FeHRlbnQ9bil9LGRlcHRoOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLnJvb3Q/dGhpcy5yb290LmRlcHRoKCk6MH0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5yb290fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltGZSx1XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gQml9fSksQmkuZW5zdXJlRXh0ZW50PWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5nZXRNaW5YKCksaT10LmdldE1heFgoKSxyPXQuZ2V0TWluWSgpLHM9dC5nZXRNYXhZKCk7cmV0dXJuIG4hPT1pJiZyIT09cz90OihuPT09aSYmKG4tPWUvMixpPW4rZS8yKSxyPT09cyYmKHItPWUvMixzPXIrZS8yKSxuZXcgQyhuLGkscixzKSl9LEJpLnNlcmlhbFZlcnNpb25VSUQ9LTB4Njc4YjYwYzk2N2EyNTQwMDt2YXIgdm89T2JqZWN0LmZyZWV6ZSh7UXVhZHRyZWU6Qml9KSxtbz1PYmplY3QuZnJlZXplKHtTVFJ0cmVlOmtlfSkseW89T2JqZWN0LmZyZWV6ZSh7cXVhZHRyZWU6dm8sc3RydHJlZTptb30pLHhvPVtcIlBvaW50XCIsXCJNdWx0aVBvaW50XCIsXCJMaW5lU3RyaW5nXCIsXCJNdWx0aUxpbmVTdHJpbmdcIixcIlBvbHlnb25cIixcIk11bHRpUG9seWdvblwiXTtlKHppLnByb3RvdHlwZSx7cmVhZDpmdW5jdGlvbih0KXt2YXIgZT12b2lkIDA7ZT1cInN0cmluZ1wiPT10eXBlb2YgdD9KU09OLnBhcnNlKHQpOnQ7dmFyIG49ZS50eXBlO2lmKCFFb1tuXSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIEdlb0pTT04gdHlwZTogXCIrZS50eXBlKTtyZXR1cm4geG8uaW5kZXhPZihuKSE9PS0xP0VvW25dLmFwcGx5KHRoaXMsW2UuY29vcmRpbmF0ZXNdKTpcIkdlb21ldHJ5Q29sbGVjdGlvblwiPT09bj9Fb1tuXS5hcHBseSh0aGlzLFtlLmdlb21ldHJpZXNdKTpFb1tuXS5hcHBseSh0aGlzLFtlXSl9LHdyaXRlOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0R2VvbWV0cnlUeXBlKCk7aWYoIUlvW2VdKXRocm93IG5ldyBFcnJvcihcIkdlb21ldHJ5IGlzIG5vdCBzdXBwb3J0ZWRcIik7cmV0dXJuIElvW2VdLmFwcGx5KHRoaXMsW3RdKX19KTt2YXIgRW89e0ZlYXR1cmU6ZnVuY3Rpb24odCl7dmFyIGU9e307Zm9yKHZhciBuIGluIHQpZVtuXT10W25dO2lmKHQuZ2VvbWV0cnkpe3ZhciBpPXQuZ2VvbWV0cnkudHlwZTtpZighRW9baV0pdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBHZW9KU09OIHR5cGU6IFwiK3QudHlwZSk7ZS5nZW9tZXRyeT10aGlzLnJlYWQodC5nZW9tZXRyeSl9cmV0dXJuIHQuYmJveCYmKGUuYmJveD1Fby5iYm94LmFwcGx5KHRoaXMsW3QuYmJveF0pKSxlfSxGZWF0dXJlQ29sbGVjdGlvbjpmdW5jdGlvbih0KXt2YXIgZT17fTtpZih0LmZlYXR1cmVzKXtlLmZlYXR1cmVzPVtdO2Zvcih2YXIgbj0wO248dC5mZWF0dXJlcy5sZW5ndGg7KytuKWUuZmVhdHVyZXMucHVzaCh0aGlzLnJlYWQodC5mZWF0dXJlc1tuXSkpfXJldHVybiB0LmJib3gmJihlLmJib3g9dGhpcy5wYXJzZS5iYm94LmFwcGx5KHRoaXMsW3QuYmJveF0pKSxlfSxjb29yZGluYXRlczpmdW5jdGlvbiB0KGUpe2Zvcih2YXIgdD1bXSxuPTA7bjxlLmxlbmd0aDsrK24pe3ZhciBpPWVbbl07dC5wdXNoKG5ldyBnKGlbMF0saVsxXSkpfXJldHVybiB0fSxiYm94OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKFtuZXcgZyh0WzBdLHRbMV0pLG5ldyBnKHRbMl0sdFsxXSksbmV3IGcodFsyXSx0WzNdKSxuZXcgZyh0WzBdLHRbM10pLG5ldyBnKHRbMF0sdFsxXSldKX0sUG9pbnQ6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGcodFswXSx0WzFdKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlUG9pbnQoZSl9LE11bHRpUG9pbnQ6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoOysrbillLnB1c2goRW8uUG9pbnQuYXBwbHkodGhpcyxbdFtuXV0pKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlQb2ludChlKX0sTGluZVN0cmluZzpmdW5jdGlvbih0KXt2YXIgZT1Fby5jb29yZGluYXRlcy5hcHBseSh0aGlzLFt0XSk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcoZSl9LE11bHRpTGluZVN0cmluZzpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5sZW5ndGg7KytuKWUucHVzaChFby5MaW5lU3RyaW5nLmFwcGx5KHRoaXMsW3Rbbl1dKSk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpTGluZVN0cmluZyhlKX0sUG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9RW8uY29vcmRpbmF0ZXMuYXBwbHkodGhpcyxbdFswXV0pLG49dGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTGluZWFyUmluZyhlKSxpPVtdLHI9MTtyPHQubGVuZ3RoOysrcil7dmFyIHM9dFtyXSxvPUVvLmNvb3JkaW5hdGVzLmFwcGx5KHRoaXMsW3NdKSxhPXRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUxpbmVhclJpbmcobyk7aS5wdXNoKGEpfXJldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVQb2x5Z29uKG4saSl9LE11bHRpUG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5sZW5ndGg7KytuKXt2YXIgaT10W25dO2UucHVzaChFby5Qb2x5Z29uLmFwcGx5KHRoaXMsW2ldKSl9cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpUG9seWdvbihlKX0sR2VvbWV0cnlDb2xsZWN0aW9uOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lmxlbmd0aDsrK24pe3ZhciBpPXRbbl07ZS5wdXNoKHRoaXMucmVhZChpKSl9cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihlKX19LElvPXtjb29yZGluYXRlOmZ1bmN0aW9uKHQpe3JldHVyblt0LngsdC55XX0sUG9pbnQ6ZnVuY3Rpb24odCl7dmFyIGU9SW8uY29vcmRpbmF0ZS5hcHBseSh0aGlzLFt0LmdldENvb3JkaW5hdGUoKV0pO3JldHVybnt0eXBlOlwiUG9pbnRcIixjb29yZGluYXRlczplfX0sTXVsdGlQb2ludDpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5nZW9tZXRyaWVzLmxlbmd0aDsrK24pe3ZhciBpPXQuZ2VvbWV0cmllc1tuXSxyPUlvLlBvaW50LmFwcGx5KHRoaXMsW2ldKTtlLnB1c2goci5jb29yZGluYXRlcyl9cmV0dXJue3R5cGU6XCJNdWx0aVBvaW50XCIsY29vcmRpbmF0ZXM6ZX19LExpbmVTdHJpbmc6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49dC5nZXRDb29yZGluYXRlcygpLGk9MDtpPG4ubGVuZ3RoOysraSl7dmFyIHI9bltpXTtlLnB1c2goSW8uY29vcmRpbmF0ZS5hcHBseSh0aGlzLFtyXSkpfXJldHVybnt0eXBlOlwiTGluZVN0cmluZ1wiLGNvb3JkaW5hdGVzOmV9fSxNdWx0aUxpbmVTdHJpbmc6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQuZ2VvbWV0cmllcy5sZW5ndGg7KytuKXt2YXIgaT10Lmdlb21ldHJpZXNbbl0scj1Jby5MaW5lU3RyaW5nLmFwcGx5KHRoaXMsW2ldKTtlLnB1c2goci5jb29yZGluYXRlcyl9cmV0dXJue3R5cGU6XCJNdWx0aUxpbmVTdHJpbmdcIixjb29yZGluYXRlczplfX0sUG9seWdvbjpmdW5jdGlvbih0KXt2YXIgZT1bXSxuPUlvLkxpbmVTdHJpbmcuYXBwbHkodGhpcyxbdC5zaGVsbF0pO2UucHVzaChuLmNvb3JkaW5hdGVzKTtmb3IodmFyIGk9MDtpPHQuaG9sZXMubGVuZ3RoOysraSl7dmFyIHI9dC5ob2xlc1tpXSxzPUlvLkxpbmVTdHJpbmcuYXBwbHkodGhpcyxbcl0pO2UucHVzaChzLmNvb3JkaW5hdGVzKX1yZXR1cm57dHlwZTpcIlBvbHlnb25cIixjb29yZGluYXRlczplfX0sTXVsdGlQb2x5Z29uOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lmdlb21ldHJpZXMubGVuZ3RoOysrbil7dmFyIGk9dC5nZW9tZXRyaWVzW25dLHI9SW8uUG9seWdvbi5hcHBseSh0aGlzLFtpXSk7ZS5wdXNoKHIuY29vcmRpbmF0ZXMpfXJldHVybnt0eXBlOlwiTXVsdGlQb2x5Z29uXCIsY29vcmRpbmF0ZXM6ZX19LEdlb21ldHJ5Q29sbGVjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5nZW9tZXRyaWVzLmxlbmd0aDsrK24pe3ZhciBpPXQuZ2VvbWV0cmllc1tuXSxyPWkuZ2V0R2VvbWV0cnlUeXBlKCk7ZS5wdXNoKElvW3JdLmFwcGx5KHRoaXMsW2ldKSl9cmV0dXJue3R5cGU6XCJHZW9tZXRyeUNvbGxlY3Rpb25cIixnZW9tZXRyaWVzOmV9fX07ZShWaS5wcm90b3R5cGUse3JlYWQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wYXJzZXIucmVhZCh0KTtyZXR1cm4gdGhpcy5wcmVjaXNpb25Nb2RlbC5nZXRUeXBlKCk9PT1lZS5GSVhFRCYmdGhpcy5yZWR1Y2VQcmVjaXNpb24oZSksZX0scmVkdWNlUHJlY2lzaW9uOmZ1bmN0aW9uKHQpe3ZhciBlLG47aWYodC5jb29yZGluYXRlKXRoaXMucHJlY2lzaW9uTW9kZWwubWFrZVByZWNpc2UodC5jb29yZGluYXRlKTtlbHNlIGlmKHQucG9pbnRzKWZvcihlPTAsbj10LnBvaW50cy5sZW5ndGg7ZTxuO2UrKyl0aGlzLnByZWNpc2lvbk1vZGVsLm1ha2VQcmVjaXNlKHQucG9pbnRzW2VdKTtlbHNlIGlmKHQuZ2VvbWV0cmllcylmb3IoZT0wLG49dC5nZW9tZXRyaWVzLmxlbmd0aDtlPG47ZSsrKXRoaXMucmVkdWNlUHJlY2lzaW9uKHQuZ2VvbWV0cmllc1tlXSl9fSksZShraS5wcm90b3R5cGUse3dyaXRlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBhcnNlci53cml0ZSh0KX19KSxlKFlpLnByb3RvdHlwZSx7cmVhZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnBhcnNlci5yZWFkKHQpO3JldHVybiB0aGlzLnByZWNpc2lvbk1vZGVsLmdldFR5cGUoKT09PWVlLkZJWEVEJiZ0aGlzLnJlZHVjZVByZWNpc2lvbihlKSxlfSxyZWR1Y2VQcmVjaXNpb246ZnVuY3Rpb24odCl7aWYodC5jb29yZGluYXRlKXRoaXMucHJlY2lzaW9uTW9kZWwubWFrZVByZWNpc2UodC5jb29yZGluYXRlKTtlbHNlIGlmKHQucG9pbnRzKWZvcih2YXIgZT0wLG49dC5wb2ludHMuY29vcmRpbmF0ZXMubGVuZ3RoO2U8bjtlKyspdGhpcy5wcmVjaXNpb25Nb2RlbC5tYWtlUHJlY2lzZSh0LnBvaW50cy5jb29yZGluYXRlc1tlXSk7ZWxzZSBpZih0Lmdlb21ldHJpZXMpZm9yKHZhciBpPTAscj10Lmdlb21ldHJpZXMubGVuZ3RoO2k8cjtpKyspdGhpcy5yZWR1Y2VQcmVjaXNpb24odC5nZW9tZXRyaWVzW2ldKX19KSxlKFhpLnByb3RvdHlwZSx7cmVhZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9sO3JldHVybiB0IGluc3RhbmNlb2YgZS5nZW9tLlBvaW50P3RoaXMuY29udmVydEZyb21Qb2ludCh0KTp0IGluc3RhbmNlb2YgZS5nZW9tLkxpbmVTdHJpbmc/dGhpcy5jb252ZXJ0RnJvbUxpbmVTdHJpbmcodCk6dCBpbnN0YW5jZW9mIGUuZ2VvbS5MaW5lYXJSaW5nP3RoaXMuY29udmVydEZyb21MaW5lYXJSaW5nKHQpOnQgaW5zdGFuY2VvZiBlLmdlb20uUG9seWdvbj90aGlzLmNvbnZlcnRGcm9tUG9seWdvbih0KTp0IGluc3RhbmNlb2YgZS5nZW9tLk11bHRpUG9pbnQ/dGhpcy5jb252ZXJ0RnJvbU11bHRpUG9pbnQodCk6dCBpbnN0YW5jZW9mIGUuZ2VvbS5NdWx0aUxpbmVTdHJpbmc/dGhpcy5jb252ZXJ0RnJvbU11bHRpTGluZVN0cmluZyh0KTp0IGluc3RhbmNlb2YgZS5nZW9tLk11bHRpUG9seWdvbj90aGlzLmNvbnZlcnRGcm9tTXVsdGlQb2x5Z29uKHQpOnQgaW5zdGFuY2VvZiBlLmdlb20uR2VvbWV0cnlDb2xsZWN0aW9uP3RoaXMuY29udmVydEZyb21Db2xsZWN0aW9uKHQpOnZvaWQgMH0sY29udmVydEZyb21Qb2ludDpmdW5jdGlvbih0KXt2YXIgZT10LmdldENvb3JkaW5hdGVzKCk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZVBvaW50KG5ldyBnKGVbMF0sZVsxXSkpfSxjb252ZXJ0RnJvbUxpbmVTdHJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcodC5nZXRDb29yZGluYXRlcygpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGcodFswXSx0WzFdKX0pKX0sY29udmVydEZyb21MaW5lYXJSaW5nOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdlb21ldHJ5RmFjdG9yeS5jcmVhdGVMaW5lYXJSaW5nKHQuZ2V0Q29vcmRpbmF0ZXMoKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBnKHRbMF0sdFsxXSl9KSl9LGNvbnZlcnRGcm9tUG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5nZXRMaW5lYXJSaW5ncygpLG49bnVsbCxpPVtdLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIHM9dGhpcy5jb252ZXJ0RnJvbUxpbmVhclJpbmcoZVtyXSk7MD09PXI/bj1zOmkucHVzaChzKX1yZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlUG9seWdvbihuLGkpfSxjb252ZXJ0RnJvbU11bHRpUG9pbnQ6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRQb2ludHMoKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY29udmVydEZyb21Qb2ludCh0KX0sdGhpcyk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpUG9pbnQoZSl9LGNvbnZlcnRGcm9tTXVsdGlMaW5lU3RyaW5nOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0TGluZVN0cmluZ3MoKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY29udmVydEZyb21MaW5lU3RyaW5nKHQpfSx0aGlzKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlTXVsdGlMaW5lU3RyaW5nKGUpfSxjb252ZXJ0RnJvbU11bHRpUG9seWdvbjpmdW5jdGlvbih0KXt2YXIgZT10LmdldFBvbHlnb25zKCkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNvbnZlcnRGcm9tUG9seWdvbih0KX0sdGhpcyk7cmV0dXJuIHRoaXMuZ2VvbWV0cnlGYWN0b3J5LmNyZWF0ZU11bHRpUG9seWdvbihlKX0sY29udmVydEZyb21Db2xsZWN0aW9uOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0R2VvbWV0cmllcygpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5yZWFkKHQpfSx0aGlzKTtyZXR1cm4gdGhpcy5nZW9tZXRyeUZhY3RvcnkuY3JlYXRlR2VvbWV0cnlDb2xsZWN0aW9uKGUpfSx3cml0ZTpmdW5jdGlvbih0KXtyZXR1cm5cIlBvaW50XCI9PT10LmdldEdlb21ldHJ5VHlwZSgpP3RoaXMuY29udmVydFRvUG9pbnQodC5nZXRDb29yZGluYXRlKCkpOlwiTGluZVN0cmluZ1wiPT09dC5nZXRHZW9tZXRyeVR5cGUoKT90aGlzLmNvbnZlcnRUb0xpbmVTdHJpbmcodCk6XCJMaW5lYXJSaW5nXCI9PT10LmdldEdlb21ldHJ5VHlwZSgpP3RoaXMuY29udmVydFRvTGluZWFyUmluZyh0KTpcIlBvbHlnb25cIj09PXQuZ2V0R2VvbWV0cnlUeXBlKCk/dGhpcy5jb252ZXJ0VG9Qb2x5Z29uKHQpOlwiTXVsdGlQb2ludFwiPT09dC5nZXRHZW9tZXRyeVR5cGUoKT90aGlzLmNvbnZlcnRUb011bHRpUG9pbnQodCk6XCJNdWx0aUxpbmVTdHJpbmdcIj09PXQuZ2V0R2VvbWV0cnlUeXBlKCk/dGhpcy5jb252ZXJ0VG9NdWx0aUxpbmVTdHJpbmcodCk6XCJNdWx0aVBvbHlnb25cIj09PXQuZ2V0R2VvbWV0cnlUeXBlKCk/dGhpcy5jb252ZXJ0VG9NdWx0aVBvbHlnb24odCk6XCJHZW9tZXRyeUNvbGxlY3Rpb25cIj09PXQuZ2V0R2VvbWV0cnlUeXBlKCk/dGhpcy5jb252ZXJ0VG9Db2xsZWN0aW9uKHQpOnZvaWQgMH0sY29udmVydFRvUG9pbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB0aGlzLm9sLmdlb20uUG9pbnQoW3QueCx0LnldKX0sY29udmVydFRvTGluZVN0cmluZzpmdW5jdGlvbih0KXt2YXIgZT10LnBvaW50cy5jb29yZGluYXRlcy5tYXAoVWkpO3JldHVybiBuZXcgdGhpcy5vbC5nZW9tLkxpbmVTdHJpbmcoZSl9LGNvbnZlcnRUb0xpbmVhclJpbmc6ZnVuY3Rpb24odCl7dmFyIGU9dC5wb2ludHMuY29vcmRpbmF0ZXMubWFwKFVpKTtyZXR1cm4gbmV3IHRoaXMub2wuZ2VvbS5MaW5lYXJSaW5nKGUpfSxjb252ZXJ0VG9Qb2x5Z29uOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bdC5zaGVsbC5wb2ludHMuY29vcmRpbmF0ZXMubWFwKFVpKV0sbj0wO248dC5ob2xlcy5sZW5ndGg7bisrKWUucHVzaCh0LmhvbGVzW25dLnBvaW50cy5jb29yZGluYXRlcy5tYXAoVWkpKTtyZXR1cm4gbmV3IHRoaXMub2wuZ2VvbS5Qb2x5Z29uKGUpfSxjb252ZXJ0VG9NdWx0aVBvaW50OmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgdGhpcy5vbC5nZW9tLk11bHRpUG9pbnQodC5nZXRDb29yZGluYXRlcygpLm1hcChVaSkpfSxjb252ZXJ0VG9NdWx0aUxpbmVTdHJpbmc6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQuZ2VvbWV0cmllcy5sZW5ndGg7bisrKWUucHVzaCh0aGlzLmNvbnZlcnRUb0xpbmVTdHJpbmcodC5nZW9tZXRyaWVzW25dKS5nZXRDb29yZGluYXRlcygpKTtyZXR1cm4gbmV3IHRoaXMub2wuZ2VvbS5NdWx0aUxpbmVTdHJpbmcoZSl9LGNvbnZlcnRUb011bHRpUG9seWdvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5nZW9tZXRyaWVzLmxlbmd0aDtuKyspZS5wdXNoKHRoaXMuY29udmVydFRvUG9seWdvbih0Lmdlb21ldHJpZXNbbl0pLmdldENvb3JkaW5hdGVzKCkpO3JldHVybiBuZXcgdGhpcy5vbC5nZW9tLk11bHRpUG9seWdvbihlKX0sY29udmVydFRvQ29sbGVjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5nZW9tZXRyaWVzLmxlbmd0aDtuKyspe3ZhciBpPXQuZ2VvbWV0cmllc1tuXTtlLnB1c2godGhpcy53cml0ZShpKSl9cmV0dXJuIG5ldyB0aGlzLm9sLmdlb20uR2VvbWV0cnlDb2xsZWN0aW9uKGUpfX0pO3ZhciBObz1PYmplY3QuZnJlZXplKHtHZW9KU09OUmVhZGVyOlZpLEdlb0pTT05Xcml0ZXI6a2ksT0wzUGFyc2VyOlhpLFdLVFJlYWRlcjpZaSxXS1RXcml0ZXI6c2V9KTtlKEhpLnByb3RvdHlwZSx7cmVzY2FsZTpmdW5jdGlvbigpe2lmKFIoYXJndW1lbnRzWzBdLHYpKWZvcih2YXIgdD1hcmd1bWVudHNbMF0sZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLnJlc2NhbGUobi5nZXRDb29yZGluYXRlcygpKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe3ZhciBpPWFyZ3VtZW50c1swXSxyPW51bGwscz1udWxsOzI9PT1pLmxlbmd0aCYmKHI9bmV3IGcoaVswXSkscz1uZXcgZyhpWzFdKSk7Zm9yKHZhciBlPTA7ZTxpLmxlbmd0aDtlKyspaVtlXS54PWlbZV0ueC90aGlzLnNjYWxlRmFjdG9yK3RoaXMub2Zmc2V0WCxpW2VdLnk9aVtlXS55L3RoaXMuc2NhbGVGYWN0b3IrdGhpcy5vZmZzZXRZOzI9PT1pLmxlbmd0aCYmaVswXS5lcXVhbHMyRChpWzFdKSYmQS5vdXQucHJpbnRsbihpKX19LHNjYWxlOmZ1bmN0aW9uKCl7aWYoUihhcmd1bWVudHNbMF0sdikpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgSSxuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2UuYWRkKG5ldyBLZSh0aGlzLnNjYWxlKGkuZ2V0Q29vcmRpbmF0ZXMoKSksaS5nZXREYXRhKCkpKX1yZXR1cm4gZX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEFycmF5KXtmb3IodmFyIHI9YXJndW1lbnRzWzBdLHM9bmV3IEFycmF5KHIubGVuZ3RoKS5maWxsKG51bGwpLG49MDtuPHIubGVuZ3RoO24rKylzW25dPW5ldyBnKE1hdGgucm91bmQoKHJbbl0ueC10aGlzLm9mZnNldFgpKnRoaXMuc2NhbGVGYWN0b3IpLE1hdGgucm91bmQoKHJbbl0ueS10aGlzLm9mZnNldFkpKnRoaXMuc2NhbGVGYWN0b3IpLHJbbl0ueik7dmFyIG89SC5yZW1vdmVSZXBlYXRlZFBvaW50cyhzKTtyZXR1cm4gb319LGlzSW50ZWdlclByZWNpc2lvbjpmdW5jdGlvbigpe3JldHVybiAxPT09dGhpcy5zY2FsZUZhY3Rvcn0sZ2V0Tm9kZWRTdWJzdHJpbmdzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5ub2Rlci5nZXROb2RlZFN1YnN0cmluZ3MoKTtyZXR1cm4gdGhpcy5pc1NjYWxlZCYmdGhpcy5yZXNjYWxlKHQpLHR9LGNvbXB1dGVOb2RlczpmdW5jdGlvbih0KXt2YXIgZT10O3RoaXMuaXNTY2FsZWQmJihlPXRoaXMuc2NhbGUodCkpLHRoaXMubm9kZXIuY29tcHV0ZU5vZGVzKGUpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblt0bl19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEhpfX0pO3ZhciBDbz1PYmplY3QuZnJlZXplKHtNQ0luZGV4Tm9kZXI6bm4sU2NhbGVkTm9kZXI6SGksU2VnbWVudFN0cmluZzpiZX0pO2UoV2kucHJvdG90eXBlLHtpc1NpbXBsZU11bHRpUG9pbnQ6ZnVuY3Rpb24odCl7aWYodC5pc0VtcHR5KCkpcmV0dXJuITA7Zm9yKHZhciBlPW5ldyBhdCxuPTA7bjx0LmdldE51bUdlb21ldHJpZXMoKTtuKyspe3ZhciBpPXQuZ2V0R2VvbWV0cnlOKG4pLHI9aS5nZXRDb29yZGluYXRlKCk7aWYoZS5jb250YWlucyhyKSlyZXR1cm4gdGhpcy5ub25TaW1wbGVMb2NhdGlvbj1yLCExO2UuYWRkKHIpfXJldHVybiEwfSxpc1NpbXBsZVBvbHlnb25hbDpmdW5jdGlvbih0KXtmb3IodmFyIGU9a24uZ2V0TGluZXModCksbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZighdGhpcy5pc1NpbXBsZUxpbmVhckdlb21ldHJ5KGkpKXJldHVybiExfXJldHVybiEwfSxoYXNDbG9zZWRFbmRwb2ludEludGVyc2VjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IHJ0LG49dC5nZXRFZGdlSXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpLHI9KGkuZ2V0TWF4aW11bVNlZ21lbnRJbmRleCgpLGkuaXNDbG9zZWQoKSkscz1pLmdldENvb3JkaW5hdGUoMCk7dGhpcy5hZGRFbmRwb2ludChlLHMscik7dmFyIG89aS5nZXRDb29yZGluYXRlKGkuZ2V0TnVtUG9pbnRzKCktMSk7dGhpcy5hZGRFbmRwb2ludChlLG8scil9Zm9yKHZhciBuPWUudmFsdWVzKCkuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBhPW4ubmV4dCgpO2lmKGEuaXNDbG9zZWQmJjIhPT1hLmRlZ3JlZSlyZXR1cm4gdGhpcy5ub25TaW1wbGVMb2NhdGlvbj1hLmdldENvb3JkaW5hdGUoKSwhMH1yZXR1cm4hMX0sZ2V0Tm9uU2ltcGxlTG9jYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub25TaW1wbGVMb2NhdGlvbn0saXNTaW1wbGVMaW5lYXJHZW9tZXRyeTpmdW5jdGlvbih0KXtpZih0LmlzRW1wdHkoKSlyZXR1cm4hMDt2YXIgZT1uZXcgJG4oMCx0KSxuPW5ldyBhZSxpPWUuY29tcHV0ZVNlbGZOb2RlcyhuLCEwKTtyZXR1cm4haS5oYXNJbnRlcnNlY3Rpb24oKXx8KGkuaGFzUHJvcGVySW50ZXJzZWN0aW9uKCk/KHRoaXMubm9uU2ltcGxlTG9jYXRpb249aS5nZXRQcm9wZXJJbnRlcnNlY3Rpb25Qb2ludCgpLCExKTohdGhpcy5oYXNOb25FbmRwb2ludEludGVyc2VjdGlvbihlKSYmKCF0aGlzLmlzQ2xvc2VkRW5kcG9pbnRzSW5JbnRlcmlvcnx8IXRoaXMuaGFzQ2xvc2VkRW5kcG9pbnRJbnRlcnNlY3Rpb24oZSkpKX0saGFzTm9uRW5kcG9pbnRJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuZ2V0RWRnZUl0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KWZvcih2YXIgbj1lLm5leHQoKSxpPW4uZ2V0TWF4aW11bVNlZ21lbnRJbmRleCgpLHI9bi5nZXRFZGdlSW50ZXJzZWN0aW9uTGlzdCgpLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKTtpZighcy5pc0VuZFBvaW50KGkpKXJldHVybiB0aGlzLm5vblNpbXBsZUxvY2F0aW9uPXMuZ2V0Q29vcmRpbmF0ZSgpLCEwfXJldHVybiExfSxhZGRFbmRwb2ludDpmdW5jdGlvbih0LGUsbil7dmFyIGk9dC5nZXQoZSk7bnVsbD09PWkmJihpPW5ldyBqaShlKSx0LnB1dChlLGkpKSxpLmFkZEVuZHBvaW50KG4pfSxjb21wdXRlU2ltcGxlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vblNpbXBsZUxvY2F0aW9uPW51bGwsISF0LmlzRW1wdHkoKXx8KHQgaW5zdGFuY2VvZiBTdD90aGlzLmlzU2ltcGxlTGluZWFyR2VvbWV0cnkodCk6dCBpbnN0YW5jZW9mIGd0P3RoaXMuaXNTaW1wbGVMaW5lYXJHZW9tZXRyeSh0KTp0IGluc3RhbmNlb2YgUHQ/dGhpcy5pc1NpbXBsZU11bHRpUG9pbnQodCk6Uih0LFJ0KT90aGlzLmlzU2ltcGxlUG9seWdvbmFsKHQpOiEodCBpbnN0YW5jZW9mIGZ0KXx8dGhpcy5pc1NpbXBsZUdlb21ldHJ5Q29sbGVjdGlvbih0KSl9LGlzU2ltcGxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9uU2ltcGxlTG9jYXRpb249bnVsbCx0aGlzLmNvbXB1dGVTaW1wbGUodGhpcy5pbnB1dEdlb20pfSxpc1NpbXBsZUdlb21ldHJ5Q29sbGVjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQuZ2V0TnVtR2VvbWV0cmllcygpO2UrKyl7dmFyIG49dC5nZXRHZW9tZXRyeU4oZSk7aWYoIXRoaXMuY29tcHV0ZVNpbXBsZShuKSlyZXR1cm4hMX1yZXR1cm4hMH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gV2l9fSksZShqaS5wcm90b3R5cGUse2FkZEVuZHBvaW50OmZ1bmN0aW9uKHQpe3RoaXMuZGVncmVlKyssdGhpcy5pc0Nsb3NlZHw9dH0sZ2V0Q29vcmRpbmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBqaX19KSxXaS5FbmRwb2ludEluZm89amksZShLaS5wcm90b3R5cGUse2dldEVuZENhcFN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kQ2FwU3R5bGV9LGlzU2luZ2xlU2lkZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNTaW5nbGVTaWRlZH0sc2V0UXVhZHJhbnRTZWdtZW50czpmdW5jdGlvbih0KXt0aGlzLnF1YWRyYW50U2VnbWVudHM9dCwwPT09dGhpcy5xdWFkcmFudFNlZ21lbnRzJiYodGhpcy5qb2luU3R5bGU9S2kuSk9JTl9CRVZFTCksdGhpcy5xdWFkcmFudFNlZ21lbnRzPDAmJih0aGlzLmpvaW5TdHlsZT1LaS5KT0lOX01JVFJFLHRoaXMubWl0cmVMaW1pdD1NYXRoLmFicyh0aGlzLnF1YWRyYW50U2VnbWVudHMpKSx0PD0wJiYodGhpcy5xdWFkcmFudFNlZ21lbnRzPTEpLHRoaXMuam9pblN0eWxlIT09S2kuSk9JTl9ST1VORCYmKHRoaXMucXVhZHJhbnRTZWdtZW50cz1LaS5ERUZBVUxUX1FVQURSQU5UX1NFR01FTlRTKX0sZ2V0Sm9pblN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuam9pblN0eWxlfSxzZXRKb2luU3R5bGU6ZnVuY3Rpb24odCl7dGhpcy5qb2luU3R5bGU9dH0sc2V0U2ltcGxpZnlGYWN0b3I6ZnVuY3Rpb24odCl7dGhpcy5zaW1wbGlmeUZhY3Rvcj10PDA/MDp0fSxnZXRTaW1wbGlmeUZhY3RvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpbXBsaWZ5RmFjdG9yfSxnZXRRdWFkcmFudFNlZ21lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucXVhZHJhbnRTZWdtZW50c30sc2V0RW5kQ2FwU3R5bGU6ZnVuY3Rpb24odCl7dGhpcy5lbmRDYXBTdHlsZT10fSxnZXRNaXRyZUxpbWl0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWl0cmVMaW1pdH0sc2V0TWl0cmVMaW1pdDpmdW5jdGlvbih0KXt0aGlzLm1pdHJlTGltaXQ9dH0sc2V0U2luZ2xlU2lkZWQ6ZnVuY3Rpb24odCl7dGhpcy5faXNTaW5nbGVTaWRlZD10fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBLaX19KSxLaS5idWZmZXJEaXN0YW5jZUVycm9yPWZ1bmN0aW9uKHQpe3ZhciBlPU1hdGguUEkvMi90O3JldHVybiAxLU1hdGguY29zKGUvMil9LEtpLkNBUF9ST1VORD0xLEtpLkNBUF9GTEFUPTIsS2kuQ0FQX1NRVUFSRT0zLEtpLkpPSU5fUk9VTkQ9MSxLaS5KT0lOX01JVFJFPTIsS2kuSk9JTl9CRVZFTD0zLEtpLkRFRkFVTFRfUVVBRFJBTlRfU0VHTUVOVFM9OCxLaS5ERUZBVUxUX01JVFJFX0xJTUlUPTUsS2kuREVGQVVMVF9TSU1QTElGWV9GQUNUT1I9LjAxLGUoWmkucHJvdG90eXBlLHtnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWluQ29vcmR9LGdldFJpZ2h0bW9zdFNpZGU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldFJpZ2h0bW9zdFNpZGVPZlNlZ21lbnQodCxlKTtyZXR1cm4gbjwwJiYobj10aGlzLmdldFJpZ2h0bW9zdFNpZGVPZlNlZ21lbnQodCxlLTEpKSxuPDAmJih0aGlzLm1pbkNvb3JkPW51bGwsdGhpcy5jaGVja0ZvclJpZ2h0bW9zdENvb3JkaW5hdGUodCkpLG59LGZpbmRSaWdodG1vc3RFZGdlQXRWZXJ0ZXg6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm1pbkRlLmdldEVkZ2UoKS5nZXRDb29yZGluYXRlcygpO2YuaXNUcnVlKHRoaXMubWluSW5kZXg+MCYmdGhpcy5taW5JbmRleDx0Lmxlbmd0aCxcInJpZ2h0bW9zdCBwb2ludCBleHBlY3RlZCB0byBiZSBpbnRlcmlvciB2ZXJ0ZXggb2YgZWRnZVwiKTt2YXIgZT10W3RoaXMubWluSW5kZXgtMV0sbj10W3RoaXMubWluSW5kZXgrMV0saT1oZS5jb21wdXRlT3JpZW50YXRpb24odGhpcy5taW5Db29yZCxuLGUpLHI9ITE7ZS55PHRoaXMubWluQ29vcmQueSYmbi55PHRoaXMubWluQ29vcmQueSYmaT09PWhlLkNPVU5URVJDTE9DS1dJU0U/cj0hMDplLnk+dGhpcy5taW5Db29yZC55JiZuLnk+dGhpcy5taW5Db29yZC55JiZpPT09aGUuQ0xPQ0tXSVNFJiYocj0hMCksciYmKHRoaXMubWluSW5kZXg9dGhpcy5taW5JbmRleC0xKX0sZ2V0UmlnaHRtb3N0U2lkZU9mU2VnbWVudDpmdW5jdGlvbih0LGUpe3ZhciBuPXQuZ2V0RWRnZSgpLGk9bi5nZXRDb29yZGluYXRlcygpO2lmKGU8MHx8ZSsxPj1pLmxlbmd0aClyZXR1cm4tMTtpZihpW2VdLnk9PT1pW2UrMV0ueSlyZXR1cm4tMTt2YXIgcj1jbi5MRUZUO3JldHVybiBpW2VdLnk8aVtlKzFdLnkmJihyPWNuLlJJR0hUKSxyfSxnZXRFZGdlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3JpZW50ZWREZX0sY2hlY2tGb3JSaWdodG1vc3RDb29yZGluYXRlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10LmdldEVkZ2UoKS5nZXRDb29yZGluYXRlcygpLG49MDtuPGUubGVuZ3RoLTE7bisrKShudWxsPT09dGhpcy5taW5Db29yZHx8ZVtuXS54PnRoaXMubWluQ29vcmQueCkmJih0aGlzLm1pbkRlPXQsdGhpcy5taW5JbmRleD1uLHRoaXMubWluQ29vcmQ9ZVtuXSl9LGZpbmRSaWdodG1vc3RFZGdlQXROb2RlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5taW5EZS5nZXROb2RlKCksZT10LmdldEVkZ2VzKCk7dGhpcy5taW5EZT1lLmdldFJpZ2h0bW9zdEVkZ2UoKSx0aGlzLm1pbkRlLmlzRm9yd2FyZCgpfHwodGhpcy5taW5EZT10aGlzLm1pbkRlLmdldFN5bSgpLHRoaXMubWluSW5kZXg9dGhpcy5taW5EZS5nZXRFZGdlKCkuZ2V0Q29vcmRpbmF0ZXMoKS5sZW5ndGgtMSl9LGZpbmRFZGdlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLmlzRm9yd2FyZCgpJiZ0aGlzLmNoZWNrRm9yUmlnaHRtb3N0Q29vcmRpbmF0ZShuKX1mLmlzVHJ1ZSgwIT09dGhpcy5taW5JbmRleHx8dGhpcy5taW5Db29yZC5lcXVhbHModGhpcy5taW5EZS5nZXRDb29yZGluYXRlKCkpLFwiaW5jb25zaXN0ZW5jeSBpbiByaWdodG1vc3QgcHJvY2Vzc2luZ1wiKSwwPT09dGhpcy5taW5JbmRleD90aGlzLmZpbmRSaWdodG1vc3RFZGdlQXROb2RlKCk6dGhpcy5maW5kUmlnaHRtb3N0RWRnZUF0VmVydGV4KCksdGhpcy5vcmllbnRlZERlPXRoaXMubWluRGU7dmFyIGk9dGhpcy5nZXRSaWdodG1vc3RTaWRlKHRoaXMubWluRGUsdGhpcy5taW5JbmRleCk7aT09PWNuLkxFRlQmJih0aGlzLm9yaWVudGVkRGU9dGhpcy5taW5EZS5nZXRTeW0oKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFppfX0pLFFpLnByb3RvdHlwZS5hZGRMYXN0PWZ1bmN0aW9uKHQpe3RoaXMuYXJyYXlfLnB1c2godCl9LFFpLnByb3RvdHlwZS5yZW1vdmVGaXJzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFycmF5Xy5zaGlmdCgpfSxRaS5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5hcnJheV8ubGVuZ3RofSxlKEppLnByb3RvdHlwZSx7Y2xlYXJWaXNpdGVkRWRnZXM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5kaXJFZGdlTGlzdC5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7ZS5zZXRWaXNpdGVkKCExKX19LGdldFJpZ2h0bW9zdENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yaWdodE1vc3RDb29yZH0sY29tcHV0ZU5vZGVEZXB0aDpmdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPXQuZ2V0RWRnZXMoKS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7aWYoaS5pc1Zpc2l0ZWQoKXx8aS5nZXRTeW0oKS5pc1Zpc2l0ZWQoKSl7ZT1pO2JyZWFrfX1pZihudWxsPT09ZSl0aHJvdyBuZXcgc24oXCJ1bmFibGUgdG8gZmluZCBlZGdlIHRvIGNvbXB1dGUgZGVwdGhzIGF0IFwiK3QuZ2V0Q29vcmRpbmF0ZSgpKTt0LmdldEVkZ2VzKCkuY29tcHV0ZURlcHRocyhlKTtmb3IodmFyIG49dC5nZXRFZGdlcygpLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpLnNldFZpc2l0ZWQoITApLHRoaXMuY29weVN5bURlcHRocyhpKX19LGNvbXB1dGVEZXB0aDpmdW5jdGlvbih0KXt0aGlzLmNsZWFyVmlzaXRlZEVkZ2VzKCk7dmFyIGU9dGhpcy5maW5kZXIuZ2V0RWRnZSgpO2UuZ2V0Tm9kZSgpLGUuZ2V0TGFiZWwoKTtlLnNldEVkZ2VEZXB0aHMoY24uUklHSFQsdCksdGhpcy5jb3B5U3ltRGVwdGhzKGUpLHRoaXMuY29tcHV0ZURlcHRocyhlKX0sY3JlYXRlOmZ1bmN0aW9uKHQpe3RoaXMuYWRkUmVhY2hhYmxlKHQpLHRoaXMuZmluZGVyLmZpbmRFZGdlKHRoaXMuZGlyRWRnZUxpc3QpLHRoaXMucmlnaHRNb3N0Q29vcmQ9dGhpcy5maW5kZXIuZ2V0Q29vcmRpbmF0ZSgpfSxmaW5kUmVzdWx0RWRnZXM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5kaXJFZGdlTGlzdC5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7ZS5nZXREZXB0aChjbi5SSUdIVCk+PTEmJmUuZ2V0RGVwdGgoY24uTEVGVCk8PTAmJiFlLmlzSW50ZXJpb3JBcmVhRWRnZSgpJiZlLnNldEluUmVzdWx0KCEwKX19LGNvbXB1dGVEZXB0aHM6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEosbj1uZXcgUWksaT10LmdldE5vZGUoKTtmb3Iobi5hZGRMYXN0KGkpLGUuYWRkKGkpLHQuc2V0VmlzaXRlZCghMCk7IW4uaXNFbXB0eSgpOyl7dmFyIHI9bi5yZW1vdmVGaXJzdCgpO2UuYWRkKHIpLHRoaXMuY29tcHV0ZU5vZGVEZXB0aChyKTtmb3IodmFyIHM9ci5nZXRFZGdlcygpLml0ZXJhdG9yKCk7cy5oYXNOZXh0KCk7KXt2YXIgbz1zLm5leHQoKSxhPW8uZ2V0U3ltKCk7aWYoIWEuaXNWaXNpdGVkKCkpe3ZhciB1PWEuZ2V0Tm9kZSgpO2UuY29udGFpbnModSl8fChuLmFkZExhc3QodSksZS5hZGQodSkpfX19fSxjb21wYXJlVG86ZnVuY3Rpb24odCl7dmFyIGU9dDtyZXR1cm4gdGhpcy5yaWdodE1vc3RDb29yZC54PGUucmlnaHRNb3N0Q29vcmQueD8tMTp0aGlzLnJpZ2h0TW9zdENvb3JkLng+ZS5yaWdodE1vc3RDb29yZC54PzE6MH0sZ2V0RW52ZWxvcGU6ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5lbnYpe2Zvcih2YXIgdD1uZXcgQyxlPXRoaXMuZGlyRWRnZUxpc3QuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspZm9yKHZhciBuPWUubmV4dCgpLGk9bi5nZXRFZGdlKCkuZ2V0Q29vcmRpbmF0ZXMoKSxyPTA7cjxpLmxlbmd0aC0xO3IrKyl0LmV4cGFuZFRvSW5jbHVkZShpW3JdKTt0aGlzLmVudj10fXJldHVybiB0aGlzLmVudn0sYWRkUmVhY2hhYmxlOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBwZTtmb3IoZS5hZGQodCk7IWUuZW1wdHkoKTspe3ZhciBuPWUucG9wKCk7dGhpcy5hZGQobixlKX19LGNvcHlTeW1EZXB0aHM6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRTeW0oKTtlLnNldERlcHRoKGNuLkxFRlQsdC5nZXREZXB0aChjbi5SSUdIVCkpLGUuc2V0RGVwdGgoY24uUklHSFQsdC5nZXREZXB0aChjbi5MRUZUKSl9LGFkZDpmdW5jdGlvbih0LGUpe3Quc2V0VmlzaXRlZCghMCksdGhpcy5ub2Rlcy5hZGQodCk7Zm9yKHZhciBuPXQuZ2V0RWRnZXMoKS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7dGhpcy5kaXJFZGdlTGlzdC5hZGQoaSk7dmFyIHI9aS5nZXRTeW0oKSxzPXIuZ2V0Tm9kZSgpO3MuaXNWaXNpdGVkKCl8fGUucHVzaChzKX19LGdldE5vZGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXN9LGdldERpcmVjdGVkRWRnZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXJFZGdlTGlzdH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bc119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEppfX0pLGUoJGkucHJvdG90eXBlLHtpc0RlbGV0YWJsZTpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj10aGlzLmlucHV0TGluZVt0XSxzPXRoaXMuaW5wdXRMaW5lW2VdLG89dGhpcy5pbnB1dExpbmVbbl07cmV0dXJuISF0aGlzLmlzQ29uY2F2ZShyLHMsbykmJighIXRoaXMuaXNTaGFsbG93KHIscyxvLGkpJiZ0aGlzLmlzU2hhbGxvd1NhbXBsZWQocixzLHQsbixpKSl9LGRlbGV0ZVNoYWxsb3dDb25jYXZpdGllczpmdW5jdGlvbigpe2Zvcih2YXIgdD0xLGU9KHRoaXMuaW5wdXRMaW5lLmxlbmd0aC0xLHRoaXMuZmluZE5leHROb25EZWxldGVkSW5kZXgodCkpLG49dGhpcy5maW5kTmV4dE5vbkRlbGV0ZWRJbmRleChlKSxpPSExO248dGhpcy5pbnB1dExpbmUubGVuZ3RoOyl7dmFyIHI9ITE7dGhpcy5pc0RlbGV0YWJsZSh0LGUsbix0aGlzLmRpc3RhbmNlVG9sKSYmKHRoaXMuaXNEZWxldGVkW2VdPSRpLkRFTEVURSxyPSEwLGk9ITApLHQ9cj9uOmUsZT10aGlzLmZpbmROZXh0Tm9uRGVsZXRlZEluZGV4KHQpLG49dGhpcy5maW5kTmV4dE5vbkRlbGV0ZWRJbmRleChlKX1yZXR1cm4gaX0saXNTaGFsbG93Q29uY2F2aXR5OmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPWhlLmNvbXB1dGVPcmllbnRhdGlvbih0LGUsbikscz1yPT09dGhpcy5hbmdsZU9yaWVudGF0aW9uO2lmKCFzKXJldHVybiExO3ZhciBvPWhlLmRpc3RhbmNlUG9pbnRMaW5lKGUsdCxuKTtyZXR1cm4gbzxpfSxpc1NoYWxsb3dTYW1wbGVkOmZ1bmN0aW9uKHQsZSxuLGkscil7dmFyIHM9TWF0aC50cnVuYygoaS1uKS8kaS5OVU1fUFRTX1RPX0NIRUNLKTtzPD0wJiYocz0xKTtmb3IodmFyIG89bjtvPGk7bys9cylpZighdGhpcy5pc1NoYWxsb3codCxlLHRoaXMuaW5wdXRMaW5lW29dLHIpKXJldHVybiExO3JldHVybiEwfSxpc0NvbmNhdmU6ZnVuY3Rpb24gdChlLG4saSl7dmFyIHI9aGUuY29tcHV0ZU9yaWVudGF0aW9uKGUsbixpKSx0PXI9PT10aGlzLmFuZ2xlT3JpZW50YXRpb247cmV0dXJuIHR9LHNpbXBsaWZ5OmZ1bmN0aW9uKHQpe3RoaXMuZGlzdGFuY2VUb2w9TWF0aC5hYnModCksdDwwJiYodGhpcy5hbmdsZU9yaWVudGF0aW9uPWhlLkNMT0NLV0lTRSksdGhpcy5pc0RlbGV0ZWQ9bmV3IEFycmF5KHRoaXMuaW5wdXRMaW5lLmxlbmd0aCkuZmlsbChudWxsKTt2YXIgZT0hMTtkbyBlPXRoaXMuZGVsZXRlU2hhbGxvd0NvbmNhdml0aWVzKCk7d2hpbGUoZSk7cmV0dXJuIHRoaXMuY29sbGFwc2VMaW5lKCl9LGZpbmROZXh0Tm9uRGVsZXRlZEluZGV4OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10KzE7ZTx0aGlzLmlucHV0TGluZS5sZW5ndGgmJnRoaXMuaXNEZWxldGVkW2VdPT09JGkuREVMRVRFOyllKys7cmV0dXJuIGV9LGlzU2hhbGxvdzpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj1oZS5kaXN0YW5jZVBvaW50TGluZShlLHQsbik7cmV0dXJuIHI8aX0sY29sbGFwc2VMaW5lOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBOLGU9MDtlPHRoaXMuaW5wdXRMaW5lLmxlbmd0aDtlKyspdGhpcy5pc0RlbGV0ZWRbZV0hPT0kaS5ERUxFVEUmJnQuYWRkKHRoaXMuaW5wdXRMaW5lW2VdKTtyZXR1cm4gdC50b0Nvb3JkaW5hdGVBcnJheSgpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiAkaX19KSwkaS5zaW1wbGlmeT1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyAkaSh0KTtyZXR1cm4gbi5zaW1wbGlmeShlKX0sJGkuSU5JVD0wLCRpLkRFTEVURT0xLCRpLktFRVA9MSwkaS5OVU1fUFRTX1RPX0NIRUNLPTEwLGUodHIucHJvdG90eXBlLHtnZXRDb29yZGluYXRlczpmdW5jdGlvbigpe3ZhciB0PXRoaXMucHRMaXN0LnRvQXJyYXkodHIuQ09PUkRJTkFURV9BUlJBWV9UWVBFKTtyZXR1cm4gdH0sc2V0UHJlY2lzaW9uTW9kZWw6ZnVuY3Rpb24odCl7dGhpcy5wcmVjaXNpb25Nb2RlbD10fSxhZGRQdDpmdW5jdGlvbih0KXt2YXIgZT1uZXcgZyh0KTtyZXR1cm4gdGhpcy5wcmVjaXNpb25Nb2RlbC5tYWtlUHJlY2lzZShlKSx0aGlzLmlzUmVkdW5kYW50KGUpP251bGw6dm9pZCB0aGlzLnB0TGlzdC5hZGQoZSl9LHJldmVyc2U6ZnVuY3Rpb24oKXt9LGFkZFB0czpmdW5jdGlvbih0LGUpe2lmKGUpZm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspdGhpcy5hZGRQdCh0W25dKTtlbHNlIGZvcih2YXIgbj10Lmxlbmd0aC0xO24+PTA7bi0tKXRoaXMuYWRkUHQodFtuXSl9LGlzUmVkdW5kYW50OmZ1bmN0aW9uKHQpe2lmKHRoaXMucHRMaXN0LnNpemUoKTwxKXJldHVybiExO3ZhciBlPXRoaXMucHRMaXN0LmdldCh0aGlzLnB0TGlzdC5zaXplKCktMSksbj10LmRpc3RhbmNlKGUpO3JldHVybiBuPHRoaXMubWluaW1pbVZlcnRleERpc3RhbmNlfSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciB0PW5ldyBpZSxlPXQuY3JlYXRlTGluZVN0cmluZyh0aGlzLmdldENvb3JkaW5hdGVzKCkpO3JldHVybiBlLnRvU3RyaW5nKCl9LGNsb3NlUmluZzpmdW5jdGlvbigpe2lmKHRoaXMucHRMaXN0LnNpemUoKTwxKXJldHVybiBudWxsO3ZhciB0PW5ldyBnKHRoaXMucHRMaXN0LmdldCgwKSksZT10aGlzLnB0TGlzdC5nZXQodGhpcy5wdExpc3Quc2l6ZSgpLTEpLG49bnVsbDtyZXR1cm4gdGhpcy5wdExpc3Quc2l6ZSgpPj0yJiYobj10aGlzLnB0TGlzdC5nZXQodGhpcy5wdExpc3Quc2l6ZSgpLTIpKSx0LmVxdWFscyhlKT9udWxsOnZvaWQgdGhpcy5wdExpc3QuYWRkKHQpfSxzZXRNaW5pbXVtVmVydGV4RGlzdGFuY2U6ZnVuY3Rpb24odCl7dGhpcy5taW5pbWltVmVydGV4RGlzdGFuY2U9dH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdHJ9fSksdHIuQ09PUkRJTkFURV9BUlJBWV9UWVBFPW5ldyBBcnJheSgwKS5maWxsKG51bGwpLGUoZXIucHJvdG90eXBlLHthZGROZXh0U2VnbWVudDpmdW5jdGlvbih0LGUpe2lmKHRoaXMuczA9dGhpcy5zMSx0aGlzLnMxPXRoaXMuczIsdGhpcy5zMj10LHRoaXMuc2VnMC5zZXRDb29yZGluYXRlcyh0aGlzLnMwLHRoaXMuczEpLHRoaXMuY29tcHV0ZU9mZnNldFNlZ21lbnQodGhpcy5zZWcwLHRoaXMuc2lkZSx0aGlzLmRpc3RhbmNlLHRoaXMub2Zmc2V0MCksdGhpcy5zZWcxLnNldENvb3JkaW5hdGVzKHRoaXMuczEsdGhpcy5zMiksdGhpcy5jb21wdXRlT2Zmc2V0U2VnbWVudCh0aGlzLnNlZzEsdGhpcy5zaWRlLHRoaXMuZGlzdGFuY2UsdGhpcy5vZmZzZXQxKSx0aGlzLnMxLmVxdWFscyh0aGlzLnMyKSlyZXR1cm4gbnVsbDt2YXIgbj1oZS5jb21wdXRlT3JpZW50YXRpb24odGhpcy5zMCx0aGlzLnMxLHRoaXMuczIpLGk9bj09PWhlLkNMT0NLV0lTRSYmdGhpcy5zaWRlPT09Y24uTEVGVHx8bj09PWhlLkNPVU5URVJDTE9DS1dJU0UmJnRoaXMuc2lkZT09PWNuLlJJR0hUOzA9PT1uP3RoaXMuYWRkQ29sbGluZWFyKGUpOmk/dGhpcy5hZGRPdXRzaWRlVHVybihuLGUpOnRoaXMuYWRkSW5zaWRlVHVybihuLGUpfSxhZGRMaW5lRW5kQ2FwOmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IGNlKHQsZSksaT1uZXcgY2U7dGhpcy5jb21wdXRlT2Zmc2V0U2VnbWVudChuLGNuLkxFRlQsdGhpcy5kaXN0YW5jZSxpKTt2YXIgcj1uZXcgY2U7dGhpcy5jb21wdXRlT2Zmc2V0U2VnbWVudChuLGNuLlJJR0hULHRoaXMuZGlzdGFuY2Uscik7dmFyIHM9ZS54LXQueCxvPWUueS10LnksYT1NYXRoLmF0YW4yKG8scyk7c3dpdGNoKHRoaXMuYnVmUGFyYW1zLmdldEVuZENhcFN0eWxlKCkpe2Nhc2UgS2kuQ0FQX1JPVU5EOnRoaXMuc2VnTGlzdC5hZGRQdChpLnAxKSx0aGlzLmFkZEZpbGxldEFyYyhlLGErTWF0aC5QSS8yLGEtTWF0aC5QSS8yLGhlLkNMT0NLV0lTRSx0aGlzLmRpc3RhbmNlKSx0aGlzLnNlZ0xpc3QuYWRkUHQoci5wMSk7YnJlYWs7Y2FzZSBLaS5DQVBfRkxBVDp0aGlzLnNlZ0xpc3QuYWRkUHQoaS5wMSksdGhpcy5zZWdMaXN0LmFkZFB0KHIucDEpO2JyZWFrO2Nhc2UgS2kuQ0FQX1NRVUFSRTp2YXIgdT1uZXcgZzt1Lng9TWF0aC5hYnModGhpcy5kaXN0YW5jZSkqTWF0aC5jb3MoYSksdS55PU1hdGguYWJzKHRoaXMuZGlzdGFuY2UpKk1hdGguc2luKGEpO3ZhciBsPW5ldyBnKGkucDEueCt1LngsaS5wMS55K3UueSksaD1uZXcgZyhyLnAxLngrdS54LHIucDEueSt1LnkpO3RoaXMuc2VnTGlzdC5hZGRQdChsKSx0aGlzLnNlZ0xpc3QuYWRkUHQoaCl9fSxnZXRDb29yZGluYXRlczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc2VnTGlzdC5nZXRDb29yZGluYXRlcygpO3JldHVybiB0fSxhZGRNaXRyZUpvaW46ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9ITAscz1udWxsO3RyeXtzPUYuaW50ZXJzZWN0aW9uKGUucDAsZS5wMSxuLnAwLG4ucDEpO3ZhciBvPWk8PTA/MTpzLmRpc3RhbmNlKHQpL01hdGguYWJzKGkpO28+dGhpcy5idWZQYXJhbXMuZ2V0TWl0cmVMaW1pdCgpJiYocj0hMSl9Y2F0Y2godCl7aWYoISh0IGluc3RhbmNlb2YgdykpdGhyb3cgdDtzPW5ldyBnKDAsMCkscj0hMX1maW5hbGx5e31yP3RoaXMuc2VnTGlzdC5hZGRQdChzKTp0aGlzLmFkZExpbWl0ZWRNaXRyZUpvaW4oZSxuLGksdGhpcy5idWZQYXJhbXMuZ2V0TWl0cmVMaW1pdCgpKX0sYWRkRmlsbGV0Q29ybmVyOmZ1bmN0aW9uKHQsZSxuLGkscil7dmFyIHM9ZS54LXQueCxvPWUueS10LnksYT1NYXRoLmF0YW4yKG8scyksdT1uLngtdC54LGw9bi55LXQueSxoPU1hdGguYXRhbjIobCx1KTtpPT09aGUuQ0xPQ0tXSVNFP2E8PWgmJihhKz0yKk1hdGguUEkpOmE+PWgmJihhLT0yKk1hdGguUEkpLHRoaXMuc2VnTGlzdC5hZGRQdChlKSx0aGlzLmFkZEZpbGxldEFyYyh0LGEsaCxpLHIpLHRoaXMuc2VnTGlzdC5hZGRQdChuKX0sYWRkT3V0c2lkZVR1cm46ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5vZmZzZXQwLnAxLmRpc3RhbmNlKHRoaXMub2Zmc2V0MS5wMCk8dGhpcy5kaXN0YW5jZSplci5PRkZTRVRfU0VHTUVOVF9TRVBBUkFUSU9OX0ZBQ1RPUj8odGhpcy5zZWdMaXN0LmFkZFB0KHRoaXMub2Zmc2V0MC5wMSksbnVsbCk6dm9pZCh0aGlzLmJ1ZlBhcmFtcy5nZXRKb2luU3R5bGUoKT09PUtpLkpPSU5fTUlUUkU/dGhpcy5hZGRNaXRyZUpvaW4odGhpcy5zMSx0aGlzLm9mZnNldDAsdGhpcy5vZmZzZXQxLHRoaXMuZGlzdGFuY2UpOnRoaXMuYnVmUGFyYW1zLmdldEpvaW5TdHlsZSgpPT09S2kuSk9JTl9CRVZFTD90aGlzLmFkZEJldmVsSm9pbih0aGlzLm9mZnNldDAsdGhpcy5vZmZzZXQxKTooZSYmdGhpcy5zZWdMaXN0LmFkZFB0KHRoaXMub2Zmc2V0MC5wMSksdGhpcy5hZGRGaWxsZXRDb3JuZXIodGhpcy5zMSx0aGlzLm9mZnNldDAucDEsdGhpcy5vZmZzZXQxLnAwLHQsdGhpcy5kaXN0YW5jZSksdGhpcy5zZWdMaXN0LmFkZFB0KHRoaXMub2Zmc2V0MS5wMCkpKX0sY3JlYXRlU3F1YXJlOmZ1bmN0aW9uKHQpe3RoaXMuc2VnTGlzdC5hZGRQdChuZXcgZyh0LngrdGhpcy5kaXN0YW5jZSx0LnkrdGhpcy5kaXN0YW5jZSkpLHRoaXMuc2VnTGlzdC5hZGRQdChuZXcgZyh0LngrdGhpcy5kaXN0YW5jZSx0LnktdGhpcy5kaXN0YW5jZSkpLHRoaXMuc2VnTGlzdC5hZGRQdChuZXcgZyh0LngtdGhpcy5kaXN0YW5jZSx0LnktdGhpcy5kaXN0YW5jZSkpLHRoaXMuc2VnTGlzdC5hZGRQdChuZXcgZyh0LngtdGhpcy5kaXN0YW5jZSx0LnkrdGhpcy5kaXN0YW5jZSkpLHRoaXMuc2VnTGlzdC5jbG9zZVJpbmcoKX0sYWRkU2VnbWVudHM6ZnVuY3Rpb24odCxlKXt0aGlzLnNlZ0xpc3QuYWRkUHRzKHQsZSl9LGFkZEZpcnN0U2VnbWVudDpmdW5jdGlvbigpe3RoaXMuc2VnTGlzdC5hZGRQdCh0aGlzLm9mZnNldDEucDApfSxhZGRMYXN0U2VnbWVudDpmdW5jdGlvbigpe3RoaXMuc2VnTGlzdC5hZGRQdCh0aGlzLm9mZnNldDEucDEpfSxpbml0U2lkZVNlZ21lbnRzOmZ1bmN0aW9uKHQsZSxuKXt0aGlzLnMxPXQsdGhpcy5zMj1lLHRoaXMuc2lkZT1uLHRoaXMuc2VnMS5zZXRDb29yZGluYXRlcyh0LGUpLHRoaXMuY29tcHV0ZU9mZnNldFNlZ21lbnQodGhpcy5zZWcxLG4sdGhpcy5kaXN0YW5jZSx0aGlzLm9mZnNldDEpO1xufSxhZGRMaW1pdGVkTWl0cmVKb2luOmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXRoaXMuc2VnMC5wMSxzPUNpLmFuZ2xlKHIsdGhpcy5zZWcwLnAwKSxvPShDaS5hbmdsZShyLHRoaXMuc2VnMS5wMSksQ2kuYW5nbGVCZXR3ZWVuT3JpZW50ZWQodGhpcy5zZWcwLnAwLHIsdGhpcy5zZWcxLnAxKSksYT1vLzIsdT1DaS5ub3JtYWxpemUocythKSxsPUNpLm5vcm1hbGl6ZSh1K01hdGguUEkpLGg9aSpuLGM9aCpNYXRoLmFicyhNYXRoLnNpbihhKSksZj1uLWMsZD1yLngraCpNYXRoLmNvcyhsKSxwPXIueStoKk1hdGguc2luKGwpLHY9bmV3IGcoZCxwKSxtPW5ldyBjZShyLHYpLHk9bS5wb2ludEFsb25nT2Zmc2V0KDEsZikseD1tLnBvaW50QWxvbmdPZmZzZXQoMSwtZik7dGhpcy5zaWRlPT09Y24uTEVGVD8odGhpcy5zZWdMaXN0LmFkZFB0KHkpLHRoaXMuc2VnTGlzdC5hZGRQdCh4KSk6KHRoaXMuc2VnTGlzdC5hZGRQdCh4KSx0aGlzLnNlZ0xpc3QuYWRkUHQoeSkpfSxjb21wdXRlT2Zmc2V0U2VnbWVudDpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj1lPT09Y24uTEVGVD8xOi0xLHM9dC5wMS54LXQucDAueCxvPXQucDEueS10LnAwLnksYT1NYXRoLnNxcnQocypzK28qbyksdT1yKm4qcy9hLGw9cipuKm8vYTtpLnAwLng9dC5wMC54LWwsaS5wMC55PXQucDAueSt1LGkucDEueD10LnAxLngtbCxpLnAxLnk9dC5wMS55K3V9LGFkZEZpbGxldEFyYzpmdW5jdGlvbih0LGUsbixpLHIpe3ZhciBzPWk9PT1oZS5DTE9DS1dJU0U/LTE6MSxvPU1hdGguYWJzKGUtbiksYT1NYXRoLnRydW5jKG8vdGhpcy5maWxsZXRBbmdsZVF1YW50dW0rLjUpO2lmKGE8MSlyZXR1cm4gbnVsbDt2YXIgdT1udWxsLGw9bnVsbDt1PTAsbD1vL2E7Zm9yKHZhciBoPXUsYz1uZXcgZztoPG87KXt2YXIgZj1lK3MqaDtjLng9dC54K3IqTWF0aC5jb3MoZiksYy55PXQueStyKk1hdGguc2luKGYpLHRoaXMuc2VnTGlzdC5hZGRQdChjKSxoKz1sfX0sYWRkSW5zaWRlVHVybjpmdW5jdGlvbih0LGUpe2lmKHRoaXMubGkuY29tcHV0ZUludGVyc2VjdGlvbih0aGlzLm9mZnNldDAucDAsdGhpcy5vZmZzZXQwLnAxLHRoaXMub2Zmc2V0MS5wMCx0aGlzLm9mZnNldDEucDEpLHRoaXMubGkuaGFzSW50ZXJzZWN0aW9uKCkpdGhpcy5zZWdMaXN0LmFkZFB0KHRoaXMubGkuZ2V0SW50ZXJzZWN0aW9uKDApKTtlbHNlIGlmKHRoaXMuX2hhc05hcnJvd0NvbmNhdmVBbmdsZT0hMCx0aGlzLm9mZnNldDAucDEuZGlzdGFuY2UodGhpcy5vZmZzZXQxLnAwKTx0aGlzLmRpc3RhbmNlKmVyLklOU0lERV9UVVJOX1ZFUlRFWF9TTkFQX0RJU1RBTkNFX0ZBQ1RPUil0aGlzLnNlZ0xpc3QuYWRkUHQodGhpcy5vZmZzZXQwLnAxKTtlbHNle2lmKHRoaXMuc2VnTGlzdC5hZGRQdCh0aGlzLm9mZnNldDAucDEpLHRoaXMuY2xvc2luZ1NlZ0xlbmd0aEZhY3Rvcj4wKXt2YXIgbj1uZXcgZygodGhpcy5jbG9zaW5nU2VnTGVuZ3RoRmFjdG9yKnRoaXMub2Zmc2V0MC5wMS54K3RoaXMuczEueCkvKHRoaXMuY2xvc2luZ1NlZ0xlbmd0aEZhY3RvcisxKSwodGhpcy5jbG9zaW5nU2VnTGVuZ3RoRmFjdG9yKnRoaXMub2Zmc2V0MC5wMS55K3RoaXMuczEueSkvKHRoaXMuY2xvc2luZ1NlZ0xlbmd0aEZhY3RvcisxKSk7dGhpcy5zZWdMaXN0LmFkZFB0KG4pO3ZhciBpPW5ldyBnKCh0aGlzLmNsb3NpbmdTZWdMZW5ndGhGYWN0b3IqdGhpcy5vZmZzZXQxLnAwLngrdGhpcy5zMS54KS8odGhpcy5jbG9zaW5nU2VnTGVuZ3RoRmFjdG9yKzEpLCh0aGlzLmNsb3NpbmdTZWdMZW5ndGhGYWN0b3IqdGhpcy5vZmZzZXQxLnAwLnkrdGhpcy5zMS55KS8odGhpcy5jbG9zaW5nU2VnTGVuZ3RoRmFjdG9yKzEpKTt0aGlzLnNlZ0xpc3QuYWRkUHQoaSl9ZWxzZSB0aGlzLnNlZ0xpc3QuYWRkUHQodGhpcy5zMSk7dGhpcy5zZWdMaXN0LmFkZFB0KHRoaXMub2Zmc2V0MS5wMCl9fSxjcmVhdGVDaXJjbGU6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGcodC54K3RoaXMuZGlzdGFuY2UsdC55KTt0aGlzLnNlZ0xpc3QuYWRkUHQoZSksdGhpcy5hZGRGaWxsZXRBcmModCwwLDIqTWF0aC5QSSwtMSx0aGlzLmRpc3RhbmNlKSx0aGlzLnNlZ0xpc3QuY2xvc2VSaW5nKCl9LGFkZEJldmVsSm9pbjpmdW5jdGlvbih0LGUpe3RoaXMuc2VnTGlzdC5hZGRQdCh0LnAxKSx0aGlzLnNlZ0xpc3QuYWRkUHQoZS5wMCl9LGluaXQ6ZnVuY3Rpb24odCl7dGhpcy5kaXN0YW5jZT10LHRoaXMubWF4Q3VydmVTZWdtZW50RXJyb3I9dCooMS1NYXRoLmNvcyh0aGlzLmZpbGxldEFuZ2xlUXVhbnR1bS8yKSksdGhpcy5zZWdMaXN0PW5ldyB0cix0aGlzLnNlZ0xpc3Quc2V0UHJlY2lzaW9uTW9kZWwodGhpcy5wcmVjaXNpb25Nb2RlbCksdGhpcy5zZWdMaXN0LnNldE1pbmltdW1WZXJ0ZXhEaXN0YW5jZSh0KmVyLkNVUlZFX1ZFUlRFWF9TTkFQX0RJU1RBTkNFX0ZBQ1RPUil9LGFkZENvbGxpbmVhcjpmdW5jdGlvbih0KXt0aGlzLmxpLmNvbXB1dGVJbnRlcnNlY3Rpb24odGhpcy5zMCx0aGlzLnMxLHRoaXMuczEsdGhpcy5zMik7dmFyIGU9dGhpcy5saS5nZXRJbnRlcnNlY3Rpb25OdW0oKTtlPj0yJiYodGhpcy5idWZQYXJhbXMuZ2V0Sm9pblN0eWxlKCk9PT1LaS5KT0lOX0JFVkVMfHx0aGlzLmJ1ZlBhcmFtcy5nZXRKb2luU3R5bGUoKT09PUtpLkpPSU5fTUlUUkU/KHQmJnRoaXMuc2VnTGlzdC5hZGRQdCh0aGlzLm9mZnNldDAucDEpLHRoaXMuc2VnTGlzdC5hZGRQdCh0aGlzLm9mZnNldDEucDApKTp0aGlzLmFkZEZpbGxldENvcm5lcih0aGlzLnMxLHRoaXMub2Zmc2V0MC5wMSx0aGlzLm9mZnNldDEucDAsaGUuQ0xPQ0tXSVNFLHRoaXMuZGlzdGFuY2UpKX0sY2xvc2VSaW5nOmZ1bmN0aW9uKCl7dGhpcy5zZWdMaXN0LmNsb3NlUmluZygpfSxoYXNOYXJyb3dDb25jYXZlQW5nbGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faGFzTmFycm93Q29uY2F2ZUFuZ2xlfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBlcn19KSxlci5PRkZTRVRfU0VHTUVOVF9TRVBBUkFUSU9OX0ZBQ1RPUj0uMDAxLGVyLklOU0lERV9UVVJOX1ZFUlRFWF9TTkFQX0RJU1RBTkNFX0ZBQ1RPUj0uMDAxLGVyLkNVUlZFX1ZFUlRFWF9TTkFQX0RJU1RBTkNFX0ZBQ1RPUj0xZS02LGVyLk1BWF9DTE9TSU5HX1NFR19MRU5fRkFDVE9SPTgwLGUobnIucHJvdG90eXBlLHtnZXRPZmZzZXRDdXJ2ZTpmdW5jdGlvbih0LGUpe2lmKHRoaXMuZGlzdGFuY2U9ZSwwPT09ZSlyZXR1cm4gbnVsbDt2YXIgbj1lPDAsaT1NYXRoLmFicyhlKSxyPXRoaXMuZ2V0U2VnR2VuKGkpO3QubGVuZ3RoPD0xP3RoaXMuY29tcHV0ZVBvaW50Q3VydmUodFswXSxyKTp0aGlzLmNvbXB1dGVPZmZzZXRDdXJ2ZSh0LG4scik7dmFyIHM9ci5nZXRDb29yZGluYXRlcygpO3JldHVybiBuJiZILnJldmVyc2Uocyksc30sY29tcHV0ZVNpbmdsZVNpZGVkQnVmZmVyQ3VydmU6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuc2ltcGxpZnlUb2xlcmFuY2UodGhpcy5kaXN0YW5jZSk7aWYoZSl7bi5hZGRTZWdtZW50cyh0LCEwKTt2YXIgcj0kaS5zaW1wbGlmeSh0LC1pKSxzPXIubGVuZ3RoLTE7bi5pbml0U2lkZVNlZ21lbnRzKHJbc10scltzLTFdLGNuLkxFRlQpLG4uYWRkRmlyc3RTZWdtZW50KCk7Zm9yKHZhciBvPXMtMjtvPj0wO28tLSluLmFkZE5leHRTZWdtZW50KHJbb10sITApfWVsc2V7bi5hZGRTZWdtZW50cyh0LCExKTt2YXIgYT0kaS5zaW1wbGlmeSh0LGkpLHU9YS5sZW5ndGgtMTtuLmluaXRTaWRlU2VnbWVudHMoYVswXSxhWzFdLGNuLkxFRlQpLG4uYWRkRmlyc3RTZWdtZW50KCk7Zm9yKHZhciBvPTI7bzw9dTtvKyspbi5hZGROZXh0U2VnbWVudChhW29dLCEwKX1uLmFkZExhc3RTZWdtZW50KCksbi5jbG9zZVJpbmcoKX0sY29tcHV0ZVJpbmdCdWZmZXJDdXJ2ZTpmdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5zaW1wbGlmeVRvbGVyYW5jZSh0aGlzLmRpc3RhbmNlKTtlPT09Y24uUklHSFQmJihpPS1pKTt2YXIgcj0kaS5zaW1wbGlmeSh0LGkpLHM9ci5sZW5ndGgtMTtuLmluaXRTaWRlU2VnbWVudHMocltzLTFdLHJbMF0sZSk7Zm9yKHZhciBvPTE7bzw9cztvKyspe3ZhciBhPTEhPT1vO24uYWRkTmV4dFNlZ21lbnQocltvXSxhKX1uLmNsb3NlUmluZygpfSxjb21wdXRlTGluZUJ1ZmZlckN1cnZlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5zaW1wbGlmeVRvbGVyYW5jZSh0aGlzLmRpc3RhbmNlKSxpPSRpLnNpbXBsaWZ5KHQsbikscj1pLmxlbmd0aC0xO2UuaW5pdFNpZGVTZWdtZW50cyhpWzBdLGlbMV0sY24uTEVGVCk7Zm9yKHZhciBzPTI7czw9cjtzKyspZS5hZGROZXh0U2VnbWVudChpW3NdLCEwKTtlLmFkZExhc3RTZWdtZW50KCksZS5hZGRMaW5lRW5kQ2FwKGlbci0xXSxpW3JdKTt2YXIgbz0kaS5zaW1wbGlmeSh0LC1uKSxhPW8ubGVuZ3RoLTE7ZS5pbml0U2lkZVNlZ21lbnRzKG9bYV0sb1thLTFdLGNuLkxFRlQpO2Zvcih2YXIgcz1hLTI7cz49MDtzLS0pZS5hZGROZXh0U2VnbWVudChvW3NdLCEwKTtlLmFkZExhc3RTZWdtZW50KCksZS5hZGRMaW5lRW5kQ2FwKG9bMV0sb1swXSksZS5jbG9zZVJpbmcoKX0sY29tcHV0ZVBvaW50Q3VydmU6ZnVuY3Rpb24odCxlKXtzd2l0Y2godGhpcy5idWZQYXJhbXMuZ2V0RW5kQ2FwU3R5bGUoKSl7Y2FzZSBLaS5DQVBfUk9VTkQ6ZS5jcmVhdGVDaXJjbGUodCk7YnJlYWs7Y2FzZSBLaS5DQVBfU1FVQVJFOmUuY3JlYXRlU3F1YXJlKHQpfX0sZ2V0TGluZUN1cnZlOmZ1bmN0aW9uKHQsZSl7aWYodGhpcy5kaXN0YW5jZT1lLGU8MCYmIXRoaXMuYnVmUGFyYW1zLmlzU2luZ2xlU2lkZWQoKSlyZXR1cm4gbnVsbDtpZigwPT09ZSlyZXR1cm4gbnVsbDt2YXIgbj1NYXRoLmFicyhlKSxpPXRoaXMuZ2V0U2VnR2VuKG4pO2lmKHQubGVuZ3RoPD0xKXRoaXMuY29tcHV0ZVBvaW50Q3VydmUodFswXSxpKTtlbHNlIGlmKHRoaXMuYnVmUGFyYW1zLmlzU2luZ2xlU2lkZWQoKSl7dmFyIHI9ZTwwO3RoaXMuY29tcHV0ZVNpbmdsZVNpZGVkQnVmZmVyQ3VydmUodCxyLGkpfWVsc2UgdGhpcy5jb21wdXRlTGluZUJ1ZmZlckN1cnZlKHQsaSk7dmFyIHM9aS5nZXRDb29yZGluYXRlcygpO3JldHVybiBzfSxnZXRCdWZmZXJQYXJhbWV0ZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnVmUGFyYW1zfSxzaW1wbGlmeVRvbGVyYW5jZTpmdW5jdGlvbih0KXtyZXR1cm4gdCp0aGlzLmJ1ZlBhcmFtcy5nZXRTaW1wbGlmeUZhY3RvcigpfSxnZXRSaW5nQ3VydmU6ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuZGlzdGFuY2U9bix0Lmxlbmd0aDw9MilyZXR1cm4gdGhpcy5nZXRMaW5lQ3VydmUodCxuKTtpZigwPT09bilyZXR1cm4gbnIuY29weUNvb3JkaW5hdGVzKHQpO3ZhciBpPXRoaXMuZ2V0U2VnR2VuKG4pO3JldHVybiB0aGlzLmNvbXB1dGVSaW5nQnVmZmVyQ3VydmUodCxlLGkpLGkuZ2V0Q29vcmRpbmF0ZXMoKX0sY29tcHV0ZU9mZnNldEN1cnZlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10aGlzLnNpbXBsaWZ5VG9sZXJhbmNlKHRoaXMuZGlzdGFuY2UpO2lmKGUpe3ZhciByPSRpLnNpbXBsaWZ5KHQsLWkpLHM9ci5sZW5ndGgtMTtuLmluaXRTaWRlU2VnbWVudHMocltzXSxyW3MtMV0sY24uTEVGVCksbi5hZGRGaXJzdFNlZ21lbnQoKTtmb3IodmFyIG89cy0yO28+PTA7by0tKW4uYWRkTmV4dFNlZ21lbnQocltvXSwhMCl9ZWxzZXt2YXIgYT0kaS5zaW1wbGlmeSh0LGkpLHU9YS5sZW5ndGgtMTtuLmluaXRTaWRlU2VnbWVudHMoYVswXSxhWzFdLGNuLkxFRlQpLG4uYWRkRmlyc3RTZWdtZW50KCk7Zm9yKHZhciBvPTI7bzw9dTtvKyspbi5hZGROZXh0U2VnbWVudChhW29dLCEwKX1uLmFkZExhc3RTZWdtZW50KCl9LGdldFNlZ0dlbjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGVyKHRoaXMucHJlY2lzaW9uTW9kZWwsdGhpcy5idWZQYXJhbXMsdCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIG5yfX0pLG5yLmNvcHlDb29yZGluYXRlcz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KHQubGVuZ3RoKS5maWxsKG51bGwpLG49MDtuPGUubGVuZ3RoO24rKyllW25dPW5ldyBnKHRbbl0pO3JldHVybiBlfSxlKGlyLnByb3RvdHlwZSx7ZmluZFN0YWJiZWRTZWdtZW50czpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9bmV3IEksbj10aGlzLnN1YmdyYXBocy5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCkscj1pLmdldEVudmVsb3BlKCk7dC55PHIuZ2V0TWluWSgpfHx0Lnk+ci5nZXRNYXhZKCl8fHRoaXMuZmluZFN0YWJiZWRTZWdtZW50cyh0LGkuZ2V0RGlyZWN0ZWRFZGdlcygpLGUpfXJldHVybiBlfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKWlmKFIoYXJndW1lbnRzWzJdLHkpJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgSW4pZm9yKHZhciBzPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxhPWFyZ3VtZW50c1syXSx1PW8uZ2V0RWRnZSgpLmdldENvb3JkaW5hdGVzKCksbj0wO248dS5sZW5ndGgtMTtuKyspe3RoaXMuc2VnLnAwPXVbbl0sdGhpcy5zZWcucDE9dVtuKzFdLHRoaXMuc2VnLnAwLnk+dGhpcy5zZWcucDEueSYmdGhpcy5zZWcucmV2ZXJzZSgpO3ZhciBsPU1hdGgubWF4KHRoaXMuc2VnLnAwLngsdGhpcy5zZWcucDEueCk7aWYoIShsPHMueHx8dGhpcy5zZWcuaXNIb3Jpem9udGFsKCl8fHMueTx0aGlzLnNlZy5wMC55fHxzLnk+dGhpcy5zZWcucDEueXx8aGUuY29tcHV0ZU9yaWVudGF0aW9uKHRoaXMuc2VnLnAwLHRoaXMuc2VnLnAxLHMpPT09aGUuUklHSFQpKXt2YXIgaD1vLmdldERlcHRoKGNuLkxFRlQpO3RoaXMuc2VnLnAwLmVxdWFscyh1W25dKXx8KGg9by5nZXREZXB0aChjbi5SSUdIVCkpO3ZhciBjPW5ldyBycih0aGlzLnNlZyxoKTthLmFkZChjKX19ZWxzZSBpZihSKGFyZ3VtZW50c1syXSx5KSYmYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnJiZSKGFyZ3VtZW50c1sxXSx5KSlmb3IodmFyIGY9YXJndW1lbnRzWzBdLGQ9YXJndW1lbnRzWzFdLHA9YXJndW1lbnRzWzJdLG49ZC5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIHY9bi5uZXh0KCk7di5pc0ZvcndhcmQoKSYmdGhpcy5maW5kU3RhYmJlZFNlZ21lbnRzKGYsdixwKX19LGdldERlcHRoOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZmluZFN0YWJiZWRTZWdtZW50cyh0KTtpZigwPT09ZS5zaXplKCkpcmV0dXJuIDA7dmFyIG49aG8ubWluKGUpO3JldHVybiBuLmxlZnREZXB0aH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaXJ9fSksZShyci5wcm90b3R5cGUse2NvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10O2lmKHRoaXMudXB3YXJkU2VnLm1pblgoKT49ZS51cHdhcmRTZWcubWF4WCgpKXJldHVybiAxO2lmKHRoaXMudXB3YXJkU2VnLm1heFgoKTw9ZS51cHdhcmRTZWcubWluWCgpKXJldHVybi0xO3ZhciBuPXRoaXMudXB3YXJkU2VnLm9yaWVudGF0aW9uSW5kZXgoZS51cHdhcmRTZWcpO3JldHVybiAwIT09bj9uOihuPS0xKmUudXB3YXJkU2VnLm9yaWVudGF0aW9uSW5kZXgodGhpcy51cHdhcmRTZWcpLDAhPT1uP246dGhpcy51cHdhcmRTZWcuY29tcGFyZVRvKGUudXB3YXJkU2VnKSl9LGNvbXBhcmVYOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5wMC5jb21wYXJlVG8oZS5wMCk7cmV0dXJuIDAhPT1uP246dC5wMS5jb21wYXJlVG8oZS5wMSl9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudXB3YXJkU2VnLnRvU3RyaW5nKCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW3NdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBycn19KSxpci5EZXB0aFNlZ21lbnQ9cnIsZShzci5wcm90b3R5cGUse2FkZFBvaW50OmZ1bmN0aW9uKHQpe2lmKHRoaXMuZGlzdGFuY2U8PTApcmV0dXJuIG51bGw7dmFyIGU9dC5nZXRDb29yZGluYXRlcygpLG49dGhpcy5jdXJ2ZUJ1aWxkZXIuZ2V0TGluZUN1cnZlKGUsdGhpcy5kaXN0YW5jZSk7dGhpcy5hZGRDdXJ2ZShuLEwuRVhURVJJT1IsTC5JTlRFUklPUil9LGFkZFBvbHlnb246ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5kaXN0YW5jZSxuPWNuLkxFRlQ7dGhpcy5kaXN0YW5jZTwwJiYoZT0tdGhpcy5kaXN0YW5jZSxuPWNuLlJJR0hUKTt2YXIgaT10LmdldEV4dGVyaW9yUmluZygpLHI9SC5yZW1vdmVSZXBlYXRlZFBvaW50cyhpLmdldENvb3JkaW5hdGVzKCkpO2lmKHRoaXMuZGlzdGFuY2U8MCYmdGhpcy5pc0Vyb2RlZENvbXBsZXRlbHkoaSx0aGlzLmRpc3RhbmNlKSlyZXR1cm4gbnVsbDtpZih0aGlzLmRpc3RhbmNlPD0wJiZyLmxlbmd0aDwzKXJldHVybiBudWxsO3RoaXMuYWRkUG9seWdvblJpbmcocixlLG4sTC5FWFRFUklPUixMLklOVEVSSU9SKTtmb3IodmFyIHM9MDtzPHQuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7cysrKXt2YXIgbz10LmdldEludGVyaW9yUmluZ04ocyksYT1ILnJlbW92ZVJlcGVhdGVkUG9pbnRzKG8uZ2V0Q29vcmRpbmF0ZXMoKSk7dGhpcy5kaXN0YW5jZT4wJiZ0aGlzLmlzRXJvZGVkQ29tcGxldGVseShvLC10aGlzLmRpc3RhbmNlKXx8dGhpcy5hZGRQb2x5Z29uUmluZyhhLGUsY24ub3Bwb3NpdGUobiksTC5JTlRFUklPUixMLkVYVEVSSU9SKX19LGlzVHJpYW5nbGVFcm9kZWRDb21wbGV0ZWx5OmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IFNpKHRbMF0sdFsxXSx0WzJdKSxpPW4uaW5DZW50cmUoKSxyPWhlLmRpc3RhbmNlUG9pbnRMaW5lKGksbi5wMCxuLnAxKTtyZXR1cm4gcjxNYXRoLmFicyhlKX0sYWRkTGluZVN0cmluZzpmdW5jdGlvbih0KXtpZih0aGlzLmRpc3RhbmNlPD0wJiYhdGhpcy5jdXJ2ZUJ1aWxkZXIuZ2V0QnVmZmVyUGFyYW1ldGVycygpLmlzU2luZ2xlU2lkZWQoKSlyZXR1cm4gbnVsbDt2YXIgZT1ILnJlbW92ZVJlcGVhdGVkUG9pbnRzKHQuZ2V0Q29vcmRpbmF0ZXMoKSksbj10aGlzLmN1cnZlQnVpbGRlci5nZXRMaW5lQ3VydmUoZSx0aGlzLmRpc3RhbmNlKTt0aGlzLmFkZEN1cnZlKG4sTC5FWFRFUklPUixMLklOVEVSSU9SKX0sYWRkQ3VydmU6ZnVuY3Rpb24odCxlLG4pe2lmKG51bGw9PT10fHx0Lmxlbmd0aDwyKXJldHVybiBudWxsO3ZhciBpPW5ldyBLZSh0LG5ldyBnbigwLEwuQk9VTkRBUlksZSxuKSk7dGhpcy5jdXJ2ZUxpc3QuYWRkKGkpfSxnZXRDdXJ2ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hZGQodGhpcy5pbnB1dEdlb20pLHRoaXMuY3VydmVMaXN0fSxhZGRQb2x5Z29uUmluZzpmdW5jdGlvbih0LGUsbixpLHIpe2lmKDA9PT1lJiZ0Lmxlbmd0aDxidC5NSU5JTVVNX1ZBTElEX1NJWkUpcmV0dXJuIG51bGw7dmFyIHM9aSxvPXI7dC5sZW5ndGg+PWJ0Lk1JTklNVU1fVkFMSURfU0laRSYmaGUuaXNDQ1codCkmJihzPXIsbz1pLG49Y24ub3Bwb3NpdGUobikpO3ZhciBhPXRoaXMuY3VydmVCdWlsZGVyLmdldFJpbmdDdXJ2ZSh0LG4sZSk7dGhpcy5hZGRDdXJ2ZShhLHMsbyl9LGFkZDpmdW5jdGlvbih0KXtpZih0LmlzRW1wdHkoKSlyZXR1cm4gbnVsbDtpZih0IGluc3RhbmNlb2YgVHQpdGhpcy5hZGRQb2x5Z29uKHQpO2Vsc2UgaWYodCBpbnN0YW5jZW9mIFN0KXRoaXMuYWRkTGluZVN0cmluZyh0KTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBMdCl0aGlzLmFkZFBvaW50KHQpO2Vsc2UgaWYodCBpbnN0YW5jZW9mIFB0KXRoaXMuYWRkQ29sbGVjdGlvbih0KTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBndCl0aGlzLmFkZENvbGxlY3Rpb24odCk7ZWxzZSBpZih0IGluc3RhbmNlb2YgT3QpdGhpcy5hZGRDb2xsZWN0aW9uKHQpO2Vsc2V7aWYoISh0IGluc3RhbmNlb2YgZnQpKXRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbih0LmdldENsYXNzKCkuZ2V0TmFtZSgpKTt0aGlzLmFkZENvbGxlY3Rpb24odCl9fSxpc0Vyb2RlZENvbXBsZXRlbHk6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldENvb3JkaW5hdGVzKCk7aWYobi5sZW5ndGg8NClyZXR1cm4gZTwwO2lmKDQ9PT1uLmxlbmd0aClyZXR1cm4gdGhpcy5pc1RyaWFuZ2xlRXJvZGVkQ29tcGxldGVseShuLGUpO3ZhciBpPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLHI9TWF0aC5taW4oaS5nZXRIZWlnaHQoKSxpLmdldFdpZHRoKCkpO3JldHVybiBlPDAmJjIqTWF0aC5hYnMoZSk+cn0sYWRkQ29sbGVjdGlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQuZ2V0TnVtR2VvbWV0cmllcygpO2UrKyl7dmFyIG49dC5nZXRHZW9tZXRyeU4oZSk7dGhpcy5hZGQobil9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBzcn19KSxlKG9yLnByb3RvdHlwZSx7aXNUcml2aWFsSW50ZXJzZWN0aW9uOmZ1bmN0aW9uKHQsZSxuLGkpe2lmKHQ9PT1uJiYxPT09dGhpcy5saS5nZXRJbnRlcnNlY3Rpb25OdW0oKSl7aWYob3IuaXNBZGphY2VudFNlZ21lbnRzKGUsaSkpcmV0dXJuITA7aWYodC5pc0Nsb3NlZCgpKXt2YXIgcj10LnNpemUoKS0xO2lmKDA9PT1lJiZpPT09cnx8MD09PWkmJmU9PT1yKXJldHVybiEwfX1yZXR1cm4hMX0sZ2V0UHJvcGVySW50ZXJzZWN0aW9uUG9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wZXJJbnRlcnNlY3Rpb25Qb2ludH0saGFzUHJvcGVySW50ZXJpb3JJbnRlcnNlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNQcm9wZXJJbnRlcmlvcn0sZ2V0TGluZUludGVyc2VjdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGl9LGhhc1Byb3BlckludGVyc2VjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc1Byb3Blcn0scHJvY2Vzc0ludGVyc2VjdGlvbnM6ZnVuY3Rpb24odCxlLG4saSl7aWYodD09PW4mJmU9PT1pKXJldHVybiBudWxsO3RoaXMubnVtVGVzdHMrKzt2YXIgcj10LmdldENvb3JkaW5hdGVzKClbZV0scz10LmdldENvb3JkaW5hdGVzKClbZSsxXSxvPW4uZ2V0Q29vcmRpbmF0ZXMoKVtpXSxhPW4uZ2V0Q29vcmRpbmF0ZXMoKVtpKzFdO3RoaXMubGkuY29tcHV0ZUludGVyc2VjdGlvbihyLHMsbyxhKSx0aGlzLmxpLmhhc0ludGVyc2VjdGlvbigpJiYodGhpcy5udW1JbnRlcnNlY3Rpb25zKyssdGhpcy5saS5pc0ludGVyaW9ySW50ZXJzZWN0aW9uKCkmJih0aGlzLm51bUludGVyaW9ySW50ZXJzZWN0aW9ucysrLHRoaXMuaGFzSW50ZXJpb3I9ITApLHRoaXMuaXNUcml2aWFsSW50ZXJzZWN0aW9uKHQsZSxuLGkpfHwodGhpcy5faGFzSW50ZXJzZWN0aW9uPSEwLHQuYWRkSW50ZXJzZWN0aW9ucyh0aGlzLmxpLGUsMCksbi5hZGRJbnRlcnNlY3Rpb25zKHRoaXMubGksaSwxKSx0aGlzLmxpLmlzUHJvcGVyKCkmJih0aGlzLm51bVByb3BlckludGVyc2VjdGlvbnMrKyx0aGlzLmhhc1Byb3Blcj0hMCx0aGlzLmhhc1Byb3BlckludGVyaW9yPSEwKSkpfSxoYXNJbnRlcnNlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faGFzSW50ZXJzZWN0aW9ufSxpc0RvbmU6ZnVuY3Rpb24oKXtyZXR1cm4hMX0saGFzSW50ZXJpb3JJbnRlcnNlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNJbnRlcmlvcn0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bb25dfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBvcn19KSxvci5pc0FkamFjZW50U2VnbWVudHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gMT09PU1hdGguYWJzKHQtZSl9LGUoYXIucHJvdG90eXBlLHtzZXRXb3JraW5nUHJlY2lzaW9uTW9kZWw6ZnVuY3Rpb24odCl7dGhpcy53b3JraW5nUHJlY2lzaW9uTW9kZWw9dH0saW5zZXJ0VW5pcXVlRWRnZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmVkZ2VMaXN0LmZpbmRFcXVhbEVkZ2UodCk7aWYobnVsbCE9PWUpe3ZhciBuPWUuZ2V0TGFiZWwoKSxpPXQuZ2V0TGFiZWwoKTtlLmlzUG9pbnR3aXNlRXF1YWwodCl8fChpPW5ldyBnbih0LmdldExhYmVsKCkpLGkuZmxpcCgpKSxuLm1lcmdlKGkpO3ZhciByPWFyLmRlcHRoRGVsdGEoaSkscz1lLmdldERlcHRoRGVsdGEoKSxvPXMrcjtlLnNldERlcHRoRGVsdGEobyl9ZWxzZSB0aGlzLmVkZ2VMaXN0LmFkZCh0KSx0LnNldERlcHRoRGVsdGEoYXIuZGVwdGhEZWx0YSh0LmdldExhYmVsKCkpKX0sYnVpbGRTdWJncmFwaHM6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEksaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKSxzPXIuZ2V0UmlnaHRtb3N0Q29vcmRpbmF0ZSgpLG89bmV3IGlyKG4pLGE9by5nZXREZXB0aChzKTtyLmNvbXB1dGVEZXB0aChhKSxyLmZpbmRSZXN1bHRFZGdlcygpLG4uYWRkKHIpLGUuYWRkKHIuZ2V0RGlyZWN0ZWRFZGdlcygpLHIuZ2V0Tm9kZXMoKSl9fSxjcmVhdGVTdWJncmFwaHM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBJLG49dC5nZXROb2RlcygpLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZighaS5pc1Zpc2l0ZWQoKSl7dmFyIHI9bmV3IEppO3IuY3JlYXRlKGkpLGUuYWRkKHIpfX1yZXR1cm4gaG8uc29ydChlLGhvLnJldmVyc2VPcmRlcigpKSxlfSxjcmVhdGVFbXB0eVJlc3VsdEdlb21ldHJ5OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZW9tRmFjdC5jcmVhdGVQb2x5Z29uKCk7cmV0dXJuIHR9LGdldE5vZGVyOmZ1bmN0aW9uKHQpe2lmKG51bGwhPT10aGlzLndvcmtpbmdOb2RlcilyZXR1cm4gdGhpcy53b3JraW5nTm9kZXI7dmFyIGU9bmV3IG5uLG49bmV3IGFlO3JldHVybiBuLnNldFByZWNpc2lvbk1vZGVsKHQpLGUuc2V0U2VnbWVudEludGVyc2VjdG9yKG5ldyBvcihuKSksZX0sYnVmZmVyOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy53b3JraW5nUHJlY2lzaW9uTW9kZWw7bnVsbD09PW4mJihuPXQuZ2V0UHJlY2lzaW9uTW9kZWwoKSksdGhpcy5nZW9tRmFjdD10LmdldEZhY3RvcnkoKTt2YXIgaT1uZXcgbnIobix0aGlzLmJ1ZlBhcmFtcykscj1uZXcgc3IodCxlLGkpLHM9ci5nZXRDdXJ2ZXMoKTtpZihzLnNpemUoKTw9MClyZXR1cm4gdGhpcy5jcmVhdGVFbXB0eVJlc3VsdEdlb21ldHJ5KCk7dGhpcy5jb21wdXRlTm9kZWRFZGdlcyhzLG4pLHRoaXMuZ3JhcGg9bmV3IENuKG5ldyBPbiksdGhpcy5ncmFwaC5hZGRFZGdlcyh0aGlzLmVkZ2VMaXN0LmdldEVkZ2VzKCkpO3ZhciBvPXRoaXMuY3JlYXRlU3ViZ3JhcGhzKHRoaXMuZ3JhcGgpLGE9bmV3IFNuKHRoaXMuZ2VvbUZhY3QpO3RoaXMuYnVpbGRTdWJncmFwaHMobyxhKTt2YXIgdT1hLmdldFBvbHlnb25zKCk7aWYodS5zaXplKCk8PTApcmV0dXJuIHRoaXMuY3JlYXRlRW1wdHlSZXN1bHRHZW9tZXRyeSgpO3ZhciBsPXRoaXMuZ2VvbUZhY3QuYnVpbGRHZW9tZXRyeSh1KTtyZXR1cm4gbH0sY29tcHV0ZU5vZGVkRWRnZXM6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldE5vZGVyKGUpO24uY29tcHV0ZU5vZGVzKHQpO2Zvcih2YXIgaT1uLmdldE5vZGVkU3Vic3RyaW5ncygpLHI9aS5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7dmFyIHM9ci5uZXh0KCksbz1zLmdldENvb3JkaW5hdGVzKCk7aWYoMiE9PW8ubGVuZ3RofHwhb1swXS5lcXVhbHMyRChvWzFdKSl7dmFyIGE9cy5nZXREYXRhKCksdT1uZXcgSm4ocy5nZXRDb29yZGluYXRlcygpLG5ldyBnbihhKSk7dGhpcy5pbnNlcnRVbmlxdWVFZGdlKHUpfX19LHNldE5vZGVyOmZ1bmN0aW9uKHQpe3RoaXMud29ya2luZ05vZGVyPXR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGFyfX0pLGFyLmRlcHRoRGVsdGE9ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRMb2NhdGlvbigwLGNuLkxFRlQpLG49dC5nZXRMb2NhdGlvbigwLGNuLlJJR0hUKTtyZXR1cm4gZT09PUwuSU5URVJJT1ImJm49PT1MLkVYVEVSSU9SPzE6ZT09PUwuRVhURVJJT1ImJm49PT1MLklOVEVSSU9SPy0xOjB9LGFyLmNvbnZlcnRTZWdTdHJpbmdzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgaWUsbj1uZXcgSTt0Lmhhc05leHQoKTspe3ZhciBpPXQubmV4dCgpLHI9ZS5jcmVhdGVMaW5lU3RyaW5nKGkuZ2V0Q29vcmRpbmF0ZXMoKSk7bi5hZGQocil9cmV0dXJuIGUuYnVpbGRHZW9tZXRyeShuKX0sZSh1ci5wcm90b3R5cGUse2NoZWNrRW5kUHRWZXJ0ZXhJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciB0PXRoaXMuc2VnU3RyaW5ncy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCksbj1lLmdldENvb3JkaW5hdGVzKCk7dGhpcy5jaGVja0VuZFB0VmVydGV4SW50ZXJzZWN0aW9ucyhuWzBdLHRoaXMuc2VnU3RyaW5ncyksdGhpcy5jaGVja0VuZFB0VmVydGV4SW50ZXJzZWN0aW9ucyhuW24ubGVuZ3RoLTFdLHRoaXMuc2VnU3RyaW5ncyl9ZWxzZSBpZigyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIGk9YXJndW1lbnRzWzBdLHI9YXJndW1lbnRzWzFdLHQ9ci5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOylmb3IodmFyIGU9dC5uZXh0KCksbj1lLmdldENvb3JkaW5hdGVzKCkscz0xO3M8bi5sZW5ndGgtMTtzKyspaWYobltzXS5lcXVhbHMoaSkpdGhyb3cgbmV3IGwoXCJmb3VuZCBlbmRwdC9pbnRlcmlvciBwdCBpbnRlcnNlY3Rpb24gYXQgaW5kZXggXCIrcytcIiA6cHQgXCIraSl9LGNoZWNrSW50ZXJpb3JJbnRlcnNlY3Rpb25zOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciB0PXRoaXMuc2VnU3RyaW5ncy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOylmb3IodmFyIGU9dC5uZXh0KCksbj10aGlzLnNlZ1N0cmluZ3MuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO3RoaXMuY2hlY2tJbnRlcmlvckludGVyc2VjdGlvbnMoZSxpKX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1yLmdldENvb3JkaW5hdGVzKCksYT1zLmdldENvb3JkaW5hdGVzKCksdT0wO3U8by5sZW5ndGgtMTt1KyspZm9yKHZhciBoPTA7aDxhLmxlbmd0aC0xO2grKyl0aGlzLmNoZWNrSW50ZXJpb3JJbnRlcnNlY3Rpb25zKHIsdSxzLGgpO2Vsc2UgaWYoND09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBjPWFyZ3VtZW50c1swXSxmPWFyZ3VtZW50c1sxXSxnPWFyZ3VtZW50c1syXSxkPWFyZ3VtZW50c1szXTtpZihjPT09ZyYmZj09PWQpcmV0dXJuIG51bGw7dmFyIHA9Yy5nZXRDb29yZGluYXRlcygpW2ZdLHY9Yy5nZXRDb29yZGluYXRlcygpW2YrMV0sbT1nLmdldENvb3JkaW5hdGVzKClbZF0seT1nLmdldENvb3JkaW5hdGVzKClbZCsxXTtpZih0aGlzLmxpLmNvbXB1dGVJbnRlcnNlY3Rpb24ocCx2LG0seSksdGhpcy5saS5oYXNJbnRlcnNlY3Rpb24oKSYmKHRoaXMubGkuaXNQcm9wZXIoKXx8dGhpcy5oYXNJbnRlcmlvckludGVyc2VjdGlvbih0aGlzLmxpLHAsdil8fHRoaXMuaGFzSW50ZXJpb3JJbnRlcnNlY3Rpb24odGhpcy5saSxtLHkpKSl0aHJvdyBuZXcgbChcImZvdW5kIG5vbi1ub2RlZCBpbnRlcnNlY3Rpb24gYXQgXCIrcCtcIi1cIit2K1wiIGFuZCBcIittK1wiLVwiK3kpfX0sY2hlY2tWYWxpZDpmdW5jdGlvbigpe3RoaXMuY2hlY2tFbmRQdFZlcnRleEludGVyc2VjdGlvbnMoKSx0aGlzLmNoZWNrSW50ZXJpb3JJbnRlcnNlY3Rpb25zKCksdGhpcy5jaGVja0NvbGxhcHNlcygpfSxjaGVja0NvbGxhcHNlczpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgdD10aGlzLnNlZ1N0cmluZ3MuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpO3RoaXMuY2hlY2tDb2xsYXBzZXMoZSl9ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIG49YXJndW1lbnRzWzBdLGk9bi5nZXRDb29yZGluYXRlcygpLHQ9MDt0PGkubGVuZ3RoLTI7dCsrKXRoaXMuY2hlY2tDb2xsYXBzZShpW3RdLGlbdCsxXSxpW3QrMl0pfSxoYXNJbnRlcmlvckludGVyc2VjdGlvbjpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPTA7aTx0LmdldEludGVyc2VjdGlvbk51bSgpO2krKyl7dmFyIHI9dC5nZXRJbnRlcnNlY3Rpb24oaSk7aWYoIXIuZXF1YWxzKGUpJiYhci5lcXVhbHMobikpcmV0dXJuITB9cmV0dXJuITF9LGNoZWNrQ29sbGFwc2U6ZnVuY3Rpb24odCxlLG4pe2lmKHQuZXF1YWxzKG4pKXRocm93IG5ldyBsKFwiZm91bmQgbm9uLW5vZGVkIGNvbGxhcHNlIGF0IFwiK3VyLmZhY3QuY3JlYXRlTGluZVN0cmluZyhbdCxlLG5dKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHVyfX0pLHVyLmZhY3Q9bmV3IGllLGUobHIucHJvdG90eXBlLHtpbnRlcnNlY3RzU2NhbGVkOmZ1bmN0aW9uKHQsZSl7dmFyIG49TWF0aC5taW4odC54LGUueCksaT1NYXRoLm1heCh0LngsZS54KSxyPU1hdGgubWluKHQueSxlLnkpLHM9TWF0aC5tYXgodC55LGUueSksbz10aGlzLm1heHg8bnx8dGhpcy5taW54Pml8fHRoaXMubWF4eTxyfHx0aGlzLm1pbnk+cztpZihvKXJldHVybiExO3ZhciBhPXRoaXMuaW50ZXJzZWN0c1RvbGVyYW5jZVNxdWFyZSh0LGUpO3JldHVybiBmLmlzVHJ1ZSghKG8mJmEpLFwiRm91bmQgYmFkIGVudmVsb3BlIHRlc3RcIiksYX0saW5pdENvcm5lcnM6ZnVuY3Rpb24odCl7dmFyIGU9LjU7dGhpcy5taW54PXQueC1lLHRoaXMubWF4eD10LngrZSx0aGlzLm1pbnk9dC55LWUsdGhpcy5tYXh5PXQueStlLHRoaXMuY29ybmVyWzBdPW5ldyBnKHRoaXMubWF4eCx0aGlzLm1heHkpLHRoaXMuY29ybmVyWzFdPW5ldyBnKHRoaXMubWlueCx0aGlzLm1heHkpLHRoaXMuY29ybmVyWzJdPW5ldyBnKHRoaXMubWlueCx0aGlzLm1pbnkpLHRoaXMuY29ybmVyWzNdPW5ldyBnKHRoaXMubWF4eCx0aGlzLm1pbnkpfSxpbnRlcnNlY3RzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDE9PT10aGlzLnNjYWxlRmFjdG9yP3RoaXMuaW50ZXJzZWN0c1NjYWxlZCh0LGUpOih0aGlzLmNvcHlTY2FsZWQodCx0aGlzLnAwU2NhbGVkKSx0aGlzLmNvcHlTY2FsZWQoZSx0aGlzLnAxU2NhbGVkKSx0aGlzLmludGVyc2VjdHNTY2FsZWQodGhpcy5wMFNjYWxlZCx0aGlzLnAxU2NhbGVkKSl9LHNjYWxlOmZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnJvdW5kKHQqdGhpcy5zY2FsZUZhY3Rvcil9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcmlnaW5hbFB0fSxjb3B5U2NhbGVkOmZ1bmN0aW9uKHQsZSl7ZS54PXRoaXMuc2NhbGUodC54KSxlLnk9dGhpcy5zY2FsZSh0LnkpfSxnZXRTYWZlRW52ZWxvcGU6ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5zYWZlRW52KXt2YXIgdD1sci5TQUZFX0VOVl9FWFBBTlNJT05fRkFDVE9SL3RoaXMuc2NhbGVGYWN0b3I7dGhpcy5zYWZlRW52PW5ldyBDKHRoaXMub3JpZ2luYWxQdC54LXQsdGhpcy5vcmlnaW5hbFB0LngrdCx0aGlzLm9yaWdpbmFsUHQueS10LHRoaXMub3JpZ2luYWxQdC55K3QpfXJldHVybiB0aGlzLnNhZmVFbnZ9LGludGVyc2VjdHNQaXhlbENsb3N1cmU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLmNvcm5lclswXSx0aGlzLmNvcm5lclsxXSksISF0aGlzLmxpLmhhc0ludGVyc2VjdGlvbigpfHwodGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLmNvcm5lclsxXSx0aGlzLmNvcm5lclsyXSksISF0aGlzLmxpLmhhc0ludGVyc2VjdGlvbigpfHwodGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLmNvcm5lclsyXSx0aGlzLmNvcm5lclszXSksISF0aGlzLmxpLmhhc0ludGVyc2VjdGlvbigpfHwodGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLmNvcm5lclszXSx0aGlzLmNvcm5lclswXSksISF0aGlzLmxpLmhhc0ludGVyc2VjdGlvbigpKSkpfSxpbnRlcnNlY3RzVG9sZXJhbmNlU3F1YXJlOmZ1bmN0aW9uKHQsZSl7dmFyIG49ITEsaT0hMTtyZXR1cm4gdGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQsZSx0aGlzLmNvcm5lclswXSx0aGlzLmNvcm5lclsxXSksISF0aGlzLmxpLmlzUHJvcGVyKCl8fCh0aGlzLmxpLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxlLHRoaXMuY29ybmVyWzFdLHRoaXMuY29ybmVyWzJdKSwhIXRoaXMubGkuaXNQcm9wZXIoKXx8KHRoaXMubGkuaGFzSW50ZXJzZWN0aW9uKCkmJihuPSEwKSx0aGlzLmxpLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxlLHRoaXMuY29ybmVyWzJdLHRoaXMuY29ybmVyWzNdKSwhIXRoaXMubGkuaXNQcm9wZXIoKXx8KHRoaXMubGkuaGFzSW50ZXJzZWN0aW9uKCkmJihpPSEwKSx0aGlzLmxpLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxlLHRoaXMuY29ybmVyWzNdLHRoaXMuY29ybmVyWzBdKSwhIXRoaXMubGkuaXNQcm9wZXIoKXx8KCEoIW58fCFpKXx8KCEhdC5lcXVhbHModGhpcy5wdCl8fCEhZS5lcXVhbHModGhpcy5wdCkpKSkpKX0sYWRkU25hcHBlZE5vZGU6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldENvb3JkaW5hdGUoZSksaT10LmdldENvb3JkaW5hdGUoZSsxKTtyZXR1cm4hIXRoaXMuaW50ZXJzZWN0cyhuLGkpJiYodC5hZGRJbnRlcnNlY3Rpb24odGhpcy5nZXRDb29yZGluYXRlKCksZSksITApfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBscn19KSxsci5TQUZFX0VOVl9FWFBBTlNJT05fRkFDVE9SPS43NSxlKGhyLnByb3RvdHlwZSx7c25hcDpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc25hcCh0LG51bGwsLTEpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1hcmd1bWVudHNbMl0scj1lLmdldFNhZmVFbnZlbG9wZSgpLHM9bmV3IGNyKGUsbixpKTtyZXR1cm4gdGhpcy5pbmRleC5xdWVyeShyLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltBZV19LHZpc2l0SXRlbTpmdW5jdGlvbih0KXt2YXIgZT10O2Uuc2VsZWN0KHIscyl9fSkscy5pc05vZGVBZGRlZCgpfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaHJ9fSksaChjcixoaSksZShjci5wcm90b3R5cGUse2lzTm9kZUFkZGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzTm9kZUFkZGVkfSxzZWxlY3Q6ZnVuY3Rpb24oKXtpZigyIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gaGkucHJvdG90eXBlLnNlbGVjdC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49dC5nZXRDb250ZXh0KCk7cmV0dXJuIG51bGwhPT10aGlzLnBhcmVudEVkZ2UmJm49PT10aGlzLnBhcmVudEVkZ2UmJmU9PT10aGlzLmhvdFBpeGVsVmVydGV4SW5kZXg/bnVsbDp2b2lkKHRoaXMuX2lzTm9kZUFkZGVkPXRoaXMuaG90UGl4ZWwuYWRkU25hcHBlZE5vZGUobixlKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGNyfX0pLGhyLkhvdFBpeGVsU25hcEFjdGlvbj1jcixlKGZyLnByb3RvdHlwZSx7cHJvY2Vzc0ludGVyc2VjdGlvbnM6ZnVuY3Rpb24odCxlLG4saSl7aWYodD09PW4mJmU9PT1pKXJldHVybiBudWxsO3ZhciByPXQuZ2V0Q29vcmRpbmF0ZXMoKVtlXSxzPXQuZ2V0Q29vcmRpbmF0ZXMoKVtlKzFdLG89bi5nZXRDb29yZGluYXRlcygpW2ldLGE9bi5nZXRDb29yZGluYXRlcygpW2krMV07aWYodGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHIscyxvLGEpLHRoaXMubGkuaGFzSW50ZXJzZWN0aW9uKCkmJnRoaXMubGkuaXNJbnRlcmlvckludGVyc2VjdGlvbigpKXtmb3IodmFyIHU9MDt1PHRoaXMubGkuZ2V0SW50ZXJzZWN0aW9uTnVtKCk7dSsrKXRoaXMuaW50ZXJpb3JJbnRlcnNlY3Rpb25zLmFkZCh0aGlzLmxpLmdldEludGVyc2VjdGlvbih1KSk7dC5hZGRJbnRlcnNlY3Rpb25zKHRoaXMubGksZSwwKSxuLmFkZEludGVyc2VjdGlvbnModGhpcy5saSxpLDEpfX0saXNEb25lOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGdldEludGVyaW9ySW50ZXJzZWN0aW9uczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmludGVyaW9ySW50ZXJzZWN0aW9uc30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bb25dfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBmcn19KSxlKGdyLnByb3RvdHlwZSx7Y2hlY2tDb3JyZWN0bmVzczpmdW5jdGlvbih0KXt2YXIgZT1LZS5nZXROb2RlZFN1YnN0cmluZ3ModCksbj1uZXcgdXIoZSk7dHJ5e24uY2hlY2tWYWxpZCgpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIFMpKXRocm93IHQ7dC5wcmludFN0YWNrVHJhY2UoKX1maW5hbGx5e319LGdldE5vZGVkU3Vic3RyaW5nczpmdW5jdGlvbigpe3JldHVybiBLZS5nZXROb2RlZFN1YnN0cmluZ3ModGhpcy5ub2RlZFNlZ1N0cmluZ3MpfSxzbmFwUm91bmQ6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmZpbmRJbnRlcmlvckludGVyc2VjdGlvbnModCxlKTt0aGlzLmNvbXB1dGVJbnRlcnNlY3Rpb25TbmFwcyhuKSx0aGlzLmNvbXB1dGVWZXJ0ZXhTbmFwcyh0KX0sZmluZEludGVyaW9ySW50ZXJzZWN0aW9uczpmdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBmcihlKTtyZXR1cm4gdGhpcy5ub2Rlci5zZXRTZWdtZW50SW50ZXJzZWN0b3IobiksdGhpcy5ub2Rlci5jb21wdXRlTm9kZXModCksbi5nZXRJbnRlcmlvckludGVyc2VjdGlvbnMoKX0sY29tcHV0ZVZlcnRleFNuYXBzOmZ1bmN0aW9uKCl7aWYoUihhcmd1bWVudHNbMF0sdikpZm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3RoaXMuY29tcHV0ZVZlcnRleFNuYXBzKG4pfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBLZSlmb3IodmFyIGk9YXJndW1lbnRzWzBdLHI9aS5nZXRDb29yZGluYXRlcygpLHM9MDtzPHIubGVuZ3RoO3MrKyl7dmFyIG89bmV3IGxyKHJbc10sdGhpcy5zY2FsZUZhY3Rvcix0aGlzLmxpKSxhPXRoaXMucG9pbnRTbmFwcGVyLnNuYXAobyxpLHMpO2EmJmkuYWRkSW50ZXJzZWN0aW9uKHJbc10scyl9fSxjb21wdXRlTm9kZXM6ZnVuY3Rpb24odCl7dGhpcy5ub2RlZFNlZ1N0cmluZ3M9dCx0aGlzLm5vZGVyPW5ldyBubix0aGlzLnBvaW50U25hcHBlcj1uZXcgaHIodGhpcy5ub2Rlci5nZXRJbmRleCgpKSx0aGlzLnNuYXBSb3VuZCh0LHRoaXMubGkpfSxjb21wdXRlSW50ZXJzZWN0aW9uU25hcHM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLGk9bmV3IGxyKG4sdGhpcy5zY2FsZUZhY3Rvcix0aGlzLmxpKTt0aGlzLnBvaW50U25hcHBlci5zbmFwKGkpfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bdG5dfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBncn19KSxlKGRyLnByb3RvdHlwZSx7YnVmZmVyRml4ZWRQcmVjaXNpb246ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEhpKG5ldyBncihuZXcgZWUoMSkpLHQuZ2V0U2NhbGUoKSksbj1uZXcgYXIodGhpcy5idWZQYXJhbXMpO24uc2V0V29ya2luZ1ByZWNpc2lvbk1vZGVsKHQpLG4uc2V0Tm9kZXIoZSksdGhpcy5yZXN1bHRHZW9tZXRyeT1uLmJ1ZmZlcih0aGlzLmFyZ0dlb20sdGhpcy5kaXN0YW5jZSl9LGJ1ZmZlclJlZHVjZWRQcmVjaXNpb246ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciB0PWRyLk1BWF9QUkVDSVNJT05fRElHSVRTO3Q+PTA7dC0tKXt0cnl7dGhpcy5idWZmZXJSZWR1Y2VkUHJlY2lzaW9uKHQpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIHNuKSl0aHJvdyB0O3RoaXMuc2F2ZUV4Y2VwdGlvbj10fWZpbmFsbHl7fWlmKG51bGwhPT10aGlzLnJlc3VsdEdlb21ldHJ5KXJldHVybiBudWxsfXRocm93IHRoaXMuc2F2ZUV4Y2VwdGlvbn1pZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49ZHIucHJlY2lzaW9uU2NhbGVGYWN0b3IodGhpcy5hcmdHZW9tLHRoaXMuZGlzdGFuY2UsZSksaT1uZXcgZWUobik7dGhpcy5idWZmZXJGaXhlZFByZWNpc2lvbihpKX19LGNvbXB1dGVHZW9tZXRyeTpmdW5jdGlvbigpe2lmKHRoaXMuYnVmZmVyT3JpZ2luYWxQcmVjaXNpb24oKSxudWxsIT09dGhpcy5yZXN1bHRHZW9tZXRyeSlyZXR1cm4gbnVsbDt2YXIgdD10aGlzLmFyZ0dlb20uZ2V0RmFjdG9yeSgpLmdldFByZWNpc2lvbk1vZGVsKCk7dC5nZXRUeXBlKCk9PT1lZS5GSVhFRD90aGlzLmJ1ZmZlckZpeGVkUHJlY2lzaW9uKHQpOnRoaXMuYnVmZmVyUmVkdWNlZFByZWNpc2lvbigpfSxzZXRRdWFkcmFudFNlZ21lbnRzOmZ1bmN0aW9uKHQpe3RoaXMuYnVmUGFyYW1zLnNldFF1YWRyYW50U2VnbWVudHModCl9LGJ1ZmZlck9yaWdpbmFsUHJlY2lzaW9uOmZ1bmN0aW9uKCl7dHJ5e3ZhciB0PW5ldyBhcih0aGlzLmJ1ZlBhcmFtcyk7dGhpcy5yZXN1bHRHZW9tZXRyeT10LmJ1ZmZlcih0aGlzLmFyZ0dlb20sdGhpcy5kaXN0YW5jZSl9Y2F0Y2godCl7aWYoISh0IGluc3RhbmNlb2YgbCkpdGhyb3cgdDt0aGlzLnNhdmVFeGNlcHRpb249dH1maW5hbGx5e319LGdldFJlc3VsdEdlb21ldHJ5OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRpc3RhbmNlPXQsdGhpcy5jb21wdXRlR2VvbWV0cnkoKSx0aGlzLnJlc3VsdEdlb21ldHJ5fSxzZXRFbmRDYXBTdHlsZTpmdW5jdGlvbih0KXt0aGlzLmJ1ZlBhcmFtcy5zZXRFbmRDYXBTdHlsZSh0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZHJ9fSksZHIuYnVmZmVyT3A9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdLG49bmV3IGRyKHQpLGk9bi5nZXRSZXN1bHRHZW9tZXRyeShlKTtyZXR1cm4gaX1pZigzPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMl0pJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEImJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciByPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXSxhPW5ldyBkcihyKTthLnNldFF1YWRyYW50U2VnbWVudHMobyk7dmFyIGk9YS5nZXRSZXN1bHRHZW9tZXRyeShzKTtyZXR1cm4gaX1pZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIEtpJiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEImJlwibnVtYmVyXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0pe3ZhciB1PWFyZ3VtZW50c1swXSxsPWFyZ3VtZW50c1sxXSxoPWFyZ3VtZW50c1syXSxhPW5ldyBkcih1LGgpLGk9YS5nZXRSZXN1bHRHZW9tZXRyeShsKTtyZXR1cm4gaX19ZWxzZSBpZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGM9YXJndW1lbnRzWzBdLGY9YXJndW1lbnRzWzFdLGc9YXJndW1lbnRzWzJdLGQ9YXJndW1lbnRzWzNdLGE9bmV3IGRyKGMpO2Euc2V0UXVhZHJhbnRTZWdtZW50cyhnKSxhLnNldEVuZENhcFN0eWxlKGQpO3ZhciBpPWEuZ2V0UmVzdWx0R2VvbWV0cnkoZik7cmV0dXJuIGl9fSxkci5wcmVjaXNpb25TY2FsZUZhY3Rvcj1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC5nZXRFbnZlbG9wZUludGVybmFsKCkscj1ULm1heChNYXRoLmFicyhpLmdldE1heFgoKSksTWF0aC5hYnMoaS5nZXRNYXhZKCkpLE1hdGguYWJzKGkuZ2V0TWluWCgpKSxNYXRoLmFicyhpLmdldE1pblkoKSkpLHM9ZT4wP2U6MCxvPXIrMipzLGE9TWF0aC50cnVuYyhNYXRoLmxvZyhvKS9NYXRoLmxvZygxMCkrMSksdT1uLWEsbD1NYXRoLnBvdygxMCx1KTtyZXR1cm4gbH0sZHIuQ0FQX1JPVU5EPUtpLkNBUF9ST1VORCxkci5DQVBfQlVUVD1LaS5DQVBfRkxBVCxkci5DQVBfRkxBVD1LaS5DQVBfRkxBVCxkci5DQVBfU1FVQVJFPUtpLkNBUF9TUVVBUkUsZHIuTUFYX1BSRUNJU0lPTl9ESUdJVFM9MTI7dmFyIFNvPU9iamVjdC5mcmVlemUoe0J1ZmZlck9wOmRyLEJ1ZmZlclBhcmFtZXRlcnM6S2l9KTtlKHByLnByb3RvdHlwZSx7ZmlsdGVyOmZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBUdCYmdGhpcy5jb21wcy5hZGQodCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2h0XX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcHJ9fSkscHIuZ2V0UG9seWdvbnM9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiBwci5nZXRQb2x5Z29ucyh0LG5ldyBJKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9YXJndW1lbnRzWzBdLG49YXJndW1lbnRzWzFdO3JldHVybiBlIGluc3RhbmNlb2YgVHQ/bi5hZGQoZSk6ZSBpbnN0YW5jZW9mIGZ0JiZlLmFwcGx5KG5ldyBwcihuKSksbn19LGUodnIucHJvdG90eXBlLHtpc0luc2lkZUFyZWE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWdJbmRleD09PXZyLklOU0lERV9BUkVBfSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHR9LGdldEdlb21ldHJ5Q29tcG9uZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcG9uZW50fSxnZXRTZWdtZW50SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWdJbmRleH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdnJ9fSksdnIuSU5TSURFX0FSRUE9LTEsZShtci5wcm90b3R5cGUse2ZpbHRlcjpmdW5jdGlvbih0KXt0IGluc3RhbmNlb2YgTHQmJnRoaXMucHRzLmFkZCh0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5baHRdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBtcn19KSxtci5nZXRQb2ludHM9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0IGluc3RhbmNlb2YgTHQ/aG8uc2luZ2xldG9uTGlzdCh0KTptci5nZXRQb2ludHModCxuZXcgSSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gZSBpbnN0YW5jZW9mIEx0P24uYWRkKGUpOmUgaW5zdGFuY2VvZiBmdCYmZS5hcHBseShuZXcgbXIobikpLG59fSxlKHlyLnByb3RvdHlwZSx7ZmlsdGVyOmZ1bmN0aW9uKHQpeyh0IGluc3RhbmNlb2YgTHR8fHQgaW5zdGFuY2VvZiBTdHx8dCBpbnN0YW5jZW9mIFR0KSYmdGhpcy5sb2NhdGlvbnMuYWRkKG5ldyB2cih0LDAsdC5nZXRDb29yZGluYXRlKCkpKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5baHRdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB5cn19KSx5ci5nZXRMb2NhdGlvbnM9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEk7cmV0dXJuIHQuYXBwbHkobmV3IHlyKGUpKSxlfSxlKHhyLnByb3RvdHlwZSx7Y29tcHV0ZUNvbnRhaW5tZW50RGlzdGFuY2U6ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9bmV3IEFycmF5KDIpLmZpbGwobnVsbCk7aWYodGhpcy5jb21wdXRlQ29udGFpbm1lbnREaXN0YW5jZSgwLHQpLHRoaXMubWluRGlzdGFuY2U8PXRoaXMudGVybWluYXRlRGlzdGFuY2UpcmV0dXJuIG51bGw7dGhpcy5jb21wdXRlQ29udGFpbm1lbnREaXN0YW5jZSgxLHQpfWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPTEtZSxyPXByLmdldFBvbHlnb25zKHRoaXMuZ2VvbVtlXSk7aWYoci5zaXplKCk+MCl7dmFyIHM9eXIuZ2V0TG9jYXRpb25zKHRoaXMuZ2VvbVtpXSk7aWYodGhpcy5jb21wdXRlQ29udGFpbm1lbnREaXN0YW5jZShzLHIsbiksdGhpcy5taW5EaXN0YW5jZTw9dGhpcy50ZXJtaW5hdGVEaXN0YW5jZSlyZXR1cm4gdGhpcy5taW5EaXN0YW5jZUxvY2F0aW9uW2ldPW5bMF0sdGhpcy5taW5EaXN0YW5jZUxvY2F0aW9uW2VdPW5bMV0sbnVsbH19ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aClpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIEFycmF5JiZSKGFyZ3VtZW50c1swXSx5KSYmUihhcmd1bWVudHNbMV0seSkpe2Zvcih2YXIgbz1hcmd1bWVudHNbMF0sYT1hcmd1bWVudHNbMV0sdT1hcmd1bWVudHNbMl0sbD0wO2w8by5zaXplKCk7bCsrKWZvcih2YXIgaD1vLmdldChsKSxjPTA7YzxhLnNpemUoKTtjKyspaWYodGhpcy5jb21wdXRlQ29udGFpbm1lbnREaXN0YW5jZShoLGEuZ2V0KGMpLHUpLHRoaXMubWluRGlzdGFuY2U8PXRoaXMudGVybWluYXRlRGlzdGFuY2UpcmV0dXJuIG51bGx9ZWxzZSBpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIEFycmF5JiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIHZyJiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIFR0KXt2YXIgZj1hcmd1bWVudHNbMF0sZz1hcmd1bWVudHNbMV0sZD1hcmd1bWVudHNbMl0scD1mLmdldENvb3JkaW5hdGUoKTtpZihMLkVYVEVSSU9SIT09dGhpcy5wdExvY2F0b3IubG9jYXRlKHAsZykpcmV0dXJuIHRoaXMubWluRGlzdGFuY2U9MCxkWzBdPWYsZFsxXT1uZXcgdnIoZyxwKSxudWxsfX0sY29tcHV0ZU1pbkRpc3RhbmNlTGluZXNQb2ludHM6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT0wO2k8dC5zaXplKCk7aSsrKWZvcih2YXIgcj10LmdldChpKSxzPTA7czxlLnNpemUoKTtzKyspe3ZhciBvPWUuZ2V0KHMpO2lmKHRoaXMuY29tcHV0ZU1pbkRpc3RhbmNlKHIsbyxuKSx0aGlzLm1pbkRpc3RhbmNlPD10aGlzLnRlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfX0sY29tcHV0ZUZhY2V0RGlzdGFuY2U6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgQXJyYXkoMikuZmlsbChudWxsKSxlPWtuLmdldExpbmVzKHRoaXMuZ2VvbVswXSksbj1rbi5nZXRMaW5lcyh0aGlzLmdlb21bMV0pLGk9bXIuZ2V0UG9pbnRzKHRoaXMuZ2VvbVswXSkscj1tci5nZXRQb2ludHModGhpcy5nZW9tWzFdKTtyZXR1cm4gdGhpcy5jb21wdXRlTWluRGlzdGFuY2VMaW5lcyhlLG4sdCksdGhpcy51cGRhdGVNaW5EaXN0YW5jZSh0LCExKSx0aGlzLm1pbkRpc3RhbmNlPD10aGlzLnRlcm1pbmF0ZURpc3RhbmNlP251bGw6KHRbMF09bnVsbCx0WzFdPW51bGwsdGhpcy5jb21wdXRlTWluRGlzdGFuY2VMaW5lc1BvaW50cyhlLHIsdCksdGhpcy51cGRhdGVNaW5EaXN0YW5jZSh0LCExKSx0aGlzLm1pbkRpc3RhbmNlPD10aGlzLnRlcm1pbmF0ZURpc3RhbmNlP251bGw6KHRbMF09bnVsbCx0WzFdPW51bGwsdGhpcy5jb21wdXRlTWluRGlzdGFuY2VMaW5lc1BvaW50cyhuLGksdCksdGhpcy51cGRhdGVNaW5EaXN0YW5jZSh0LCEwKSx0aGlzLm1pbkRpc3RhbmNlPD10aGlzLnRlcm1pbmF0ZURpc3RhbmNlP251bGw6KHRbMF09bnVsbCx0WzFdPW51bGwsdGhpcy5jb21wdXRlTWluRGlzdGFuY2VQb2ludHMoaSxyLHQpLHZvaWQgdGhpcy51cGRhdGVNaW5EaXN0YW5jZSh0LCExKSkpKX0sbmVhcmVzdExvY2F0aW9uczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbXB1dGVNaW5EaXN0YW5jZSgpLHRoaXMubWluRGlzdGFuY2VMb2NhdGlvbn0sdXBkYXRlTWluRGlzdGFuY2U6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09PXRbMF0/bnVsbDp2b2lkKGU/KHRoaXMubWluRGlzdGFuY2VMb2NhdGlvblswXT10WzFdLHRoaXMubWluRGlzdGFuY2VMb2NhdGlvblsxXT10WzBdKToodGhpcy5taW5EaXN0YW5jZUxvY2F0aW9uWzBdPXRbMF0sdGhpcy5taW5EaXN0YW5jZUxvY2F0aW9uWzFdPXRbMV0pKX0sbmVhcmVzdFBvaW50czpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZU1pbkRpc3RhbmNlKCk7dmFyIHQ9W3RoaXMubWluRGlzdGFuY2VMb2NhdGlvblswXS5nZXRDb29yZGluYXRlKCksdGhpcy5taW5EaXN0YW5jZUxvY2F0aW9uWzFdLmdldENvb3JkaW5hdGUoKV07cmV0dXJuIHR9LGNvbXB1dGVNaW5EaXN0YW5jZTpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihudWxsIT09dGhpcy5taW5EaXN0YW5jZUxvY2F0aW9uKXJldHVybiBudWxsO2lmKHRoaXMubWluRGlzdGFuY2VMb2NhdGlvbj1uZXcgQXJyYXkoMikuZmlsbChudWxsKSx0aGlzLmNvbXB1dGVDb250YWlubWVudERpc3RhbmNlKCksdGhpcy5taW5EaXN0YW5jZTw9dGhpcy50ZXJtaW5hdGVEaXN0YW5jZSlyZXR1cm4gbnVsbDt0aGlzLmNvbXB1dGVGYWNldERpc3RhbmNlKCl9ZWxzZSBpZigzPT09YXJndW1lbnRzLmxlbmd0aClpZihhcmd1bWVudHNbMl1pbnN0YW5jZW9mIEFycmF5JiZhcmd1bWVudHNbMF1pbnN0YW5jZW9mIFN0JiZhcmd1bWVudHNbMV1pbnN0YW5jZW9mIEx0KXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl07aWYodC5nZXRFbnZlbG9wZUludGVybmFsKCkuZGlzdGFuY2UoZS5nZXRFbnZlbG9wZUludGVybmFsKCkpPnRoaXMubWluRGlzdGFuY2UpcmV0dXJuIG51bGw7Zm9yKHZhciBpPXQuZ2V0Q29vcmRpbmF0ZXMoKSxyPWUuZ2V0Q29vcmRpbmF0ZSgpLHM9MDtzPGkubGVuZ3RoLTE7cysrKXt2YXIgbz1oZS5kaXN0YW5jZVBvaW50TGluZShyLGlbc10saVtzKzFdKTtpZihvPHRoaXMubWluRGlzdGFuY2Upe3RoaXMubWluRGlzdGFuY2U9bzt2YXIgYT1uZXcgY2UoaVtzXSxpW3MrMV0pLHU9YS5jbG9zZXN0UG9pbnQocik7blswXT1uZXcgdnIodCxzLHUpLG5bMV09bmV3IHZyKGUsMCxyKX1pZih0aGlzLm1pbkRpc3RhbmNlPD10aGlzLnRlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfX1lbHNlIGlmKGFyZ3VtZW50c1syXWluc3RhbmNlb2YgQXJyYXkmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgU3QmJmFyZ3VtZW50c1sxXWluc3RhbmNlb2YgU3Qpe3ZhciBsPWFyZ3VtZW50c1swXSxoPWFyZ3VtZW50c1sxXSxjPWFyZ3VtZW50c1syXTtpZihsLmdldEVudmVsb3BlSW50ZXJuYWwoKS5kaXN0YW5jZShoLmdldEVudmVsb3BlSW50ZXJuYWwoKSk+dGhpcy5taW5EaXN0YW5jZSlyZXR1cm4gbnVsbDtmb3IodmFyIGk9bC5nZXRDb29yZGluYXRlcygpLGY9aC5nZXRDb29yZGluYXRlcygpLHM9MDtzPGkubGVuZ3RoLTE7cysrKWZvcih2YXIgZz0wO2c8Zi5sZW5ndGgtMTtnKyspe3ZhciBvPWhlLmRpc3RhbmNlTGluZUxpbmUoaVtzXSxpW3MrMV0sZltnXSxmW2crMV0pO2lmKG88dGhpcy5taW5EaXN0YW5jZSl7dGhpcy5taW5EaXN0YW5jZT1vO3ZhciBkPW5ldyBjZShpW3NdLGlbcysxXSkscD1uZXcgY2UoZltnXSxmW2crMV0pLHY9ZC5jbG9zZXN0UG9pbnRzKHApO2NbMF09bmV3IHZyKGwscyx2WzBdKSxjWzFdPW5ldyB2cihoLGcsdlsxXSl9aWYodGhpcy5taW5EaXN0YW5jZTw9dGhpcy50ZXJtaW5hdGVEaXN0YW5jZSlyZXR1cm4gbnVsbH19fSxjb21wdXRlTWluRGlzdGFuY2VQb2ludHM6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT0wO2k8dC5zaXplKCk7aSsrKWZvcih2YXIgcj10LmdldChpKSxzPTA7czxlLnNpemUoKTtzKyspe3ZhciBvPWUuZ2V0KHMpLGE9ci5nZXRDb29yZGluYXRlKCkuZGlzdGFuY2Uoby5nZXRDb29yZGluYXRlKCkpO2lmKGE8dGhpcy5taW5EaXN0YW5jZSYmKHRoaXMubWluRGlzdGFuY2U9YSxuWzBdPW5ldyB2cihyLDAsci5nZXRDb29yZGluYXRlKCkpLG5bMV09bmV3IHZyKG8sMCxvLmdldENvb3JkaW5hdGUoKSkpLHRoaXMubWluRGlzdGFuY2U8PXRoaXMudGVybWluYXRlRGlzdGFuY2UpcmV0dXJuIG51bGx9fSxkaXN0YW5jZTpmdW5jdGlvbigpe2lmKG51bGw9PT10aGlzLmdlb21bMF18fG51bGw9PT10aGlzLmdlb21bMV0pdGhyb3cgbmV3IGkoXCJudWxsIGdlb21ldHJpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcIik7cmV0dXJuIHRoaXMuZ2VvbVswXS5pc0VtcHR5KCl8fHRoaXMuZ2VvbVsxXS5pc0VtcHR5KCk/MDoodGhpcy5jb21wdXRlTWluRGlzdGFuY2UoKSx0aGlzLm1pbkRpc3RhbmNlKX0sY29tcHV0ZU1pbkRpc3RhbmNlTGluZXM6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT0wO2k8dC5zaXplKCk7aSsrKWZvcih2YXIgcj10LmdldChpKSxzPTA7czxlLnNpemUoKTtzKyspe3ZhciBvPWUuZ2V0KHMpO2lmKHRoaXMuY29tcHV0ZU1pbkRpc3RhbmNlKHIsbyxuKSx0aGlzLm1pbkRpc3RhbmNlPD10aGlzLnRlcm1pbmF0ZURpc3RhbmNlKXJldHVybiBudWxsfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4geHJ9fSkseHIuZGlzdGFuY2U9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgeHIodCxlKTtyZXR1cm4gbi5kaXN0YW5jZSgpfSx4ci5pc1dpdGhpbkRpc3RhbmNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uZXcgeHIodCxlLG4pO3JldHVybiBpLmRpc3RhbmNlKCk8PW59LHhyLm5lYXJlc3RQb2ludHM9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgeHIodCxlKTtyZXR1cm4gbi5uZWFyZXN0UG9pbnRzKCl9O3ZhciB3bz1PYmplY3QuZnJlZXplKHtEaXN0YW5jZU9wOnhyfSk7ZShFci5wcm90b3R5cGUse2dldENvb3JkaW5hdGVzOmZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMuY29vcmRpbmF0ZXMpe2Zvcih2YXIgdD0wLGU9MCxuPW5ldyBOLGk9dGhpcy5kaXJlY3RlZEVkZ2VzLml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtyLmdldEVkZ2VEaXJlY3Rpb24oKT90Kys6ZSsrLG4uYWRkKHIuZ2V0RWRnZSgpLmdldExpbmUoKS5nZXRDb29yZGluYXRlcygpLCExLHIuZ2V0RWRnZURpcmVjdGlvbigpKX10aGlzLmNvb3JkaW5hdGVzPW4udG9Db29yZGluYXRlQXJyYXkoKSxlPnQmJkgucmV2ZXJzZSh0aGlzLmNvb3JkaW5hdGVzKX1yZXR1cm4gdGhpcy5jb29yZGluYXRlc30sdG9MaW5lU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmFjdG9yeS5jcmVhdGVMaW5lU3RyaW5nKHRoaXMuZ2V0Q29vcmRpbmF0ZXMoKSl9LGFkZDpmdW5jdGlvbih0KXt0aGlzLmRpcmVjdGVkRWRnZXMuYWRkKHQpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBFcn19KSxlKElyLnByb3RvdHlwZSx7c2V0VmlzaXRlZDpmdW5jdGlvbih0KXt0aGlzLl9pc1Zpc2l0ZWQ9dH0saXNNYXJrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNNYXJrZWR9LHNldERhdGE6ZnVuY3Rpb24odCl7dGhpcy5kYXRhPXR9LGdldERhdGE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhfSxzZXRNYXJrZWQ6ZnVuY3Rpb24odCl7dGhpcy5faXNNYXJrZWQ9dH0sZ2V0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGF9LGlzVmlzaXRlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc1Zpc2l0ZWR9LHNldENvbnRleHQ6ZnVuY3Rpb24odCl7dGhpcy5kYXRhPXR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIElyfX0pLElyLmdldENvbXBvbmVudFdpdGhWaXNpdGVkU3RhdGU9ZnVuY3Rpb24odCxlKXtmb3IoO3QuaGFzTmV4dCgpOyl7dmFyIG49dC5uZXh0KCk7aWYobi5pc1Zpc2l0ZWQoKT09PWUpcmV0dXJuIG59cmV0dXJuIG51bGx9LElyLnNldFZpc2l0ZWQ9ZnVuY3Rpb24odCxlKXtmb3IoO3QuaGFzTmV4dCgpOyl7dmFyIG49dC5uZXh0KCk7bi5zZXRWaXNpdGVkKGUpfX0sSXIuc2V0TWFya2VkPWZ1bmN0aW9uKHQsZSl7Zm9yKDt0Lmhhc05leHQoKTspe3ZhciBuPXQubmV4dCgpO24uc2V0TWFya2VkKGUpfX0saChOcixJciksZShOci5wcm90b3R5cGUse2lzUmVtb3ZlZDpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5wYXJlbnRFZGdlfSxjb21wYXJlRGlyZWN0aW9uOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnF1YWRyYW50PnQucXVhZHJhbnQ/MTp0aGlzLnF1YWRyYW50PHQucXVhZHJhbnQ/LTE6aGUuY29tcHV0ZU9yaWVudGF0aW9uKHQucDAsdC5wMSx0aGlzLnAxKX0sZ2V0Q29vcmRpbmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZyb20uZ2V0Q29vcmRpbmF0ZSgpfSxwcmludDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldENsYXNzKCkuZ2V0TmFtZSgpLG49ZS5sYXN0SW5kZXhPZihcIi5cIiksaT1lLnN1YnN0cmluZyhuKzEpO3QucHJpbnQoXCIgIFwiK2krXCI6IFwiK3RoaXMucDArXCIgLSBcIit0aGlzLnAxK1wiIFwiK3RoaXMucXVhZHJhbnQrXCI6XCIrdGhpcy5hbmdsZSl9LGdldERpcmVjdGlvblB0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucDF9LGdldEFuZ2xlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYW5nbGV9LGNvbXBhcmVUbzpmdW5jdGlvbih0KXt2YXIgZT10O3JldHVybiB0aGlzLmNvbXBhcmVEaXJlY3Rpb24oZSl9LGdldEZyb21Ob2RlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZnJvbX0sZ2V0U3ltOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3ltO1xufSxzZXRFZGdlOmZ1bmN0aW9uKHQpe3RoaXMucGFyZW50RWRnZT10fSxyZW1vdmU6ZnVuY3Rpb24oKXt0aGlzLnN5bT1udWxsLHRoaXMucGFyZW50RWRnZT1udWxsfSxnZXRFZGdlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50RWRnZX0sZ2V0UXVhZHJhbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5xdWFkcmFudH0sc2V0U3ltOmZ1bmN0aW9uKHQpe3RoaXMuc3ltPXR9LGdldFRvTm9kZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRvfSxnZXRFZGdlRGlyZWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZURpcmVjdGlvbn0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bc119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIE5yfX0pLE5yLnRvRWRnZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBJLG49dC5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyllLmFkZChuLm5leHQoKS5wYXJlbnRFZGdlKTtyZXR1cm4gZX0saChDcixOciksZShDci5wcm90b3R5cGUse2dldE5leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gMiE9PXRoaXMuZ2V0VG9Ob2RlKCkuZ2V0RGVncmVlKCk/bnVsbDp0aGlzLmdldFRvTm9kZSgpLmdldE91dEVkZ2VzKCkuZ2V0RWRnZXMoKS5nZXQoMCk9PT10aGlzLmdldFN5bSgpP3RoaXMuZ2V0VG9Ob2RlKCkuZ2V0T3V0RWRnZXMoKS5nZXRFZGdlcygpLmdldCgxKTooZi5pc1RydWUodGhpcy5nZXRUb05vZGUoKS5nZXRPdXRFZGdlcygpLmdldEVkZ2VzKCkuZ2V0KDEpPT09dGhpcy5nZXRTeW0oKSksdGhpcy5nZXRUb05vZGUoKS5nZXRPdXRFZGdlcygpLmdldEVkZ2VzKCkuZ2V0KDApKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gQ3J9fSksaChTcixJciksZShTci5wcm90b3R5cGUse2lzUmVtb3ZlZDpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5kaXJFZGdlfSxzZXREaXJlY3RlZEVkZ2VzOmZ1bmN0aW9uKHQsZSl7dGhpcy5kaXJFZGdlPVt0LGVdLHQuc2V0RWRnZSh0aGlzKSxlLnNldEVkZ2UodGhpcyksdC5zZXRTeW0oZSksZS5zZXRTeW0odCksdC5nZXRGcm9tTm9kZSgpLmFkZE91dEVkZ2UodCksZS5nZXRGcm9tTm9kZSgpLmFkZE91dEVkZ2UoZSl9LGdldERpckVkZ2U6ZnVuY3Rpb24oKXtpZihOdW1iZXIuaXNJbnRlZ2VyKGFyZ3VtZW50c1swXSkpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5kaXJFZGdlW3RdfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTHIpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5kaXJFZGdlWzBdLmdldEZyb21Ob2RlKCk9PT1lP3RoaXMuZGlyRWRnZVswXTp0aGlzLmRpckVkZ2VbMV0uZ2V0RnJvbU5vZGUoKT09PWU/dGhpcy5kaXJFZGdlWzFdOm51bGx9fSxyZW1vdmU6ZnVuY3Rpb24oKXt0aGlzLmRpckVkZ2U9bnVsbH0sZ2V0T3Bwb3NpdGVOb2RlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRpckVkZ2VbMF0uZ2V0RnJvbU5vZGUoKT09PXQ/dGhpcy5kaXJFZGdlWzBdLmdldFRvTm9kZSgpOnRoaXMuZGlyRWRnZVsxXS5nZXRGcm9tTm9kZSgpPT09dD90aGlzLmRpckVkZ2VbMV0uZ2V0VG9Ob2RlKCk6bnVsbH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gU3J9fSksZSh3ci5wcm90b3R5cGUse2dldE5leHRFZGdlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SW5kZXgodCk7cmV0dXJuIHRoaXMub3V0RWRnZXMuZ2V0KHRoaXMuZ2V0SW5kZXgoZSsxKSl9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLml0ZXJhdG9yKCk7aWYoIXQuaGFzTmV4dCgpKXJldHVybiBudWxsO3ZhciBlPXQubmV4dCgpO3JldHVybiBlLmdldENvb3JkaW5hdGUoKX0saXRlcmF0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb3J0RWRnZXMoKSx0aGlzLm91dEVkZ2VzLml0ZXJhdG9yKCl9LHNvcnRFZGdlczpmdW5jdGlvbigpe3RoaXMuc29ydGVkfHwoaG8uc29ydCh0aGlzLm91dEVkZ2VzKSx0aGlzLnNvcnRlZD0hMCl9LHJlbW92ZTpmdW5jdGlvbih0KXt0aGlzLm91dEVkZ2VzLnJlbW92ZSh0KX0sZ2V0RWRnZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb3J0RWRnZXMoKSx0aGlzLm91dEVkZ2VzfSxnZXROZXh0Q1dFZGdlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SW5kZXgodCk7cmV0dXJuIHRoaXMub3V0RWRnZXMuZ2V0KHRoaXMuZ2V0SW5kZXgoZS0xKSl9LGdldEluZGV4OmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBTcil7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc29ydEVkZ2VzKCk7Zm9yKHZhciBlPTA7ZTx0aGlzLm91dEVkZ2VzLnNpemUoKTtlKyspe3ZhciBuPXRoaXMub3V0RWRnZXMuZ2V0KGUpO2lmKG4uZ2V0RWRnZSgpPT09dClyZXR1cm4gZX1yZXR1cm4tMX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIE5yKXt2YXIgaT1hcmd1bWVudHNbMF07dGhpcy5zb3J0RWRnZXMoKTtmb3IodmFyIGU9MDtlPHRoaXMub3V0RWRnZXMuc2l6ZSgpO2UrKyl7dmFyIG49dGhpcy5vdXRFZGdlcy5nZXQoZSk7aWYobj09PWkpcmV0dXJuIGV9cmV0dXJuLTF9aWYoTnVtYmVyLmlzSW50ZWdlcihhcmd1bWVudHNbMF0pKXt2YXIgcj1hcmd1bWVudHNbMF0scz1yJXRoaXMub3V0RWRnZXMuc2l6ZSgpO3JldHVybiBzPDAmJihzKz10aGlzLm91dEVkZ2VzLnNpemUoKSksc319LGFkZDpmdW5jdGlvbih0KXt0aGlzLm91dEVkZ2VzLmFkZCh0KSx0aGlzLnNvcnRlZD0hMX0sZ2V0RGVncmVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3V0RWRnZXMuc2l6ZSgpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB3cn19KSxoKExyLElyKSxlKExyLnByb3RvdHlwZSx7aXNSZW1vdmVkOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLnB0fSxhZGRPdXRFZGdlOmZ1bmN0aW9uKHQpe3RoaXMuZGVTdGFyLmFkZCh0KX0sZ2V0Q29vcmRpbmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB0fSxnZXRPdXRFZGdlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRlU3Rhcn0scmVtb3ZlOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpdGhpcy5wdD1udWxsO2Vsc2UgaWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLmRlU3Rhci5yZW1vdmUodCl9fSxnZXRJbmRleDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kZVN0YXIuZ2V0SW5kZXgodCl9LGdldERlZ3JlZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRlU3Rhci5nZXREZWdyZWUoKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTHJ9fSksTHIuZ2V0RWRnZXNCZXR3ZWVuPWZ1bmN0aW9uKHQsZSl7dmFyIG49TnIudG9FZGdlcyh0LmdldE91dEVkZ2VzKCkuZ2V0RWRnZXMoKSksaT1uZXcgSihuKSxyPU5yLnRvRWRnZXMoZS5nZXRPdXRFZGdlcygpLmdldEVkZ2VzKCkpO3JldHVybiBpLnJldGFpbkFsbChyKSxpfSxoKFJyLFNyKSxlKFJyLnByb3RvdHlwZSx7Z2V0TGluZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxpbmV9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFJyfX0pLGUoVHIucHJvdG90eXBlLHtmaW5kOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGVNYXAuZ2V0KHQpfSxpdGVyYXRvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVNYXAudmFsdWVzKCkuaXRlcmF0b3IoKX0scmVtb3ZlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vZGVNYXAucmVtb3ZlKHQpfSx2YWx1ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlTWFwLnZhbHVlcygpfSxhZGQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZU1hcC5wdXQodC5nZXRDb29yZGluYXRlKCksdCksdH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gVHJ9fSksZShQci5wcm90b3R5cGUse2ZpbmROb2Rlc09mRGVncmVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgSSxuPXRoaXMubm9kZUl0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpLmdldERlZ3JlZSgpPT09dCYmZS5hZGQoaSl9cmV0dXJuIGV9LGRpckVkZ2VJdGVyYXRvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpckVkZ2VzLml0ZXJhdG9yKCl9LGVkZ2VJdGVyYXRvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVkZ2VzLml0ZXJhdG9yKCl9LHJlbW92ZTpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgU3Ipe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnJlbW92ZSh0LmdldERpckVkZ2UoMCkpLHRoaXMucmVtb3ZlKHQuZ2V0RGlyRWRnZSgxKSksdGhpcy5lZGdlcy5yZW1vdmUodCksdC5yZW1vdmUoKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTnIpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWUuZ2V0U3ltKCk7bnVsbCE9PW4mJm4uc2V0U3ltKG51bGwpLGUuZ2V0RnJvbU5vZGUoKS5yZW1vdmUoZSksZS5yZW1vdmUoKSx0aGlzLmRpckVkZ2VzLnJlbW92ZShlKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTHIpe2Zvcih2YXIgaT1hcmd1bWVudHNbMF0scj1pLmdldE91dEVkZ2VzKCkuZ2V0RWRnZXMoKSxzPXIuaXRlcmF0b3IoKTtzLmhhc05leHQoKTspe3ZhciBvPXMubmV4dCgpLG49by5nZXRTeW0oKTtudWxsIT09biYmdGhpcy5yZW1vdmUobiksdGhpcy5kaXJFZGdlcy5yZW1vdmUobyk7dmFyIGE9by5nZXRFZGdlKCk7bnVsbCE9PWEmJnRoaXMuZWRnZXMucmVtb3ZlKGEpfXRoaXMubm9kZU1hcC5yZW1vdmUoaS5nZXRDb29yZGluYXRlKCkpLGkucmVtb3ZlKCl9fSxmaW5kTm9kZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub2RlTWFwLmZpbmQodCl9LGdldEVkZ2VzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZXN9LG5vZGVJdGVyYXRvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVNYXAuaXRlcmF0b3IoKX0sY29udGFpbnM6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIFNyKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZWRnZXMuY29udGFpbnModCl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOcil7dmFyIGU9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmRpckVkZ2VzLmNvbnRhaW5zKGUpfX0sYWRkOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBMcil7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMubm9kZU1hcC5hZGQodCl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIFNyKXt2YXIgZT1hcmd1bWVudHNbMF07dGhpcy5lZGdlcy5hZGQoZSksdGhpcy5hZGQoZS5nZXREaXJFZGdlKDApKSx0aGlzLmFkZChlLmdldERpckVkZ2UoMSkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBOcil7dmFyIG49YXJndW1lbnRzWzBdO3RoaXMuZGlyRWRnZXMuYWRkKG4pfX0sZ2V0Tm9kZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2RlTWFwLnZhbHVlcygpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBQcn19KSxoKGJyLFByKSxlKGJyLnByb3RvdHlwZSx7YWRkRWRnZTpmdW5jdGlvbih0KXtpZih0LmlzRW1wdHkoKSlyZXR1cm4gbnVsbDt2YXIgZT1ILnJlbW92ZVJlcGVhdGVkUG9pbnRzKHQuZ2V0Q29vcmRpbmF0ZXMoKSk7aWYoZS5sZW5ndGg8PTEpcmV0dXJuIG51bGw7dmFyIG49ZVswXSxpPWVbZS5sZW5ndGgtMV0scj10aGlzLmdldE5vZGUobikscz10aGlzLmdldE5vZGUoaSksbz1uZXcgQ3IocixzLGVbMV0sKCEwKSksYT1uZXcgQ3IocyxyLGVbZS5sZW5ndGgtMl0sKCExKSksdT1uZXcgUnIodCk7dS5zZXREaXJlY3RlZEVkZ2VzKG8sYSksdGhpcy5hZGQodSl9LGdldE5vZGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5maW5kTm9kZSh0KTtyZXR1cm4gbnVsbD09PWUmJihlPW5ldyBMcih0KSx0aGlzLmFkZChlKSksZX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gYnJ9fSksZShPci5wcm90b3R5cGUse2J1aWxkRWRnZVN0cmluZ3NGb3JVbnByb2Nlc3NlZE5vZGVzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ3JhcGguZ2V0Tm9kZXMoKS5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7ZS5pc01hcmtlZCgpfHwoZi5pc1RydWUoMj09PWUuZ2V0RGVncmVlKCkpLHRoaXMuYnVpbGRFZGdlU3RyaW5nc1N0YXJ0aW5nQXQoZSksZS5zZXRNYXJrZWQoITApKX19LGJ1aWxkRWRnZVN0cmluZ3NGb3JOb25EZWdyZWUyTm9kZXM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ncmFwaC5nZXROb2RlcygpLml0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTsyIT09ZS5nZXREZWdyZWUoKSYmKHRoaXMuYnVpbGRFZGdlU3RyaW5nc1N0YXJ0aW5nQXQoZSksZS5zZXRNYXJrZWQoITApKX19LGJ1aWxkRWRnZVN0cmluZ3NGb3JPYnZpb3VzU3RhcnROb2RlczpmdW5jdGlvbigpe3RoaXMuYnVpbGRFZGdlU3RyaW5nc0Zvck5vbkRlZ3JlZTJOb2RlcygpfSxnZXRNZXJnZWRMaW5lU3RyaW5nczpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1lcmdlKCksdGhpcy5tZXJnZWRMaW5lU3RyaW5nc30sYnVpbGRFZGdlU3RyaW5nc1N0YXJ0aW5nQXQ6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuZ2V0T3V0RWRnZXMoKS5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bi5nZXRFZGdlKCkuaXNNYXJrZWQoKXx8dGhpcy5lZGdlU3RyaW5ncy5hZGQodGhpcy5idWlsZEVkZ2VTdHJpbmdTdGFydGluZ1dpdGgobikpfX0sbWVyZ2U6ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5tZXJnZWRMaW5lU3RyaW5ncylyZXR1cm4gbnVsbDtJci5zZXRNYXJrZWQodGhpcy5ncmFwaC5ub2RlSXRlcmF0b3IoKSwhMSksSXIuc2V0TWFya2VkKHRoaXMuZ3JhcGguZWRnZUl0ZXJhdG9yKCksITEpLHRoaXMuZWRnZVN0cmluZ3M9bmV3IEksdGhpcy5idWlsZEVkZ2VTdHJpbmdzRm9yT2J2aW91c1N0YXJ0Tm9kZXMoKSx0aGlzLmJ1aWxkRWRnZVN0cmluZ3NGb3JJc29sYXRlZExvb3BzKCksdGhpcy5tZXJnZWRMaW5lU3RyaW5ncz1uZXcgSTtmb3IodmFyIHQ9dGhpcy5lZGdlU3RyaW5ncy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7dGhpcy5tZXJnZWRMaW5lU3RyaW5ncy5hZGQoZS50b0xpbmVTdHJpbmcoKSl9fSxidWlsZEVkZ2VTdHJpbmdTdGFydGluZ1dpdGg6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEVyKHRoaXMuZmFjdG9yeSksbj10O2RvIGUuYWRkKG4pLG4uZ2V0RWRnZSgpLnNldE1hcmtlZCghMCksbj1uLmdldE5leHQoKTt3aGlsZShudWxsIT09biYmbiE9PXQpO3JldHVybiBlfSxhZGQ6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEIpe3ZhciB0PWFyZ3VtZW50c1swXTt0LmFwcGx5KHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltxXX0sZmlsdGVyOmZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBTdCYmdGhpcy5hZGQodCl9fSl9ZWxzZSBpZihSKGFyZ3VtZW50c1swXSx2KSl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMubWVyZ2VkTGluZVN0cmluZ3M9bnVsbDtmb3IodmFyIG49ZS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7dGhpcy5hZGQoaSl9fWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBTdCl7dmFyIHI9YXJndW1lbnRzWzBdO251bGw9PT10aGlzLmZhY3RvcnkmJih0aGlzLmZhY3Rvcnk9ci5nZXRGYWN0b3J5KCkpLHRoaXMuZ3JhcGguYWRkRWRnZShyKX19LGJ1aWxkRWRnZVN0cmluZ3NGb3JJc29sYXRlZExvb3BzOmZ1bmN0aW9uKCl7dGhpcy5idWlsZEVkZ2VTdHJpbmdzRm9yVW5wcm9jZXNzZWROb2RlcygpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBPcn19KTt2YXIgTG89T2JqZWN0LmZyZWV6ZSh7TGluZU1lcmdlcjpPcn0pLFJvPU9iamVjdC5mcmVlemUoe092ZXJsYXlPcDppaX0pO2goX3IsTnIpLGUoX3IucHJvdG90eXBlLHtnZXROZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV4dH0saXNJblJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuZWRnZVJpbmd9LHNldFJpbmc6ZnVuY3Rpb24odCl7dGhpcy5lZGdlUmluZz10fSxzZXRMYWJlbDpmdW5jdGlvbih0KXt0aGlzLmxhYmVsPXR9LGdldExhYmVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGFiZWx9LHNldE5leHQ6ZnVuY3Rpb24odCl7dGhpcy5uZXh0PXR9LGdldFJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGdlUmluZ30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gX3J9fSksaChNcixTciksZShNci5wcm90b3R5cGUse2dldExpbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5saW5lfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBNcn19KSxlKERyLnByb3RvdHlwZSx7dmlzaXRJbnRlcmlvclJpbmc6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldENvb3JkaW5hdGVzKCksaT1uWzBdLHI9RHIuZmluZERpZmZlcmVudFBvaW50KG4saSkscz1lLmZpbmRFZGdlSW5TYW1lRGlyZWN0aW9uKGksciksbz1lLmZpbmRFZGdlRW5kKHMpLGE9bnVsbDtvLmdldExhYmVsKCkuZ2V0TG9jYXRpb24oMCxjbi5SSUdIVCk9PT1MLklOVEVSSU9SP2E9bzpvLmdldFN5bSgpLmdldExhYmVsKCkuZ2V0TG9jYXRpb24oMCxjbi5SSUdIVCk9PT1MLklOVEVSSU9SJiYoYT1vLmdldFN5bSgpKSxmLmlzVHJ1ZShudWxsIT09YSxcInVuYWJsZSB0byBmaW5kIGRpckVkZ2Ugd2l0aCBJbnRlcmlvciBvbiBSSFNcIiksdGhpcy52aXNpdExpbmtlZERpcmVjdGVkRWRnZXMoYSl9LHZpc2l0U2hlbGxJbnRlcmlvcnM6ZnVuY3Rpb24odCxlKXtpZih0IGluc3RhbmNlb2YgVHQpe3ZhciBuPXQ7dGhpcy52aXNpdEludGVyaW9yUmluZyhuLmdldEV4dGVyaW9yUmluZygpLGUpfWlmKHQgaW5zdGFuY2VvZiBPdClmb3IodmFyIGk9dCxyPTA7cjxpLmdldE51bUdlb21ldHJpZXMoKTtyKyspe3ZhciBuPWkuZ2V0R2VvbWV0cnlOKHIpO3RoaXMudmlzaXRJbnRlcmlvclJpbmcobi5nZXRFeHRlcmlvclJpbmcoKSxlKX19LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXNjb25uZWN0ZWRSaW5nY29vcmR9LHNldEludGVyaW9yRWRnZXNJblJlc3VsdDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5nZXRFZGdlRW5kcygpLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtuLmdldExhYmVsKCkuZ2V0TG9jYXRpb24oMCxjbi5SSUdIVCk9PT1MLklOVEVSSU9SJiZuLnNldEluUmVzdWx0KCEwKX19LHZpc2l0TGlua2VkRGlyZWN0ZWRFZGdlczpmdW5jdGlvbih0KXt2YXIgZT10LG49dDtkbyBmLmlzVHJ1ZShudWxsIT09bixcImZvdW5kIG51bGwgRGlyZWN0ZWQgRWRnZVwiKSxuLnNldFZpc2l0ZWQoITApLG49bi5nZXROZXh0KCk7d2hpbGUobiE9PWUpfSxidWlsZEVkZ2VSaW5nczpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEksbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZihpLmlzSW5SZXN1bHQoKSYmbnVsbD09PWkuZ2V0RWRnZVJpbmcoKSl7dmFyIHI9bmV3IHZuKGksdGhpcy5nZW9tZXRyeUZhY3RvcnkpO3IubGlua0RpcmVjdGVkRWRnZXNGb3JNaW5pbWFsRWRnZVJpbmdzKCk7dmFyIHM9ci5idWlsZE1pbmltYWxSaW5ncygpO2UuYWRkQWxsKHMpfX1yZXR1cm4gZX0saGFzVW52aXNpdGVkU2hlbGxFZGdlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5zaXplKCk7ZSsrKXt2YXIgbj10LmdldChlKTtpZighbi5pc0hvbGUoKSl7dmFyIGk9bi5nZXRFZGdlcygpLHI9aS5nZXQoMCk7aWYoci5nZXRMYWJlbCgpLmdldExvY2F0aW9uKDAsY24uUklHSFQpPT09TC5JTlRFUklPUilmb3IodmFyIHM9MDtzPGkuc2l6ZSgpO3MrKylpZihyPWkuZ2V0KHMpLCFyLmlzVmlzaXRlZCgpKXJldHVybiB0aGlzLmRpc2Nvbm5lY3RlZFJpbmdjb29yZD1yLmdldENvb3JkaW5hdGUoKSwhMH19cmV0dXJuITF9LGlzSW50ZXJpb3JzQ29ubmVjdGVkOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IEk7dGhpcy5nZW9tR3JhcGguY29tcHV0ZVNwbGl0RWRnZXModCk7dmFyIGU9bmV3IENuKG5ldyBPbik7ZS5hZGRFZGdlcyh0KSx0aGlzLnNldEludGVyaW9yRWRnZXNJblJlc3VsdChlKSxlLmxpbmtSZXN1bHREaXJlY3RlZEVkZ2VzKCk7dmFyIG49dGhpcy5idWlsZEVkZ2VSaW5ncyhlLmdldEVkZ2VFbmRzKCkpO3JldHVybiB0aGlzLnZpc2l0U2hlbGxJbnRlcmlvcnModGhpcy5nZW9tR3JhcGguZ2V0R2VvbWV0cnkoKSxlKSwhdGhpcy5oYXNVbnZpc2l0ZWRTaGVsbEVkZ2Uobil9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIERyfX0pLERyLmZpbmREaWZmZXJlbnRQb2ludD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWlmKCF0W25dLmVxdWFscyhlKSlyZXR1cm4gdFtuXTtyZXR1cm4gbnVsbH0sZShBci5wcm90b3R5cGUse2NyZWF0ZUVkZ2VFbmRGb3JOZXh0OmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPW4uc2VnbWVudEluZGV4KzE7aWYocj49dC5nZXROdW1Qb2ludHMoKSYmbnVsbD09PWkpcmV0dXJuIG51bGw7dmFyIHM9dC5nZXRDb29yZGluYXRlKHIpO251bGwhPT1pJiZpLnNlZ21lbnRJbmRleD09PW4uc2VnbWVudEluZGV4JiYocz1pLmNvb3JkKTt2YXIgbz1uZXcgRW4odCxuLmNvb3JkLHMsbmV3IGduKHQuZ2V0TGFiZWwoKSkpO2UuYWRkKG8pfSxjcmVhdGVFZGdlRW5kRm9yUHJldjpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj1uLnNlZ21lbnRJbmRleDtpZigwPT09bi5kaXN0KXtpZigwPT09cilyZXR1cm4gbnVsbDtyLS19dmFyIHM9dC5nZXRDb29yZGluYXRlKHIpO251bGwhPT1pJiZpLnNlZ21lbnRJbmRleD49ciYmKHM9aS5jb29yZCk7dmFyIG89bmV3IGduKHQuZ2V0TGFiZWwoKSk7by5mbGlwKCk7dmFyIGE9bmV3IEVuKHQsbi5jb29yZCxzLG8pO2UuYWRkKGEpfSxjb21wdXRlRWRnZUVuZHM6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPW5ldyBJLG49dDtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO3RoaXMuY29tcHV0ZUVkZ2VFbmRzKGksZSl9cmV0dXJuIGV9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciByPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxvPXIuZ2V0RWRnZUludGVyc2VjdGlvbkxpc3QoKTtvLmFkZEVuZHBvaW50cygpO3ZhciBhPW8uaXRlcmF0b3IoKSx1PW51bGwsbD1udWxsO2lmKCFhLmhhc05leHQoKSlyZXR1cm4gbnVsbDt2YXIgaD1hLm5leHQoKTtkbyB1PWwsbD1oLGg9bnVsbCxhLmhhc05leHQoKSYmKGg9YS5uZXh0KCkpLG51bGwhPT1sJiYodGhpcy5jcmVhdGVFZGdlRW5kRm9yUHJldihyLHMsbCx1KSx0aGlzLmNyZWF0ZUVkZ2VFbmRGb3JOZXh0KHIscyxsLGgpKTt3aGlsZShudWxsIT09bCl9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBBcn19KSxoKEZyLEVuKSxlKEZyLnByb3RvdHlwZSx7aW5zZXJ0OmZ1bmN0aW9uKHQpe3RoaXMuZWRnZUVuZHMuYWRkKHQpfSxwcmludDpmdW5jdGlvbih0KXt0LnByaW50bG4oXCJFZGdlRW5kQnVuZGxlLS0+IExhYmVsOiBcIit0aGlzLmxhYmVsKTtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bi5wcmludCh0KSx0LnByaW50bG4oKX19LGl0ZXJhdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZUVuZHMuaXRlcmF0b3IoKX0sZ2V0RWRnZUVuZHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGdlRW5kc30sY29tcHV0ZUxhYmVsT246ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MCxpPSExLHI9dGhpcy5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7dmFyIHM9ci5uZXh0KCksbz1zLmdldExhYmVsKCkuZ2V0TG9jYXRpb24odCk7bz09PUwuQk9VTkRBUlkmJm4rKyxvPT09TC5JTlRFUklPUiYmKGk9ITApfXZhciBvPUwuTk9ORTtpJiYobz1MLklOVEVSSU9SKSxuPjAmJihvPSRuLmRldGVybWluZUJvdW5kYXJ5KGUsbikpLHRoaXMubGFiZWwuc2V0TG9jYXRpb24odCxvKX0sY29tcHV0ZUxhYmVsU2lkZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10aGlzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZihpLmdldExhYmVsKCkuaXNBcmVhKCkpe3ZhciByPWkuZ2V0TGFiZWwoKS5nZXRMb2NhdGlvbih0LGUpO2lmKHI9PT1MLklOVEVSSU9SKXJldHVybiB0aGlzLmxhYmVsLnNldExvY2F0aW9uKHQsZSxMLklOVEVSSU9SKSxudWxsO3I9PT1MLkVYVEVSSU9SJiZ0aGlzLmxhYmVsLnNldExvY2F0aW9uKHQsZSxMLkVYVEVSSU9SKX19fSxnZXRMYWJlbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxhYmVsfSxjb21wdXRlTGFiZWxTaWRlczpmdW5jdGlvbih0KXt0aGlzLmNvbXB1dGVMYWJlbFNpZGUodCxjbi5MRUZUKSx0aGlzLmNvbXB1dGVMYWJlbFNpZGUodCxjbi5SSUdIVCl9LHVwZGF0ZUlNOmZ1bmN0aW9uKHQpe0puLnVwZGF0ZUlNKHRoaXMubGFiZWwsdCl9LGNvbXB1dGVMYWJlbDpmdW5jdGlvbih0KXtmb3IodmFyIGU9ITEsbj10aGlzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpLmdldExhYmVsKCkuaXNBcmVhKCkmJihlPSEwKX1lP3RoaXMubGFiZWw9bmV3IGduKEwuTk9ORSxMLk5PTkUsTC5OT05FKTp0aGlzLmxhYmVsPW5ldyBnbihMLk5PTkUpO2Zvcih2YXIgcj0wO3I8MjtyKyspdGhpcy5jb21wdXRlTGFiZWxPbihyLHQpLGUmJnRoaXMuY29tcHV0ZUxhYmVsU2lkZXMocil9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEZyfX0pLGgoR3IsUG4pLGUoR3IucHJvdG90eXBlLHt1cGRhdGVJTTpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bi51cGRhdGVJTSh0KX19LGluc2VydDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmVkZ2VNYXAuZ2V0KHQpO251bGw9PT1lPyhlPW5ldyBGcih0KSx0aGlzLmluc2VydEVkZ2VFbmQodCxlKSk6ZS5pbnNlcnQodCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEdyfX0pLGgocXIseW4pLGUocXIucHJvdG90eXBlLHt1cGRhdGVJTUZyb21FZGdlczpmdW5jdGlvbih0KXt0aGlzLmVkZ2VzLnVwZGF0ZUlNKHQpfSxjb21wdXRlSU06ZnVuY3Rpb24odCl7dC5zZXRBdExlYXN0SWZWYWxpZCh0aGlzLmxhYmVsLmdldExvY2F0aW9uKDApLHRoaXMubGFiZWwuZ2V0TG9jYXRpb24oMSksMCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHFyfX0pLGgoQnIsTm4pLGUoQnIucHJvdG90eXBlLHtjcmVhdGVOb2RlOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgcXIodCxuZXcgR3IpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBCcn19KSxlKHpyLnByb3RvdHlwZSx7aW5zZXJ0RWRnZUVuZHM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3RoaXMubm9kZXMuYWRkKG4pfX0sZ2V0Tm9kZUl0ZXJhdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXMuaXRlcmF0b3IoKX0sY29weU5vZGVzQW5kTGFiZWxzOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuZ2V0Tm9kZUl0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKSxyPXRoaXMubm9kZXMuYWRkTm9kZShpLmdldENvb3JkaW5hdGUoKSk7ci5zZXRMYWJlbChlLGkuZ2V0TGFiZWwoKS5nZXRMb2NhdGlvbihlKSl9fSxidWlsZDpmdW5jdGlvbih0KXt0aGlzLmNvbXB1dGVJbnRlcnNlY3Rpb25Ob2Rlcyh0LDApLHRoaXMuY29weU5vZGVzQW5kTGFiZWxzKHQsMCk7dmFyIGU9bmV3IEFyLG49ZS5jb21wdXRlRWRnZUVuZHModC5nZXRFZGdlSXRlcmF0b3IoKSk7dGhpcy5pbnNlcnRFZGdlRW5kcyhuKX0sY29tcHV0ZUludGVyc2VjdGlvbk5vZGVzOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuZ2V0RWRnZUl0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KWZvcih2YXIgaT1uLm5leHQoKSxyPWkuZ2V0TGFiZWwoKS5nZXRMb2NhdGlvbihlKSxzPWkuZ2V0RWRnZUludGVyc2VjdGlvbkxpc3QoKS5pdGVyYXRvcigpO3MuaGFzTmV4dCgpOyl7dmFyIG89cy5uZXh0KCksYT10aGlzLm5vZGVzLmFkZE5vZGUoby5jb29yZCk7cj09PUwuQk9VTkRBUlk/YS5zZXRMYWJlbEJvdW5kYXJ5KGUpOmEuZ2V0TGFiZWwoKS5pc051bGwoZSkmJmEuc2V0TGFiZWwoZSxMLklOVEVSSU9SKX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHpyfX0pLGUoVnIucHJvdG90eXBlLHtpc05vZGVFZGdlQXJlYUxhYmVsc0NvbnNpc3RlbnQ6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ub2RlR3JhcGguZ2V0Tm9kZUl0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTtpZighZS5nZXRFZGdlcygpLmlzQXJlYUxhYmVsc0NvbnNpc3RlbnQodGhpcy5nZW9tR3JhcGgpKXJldHVybiB0aGlzLmludmFsaWRQb2ludD1lLmdldENvb3JkaW5hdGUoKS5jb3B5KCksITF9cmV0dXJuITB9LGdldEludmFsaWRQb2ludDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmludmFsaWRQb2ludH0saGFzRHVwbGljYXRlUmluZ3M6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ub2RlR3JhcGguZ2V0Tm9kZUl0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KWZvcih2YXIgZT10Lm5leHQoKSxuPWUuZ2V0RWRnZXMoKS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7aWYoaS5nZXRFZGdlRW5kcygpLnNpemUoKT4xKXJldHVybiB0aGlzLmludmFsaWRQb2ludD1pLmdldEVkZ2UoKS5nZXRDb29yZGluYXRlKDApLCEwfXJldHVybiExfSxpc05vZGVDb25zaXN0ZW50QXJlYTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2VvbUdyYXBoLmNvbXB1dGVTZWxmTm9kZXModGhpcy5saSwhMCwhMCk7cmV0dXJuIHQuaGFzUHJvcGVySW50ZXJzZWN0aW9uKCk/KHRoaXMuaW52YWxpZFBvaW50PXQuZ2V0UHJvcGVySW50ZXJzZWN0aW9uUG9pbnQoKSwhMSk6KHRoaXMubm9kZUdyYXBoLmJ1aWxkKHRoaXMuZ2VvbUdyYXBoKSx0aGlzLmlzTm9kZUVkZ2VBcmVhTGFiZWxzQ29uc2lzdGVudCgpKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gVnJ9fSksZShrci5wcm90b3R5cGUse2J1aWxkSW5kZXg6ZnVuY3Rpb24oKXt0aGlzLmluZGV4PW5ldyBrZTtmb3IodmFyIHQ9MDt0PHRoaXMucmluZ3Muc2l6ZSgpO3QrKyl7dmFyIGU9dGhpcy5yaW5ncy5nZXQodCksbj1lLmdldEVudmVsb3BlSW50ZXJuYWwoKTt0aGlzLmluZGV4Lmluc2VydChuLGUpfX0sZ2V0TmVzdGVkUG9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXN0ZWRQdH0saXNOb25OZXN0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmJ1aWxkSW5kZXgoKTtmb3IodmFyIHQ9MDt0PHRoaXMucmluZ3Muc2l6ZSgpO3QrKylmb3IodmFyIGU9dGhpcy5yaW5ncy5nZXQodCksbj1lLmdldENvb3JkaW5hdGVzKCksaT10aGlzLmluZGV4LnF1ZXJ5KGUuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSxyPTA7cjxpLnNpemUoKTtyKyspe3ZhciBzPWkuZ2V0KHIpLG89cy5nZXRDb29yZGluYXRlcygpO2lmKGUhPT1zJiZlLmdldEVudmVsb3BlSW50ZXJuYWwoKS5pbnRlcnNlY3RzKHMuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSl7dmFyIGE9VXIuZmluZFB0Tm90Tm9kZShuLHMsdGhpcy5ncmFwaCk7aWYobnVsbCE9PWEpe3ZhciB1PWhlLmlzUG9pbnRJblJpbmcoYSxvKTtpZih1KXJldHVybiB0aGlzLm5lc3RlZFB0PWEsITF9fX1yZXR1cm4hMH0sYWRkOmZ1bmN0aW9uKHQpe3RoaXMucmluZ3MuYWRkKHQpLHRoaXMudG90YWxFbnYuZXhwYW5kVG9JbmNsdWRlKHQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4ga3J9fSksZShZci5wcm90b3R5cGUse2dldEVycm9yVHlwZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVycm9yVHlwZX0sZ2V0TWVzc2FnZTpmdW5jdGlvbigpe3JldHVybiBZci5lcnJNc2dbdGhpcy5lcnJvclR5cGVdfSxnZXRDb29yZGluYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHR9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9XCJcIjtyZXR1cm4gbnVsbCE9PXRoaXMucHQmJih0PVwiIGF0IG9yIG5lYXIgcG9pbnQgXCIrdGhpcy5wdCksdGhpcy5nZXRNZXNzYWdlKCkrdH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gWXJ9fSksWXIuRVJST1I9MCxZci5SRVBFQVRFRF9QT0lOVD0xLFlyLkhPTEVfT1VUU0lERV9TSEVMTD0yLFlyLk5FU1RFRF9IT0xFUz0zLFlyLkRJU0NPTk5FQ1RFRF9JTlRFUklPUj00LFlyLlNFTEZfSU5URVJTRUNUSU9OPTUsWXIuUklOR19TRUxGX0lOVEVSU0VDVElPTj02LFlyLk5FU1RFRF9TSEVMTFM9NyxZci5EVVBMSUNBVEVfUklOR1M9OCxZci5UT09fRkVXX1BPSU5UUz05LFlyLklOVkFMSURfQ09PUkRJTkFURT0xMCxZci5SSU5HX05PVF9DTE9TRUQ9MTEsWXIuZXJyTXNnPVtcIlRvcG9sb2d5IFZhbGlkYXRpb24gRXJyb3JcIixcIlJlcGVhdGVkIFBvaW50XCIsXCJIb2xlIGxpZXMgb3V0c2lkZSBzaGVsbFwiLFwiSG9sZXMgYXJlIG5lc3RlZFwiLFwiSW50ZXJpb3IgaXMgZGlzY29ubmVjdGVkXCIsXCJTZWxmLWludGVyc2VjdGlvblwiLFwiUmluZyBTZWxmLWludGVyc2VjdGlvblwiLFwiTmVzdGVkIHNoZWxsc1wiLFwiRHVwbGljYXRlIFJpbmdzXCIsXCJUb28gZmV3IGRpc3RpbmN0IHBvaW50cyBpbiBnZW9tZXRyeSBjb21wb25lbnRcIixcIkludmFsaWQgQ29vcmRpbmF0ZVwiLFwiUmluZyBpcyBub3QgY2xvc2VkXCJdLGUoVXIucHJvdG90eXBlLHtjaGVja0ludmFsaWRDb29yZGluYXRlczpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQXJyYXkpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0wO2U8dC5sZW5ndGg7ZSsrKWlmKCFVci5pc1ZhbGlkKHRbZV0pKXJldHVybiB0aGlzLnZhbGlkRXJyPW5ldyBZcihZci5JTlZBTElEX0NPT1JESU5BVEUsdFtlXSksbnVsbH1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgVHQpe3ZhciBuPWFyZ3VtZW50c1swXTtpZih0aGlzLmNoZWNrSW52YWxpZENvb3JkaW5hdGVzKG4uZ2V0RXh0ZXJpb3JSaW5nKCkuZ2V0Q29vcmRpbmF0ZXMoKSksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7Zm9yKHZhciBlPTA7ZTxuLmdldE51bUludGVyaW9yUmluZygpO2UrKylpZih0aGlzLmNoZWNrSW52YWxpZENvb3JkaW5hdGVzKG4uZ2V0SW50ZXJpb3JSaW5nTihlKS5nZXRDb29yZGluYXRlcygpKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbH19LGNoZWNrSG9sZXNOb3ROZXN0ZWQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IGtyKGUpLGk9MDtpPHQuZ2V0TnVtSW50ZXJpb3JSaW5nKCk7aSsrKXt2YXIgcj10LmdldEludGVyaW9yUmluZ04oaSk7bi5hZGQocil9dmFyIHM9bi5pc05vbk5lc3RlZCgpO3N8fCh0aGlzLnZhbGlkRXJyPW5ldyBZcihZci5ORVNURURfSE9MRVMsbi5nZXROZXN0ZWRQb2ludCgpKSl9LGNoZWNrQ29uc2lzdGVudEFyZWE6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFZyKHQpLG49ZS5pc05vZGVDb25zaXN0ZW50QXJlYSgpO3JldHVybiBuP3ZvaWQoZS5oYXNEdXBsaWNhdGVSaW5ncygpJiYodGhpcy52YWxpZEVycj1uZXcgWXIoWXIuRFVQTElDQVRFX1JJTkdTLGUuZ2V0SW52YWxpZFBvaW50KCkpKSk6KHRoaXMudmFsaWRFcnI9bmV3IFlyKFlyLlNFTEZfSU5URVJTRUNUSU9OLGUuZ2V0SW52YWxpZFBvaW50KCkpLG51bGwpfSxpc1ZhbGlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hlY2tWYWxpZCh0aGlzLnBhcmVudEdlb21ldHJ5KSxudWxsPT09dGhpcy52YWxpZEVycn0sY2hlY2tTaGVsbEluc2lkZUhvbGU6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQuZ2V0Q29vcmRpbmF0ZXMoKSxyPWUuZ2V0Q29vcmRpbmF0ZXMoKSxzPVVyLmZpbmRQdE5vdE5vZGUoaSxlLG4pO2lmKG51bGwhPT1zKXt2YXIgbz1oZS5pc1BvaW50SW5SaW5nKHMscik7aWYoIW8pcmV0dXJuIHN9dmFyIGE9VXIuZmluZFB0Tm90Tm9kZShyLHQsbik7aWYobnVsbCE9PWEpe3ZhciB1PWhlLmlzUG9pbnRJblJpbmcoYSxpKTtyZXR1cm4gdT9hOm51bGx9cmV0dXJuIGYuc2hvdWxkTmV2ZXJSZWFjaEhlcmUoXCJwb2ludHMgaW4gc2hlbGwgYW5kIGhvbGUgYXBwZWFyIHRvIGJlIGVxdWFsXCIpLG51bGx9LGNoZWNrTm9TZWxmSW50ZXJzZWN0aW5nUmluZ3M6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuZ2V0RWRnZUl0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTtpZih0aGlzLmNoZWNrTm9TZWxmSW50ZXJzZWN0aW5nUmluZyhuLmdldEVkZ2VJbnRlcnNlY3Rpb25MaXN0KCkpLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsfX0sY2hlY2tDb25uZWN0ZWRJbnRlcmlvcnM6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IERyKHQpO2UuaXNJbnRlcmlvcnNDb25uZWN0ZWQoKXx8KHRoaXMudmFsaWRFcnI9bmV3IFlyKFlyLkRJU0NPTk5FQ1RFRF9JTlRFUklPUixlLmdldENvb3JkaW5hdGUoKSkpfSxjaGVja05vU2VsZkludGVyc2VjdGluZ1Jpbmc6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBhdCxuPSEwLGk9dC5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7aWYobiluPSExO2Vsc2V7aWYoZS5jb250YWlucyhyLmNvb3JkKSlyZXR1cm4gdGhpcy52YWxpZEVycj1uZXcgWXIoWXIuUklOR19TRUxGX0lOVEVSU0VDVElPTixyLmNvb3JkKSxudWxsO2UuYWRkKHIuY29vcmQpfX19LGNoZWNrSG9sZXNJblNoZWxsOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuZ2V0RXh0ZXJpb3JSaW5nKCksaT1uZXcgSWkobikscj0wO3I8dC5nZXROdW1JbnRlcmlvclJpbmcoKTtyKyspe3ZhciBzPXQuZ2V0SW50ZXJpb3JSaW5nTihyKSxvPVVyLmZpbmRQdE5vdE5vZGUocy5nZXRDb29yZGluYXRlcygpLG4sZSk7aWYobnVsbD09PW8pcmV0dXJuIG51bGw7dmFyIGE9IWkuaXNJbnNpZGUobyk7aWYoYSlyZXR1cm4gdGhpcy52YWxpZEVycj1uZXcgWXIoWXIuSE9MRV9PVVRTSURFX1NIRUxMLG8pLG51bGx9fSxjaGVja1Rvb0Zld1BvaW50czpmdW5jdGlvbih0KXtpZih0Lmhhc1Rvb0Zld1BvaW50cygpKXJldHVybiB0aGlzLnZhbGlkRXJyPW5ldyBZcihZci5UT09fRkVXX1BPSU5UUyx0LmdldEludmFsaWRQb2ludCgpKSxudWxsfSxnZXRWYWxpZGF0aW9uRXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGVja1ZhbGlkKHRoaXMucGFyZW50R2VvbWV0cnkpLHRoaXMudmFsaWRFcnJ9LGNoZWNrVmFsaWQ6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEx0KXt2YXIgdD1hcmd1bWVudHNbMF07dGhpcy5jaGVja0ludmFsaWRDb29yZGluYXRlcyh0LmdldENvb3JkaW5hdGVzKCkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBQdCl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuY2hlY2tJbnZhbGlkQ29vcmRpbmF0ZXMoZS5nZXRDb29yZGluYXRlcygpKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgYnQpe3ZhciBuPWFyZ3VtZW50c1swXTtpZih0aGlzLmNoZWNrSW52YWxpZENvb3JkaW5hdGVzKG4uZ2V0Q29vcmRpbmF0ZXMoKSksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7aWYodGhpcy5jaGVja0Nsb3NlZFJpbmcobiksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7dmFyIGk9bmV3ICRuKDAsbik7aWYodGhpcy5jaGVja1Rvb0Zld1BvaW50cyhpKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbDt2YXIgcj1uZXcgYWU7aS5jb21wdXRlU2VsZk5vZGVzKHIsITAsITApLHRoaXMuY2hlY2tOb1NlbGZJbnRlcnNlY3RpbmdSaW5ncyhpKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgU3Qpe3ZhciBzPWFyZ3VtZW50c1swXTtpZih0aGlzLmNoZWNrSW52YWxpZENvb3JkaW5hdGVzKHMuZ2V0Q29vcmRpbmF0ZXMoKSksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7dmFyIGk9bmV3ICRuKDAscyk7dGhpcy5jaGVja1Rvb0Zld1BvaW50cyhpKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgVHQpe3ZhciBvPWFyZ3VtZW50c1swXTtpZih0aGlzLmNoZWNrSW52YWxpZENvb3JkaW5hdGVzKG8pLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsO2lmKHRoaXMuY2hlY2tDbG9zZWRSaW5ncyhvKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbDt2YXIgaT1uZXcgJG4oMCxvKTtpZih0aGlzLmNoZWNrVG9vRmV3UG9pbnRzKGkpLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsO2lmKHRoaXMuY2hlY2tDb25zaXN0ZW50QXJlYShpKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbDtpZighdGhpcy5pc1NlbGZUb3VjaGluZ1JpbmdGb3JtaW5nSG9sZVZhbGlkJiYodGhpcy5jaGVja05vU2VsZkludGVyc2VjdGluZ1JpbmdzKGkpLG51bGwhPT10aGlzLnZhbGlkRXJyKSlyZXR1cm4gbnVsbDtpZih0aGlzLmNoZWNrSG9sZXNJblNoZWxsKG8saSksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7aWYodGhpcy5jaGVja0hvbGVzTm90TmVzdGVkKG8saSksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7dGhpcy5jaGVja0Nvbm5lY3RlZEludGVyaW9ycyhpKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgT3Qpe2Zvcih2YXIgYT1hcmd1bWVudHNbMF0sdT0wO3U8YS5nZXROdW1HZW9tZXRyaWVzKCk7dSsrKXt2YXIgbD1hLmdldEdlb21ldHJ5Tih1KTtpZih0aGlzLmNoZWNrSW52YWxpZENvb3JkaW5hdGVzKGwpLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsO2lmKHRoaXMuY2hlY2tDbG9zZWRSaW5ncyhsKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbH12YXIgaT1uZXcgJG4oMCxhKTtpZih0aGlzLmNoZWNrVG9vRmV3UG9pbnRzKGkpLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsO2lmKHRoaXMuY2hlY2tDb25zaXN0ZW50QXJlYShpKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbDtpZighdGhpcy5pc1NlbGZUb3VjaGluZ1JpbmdGb3JtaW5nSG9sZVZhbGlkJiYodGhpcy5jaGVja05vU2VsZkludGVyc2VjdGluZ1JpbmdzKGkpLG51bGwhPT10aGlzLnZhbGlkRXJyKSlyZXR1cm4gbnVsbDtmb3IodmFyIHU9MDt1PGEuZ2V0TnVtR2VvbWV0cmllcygpO3UrKyl7dmFyIGw9YS5nZXRHZW9tZXRyeU4odSk7aWYodGhpcy5jaGVja0hvbGVzSW5TaGVsbChsLGkpLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsfWZvcih2YXIgdT0wO3U8YS5nZXROdW1HZW9tZXRyaWVzKCk7dSsrKXt2YXIgbD1hLmdldEdlb21ldHJ5Tih1KTtpZih0aGlzLmNoZWNrSG9sZXNOb3ROZXN0ZWQobCxpKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbH1pZih0aGlzLmNoZWNrU2hlbGxzTm90TmVzdGVkKGEsaSksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7dGhpcy5jaGVja0Nvbm5lY3RlZEludGVyaW9ycyhpKX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZnQpZm9yKHZhciBoPWFyZ3VtZW50c1swXSx1PTA7dTxoLmdldE51bUdlb21ldHJpZXMoKTt1Kyspe3ZhciBjPWguZ2V0R2VvbWV0cnlOKHUpO2lmKHRoaXMuY2hlY2tWYWxpZChjKSxudWxsIT09dGhpcy52YWxpZEVycilyZXR1cm4gbnVsbH1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQil7dmFyIGY9YXJndW1lbnRzWzBdO2lmKHRoaXMudmFsaWRFcnI9bnVsbCxmLmlzRW1wdHkoKSlyZXR1cm4gbnVsbDtpZihmIGluc3RhbmNlb2YgTHQpdGhpcy5jaGVja1ZhbGlkKGYpO2Vsc2UgaWYoZiBpbnN0YW5jZW9mIFB0KXRoaXMuY2hlY2tWYWxpZChmKTtlbHNlIGlmKGYgaW5zdGFuY2VvZiBidCl0aGlzLmNoZWNrVmFsaWQoZik7ZWxzZSBpZihmIGluc3RhbmNlb2YgU3QpdGhpcy5jaGVja1ZhbGlkKGYpO2Vsc2UgaWYoZiBpbnN0YW5jZW9mIFR0KXRoaXMuY2hlY2tWYWxpZChmKTtlbHNlIGlmKGYgaW5zdGFuY2VvZiBPdCl0aGlzLmNoZWNrVmFsaWQoZik7ZWxzZXtpZighKGYgaW5zdGFuY2VvZiBmdCkpdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uKGYuZ2V0Q2xhc3MoKS5nZXROYW1lKCkpO3RoaXMuY2hlY2tWYWxpZChmKX19fSxzZXRTZWxmVG91Y2hpbmdSaW5nRm9ybWluZ0hvbGVWYWxpZDpmdW5jdGlvbih0KXt0aGlzLmlzU2VsZlRvdWNoaW5nUmluZ0Zvcm1pbmdIb2xlVmFsaWQ9dH0sY2hlY2tTaGVsbE5vdE5lc3RlZDpmdW5jdGlvbih0LGUsbil7dmFyIGk9dC5nZXRDb29yZGluYXRlcygpLHI9ZS5nZXRFeHRlcmlvclJpbmcoKSxzPXIuZ2V0Q29vcmRpbmF0ZXMoKSxvPVVyLmZpbmRQdE5vdE5vZGUoaSxyLG4pO2lmKG51bGw9PT1vKXJldHVybiBudWxsO3ZhciBhPWhlLmlzUG9pbnRJblJpbmcobyxzKTtpZighYSlyZXR1cm4gbnVsbDtpZihlLmdldE51bUludGVyaW9yUmluZygpPD0wKXJldHVybiB0aGlzLnZhbGlkRXJyPW5ldyBZcihZci5ORVNURURfU0hFTExTLG8pLG51bGw7Zm9yKHZhciB1PW51bGwsbD0wO2w8ZS5nZXROdW1JbnRlcmlvclJpbmcoKTtsKyspe3ZhciBoPWUuZ2V0SW50ZXJpb3JSaW5nTihsKTtpZih1PXRoaXMuY2hlY2tTaGVsbEluc2lkZUhvbGUodCxoLG4pLG51bGw9PT11KXJldHVybiBudWxsfXRoaXMudmFsaWRFcnI9bmV3IFlyKFlyLk5FU1RFRF9TSEVMTFMsdSl9LGNoZWNrQ2xvc2VkUmluZ3M6ZnVuY3Rpb24odCl7aWYodGhpcy5jaGVja0Nsb3NlZFJpbmcodC5nZXRFeHRlcmlvclJpbmcoKSksbnVsbCE9PXRoaXMudmFsaWRFcnIpcmV0dXJuIG51bGw7Zm9yKHZhciBlPTA7ZTx0LmdldE51bUludGVyaW9yUmluZygpO2UrKylpZih0aGlzLmNoZWNrQ2xvc2VkUmluZyh0LmdldEludGVyaW9yUmluZ04oZSkpLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsfSxjaGVja0Nsb3NlZFJpbmc6ZnVuY3Rpb24odCl7aWYoIXQuaXNDbG9zZWQoKSl7dmFyIGU9bnVsbDt0LmdldE51bVBvaW50cygpPj0xJiYoZT10LmdldENvb3JkaW5hdGVOKDApKSx0aGlzLnZhbGlkRXJyPW5ldyBZcihZci5SSU5HX05PVF9DTE9TRUQsZSl9fSxjaGVja1NoZWxsc05vdE5lc3RlZDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248dC5nZXROdW1HZW9tZXRyaWVzKCk7bisrKWZvcih2YXIgaT10LmdldEdlb21ldHJ5TihuKSxyPWkuZ2V0RXh0ZXJpb3JSaW5nKCkscz0wO3M8dC5nZXROdW1HZW9tZXRyaWVzKCk7cysrKWlmKG4hPT1zKXt2YXIgbz10LmdldEdlb21ldHJ5TihzKTtpZih0aGlzLmNoZWNrU2hlbGxOb3ROZXN0ZWQocixvLGUpLG51bGwhPT10aGlzLnZhbGlkRXJyKXJldHVybiBudWxsfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gVXJ9fSksVXIuZmluZFB0Tm90Tm9kZT1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPW4uZmluZEVkZ2UoZSkscj1pLmdldEVkZ2VJbnRlcnNlY3Rpb25MaXN0KCkscz0wO3M8dC5sZW5ndGg7cysrKXt2YXIgbz10W3NdO2lmKCFyLmlzSW50ZXJzZWN0aW9uKG8pKXJldHVybiBvfXJldHVybiBudWxsfSxVci5pc1ZhbGlkPWZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1uZXcgVXIodCk7cmV0dXJuIGUuaXNWYWxpZCgpfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgZyl7dmFyIG49YXJndW1lbnRzWzBdO3JldHVybiFyLmlzTmFOKG4ueCkmJighci5pc0luZmluaXRlKG4ueCkmJighci5pc05hTihuLnkpJiYhci5pc0luZmluaXRlKG4ueSkpKX19LGUoWHIucHJvdG90eXBlLHtpc0luY2x1ZGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzSW5jbHVkZWR9LGdldENvb3JkaW5hdGVzOmZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMucmluZ1B0cyl7Zm9yKHZhciB0PW5ldyBOLGU9dGhpcy5kZUxpc3QuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLGk9bi5nZXRFZGdlKCk7WHIuYWRkRWRnZShpLmdldExpbmUoKS5nZXRDb29yZGluYXRlcygpLG4uZ2V0RWRnZURpcmVjdGlvbigpLHQpfXRoaXMucmluZ1B0cz10LnRvQ29vcmRpbmF0ZUFycmF5KCl9cmV0dXJuIHRoaXMucmluZ1B0c30saXNJbmNsdWRlZFNldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc0luY2x1ZGVkU2V0fSxpc1ZhbGlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0Q29vcmRpbmF0ZXMoKSwhKHRoaXMucmluZ1B0cy5sZW5ndGg8PTMpJiYodGhpcy5nZXRSaW5nKCksVXIuaXNWYWxpZCh0aGlzLnJpbmcpKX0sYnVpbGQ6ZnVuY3Rpb24odCl7dmFyIGU9dDtkbyB0aGlzLmFkZChlKSxlLnNldFJpbmcodGhpcyksZT1lLmdldE5leHQoKSxmLmlzVHJ1ZShudWxsIT09ZSxcImZvdW5kIG51bGwgREUgaW4gcmluZ1wiKSxmLmlzVHJ1ZShlPT09dHx8IWUuaXNJblJpbmcoKSxcImZvdW5kIERFIGFscmVhZHkgaW4gcmluZ1wiKTt3aGlsZShlIT09dCl9LGlzT3V0ZXJIb2xlOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLl9pc0hvbGUmJiF0aGlzLmhhc1NoZWxsKCl9LGdldFBvbHlnb246ZnVuY3Rpb24oKXt2YXIgdD1udWxsO2lmKG51bGwhPT10aGlzLmhvbGVzKXt0PW5ldyBBcnJheSh0aGlzLmhvbGVzLnNpemUoKSkuZmlsbChudWxsKTtmb3IodmFyIGU9MDtlPHRoaXMuaG9sZXMuc2l6ZSgpO2UrKyl0W2VdPXRoaXMuaG9sZXMuZ2V0KGUpfXZhciBuPXRoaXMuZmFjdG9yeS5jcmVhdGVQb2x5Z29uKHRoaXMucmluZyx0KTtyZXR1cm4gbn0saXNIb2xlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzSG9sZX0saXNQcm9jZXNzZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNQcm9jZXNzZWR9LGFkZEhvbGU6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGJ0KXt2YXIgdD1hcmd1bWVudHNbMF07bnVsbD09PXRoaXMuaG9sZXMmJih0aGlzLmhvbGVzPW5ldyBJKSx0aGlzLmhvbGVzLmFkZCh0KX1lbHNlIGlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgWHIpe3ZhciBlPWFyZ3VtZW50c1swXTtlLnNldFNoZWxsKHRoaXMpO3ZhciBuPWUuZ2V0UmluZygpO251bGw9PT10aGlzLmhvbGVzJiYodGhpcy5ob2xlcz1uZXcgSSksdGhpcy5ob2xlcy5hZGQobil9fSxzZXRJbmNsdWRlZDpmdW5jdGlvbih0KXt0aGlzLl9pc0luY2x1ZGVkPXQsdGhpcy5faXNJbmNsdWRlZFNldD0hMH0sZ2V0T3V0ZXJIb2xlOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0hvbGUoKSlyZXR1cm4gbnVsbDtmb3IodmFyIHQ9MDt0PHRoaXMuZGVMaXN0LnNpemUoKTt0Kyspe3ZhciBlPXRoaXMuZGVMaXN0LmdldCh0KSxuPWUuZ2V0U3ltKCkuZ2V0UmluZygpO2lmKG4uaXNPdXRlckhvbGUoKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0sY29tcHV0ZUhvbGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFJpbmcoKTt0aGlzLl9pc0hvbGU9aGUuaXNDQ1codC5nZXRDb29yZGluYXRlcygpKX0saGFzU2hlbGw6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuc2hlbGx9LGlzT3V0ZXJTaGVsbDpmdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5nZXRPdXRlckhvbGUoKX0sZ2V0TGluZVN0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldENvb3JkaW5hdGVzKCksdGhpcy5mYWN0b3J5LmNyZWF0ZUxpbmVTdHJpbmcodGhpcy5yaW5nUHRzKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gc2UudG9MaW5lU3RyaW5nKG5ldyBHdCh0aGlzLmdldENvb3JkaW5hdGVzKCkpKX0sZ2V0U2hlbGw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0hvbGUoKT90aGlzLnNoZWxsOnRoaXN9LGFkZDpmdW5jdGlvbih0KXt0aGlzLmRlTGlzdC5hZGQodCl9LGdldFJpbmc6ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5yaW5nKXJldHVybiB0aGlzLnJpbmc7dGhpcy5nZXRDb29yZGluYXRlcygpLHRoaXMucmluZ1B0cy5sZW5ndGg8MyYmQS5vdXQucHJpbnRsbih0aGlzLnJpbmdQdHMpO3RyeXt0aGlzLnJpbmc9dGhpcy5mYWN0b3J5LmNyZWF0ZUxpbmVhclJpbmcodGhpcy5yaW5nUHRzKX1jYXRjaCh0KXtpZighKHQgaW5zdGFuY2VvZiBTKSl0aHJvdyB0O0Eub3V0LnByaW50bG4odGhpcy5yaW5nUHRzKX1maW5hbGx5e31yZXR1cm4gdGhpcy5yaW5nfSx1cGRhdGVJbmNsdWRlZDpmdW5jdGlvbigpe2lmKHRoaXMuaXNIb2xlKCkpcmV0dXJuIG51bGw7Zm9yKHZhciB0PTA7dDx0aGlzLmRlTGlzdC5zaXplKCk7dCsrKXt2YXIgZT10aGlzLmRlTGlzdC5nZXQodCksbj1lLmdldFN5bSgpLmdldFJpbmcoKS5nZXRTaGVsbCgpO2lmKG51bGwhPT1uJiZuLmlzSW5jbHVkZWRTZXQoKSlyZXR1cm4gdGhpcy5zZXRJbmNsdWRlZCghbi5pc0luY2x1ZGVkKCkpLG51bGx9fSxzZXRTaGVsbDpmdW5jdGlvbih0KXt0aGlzLnNoZWxsPXR9LHNldFByb2Nlc3NlZDpmdW5jdGlvbih0KXt0aGlzLl9pc1Byb2Nlc3NlZD10fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBYcn19KSxYci5maW5kRGlyRWRnZXNJblJpbmc9ZnVuY3Rpb24odCl7dmFyIGU9dCxuPW5ldyBJO2RvIG4uYWRkKGUpLGU9ZS5nZXROZXh0KCksZi5pc1RydWUobnVsbCE9PWUsXCJmb3VuZCBudWxsIERFIGluIHJpbmdcIiksZi5pc1RydWUoZT09PXR8fCFlLmlzSW5SaW5nKCksXCJmb3VuZCBERSBhbHJlYWR5IGluIHJpbmdcIik7d2hpbGUoZSE9PXQpO3JldHVybiBufSxYci5hZGRFZGdlPWZ1bmN0aW9uKHQsZSxuKXtpZihlKWZvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKW4uYWRkKHRbaV0sITEpO2Vsc2UgZm9yKHZhciBpPXQubGVuZ3RoLTE7aT49MDtpLS0pbi5hZGQodFtpXSwhMSl9LFhyLmZpbmRFZGdlUmluZ0NvbnRhaW5pbmc9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5nZXRSaW5nKCksaT1uLmdldEVudmVsb3BlSW50ZXJuYWwoKSxyPW4uZ2V0Q29vcmRpbmF0ZU4oMCkscz1udWxsLG89bnVsbCxhPWUuaXRlcmF0b3IoKTthLmhhc05leHQoKTspe3ZhciB1PWEubmV4dCgpLGw9dS5nZXRSaW5nKCksaD1sLmdldEVudmVsb3BlSW50ZXJuYWwoKTtpZighaC5lcXVhbHMoaSkmJmguY29udGFpbnMoaSkpe3I9SC5wdE5vdEluTGlzdChuLmdldENvb3JkaW5hdGVzKCksbC5nZXRDb29yZGluYXRlcygpKTt2YXIgYz0hMTtoZS5pc1BvaW50SW5SaW5nKHIsbC5nZXRDb29yZGluYXRlcygpKSYmKGM9ITApLGMmJihudWxsPT09c3x8by5jb250YWlucyhoKSkmJihzPXUsbz1zLmdldFJpbmcoKS5nZXRFbnZlbG9wZUludGVybmFsKCkpfX1yZXR1cm4gc30sZShIci5wcm90b3R5cGUse2NvbXBhcmU6ZnVuY3Rpb24odCxlKXt2YXIgbj10LGk9ZTtyZXR1cm4gbi5nZXRSaW5nKCkuZ2V0RW52ZWxvcGUoKS5jb21wYXJlVG8oaS5nZXRSaW5nKCkuZ2V0RW52ZWxvcGUoKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2FdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBIcn19KSxYci5FbnZlbG9wZUNvbXBhcmF0b3I9SHIsaChXcixQciksZShXci5wcm90b3R5cGUse2ZpbmRFZGdlUmluZzpmdW5jdGlvbih0KXt2YXIgZT1uZXcgWHIodGhpcy5mYWN0b3J5KTtyZXR1cm4gZS5idWlsZCh0KSxlfSxjb21wdXRlRGVwdGhQYXJpdHk6ZnVuY3Rpb24oKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClmb3IoOzspe3ZhciB0PW51bGw7aWYobnVsbD09PXQpcmV0dXJuIG51bGw7dGhpcy5jb21wdXRlRGVwdGhQYXJpdHkodCl9ZWxzZSBpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7YXJndW1lbnRzWzBdfX0sY29tcHV0ZU5leHRDV0VkZ2VzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMubm9kZUl0ZXJhdG9yKCk7dC5oYXNOZXh0KCk7KXt2YXIgZT10Lm5leHQoKTtXci5jb21wdXRlTmV4dENXRWRnZXMoZSl9fSxhZGRFZGdlOmZ1bmN0aW9uKHQpe2lmKHQuaXNFbXB0eSgpKXJldHVybiBudWxsO3ZhciBlPUgucmVtb3ZlUmVwZWF0ZWRQb2ludHModC5nZXRDb29yZGluYXRlcygpKTtpZihlLmxlbmd0aDwyKXJldHVybiBudWxsO3ZhciBuPWVbMF0saT1lW2UubGVuZ3RoLTFdLHI9dGhpcy5nZXROb2RlKG4pLHM9dGhpcy5nZXROb2RlKGkpLG89bmV3IF9yKHIscyxlWzFdLCghMCkpLGE9bmV3IF9yKHMscixlW2UubGVuZ3RoLTJdLCghMSkpLHU9bmV3IE1yKHQpO3Uuc2V0RGlyZWN0ZWRFZGdlcyhvLGEpLHRoaXMuYWRkKHUpfSxkZWxldGVDdXRFZGdlczpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZU5leHRDV0VkZ2VzKCksV3IuZmluZExhYmVsZWRFZGdlUmluZ3ModGhpcy5kaXJFZGdlcyk7Zm9yKHZhciB0PW5ldyBJLGU9dGhpcy5kaXJFZGdlcy5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7aWYoIW4uaXNNYXJrZWQoKSl7dmFyIGk9bi5nZXRTeW0oKTtpZihuLmdldExhYmVsKCk9PT1pLmdldExhYmVsKCkpe24uc2V0TWFya2VkKCEwKSxpLnNldE1hcmtlZCghMCk7dmFyIHI9bi5nZXRFZGdlKCk7dC5hZGQoci5nZXRMaW5lKCkpfX19cmV0dXJuIHR9LGdldEVkZ2VSaW5nczpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZU5leHRDV0VkZ2VzKCksV3IubGFiZWwodGhpcy5kaXJFZGdlcywtMSk7dmFyIHQ9V3IuZmluZExhYmVsZWRFZGdlUmluZ3ModGhpcy5kaXJFZGdlcyk7dGhpcy5jb252ZXJ0TWF4aW1hbFRvTWluaW1hbEVkZ2VSaW5ncyh0KTtmb3IodmFyIGU9bmV3IEksbj10aGlzLmRpckVkZ2VzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZighaS5pc01hcmtlZCgpJiYhaS5pc0luUmluZygpKXt2YXIgcj10aGlzLmZpbmRFZGdlUmluZyhpKTtlLmFkZChyKX19cmV0dXJuIGV9LGdldE5vZGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5maW5kTm9kZSh0KTtyZXR1cm4gbnVsbD09PWUmJihlPW5ldyBMcih0KSx0aGlzLmFkZChlKSksZX0sY29udmVydE1heGltYWxUb01pbmltYWxFZGdlUmluZ3M6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLGk9bi5nZXRMYWJlbCgpLHI9V3IuZmluZEludGVyc2VjdGlvbk5vZGVzKG4saSk7aWYobnVsbCE9PXIpZm9yKHZhciBzPXIuaXRlcmF0b3IoKTtzLmhhc05leHQoKTspe3ZhciBvPXMubmV4dCgpO1dyLmNvbXB1dGVOZXh0Q0NXRWRnZXMobyxpKX19fSxkZWxldGVEYW5nbGVzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZmluZE5vZGVzT2ZEZWdyZWUoMSksZT1uZXcgSixuPW5ldyBwZSxpPXQuaXRlcmF0b3IoKTtpLmhhc05leHQoKTspbi5wdXNoKGkubmV4dCgpKTtmb3IoOyFuLmlzRW1wdHkoKTspe3ZhciByPW4ucG9wKCk7V3IuZGVsZXRlQWxsRWRnZXMocik7Zm9yKHZhciBzPXIuZ2V0T3V0RWRnZXMoKS5nZXRFZGdlcygpLGk9cy5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIG89aS5uZXh0KCk7by5zZXRNYXJrZWQoITApO3ZhciBhPW8uZ2V0U3ltKCk7bnVsbCE9PWEmJmEuc2V0TWFya2VkKCEwKTt2YXIgdT1vLmdldEVkZ2UoKTtlLmFkZCh1LmdldExpbmUoKSk7dmFyIGw9by5nZXRUb05vZGUoKTsxPT09V3IuZ2V0RGVncmVlTm9uRGVsZXRlZChsKSYmbi5wdXNoKGwpfX1yZXR1cm4gZX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gV3J9fSksV3IuZmluZExhYmVsZWRFZGdlUmluZ3M9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBJLG49MSxpPXQuaXRlcmF0b3IoKTtpLmhhc05leHQoKTspe3ZhciByPWkubmV4dCgpO2lmKCEoci5pc01hcmtlZCgpfHxyLmdldExhYmVsKCk+PTApKXtlLmFkZChyKTt2YXIgcz1Yci5maW5kRGlyRWRnZXNJblJpbmcocik7V3IubGFiZWwocyxuKSxuKyt9fXJldHVybiBlfSxXci5nZXREZWdyZWVOb25EZWxldGVkPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10LmdldE91dEVkZ2VzKCkuZ2V0RWRnZXMoKSxuPTAsaT1lLml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtyLmlzTWFya2VkKCl8fG4rK31yZXR1cm4gbn0sV3IuZGVsZXRlQWxsRWRnZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuZ2V0T3V0RWRnZXMoKS5nZXRFZGdlcygpLG49ZS5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7aS5zZXRNYXJrZWQoITApO3ZhciByPWkuZ2V0U3ltKCk7bnVsbCE9PXImJnIuc2V0TWFya2VkKCEwKX19LFdyLmxhYmVsPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2kuc2V0TGFiZWwoZSl9fSxXci5jb21wdXRlTmV4dENXRWRnZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuZ2V0T3V0RWRnZXMoKSxuPW51bGwsaT1udWxsLHI9ZS5nZXRFZGdlcygpLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKTtpZighcy5pc01hcmtlZCgpKXtpZihudWxsPT09biYmKG49cyksbnVsbCE9PWkpe3ZhciBvPWkuZ2V0U3ltKCk7by5zZXROZXh0KHMpfWk9c319aWYobnVsbCE9PWkpe3ZhciBvPWkuZ2V0U3ltKCk7by5zZXROZXh0KG4pfX0sV3IuY29tcHV0ZU5leHRDQ1dFZGdlcz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LmdldE91dEVkZ2VzKCksaT1udWxsLHI9bnVsbCxzPW4uZ2V0RWRnZXMoKSxvPXMuc2l6ZSgpLTE7bz49MDtvLS0pe3ZhciBhPXMuZ2V0KG8pLHU9YS5nZXRTeW0oKSxsPW51bGw7YS5nZXRMYWJlbCgpPT09ZSYmKGw9YSk7dmFyIGg9bnVsbDt1LmdldExhYmVsKCk9PT1lJiYoaD11KSxudWxsPT09bCYmbnVsbD09PWh8fChudWxsIT09aCYmKHI9aCksbnVsbCE9PWwmJihudWxsIT09ciYmKHIuc2V0TmV4dChsKSxyPW51bGwpLG51bGw9PT1pJiYoaT1sKSkpfW51bGwhPT1yJiYoZi5pc1RydWUobnVsbCE9PWkpLHIuc2V0TmV4dChpKSl9LFdyLmdldERlZ3JlZT1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LmdldE91dEVkZ2VzKCkuZ2V0RWRnZXMoKSxpPTAscj1uLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKTtzLmdldExhYmVsKCk9PT1lJiZpKyt9cmV0dXJuIGl9LFdyLmZpbmRJbnRlcnNlY3Rpb25Ob2Rlcz1mdW5jdGlvbih0LGUpe3ZhciBuPXQsaT1udWxsO2Rve3ZhciByPW4uZ2V0RnJvbU5vZGUoKTtXci5nZXREZWdyZWUocixlKT4xJiYobnVsbD09PWkmJihpPW5ldyBJKSxpLmFkZChyKSksbj1uLmdldE5leHQoKSxmLmlzVHJ1ZShudWxsIT09bixcImZvdW5kIG51bGwgREUgaW4gcmluZ1wiKSxmLmlzVHJ1ZShuPT09dHx8IW4uaXNJblJpbmcoKSxcImZvdW5kIERFIGFscmVhZHkgaW4gcmluZ1wiKX13aGlsZShuIT09dCk7cmV0dXJuIGl9LGUoanIucHJvdG90eXBlLHtnZXRHZW9tZXRyeTpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5nZW9tRmFjdG9yeSYmKHRoaXMuZ2VvbUZhY3Rvcnk9bmV3IGllKSx0aGlzLnBvbHlnb25pemUoKSx0aGlzLmV4dHJhY3RPbmx5UG9seWdvbmFsP3RoaXMuZ2VvbUZhY3RvcnkuYnVpbGRHZW9tZXRyeSh0aGlzLnBvbHlMaXN0KTp0aGlzLmdlb21GYWN0b3J5LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihpZS50b0dlb21ldHJ5QXJyYXkodGhpcy5wb2x5TGlzdCkpfSxnZXRJbnZhbGlkUmluZ0xpbmVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9seWdvbml6ZSgpLHRoaXMuaW52YWxpZFJpbmdMaW5lc30sZmluZFZhbGlkUmluZ3M6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTtyLmlzVmFsaWQoKT9lLmFkZChyKTpuLmFkZChyLmdldExpbmVTdHJpbmcoKSl9fSxwb2x5Z29uaXplOmZ1bmN0aW9uKCl7aWYobnVsbCE9PXRoaXMucG9seUxpc3QpcmV0dXJuIG51bGw7XG5pZih0aGlzLnBvbHlMaXN0PW5ldyBJLG51bGw9PT10aGlzLmdyYXBoKXJldHVybiBudWxsO3RoaXMuZGFuZ2xlcz10aGlzLmdyYXBoLmRlbGV0ZURhbmdsZXMoKSx0aGlzLmN1dEVkZ2VzPXRoaXMuZ3JhcGguZGVsZXRlQ3V0RWRnZXMoKTt2YXIgdD10aGlzLmdyYXBoLmdldEVkZ2VSaW5ncygpLGU9bmV3IEk7dGhpcy5pbnZhbGlkUmluZ0xpbmVzPW5ldyBJLHRoaXMuaXNDaGVja2luZ1JpbmdzVmFsaWQ/dGhpcy5maW5kVmFsaWRSaW5ncyh0LGUsdGhpcy5pbnZhbGlkUmluZ0xpbmVzKTplPXQsdGhpcy5maW5kU2hlbGxzQW5kSG9sZXMoZSksanIuYXNzaWduSG9sZXNUb1NoZWxscyh0aGlzLmhvbGVMaXN0LHRoaXMuc2hlbGxMaXN0KSxoby5zb3J0KHRoaXMuc2hlbGxMaXN0LG5ldyBYci5FbnZlbG9wZUNvbXBhcmF0b3IpO3ZhciBuPSEwO3RoaXMuZXh0cmFjdE9ubHlQb2x5Z29uYWwmJihqci5maW5kRGlzam9pbnRTaGVsbHModGhpcy5zaGVsbExpc3QpLG49ITEpLHRoaXMucG9seUxpc3Q9anIuZXh0cmFjdFBvbHlnb25zKHRoaXMuc2hlbGxMaXN0LG4pfSxnZXREYW5nbGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9seWdvbml6ZSgpLHRoaXMuZGFuZ2xlc30sZ2V0Q3V0RWRnZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wb2x5Z29uaXplKCksdGhpcy5jdXRFZGdlc30sZ2V0UG9seWdvbnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wb2x5Z29uaXplKCksdGhpcy5wb2x5TGlzdH0sYWRkOmZ1bmN0aW9uKCl7aWYoUihhcmd1bWVudHNbMF0sdikpZm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3RoaXMuYWRkKG4pfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBTdCl7dmFyIGk9YXJndW1lbnRzWzBdO3RoaXMuZ2VvbUZhY3Rvcnk9aS5nZXRGYWN0b3J5KCksbnVsbD09PXRoaXMuZ3JhcGgmJih0aGlzLmdyYXBoPW5ldyBXcih0aGlzLmdlb21GYWN0b3J5KSksdGhpcy5ncmFwaC5hZGRFZGdlKGkpfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCKXt2YXIgcj1hcmd1bWVudHNbMF07ci5hcHBseSh0aGlzLmxpbmVTdHJpbmdBZGRlcil9fSxzZXRDaGVja1JpbmdzVmFsaWQ6ZnVuY3Rpb24odCl7dGhpcy5pc0NoZWNraW5nUmluZ3NWYWxpZD10fSxmaW5kU2hlbGxzQW5kSG9sZXM6ZnVuY3Rpb24odCl7dGhpcy5ob2xlTGlzdD1uZXcgSSx0aGlzLnNoZWxsTGlzdD1uZXcgSTtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7bi5jb21wdXRlSG9sZSgpLG4uaXNIb2xlKCk/dGhpcy5ob2xlTGlzdC5hZGQobik6dGhpcy5zaGVsbExpc3QuYWRkKG4pfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4ganJ9fSksanIuZmluZE91dGVyU2hlbGxzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKSxpPW4uZ2V0T3V0ZXJIb2xlKCk7bnVsbD09PWl8fGkuaXNQcm9jZXNzZWQoKXx8KG4uc2V0SW5jbHVkZWQoITApLGkuc2V0UHJvY2Vzc2VkKCEwKSl9fSxqci5leHRyYWN0UG9seWdvbnM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEksaT10Lml0ZXJhdG9yKCk7aS5oYXNOZXh0KCk7KXt2YXIgcj1pLm5leHQoKTsoZXx8ci5pc0luY2x1ZGVkKCkpJiZuLmFkZChyLmdldFBvbHlnb24oKSl9cmV0dXJuIG59LGpyLmFzc2lnbkhvbGVzVG9TaGVsbHM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7anIuYXNzaWduSG9sZVRvU2hlbGwoaSxlKX19LGpyLmFzc2lnbkhvbGVUb1NoZWxsPWZ1bmN0aW9uKHQsZSl7dmFyIG49WHIuZmluZEVkZ2VSaW5nQ29udGFpbmluZyh0LGUpO251bGwhPT1uJiZuLmFkZEhvbGUodCl9LGpyLmZpbmREaXNqb2ludFNoZWxscz1mdW5jdGlvbih0KXtqci5maW5kT3V0ZXJTaGVsbHModCk7dmFyIGU9bnVsbDtkb3tlPSExO2Zvcih2YXIgbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpLmlzSW5jbHVkZWRTZXQoKXx8KGkudXBkYXRlSW5jbHVkZWQoKSxpLmlzSW5jbHVkZWRTZXQoKXx8KGU9ITApKX19d2hpbGUoZSl9LGUoS3IucHJvdG90eXBlLHtmaWx0ZXI6ZnVuY3Rpb24odCl7dCBpbnN0YW5jZW9mIFN0JiZ0aGlzLnAuYWRkKHQpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltxXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gS3J9fSksanIuTGluZVN0cmluZ0FkZGVyPUtyO3ZhciBUbz1PYmplY3QuZnJlZXplKHtQb2x5Z29uaXplcjpqcn0pO2UoWnIucHJvdG90eXBlLHtpbnNlcnRFZGdlRW5kczpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7dGhpcy5ub2Rlcy5hZGQobil9fSxjb21wdXRlUHJvcGVySW50ZXJzZWN0aW9uSU06ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmFyZ1swXS5nZXRHZW9tZXRyeSgpLmdldERpbWVuc2lvbigpLGk9dGhpcy5hcmdbMV0uZ2V0R2VvbWV0cnkoKS5nZXREaW1lbnNpb24oKSxyPXQuaGFzUHJvcGVySW50ZXJzZWN0aW9uKCkscz10Lmhhc1Byb3BlckludGVyaW9ySW50ZXJzZWN0aW9uKCk7Mj09PW4mJjI9PT1pP3ImJmUuc2V0QXRMZWFzdChcIjIxMjEwMTIxMlwiKToyPT09biYmMT09PWk/KHImJmUuc2V0QXRMZWFzdChcIkZGRjBGRkZGMlwiKSxzJiZlLnNldEF0TGVhc3QoXCIxRkZGRkYxRkZcIikpOjE9PT1uJiYyPT09aT8ociYmZS5zZXRBdExlYXN0KFwiRjBGRkZGRkYyXCIpLHMmJmUuc2V0QXRMZWFzdChcIjFGMUZGRkZGRlwiKSk6MT09PW4mJjE9PT1pJiZzJiZlLnNldEF0TGVhc3QoXCIwRkZGRkZGRkZcIil9LGxhYmVsSXNvbGF0ZWRFZGdlczpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10aGlzLmFyZ1t0XS5nZXRFZGdlSXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2kuaXNJc29sYXRlZCgpJiYodGhpcy5sYWJlbElzb2xhdGVkRWRnZShpLGUsdGhpcy5hcmdbZV0uZ2V0R2VvbWV0cnkoKSksdGhpcy5pc29sYXRlZEVkZ2VzLmFkZChpKSl9fSxsYWJlbElzb2xhdGVkRWRnZTpmdW5jdGlvbih0LGUsbil7aWYobi5nZXREaW1lbnNpb24oKT4wKXt2YXIgaT10aGlzLnB0TG9jYXRvci5sb2NhdGUodC5nZXRDb29yZGluYXRlKCksbik7dC5nZXRMYWJlbCgpLnNldEFsbExvY2F0aW9ucyhlLGkpfWVsc2UgdC5nZXRMYWJlbCgpLnNldEFsbExvY2F0aW9ucyhlLEwuRVhURVJJT1IpfSxjb21wdXRlSU06ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZmU7aWYodC5zZXQoTC5FWFRFUklPUixMLkVYVEVSSU9SLDIpLCF0aGlzLmFyZ1swXS5nZXRHZW9tZXRyeSgpLmdldEVudmVsb3BlSW50ZXJuYWwoKS5pbnRlcnNlY3RzKHRoaXMuYXJnWzFdLmdldEdlb21ldHJ5KCkuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSlyZXR1cm4gdGhpcy5jb21wdXRlRGlzam9pbnRJTSh0KSx0O3RoaXMuYXJnWzBdLmNvbXB1dGVTZWxmTm9kZXModGhpcy5saSwhMSksdGhpcy5hcmdbMV0uY29tcHV0ZVNlbGZOb2Rlcyh0aGlzLmxpLCExKTt2YXIgZT10aGlzLmFyZ1swXS5jb21wdXRlRWRnZUludGVyc2VjdGlvbnModGhpcy5hcmdbMV0sdGhpcy5saSwhMSk7dGhpcy5jb21wdXRlSW50ZXJzZWN0aW9uTm9kZXMoMCksdGhpcy5jb21wdXRlSW50ZXJzZWN0aW9uTm9kZXMoMSksdGhpcy5jb3B5Tm9kZXNBbmRMYWJlbHMoMCksdGhpcy5jb3B5Tm9kZXNBbmRMYWJlbHMoMSksdGhpcy5sYWJlbElzb2xhdGVkTm9kZXMoKSx0aGlzLmNvbXB1dGVQcm9wZXJJbnRlcnNlY3Rpb25JTShlLHQpO3ZhciBuPW5ldyBBcixpPW4uY29tcHV0ZUVkZ2VFbmRzKHRoaXMuYXJnWzBdLmdldEVkZ2VJdGVyYXRvcigpKTt0aGlzLmluc2VydEVkZ2VFbmRzKGkpO3ZhciByPW4uY29tcHV0ZUVkZ2VFbmRzKHRoaXMuYXJnWzFdLmdldEVkZ2VJdGVyYXRvcigpKTtyZXR1cm4gdGhpcy5pbnNlcnRFZGdlRW5kcyhyKSx0aGlzLmxhYmVsTm9kZUVkZ2VzKCksdGhpcy5sYWJlbElzb2xhdGVkRWRnZXMoMCwxKSx0aGlzLmxhYmVsSXNvbGF0ZWRFZGdlcygxLDApLHRoaXMudXBkYXRlSU0odCksdH0sbGFiZWxOb2RlRWRnZXM6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ub2Rlcy5pdGVyYXRvcigpO3QuaGFzTmV4dCgpOyl7dmFyIGU9dC5uZXh0KCk7ZS5nZXRFZGdlcygpLmNvbXB1dGVMYWJlbGxpbmcodGhpcy5hcmcpfX0sY29weU5vZGVzQW5kTGFiZWxzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmFyZ1t0XS5nZXROb2RlSXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpLGk9dGhpcy5ub2Rlcy5hZGROb2RlKG4uZ2V0Q29vcmRpbmF0ZSgpKTtpLnNldExhYmVsKHQsbi5nZXRMYWJlbCgpLmdldExvY2F0aW9uKHQpKX19LGxhYmVsSW50ZXJzZWN0aW9uTm9kZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuYXJnW3RdLmdldEVkZ2VJdGVyYXRvcigpO2UuaGFzTmV4dCgpOylmb3IodmFyIG49ZS5uZXh0KCksaT1uLmdldExhYmVsKCkuZ2V0TG9jYXRpb24odCkscj1uLmdldEVkZ2VJbnRlcnNlY3Rpb25MaXN0KCkuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3ZhciBzPXIubmV4dCgpLG89dGhpcy5ub2Rlcy5maW5kKHMuY29vcmQpO28uZ2V0TGFiZWwoKS5pc051bGwodCkmJihpPT09TC5CT1VOREFSWT9vLnNldExhYmVsQm91bmRhcnkodCk6by5zZXRMYWJlbCh0LEwuSU5URVJJT1IpKX19LGxhYmVsSXNvbGF0ZWROb2RlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5wdExvY2F0b3IubG9jYXRlKHQuZ2V0Q29vcmRpbmF0ZSgpLHRoaXMuYXJnW2VdLmdldEdlb21ldHJ5KCkpO3QuZ2V0TGFiZWwoKS5zZXRBbGxMb2NhdGlvbnMoZSxuKX0sY29tcHV0ZUludGVyc2VjdGlvbk5vZGVzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmFyZ1t0XS5nZXRFZGdlSXRlcmF0b3IoKTtlLmhhc05leHQoKTspZm9yKHZhciBuPWUubmV4dCgpLGk9bi5nZXRMYWJlbCgpLmdldExvY2F0aW9uKHQpLHI9bi5nZXRFZGdlSW50ZXJzZWN0aW9uTGlzdCgpLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKSxvPXRoaXMubm9kZXMuYWRkTm9kZShzLmNvb3JkKTtpPT09TC5CT1VOREFSWT9vLnNldExhYmVsQm91bmRhcnkodCk6by5nZXRMYWJlbCgpLmlzTnVsbCh0KSYmby5zZXRMYWJlbCh0LEwuSU5URVJJT1IpfX0sbGFiZWxJc29sYXRlZE5vZGVzOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMubm9kZXMuaXRlcmF0b3IoKTt0Lmhhc05leHQoKTspe3ZhciBlPXQubmV4dCgpLG49ZS5nZXRMYWJlbCgpO2YuaXNUcnVlKG4uZ2V0R2VvbWV0cnlDb3VudCgpPjAsXCJub2RlIHdpdGggZW1wdHkgbGFiZWwgZm91bmRcIiksZS5pc0lzb2xhdGVkKCkmJihuLmlzTnVsbCgwKT90aGlzLmxhYmVsSXNvbGF0ZWROb2RlKGUsMCk6dGhpcy5sYWJlbElzb2xhdGVkTm9kZShlLDEpKX19LHVwZGF0ZUlNOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmlzb2xhdGVkRWRnZXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO24udXBkYXRlSU0odCl9Zm9yKHZhciBpPXRoaXMubm9kZXMuaXRlcmF0b3IoKTtpLmhhc05leHQoKTspe3ZhciByPWkubmV4dCgpO3IudXBkYXRlSU0odCksci51cGRhdGVJTUZyb21FZGdlcyh0KX19LGNvbXB1dGVEaXNqb2ludElNOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYXJnWzBdLmdldEdlb21ldHJ5KCk7ZS5pc0VtcHR5KCl8fCh0LnNldChMLklOVEVSSU9SLEwuRVhURVJJT1IsZS5nZXREaW1lbnNpb24oKSksdC5zZXQoTC5CT1VOREFSWSxMLkVYVEVSSU9SLGUuZ2V0Qm91bmRhcnlEaW1lbnNpb24oKSkpO3ZhciBuPXRoaXMuYXJnWzFdLmdldEdlb21ldHJ5KCk7bi5pc0VtcHR5KCl8fCh0LnNldChMLkVYVEVSSU9SLEwuSU5URVJJT1Isbi5nZXREaW1lbnNpb24oKSksdC5zZXQoTC5FWFRFUklPUixMLkJPVU5EQVJZLG4uZ2V0Qm91bmRhcnlEaW1lbnNpb24oKSkpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBacn19KSxlKFFyLnByb3RvdHlwZSx7aXNDb250YWluZWRJbkJvdW5kYXJ5OmZ1bmN0aW9uKHQpe2lmKHQgaW5zdGFuY2VvZiBUdClyZXR1cm4hMTtpZih0IGluc3RhbmNlb2YgTHQpcmV0dXJuIHRoaXMuaXNQb2ludENvbnRhaW5lZEluQm91bmRhcnkodCk7aWYodCBpbnN0YW5jZW9mIFN0KXJldHVybiB0aGlzLmlzTGluZVN0cmluZ0NvbnRhaW5lZEluQm91bmRhcnkodCk7Zm9yKHZhciBlPTA7ZTx0LmdldE51bUdlb21ldHJpZXMoKTtlKyspe3ZhciBuPXQuZ2V0R2VvbWV0cnlOKGUpO2lmKCF0aGlzLmlzQ29udGFpbmVkSW5Cb3VuZGFyeShuKSlyZXR1cm4hMX1yZXR1cm4hMH0saXNMaW5lU2VnbWVudENvbnRhaW5lZEluQm91bmRhcnk6ZnVuY3Rpb24odCxlKXtpZih0LmVxdWFscyhlKSlyZXR1cm4gdGhpcy5pc1BvaW50Q29udGFpbmVkSW5Cb3VuZGFyeSh0KTtpZih0Lng9PT1lLngpe2lmKHQueD09PXRoaXMucmVjdEVudi5nZXRNaW5YKCl8fHQueD09PXRoaXMucmVjdEVudi5nZXRNYXhYKCkpcmV0dXJuITB9ZWxzZSBpZih0Lnk9PT1lLnkmJih0Lnk9PT10aGlzLnJlY3RFbnYuZ2V0TWluWSgpfHx0Lnk9PT10aGlzLnJlY3RFbnYuZ2V0TWF4WSgpKSlyZXR1cm4hMDtyZXR1cm4hMX0saXNMaW5lU3RyaW5nQ29udGFpbmVkSW5Cb3VuZGFyeTpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5nZXRDb29yZGluYXRlU2VxdWVuY2UoKSxuPW5ldyBnLGk9bmV3IGcscj0wO3I8ZS5zaXplKCktMTtyKyspaWYoZS5nZXRDb29yZGluYXRlKHIsbiksZS5nZXRDb29yZGluYXRlKHIrMSxpKSwhdGhpcy5pc0xpbmVTZWdtZW50Q29udGFpbmVkSW5Cb3VuZGFyeShuLGkpKXJldHVybiExO3JldHVybiEwfSxpc1BvaW50Q29udGFpbmVkSW5Cb3VuZGFyeTpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgTHQpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5pc1BvaW50Q29udGFpbmVkSW5Cb3VuZGFyeSh0LmdldENvb3JkaW5hdGUoKSl9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnKXt2YXIgZT1hcmd1bWVudHNbMF07cmV0dXJuIGUueD09PXRoaXMucmVjdEVudi5nZXRNaW5YKCl8fGUueD09PXRoaXMucmVjdEVudi5nZXRNYXhYKCl8fGUueT09PXRoaXMucmVjdEVudi5nZXRNaW5ZKCl8fGUueT09PXRoaXMucmVjdEVudi5nZXRNYXhZKCl9fSxjb250YWluczpmdW5jdGlvbih0KXtyZXR1cm4hIXRoaXMucmVjdEVudi5jb250YWlucyh0LmdldEVudmVsb3BlSW50ZXJuYWwoKSkmJiF0aGlzLmlzQ29udGFpbmVkSW5Cb3VuZGFyeSh0KX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gUXJ9fSksUXIuY29udGFpbnM9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgUXIodCk7cmV0dXJuIG4uY29udGFpbnMoZSl9LGUoSnIucHJvdG90eXBlLHtpbnRlcnNlY3RzOmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IEModCxlKTtpZighdGhpcy5yZWN0RW52LmludGVyc2VjdHMobikpcmV0dXJuITE7aWYodGhpcy5yZWN0RW52LmludGVyc2VjdHModCkpcmV0dXJuITA7aWYodGhpcy5yZWN0RW52LmludGVyc2VjdHMoZSkpcmV0dXJuITA7aWYodC5jb21wYXJlVG8oZSk+MCl7dmFyIGk9dDt0PWUsZT1pfXZhciByPSExO3JldHVybiBlLnk+dC55JiYocj0hMCkscj90aGlzLmxpLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxlLHRoaXMuZGlhZ0Rvd24wLHRoaXMuZGlhZ0Rvd24xKTp0aGlzLmxpLmNvbXB1dGVJbnRlcnNlY3Rpb24odCxlLHRoaXMuZGlhZ1VwMCx0aGlzLmRpYWdVcDEpLCEhdGhpcy5saS5oYXNJbnRlcnNlY3Rpb24oKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gSnJ9fSksZSgkci5wcm90b3R5cGUse2FwcGx5VG86ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0LmdldE51bUdlb21ldHJpZXMoKSYmIXRoaXMuX2lzRG9uZTtlKyspe3ZhciBuPXQuZ2V0R2VvbWV0cnlOKGUpO2lmKG4gaW5zdGFuY2VvZiBmdCl0aGlzLmFwcGx5VG8obik7ZWxzZSBpZih0aGlzLnZpc2l0KG4pLHRoaXMuaXNEb25lKCkpcmV0dXJuIHRoaXMuX2lzRG9uZT0hMCxudWxsfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gJHJ9fSksZSh0cy5wcm90b3R5cGUse2ludGVyc2VjdHM6ZnVuY3Rpb24odCl7aWYoIXRoaXMucmVjdEVudi5pbnRlcnNlY3RzKHQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSlyZXR1cm4hMTt2YXIgZT1uZXcgZXModGhpcy5yZWN0RW52KTtpZihlLmFwcGx5VG8odCksZS5pbnRlcnNlY3RzKCkpcmV0dXJuITA7dmFyIG49bmV3IG5zKHRoaXMucmVjdGFuZ2xlKTtpZihuLmFwcGx5VG8odCksbi5jb250YWluc1BvaW50KCkpcmV0dXJuITA7dmFyIGk9bmV3IGlzKHRoaXMucmVjdGFuZ2xlKTtyZXR1cm4gaS5hcHBseVRvKHQpLCEhaS5pbnRlcnNlY3RzKCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHRzfX0pLHRzLmludGVyc2VjdHM9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgdHModCk7cmV0dXJuIG4uaW50ZXJzZWN0cyhlKX0saChlcywkciksZShlcy5wcm90b3R5cGUse2lzRG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnRlcnNlY3RzPT09ITB9LHZpc2l0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpO3JldHVybiB0aGlzLnJlY3RFbnYuaW50ZXJzZWN0cyhlKT90aGlzLnJlY3RFbnYuY29udGFpbnMoZSk/KHRoaXMuX2ludGVyc2VjdHM9ITAsbnVsbCk6ZS5nZXRNaW5YKCk+PXRoaXMucmVjdEVudi5nZXRNaW5YKCkmJmUuZ2V0TWF4WCgpPD10aGlzLnJlY3RFbnYuZ2V0TWF4WCgpPyh0aGlzLl9pbnRlcnNlY3RzPSEwLG51bGwpOmUuZ2V0TWluWSgpPj10aGlzLnJlY3RFbnYuZ2V0TWluWSgpJiZlLmdldE1heFkoKTw9dGhpcy5yZWN0RW52LmdldE1heFkoKT8odGhpcy5faW50ZXJzZWN0cz0hMCxudWxsKTp2b2lkIDA6bnVsbH0saW50ZXJzZWN0czpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnRlcnNlY3RzfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBlc319KSxoKG5zLCRyKSxlKG5zLnByb3RvdHlwZSx7aXNEb25lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbnRhaW5zUG9pbnQ9PT0hMH0sdmlzaXQ6ZnVuY3Rpb24odCl7aWYoISh0IGluc3RhbmNlb2YgVHQpKXJldHVybiBudWxsO3ZhciBlPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpO2lmKCF0aGlzLnJlY3RFbnYuaW50ZXJzZWN0cyhlKSlyZXR1cm4gbnVsbDtmb3IodmFyIG49bmV3IGcsaT0wO2k8NDtpKyspaWYodGhpcy5yZWN0U2VxLmdldENvb3JkaW5hdGUoaSxuKSxlLmNvbnRhaW5zKG4pJiZUbi5jb250YWluc1BvaW50SW5Qb2x5Z29uKG4sdCkpcmV0dXJuIHRoaXMuX2NvbnRhaW5zUG9pbnQ9ITAsbnVsbH0sY29udGFpbnNQb2ludDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb250YWluc1BvaW50fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBuc319KSxoKGlzLCRyKSxlKGlzLnByb3RvdHlwZSx7aW50ZXJzZWN0czpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc0ludGVyc2VjdGlvbn0saXNEb25lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzSW50ZXJzZWN0aW9uPT09ITB9LHZpc2l0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpO2lmKCF0aGlzLnJlY3RFbnYuaW50ZXJzZWN0cyhlKSlyZXR1cm4gbnVsbDt2YXIgbj1rbi5nZXRMaW5lcyh0KTt0aGlzLmNoZWNrSW50ZXJzZWN0aW9uV2l0aExpbmVTdHJpbmdzKG4pfSxjaGVja0ludGVyc2VjdGlvbldpdGhMaW5lU3RyaW5nczpmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7aWYodGhpcy5jaGVja0ludGVyc2VjdGlvbldpdGhTZWdtZW50cyhuKSx0aGlzLmhhc0ludGVyc2VjdGlvbilyZXR1cm4gbnVsbH19LGNoZWNrSW50ZXJzZWN0aW9uV2l0aFNlZ21lbnRzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10LmdldENvb3JkaW5hdGVTZXF1ZW5jZSgpLG49MTtuPGUuc2l6ZSgpO24rKylpZihlLmdldENvb3JkaW5hdGUobi0xLHRoaXMucDApLGUuZ2V0Q29vcmRpbmF0ZShuLHRoaXMucDEpLHRoaXMucmVjdEludGVyc2VjdG9yLmludGVyc2VjdHModGhpcy5wMCx0aGlzLnAxKSlyZXR1cm4gdGhpcy5oYXNJbnRlcnNlY3Rpb249ITAsbnVsbH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaXN9fSksaChycyx0aSksZShycy5wcm90b3R5cGUse2dldEludGVyc2VjdGlvbk1hdHJpeDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWxhdGUuY29tcHV0ZUlNKCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHJzfX0pLHJzLmNvdmVycz1mdW5jdGlvbih0LGUpe3JldHVybiEhdC5nZXRFbnZlbG9wZUludGVybmFsKCkuY292ZXJzKGUuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSYmKCEhdC5pc1JlY3RhbmdsZSgpfHxycy5yZWxhdGUodCxlKS5pc0NvdmVycygpKX0scnMuaW50ZXJzZWN0cz1mdW5jdGlvbih0LGUpe3JldHVybiEhdC5nZXRFbnZlbG9wZUludGVybmFsKCkuaW50ZXJzZWN0cyhlLmdldEVudmVsb3BlSW50ZXJuYWwoKSkmJih0LmlzUmVjdGFuZ2xlKCk/dHMuaW50ZXJzZWN0cyh0LGUpOmUuaXNSZWN0YW5nbGUoKT90cy5pbnRlcnNlY3RzKGUsdCk6cnMucmVsYXRlKHQsZSkuaXNJbnRlcnNlY3RzKCkpfSxycy50b3VjaGVzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0LmdldEVudmVsb3BlSW50ZXJuYWwoKS5pbnRlcnNlY3RzKGUuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSYmcnMucmVsYXRlKHQsZSkuaXNUb3VjaGVzKHQuZ2V0RGltZW5zaW9uKCksZS5nZXREaW1lbnNpb24oKSl9LHJzLndpdGhpbj1mdW5jdGlvbih0LGUpe3JldHVybiBlLmNvbnRhaW5zKHQpfSxycy5jb3ZlcmVkQnk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gcnMuY292ZXJzKGUsdCl9LHJzLnJlbGF0ZT1mdW5jdGlvbigpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1uZXcgcnModCxlKSxpPW4uZ2V0SW50ZXJzZWN0aW9uTWF0cml4KCk7cmV0dXJuIGl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhcmd1bWVudHNbMl0mJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgQiYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBCKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl07cmV0dXJuIHJzLnJlbGF0ZVdpdGhDaGVjayhyLHMpLm1hdGNoZXMobyl9aWYoUihhcmd1bWVudHNbMl0sVikmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgQiYmYXJndW1lbnRzWzFdaW5zdGFuY2VvZiBCKXt2YXIgYT1hcmd1bWVudHNbMF0sdT1hcmd1bWVudHNbMV0sbD1hcmd1bWVudHNbMl0sbj1uZXcgcnMoYSx1LGwpLGk9bi5nZXRJbnRlcnNlY3Rpb25NYXRyaXgoKTtyZXR1cm4gaX19fSxycy5vdmVybGFwcz1mdW5jdGlvbih0LGUpe3JldHVybiEhdC5nZXRFbnZlbG9wZUludGVybmFsKCkuaW50ZXJzZWN0cyhlLmdldEVudmVsb3BlSW50ZXJuYWwoKSkmJnJzLnJlbGF0ZSh0LGUpLmlzT3ZlcmxhcHModC5nZXREaW1lbnNpb24oKSxlLmdldERpbWVuc2lvbigpKX0scnMuZGlzam9pbnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4hdC5pbnRlcnNlY3RzKGUpfSxycy5yZWxhdGVXaXRoQ2hlY2s9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbih0KSx0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKGUpLHJzLnJlbGF0ZSh0LGUpfSxycy5jcm9zc2VzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0LmdldEVudmVsb3BlSW50ZXJuYWwoKS5pbnRlcnNlY3RzKGUuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSYmcnMucmVsYXRlKHQsZSkuaXNDcm9zc2VzKHQuZ2V0RGltZW5zaW9uKCksZS5nZXREaW1lbnNpb24oKSl9LHJzLmNvbnRhaW5zPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0LmdldEVudmVsb3BlSW50ZXJuYWwoKS5jb250YWlucyhlLmdldEVudmVsb3BlSW50ZXJuYWwoKSkmJih0LmlzUmVjdGFuZ2xlKCk/UXIuY29udGFpbnModCxlKTpycy5yZWxhdGUodCxlKS5pc0NvbnRhaW5zKCkpfTt2YXIgUG89T2JqZWN0LmZyZWV6ZSh7UmVsYXRlT3A6cnN9KTtlKHNzLnByb3RvdHlwZSx7ZXh0cmFjdEVsZW1lbnRzOmZ1bmN0aW9uKHQsZSl7aWYobnVsbD09PXQpcmV0dXJuIG51bGw7Zm9yKHZhciBuPTA7bjx0LmdldE51bUdlb21ldHJpZXMoKTtuKyspe3ZhciBpPXQuZ2V0R2VvbWV0cnlOKG4pO3RoaXMuc2tpcEVtcHR5JiZpLmlzRW1wdHkoKXx8ZS5hZGQoaSl9fSxjb21iaW5lOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBJLGU9dGhpcy5pbnB1dEdlb21zLml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLmV4dHJhY3RFbGVtZW50cyhuLHQpfXJldHVybiAwPT09dC5zaXplKCk/bnVsbCE9PXRoaXMuZ2VvbUZhY3Rvcnk/dGhpcy5nZW9tRmFjdG9yeS5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24obnVsbCk6bnVsbDp0aGlzLmdlb21GYWN0b3J5LmJ1aWxkR2VvbWV0cnkodCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHNzfX0pLHNzLmNvbWJpbmU9ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9bmV3IHNzKHQpO3JldHVybiBlLmNvbWJpbmUoKX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzFdLGU9bmV3IHNzKHNzLmNyZWF0ZUxpc3QobixpKSk7cmV0dXJuIGUuY29tYmluZSgpfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcj1hcmd1bWVudHNbMF0scz1hcmd1bWVudHNbMV0sbz1hcmd1bWVudHNbMl0sZT1uZXcgc3Moc3MuY3JlYXRlTGlzdChyLHMsbykpO3JldHVybiBlLmNvbWJpbmUoKX19LHNzLmV4dHJhY3RGYWN0b3J5PWZ1bmN0aW9uKHQpe3JldHVybiB0LmlzRW1wdHkoKT9udWxsOnQuaXRlcmF0b3IoKS5uZXh0KCkuZ2V0RmFjdG9yeSgpfSxzcy5jcmVhdGVMaXN0PWZ1bmN0aW9uKCl7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPWFyZ3VtZW50c1sxXSxuPW5ldyBJO3JldHVybiBuLmFkZCh0KSxuLmFkZChlKSxufWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl0sbj1uZXcgSTtyZXR1cm4gbi5hZGQoaSksbi5hZGQociksbi5hZGQocyksbn19LGUob3MucHJvdG90eXBlLHt1bmlvbjpmdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgVGUsZT1uZXcgYXQsbj0wO248dGhpcy5wb2ludEdlb20uZ2V0TnVtR2VvbWV0cmllcygpO24rKyl7dmFyIGk9dGhpcy5wb2ludEdlb20uZ2V0R2VvbWV0cnlOKG4pLHI9aS5nZXRDb29yZGluYXRlKCkscz10LmxvY2F0ZShyLHRoaXMub3RoZXJHZW9tKTtzPT09TC5FWFRFUklPUiYmZS5hZGQocil9aWYoMD09PWUuc2l6ZSgpKXJldHVybiB0aGlzLm90aGVyR2VvbTt2YXIgbz1udWxsLGE9SC50b0Nvb3JkaW5hdGVBcnJheShlKTtyZXR1cm4gbz0xPT09YS5sZW5ndGg/dGhpcy5nZW9tRmFjdC5jcmVhdGVQb2ludChhWzBdKTp0aGlzLmdlb21GYWN0LmNyZWF0ZU11bHRpUG9pbnRGcm9tQ29vcmRzKGEpLHNzLmNvbWJpbmUobyx0aGlzLm90aGVyR2VvbSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIG9zfX0pLG9zLnVuaW9uPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IG9zKHQsZSk7cmV0dXJuIG4udW5pb24oKX0sZShhcy5wcm90b3R5cGUse2ZpbHRlcjpmdW5jdGlvbih0KXt0aGlzLnNvcnRJbmRleCE9PS0xJiZ0LmdldFNvcnRJbmRleCgpIT09dGhpcy5zb3J0SW5kZXh8fHRoaXMuY29tcHMuYWRkKHQpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltodF19LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGFzfX0pLGFzLmV4dHJhY3Q9ZnVuY3Rpb24oKXtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9YXJndW1lbnRzWzFdO3JldHVybiBhcy5leHRyYWN0KHQsZSxuZXcgSSl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPWFyZ3VtZW50c1swXSxpPWFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50c1syXTtyZXR1cm4gbi5nZXRTb3J0SW5kZXgoKT09PWk/ci5hZGQobik6biBpbnN0YW5jZW9mIGZ0JiZuLmFwcGx5KG5ldyBhcyhpLHIpKSxyfX0sZSh1cy5wcm90b3R5cGUse3JlZHVjZVRvR2VvbWV0cmllczpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEksbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKSxyPW51bGw7UihpLHkpP3I9dGhpcy51bmlvblRyZWUoaSk6aSBpbnN0YW5jZW9mIEImJihyPWkpLGUuYWRkKHIpfXJldHVybiBlfSxleHRyYWN0QnlFbnZlbG9wZTpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPW5ldyBJLHI9MDtyPGUuZ2V0TnVtR2VvbWV0cmllcygpO3IrKyl7dmFyIHM9ZS5nZXRHZW9tZXRyeU4ocik7cy5nZXRFbnZlbG9wZUludGVybmFsKCkuaW50ZXJzZWN0cyh0KT9pLmFkZChzKTpuLmFkZChzKX1yZXR1cm4gdGhpcy5nZW9tRmFjdG9yeS5idWlsZEdlb21ldHJ5KGkpfSx1bmlvbk9wdGltaXplZDpmdW5jdGlvbih0LGUpe3ZhciBuPXQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLGk9ZS5nZXRFbnZlbG9wZUludGVybmFsKCk7aWYoIW4uaW50ZXJzZWN0cyhpKSl7dmFyIHI9c3MuY29tYmluZSh0LGUpO3JldHVybiByfWlmKHQuZ2V0TnVtR2VvbWV0cmllcygpPD0xJiZlLmdldE51bUdlb21ldHJpZXMoKTw9MSlyZXR1cm4gdGhpcy51bmlvbkFjdHVhbCh0LGUpO3ZhciBzPW4uaW50ZXJzZWN0aW9uKGkpO3JldHVybiB0aGlzLnVuaW9uVXNpbmdFbnZlbG9wZUludGVyc2VjdGlvbih0LGUscyl9LHVuaW9uOmZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMuaW5wdXRQb2x5cyl0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKFwidW5pb24oKSBtZXRob2QgY2Fubm90IGJlIGNhbGxlZCB0d2ljZVwiKTtpZih0aGlzLmlucHV0UG9seXMuaXNFbXB0eSgpKXJldHVybiBudWxsO3RoaXMuZ2VvbUZhY3Rvcnk9dGhpcy5pbnB1dFBvbHlzLml0ZXJhdG9yKCkubmV4dCgpLmdldEZhY3RvcnkoKTtmb3IodmFyIHQ9bmV3IGtlKHVzLlNUUlRSRUVfTk9ERV9DQVBBQ0lUWSksZT10aGlzLmlucHV0UG9seXMuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3QuaW5zZXJ0KG4uZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLG4pfXRoaXMuaW5wdXRQb2x5cz1udWxsO3ZhciBpPXQuaXRlbXNUcmVlKCkscj10aGlzLnVuaW9uVHJlZShpKTtyZXR1cm4gcn0sYmluYXJ5VW5pb246ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmJpbmFyeVVuaW9uKHQsMCx0LnNpemUoKSl9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXSxpPWFyZ3VtZW50c1syXTtpZihpLW48PTEpe3ZhciByPXVzLmdldEdlb21ldHJ5KGUsbik7cmV0dXJuIHRoaXMudW5pb25TYWZlKHIsbnVsbCl9aWYoaS1uPT09MilyZXR1cm4gdGhpcy51bmlvblNhZmUodXMuZ2V0R2VvbWV0cnkoZSxuKSx1cy5nZXRHZW9tZXRyeShlLG4rMSkpO3ZhciBzPU1hdGgudHJ1bmMoKGkrbikvMikscj10aGlzLmJpbmFyeVVuaW9uKGUsbixzKSxvPXRoaXMuYmluYXJ5VW5pb24oZSxzLGkpO3JldHVybiB0aGlzLnVuaW9uU2FmZShyLG8pfX0scmVwZWF0ZWRVbmlvbjpmdW5jdGlvbih0KXtmb3IodmFyIGU9bnVsbCxuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2U9bnVsbD09PWU/aS5jb3B5KCk6ZS51bmlvbihpKX1yZXR1cm4gZX0sdW5pb25TYWZlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGw9PT10JiZudWxsPT09ZT9udWxsOm51bGw9PT10P2UuY29weSgpOm51bGw9PT1lP3QuY29weSgpOnRoaXMudW5pb25PcHRpbWl6ZWQodCxlKX0sdW5pb25BY3R1YWw6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdXMucmVzdHJpY3RUb1BvbHlnb25zKHQudW5pb24oZSkpfSx1bmlvblRyZWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5yZWR1Y2VUb0dlb21ldHJpZXModCksbj10aGlzLmJpbmFyeVVuaW9uKGUpO3JldHVybiBufSx1bmlvblVzaW5nRW52ZWxvcGVJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW5ldyBJLHI9dGhpcy5leHRyYWN0QnlFbnZlbG9wZShuLHQsaSkscz10aGlzLmV4dHJhY3RCeUVudmVsb3BlKG4sZSxpKSxvPXRoaXMudW5pb25BY3R1YWwocixzKTtpLmFkZChvKTt2YXIgYT1zcy5jb21iaW5lKGkpO3JldHVybiBhfSxidWZmZXJVbmlvbjpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT10LmdldCgwKS5nZXRGYWN0b3J5KCksbj1lLmJ1aWxkR2VvbWV0cnkodCksaT1uLmJ1ZmZlcigwKTtyZXR1cm4gaX1pZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHI9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGU9ci5nZXRGYWN0b3J5KCksbj1lLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihbcixzXSksaT1uLmJ1ZmZlcigwKTtyZXR1cm4gaX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHVzfX0pLHVzLnJlc3RyaWN0VG9Qb2x5Z29ucz1mdW5jdGlvbih0KXtpZihSKHQsUnQpKXJldHVybiB0O3ZhciBlPXByLmdldFBvbHlnb25zKHQpO3JldHVybiAxPT09ZS5zaXplKCk/ZS5nZXQoMCk6dC5nZXRGYWN0b3J5KCkuY3JlYXRlTXVsdGlQb2x5Z29uKGllLnRvUG9seWdvbkFycmF5KGUpKX0sdXMuZ2V0R2VvbWV0cnk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT49dC5zaXplKCk/bnVsbDp0LmdldChlKX0sdXMudW5pb249ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHVzKHQpO3JldHVybiBlLnVuaW9uKCl9LHVzLlNUUlRSRUVfTk9ERV9DQVBBQ0lUWT00LGUobHMucHJvdG90eXBlLHt1bmlvbk5vT3B0OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2VvbUZhY3QuY3JlYXRlUG9pbnQoKTtyZXR1cm4gc2kub3ZlcmxheU9wKHQsZSxpaS5VTklPTil9LHVuaW9uV2l0aE51bGw6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09PXQmJm51bGw9PT1lP251bGw6bnVsbD09PWU/dDpudWxsPT09dD9lOnQudW5pb24oZSl9LGV4dHJhY3Q6ZnVuY3Rpb24oKXtpZihSKGFyZ3VtZW50c1swXSx2KSlmb3IodmFyIHQ9YXJndW1lbnRzWzBdLGU9dC5pdGVyYXRvcigpO2UuaGFzTmV4dCgpOyl7dmFyIG49ZS5uZXh0KCk7dGhpcy5leHRyYWN0KG4pfWVsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBCKXt2YXIgaT1hcmd1bWVudHNbMF07bnVsbD09PXRoaXMuZ2VvbUZhY3QmJih0aGlzLmdlb21GYWN0PWkuZ2V0RmFjdG9yeSgpKSxhcy5leHRyYWN0KGksQi5TT1JUSU5ERVhfUE9MWUdPTix0aGlzLnBvbHlnb25zKSxhcy5leHRyYWN0KGksQi5TT1JUSU5ERVhfTElORVNUUklORyx0aGlzLmxpbmVzKSxhcy5leHRyYWN0KGksQi5TT1JUSU5ERVhfUE9JTlQsdGhpcy5wb2ludHMpfX0sdW5pb246ZnVuY3Rpb24gdCgpe2lmKG51bGw9PT10aGlzLmdlb21GYWN0KXJldHVybiBudWxsO3ZhciBlPW51bGw7aWYodGhpcy5wb2ludHMuc2l6ZSgpPjApe3ZhciBuPXRoaXMuZ2VvbUZhY3QuYnVpbGRHZW9tZXRyeSh0aGlzLnBvaW50cyk7ZT10aGlzLnVuaW9uTm9PcHQobil9dmFyIGk9bnVsbDtpZih0aGlzLmxpbmVzLnNpemUoKT4wKXt2YXIgcj10aGlzLmdlb21GYWN0LmJ1aWxkR2VvbWV0cnkodGhpcy5saW5lcyk7aT10aGlzLnVuaW9uTm9PcHQocil9dmFyIHM9bnVsbDt0aGlzLnBvbHlnb25zLnNpemUoKT4wJiYocz11cy51bmlvbih0aGlzLnBvbHlnb25zKSk7dmFyIG89dGhpcy51bmlvbldpdGhOdWxsKGkscyksdD1udWxsO3JldHVybiB0PW51bGw9PT1lP286bnVsbD09PW8/ZTpvcy51bmlvbihlLG8pLG51bGw9PT10P3RoaXMuZ2VvbUZhY3QuY3JlYXRlR2VvbWV0cnlDb2xsZWN0aW9uKCk6dH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gbHN9fSksbHMudW5pb249ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7aWYoUihhcmd1bWVudHNbMF0sdikpe3ZhciB0PWFyZ3VtZW50c1swXSxlPW5ldyBscyh0KTtyZXR1cm4gZS51bmlvbigpfWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQil7dmFyIG49YXJndW1lbnRzWzBdLGU9bmV3IGxzKG4pO3JldHVybiBlLnVuaW9uKCl9fWVsc2UgaWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSxlPW5ldyBscyhpLHIpO3JldHVybiBlLnVuaW9uKCl9fTt2YXIgYm89T2JqZWN0LmZyZWV6ZSh7VW5hcnlVbmlvbk9wOmxzfSksT289T2JqZWN0LmZyZWV6ZSh7SXNWYWxpZE9wOlVyLENvbnNpc3RlbnRBcmVhVGVzdGVyOlZyfSksX289T2JqZWN0LmZyZWV6ZSh7Qm91bmRhcnlPcDpkdCxJc1NpbXBsZU9wOldpLGJ1ZmZlcjpTbyxkaXN0YW5jZTp3byxsaW5lbWVyZ2U6TG8sb3ZlcmxheTpSbyxwb2x5Z29uaXplOlRvLHJlbGF0ZTpQbyx1bmlvbjpibyx2YWxpZDpPb30pO2goaHMsX3QuQ29vcmRpbmF0ZU9wZXJhdGlvbiksZShocy5wcm90b3R5cGUse2VkaXRDb29yZGluYXRlczpmdW5jdGlvbih0LGUpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gbnVsbDtmb3IodmFyIG49bmV3IEFycmF5KHQubGVuZ3RoKS5maWxsKG51bGwpLGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIHI9bmV3IGcodFtpXSk7dGhpcy50YXJnZXRQTS5tYWtlUHJlY2lzZShyKSxuW2ldPXJ9dmFyIHM9bmV3IE4obiwoITEpKSxvPXMudG9Db29yZGluYXRlQXJyYXkoKSxhPTA7ZSBpbnN0YW5jZW9mIFN0JiYoYT0yKSxlIGluc3RhbmNlb2YgYnQmJihhPTQpO3ZhciB1PW47cmV0dXJuIHRoaXMucmVtb3ZlQ29sbGFwc2VkJiYodT1udWxsKSxvLmxlbmd0aDxhP3U6b30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gaHN9fSksZShjcy5wcm90b3R5cGUse2ZpeFBvbHlnb25hbFRvcG9sb2d5OmZ1bmN0aW9uKHQpe3ZhciBlPXQ7dGhpcy5jaGFuZ2VQcmVjaXNpb25Nb2RlbHx8KGU9dGhpcy5jaGFuZ2VQTSh0LHRoaXMudGFyZ2V0UE0pKTt2YXIgbj1lLmJ1ZmZlcigwKSxpPW47cmV0dXJuIHRoaXMuY2hhbmdlUHJlY2lzaW9uTW9kZWx8fChpPXRoaXMuY2hhbmdlUE0obix0LmdldFByZWNpc2lvbk1vZGVsKCkpKSxpfSxyZWR1Y2VQb2ludHdpc2U6ZnVuY3Rpb24odCl7dmFyIGU9bnVsbDtpZih0aGlzLmNoYW5nZVByZWNpc2lvbk1vZGVsKXt2YXIgbj10aGlzLmNyZWF0ZUZhY3RvcnkodC5nZXRGYWN0b3J5KCksdGhpcy50YXJnZXRQTSk7ZT1uZXcgX3Qobil9ZWxzZSBlPW5ldyBfdDt2YXIgaT10aGlzLnJlbW92ZUNvbGxhcHNlZDt0LmdldERpbWVuc2lvbigpPj0yJiYoaT0hMCk7dmFyIHI9ZS5lZGl0KHQsbmV3IGhzKHRoaXMudGFyZ2V0UE0saSkpO3JldHVybiByfSxjaGFuZ2VQTTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuY3JlYXRlRWRpdG9yKHQuZ2V0RmFjdG9yeSgpLGUpO3JldHVybiBuLmVkaXQodCxuZXcgX3QuTm9PcEdlb21ldHJ5T3BlcmF0aW9uKX0sc2V0UmVtb3ZlQ29sbGFwc2VkQ29tcG9uZW50czpmdW5jdGlvbih0KXt0aGlzLnJlbW92ZUNvbGxhcHNlZD10fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IGllKGUsdC5nZXRTUklEKCksdC5nZXRDb29yZGluYXRlU2VxdWVuY2VGYWN0b3J5KCkpO3JldHVybiBufSxzZXRDaGFuZ2VQcmVjaXNpb25Nb2RlbDpmdW5jdGlvbih0KXt0aGlzLmNoYW5nZVByZWNpc2lvbk1vZGVsPXR9LHJlZHVjZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnJlZHVjZVBvaW50d2lzZSh0KTtyZXR1cm4gdGhpcy5pc1BvaW50d2lzZT9lOlIoZSxSdCk/ZS5pc1ZhbGlkKCk/ZTp0aGlzLmZpeFBvbHlnb25hbFRvcG9sb2d5KGUpOmV9LHNldFBvaW50d2lzZTpmdW5jdGlvbih0KXt0aGlzLmlzUG9pbnR3aXNlPXR9LGNyZWF0ZUVkaXRvcjpmdW5jdGlvbih0LGUpe2lmKHQuZ2V0UHJlY2lzaW9uTW9kZWwoKT09PWUpcmV0dXJuIG5ldyBfdDt2YXIgbj10aGlzLmNyZWF0ZUZhY3RvcnkodCxlKSxpPW5ldyBfdChuKTtyZXR1cm4gaX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gY3N9fSksY3MucmVkdWNlPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IGNzKGUpO3JldHVybiBuLnJlZHVjZSh0KX0sY3MucmVkdWNlUG9pbnR3aXNlPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IGNzKGUpO3JldHVybiBuLnNldFBvaW50d2lzZSghMCksbi5yZWR1Y2UodCl9O3ZhciBNbz1PYmplY3QuZnJlZXplKHtHZW9tZXRyeVByZWNpc2lvblJlZHVjZXI6Y3N9KTtlKGZzLnByb3RvdHlwZSx7c2ltcGxpZnlTZWN0aW9uOmZ1bmN0aW9uKHQsZSl7aWYodCsxPT09ZSlyZXR1cm4gbnVsbDt0aGlzLnNlZy5wMD10aGlzLnB0c1t0XSx0aGlzLnNlZy5wMT10aGlzLnB0c1tlXTtmb3IodmFyIG49LTEsaT10LHI9dCsxO3I8ZTtyKyspe3ZhciBzPXRoaXMuc2VnLmRpc3RhbmNlKHRoaXMucHRzW3JdKTtzPm4mJihuPXMsaT1yKX1pZihuPD10aGlzLmRpc3RhbmNlVG9sZXJhbmNlKWZvcih2YXIgcj10KzE7cjxlO3IrKyl0aGlzLnVzZVB0W3JdPSExO2Vsc2UgdGhpcy5zaW1wbGlmeVNlY3Rpb24odCxpKSx0aGlzLnNpbXBsaWZ5U2VjdGlvbihpLGUpfSxzZXREaXN0YW5jZVRvbGVyYW5jZTpmdW5jdGlvbih0KXt0aGlzLmRpc3RhbmNlVG9sZXJhbmNlPXR9LHNpbXBsaWZ5OmZ1bmN0aW9uKCl7dGhpcy51c2VQdD1uZXcgQXJyYXkodGhpcy5wdHMubGVuZ3RoKS5maWxsKG51bGwpO2Zvcih2YXIgdD0wO3Q8dGhpcy5wdHMubGVuZ3RoO3QrKyl0aGlzLnVzZVB0W3RdPSEwO3RoaXMuc2ltcGxpZnlTZWN0aW9uKDAsdGhpcy5wdHMubGVuZ3RoLTEpO2Zvcih2YXIgZT1uZXcgTix0PTA7dDx0aGlzLnB0cy5sZW5ndGg7dCsrKXRoaXMudXNlUHRbdF0mJmUuYWRkKG5ldyBnKHRoaXMucHRzW3RdKSk7cmV0dXJuIGUudG9Db29yZGluYXRlQXJyYXkoKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZnN9fSksZnMuc2ltcGxpZnk9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgZnModCk7cmV0dXJuIG4uc2V0RGlzdGFuY2VUb2xlcmFuY2UoZSksbi5zaW1wbGlmeSgpfSxlKGdzLnByb3RvdHlwZSx7c2V0RW5zdXJlVmFsaWQ6ZnVuY3Rpb24odCl7dGhpcy5pc0Vuc3VyZVZhbGlkVG9wb2xvZ3k9dH0sZ2V0UmVzdWx0R2VvbWV0cnk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnB1dEdlb20uaXNFbXB0eSgpP3RoaXMuaW5wdXRHZW9tLmNvcHkoKTpuZXcgZHModGhpcy5pc0Vuc3VyZVZhbGlkVG9wb2xvZ3ksdGhpcy5kaXN0YW5jZVRvbGVyYW5jZSkudHJhbnNmb3JtKHRoaXMuaW5wdXRHZW9tKX0sc2V0RGlzdGFuY2VUb2xlcmFuY2U6ZnVuY3Rpb24odCl7aWYodDwwKXRocm93IG5ldyBpKFwiVG9sZXJhbmNlIG11c3QgYmUgbm9uLW5lZ2F0aXZlXCIpO3RoaXMuZGlzdGFuY2VUb2xlcmFuY2U9dH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gZ3N9fSksZ3Muc2ltcGxpZnk9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgZ3ModCk7cmV0dXJuIG4uc2V0RGlzdGFuY2VUb2xlcmFuY2UoZSksbi5nZXRSZXN1bHRHZW9tZXRyeSgpfSxoKGRzLHhlKSxlKGRzLnByb3RvdHlwZSx7dHJhbnNmb3JtUG9seWdvbjpmdW5jdGlvbih0LGUpe2lmKHQuaXNFbXB0eSgpKXJldHVybiBudWxsO3ZhciBuPXhlLnByb3RvdHlwZS50cmFuc2Zvcm1Qb2x5Z29uLmNhbGwodGhpcyx0LGUpO3JldHVybiBlIGluc3RhbmNlb2YgT3Q/bjp0aGlzLmNyZWF0ZVZhbGlkQXJlYShuKX0sY3JlYXRlVmFsaWRBcmVhOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmlzRW5zdXJlVmFsaWRUb3BvbG9neT90LmJ1ZmZlcigwKTp0fSx0cmFuc2Zvcm1Db29yZGluYXRlczpmdW5jdGlvbih0LGUpe3ZhciBuPXQudG9Db29yZGluYXRlQXJyYXkoKSxpPW51bGw7cmV0dXJuIGk9MD09PW4ubGVuZ3RoP25ldyBBcnJheSgwKS5maWxsKG51bGwpOmZzLnNpbXBsaWZ5KG4sdGhpcy5kaXN0YW5jZVRvbGVyYW5jZSksdGhpcy5mYWN0b3J5LmdldENvb3JkaW5hdGVTZXF1ZW5jZUZhY3RvcnkoKS5jcmVhdGUoaSl9LHRyYW5zZm9ybU11bHRpUG9seWdvbjpmdW5jdGlvbih0LGUpe3ZhciBuPXhlLnByb3RvdHlwZS50cmFuc2Zvcm1NdWx0aVBvbHlnb24uY2FsbCh0aGlzLHQsZSk7cmV0dXJuIHRoaXMuY3JlYXRlVmFsaWRBcmVhKG4pfSx0cmFuc2Zvcm1MaW5lYXJSaW5nOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZSBpbnN0YW5jZW9mIFR0LGk9eGUucHJvdG90eXBlLnRyYW5zZm9ybUxpbmVhclJpbmcuY2FsbCh0aGlzLHQsZSk7cmV0dXJuIW58fGkgaW5zdGFuY2VvZiBidD9pOm51bGx9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIGRzfX0pLGdzLkRQVHJhbnNmb3JtZXI9ZHMsaChwcyxjZSksZShwcy5wcm90b3R5cGUse2dldEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5kZXh9LGdldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudH0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcHN9fSksZSh2cy5wcm90b3R5cGUse2FkZFRvUmVzdWx0OmZ1bmN0aW9uKHQpe3RoaXMucmVzdWx0U2Vncy5hZGQodCl9LGFzTGluZVN0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudExpbmUuZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVTdHJpbmcodnMuZXh0cmFjdENvb3JkaW5hdGVzKHRoaXMucmVzdWx0U2VncykpfSxnZXRSZXN1bHRTaXplOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5yZXN1bHRTZWdzLnNpemUoKTtyZXR1cm4gMD09PXQ/MDp0KzF9LGdldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudExpbmV9LGdldFNlZ21lbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc2Vnc1t0XX0sZ2V0UGFyZW50Q29vcmRpbmF0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnRMaW5lLmdldENvb3JkaW5hdGVzKCl9LGdldE1pbmltdW1TaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWluaW11bVNpemV9LGFzTGluZWFyUmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudExpbmUuZ2V0RmFjdG9yeSgpLmNyZWF0ZUxpbmVhclJpbmcodnMuZXh0cmFjdENvb3JkaW5hdGVzKHRoaXMucmVzdWx0U2VncykpfSxnZXRTZWdtZW50czpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlZ3N9LGluaXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBhcmVudExpbmUuZ2V0Q29vcmRpbmF0ZXMoKTt0aGlzLnNlZ3M9bmV3IEFycmF5KHQubGVuZ3RoLTEpLmZpbGwobnVsbCk7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aC0xO2UrKyl7dmFyIG49bmV3IHBzKHRbZV0sdFtlKzFdLHRoaXMucGFyZW50TGluZSxlKTt0aGlzLnNlZ3NbZV09bn19LGdldFJlc3VsdENvb3JkaW5hdGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHZzLmV4dHJhY3RDb29yZGluYXRlcyh0aGlzLnJlc3VsdFNlZ3MpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB2c319KSx2cy5leHRyYWN0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBBcnJheSh0LnNpemUoKSsxKS5maWxsKG51bGwpLG49bnVsbCxpPTA7aTx0LnNpemUoKTtpKyspbj10LmdldChpKSxlW2ldPW4ucDA7cmV0dXJuIGVbZS5sZW5ndGgtMV09bi5wMSxlfSxlKG1zLnByb3RvdHlwZSx7cmVtb3ZlOmZ1bmN0aW9uKHQpe3RoaXMuaW5kZXgucmVtb3ZlKG5ldyBDKHQucDAsdC5wMSksdCl9LGFkZDpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgdnMpZm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPXQuZ2V0U2VnbWVudHMoKSxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07dGhpcy5hZGQoaSl9ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGNlKXt2YXIgcj1hcmd1bWVudHNbMF07dGhpcy5pbmRleC5pbnNlcnQobmV3IEMoci5wMCxyLnAxKSxyKX19LHF1ZXJ5OmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDKHQucDAsdC5wMSksbj1uZXcgeXModCk7dGhpcy5pbmRleC5xdWVyeShlLG4pO3ZhciBpPW4uZ2V0SXRlbXMoKTtyZXR1cm4gaX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gbXN9fSksZSh5cy5wcm90b3R5cGUse3Zpc2l0SXRlbTpmdW5jdGlvbih0KXt2YXIgZT10O0MuaW50ZXJzZWN0cyhlLnAwLGUucDEsdGhpcy5xdWVyeVNlZy5wMCx0aGlzLnF1ZXJ5U2VnLnAxKSYmdGhpcy5pdGVtcy5hZGQodCl9LGdldEl0ZW1zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXRlbXN9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW0FlXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4geXN9fSksZSh4cy5wcm90b3R5cGUse2ZsYXR0ZW46ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmxpbmVQdHNbdF0saT10aGlzLmxpbmVQdHNbZV0scj1uZXcgY2UobixpKTtyZXR1cm4gdGhpcy5yZW1vdmUodGhpcy5saW5lLHQsZSksdGhpcy5vdXRwdXRJbmRleC5hZGQocikscn0saGFzQmFkSW50ZXJzZWN0aW9uOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4hIXRoaXMuaGFzQmFkT3V0cHV0SW50ZXJzZWN0aW9uKG4pfHwhIXRoaXMuaGFzQmFkSW5wdXRJbnRlcnNlY3Rpb24odCxlLG4pfSxzZXREaXN0YW5jZVRvbGVyYW5jZTpmdW5jdGlvbih0KXt0aGlzLmRpc3RhbmNlVG9sZXJhbmNlPXR9LHNpbXBsaWZ5U2VjdGlvbjpmdW5jdGlvbih0LGUsbil7bis9MTt2YXIgaT1uZXcgQXJyYXkoMikuZmlsbChudWxsKTtpZih0KzE9PT1lKXt2YXIgcj10aGlzLmxpbmUuZ2V0U2VnbWVudCh0KTtyZXR1cm4gdGhpcy5saW5lLmFkZFRvUmVzdWx0KHIpLG51bGx9dmFyIHM9ITA7aWYodGhpcy5saW5lLmdldFJlc3VsdFNpemUoKTx0aGlzLmxpbmUuZ2V0TWluaW11bVNpemUoKSl7dmFyIG89bisxO288dGhpcy5saW5lLmdldE1pbmltdW1TaXplKCkmJihzPSExKX12YXIgYT1uZXcgQXJyYXkoMSkuZmlsbChudWxsKSx1PXRoaXMuZmluZEZ1cnRoZXN0UG9pbnQodGhpcy5saW5lUHRzLHQsZSxhKTthWzBdPnRoaXMuZGlzdGFuY2VUb2xlcmFuY2UmJihzPSExKTt2YXIgbD1uZXcgY2U7aWYobC5wMD10aGlzLmxpbmVQdHNbdF0sbC5wMT10aGlzLmxpbmVQdHNbZV0saVswXT10LGlbMV09ZSx0aGlzLmhhc0JhZEludGVyc2VjdGlvbih0aGlzLmxpbmUsaSxsKSYmKHM9ITEpLHMpe3ZhciByPXRoaXMuZmxhdHRlbih0LGUpO3JldHVybiB0aGlzLmxpbmUuYWRkVG9SZXN1bHQociksbnVsbH10aGlzLnNpbXBsaWZ5U2VjdGlvbih0LHUsbiksdGhpcy5zaW1wbGlmeVNlY3Rpb24odSxlLG4pfSxoYXNCYWRPdXRwdXRJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMub3V0cHV0SW5kZXgucXVlcnkodCksbj1lLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtpZih0aGlzLmhhc0ludGVyaW9ySW50ZXJzZWN0aW9uKGksdCkpcmV0dXJuITB9cmV0dXJuITF9LGZpbmRGdXJ0aGVzdFBvaW50OmZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPW5ldyBjZTtyLnAwPXRbZV0sci5wMT10W25dO2Zvcih2YXIgcz0tMSxvPWUsYT1lKzE7YTxuO2ErKyl7dmFyIHU9dFthXSxsPXIuZGlzdGFuY2UodSk7bD5zJiYocz1sLG89YSl9cmV0dXJuIGlbMF09cyxvfSxzaW1wbGlmeTpmdW5jdGlvbih0KXt0aGlzLmxpbmU9dCx0aGlzLmxpbmVQdHM9dC5nZXRQYXJlbnRDb29yZGluYXRlcygpLHRoaXMuc2ltcGxpZnlTZWN0aW9uKDAsdGhpcy5saW5lUHRzLmxlbmd0aC0xLDApfSxyZW1vdmU6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaT1lO2k8bjtpKyspe3ZhciByPXQuZ2V0U2VnbWVudChpKTt0aGlzLmlucHV0SW5kZXgucmVtb3ZlKHIpfX0saGFzSW50ZXJpb3JJbnRlcnNlY3Rpb246ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5saS5jb21wdXRlSW50ZXJzZWN0aW9uKHQucDAsdC5wMSxlLnAwLGUucDEpLHRoaXMubGkuaXNJbnRlcmlvckludGVyc2VjdGlvbigpfSxoYXNCYWRJbnB1dEludGVyc2VjdGlvbjpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPXRoaXMuaW5wdXRJbmRleC5xdWVyeShuKSxyPWkuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3ZhciBzPXIubmV4dCgpO2lmKHRoaXMuaGFzSW50ZXJpb3JJbnRlcnNlY3Rpb24ocyxuKSl7aWYoeHMuaXNJbkxpbmVTZWN0aW9uKHQsZSxzKSljb250aW51ZTtyZXR1cm4hMH19cmV0dXJuITF9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHhzfX0pLHhzLmlzSW5MaW5lU2VjdGlvbj1mdW5jdGlvbih0LGUsbil7aWYobi5nZXRQYXJlbnQoKSE9PXQuZ2V0UGFyZW50KCkpcmV0dXJuITE7dmFyIGk9bi5nZXRJbmRleCgpO3JldHVybiBpPj1lWzBdJiZpPGVbMV19LGUoRXMucHJvdG90eXBlLHtzZXREaXN0YW5jZVRvbGVyYW5jZTpmdW5jdGlvbih0KXt0aGlzLmRpc3RhbmNlVG9sZXJhbmNlPXR9LHNpbXBsaWZ5OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXRoaXMuaW5wdXRJbmRleC5hZGQoZS5uZXh0KCkpO2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1uZXcgeHModGhpcy5pbnB1dEluZGV4LHRoaXMub3V0cHV0SW5kZXgpO24uc2V0RGlzdGFuY2VUb2xlcmFuY2UodGhpcy5kaXN0YW5jZVRvbGVyYW5jZSksbi5zaW1wbGlmeShlLm5leHQoKSl9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBFc319KSxlKElzLnByb3RvdHlwZSx7Z2V0UmVzdWx0R2VvbWV0cnk6ZnVuY3Rpb24oKXtpZih0aGlzLmlucHV0R2VvbS5pc0VtcHR5KCkpcmV0dXJuIHRoaXMuaW5wdXRHZW9tLmNvcHkoKTt0aGlzLmxpbmVzdHJpbmdNYXA9bmV3IHRlLHRoaXMuaW5wdXRHZW9tLmFwcGx5KG5ldyBDcyh0aGlzKSksdGhpcy5saW5lU2ltcGxpZmllci5zaW1wbGlmeSh0aGlzLmxpbmVzdHJpbmdNYXAudmFsdWVzKCkpO3ZhciB0PW5ldyBOcyh0aGlzLmxpbmVzdHJpbmdNYXApLnRyYW5zZm9ybSh0aGlzLmlucHV0R2VvbSk7cmV0dXJuIHR9LHNldERpc3RhbmNlVG9sZXJhbmNlOmZ1bmN0aW9uKHQpe2lmKHQ8MCl0aHJvdyBuZXcgaShcIlRvbGVyYW5jZSBtdXN0IGJlIG5vbi1uZWdhdGl2ZVwiKTt0aGlzLmxpbmVTaW1wbGlmaWVyLnNldERpc3RhbmNlVG9sZXJhbmNlKHQpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBJc319KSxJcy5zaW1wbGlmeT1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBJcyh0KTtyZXR1cm4gbi5zZXREaXN0YW5jZVRvbGVyYW5jZShlKSxuLmdldFJlc3VsdEdlb21ldHJ5KCl9LGgoTnMseGUpLGUoTnMucHJvdG90eXBlLHt0cmFuc2Zvcm1Db29yZGluYXRlczpmdW5jdGlvbih0LGUpe2lmKDA9PT10LnNpemUoKSlyZXR1cm4gbnVsbDtpZihlIGluc3RhbmNlb2YgU3Qpe3ZhciBuPXRoaXMubGluZXN0cmluZ01hcC5nZXQoZSk7cmV0dXJuIHRoaXMuY3JlYXRlQ29vcmRpbmF0ZVNlcXVlbmNlKG4uZ2V0UmVzdWx0Q29vcmRpbmF0ZXMoKSl9cmV0dXJuIHhlLnByb3RvdHlwZS50cmFuc2Zvcm1Db29yZGluYXRlcy5jYWxsKHRoaXMsdCxlKX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTnN9fSksZShDcy5wcm90b3R5cGUse2ZpbHRlcjpmdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgU3Qpe3ZhciBlPXQ7aWYoZS5pc0VtcHR5KCkpcmV0dXJuIG51bGw7dmFyIG49ZS5pc0Nsb3NlZCgpPzQ6MixpPW5ldyB2cyhlLG4pO3RoaXMudHBzLmxpbmVzdHJpbmdNYXAucHV0KGUsaSl9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltxXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gQ3N9fSksSXMuTGluZVN0cmluZ1RyYW5zZm9ybWVyPU5zLElzLkxpbmVTdHJpbmdNYXBCdWlsZGVyRmlsdGVyPUNzO3ZhciBEbz1PYmplY3QuZnJlZXplKHtEb3VnbGFzUGV1Y2tlclNpbXBsaWZpZXI6Z3MsVG9wb2xvZ3lQcmVzZXJ2aW5nU2ltcGxpZmllcjpJc30pO2UoU3MucHJvdG90eXBlLHtzcGxpdEF0OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPXRoaXMubWluaW11bUxlbi90aGlzLnNlZ0xlbjtpZih0LmRpc3RhbmNlKHRoaXMuc2VnLnAwKTx0aGlzLm1pbmltdW1MZW4pcmV0dXJuIHRoaXMuc3BsaXRQdD10aGlzLnNlZy5wb2ludEFsb25nKGUpLG51bGw7aWYodC5kaXN0YW5jZSh0aGlzLnNlZy5wMSk8dGhpcy5taW5pbXVtTGVuKXJldHVybiB0aGlzLnNwbGl0UHQ9U3MucG9pbnRBbG9uZ1JldmVyc2UodGhpcy5zZWcsZSksbnVsbDt0aGlzLnNwbGl0UHQ9dH1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj10aGlzLmdldENvbnN0cmFpbmVkTGVuZ3RoKG4pLHM9ci90aGlzLnNlZ0xlbjtpLmVxdWFsczJEKHRoaXMuc2VnLnAwKT90aGlzLnNwbGl0UHQ9dGhpcy5zZWcucG9pbnRBbG9uZyhzKTp0aGlzLnNwbGl0UHQ9U3MucG9pbnRBbG9uZ1JldmVyc2UodGhpcy5zZWcscyl9fSxzZXRNaW5pbXVtTGVuZ3RoOmZ1bmN0aW9uKHQpe3RoaXMubWluaW11bUxlbj10fSxnZXRDb25zdHJhaW5lZExlbmd0aDpmdW5jdGlvbih0KXtyZXR1cm4gdDx0aGlzLm1pbmltdW1MZW4/dGhpcy5taW5pbXVtTGVuOnR9LGdldFNwbGl0UG9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zcGxpdFB0fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBTc319KSxTcy5wb2ludEFsb25nUmV2ZXJzZT1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBnO3JldHVybiBuLng9dC5wMS54LWUqKHQucDEueC10LnAwLngpLG4ueT10LnAxLnktZSoodC5wMS55LXQucDAueSksbn0sZSh3cy5wcm90b3R5cGUse2ZpbmRTcGxpdFBvaW50OmZ1bmN0aW9uKHQsZSl7fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB3c319KSxlKExzLnByb3RvdHlwZSx7ZmluZFNwbGl0UG9pbnQ6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldExpbmVTZWdtZW50KCksaT1uLmdldExlbmd0aCgpLHI9aS8yLHM9bmV3IFNzKG4pLG89THMucHJvamVjdGVkU3BsaXRQb2ludCh0LGUpLGE9MipvLmRpc3RhbmNlKGUpKi44LHU9YTtyZXR1cm4gdT5yJiYodT1yKSxzLnNldE1pbmltdW1MZW5ndGgodSkscy5zcGxpdEF0KG8pLHMuZ2V0U3BsaXRQb2ludCgpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVyblt3c119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIExzfX0pLExzLnByb2plY3RlZFNwbGl0UG9pbnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10LmdldExpbmVTZWdtZW50KCksaT1uLnByb2plY3QoZSk7cmV0dXJuIGl9LGUoUnMucHJvdG90eXBlLHtpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBSc319KSxScy50cmlBcmVhPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4oZS54LXQueCkqKG4ueS10LnkpLShlLnktdC55KSoobi54LXQueCl9LFJzLmlzSW5DaXJjbGVERE5vcm1hbGl6ZWQ9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9Xy52YWx1ZU9mKHQueCkuc2VsZlN1YnRyYWN0KGkueCkscz1fLnZhbHVlT2YodC55KS5zZWxmU3VidHJhY3QoaS55KSxvPV8udmFsdWVPZihlLngpLnNlbGZTdWJ0cmFjdChpLngpLGE9Xy52YWx1ZU9mKGUueSkuc2VsZlN1YnRyYWN0KGkueSksdT1fLnZhbHVlT2Yobi54KS5zZWxmU3VidHJhY3QoaS54KSxsPV8udmFsdWVPZihuLnkpLnNlbGZTdWJ0cmFjdChpLnkpLGg9ci5tdWx0aXBseShhKS5zZWxmU3VidHJhY3Qoby5tdWx0aXBseShzKSksYz1vLm11bHRpcGx5KGwpLnNlbGZTdWJ0cmFjdCh1Lm11bHRpcGx5KGEpKSxmPXUubXVsdGlwbHkocykuc2VsZlN1YnRyYWN0KHIubXVsdGlwbHkobCkpLGc9ci5tdWx0aXBseShyKS5zZWxmQWRkKHMubXVsdGlwbHkocykpLGQ9by5tdWx0aXBseShvKS5zZWxmQWRkKGEubXVsdGlwbHkoYSkpLHA9dS5tdWx0aXBseSh1KS5zZWxmQWRkKGwubXVsdGlwbHkobCkpLHY9Zy5zZWxmTXVsdGlwbHkoYykuc2VsZkFkZChkLnNlbGZNdWx0aXBseShmKSkuc2VsZkFkZChwLnNlbGZNdWx0aXBseShoKSksbT12LmRvdWJsZVZhbHVlKCk+MDtyZXR1cm4gbX0sUnMuY2hlY2tSb2J1c3RJbkNpcmNsZT1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1Scy5pc0luQ2lyY2xlTm9uUm9idXN0KHQsZSxuLGkpLHM9UnMuaXNJbkNpcmNsZUREU2xvdyh0LGUsbixpKSxvPVJzLmlzSW5DaXJjbGVDQyh0LGUsbixpKSxhPVNpLmNpcmN1bWNlbnRyZSh0LGUsbik7QS5vdXQucHJpbnRsbihcInAgcmFkaXVzIGRpZmYgYSA9IFwiK01hdGguYWJzKGkuZGlzdGFuY2UoYSktdC5kaXN0YW5jZShhKSkvdC5kaXN0YW5jZShhKSkscj09PXMmJnI9PT1vfHwoQS5vdXQucHJpbnRsbihcImluQ2lyY2xlIHJvYnVzdG5lc3MgZmFpbHVyZSAoZG91YmxlIHJlc3VsdCA9IFwiK3IrXCIsIEREIHJlc3VsdCA9IFwiK3MrXCIsIENDIHJlc3VsdCA9IFwiK28rXCIpXCIpLEEub3V0LnByaW50bG4oc2UudG9MaW5lU3RyaW5nKG5ldyBHdChbdCxlLG4saV0pKSksQS5vdXQucHJpbnRsbihcIkNpcmN1bWNlbnRyZSA9IFwiK3NlLnRvUG9pbnQoYSkrXCIgcmFkaXVzID0gXCIrdC5kaXN0YW5jZShhKSksQS5vdXQucHJpbnRsbihcInAgcmFkaXVzIGRpZmYgYSA9IFwiK01hdGguYWJzKGkuZGlzdGFuY2UoYSkvdC5kaXN0YW5jZShhKS0xKSksQS5vdXQucHJpbnRsbihcInAgcmFkaXVzIGRpZmYgYiA9IFwiK01hdGguYWJzKGkuZGlzdGFuY2UoYSkvZS5kaXN0YW5jZShhKS0xKSksQS5vdXQucHJpbnRsbihcInAgcmFkaXVzIGRpZmYgYyA9IFwiK01hdGguYWJzKGkuZGlzdGFuY2UoYSkvbi5kaXN0YW5jZShhKS0xKSksQS5vdXQucHJpbnRsbigpKX0sUnMuaXNJbkNpcmNsZURERmFzdD1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1fLnNxcih0LngpLnNlbGZBZGQoXy5zcXIodC55KSkuc2VsZk11bHRpcGx5KFJzLnRyaUFyZWFEREZhc3QoZSxuLGkpKSxzPV8uc3FyKGUueCkuc2VsZkFkZChfLnNxcihlLnkpKS5zZWxmTXVsdGlwbHkoUnMudHJpQXJlYURERmFzdCh0LG4saSkpLG89Xy5zcXIobi54KS5zZWxmQWRkKF8uc3FyKG4ueSkpLnNlbGZNdWx0aXBseShScy50cmlBcmVhRERGYXN0KHQsZSxpKSksYT1fLnNxcihpLngpLnNlbGZBZGQoXy5zcXIoaS55KSkuc2VsZk11bHRpcGx5KFJzLnRyaUFyZWFEREZhc3QodCxlLG4pKSx1PXIuc2VsZlN1YnRyYWN0KHMpLnNlbGZBZGQobykuc2VsZlN1YnRyYWN0KGEpLGw9dS5kb3VibGVWYWx1ZSgpPjA7cmV0dXJuIGx9LFJzLmlzSW5DaXJjbGVDQz1mdW5jdGlvbih0LGUsbixpKXt2YXIgcj1TaS5jaXJjdW1jZW50cmUodCxlLG4pLHM9dC5kaXN0YW5jZShyKSxvPWkuZGlzdGFuY2UociktcztyZXR1cm4gbzw9MH0sUnMuaXNJbkNpcmNsZU5vcm1hbGl6ZWQ9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC54LWkueCxzPXQueS1pLnksbz1lLngtaS54LGE9ZS55LWkueSx1PW4ueC1pLngsbD1uLnktaS55LGg9ciphLW8qcyxjPW8qbC11KmEsZj11KnMtcipsLGc9cipyK3MqcyxkPW8qbythKmEscD11KnUrbCpsLHY9ZypjK2QqZitwKmg7XG5yZXR1cm4gdj4wfSxScy5pc0luQ2lyY2xlRERTbG93PWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPV8udmFsdWVPZihpLngpLHM9Xy52YWx1ZU9mKGkueSksbz1fLnZhbHVlT2YodC54KSxhPV8udmFsdWVPZih0LnkpLHU9Xy52YWx1ZU9mKGUueCksbD1fLnZhbHVlT2YoZS55KSxoPV8udmFsdWVPZihuLngpLGM9Xy52YWx1ZU9mKG4ueSksZj1vLm11bHRpcGx5KG8pLmFkZChhLm11bHRpcGx5KGEpKS5tdWx0aXBseShScy50cmlBcmVhRERTbG93KHUsbCxoLGMscixzKSksZz11Lm11bHRpcGx5KHUpLmFkZChsLm11bHRpcGx5KGwpKS5tdWx0aXBseShScy50cmlBcmVhRERTbG93KG8sYSxoLGMscixzKSksZD1oLm11bHRpcGx5KGgpLmFkZChjLm11bHRpcGx5KGMpKS5tdWx0aXBseShScy50cmlBcmVhRERTbG93KG8sYSx1LGwscixzKSkscD1yLm11bHRpcGx5KHIpLmFkZChzLm11bHRpcGx5KHMpKS5tdWx0aXBseShScy50cmlBcmVhRERTbG93KG8sYSx1LGwsaCxjKSksdj1mLnN1YnRyYWN0KGcpLmFkZChkKS5zdWJ0cmFjdChwKSxtPXYuZG91YmxlVmFsdWUoKT4wO3JldHVybiBtfSxScy5pc0luQ2lyY2xlTm9uUm9idXN0PWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPSh0LngqdC54K3QueSp0LnkpKlJzLnRyaUFyZWEoZSxuLGkpLShlLngqZS54K2UueSplLnkpKlJzLnRyaUFyZWEodCxuLGkpKyhuLngqbi54K24ueSpuLnkpKlJzLnRyaUFyZWEodCxlLGkpLShpLngqaS54K2kueSppLnkpKlJzLnRyaUFyZWEodCxlLG4pPjA7cmV0dXJuIHJ9LFJzLmlzSW5DaXJjbGVSb2J1c3Q9ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIFJzLmlzSW5DaXJjbGVOb3JtYWxpemVkKHQsZSxuLGkpfSxScy50cmlBcmVhRERTbG93PWZ1bmN0aW9uKHQsZSxuLGkscixzKXtyZXR1cm4gbi5zdWJ0cmFjdCh0KS5tdWx0aXBseShzLnN1YnRyYWN0KGUpKS5zdWJ0cmFjdChpLnN1YnRyYWN0KGUpLm11bHRpcGx5KHIuc3VidHJhY3QodCkpKX0sUnMudHJpQXJlYURERmFzdD1mdW5jdGlvbih0LGUsbil7dmFyIGk9Xy52YWx1ZU9mKGUueCkuc2VsZlN1YnRyYWN0KHQueCkuc2VsZk11bHRpcGx5KF8udmFsdWVPZihuLnkpLnNlbGZTdWJ0cmFjdCh0LnkpKSxyPV8udmFsdWVPZihlLnkpLnNlbGZTdWJ0cmFjdCh0LnkpLnNlbGZNdWx0aXBseShfLnZhbHVlT2Yobi54KS5zZWxmU3VidHJhY3QodC54KSk7cmV0dXJuIGkuc2VsZlN1YnRyYWN0KHIpfSxlKFRzLnByb3RvdHlwZSx7Y2lyY2xlQ2VudGVyOmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IFRzKHRoaXMuZ2V0WCgpLHRoaXMuZ2V0WSgpKSxpPXRoaXMuYmlzZWN0b3Iobix0KSxyPXRoaXMuYmlzZWN0b3IodCxlKSxzPW5ldyBGKGksciksbz1udWxsO3RyeXtvPW5ldyBUcyhzLmdldFgoKSxzLmdldFkoKSl9Y2F0Y2goaSl7aWYoIShpIGluc3RhbmNlb2YgdykpdGhyb3cgaTtBLmVyci5wcmludGxuKFwiYTogXCIrbitcIiAgYjogXCIrdCtcIiAgYzogXCIrZSksQS5lcnIucHJpbnRsbihpKX1maW5hbGx5e31yZXR1cm4gb30sZG90OmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnAueCp0LmdldFgoKSt0aGlzLnAueSp0LmdldFkoKX0sbWFnbjpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy5wLngqdGhpcy5wLngrdGhpcy5wLnkqdGhpcy5wLnkpfSxnZXRaOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucC56fSxiaXNlY3RvcjpmdW5jdGlvbih0LGUpe3ZhciBuPWUuZ2V0WCgpLXQuZ2V0WCgpLGk9ZS5nZXRZKCktdC5nZXRZKCkscj1uZXcgRih0LmdldFgoKStuLzIsdC5nZXRZKCkraS8yLDEpLHM9bmV3IEYodC5nZXRYKCktaStuLzIsdC5nZXRZKCkrbitpLzIsMSk7cmV0dXJuIG5ldyBGKHIscyl9LGVxdWFsczpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMucC54PT09dC5nZXRYKCkmJnRoaXMucC55PT09dC5nZXRZKCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gdGhpcy5wLmRpc3RhbmNlKGUuZ2V0Q29vcmRpbmF0ZSgpKTxufX0sZ2V0Q29vcmRpbmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB9LGlzSW5DaXJjbGU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiBScy5pc0luQ2lyY2xlUm9idXN0KHQucCxlLnAsbi5wLHRoaXMucCl9LGludGVycG9sYXRlWlZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmdldFgoKSxyPXQuZ2V0WSgpLHM9ZS5nZXRYKCktaSxvPW4uZ2V0WCgpLWksYT1lLmdldFkoKS1yLHU9bi5nZXRZKCktcixsPXMqdS1vKmEsaD10aGlzLmdldFgoKS1pLGM9dGhpcy5nZXRZKCktcixmPSh1KmgtbypjKS9sLGc9KC1hKmgrcypjKS9sLGQ9dC5nZXRaKCkrZiooZS5nZXRaKCktdC5nZXRaKCkpK2cqKG4uZ2V0WigpLXQuZ2V0WigpKTtyZXR1cm4gZH0sbWlkUG9pbnQ6ZnVuY3Rpb24odCl7dmFyIGU9KHRoaXMucC54K3QuZ2V0WCgpKS8yLG49KHRoaXMucC55K3QuZ2V0WSgpKS8yLGk9KHRoaXMucC56K3QuZ2V0WigpKS8yO3JldHVybiBuZXcgVHMoZSxuLGkpfSxyaWdodE9mOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmlzQ0NXKHQuZGVzdCgpLHQub3JpZygpKX0saXNDQ1c6ZnVuY3Rpb24odCxlKXtyZXR1cm4odC5wLngtdGhpcy5wLngpKihlLnAueS10aGlzLnAueSktKHQucC55LXRoaXMucC55KSooZS5wLngtdGhpcy5wLngpPjB9LGdldFg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wLnh9LGNyb3NzUHJvZHVjdDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wLngqdC5nZXRZKCktdGhpcy5wLnkqdC5nZXRYKCl9LHNldFo6ZnVuY3Rpb24odCl7dGhpcy5wLno9dH0sdGltZXM6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBUcyh0KnRoaXMucC54LHQqdGhpcy5wLnkpfSxjcm9zczpmdW5jdGlvbigpe3JldHVybiBuZXcgVHModGhpcy5wLnksKC10aGlzLnAueCkpfSxsZWZ0T2Y6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaXNDQ1codC5vcmlnKCksdC5kZXN0KCkpfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwiUE9JTlQgKFwiK3RoaXMucC54K1wiIFwiK3RoaXMucC55K1wiKVwifSxzdWI6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBUcyh0aGlzLnAueC10LmdldFgoKSx0aGlzLnAueS10LmdldFkoKSl9LGdldFk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wLnl9LGNsYXNzaWZ5OmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxpPWUuc3ViKHQpLHI9bi5zdWIodCkscz1pLmNyb3NzUHJvZHVjdChyKTtyZXR1cm4gcz4wP1RzLkxFRlQ6czwwP1RzLlJJR0hUOmkuZ2V0WCgpKnIuZ2V0WCgpPDB8fGkuZ2V0WSgpKnIuZ2V0WSgpPDA/VHMuQkVISU5EOmkubWFnbigpPHIubWFnbigpP1RzLkJFWU9ORDp0LmVxdWFscyhuKT9Ucy5PUklHSU46ZS5lcXVhbHMobik/VHMuREVTVElOQVRJT046VHMuQkVUV0VFTn0sc3VtOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgVHModGhpcy5wLngrdC5nZXRYKCksdGhpcy5wLnkrdC5nZXRZKCkpfSxkaXN0YW5jZTpmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZS5nZXRYKCktdC5nZXRYKCksMikrTWF0aC5wb3coZS5nZXRZKCktdC5nZXRZKCksMikpfSxjaXJjdW1SYWRpdXNSYXRpbzpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuY2lyY2xlQ2VudGVyKHQsZSksaT10aGlzLmRpc3RhbmNlKG4sdCkscj10aGlzLmRpc3RhbmNlKHRoaXMsdCkscz10aGlzLmRpc3RhbmNlKHQsZSk7cmV0dXJuIHM8ciYmKHI9cykscz10aGlzLmRpc3RhbmNlKGUsdGhpcyksczxyJiYocj1zKSxpL3J9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFRzfX0pLFRzLmludGVycG9sYXRlWj1mdW5jdGlvbigpe2lmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1hcmd1bWVudHNbMV0sbj1hcmd1bWVudHNbMl0saT1lLmRpc3RhbmNlKG4pLHI9dC5kaXN0YW5jZShlKSxzPW4uei1lLnosbz1lLnorcyooci9pKTtyZXR1cm4gb31pZig0PT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGE9YXJndW1lbnRzWzBdLHU9YXJndW1lbnRzWzFdLGw9YXJndW1lbnRzWzJdLGg9YXJndW1lbnRzWzNdLGM9dS54LGY9dS55LGc9bC54LWMsZD1oLngtYyxwPWwueS1mLHY9aC55LWYsbT1nKnYtZCpwLHk9YS54LWMseD1hLnktZixFPSh2KnktZCp4KS9tLEk9KC1wKnkrZyp4KS9tLE49dS56K0UqKGwuei11LnopK0kqKGguei11LnopO3JldHVybiBOfX0sVHMuTEVGVD0wLFRzLlJJR0hUPTEsVHMuQkVZT05EPTIsVHMuQkVISU5EPTMsVHMuQkVUV0VFTj00LFRzLk9SSUdJTj01LFRzLkRFU1RJTkFUSU9OPTYsaChQcyxUcyksZShQcy5wcm90b3R5cGUse2dldENvbnN0cmFpbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJhaW50fSxzZXRPbkNvbnN0cmFpbnQ6ZnVuY3Rpb24odCl7dGhpcy5faXNPbkNvbnN0cmFpbnQ9dH0sbWVyZ2U6ZnVuY3Rpb24odCl7dC5faXNPbkNvbnN0cmFpbnQmJih0aGlzLl9pc09uQ29uc3RyYWludD0hMCx0aGlzLmNvbnN0cmFpbnQ9dC5jb25zdHJhaW50KX0saXNPbkNvbnN0cmFpbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNPbkNvbnN0cmFpbnR9LHNldENvbnN0cmFpbnQ6ZnVuY3Rpb24odCl7dGhpcy5faXNPbkNvbnN0cmFpbnQ9ITAsdGhpcy5jb25zdHJhaW50PXR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFBzfX0pLGUoYnMucHJvdG90eXBlLHtlcXVhbHNOb25PcmllbnRlZDpmdW5jdGlvbih0KXtyZXR1cm4hIXRoaXMuZXF1YWxzT3JpZW50ZWQodCl8fCEhdGhpcy5lcXVhbHNPcmllbnRlZCh0LnN5bSgpKX0sdG9MaW5lU2VnbWVudDpmdW5jdGlvbigpe3JldHVybiBuZXcgY2UodGhpcy52ZXJ0ZXguZ2V0Q29vcmRpbmF0ZSgpLHRoaXMuZGVzdCgpLmdldENvb3JkaW5hdGUoKSl9LGRlc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zeW0oKS5vcmlnKCl9LG9OZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV4dH0sZXF1YWxzT3JpZW50ZWQ6ZnVuY3Rpb24odCl7cmV0dXJuISghdGhpcy5vcmlnKCkuZ2V0Q29vcmRpbmF0ZSgpLmVxdWFsczJEKHQub3JpZygpLmdldENvb3JkaW5hdGUoKSl8fCF0aGlzLmRlc3QoKS5nZXRDb29yZGluYXRlKCkuZXF1YWxzMkQodC5kZXN0KCkuZ2V0Q29vcmRpbmF0ZSgpKSl9LGROZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3ltKCkub05leHQoKS5zeW0oKX0sbFByZXY6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXh0LnN5bSgpfSxyUHJldjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN5bSgpLm9OZXh0KCl9LHJvdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yb3R9LG9QcmV2OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JvdC5uZXh0Ll9yb3R9LHN5bTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yb3QuX3JvdH0sc2V0T3JpZzpmdW5jdGlvbih0KXt0aGlzLnZlcnRleD10fSxsTmV4dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmludlJvdCgpLm9OZXh0KCkucm90KCl9LGdldExlbmd0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9yaWcoKS5nZXRDb29yZGluYXRlKCkuZGlzdGFuY2UodGhpcy5kZXN0KCkuZ2V0Q29vcmRpbmF0ZSgpKX0saW52Um90OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JvdC5zeW0oKX0sc2V0RGVzdDpmdW5jdGlvbih0KXt0aGlzLnN5bSgpLnNldE9yaWcodCl9LHNldERhdGE6ZnVuY3Rpb24odCl7dGhpcy5kYXRhPXR9LGdldERhdGE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhfSxkZWxldGU6ZnVuY3Rpb24oKXt0aGlzLl9yb3Q9bnVsbH0sb3JpZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZlcnRleH0sck5leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcm90Lm5leHQuaW52Um90KCl9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy52ZXJ0ZXguZ2V0Q29vcmRpbmF0ZSgpLGU9dGhpcy5kZXN0KCkuZ2V0Q29vcmRpbmF0ZSgpO3JldHVybiBzZS50b0xpbmVTdHJpbmcodCxlKX0saXNMaXZlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLl9yb3R9LGdldFByaW1hcnk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcmlnKCkuZ2V0Q29vcmRpbmF0ZSgpLmNvbXBhcmVUbyh0aGlzLmRlc3QoKS5nZXRDb29yZGluYXRlKCkpPD0wP3RoaXM6dGhpcy5zeW0oKX0sZFByZXY6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnZSb3QoKS5vTmV4dCgpLmludlJvdCgpfSxzZXROZXh0OmZ1bmN0aW9uKHQpe3RoaXMubmV4dD10fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBic319KSxicy5tYWtlRWRnZT1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBicyxpPW5ldyBicyxyPW5ldyBicyxzPW5ldyBicztuLl9yb3Q9aSxpLl9yb3Q9cixyLl9yb3Q9cyxzLl9yb3Q9bixuLnNldE5leHQobiksaS5zZXROZXh0KHMpLHIuc2V0TmV4dChyKSxzLnNldE5leHQoaSk7dmFyIG89bjtyZXR1cm4gby5zZXRPcmlnKHQpLG8uc2V0RGVzdChlKSxvfSxicy5zd2FwPWZ1bmN0aW9uKHQpe3ZhciBlPXQub1ByZXYoKSxuPXQuc3ltKCkub1ByZXYoKTticy5zcGxpY2UodCxlKSxicy5zcGxpY2UodC5zeW0oKSxuKSxicy5zcGxpY2UodCxlLmxOZXh0KCkpLGJzLnNwbGljZSh0LnN5bSgpLG4ubE5leHQoKSksdC5zZXRPcmlnKGUuZGVzdCgpKSx0LnNldERlc3Qobi5kZXN0KCkpfSxicy5zcGxpY2U9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lm9OZXh0KCkucm90KCksaT1lLm9OZXh0KCkucm90KCkscj1lLm9OZXh0KCkscz10Lm9OZXh0KCksbz1pLm9OZXh0KCksYT1uLm9OZXh0KCk7dC5zZXROZXh0KHIpLGUuc2V0TmV4dChzKSxuLnNldE5leHQobyksaS5zZXROZXh0KGEpfSxicy5jb25uZWN0PWZ1bmN0aW9uKHQsZSl7dmFyIG49YnMubWFrZUVkZ2UodC5kZXN0KCksZS5vcmlnKCkpO3JldHVybiBicy5zcGxpY2Uobix0LmxOZXh0KCkpLGJzLnNwbGljZShuLnN5bSgpLGUpLG59LGUoT3MucHJvdG90eXBlLHtpbnNlcnRTaXRlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc3ViZGl2LmxvY2F0ZSh0KTtpZih0aGlzLnN1YmRpdi5pc1ZlcnRleE9mRWRnZShlLHQpKXJldHVybiBlO3RoaXMuc3ViZGl2LmlzT25FZGdlKGUsdC5nZXRDb29yZGluYXRlKCkpJiYoZT1lLm9QcmV2KCksdGhpcy5zdWJkaXYuZGVsZXRlKGUub05leHQoKSkpO3ZhciBuPXRoaXMuc3ViZGl2Lm1ha2VFZGdlKGUub3JpZygpLHQpO2JzLnNwbGljZShuLGUpO3ZhciBpPW47ZG8gbj10aGlzLnN1YmRpdi5jb25uZWN0KGUsbi5zeW0oKSksZT1uLm9QcmV2KCk7d2hpbGUoZS5sTmV4dCgpIT09aSk7Zm9yKDs7KXt2YXIgcj1lLm9QcmV2KCk7aWYoci5kZXN0KCkucmlnaHRPZihlKSYmdC5pc0luQ2lyY2xlKGUub3JpZygpLHIuZGVzdCgpLGUuZGVzdCgpKSlicy5zd2FwKGUpLGU9ZS5vUHJldigpO2Vsc2V7aWYoZS5vTmV4dCgpPT09aSlyZXR1cm4gbjtlPWUub05leHQoKS5sUHJldigpfX19LGluc2VydFNpdGVzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lml0ZXJhdG9yKCk7ZS5oYXNOZXh0KCk7KXt2YXIgbj1lLm5leHQoKTt0aGlzLmluc2VydFNpdGUobil9fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBPc319KSxlKF9zLnByb3RvdHlwZSx7bG9jYXRlOmZ1bmN0aW9uKHQpe30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gX3N9fSksZShNcy5wcm90b3R5cGUse2luaXQ6ZnVuY3Rpb24oKXt0aGlzLmxhc3RFZGdlPXRoaXMuZmluZEVkZ2UoKX0sbG9jYXRlOmZ1bmN0aW9uKHQpe3RoaXMubGFzdEVkZ2UuaXNMaXZlKCl8fHRoaXMuaW5pdCgpO3ZhciBlPXRoaXMuc3ViZGl2LmxvY2F0ZUZyb21FZGdlKHQsdGhpcy5sYXN0RWRnZSk7cmV0dXJuIHRoaXMubGFzdEVkZ2U9ZSxlfSxmaW5kRWRnZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc3ViZGl2LmdldEVkZ2VzKCk7cmV0dXJuIHQuaXRlcmF0b3IoKS5uZXh0KCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW19zXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gTXN9fSksaChEcyxsKSxlKERzLnByb3RvdHlwZSx7Z2V0U2VnbWVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlZ30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gRHN9fSksRHMubXNnV2l0aFNwYXRpYWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbCE9PWU/dCtcIiBbIFwiK2UrXCIgXVwiOnR9LGUoQXMucHJvdG90eXBlLHt2aXNpdDpmdW5jdGlvbih0KXt9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEFzfX0pLGUoRnMucHJvdG90eXBlLHtnZXRUcmlhbmdsZVZlcnRpY2VzOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBCcztyZXR1cm4gdGhpcy52aXNpdFRyaWFuZ2xlcyhlLHQpLGUuZ2V0VHJpYW5nbGVWZXJ0aWNlcygpfSxpc0ZyYW1lVmVydGV4OmZ1bmN0aW9uKHQpe3JldHVybiEhdC5lcXVhbHModGhpcy5mcmFtZVZlcnRleFswXSl8fCghIXQuZXF1YWxzKHRoaXMuZnJhbWVWZXJ0ZXhbMV0pfHwhIXQuZXF1YWxzKHRoaXMuZnJhbWVWZXJ0ZXhbMl0pKX0saXNWZXJ0ZXhPZkVkZ2U6ZnVuY3Rpb24odCxlKXtyZXR1cm4hKCFlLmVxdWFscyh0Lm9yaWcoKSx0aGlzLnRvbGVyYW5jZSkmJiFlLmVxdWFscyh0LmRlc3QoKSx0aGlzLnRvbGVyYW5jZSkpfSxjb25uZWN0OmZ1bmN0aW9uKHQsZSl7dmFyIG49YnMuY29ubmVjdCh0LGUpO3JldHVybiB0aGlzLnF1YWRFZGdlcy5hZGQobiksbn0sZ2V0Vm9yb25vaUNlbGxQb2x5Z29uOmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IEksaT10O2Rve3ZhciByPXQucm90KCkub3JpZygpLmdldENvb3JkaW5hdGUoKTtuLmFkZChyKSx0PXQub1ByZXYoKX13aGlsZSh0IT09aSk7dmFyIHM9bmV3IE47cy5hZGRBbGwobiwhMSkscy5jbG9zZVJpbmcoKSxzLnNpemUoKTw0JiYoQS5vdXQucHJpbnRsbihzKSxzLmFkZChzLmdldChzLnNpemUoKS0xKSwhMCkpO3ZhciBvPXMudG9Db29yZGluYXRlQXJyYXkoKSxhPWUuY3JlYXRlUG9seWdvbihlLmNyZWF0ZUxpbmVhclJpbmcobyksbnVsbCksdT1pLm9yaWcoKTtyZXR1cm4gYS5zZXRVc2VyRGF0YSh1LmdldENvb3JkaW5hdGUoKSksYX0sc2V0TG9jYXRvcjpmdW5jdGlvbih0KXt0aGlzLmxvY2F0b3I9dH0saW5pdFN1YmRpdjpmdW5jdGlvbigpe3ZhciB0PXRoaXMubWFrZUVkZ2UodGhpcy5mcmFtZVZlcnRleFswXSx0aGlzLmZyYW1lVmVydGV4WzFdKSxlPXRoaXMubWFrZUVkZ2UodGhpcy5mcmFtZVZlcnRleFsxXSx0aGlzLmZyYW1lVmVydGV4WzJdKTticy5zcGxpY2UodC5zeW0oKSxlKTt2YXIgbj10aGlzLm1ha2VFZGdlKHRoaXMuZnJhbWVWZXJ0ZXhbMl0sdGhpcy5mcmFtZVZlcnRleFswXSk7cmV0dXJuIGJzLnNwbGljZShlLnN5bSgpLG4pLGJzLnNwbGljZShuLnN5bSgpLHQpLHR9LGlzRnJhbWVCb3JkZXJFZGdlOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheSgzKS5maWxsKG51bGwpO0ZzLmdldFRyaWFuZ2xlRWRnZXModCxlKTt2YXIgbj1uZXcgQXJyYXkoMykuZmlsbChudWxsKTtGcy5nZXRUcmlhbmdsZUVkZ2VzKHQuc3ltKCksbik7dmFyIGk9dC5sTmV4dCgpLmRlc3QoKTtpZih0aGlzLmlzRnJhbWVWZXJ0ZXgoaSkpcmV0dXJuITA7dmFyIHI9dC5zeW0oKS5sTmV4dCgpLmRlc3QoKTtyZXR1cm4hIXRoaXMuaXNGcmFtZVZlcnRleChyKX0sbWFrZUVkZ2U6ZnVuY3Rpb24odCxlKXt2YXIgbj1icy5tYWtlRWRnZSh0LGUpO3JldHVybiB0aGlzLnF1YWRFZGdlcy5hZGQobiksbn0sdmlzaXRUcmlhbmdsZXM6ZnVuY3Rpb24odCxlKXt0aGlzLnZpc2l0ZWRLZXkrKzt2YXIgbj1uZXcgcGU7bi5wdXNoKHRoaXMuc3RhcnRpbmdFZGdlKTtmb3IodmFyIGk9bmV3IEo7IW4uZW1wdHkoKTspe3ZhciByPW4ucG9wKCk7aWYoIWkuY29udGFpbnMocikpe3ZhciBzPXRoaXMuZmV0Y2hUcmlhbmdsZVRvVmlzaXQocixuLGUsaSk7bnVsbCE9PXMmJnQudmlzaXQocyl9fX0saXNGcmFtZUVkZ2U6ZnVuY3Rpb24odCl7cmV0dXJuISghdGhpcy5pc0ZyYW1lVmVydGV4KHQub3JpZygpKSYmIXRoaXMuaXNGcmFtZVZlcnRleCh0LmRlc3QoKSkpfSxpc09uRWRnZTpmdW5jdGlvbih0LGUpe3RoaXMuc2VnLnNldENvb3JkaW5hdGVzKHQub3JpZygpLmdldENvb3JkaW5hdGUoKSx0LmRlc3QoKS5nZXRDb29yZGluYXRlKCkpO3ZhciBuPXRoaXMuc2VnLmRpc3RhbmNlKGUpO3JldHVybiBuPHRoaXMuZWRnZUNvaW5jaWRlbmNlVG9sZXJhbmNlfSxnZXRFbnZlbG9wZTpmdW5jdGlvbigpe3JldHVybiBuZXcgQyh0aGlzLmZyYW1lRW52KX0sY3JlYXRlRnJhbWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRXaWR0aCgpLG49dC5nZXRIZWlnaHQoKSxpPTA7aT1lPm4/MTAqZToxMCpuLHRoaXMuZnJhbWVWZXJ0ZXhbMF09bmV3IFRzKCh0LmdldE1heFgoKSt0LmdldE1pblgoKSkvMix0LmdldE1heFkoKStpKSx0aGlzLmZyYW1lVmVydGV4WzFdPW5ldyBUcyh0LmdldE1pblgoKS1pLHQuZ2V0TWluWSgpLWkpLHRoaXMuZnJhbWVWZXJ0ZXhbMl09bmV3IFRzKHQuZ2V0TWF4WCgpK2ksdC5nZXRNaW5ZKCktaSksdGhpcy5mcmFtZUVudj1uZXcgQyh0aGlzLmZyYW1lVmVydGV4WzBdLmdldENvb3JkaW5hdGUoKSx0aGlzLmZyYW1lVmVydGV4WzFdLmdldENvb3JkaW5hdGUoKSksdGhpcy5mcmFtZUVudi5leHBhbmRUb0luY2x1ZGUodGhpcy5mcmFtZVZlcnRleFsyXS5nZXRDb29yZGluYXRlKCkpfSxnZXRUcmlhbmdsZUNvb3JkaW5hdGVzOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB6cztyZXR1cm4gdGhpcy52aXNpdFRyaWFuZ2xlcyhlLHQpLGUuZ2V0VHJpYW5nbGVzKCl9LGdldFZlcnRpY2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgSixuPXRoaXMucXVhZEVkZ2VzLml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKSxyPWkub3JpZygpOyF0JiZ0aGlzLmlzRnJhbWVWZXJ0ZXgocil8fGUuYWRkKHIpO3ZhciBzPWkuZGVzdCgpOyF0JiZ0aGlzLmlzRnJhbWVWZXJ0ZXgocyl8fGUuYWRkKHMpfXJldHVybiBlfSxmZXRjaFRyaWFuZ2xlVG9WaXNpdDpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj10LHM9MCxvPSExO2Rve3RoaXMudHJpRWRnZXNbc109cix0aGlzLmlzRnJhbWVFZGdlKHIpJiYobz0hMCk7dmFyIGE9ci5zeW0oKTtpLmNvbnRhaW5zKGEpfHxlLnB1c2goYSksaS5hZGQocikscysrLHI9ci5sTmV4dCgpfXdoaWxlKHIhPT10KTtyZXR1cm4gbyYmIW4/bnVsbDp0aGlzLnRyaUVkZ2VzfSxnZXRFZGdlczpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLnF1YWRFZGdlcztpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKHZhciB0PWFyZ3VtZW50c1swXSxlPXRoaXMuZ2V0UHJpbWFyeUVkZ2VzKCExKSxuPW5ldyBBcnJheShlLnNpemUoKSkuZmlsbChudWxsKSxpPTAscj1lLml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKTtuW2krK109dC5jcmVhdGVMaW5lU3RyaW5nKFtzLm9yaWcoKS5nZXRDb29yZGluYXRlKCkscy5kZXN0KCkuZ2V0Q29vcmRpbmF0ZSgpXSl9cmV0dXJuIHQuY3JlYXRlTXVsdGlMaW5lU3RyaW5nKG4pfX0sZ2V0VmVydGV4VW5pcXVlRWRnZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBJLG49bmV3IEosaT10aGlzLnF1YWRFZGdlcy5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCkscz1yLm9yaWcoKTtuLmNvbnRhaW5zKHMpfHwobi5hZGQocyksIXQmJnRoaXMuaXNGcmFtZVZlcnRleChzKXx8ZS5hZGQocikpO3ZhciBvPXIuc3ltKCksYT1vLm9yaWcoKTtuLmNvbnRhaW5zKGEpfHwobi5hZGQoYSksIXQmJnRoaXMuaXNGcmFtZVZlcnRleChhKXx8ZS5hZGQobykpfXJldHVybiBlfSxnZXRUcmlhbmdsZUVkZ2VzOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBxcztyZXR1cm4gdGhpcy52aXNpdFRyaWFuZ2xlcyhlLHQpLGUuZ2V0VHJpYW5nbGVFZGdlcygpfSxnZXRQcmltYXJ5RWRnZXM6ZnVuY3Rpb24odCl7dGhpcy52aXNpdGVkS2V5Kys7dmFyIGU9bmV3IEksbj1uZXcgcGU7bi5wdXNoKHRoaXMuc3RhcnRpbmdFZGdlKTtmb3IodmFyIGk9bmV3IEo7IW4uZW1wdHkoKTspe3ZhciByPW4ucG9wKCk7aWYoIWkuY29udGFpbnMocikpe3ZhciBzPXIuZ2V0UHJpbWFyeSgpOyF0JiZ0aGlzLmlzRnJhbWVFZGdlKHMpfHxlLmFkZChzKSxuLnB1c2goci5vTmV4dCgpKSxuLnB1c2goci5zeW0oKS5vTmV4dCgpKSxpLmFkZChyKSxpLmFkZChyLnN5bSgpKX19cmV0dXJuIGV9LGRlbGV0ZTpmdW5jdGlvbih0KXticy5zcGxpY2UodCx0Lm9QcmV2KCkpLGJzLnNwbGljZSh0LnN5bSgpLHQuc3ltKCkub1ByZXYoKSk7dmFyIGU9dC5zeW0oKSxuPXQucm90KCksaT10LnJvdCgpLnN5bSgpO3RoaXMucXVhZEVkZ2VzLnJlbW92ZSh0KSx0aGlzLnF1YWRFZGdlcy5yZW1vdmUoZSksdGhpcy5xdWFkRWRnZXMucmVtb3ZlKG4pLHRoaXMucXVhZEVkZ2VzLnJlbW92ZShpKSx0LmRlbGV0ZSgpLGUuZGVsZXRlKCksbi5kZWxldGUoKSxpLmRlbGV0ZSgpfSxsb2NhdGVGcm9tRWRnZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wLGk9dGhpcy5xdWFkRWRnZXMuc2l6ZSgpLHI9ZTs7KXtpZihuKyssbj5pKXRocm93IG5ldyBEcyhyLnRvTGluZVNlZ21lbnQoKSk7aWYodC5lcXVhbHMoci5vcmlnKCkpfHx0LmVxdWFscyhyLmRlc3QoKSkpYnJlYWs7aWYodC5yaWdodE9mKHIpKXI9ci5zeW0oKTtlbHNlIGlmKHQucmlnaHRPZihyLm9OZXh0KCkpKXtpZih0LnJpZ2h0T2Yoci5kUHJldigpKSlicmVhaztyPXIuZFByZXYoKX1lbHNlIHI9ci5vTmV4dCgpfXJldHVybiByfSxnZXRUb2xlcmFuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b2xlcmFuY2V9LGdldFZvcm9ub2lDZWxsUG9seWdvbnM6ZnVuY3Rpb24odCl7dGhpcy52aXNpdFRyaWFuZ2xlcyhuZXcgR3MsITApO2Zvcih2YXIgZT1uZXcgSSxuPXRoaXMuZ2V0VmVydGV4VW5pcXVlRWRnZXMoITEpLGk9bi5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7ZS5hZGQodGhpcy5nZXRWb3Jvbm9pQ2VsbFBvbHlnb24ocix0KSl9cmV0dXJuIGV9LGdldFZvcm9ub2lEaWFncmFtOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0Vm9yb25vaUNlbGxQb2x5Z29ucyh0KTtyZXR1cm4gdC5jcmVhdGVHZW9tZXRyeUNvbGxlY3Rpb24oaWUudG9HZW9tZXRyeUFycmF5KGUpKX0sZ2V0VHJpYW5nbGVzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmdldFRyaWFuZ2xlQ29vcmRpbmF0ZXMoITEpLG49bmV3IEFycmF5KGUuc2l6ZSgpKS5maWxsKG51bGwpLGk9MCxyPWUuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspe3ZhciBzPXIubmV4dCgpO25baSsrXT10LmNyZWF0ZVBvbHlnb24odC5jcmVhdGVMaW5lYXJSaW5nKHMpLG51bGwpfXJldHVybiB0LmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihuKX0saW5zZXJ0U2l0ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmxvY2F0ZSh0KTtpZih0LmVxdWFscyhlLm9yaWcoKSx0aGlzLnRvbGVyYW5jZSl8fHQuZXF1YWxzKGUuZGVzdCgpLHRoaXMudG9sZXJhbmNlKSlyZXR1cm4gZTt2YXIgbj10aGlzLm1ha2VFZGdlKGUub3JpZygpLHQpO2JzLnNwbGljZShuLGUpO3ZhciBpPW47ZG8gbj10aGlzLmNvbm5lY3QoZSxuLnN5bSgpKSxlPW4ub1ByZXYoKTt3aGlsZShlLmxOZXh0KCkhPT1pKTtyZXR1cm4gaX0sbG9jYXRlOmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgVHMpe3ZhciB0PWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5sb2NhdG9yLmxvY2F0ZSh0KX1pZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIGcpe3ZhciBlPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5sb2NhdG9yLmxvY2F0ZShuZXcgVHMoZSkpfX1lbHNlIGlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0scj10aGlzLmxvY2F0b3IubG9jYXRlKG5ldyBUcyhuKSk7aWYobnVsbD09PXIpcmV0dXJuIG51bGw7dmFyIHM9cjtyLmRlc3QoKS5nZXRDb29yZGluYXRlKCkuZXF1YWxzMkQobikmJihzPXIuc3ltKCkpO3ZhciBvPXM7ZG97aWYoby5kZXN0KCkuZ2V0Q29vcmRpbmF0ZSgpLmVxdWFsczJEKGkpKXJldHVybiBvO289by5vTmV4dCgpfXdoaWxlKG8hPT1zKTtyZXR1cm4gbnVsbH19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEZzfX0pLEZzLmdldFRyaWFuZ2xlRWRnZXM9ZnVuY3Rpb24odCxlKXtpZihlWzBdPXQsZVsxXT1lWzBdLmxOZXh0KCksZVsyXT1lWzFdLmxOZXh0KCksZVsyXS5sTmV4dCgpIT09ZVswXSl0aHJvdyBuZXcgaShcIkVkZ2VzIGRvIG5vdCBmb3JtIGEgdHJpYW5nbGVcIil9LGUoR3MucHJvdG90eXBlLHt2aXNpdDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dFswXS5vcmlnKCkuZ2V0Q29vcmRpbmF0ZSgpLG49dFsxXS5vcmlnKCkuZ2V0Q29vcmRpbmF0ZSgpLGk9dFsyXS5vcmlnKCkuZ2V0Q29vcmRpbmF0ZSgpLHI9U2kuY2lyY3VtY2VudHJlKGUsbixpKSxzPW5ldyBUcyhyKSxvPTA7bzwzO28rKyl0W29dLnJvdCgpLnNldE9yaWcocyl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW0FzXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gR3N9fSksZShxcy5wcm90b3R5cGUse2dldFRyaWFuZ2xlRWRnZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmlMaXN0fSx2aXNpdDpmdW5jdGlvbih0KXt0aGlzLnRyaUxpc3QuYWRkKHQuY2xvbmUoKSl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW0FzXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gcXN9fSksZShCcy5wcm90b3R5cGUse3Zpc2l0OmZ1bmN0aW9uKHQpe3RoaXMudHJpTGlzdC5hZGQoW3RbMF0ub3JpZygpLHRbMV0ub3JpZygpLHRbMl0ub3JpZygpXSl9LGdldFRyaWFuZ2xlVmVydGljZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmlMaXN0fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltBc119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEJzfX0pLGUoenMucHJvdG90eXBlLHtjaGVja1RyaWFuZ2xlU2l6ZTpmdW5jdGlvbih0KXt2YXIgZT1cIlwiO3QubGVuZ3RoPj0yP2U9c2UudG9MaW5lU3RyaW5nKHRbMF0sdFsxXSk6dC5sZW5ndGg+PTEmJihlPXNlLnRvUG9pbnQodFswXSkpfSx2aXNpdDpmdW5jdGlvbih0KXt0aGlzLmNvb3JkTGlzdC5jbGVhcigpO2Zvcih2YXIgZT0wO2U8MztlKyspe3ZhciBuPXRbZV0ub3JpZygpO3RoaXMuY29vcmRMaXN0LmFkZChuLmdldENvb3JkaW5hdGUoKSl9aWYodGhpcy5jb29yZExpc3Quc2l6ZSgpPjApe3RoaXMuY29vcmRMaXN0LmNsb3NlUmluZygpO3ZhciBpPXRoaXMuY29vcmRMaXN0LnRvQ29vcmRpbmF0ZUFycmF5KCk7aWYoNCE9PWkubGVuZ3RoKXJldHVybiBudWxsO3RoaXMudHJpQ29vcmRzLmFkZChpKX19LGdldFRyaWFuZ2xlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRyaUNvb3Jkc30saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bQXNdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiB6c319KSxGcy5UcmlhbmdsZUNpcmN1bWNlbnRyZVZpc2l0b3I9R3MsRnMuVHJpYW5nbGVFZGdlc0xpc3RWaXNpdG9yPXFzLEZzLlRyaWFuZ2xlVmVydGV4TGlzdFZpc2l0b3I9QnMsRnMuVHJpYW5nbGVDb29yZGluYXRlc1Zpc2l0b3I9enMsRnMuRURHRV9DT0lOQ0lERU5DRV9UT0xfRkFDVE9SPTFlMyxlKFZzLnByb3RvdHlwZSx7Z2V0TGluZVNlZ21lbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sc30sZ2V0RW5kWjpmdW5jdGlvbigpe3ZhciB0PXRoaXMubHMuZ2V0Q29vcmRpbmF0ZSgxKTtyZXR1cm4gdC56fSxnZXRTdGFydFo6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxzLmdldENvb3JkaW5hdGUoMCk7cmV0dXJuIHQuen0saW50ZXJzZWN0aW9uOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmxzLmludGVyc2VjdGlvbih0LmdldExpbmVTZWdtZW50KCkpfSxnZXRTdGFydDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxzLmdldENvb3JkaW5hdGUoMCl9LGdldEVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxzLmdldENvb3JkaW5hdGUoMSl9LGdldEVuZFk6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxzLmdldENvb3JkaW5hdGUoMSk7cmV0dXJuIHQueX0sZ2V0U3RhcnRYOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5scy5nZXRDb29yZGluYXRlKDApO3JldHVybiB0Lnh9LGVxdWFsc1RvcG86ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubHMuZXF1YWxzVG9wbyh0LmdldExpbmVTZWdtZW50KCkpfSxnZXRTdGFydFk6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxzLmdldENvb3JkaW5hdGUoMCk7cmV0dXJuIHQueX0sc2V0RGF0YTpmdW5jdGlvbih0KXt0aGlzLmRhdGE9dH0sZ2V0RGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGF9LGdldEVuZFg6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxzLmdldENvb3JkaW5hdGUoMSk7cmV0dXJuIHQueH0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5scy50b1N0cmluZygpfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBWc319KSxlKGtzLnByb3RvdHlwZSx7dmlzaXQ6ZnVuY3Rpb24odCl7fSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltdfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiBrc319KSxlKFlzLnByb3RvdHlwZSx7aXNSZXBlYXRlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvdW50PjF9LGdldFJpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmlnaHR9LGdldENvb3JkaW5hdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wfSxzZXRMZWZ0OmZ1bmN0aW9uKHQpe3RoaXMubGVmdD10fSxnZXRYOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucC54fSxnZXREYXRhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YX0sZ2V0Q291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb3VudH0sZ2V0TGVmdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlZnR9LGdldFk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wLnl9LGluY3JlbWVudDpmdW5jdGlvbigpe3RoaXMuY291bnQ9dGhpcy5jb3VudCsxfSxzZXRSaWdodDpmdW5jdGlvbih0KXt0aGlzLnJpZ2h0PXR9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFlzfX0pLGUoVXMucHJvdG90eXBlLHtpbnNlcnQ6ZnVuY3Rpb24oKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmluc2VydCh0LG51bGwpfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV07aWYobnVsbD09PXRoaXMucm9vdClyZXR1cm4gdGhpcy5yb290PW5ldyBZcyhlLG4pLHRoaXMucm9vdDtpZih0aGlzLnRvbGVyYW5jZT4wKXt2YXIgaT10aGlzLmZpbmRCZXN0TWF0Y2hOb2RlKGUpO2lmKG51bGwhPT1pKXJldHVybiBpLmluY3JlbWVudCgpLGl9cmV0dXJuIHRoaXMuaW5zZXJ0RXhhY3QoZSxuKX19LHF1ZXJ5OmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLGU9dGhpcztpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49YXJndW1lbnRzWzBdLGk9bmV3IEk7cmV0dXJuIHRoaXMucXVlcnkobixpKSxpfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKWlmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQyYmUihhcmd1bWVudHNbMV0seSkpIWZ1bmN0aW9uKCl7dmFyIG49dFswXSxpPXRbMV07ZS5xdWVyeU5vZGUoZS5yb290LG4sITAse2ludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW2tzXX0sdmlzaXQ6ZnVuY3Rpb24odCl7aS5hZGQodCl9fSl9KCk7ZWxzZSBpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEMmJlIoYXJndW1lbnRzWzFdLGtzKSl7dmFyIHI9YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdO3RoaXMucXVlcnlOb2RlKHRoaXMucm9vdCxyLCEwLHMpfX0scXVlcnlOb2RlOmZ1bmN0aW9uKHQsZSxuLGkpe2lmKG51bGw9PT10KXJldHVybiBudWxsO3ZhciByPW51bGwscz1udWxsLG89bnVsbDtuPyhyPWUuZ2V0TWluWCgpLHM9ZS5nZXRNYXhYKCksbz10LmdldFgoKSk6KHI9ZS5nZXRNaW5ZKCkscz1lLmdldE1heFkoKSxvPXQuZ2V0WSgpKTt2YXIgYT1yPG8sdT1vPD1zO2EmJnRoaXMucXVlcnlOb2RlKHQuZ2V0TGVmdCgpLGUsIW4saSksZS5jb250YWlucyh0LmdldENvb3JkaW5hdGUoKSkmJmkudmlzaXQodCksdSYmdGhpcy5xdWVyeU5vZGUodC5nZXRSaWdodCgpLGUsIW4saSl9LGZpbmRCZXN0TWF0Y2hOb2RlOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBYcyh0LHRoaXMudG9sZXJhbmNlKTtyZXR1cm4gdGhpcy5xdWVyeShlLnF1ZXJ5RW52ZWxvcGUoKSxlKSxlLmdldE5vZGUoKX0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5yb290fSxpbnNlcnRFeGFjdDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10aGlzLnJvb3QsaT10aGlzLnJvb3Qscj0hMCxzPSEwO251bGwhPT1uOyl7aWYobnVsbCE9PW4pe3ZhciBvPXQuZGlzdGFuY2Uobi5nZXRDb29yZGluYXRlKCkpPD10aGlzLnRvbGVyYW5jZTtpZihvKXJldHVybiBuLmluY3JlbWVudCgpLG59cz1yP3QueDxuLmdldFgoKTp0Lnk8bi5nZXRZKCksaT1uLG49cz9uLmdldExlZnQoKTpuLmdldFJpZ2h0KCkscj0hcn10aGlzLm51bWJlck9mTm9kZXM9dGhpcy5udW1iZXJPZk5vZGVzKzE7dmFyIGE9bmV3IFlzKHQsZSk7cmV0dXJuIHM/aS5zZXRMZWZ0KGEpOmkuc2V0UmlnaHQoYSksYX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gVXN9fSksVXMudG9Db29yZGluYXRlcz1mdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIFVzLnRvQ29vcmRpbmF0ZXModCwhMSl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgZT1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0saT1uZXcgTixyPWUuaXRlcmF0b3IoKTtyLmhhc05leHQoKTspZm9yKHZhciBzPXIubmV4dCgpLG89bj9zLmdldENvdW50KCk6MSxhPTA7YTxvO2ErKylpLmFkZChzLmdldENvb3JkaW5hdGUoKSwhMCk7cmV0dXJuIGkudG9Db29yZGluYXRlQXJyYXkoKX19LGUoWHMucHJvdG90eXBlLHt2aXNpdDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnAuZGlzdGFuY2UodC5nZXRDb29yZGluYXRlKCkpLG49ZTw9dGhpcy50b2xlcmFuY2U7aWYoIW4pcmV0dXJuIG51bGw7dmFyIGk9ITE7KG51bGw9PT10aGlzLm1hdGNoTm9kZXx8ZTx0aGlzLm1hdGNoRGlzdHx8bnVsbCE9PXRoaXMubWF0Y2hOb2RlJiZlPT09dGhpcy5tYXRjaERpc3QmJnQuZ2V0Q29vcmRpbmF0ZSgpLmNvbXBhcmVUbyh0aGlzLm1hdGNoTm9kZS5nZXRDb29yZGluYXRlKCkpPDEpJiYoaT0hMCksaSYmKHRoaXMubWF0Y2hOb2RlPXQsdGhpcy5tYXRjaERpc3Q9ZSl9LHF1ZXJ5RW52ZWxvcGU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgQyh0aGlzLnApO3JldHVybiB0LmV4cGFuZEJ5KHRoaXMudG9sZXJhbmNlKSx0fSxnZXROb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF0Y2hOb2RlfSxpbnRlcmZhY2VzXzpmdW5jdGlvbigpe3JldHVybltrc119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFhzfX0pLFVzLkJlc3RNYXRjaFZpc2l0b3I9WHMsZShIcy5wcm90b3R5cGUse2dldEluaXRpYWxWZXJ0aWNlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXRpYWxWZXJ0aWNlc30sZ2V0S0RUOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMua2R0fSxlbmZvcmNlQ29uc3RyYWludHM6ZnVuY3Rpb24oKXt0aGlzLmFkZENvbnN0cmFpbnRWZXJ0aWNlcygpO3ZhciB0PTAsZT0wO2RvIGU9dGhpcy5lbmZvcmNlR2FicmllbCh0aGlzLnNlZ21lbnRzKSx0Kys7d2hpbGUoZT4wJiZ0PEhzLk1BWF9TUExJVF9JVEVSKX0saW5zZXJ0U2l0ZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuaXRlcmF0b3IoKTtlLmhhc05leHQoKTspe3ZhciBuPWUubmV4dCgpO3RoaXMuaW5zZXJ0U2l0ZShuKX19LGdldFZlcnRleEZhY3Rvcnk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52ZXJ0ZXhGYWN0b3J5fSxnZXRQb2ludEFycmF5OmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBBcnJheSh0aGlzLmluaXRpYWxWZXJ0aWNlcy5zaXplKCkrdGhpcy5zZWdWZXJ0aWNlcy5zaXplKCkpLmZpbGwobnVsbCksZT0wLG49dGhpcy5pbml0aWFsVmVydGljZXMuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO3RbZSsrXT1pLmdldENvb3JkaW5hdGUoKX1mb3IodmFyIHI9dGhpcy5zZWdWZXJ0aWNlcy5pdGVyYXRvcigpO3IuaGFzTmV4dCgpOyl7dmFyIGk9ci5uZXh0KCk7dFtlKytdPWkuZ2V0Q29vcmRpbmF0ZSgpfXJldHVybiB0fSxzZXRDb25zdHJhaW50czpmdW5jdGlvbih0LGUpe3RoaXMuc2VnbWVudHM9dCx0aGlzLnNlZ1ZlcnRpY2VzPWV9LGNvbXB1dGVDb252ZXhIdWxsOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IGllLGU9dGhpcy5nZXRQb2ludEFycmF5KCksbj1uZXcgbWUoZSx0KTt0aGlzLmNvbnZleEh1bGw9bi5nZXRDb252ZXhIdWxsKCl9LGFkZENvbnN0cmFpbnRWZXJ0aWNlczpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZUNvbnZleEh1bGwoKSx0aGlzLmluc2VydFNpdGVzKHRoaXMuc2VnVmVydGljZXMpfSxmaW5kTm9uR2FicmllbFBvaW50OmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0U3RhcnQoKSxuPXQuZ2V0RW5kKCksaT1uZXcgZygoZS54K24ueCkvMiwoZS55K24ueSkvMikscz1lLmRpc3RhbmNlKGkpLG89bmV3IEMoaSk7by5leHBhbmRCeShzKTtmb3IodmFyIGE9dGhpcy5rZHQucXVlcnkobyksdT1udWxsLGw9ci5NQVhfVkFMVUUsaD1hLml0ZXJhdG9yKCk7aC5oYXNOZXh0KCk7KXt2YXIgYz1oLm5leHQoKSxmPWMuZ2V0Q29vcmRpbmF0ZSgpO2lmKCFmLmVxdWFsczJEKGUpJiYhZi5lcXVhbHMyRChuKSl7dmFyIGQ9aS5kaXN0YW5jZShmKTtpZihkPHMpe3ZhciBwPWQ7KG51bGw9PT11fHxwPGwpJiYodT1mLGw9cCl9fX1yZXR1cm4gdX0sZ2V0Q29uc3RyYWludFNlZ21lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VnbWVudHN9LHNldFNwbGl0UG9pbnRGaW5kZXI6ZnVuY3Rpb24odCl7dGhpcy5zcGxpdEZpbmRlcj10fSxnZXRDb252ZXhIdWxsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udmV4SHVsbH0sZ2V0VG9sZXJhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9sZXJhbmNlfSxlbmZvcmNlR2FicmllbDpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEksbj0wLGk9bmV3IEkscj10Lml0ZXJhdG9yKCk7ci5oYXNOZXh0KCk7KXt2YXIgcz1yLm5leHQoKSxvPXRoaXMuZmluZE5vbkdhYnJpZWxQb2ludChzKTtpZihudWxsIT09byl7dGhpcy5zcGxpdFB0PXRoaXMuc3BsaXRGaW5kZXIuZmluZFNwbGl0UG9pbnQocyxvKTt2YXIgYT10aGlzLmNyZWF0ZVZlcnRleCh0aGlzLnNwbGl0UHQscyksdT0odGhpcy5pbnNlcnRTaXRlKGEpLG5ldyBWcyhzLmdldFN0YXJ0WCgpLHMuZ2V0U3RhcnRZKCkscy5nZXRTdGFydFooKSxhLmdldFgoKSxhLmdldFkoKSxhLmdldFooKSxzLmdldERhdGEoKSkpLGw9bmV3IFZzKGEuZ2V0WCgpLGEuZ2V0WSgpLGEuZ2V0WigpLHMuZ2V0RW5kWCgpLHMuZ2V0RW5kWSgpLHMuZ2V0RW5kWigpLHMuZ2V0RGF0YSgpKTtlLmFkZCh1KSxlLmFkZChsKSxpLmFkZChzKSxuKz0xfX1yZXR1cm4gdC5yZW1vdmVBbGwoaSksdC5hZGRBbGwoZSksbn0sY3JlYXRlVmVydGV4OmZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXSxlPW51bGw7cmV0dXJuIGU9bnVsbCE9PXRoaXMudmVydGV4RmFjdG9yeT90aGlzLnZlcnRleEZhY3RvcnkuY3JlYXRlVmVydGV4KHQsbnVsbCk6bmV3IFBzKHQpfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgbj1hcmd1bWVudHNbMF0saT1hcmd1bWVudHNbMV0sZT1udWxsO3JldHVybiBlPW51bGwhPT10aGlzLnZlcnRleEZhY3Rvcnk/dGhpcy52ZXJ0ZXhGYWN0b3J5LmNyZWF0ZVZlcnRleChuLGkpOm5ldyBQcyhuKSxlLnNldE9uQ29uc3RyYWludCghMCksZX19LGdldFN1YmRpdmlzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3ViZGl2fSxjb21wdXRlQm91bmRpbmdCb3g6ZnVuY3Rpb24oKXt2YXIgdD1Icy5jb21wdXRlVmVydGV4RW52ZWxvcGUodGhpcy5pbml0aWFsVmVydGljZXMpLGU9SHMuY29tcHV0ZVZlcnRleEVudmVsb3BlKHRoaXMuc2VnVmVydGljZXMpLG49bmV3IEModCk7bi5leHBhbmRUb0luY2x1ZGUoZSk7dmFyIGk9LjIqbi5nZXRXaWR0aCgpLHI9LjIqbi5nZXRIZWlnaHQoKSxzPU1hdGgubWF4KGkscik7dGhpcy5jb21wdXRlQXJlYUVudj1uZXcgQyhuKSx0aGlzLmNvbXB1dGVBcmVhRW52LmV4cGFuZEJ5KHMpfSxzZXRWZXJ0ZXhGYWN0b3J5OmZ1bmN0aW9uKHQpe3RoaXMudmVydGV4RmFjdG9yeT10fSxmb3JtSW5pdGlhbERlbGF1bmF5OmZ1bmN0aW9uKCl7dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKSx0aGlzLnN1YmRpdj1uZXcgRnModGhpcy5jb21wdXRlQXJlYUVudix0aGlzLnRvbGVyYW5jZSksdGhpcy5zdWJkaXYuc2V0TG9jYXRvcihuZXcgTXModGhpcy5zdWJkaXYpKSx0aGlzLmluY0RlbD1uZXcgT3ModGhpcy5zdWJkaXYpLHRoaXMuaW5zZXJ0U2l0ZXModGhpcy5pbml0aWFsVmVydGljZXMpfSxpbnNlcnRTaXRlOmZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBQcyl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy5rZHQuaW5zZXJ0KHQuZ2V0Q29vcmRpbmF0ZSgpLHQpO2lmKGUuaXNSZXBlYXRlZCgpKXt2YXIgbj1lLmdldERhdGEoKTtyZXR1cm4gbi5tZXJnZSh0KSxufXJldHVybiB0aGlzLmluY0RlbC5pbnNlcnRTaXRlKHQpLHR9aWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBnKXt2YXIgaT1hcmd1bWVudHNbMF07dGhpcy5pbnNlcnRTaXRlKHRoaXMuY3JlYXRlVmVydGV4KGkpKX19LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEhzfX0pLEhzLmNvbXB1dGVWZXJ0ZXhFbnZlbG9wZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEMsbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTtlLmV4cGFuZFRvSW5jbHVkZShpLmdldENvb3JkaW5hdGUoKSl9cmV0dXJuIGV9LEhzLk1BWF9TUExJVF9JVEVSPTk5LGUoV3MucHJvdG90eXBlLHtjcmVhdGU6ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5zdWJkaXYpcmV0dXJuIG51bGw7dmFyIHQ9V3MuZW52ZWxvcGUodGhpcy5zaXRlQ29vcmRzKSxlPVdzLnRvVmVydGljZXModGhpcy5zaXRlQ29vcmRzKTt0aGlzLnN1YmRpdj1uZXcgRnModCx0aGlzLnRvbGVyYW5jZSk7dmFyIG49bmV3IE9zKHRoaXMuc3ViZGl2KTtuLmluc2VydFNpdGVzKGUpfSxzZXRUb2xlcmFuY2U6ZnVuY3Rpb24odCl7dGhpcy50b2xlcmFuY2U9dH0sc2V0U2l0ZXM6ZnVuY3Rpb24oKXtpZihhcmd1bWVudHNbMF1pbnN0YW5jZW9mIEIpe3ZhciB0PWFyZ3VtZW50c1swXTt0aGlzLnNpdGVDb29yZHM9V3MuZXh0cmFjdFVuaXF1ZUNvb3JkaW5hdGVzKHQpfWVsc2UgaWYoUihhcmd1bWVudHNbMF0sdikpe3ZhciBlPWFyZ3VtZW50c1swXTt0aGlzLnNpdGVDb29yZHM9V3MudW5pcXVlKEgudG9Db29yZGluYXRlQXJyYXkoZSkpfX0sZ2V0RWRnZXM6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY3JlYXRlKCksdGhpcy5zdWJkaXYuZ2V0RWRnZXModCl9LGdldFN1YmRpdmlzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3JlYXRlKCksdGhpcy5zdWJkaXZ9LGdldFRyaWFuZ2xlczpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jcmVhdGUoKSx0aGlzLnN1YmRpdi5nZXRUcmlhbmdsZXModCl9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIFdzfX0pLFdzLmV4dHJhY3RVbmlxdWVDb29yZGluYXRlcz1mdW5jdGlvbih0KXtpZihudWxsPT09dClyZXR1cm4gbmV3IE47dmFyIGU9dC5nZXRDb29yZGluYXRlcygpO3JldHVybiBXcy51bmlxdWUoZSl9LFdzLmVudmVsb3BlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgQyxuPXQuaXRlcmF0b3IoKTtuLmhhc05leHQoKTspe3ZhciBpPW4ubmV4dCgpO2UuZXhwYW5kVG9JbmNsdWRlKGkpfXJldHVybiBlfSxXcy51bmlxdWU9ZnVuY3Rpb24odCl7dmFyIGU9SC5jb3B5RGVlcCh0KTt1dC5zb3J0KGUpO3ZhciBuPW5ldyBOKGUsKCExKSk7cmV0dXJuIG59LFdzLnRvVmVydGljZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBJLG49dC5pdGVyYXRvcigpO24uaGFzTmV4dCgpOyl7dmFyIGk9bi5uZXh0KCk7ZS5hZGQobmV3IFRzKGkpKX1yZXR1cm4gZX0sZShqcy5wcm90b3R5cGUse2NyZWF0ZVNpdGVWZXJ0aWNlczpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEksbj10Lml0ZXJhdG9yKCk7bi5oYXNOZXh0KCk7KXt2YXIgaT1uLm5leHQoKTt0aGlzLmNvbnN0cmFpbnRWZXJ0ZXhNYXAuY29udGFpbnNLZXkoaSl8fGUuYWRkKG5ldyBQcyhpKSl9cmV0dXJuIGV9LGNyZWF0ZTpmdW5jdGlvbigpe2lmKG51bGwhPT10aGlzLnN1YmRpdilyZXR1cm4gbnVsbDt2YXIgdD1Xcy5lbnZlbG9wZSh0aGlzLnNpdGVDb29yZHMpLGU9bmV3IEk7bnVsbCE9PXRoaXMuY29uc3RyYWludExpbmVzJiYodC5leHBhbmRUb0luY2x1ZGUodGhpcy5jb25zdHJhaW50TGluZXMuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKSx0aGlzLmNyZWF0ZVZlcnRpY2VzKHRoaXMuY29uc3RyYWludExpbmVzKSxlPWpzLmNyZWF0ZUNvbnN0cmFpbnRTZWdtZW50cyh0aGlzLmNvbnN0cmFpbnRMaW5lcykpO3ZhciBuPXRoaXMuY3JlYXRlU2l0ZVZlcnRpY2VzKHRoaXMuc2l0ZUNvb3JkcyksaT1uZXcgSHMobix0aGlzLnRvbGVyYW5jZSk7aS5zZXRDb25zdHJhaW50cyhlLG5ldyBJKHRoaXMuY29uc3RyYWludFZlcnRleE1hcC52YWx1ZXMoKSkpLGkuZm9ybUluaXRpYWxEZWxhdW5heSgpLGkuZW5mb3JjZUNvbnN0cmFpbnRzKCksdGhpcy5zdWJkaXY9aS5nZXRTdWJkaXZpc2lvbigpfSxzZXRUb2xlcmFuY2U6ZnVuY3Rpb24odCl7dGhpcy50b2xlcmFuY2U9dH0sc2V0Q29uc3RyYWludHM6ZnVuY3Rpb24odCl7dGhpcy5jb25zdHJhaW50TGluZXM9dH0sc2V0U2l0ZXM6ZnVuY3Rpb24odCl7dGhpcy5zaXRlQ29vcmRzPVdzLmV4dHJhY3RVbmlxdWVDb29yZGluYXRlcyh0KX0sZ2V0RWRnZXM6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY3JlYXRlKCksdGhpcy5zdWJkaXYuZ2V0RWRnZXModCl9LGdldFN1YmRpdmlzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3JlYXRlKCksdGhpcy5zdWJkaXZ9LGdldFRyaWFuZ2xlczpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jcmVhdGUoKSx0aGlzLnN1YmRpdi5nZXRUcmlhbmdsZXModCl9LGNyZWF0ZVZlcnRpY2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10LmdldENvb3JkaW5hdGVzKCksbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1uZXcgUHMoZVtuXSk7dGhpcy5jb25zdHJhaW50VmVydGV4TWFwLnB1dChlW25dLGkpfX0saW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4ganN9fSksanMuY3JlYXRlQ29uc3RyYWludFNlZ21lbnRzPWZ1bmN0aW9uKCl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT1rbi5nZXRMaW5lcyh0KSxuPW5ldyBJLGk9ZS5pdGVyYXRvcigpO2kuaGFzTmV4dCgpOyl7dmFyIHI9aS5uZXh0KCk7anMuY3JlYXRlQ29uc3RyYWludFNlZ21lbnRzKHIsbil9cmV0dXJuIG59aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciBzPWFyZ3VtZW50c1swXSxvPWFyZ3VtZW50c1sxXSxhPXMuZ2V0Q29vcmRpbmF0ZXMoKSxpPTE7aTxhLmxlbmd0aDtpKyspby5hZGQobmV3IFZzKGFbaS0xXSxhW2ldKSl9LGUoS3MucHJvdG90eXBlLHtjcmVhdGU6ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5zdWJkaXYpcmV0dXJuIG51bGw7dmFyIHQ9V3MuZW52ZWxvcGUodGhpcy5zaXRlQ29vcmRzKTt0aGlzLmRpYWdyYW1FbnY9dDt2YXIgZT1NYXRoLm1heCh0aGlzLmRpYWdyYW1FbnYuZ2V0V2lkdGgoKSx0aGlzLmRpYWdyYW1FbnYuZ2V0SGVpZ2h0KCkpO3RoaXMuZGlhZ3JhbUVudi5leHBhbmRCeShlKSxudWxsIT09dGhpcy5jbGlwRW52JiZ0aGlzLmRpYWdyYW1FbnYuZXhwYW5kVG9JbmNsdWRlKHRoaXMuY2xpcEVudik7dmFyIG49V3MudG9WZXJ0aWNlcyh0aGlzLnNpdGVDb29yZHMpO3RoaXMuc3ViZGl2PW5ldyBGcyh0LHRoaXMudG9sZXJhbmNlKTt2YXIgaT1uZXcgT3ModGhpcy5zdWJkaXYpO2kuaW5zZXJ0U2l0ZXMobil9LGdldERpYWdyYW06ZnVuY3Rpb24odCl7dGhpcy5jcmVhdGUoKTt2YXIgZT10aGlzLnN1YmRpdi5nZXRWb3Jvbm9pRGlhZ3JhbSh0KTtyZXR1cm4gS3MuY2xpcEdlb21ldHJ5Q29sbGVjdGlvbihlLHRoaXMuZGlhZ3JhbUVudil9LHNldFRvbGVyYW5jZTpmdW5jdGlvbih0KXt0aGlzLnRvbGVyYW5jZT10fSxzZXRTaXRlczpmdW5jdGlvbigpe2lmKGFyZ3VtZW50c1swXWluc3RhbmNlb2YgQil7dmFyIHQ9YXJndW1lbnRzWzBdO3RoaXMuc2l0ZUNvb3Jkcz1Xcy5leHRyYWN0VW5pcXVlQ29vcmRpbmF0ZXModCl9ZWxzZSBpZihSKGFyZ3VtZW50c1swXSx2KSl7dmFyIGU9YXJndW1lbnRzWzBdO3RoaXMuc2l0ZUNvb3Jkcz1Xcy51bmlxdWUoSC50b0Nvb3JkaW5hdGVBcnJheShlKSl9fSxzZXRDbGlwRW52ZWxvcGU6ZnVuY3Rpb24odCl7dGhpcy5jbGlwRW52PXR9LGdldFN1YmRpdmlzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3JlYXRlKCksdGhpcy5zdWJkaXZ9LGludGVyZmFjZXNfOmZ1bmN0aW9uKCl7cmV0dXJuW119LGdldENsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIEtzfX0pLEtzLmNsaXBHZW9tZXRyeUNvbGxlY3Rpb249ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5nZXRGYWN0b3J5KCkudG9HZW9tZXRyeShlKSxpPW5ldyBJLHI9MDtyPHQuZ2V0TnVtR2VvbWV0cmllcygpO3IrKyl7dmFyIHM9dC5nZXRHZW9tZXRyeU4ociksbz1udWxsO2UuY29udGFpbnMocy5nZXRFbnZlbG9wZUludGVybmFsKCkpP289czplLmludGVyc2VjdHMocy5nZXRFbnZlbG9wZUludGVybmFsKCkpJiYobz1uLmludGVyc2VjdGlvbihzKSxvLnNldFVzZXJEYXRhKHMuZ2V0VXNlckRhdGEoKSkpLG51bGw9PT1vfHxvLmlzRW1wdHkoKXx8aS5hZGQobyl9cmV0dXJuIHQuZ2V0RmFjdG9yeSgpLmNyZWF0ZUdlb21ldHJ5Q29sbGVjdGlvbihpZS50b0dlb21ldHJ5QXJyYXkoaSkpfTt2YXIgQW89T2JqZWN0LmZyZWV6ZSh7VmVydGV4OlRzfSksRm89T2JqZWN0LmZyZWV6ZSh7Q29uZm9ybWluZ0RlbGF1bmF5VHJpYW5ndWxhdGlvbkJ1aWxkZXI6anMsRGVsYXVuYXlUcmlhbmd1bGF0aW9uQnVpbGRlcjpXcyxWb3Jvbm9pRGlhZ3JhbUJ1aWxkZXI6S3MscXVhZGVkZ2U6QW99KTtlKFpzLnByb3RvdHlwZSx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZ2V0Q2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gWnN9fSksWnMudW5pb249ZnVuY3Rpb24odCxlKXtpZih0LmlzRW1wdHkoKXx8ZS5pc0VtcHR5KCkpe2lmKHQuaXNFbXB0eSgpJiZlLmlzRW1wdHkoKSlyZXR1cm4gaWkuY3JlYXRlRW1wdHlSZXN1bHQoaWkuVU5JT04sdCxlLHQuZ2V0RmFjdG9yeSgpKTtpZih0LmlzRW1wdHkoKSlyZXR1cm4gZS5jb3B5KCk7aWYoZS5pc0VtcHR5KCkpcmV0dXJuIHQuY29weSgpfXJldHVybiB0LmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKHQpLHQuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24oZSksc2kub3ZlcmxheU9wKHQsZSxpaS5VTklPTil9LGUoQi5wcm90b3R5cGUse2VxdWFsc1RvcG86ZnVuY3Rpb24odCl7cmV0dXJuISF0aGlzLmdldEVudmVsb3BlSW50ZXJuYWwoKS5lcXVhbHModC5nZXRFbnZlbG9wZUludGVybmFsKCkpJiZycy5yZWxhdGUodGhpcyx0KS5pc0VxdWFscyh0aGlzLmdldERpbWVuc2lvbigpLHQuZ2V0RGltZW5zaW9uKCkpfSx1bmlvbjpmdW5jdGlvbigpe2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBscy51bmlvbih0aGlzKTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHQ9YXJndW1lbnRzWzBdO3JldHVybiBacy51bmlvbih0aGlzLHQpfX0saXNWYWxpZDpmdW5jdGlvbigpe3JldHVybiBVci5pc1ZhbGlkKHRoaXMpfSxpbnRlcnNlY3Rpb246ZnVuY3Rpb24odCl7aWYodGhpcy5pc0VtcHR5KCl8fHQuaXNFbXB0eSgpKXJldHVybiBpaS5jcmVhdGVFbXB0eVJlc3VsdChpaS5JTlRFUlNFQ1RJT04sdGhpcyx0LHRoaXMuZmFjdG9yeSk7aWYodGhpcy5pc0dlb21ldHJ5Q29sbGVjdGlvbigpKXt2YXIgZT10O3JldHVybiBobi5tYXAodGhpcyx7aW50ZXJmYWNlc186ZnVuY3Rpb24oKXtyZXR1cm5bTWFwT3BdfSxtYXA6ZnVuY3Rpb24odCl7cmV0dXJuIHQuaW50ZXJzZWN0aW9uKGUpfX0pfXJldHVybiB0aGlzLmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKHRoaXMpLHRoaXMuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24odCksc2kub3ZlcmxheU9wKHRoaXMsdCxpaS5JTlRFUlNFQ1RJT04pfSxjb3ZlcnM6ZnVuY3Rpb24odCl7cmV0dXJuIHJzLmNvdmVycyh0aGlzLHQpfSxjb3ZlcmVkQnk6ZnVuY3Rpb24odCl7cmV0dXJuIHJzLmNvdmVyZWRCeSh0aGlzLHQpfSx0b3VjaGVzOmZ1bmN0aW9uKHQpe3JldHVybiBycy50b3VjaGVzKHRoaXMsdCl9LGludGVyc2VjdHM6ZnVuY3Rpb24odCl7cmV0dXJuIHJzLmludGVyc2VjdHModGhpcyx0KX0sd2l0aGluOmZ1bmN0aW9uKHQpe3JldHVybiBycy53aXRoaW4odGhpcyx0KX0sb3ZlcmxhcHM6ZnVuY3Rpb24odCl7cmV0dXJuIHJzLm92ZXJsYXBzKHRoaXMsdCl9LGRpc2pvaW50OmZ1bmN0aW9uKHQpe3JldHVybiBycy5kaXNqb2ludCh0aGlzLHQpfSxjcm9zc2VzOmZ1bmN0aW9uKHQpe3JldHVybiBycy5jcm9zc2VzKHRoaXMsdCl9LGJ1ZmZlcjpmdW5jdGlvbigpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgdD1hcmd1bWVudHNbMF07cmV0dXJuIGRyLmJ1ZmZlck9wKHRoaXMsdCl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBlPWFyZ3VtZW50c1swXSxuPWFyZ3VtZW50c1sxXTtyZXR1cm4gZHIuYnVmZmVyT3AodGhpcyxlLG4pfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaT1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0scz1hcmd1bWVudHNbMl07cmV0dXJuIGRyLmJ1ZmZlck9wKHRoaXMsaSxyLHMpfX0sY29udmV4SHVsbDpmdW5jdGlvbigpe3JldHVybiBuZXcgbWUodGhpcykuZ2V0Q29udmV4SHVsbCgpfSxyZWxhdGU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHQpLG49MDtuPHQ7bisrKWVbbl09YXJndW1lbnRzW25dO3JldHVybiBycy5yZWxhdGUuYXBwbHkocnMsW3RoaXNdLmNvbmNhdChlKSl9LGdldENlbnRyb2lkOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuIHRoaXMuZmFjdG9yeS5jcmVhdGVQb2ludCgpO3ZhciB0PWdlLmdldENlbnRyb2lkKHRoaXMpO3JldHVybiB0aGlzLmNyZWF0ZVBvaW50RnJvbUludGVybmFsQ29vcmQodCx0aGlzKX0sZ2V0SW50ZXJpb3JQb2ludDpmdW5jdGlvbigpe2lmKHRoaXMuaXNFbXB0eSgpKXJldHVybiB0aGlzLmZhY3RvcnkuY3JlYXRlUG9pbnQoKTt2YXIgdD1udWxsLGU9dGhpcy5nZXREaW1lbnNpb24oKTtpZigwPT09ZSl7dmFyIG49bmV3IGxpKHRoaXMpO3Q9bi5nZXRJbnRlcmlvclBvaW50KCl9ZWxzZSBpZigxPT09ZSl7dmFyIG49bmV3IHVpKHRoaXMpO3Q9bi5nZXRJbnRlcmlvclBvaW50KCl9ZWxzZXt2YXIgbj1uZXcgb2kodGhpcyk7dD1uLmdldEludGVyaW9yUG9pbnQoKX1yZXR1cm4gdGhpcy5jcmVhdGVQb2ludEZyb21JbnRlcm5hbENvb3JkKHQsdGhpcyl9LHN5bURpZmZlcmVuY2U6ZnVuY3Rpb24odCl7aWYodGhpcy5pc0VtcHR5KCl8fHQuaXNFbXB0eSgpKXtpZih0aGlzLmlzRW1wdHkoKSYmdC5pc0VtcHR5KCkpcmV0dXJuIGlpLmNyZWF0ZUVtcHR5UmVzdWx0KGlpLlNZTURJRkZFUkVOQ0UsdGhpcyx0LHRoaXMuZmFjdG9yeSk7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuIHQuY29weSgpO2lmKHQuaXNFbXB0eSgpKXJldHVybiB0aGlzLmNvcHkoKX1yZXR1cm4gdGhpcy5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbih0aGlzKSx0aGlzLmNoZWNrTm90R2VvbWV0cnlDb2xsZWN0aW9uKHQpLHNpLm92ZXJsYXlPcCh0aGlzLHQsaWkuU1lNRElGRkVSRU5DRSl9LGNyZWF0ZVBvaW50RnJvbUludGVybmFsQ29vcmQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5nZXRQcmVjaXNpb25Nb2RlbCgpLm1ha2VQcmVjaXNlKHQpLGUuZ2V0RmFjdG9yeSgpLmNyZWF0ZVBvaW50KHQpfSx0b1RleHQ6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgc2U7cmV0dXJuIHQud3JpdGUodGhpcyl9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dGhpcy50b1RleHQoKX0sY29udGFpbnM6ZnVuY3Rpb24odCl7cmV0dXJuIHJzLmNvbnRhaW5zKHRoaXMsdCl9LGRpZmZlcmVuY2U6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP2lpLmNyZWF0ZUVtcHR5UmVzdWx0KGlpLkRJRkZFUkVOQ0UsdGhpcyx0LHRoaXMuZmFjdG9yeSk6dC5pc0VtcHR5KCk/dGhpcy5jb3B5KCk6KHRoaXMuY2hlY2tOb3RHZW9tZXRyeUNvbGxlY3Rpb24odGhpcyksdGhpcy5jaGVja05vdEdlb21ldHJ5Q29sbGVjdGlvbih0KSxzaS5vdmVybGF5T3AodGhpcyx0LGlpLkRJRkZFUkVOQ0UpKX0saXNTaW1wbGU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgV2kodGhpcyk7cmV0dXJuIHQuaXNTaW1wbGUoKX0saXNXaXRoaW5EaXN0YW5jZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpLmRpc3RhbmNlKHQuZ2V0RW52ZWxvcGVJbnRlcm5hbCgpKTtyZXR1cm4hKG4+ZSkmJnhyLmlzV2l0aGluRGlzdGFuY2UodGhpcyx0LGUpfSxkaXN0YW5jZTpmdW5jdGlvbih0KXtyZXR1cm4geHIuZGlzdGFuY2UodGhpcyx0KX0saXNFcXVpdmFsZW50Q2xhc3M6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0Q2xhc3MoKT09PXQuZ2V0Q2xhc3MoKX19KTt2YXIgR289XCIxLjMuMCAoNmU2NWFkYilcIjt0LnZlcnNpb249R28sdC5hbGdvcml0aG09Y28sdC5kZW5zaWZ5PWZvLHQuZGlzc29sdmU9Z28sdC5nZW9tPWxvLHQuZ2VvbWdyYXBoPXBvLHQuaW5kZXg9eW8sdC5pbz1Obyx0Lm5vZGluZz1Dbyx0Lm9wZXJhdGlvbj1fbyx0LnByZWNpc2lvbj1Nbyx0LnNpbXBsaWZ5PURvLHQudHJpYW5ndWxhdGU9Rm8sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2pzdHMvZGlzdC9qc3RzLm1pbi5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4vY29tcG9zZVwiO1xuaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBkZWdyZWVzLCBwaSwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gcm90YXRpb25JZGVudGl0eShsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSA+IHBpID8gbGFtYmRhIC0gdGF1IDogbGFtYmRhIDwgLXBpID8gbGFtYmRhICsgdGF1IDogbGFtYmRhLCBwaGldO1xufVxuXG5yb3RhdGlvbklkZW50aXR5LmludmVydCA9IHJvdGF0aW9uSWRlbnRpdHk7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICByZXR1cm4gKGRlbHRhTGFtYmRhICU9IHRhdSkgPyAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IGNvbXBvc2Uocm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpLCByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSlcbiAgICA6IHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSlcbiAgICA6IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSlcbiAgICA6IHJvdGF0aW9uSWRlbnRpdHkpO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIGxhbWJkYSArPSBkZWx0YUxhbWJkYSwgW2xhbWJkYSA+IHBpID8gbGFtYmRhIC0gdGF1IDogbGFtYmRhIDwgLXBpID8gbGFtYmRhICsgdGF1IDogbGFtYmRhLCBwaGldO1xuICB9O1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICB2YXIgcm90YXRpb24gPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpO1xuICByb3RhdGlvbi5pbnZlcnQgPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoLWRlbHRhTGFtYmRhKTtcbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5mdW5jdGlvbiByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHZhciBjb3NEZWx0YVBoaSA9IGNvcyhkZWx0YVBoaSksXG4gICAgICBzaW5EZWx0YVBoaSA9IHNpbihkZWx0YVBoaSksXG4gICAgICBjb3NEZWx0YUdhbW1hID0gY29zKGRlbHRhR2FtbWEpLFxuICAgICAgc2luRGVsdGFHYW1tYSA9IHNpbihkZWx0YUdhbW1hKTtcblxuICBmdW5jdGlvbiByb3RhdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgICAgeCA9IGNvcyhsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YVBoaSArIHggKiBzaW5EZWx0YVBoaTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgLSBrICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpIC0geiAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhR2FtbWEgKyB5ICogc2luRGVsdGFHYW1tYSlcbiAgICBdO1xuICB9XG5cbiAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICAgIHggPSBjb3MobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeSA9IHNpbihsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFHYW1tYSAtIHkgKiBzaW5EZWx0YUdhbW1hO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSArIHogKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgKyBrICogc2luRGVsdGFQaGkpLFxuICAgICAgYXNpbihrICogY29zRGVsdGFQaGkgLSB4ICogc2luRGVsdGFQaGkpXG4gICAgXTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJvdGF0ZSkge1xuICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKHJvdGF0ZVswXSAqIHJhZGlhbnMsIHJvdGF0ZVsxXSAqIHJhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogcmFkaWFucyA6IDApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuICB9XG5cbiAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlLmludmVydChjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuICB9O1xuXG4gIHJldHVybiBmb3J3YXJkO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9yb3RhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWV0aG9kcykge1xuICByZXR1cm4ge1xuICAgIHN0cmVhbTogdHJhbnNmb3JtZXIobWV0aG9kcylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKG1ldGhvZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBzID0gbmV3IFRyYW5zZm9ybVN0cmVhbTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykgc1trZXldID0gbWV0aG9kc1trZXldO1xuICAgIHMuc3RyZWFtID0gc3RyZWFtO1xuICAgIHJldHVybiBzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW0oKSB7fVxuXG5UcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtU3RyZWFtLFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTsgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpOyB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZUVuZCgpOyB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTsgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvdHJhbnNmb3JtLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmJveCA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gnKTtcbnZhciBwb2ludCA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKS5wb2ludDtcblxuLyoqXG4gKiBUYWtlcyBhIHtAbGluayBGZWF0dXJlfSBvciB7QGxpbmsgRmVhdHVyZUNvbGxlY3Rpb259IGFuZCByZXR1cm5zIHRoZSBhYnNvbHV0ZSBjZW50ZXIgcG9pbnQgb2YgYWxsIGZlYXR1cmVzLlxuICpcbiAqIEBuYW1lIGNlbnRlclxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIEdlb0pTT04gdG8gYmUgY2VudGVyZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gYW4gT2JqZWN0IHRoYXQgaXMgdXNlZCBhcyB0aGUge0BsaW5rIEZlYXR1cmV9J3MgcHJvcGVydGllc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9pbnQ+fSBhIFBvaW50IGZlYXR1cmUgYXQgdGhlIGFic29sdXRlIGNlbnRlciBwb2ludCBvZiBhbGwgaW5wdXQgZmVhdHVyZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgdHVyZi5wb2ludCggWy05Ny41MjIyNTksIDM1LjQ2OTFdKSxcbiAqICAgdHVyZi5wb2ludCggWy05Ny41MDI3NTQsIDM1LjQ2MzQ1NV0pLFxuICogICB0dXJmLnBvaW50KCBbLTk3LjUwODI2OSwgMzUuNDYzMjQ1XSlcbiAqIF0pO1xuICpcbiAqIHZhciBjZW50ZXIgPSB0dXJmLmNlbnRlcihmZWF0dXJlcyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2ZlYXR1cmVzLCBjZW50ZXJdXG4gKiBjZW50ZXIucHJvcGVydGllc1snbWFya2VyLXNpemUnXSA9ICdsYXJnZSc7XG4gKiBjZW50ZXIucHJvcGVydGllc1snbWFya2VyLWNvbG9yJ10gPSAnIzAwMCc7XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdlb2pzb24sIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgZXh0ID0gYmJveChnZW9qc29uKTtcbiAgICB2YXIgeCA9IChleHRbMF0gKyBleHRbMl0pIC8gMjtcbiAgICB2YXIgeSA9IChleHRbMV0gKyBleHRbM10pIC8gMjtcbiAgICByZXR1cm4gcG9pbnQoW3gsIHldLCBwcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9jZW50ZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGdldENvb3JkcyA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpLmdldENvb3JkcztcbnZhciBmbGF0dGVuRWFjaCA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5mbGF0dGVuRWFjaDtcbnZhciBsaW5lU3RyaW5nID0gaGVscGVycy5saW5lU3RyaW5nO1xudmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBvZiAyLXZlcnRleCB7QGxpbmsgTGluZVN0cmluZ30gc2VnbWVudHMgZnJvbSBhIHtAbGluayBMaW5lU3RyaW5nfChNdWx0aSlMaW5lU3RyaW5nfSBvciB7QGxpbmsgUG9seWdvbnwoTXVsdGkpUG9seWdvbn0uXG4gKlxuICogQG5hbWUgbGluZVNlZ21lbnRcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxMaW5lU3RyaW5nfE11bHRpTGluZVN0cmluZ3xNdWx0aVBvbHlnb258UG9seWdvbj59IGdlb2pzb24gR2VvSlNPTiBQb2x5Z29uIG9yIExpbmVTdHJpbmdcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxMaW5lU3RyaW5nPn0gMi12ZXJ0ZXggbGluZSBzZWdtZW50c1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWy01MCwgNV0sIFstNDAsIC0xMF0sIFstNTAsIC0xMF0sIFstNDAsIDVdLCBbLTUwLCA1XV1dKTtcbiAqIHZhciBzZWdtZW50cyA9IHR1cmYubGluZVNlZ21lbnQocG9seWdvbik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvbHlnb24sIHNlZ21lbnRzXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uKSB7XG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb2pzb24gaXMgcmVxdWlyZWQnKTtcblxuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgZmxhdHRlbkVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgbGluZVNlZ21lbnQoZmVhdHVyZSwgcmVzdWx0cyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uKHJlc3VsdHMpO1xufTtcblxuLyoqXG4gKiBMaW5lIFNlZ21lbnRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGZWF0dXJlPExpbmVTdHJpbmd8UG9seWdvbj59IGdlb2pzb24gTGluZSBvciBwb2x5Z29uIGZlYXR1cmVcbiAqIEBwYXJhbSB7QXJyYXl9IHJlc3VsdHMgcHVzaCB0byByZXN1bHRzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gbGluZVNlZ21lbnQoZ2VvanNvbiwgcmVzdWx0cykge1xuICAgIHZhciBjb29yZHMgPSBbXTtcbiAgICB2YXIgZ2VvbWV0cnkgPSBnZW9qc29uLmdlb21ldHJ5O1xuICAgIHN3aXRjaCAoZ2VvbWV0cnkudHlwZSkge1xuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICBjb29yZHMgPSBnZXRDb29yZHMoZ2VvbWV0cnkpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgY29vcmRzID0gW2dldENvb3JkcyhnZW9tZXRyeSldO1xuICAgIH1cbiAgICBjb29yZHMuZm9yRWFjaChmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgdmFyIHNlZ21lbnRzID0gY3JlYXRlU2VnbWVudHMoY29vcmQsIGdlb2pzb24ucHJvcGVydGllcyk7XG4gICAgICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgICAgIHNlZ21lbnQuaWQgPSByZXN1bHRzLmxlbmd0aDtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzZWdtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIFNlZ21lbnRzIGZyb20gTGluZVN0cmluZyBjb29yZGluYXRlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0xpbmVTdHJpbmd9IGNvb3JkcyBMaW5lU3RyaW5nIGNvb3JkaW5hdGVzXG4gKiBAcGFyYW0geyp9IHByb3BlcnRpZXMgR2VvSlNPTiBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7QXJyYXk8RmVhdHVyZTxMaW5lU3RyaW5nPj59IGxpbmUgc2VnbWVudHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VnbWVudHMoY29vcmRzLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gW107XG4gICAgY29vcmRzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNDb29yZHMsIGN1cnJlbnRDb29yZHMpIHtcbiAgICAgICAgdmFyIHNlZ21lbnQgPSBsaW5lU3RyaW5nKFtwcmV2aW91c0Nvb3JkcywgY3VycmVudENvb3Jkc10sIHByb3BlcnRpZXMpO1xuICAgICAgICBzZWdtZW50LmJib3ggPSBiYm94KHByZXZpb3VzQ29vcmRzLCBjdXJyZW50Q29vcmRzKTtcbiAgICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDb29yZHM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlZ21lbnRzO1xufVxuXG4vKipcbiAqIENyZWF0ZSBCQm94IGJldHdlZW4gdHdvIGNvb3JkaW5hdGVzIChmYXN0ZXIgdGhhbiBAdHVyZi9iYm94KVxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlcl19IGNvb3JkczEgUG9pbnQgY29vcmRpbmF0ZVxuICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXJdfSBjb29yZHMyIFBvaW50IGNvb3JkaW5hdGVcbiAqIEByZXR1cm5zIHtCQm94fSBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXVxuICovXG5mdW5jdGlvbiBiYm94KGNvb3JkczEsIGNvb3JkczIpIHtcbiAgICB2YXIgeDEgPSBjb29yZHMxWzBdO1xuICAgIHZhciB5MSA9IGNvb3JkczFbMV07XG4gICAgdmFyIHgyID0gY29vcmRzMlswXTtcbiAgICB2YXIgeTIgPSBjb29yZHMyWzFdO1xuICAgIHZhciB3ZXN0ID0gKHgxIDwgeDIpID8geDEgOiB4MjtcbiAgICB2YXIgc291dGggPSAoeTEgPCB5MikgPyB5MSA6IHkyO1xuICAgIHZhciBlYXN0ID0gKHgxID4geDIpID8geDEgOiB4MjtcbiAgICB2YXIgbm9ydGggPSAoeTEgPiB5MikgPyB5MSA6IHkyO1xuICAgIHJldHVybiBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtc2VnbWVudC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuLyogR2VvZGVzeSByZXByZXNlbnRhdGlvbiBjb252ZXJzaW9uIGZ1bmN0aW9ucyAgICAgICAgICAgICAgICAgICAgICAgIChjKSBDaHJpcyBWZW5lc3MgMjAwMi0yMDE2ICAqL1xuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1JVCBMaWNlbmNlICAqL1xuLyogd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2dlb2Rlc3kvZG9jcy9tb2R1bGUtZG1zLmh0bWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQgbm8taXJyZWd1bGFyLXdoaXRlc3BhY2U6IFsyLCB7IHNraXBDb21tZW50czogdHJ1ZSB9XSAqL1xuXG5cbi8qKlxuICogTGF0aXR1ZGUvbG9uZ2l0dWRlIHBvaW50cyBtYXkgYmUgcmVwcmVzZW50ZWQgYXMgZGVjaW1hbCBkZWdyZWVzLCBvciBzdWJkaXZpZGVkIGludG8gc2V4YWdlc2ltYWxcbiAqIG1pbnV0ZXMgYW5kIHNlY29uZHMuXG4gKlxuICogQG1vZHVsZSBkbXNcbiAqL1xuXG5cbi8qKlxuICogRnVuY3Rpb25zIGZvciBwYXJzaW5nIGFuZCByZXByZXNlbnRpbmcgZGVncmVlcyAvIG1pbnV0ZXMgLyBzZWNvbmRzLlxuICogQGNsYXNzIERtc1xuICovXG52YXIgRG1zID0ge307XG5cbi8vIG5vdGUgVW5pY29kZSBEZWdyZWUgPSBVKzAwQjAuIFByaW1lID0gVSsyMDMyLCBEb3VibGUgcHJpbWUgPSBVKzIwMzNcblxuXG4vKipcbiAqIFBhcnNlcyBzdHJpbmcgcmVwcmVzZW50aW5nIGRlZ3JlZXMvbWludXRlcy9zZWNvbmRzIGludG8gbnVtZXJpYyBkZWdyZWVzLlxuICpcbiAqIFRoaXMgaXMgdmVyeSBmbGV4aWJsZSBvbiBmb3JtYXRzLCBhbGxvd2luZyBzaWduZWQgZGVjaW1hbCBkZWdyZWVzLCBvciBkZWctbWluLXNlYyBvcHRpb25hbGx5XG4gKiBzdWZmaXhlZCBieSBjb21wYXNzIGRpcmVjdGlvbiAoTlNFVykuIEEgdmFyaWV0eSBvZiBzZXBhcmF0b3JzIGFyZSBhY2NlcHRlZCAoZWcgM8KwIDM34oCyIDA54oCzVykuXG4gKiBTZWNvbmRzIGFuZCBtaW51dGVzIG1heSBiZSBvbWl0dGVkLlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd8bnVtYmVyfSBkbXNTdHIgLSBEZWdyZWVzIG9yIGRlZy9taW4vc2VjIGluIHZhcmlldHkgb2YgZm9ybWF0cy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IERlZ3JlZXMgYXMgZGVjaW1hbCBudW1iZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgbGF0ID0gRG1zLnBhcnNlRE1TKCc1McKwIDI44oCyIDQwLjEy4oCzIE4nKTtcbiAqICAgICB2YXIgbG9uID0gRG1zLnBhcnNlRE1TKCcwMDDCsCAwMOKAsiAwNS4zMeKAsyBXJyk7XG4gKiAgICAgdmFyIHAxID0gbmV3IExhdExvbihsYXQsIGxvbik7IC8vIDUxLjQ3NzjCsE4sIDAwMC4wMDE1wrBXXG4gKi9cbkRtcy5wYXJzZURNUyA9IGZ1bmN0aW9uKGRtc1N0cikge1xuICAgIC8vIGNoZWNrIGZvciBzaWduZWQgZGVjaW1hbCBkZWdyZWVzIHdpdGhvdXQgTlNFVywgaWYgc28gcmV0dXJuIGl0IGRpcmVjdGx5XG4gICAgaWYgKHR5cGVvZiBkbXNTdHIgPT0gJ251bWJlcicgJiYgaXNGaW5pdGUoZG1zU3RyKSkgcmV0dXJuIE51bWJlcihkbXNTdHIpO1xuXG4gICAgLy8gc3RyaXAgb2ZmIGFueSBzaWduIG9yIGNvbXBhc3MgZGlyJ24gJiBzcGxpdCBvdXQgc2VwYXJhdGUgZC9tL3NcbiAgICB2YXIgZG1zID0gU3RyaW5nKGRtc1N0cikudHJpbSgpLnJlcGxhY2UoL14tLywgJycpLnJlcGxhY2UoL1tOU0VXXSQvaSwgJycpLnNwbGl0KC9bXjAtOS4sXSsvKTtcbiAgICBpZiAoZG1zW2Rtcy5sZW5ndGgtMV09PScnKSBkbXMuc3BsaWNlKGRtcy5sZW5ndGgtMSk7ICAvLyBmcm9tIHRyYWlsaW5nIHN5bWJvbFxuXG4gICAgaWYgKGRtcyA9PSAnJykgcmV0dXJuIE5hTjtcblxuICAgIC8vIGFuZCBjb252ZXJ0IHRvIGRlY2ltYWwgZGVncmVlcy4uLlxuICAgIHZhciBkZWc7XG4gICAgc3dpdGNoIChkbXMubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMzogIC8vIGludGVycHJldCAzLXBhcnQgcmVzdWx0IGFzIGQvbS9zXG4gICAgICAgICAgICBkZWcgPSBkbXNbMF0vMSArIGRtc1sxXS82MCArIGRtc1syXS8zNjAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogIC8vIGludGVycHJldCAyLXBhcnQgcmVzdWx0IGFzIGQvbVxuICAgICAgICAgICAgZGVnID0gZG1zWzBdLzEgKyBkbXNbMV0vNjA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOiAgLy8ganVzdCBkIChwb3NzaWJseSBkZWNpbWFsKSBvciBub24tc2VwYXJhdGVkIGRkZG1tc3NcbiAgICAgICAgICAgIGRlZyA9IGRtc1swXTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBmaXhlZC13aWR0aCB1bnNlcGFyYXRlZCBmb3JtYXQgZWcgMDAzMzcwOVdcbiAgICAgICAgICAgIC8vaWYgKC9bTlNdL2kudGVzdChkbXNTdHIpKSBkZWcgPSAnMCcgKyBkZWc7ICAvLyAtIG5vcm1hbGlzZSBOL1MgdG8gMy1kaWdpdCBkZWdyZWVzXG4gICAgICAgICAgICAvL2lmICgvWzAtOV17N30vLnRlc3QoZGVnKSkgZGVnID0gZGVnLnNsaWNlKDAsMykvMSArIGRlZy5zbGljZSgzLDUpLzYwICsgZGVnLnNsaWNlKDUpLzM2MDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGlmICgvXi18W1dTXSQvaS50ZXN0KGRtc1N0ci50cmltKCkpKSBkZWcgPSAtZGVnOyAvLyB0YWtlICctJywgd2VzdCBhbmQgc291dGggYXMgLXZlXG5cbiAgICByZXR1cm4gTnVtYmVyKGRlZyk7XG59O1xuXG5cbi8qKlxuICogU2VwYXJhdG9yIGNoYXJhY3RlciB0byBiZSB1c2VkIHRvIHNlcGFyYXRlIGRlZ3JlZXMsIG1pbnV0ZXMsIHNlY29uZHMsIGFuZCBjYXJkaW5hbCBkaXJlY3Rpb25zLlxuICpcbiAqIFNldCB0byAnXFx1MjAyZicgKG5hcnJvdyBuby1icmVhayBzcGFjZSkgZm9yIGltcHJvdmVkIGZvcm1hdHRpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHAgPSBuZXcgTGF0TG9uKDUxLjIsIDAuMzMpOyAgLy8gNTHCsDEy4oCyMDAuMOKAs04sIDAwMMKwMTnigLI0OC4w4oCzRVxuICogICBEbXMuc2VwYXJhdG9yID0gJ1xcdTIwMmYnOyAgICAgICAgLy8gbmFycm93IG5vLWJyZWFrIHNwYWNlXG4gKiAgIHZhciBwyrkgPSBuZXcgTGF0TG9uKDUxLjIsIDAuMzMpOyAvLyA1McKw4oCvMTLigLLigK8wMC4w4oCz4oCvTiwgMDAwwrDigK8xOeKAsuKArzQ4LjDigLPigK9FXG4gKi9cbkRtcy5zZXBhcmF0b3IgPSAnJztcblxuXG4vKipcbiAqIENvbnZlcnRzIGRlY2ltYWwgZGVncmVlcyB0byBkZWcvbWluL3NlYyBmb3JtYXRcbiAqICAtIGRlZ3JlZSwgcHJpbWUsIGRvdWJsZS1wcmltZSBzeW1ib2xzIGFyZSBhZGRlZCwgYnV0IHNpZ24gaXMgZGlzY2FyZGVkLCB0aG91Z2ggbm8gY29tcGFzc1xuICogICAgZGlyZWN0aW9uIGlzIGFkZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBkZWcgLSBEZWdyZWVzIHRvIGJlIGZvcm1hdHRlZCBhcyBzcGVjaWZpZWQuXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBbZm9ybWF0PWRtc10gLSBSZXR1cm4gdmFsdWUgYXMgJ2QnLCAnZG0nLCAnZG1zJyBmb3IgZGVnLCBkZWcrbWluLCBkZWcrbWluK3NlYy5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtkcD0wfDJ8NF0gLSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gdXNlIOKAkyBkZWZhdWx0IDAgZm9yIGRtcywgMiBmb3IgZG0sIDQgZm9yIGQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBEZWdyZWVzIGZvcm1hdHRlZCBhcyBkZWcvbWluL3NlY3MgYWNjb3JkaW5nIHRvIHNwZWNpZmllZCBmb3JtYXQuXG4gKi9cbkRtcy50b0RNUyA9IGZ1bmN0aW9uKGRlZywgZm9ybWF0LCBkcCkge1xuICAgIGlmIChpc05hTihkZWcpKSByZXR1cm4gbnVsbDsgIC8vIGdpdmUgdXAgaGVyZSBpZiB3ZSBjYW4ndCBtYWtlIGEgbnVtYmVyIGZyb20gZGVnXG5cbiAgICAvLyBkZWZhdWx0IHZhbHVlc1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkgZm9ybWF0ID0gJ2Rtcyc7XG4gICAgaWYgKGRwID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2QnOiAgICBjYXNlICdkZWcnOiAgICAgICAgIGRwID0gNDsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkbSc6ICAgY2FzZSAnZGVnK21pbic6ICAgICBkcCA9IDI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG1zJzogIGNhc2UgJ2RlZyttaW4rc2VjJzogZHAgPSAwOyBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6ICAgIGZvcm1hdCA9ICdkbXMnOyBkcCA9IDA7ICAvLyBiZSBmb3JnaXZpbmcgb24gaW52YWxpZCBmb3JtYXRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlZyA9IE1hdGguYWJzKGRlZyk7ICAvLyAodW5zaWduZWQgcmVzdWx0IHJlYWR5IGZvciBhcHBlbmRpbmcgY29tcGFzcyBkaXInbilcblxuICAgIHZhciBkbXMsIGQsIG0sIHM7XG4gICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgZGVmYXVsdDogLy8gaW52YWxpZCBmb3JtYXQgc3BlYyFcbiAgICAgICAgY2FzZSAnZCc6IGNhc2UgJ2RlZyc6XG4gICAgICAgICAgICBkID0gZGVnLnRvRml4ZWQoZHApOyAgICAvLyByb3VuZCBkZWdyZWVzXG4gICAgICAgICAgICBpZiAoZDwxMDApIGQgPSAnMCcgKyBkOyAvLyBwYWQgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgICAgICAgICBpZiAoZDwxMCkgZCA9ICcwJyArIGQ7XG4gICAgICAgICAgICBkbXMgPSBkICsgJ8KwJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkbSc6IGNhc2UgJ2RlZyttaW4nOlxuICAgICAgICAgICAgdmFyIG1pbiA9IChkZWcqNjApLnRvRml4ZWQoZHApOyAvLyBjb252ZXJ0IGRlZ3JlZXMgdG8gbWludXRlcyAmIHJvdW5kXG4gICAgICAgICAgICBkID0gTWF0aC5mbG9vcihtaW4gLyA2MCk7ICAgICAgIC8vIGdldCBjb21wb25lbnQgZGVnL21pblxuICAgICAgICAgICAgbSA9IChtaW4gJSA2MCkudG9GaXhlZChkcCk7ICAgICAvLyBwYWQgd2l0aCB0cmFpbGluZyB6ZXJvc1xuICAgICAgICAgICAgaWYgKGQ8MTAwKSBkID0gJzAnICsgZDsgICAgICAgICAvLyBwYWQgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgICAgICAgICBpZiAoZDwxMCkgZCA9ICcwJyArIGQ7XG4gICAgICAgICAgICBpZiAobTwxMCkgbSA9ICcwJyArIG07XG4gICAgICAgICAgICBkbXMgPSBkICsgJ8KwJytEbXMuc2VwYXJhdG9yICsgbSArICfigLInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Rtcyc6IGNhc2UgJ2RlZyttaW4rc2VjJzpcbiAgICAgICAgICAgIHZhciBzZWMgPSAoZGVnKjM2MDApLnRvRml4ZWQoZHApOyAvLyBjb252ZXJ0IGRlZ3JlZXMgdG8gc2Vjb25kcyAmIHJvdW5kXG4gICAgICAgICAgICBkID0gTWF0aC5mbG9vcihzZWMgLyAzNjAwKTsgICAgICAgLy8gZ2V0IGNvbXBvbmVudCBkZWcvbWluL3NlY1xuICAgICAgICAgICAgbSA9IE1hdGguZmxvb3Ioc2VjLzYwKSAlIDYwO1xuICAgICAgICAgICAgcyA9IChzZWMgJSA2MCkudG9GaXhlZChkcCk7ICAgICAgIC8vIHBhZCB3aXRoIHRyYWlsaW5nIHplcm9zXG4gICAgICAgICAgICBpZiAoZDwxMDApIGQgPSAnMCcgKyBkOyAgICAgICAgICAgLy8gcGFkIHdpdGggbGVhZGluZyB6ZXJvc1xuICAgICAgICAgICAgaWYgKGQ8MTApIGQgPSAnMCcgKyBkO1xuICAgICAgICAgICAgaWYgKG08MTApIG0gPSAnMCcgKyBtO1xuICAgICAgICAgICAgaWYgKHM8MTApIHMgPSAnMCcgKyBzO1xuICAgICAgICAgICAgZG1zID0gZCArICfCsCcrRG1zLnNlcGFyYXRvciArIG0gKyAn4oCyJytEbXMuc2VwYXJhdG9yICsgcyArICfigLMnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRtcztcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBudW1lcmljIGRlZ3JlZXMgdG8gZGVnL21pbi9zZWMgbGF0aXR1ZGUgKDItZGlnaXQgZGVncmVlcywgc3VmZml4ZWQgd2l0aCBOL1MpLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGRlZyAtIERlZ3JlZXMgdG8gYmUgZm9ybWF0dGVkIGFzIHNwZWNpZmllZC5cbiAqIEBwYXJhbSAgIHtzdHJpbmd9IFtmb3JtYXQ9ZG1zXSAtIFJldHVybiB2YWx1ZSBhcyAnZCcsICdkbScsICdkbXMnIGZvciBkZWcsIGRlZyttaW4sIGRlZyttaW4rc2VjLlxuICogQHBhcmFtICAge251bWJlcn0gW2RwPTB8Mnw0XSAtIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byB1c2Ug4oCTIGRlZmF1bHQgMCBmb3IgZG1zLCAyIGZvciBkbSwgNCBmb3IgZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IERlZ3JlZXMgZm9ybWF0dGVkIGFzIGRlZy9taW4vc2VjcyBhY2NvcmRpbmcgdG8gc3BlY2lmaWVkIGZvcm1hdC5cbiAqL1xuRG1zLnRvTGF0ID0gZnVuY3Rpb24oZGVnLCBmb3JtYXQsIGRwKSB7XG4gICAgdmFyIGxhdCA9IERtcy50b0RNUyhkZWcsIGZvcm1hdCwgZHApO1xuICAgIHJldHVybiBsYXQ9PT1udWxsID8gJ+KAkycgOiBsYXQuc2xpY2UoMSkrRG1zLnNlcGFyYXRvciArIChkZWc8MCA/ICdTJyA6ICdOJyk7ICAvLyBrbm9jayBvZmYgaW5pdGlhbCAnMCcgZm9yIGxhdCFcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0IG51bWVyaWMgZGVncmVlcyB0byBkZWcvbWluL3NlYyBsb25naXR1ZGUgKDMtZGlnaXQgZGVncmVlcywgc3VmZml4ZWQgd2l0aCBFL1cpXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gZGVnIC0gRGVncmVlcyB0byBiZSBmb3JtYXR0ZWQgYXMgc3BlY2lmaWVkLlxuICogQHBhcmFtICAge3N0cmluZ30gW2Zvcm1hdD1kbXNdIC0gUmV0dXJuIHZhbHVlIGFzICdkJywgJ2RtJywgJ2RtcycgZm9yIGRlZywgZGVnK21pbiwgZGVnK21pbitzZWMuXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBbZHA9MHwyfDRdIC0gTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHVzZSDigJMgZGVmYXVsdCAwIGZvciBkbXMsIDIgZm9yIGRtLCA0IGZvciBkLlxuICogQHJldHVybnMge3N0cmluZ30gRGVncmVlcyBmb3JtYXR0ZWQgYXMgZGVnL21pbi9zZWNzIGFjY29yZGluZyB0byBzcGVjaWZpZWQgZm9ybWF0LlxuICovXG5EbXMudG9Mb24gPSBmdW5jdGlvbihkZWcsIGZvcm1hdCwgZHApIHtcbiAgICB2YXIgbG9uID0gRG1zLnRvRE1TKGRlZywgZm9ybWF0LCBkcCk7XG4gICAgcmV0dXJuIGxvbj09PW51bGwgPyAn4oCTJyA6IGxvbitEbXMuc2VwYXJhdG9yICsgKGRlZzwwID8gJ1cnIDogJ0UnKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBudW1lcmljIGRlZ3JlZXMgdG8gZGVnL21pbi9zZWMgYXMgYSBiZWFyaW5nICgwwrAuLjM2MMKwKVxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGRlZyAtIERlZ3JlZXMgdG8gYmUgZm9ybWF0dGVkIGFzIHNwZWNpZmllZC5cbiAqIEBwYXJhbSAgIHtzdHJpbmd9IFtmb3JtYXQ9ZG1zXSAtIFJldHVybiB2YWx1ZSBhcyAnZCcsICdkbScsICdkbXMnIGZvciBkZWcsIGRlZyttaW4sIGRlZyttaW4rc2VjLlxuICogQHBhcmFtICAge251bWJlcn0gW2RwPTB8Mnw0XSAtIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byB1c2Ug4oCTIGRlZmF1bHQgMCBmb3IgZG1zLCAyIGZvciBkbSwgNCBmb3IgZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IERlZ3JlZXMgZm9ybWF0dGVkIGFzIGRlZy9taW4vc2VjcyBhY2NvcmRpbmcgdG8gc3BlY2lmaWVkIGZvcm1hdC5cbiAqL1xuRG1zLnRvQnJuZyA9IGZ1bmN0aW9uKGRlZywgZm9ybWF0LCBkcCkge1xuICAgIGRlZyA9IChOdW1iZXIoZGVnKSszNjApICUgMzYwOyAgLy8gbm9ybWFsaXNlIC12ZSB2YWx1ZXMgdG8gMTgwwrAuLjM2MMKwXG4gICAgdmFyIGJybmcgPSAgRG1zLnRvRE1TKGRlZywgZm9ybWF0LCBkcCk7XG4gICAgcmV0dXJuIGJybmc9PT1udWxsID8gJ+KAkycgOiBicm5nLnJlcGxhY2UoJzM2MCcsICcwJyk7ICAvLyBqdXN0IGluIGNhc2Ugcm91bmRpbmcgdG9vayB1cyB1cCB0byAzNjDCsCFcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGNvbXBhc3MgcG9pbnQgKHRvIGdpdmVuIHByZWNpc2lvbikgZm9yIHN1cHBsaWVkIGJlYXJpbmcuXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gYmVhcmluZyAtIEJlYXJpbmcgaW4gZGVncmVlcyBmcm9tIG5vcnRoLlxuICogQHBhcmFtICAge251bWJlcn0gW3ByZWNpc2lvbj0zXSAtIFByZWNpc2lvbiAoMTpjYXJkaW5hbCAvIDI6aW50ZXJjYXJkaW5hbCAvIDM6c2Vjb25kYXJ5LWludGVyY2FyZGluYWwpLlxuICogQHJldHVybnMge3N0cmluZ30gQ29tcGFzcyBwb2ludCBmb3Igc3VwcGxpZWQgYmVhcmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcG9pbnQgPSBEbXMuY29tcGFzc1BvaW50KDI0KTsgICAgLy8gcG9pbnQgPSAnTk5FJ1xuICogICB2YXIgcG9pbnQgPSBEbXMuY29tcGFzc1BvaW50KDI0LCAxKTsgLy8gcG9pbnQgPSAnTidcbiAqL1xuRG1zLmNvbXBhc3NQb2ludCA9IGZ1bmN0aW9uKGJlYXJpbmcsIHByZWNpc2lvbikge1xuICAgIGlmIChwcmVjaXNpb24gPT09IHVuZGVmaW5lZCkgcHJlY2lzaW9uID0gMztcbiAgICAvLyBub3RlIHByZWNpc2lvbiA9IG1heCBsZW5ndGggb2YgY29tcGFzcyBwb2ludDsgaXQgY291bGQgYmUgZXh0ZW5kZWQgdG8gNCBmb3IgcXVhcnRlci13aW5kc1xuICAgIC8vIChlZyBORWJOKSwgYnV0IEkgdGhpbmsgdGhleSBhcmUgbGl0dGxlIHVzZWRcblxuICAgIGJlYXJpbmcgPSAoKGJlYXJpbmclMzYwKSszNjApJTM2MDsgLy8gbm9ybWFsaXNlIHRvIDAuLjM2MFxuXG4gICAgdmFyIHBvaW50O1xuXG4gICAgc3dpdGNoIChwcmVjaXNpb24pIHtcbiAgICAgICAgY2FzZSAxOiAvLyA0IGNvbXBhc3MgcG9pbnRzXG4gICAgICAgICAgICBzd2l0Y2ggKE1hdGgucm91bmQoYmVhcmluZyo0LzM2MCklNCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogcG9pbnQgPSAnTic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcG9pbnQgPSAnRSc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjogcG9pbnQgPSAnUyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzogcG9pbnQgPSAnVyc7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogLy8gOCBjb21wYXNzIHBvaW50c1xuICAgICAgICAgICAgc3dpdGNoIChNYXRoLnJvdW5kKGJlYXJpbmcqOC8zNjApJTgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHBvaW50ID0gJ04nOyAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiBwb2ludCA9ICdORSc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjogcG9pbnQgPSAnRSc7ICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHBvaW50ID0gJ1NFJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBwb2ludCA9ICdTJzsgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogcG9pbnQgPSAnU1cnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHBvaW50ID0gJ1cnOyAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBwb2ludCA9ICdOVyc7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogLy8gMTYgY29tcGFzcyBwb2ludHNcbiAgICAgICAgICAgIHN3aXRjaCAoTWF0aC5yb3VuZChiZWFyaW5nKjE2LzM2MCklMTYpIHtcbiAgICAgICAgICAgICAgICBjYXNlICAwOiBwb2ludCA9ICdOJzsgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICAxOiBwb2ludCA9ICdOTkUnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICAyOiBwb2ludCA9ICdORSc7ICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICAzOiBwb2ludCA9ICdFTkUnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICA0OiBwb2ludCA9ICdFJzsgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICA1OiBwb2ludCA9ICdFU0UnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICA2OiBwb2ludCA9ICdTRSc7ICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICA3OiBwb2ludCA9ICdTU0UnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICA4OiBwb2ludCA9ICdTJzsgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICA5OiBwb2ludCA9ICdTU1cnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiBwb2ludCA9ICdTVyc7ICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDExOiBwb2ludCA9ICdXU1cnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOiBwb2ludCA9ICdXJzsgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEzOiBwb2ludCA9ICdXTlcnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE0OiBwb2ludCA9ICdOVyc7ICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE1OiBwb2ludCA9ICdOTlcnOyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1ByZWNpc2lvbiBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMycpO1xuICAgIH1cblxuICAgIHJldHVybiBwb2ludDtcbn07XG5cblxuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuXG4vKiogUG9seWZpbGwgU3RyaW5nLnRyaW0gZm9yIG9sZCBicm93c2Vyc1xuICogIChxLnYuIGJsb2cuc3RldmVubGV2aXRoYW4uY29tL2FyY2hpdmVzL2Zhc3Rlci10cmltLWphdmFzY3JpcHQpICovXG5pZiAoU3RyaW5nLnByb3RvdHlwZS50cmltID09PSB1bmRlZmluZWQpIHtcbiAgICBTdHJpbmcucHJvdG90eXBlLnRyaW0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKS5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9O1xufVxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBEbXM7IC8vIOKJoSBleHBvcnQgZGVmYXVsdCBEbXNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dlb2Rlc3kvZG1zLmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SaHVtYl9saW5lXG4vLyBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbCNyaHVtYmxpbmVzXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBnZXRDb29yZCA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpLmdldENvb3JkO1xudmFyIEdlb2Rlc3lMYXRMb24gPSByZXF1aXJlKCdnZW9kZXN5JykuTGF0TG9uU3BoZXJpY2FsO1xudmFyIHBvaW50ID0gaGVscGVycy5wb2ludDtcbnZhciByYWRpYW5zVG9EaXN0YW5jZSA9IGhlbHBlcnMucmFkaWFuc1RvRGlzdGFuY2U7XG52YXIgZGlzdGFuY2VUb1JhZGlhbnMgPSBoZWxwZXJzLmRpc3RhbmNlVG9SYWRpYW5zO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIHtAbGluayBQb2ludH0gaGF2aW5nIHRyYXZlbGxlZCB0aGUgZ2l2ZW4gZGlzdGFuY2UgYWxvbmcgYSBSaHVtYiBsaW5lIGZyb20gdGhlXG4gKiBvcmlnaW4gUG9pbnQgd2l0aCB0aGUgKGNvbnN0YW50KSBnaXZlbiBiZWFyaW5nLlxuICpcbiAqIEBuYW1lIHJodW1iRGVzdGluYXRpb25cbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPn0gb3JpZ2luIHN0YXJ0aW5nIHBvaW50XG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnRpbmcgcG9pbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWFyaW5nIGNvbnN0YW50IGJlYXJpbmcgYW5nbGUgcmFuZ2luZyBmcm9tIC0xODAgdG8gMTgwIGRlZ3JlZXMgZnJvbSBub3J0aFxuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBtaWxlcywga2lsb21ldGVycywgZGVncmVlcywgb3IgcmFkaWFuc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9pbnQ+fSBEZXN0aW5hdGlvbiBwb2ludC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnQgPSB0dXJmLnBvaW50KFstNzUuMzQzLCAzOS45ODRdLCB7XCJtYXJrZXItY29sb3JcIjogXCJGMDBcIn0pO1xuICogdmFyIGRpc3RhbmNlID0gNTA7XG4gKiB2YXIgYmVhcmluZyA9IDkwO1xuICogdmFyIHVuaXRzID0gJ21pbGVzJztcbiAqXG4gKiB2YXIgZGVzdGluYXRpb24gPSB0dXJmLnJodW1iRGVzdGluYXRpb24ocG9pbnQsIGRpc3RhbmNlLCBiZWFyaW5nLCB1bml0cyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvaW50LCBkZXN0aW5hdGlvbl1cbiAqIGRlc3RpbmF0aW9uLnByb3BlcnRpZXNbJ21hcmtlci1jb2xvciddID0gJyMwMEYnO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW4sIGRpc3RhbmNlLCBiZWFyaW5nLCB1bml0cykge1xuICAgIC8vIHZhbGlkYXRpb25cbiAgICBpZiAoIW9yaWdpbikgdGhyb3cgbmV3IEVycm9yKCdvcmlnaW4gaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoZGlzdGFuY2UgPT09IHVuZGVmaW5lZCB8fCBkaXN0YW5jZSA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdkaXN0YW5jZSBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChiZWFyaW5nID09PSB1bmRlZmluZWQgfHwgYmVhcmluZyA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdiZWFyaW5nIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCEoZGlzdGFuY2UgPj0gMCkpIHRocm93IG5ldyBFcnJvcignZGlzdGFuY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuXG4gICAgdW5pdHMgPSB1bml0cyB8fCAna2lsb21ldGVycyc7XG4gICAgdmFyIGRpc3RhbmNlSW5NZXRlcnMgPSByYWRpYW5zVG9EaXN0YW5jZShkaXN0YW5jZVRvUmFkaWFucyhkaXN0YW5jZSwgdW5pdHMpLCAnbWV0ZXJzJyk7XG4gICAgdmFyIGNvb3JkcyA9IGdldENvb3JkKG9yaWdpbik7XG4gICAgdmFyIHB0ID0gbmV3IEdlb2Rlc3lMYXRMb24oY29vcmRzWzFdLCBjb29yZHNbMF0pO1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHB0LnJodW1iRGVzdGluYXRpb25Qb2ludChkaXN0YW5jZUluTWV0ZXJzLCBiZWFyaW5nKTtcblxuICAgIC8vIGNvbXBlbnNhdGUgdGhlIGNyb3NzaW5nIG9mIHRoZSAxODB0aCBtZXJpZGlhbiAoaHR0cHM6Ly9tYWN3cmlnaHQub3JnLzIwMTYvMDkvMjYvdGhlLTE4MHRoLW1lcmlkaWFuLmh0bWwpXG4gICAgLy8gc29sdXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvMzI1MCNpc3N1ZWNvbW1lbnQtMjk0ODg3Njc4XG4gICAgZGVzdGluYXRpb24ubG9uICs9IChkZXN0aW5hdGlvbi5sb24gLSBjb29yZHNbMF0gPiAxODApID8gLTM2MCA6IChjb29yZHNbMF0gLSBkZXN0aW5hdGlvbi5sb24gPiAxODApID8gMzYwIDogMDtcbiAgICByZXR1cm4gcG9pbnQoW2Rlc3RpbmF0aW9uLmxvbiwgZGVzdGluYXRpb24ubGF0XSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvcmh1bWItZGVzdGluYXRpb24vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2FsbGJhY2sgZm9yIGNvb3JkRWFjaFxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2FsbGJhY2sgY29vcmRFYWNoQ2FsbGJhY2tcbiAqIEBwYXJhbSB7W251bWJlciwgbnVtYmVyXX0gY3VycmVudENvb3JkcyBUaGUgY3VycmVudCBjb29yZGluYXRlcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBjb29yZGluYXRlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkuZm9yRWFjaCgpXG4gKlxuICogQG5hbWUgY29vcmRFYWNoXG4gKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50Q29vcmRzLCBjdXJyZW50SW5kZXgpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtleGNsdWRlV3JhcENvb3JkPWZhbHNlXSB3aGV0aGVyIG9yIG5vdCB0byBpbmNsdWRlXG4gKiB0aGUgZmluYWwgY29vcmRpbmF0ZSBvZiBMaW5lYXJSaW5ncyB0aGF0IHdyYXBzIHRoZSByaW5nIGluIGl0cyBpdGVyYXRpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICogICBcImZlYXR1cmVzXCI6IFtcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMjYsIDM3XVxuICogICAgICAgfVxuICogICAgIH0sXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzM2LCA1M11cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIF1cbiAqIH07XG4gKiB0dXJmLmNvb3JkRWFjaChmZWF0dXJlcywgZnVuY3Rpb24gKGN1cnJlbnRDb29yZHMsIGN1cnJlbnRJbmRleCkge1xuICogICAvLz1jdXJyZW50Q29vcmRzXG4gKiAgIC8vPWN1cnJlbnRJbmRleFxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGNvb3JkRWFjaChsYXllciwgY2FsbGJhY2ssIGV4Y2x1ZGVXcmFwQ29vcmQpIHtcbiAgICB2YXIgaSwgaiwgaywgZywgbCwgZ2VvbWV0cnksIHN0b3BHLCBjb29yZHMsXG4gICAgICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLFxuICAgICAgICB3cmFwU2hyaW5rID0gMCxcbiAgICAgICAgY3VycmVudEluZGV4ID0gMCxcbiAgICAgICAgaXNHZW9tZXRyeUNvbGxlY3Rpb24sXG4gICAgICAgIGlzRmVhdHVyZUNvbGxlY3Rpb24gPSBsYXllci50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgICBpc0ZlYXR1cmUgPSBsYXllci50eXBlID09PSAnRmVhdHVyZScsXG4gICAgICAgIHN0b3AgPSBpc0ZlYXR1cmVDb2xsZWN0aW9uID8gbGF5ZXIuZmVhdHVyZXMubGVuZ3RoIDogMTtcblxuICAvLyBUaGlzIGxvZ2ljIG1heSBsb29rIGEgbGl0dGxlIHdlaXJkLiBUaGUgcmVhc29uIHdoeSBpdCBpcyB0aGF0IHdheVxuICAvLyBpcyBiZWNhdXNlIGl0J3MgdHJ5aW5nIHRvIGJlIGZhc3QuIEdlb0pTT04gc3VwcG9ydHMgbXVsdGlwbGUga2luZHNcbiAgLy8gb2Ygb2JqZWN0cyBhdCBpdHMgcm9vdDogRmVhdHVyZUNvbGxlY3Rpb24sIEZlYXR1cmVzLCBHZW9tZXRyaWVzLlxuICAvLyBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgaGFuZGxpbmcgYWxsIG9mIHRoZW0sIGFuZCB0aGF0XG4gIC8vIG1lYW5zIHRoYXQgc29tZSBvZiB0aGUgYGZvcmAgbG9vcHMgeW91IHNlZSBiZWxvdyBhY3R1YWxseSBqdXN0IGRvbid0IGFwcGx5XG4gIC8vIHRvIGNlcnRhaW4gaW5wdXRzLiBGb3IgaW5zdGFuY2UsIGlmIHlvdSBnaXZlIHRoaXMganVzdCBhXG4gIC8vIFBvaW50IGdlb21ldHJ5LCB0aGVuIGJvdGggbG9vcHMgYXJlIHNob3J0LWNpcmN1aXRlZCBhbmQgYWxsIHdlIGRvXG4gIC8vIGlzIGdyYWR1YWxseSByZW5hbWUgdGhlIGlucHV0IHVudGlsIGl0J3MgY2FsbGVkICdnZW9tZXRyeScuXG4gIC8vXG4gIC8vIFRoaXMgYWxzbyBhaW1zIHRvIGFsbG9jYXRlIGFzIGZldyByZXNvdXJjZXMgYXMgcG9zc2libGU6IGp1c3QgYVxuICAvLyBmZXcgbnVtYmVycyBhbmQgYm9vbGVhbnMsIHJhdGhlciB0aGFuIGFueSB0ZW1wb3JhcnkgYXJyYXlzIGFzIHdvdWxkXG4gIC8vIGJlIHJlcXVpcmVkIHdpdGggdGhlIG5vcm1hbGl6YXRpb24gYXBwcm9hY2guXG4gICAgZm9yIChpID0gMDsgaSA8IHN0b3A7IGkrKykge1xuXG4gICAgICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uID0gKGlzRmVhdHVyZUNvbGxlY3Rpb24gPyBsYXllci5mZWF0dXJlc1tpXS5nZW9tZXRyeSA6XG4gICAgICAgIChpc0ZlYXR1cmUgPyBsYXllci5nZW9tZXRyeSA6IGxheWVyKSk7XG4gICAgICAgIGlzR2VvbWV0cnlDb2xsZWN0aW9uID0gZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24udHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbic7XG4gICAgICAgIHN0b3BHID0gaXNHZW9tZXRyeUNvbGxlY3Rpb24gPyBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgZm9yIChnID0gMDsgZyA8IHN0b3BHOyBnKyspIHtcbiAgICAgICAgICAgIGdlb21ldHJ5ID0gaXNHZW9tZXRyeUNvbGxlY3Rpb24gP1xuICAgICAgICAgICAgZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24uZ2VvbWV0cmllc1tnXSA6IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uO1xuICAgICAgICAgICAgY29vcmRzID0gZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG5cbiAgICAgICAgICAgIHdyYXBTaHJpbmsgPSAoZXhjbHVkZVdyYXBDb29yZCAmJlxuICAgICAgICAgICAgICAgIChnZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicgfHwgZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpKSA/XG4gICAgICAgICAgICAgICAgMSA6IDA7XG5cbiAgICAgICAgICAgIGlmIChnZW9tZXRyeS50eXBlID09PSAnUG9pbnQnKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY29vcmRzLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeS50eXBlID09PSAnTGluZVN0cmluZycgfHwgZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9pbnQnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjb29yZHNbal0sIGN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ1BvbHlnb24nIHx8IGdlb21ldHJ5LnR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGNvb3Jkc1tqXS5sZW5ndGggLSB3cmFwU2hyaW5rOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvb3Jkc1tqXVtrXSwgY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdNdWx0aVBvbHlnb24nKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGNvb3Jkc1tqXS5sZW5ndGg7IGsrKylcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobCA9IDA7IGwgPCBjb29yZHNbal1ba10ubGVuZ3RoIC0gd3JhcFNocmluazsgbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY29vcmRzW2pdW2tdW2xdLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeS50eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBnZW9tZXRyeS5nZW9tZXRyaWVzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgICAgICAgICBjb29yZEVhY2goZ2VvbWV0cnkuZ2VvbWV0cmllc1tqXSwgY2FsbGJhY2ssIGV4Y2x1ZGVXcmFwQ29vcmQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gR2VvbWV0cnkgVHlwZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMuY29vcmRFYWNoID0gY29vcmRFYWNoO1xuXG4vKipcbiAqIENhbGxiYWNrIGZvciBjb29yZFJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYWxsYmFjayBjb29yZFJlZHVjZUNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IHByZXZpb3VzVmFsdWUgVGhlIGFjY3VtdWxhdGVkIHZhbHVlIHByZXZpb3VzbHkgcmV0dXJuZWQgaW4gdGhlIGxhc3QgaW52b2NhdGlvblxuICogb2YgdGhlIGNhbGxiYWNrLCBvciBpbml0aWFsVmFsdWUsIGlmIHN1cHBsaWVkLlxuICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXJdfSBjdXJyZW50Q29vcmRzIFRoZSBjdXJyZW50IGNvb3JkaW5hdGUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS5TdGFydHMgYXQgaW5kZXggMCwgaWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkLCBhbmQgYXQgaW5kZXggMSBvdGhlcndpc2UuXG4gKi9cblxuLyoqXG4gKiBSZWR1Y2UgY29vcmRpbmF0ZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LnJlZHVjZSgpXG4gKlxuICogQG5hbWUgY29vcmRSZWR1Y2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRDb29yZHMsIGN1cnJlbnRJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtleGNsdWRlV3JhcENvb3JkPWZhbHNlXSB3aGV0aGVyIG9yIG5vdCB0byBpbmNsdWRlXG4gKiB0aGUgZmluYWwgY29vcmRpbmF0ZSBvZiBMaW5lYXJSaW5ncyB0aGF0IHdyYXBzIHRoZSByaW5nIGluIGl0cyBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICogICBcImZlYXR1cmVzXCI6IFtcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMjYsIDM3XVxuICogICAgICAgfVxuICogICAgIH0sXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzM2LCA1M11cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIF1cbiAqIH07XG4gKiB0dXJmLmNvb3JkUmVkdWNlKGZlYXR1cmVzLCBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudENvb3JkcywgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudENvb3Jkc1xuICogICAvLz1jdXJyZW50SW5kZXhcbiAqICAgcmV0dXJuIGN1cnJlbnRDb29yZHM7XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gY29vcmRSZWR1Y2UobGF5ZXIsIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUsIGV4Y2x1ZGVXcmFwQ29vcmQpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBjb29yZEVhY2gobGF5ZXIsIGZ1bmN0aW9uIChjdXJyZW50Q29vcmRzLCBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRDb29yZHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2socHJldmlvdXNWYWx1ZSwgY3VycmVudENvb3JkcywgY3VycmVudEluZGV4KTtcbiAgICAgICAgfVxuICAgIH0sIGV4Y2x1ZGVXcmFwQ29vcmQpO1xuICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xufVxubW9kdWxlLmV4cG9ydHMuY29vcmRSZWR1Y2UgPSBjb29yZFJlZHVjZTtcblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgcHJvcEVhY2hcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhbGxiYWNrIHByb3BFYWNoQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gY3VycmVudFByb3BlcnRpZXMgVGhlIGN1cnJlbnQgcHJvcGVydGllcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBwcm9wZXJ0aWVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5mb3JFYWNoKClcbiAqXG4gKiBAbmFtZSBwcm9wRWFjaFxuICogQHBhcmFtIHtPYmplY3R9IGxheWVyIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAoY3VycmVudFByb3BlcnRpZXMsIGN1cnJlbnRJbmRleClcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XCJmb29cIjogXCJiYXJcIn0sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMjYsIDM3XVxuICogICAgICAgfVxuICogICAgIH0sXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcImhlbGxvXCI6IFwid29ybGRcIn0sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHR1cmYucHJvcEVhY2goZmVhdHVyZXMsIGZ1bmN0aW9uIChjdXJyZW50UHJvcGVydGllcywgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRQcm9wZXJ0aWVzXG4gKiAgIC8vPWN1cnJlbnRJbmRleFxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIHByb3BFYWNoKGxheWVyLCBjYWxsYmFjaykge1xuICAgIHZhciBpO1xuICAgIHN3aXRjaCAobGF5ZXIudHlwZSkge1xuICAgIGNhc2UgJ0ZlYXR1cmVDb2xsZWN0aW9uJzpcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhsYXllci5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBjYXNlICdGZWF0dXJlJzpcbiAgICAgICAgY2FsbGJhY2sobGF5ZXIucHJvcGVydGllcywgMCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzLnByb3BFYWNoID0gcHJvcEVhY2g7XG5cblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgcHJvcFJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYWxsYmFjayBwcm9wUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0geyp9IGN1cnJlbnRQcm9wZXJ0aWVzIFRoZSBjdXJyZW50IHByb3BlcnRpZXMgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS5TdGFydHMgYXQgaW5kZXggMCwgaWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkLCBhbmQgYXQgaW5kZXggMSBvdGhlcndpc2UuXG4gKi9cblxuLyoqXG4gKiBSZWR1Y2UgcHJvcGVydGllcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QgaW50byBhIHNpbmdsZSB2YWx1ZSxcbiAqIHNpbWlsYXIgdG8gaG93IEFycmF5LnJlZHVjZSB3b3Jrcy4gSG93ZXZlciwgaW4gdGhpcyBjYXNlIHdlIGxhemlseSBydW5cbiAqIHRoZSByZWR1Y3Rpb24sIHNvIGFuIGFycmF5IG9mIGFsbCBwcm9wZXJ0aWVzIGlzIHVubmVjZXNzYXJ5LlxuICpcbiAqIEBuYW1lIHByb3BSZWR1Y2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRQcm9wZXJ0aWVzLCBjdXJyZW50SW5kZXgpXG4gKiBAcGFyYW0geyp9IFtpbml0aWFsVmFsdWVdIFZhbHVlIHRvIHVzZSBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGNhbGxiYWNrLlxuICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGF0IHJlc3VsdHMgZnJvbSB0aGUgcmVkdWN0aW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHtcbiAqICAgXCJ0eXBlXCI6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIixcbiAqICAgXCJmZWF0dXJlc1wiOiBbXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcImZvb1wiOiBcImJhclwifSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsyNiwgMzddXG4gKiAgICAgICB9XG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge1wiaGVsbG9cIjogXCJ3b3JsZFwifSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFszNiwgNTNdXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICBdXG4gKiB9O1xuICogdHVyZi5wcm9wUmVkdWNlKGZlYXR1cmVzLCBmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudFByb3BlcnRpZXMsIGN1cnJlbnRJbmRleCkge1xuICogICAvLz1wcmV2aW91c1ZhbHVlXG4gKiAgIC8vPWN1cnJlbnRQcm9wZXJ0aWVzXG4gKiAgIC8vPWN1cnJlbnRJbmRleFxuICogICByZXR1cm4gY3VycmVudFByb3BlcnRpZXNcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBwcm9wUmVkdWNlKGxheWVyLCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIHByZXZpb3VzVmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgcHJvcEVhY2gobGF5ZXIsIGZ1bmN0aW9uIChjdXJyZW50UHJvcGVydGllcywgY3VycmVudEluZGV4KSB7XG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IDAgJiYgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50UHJvcGVydGllcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjYWxsYmFjayhwcmV2aW91c1ZhbHVlLCBjdXJyZW50UHJvcGVydGllcywgY3VycmVudEluZGV4KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xufVxubW9kdWxlLmV4cG9ydHMucHJvcFJlZHVjZSA9IHByb3BSZWR1Y2U7XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIGZlYXR1cmVFYWNoXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYWxsYmFjayBmZWF0dXJlRWFjaENhbGxiYWNrXG4gKiBAcGFyYW0ge0ZlYXR1cmU8YW55Pn0gY3VycmVudEZlYXR1cmUgVGhlIGN1cnJlbnQgZmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBmZWF0dXJlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG9cbiAqIEFycmF5LmZvckVhY2guXG4gKlxuICogQG5hbWUgZmVhdHVyZUVhY2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKGN1cnJlbnRGZWF0dXJlLCBjdXJyZW50SW5kZXgpXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICogICBcImZlYXR1cmVzXCI6IFtcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMjYsIDM3XVxuICogICAgICAgfVxuICogICAgIH0sXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzM2LCA1M11cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIF1cbiAqIH07XG4gKiB0dXJmLmZlYXR1cmVFYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudEZlYXR1cmUsIGN1cnJlbnRJbmRleCkge1xuICogICAvLz1jdXJyZW50RmVhdHVyZVxuICogICAvLz1jdXJyZW50SW5kZXhcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBmZWF0dXJlRWFjaChsYXllciwgY2FsbGJhY2spIHtcbiAgICBpZiAobGF5ZXIudHlwZSA9PT0gJ0ZlYXR1cmUnKSB7XG4gICAgICAgIGNhbGxiYWNrKGxheWVyLCAwKTtcbiAgICB9IGVsc2UgaWYgKGxheWVyLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXllci5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2FsbGJhY2sobGF5ZXIuZmVhdHVyZXNbaV0sIGkpO1xuICAgICAgICB9XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMuZmVhdHVyZUVhY2ggPSBmZWF0dXJlRWFjaDtcblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmVhdHVyZVJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYWxsYmFjayBmZWF0dXJlUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge0ZlYXR1cmU8YW55Pn0gY3VycmVudEZlYXR1cmUgVGhlIGN1cnJlbnQgRmVhdHVyZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBmZWF0dXJlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkucmVkdWNlKCkuXG4gKlxuICogQG5hbWUgZmVhdHVyZVJlZHVjZVxuICogQHBhcmFtIHtPYmplY3R9IGxheWVyIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGN1cnJlbnRJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICogICBcImZlYXR1cmVzXCI6IFtcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge1wiZm9vXCI6IFwiYmFyXCJ9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzI2LCAzN11cbiAqICAgICAgIH1cbiAqICAgICB9LFxuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XCJoZWxsb1wiOiBcIndvcmxkXCJ9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzM2LCA1M11cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIF1cbiAqIH07XG4gKiB0dXJmLmZlYXR1cmVSZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50RmVhdHVyZSwgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudEZlYXR1cmVcbiAqICAgLy89Y3VycmVudEluZGV4XG4gKiAgIHJldHVybiBjdXJyZW50RmVhdHVyZVxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmVSZWR1Y2UobGF5ZXIsIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBmZWF0dXJlRWFjaChsYXllciwgZnVuY3Rpb24gKGN1cnJlbnRGZWF0dXJlLCBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRGZWF0dXJlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGNhbGxiYWNrKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRGZWF0dXJlLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cy5mZWF0dXJlUmVkdWNlID0gZmVhdHVyZVJlZHVjZTtcblxuLyoqXG4gKiBHZXQgYWxsIGNvb3JkaW5hdGVzIGZyb20gYW55IEdlb0pTT04gb2JqZWN0LlxuICpcbiAqIEBuYW1lIGNvb3JkQWxsXG4gKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkaW5hdGUgcG9zaXRpb24gYXJyYXlcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsyNiwgMzddXG4gKiAgICAgICB9XG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHZhciBjb29yZHMgPSB0dXJmLmNvb3JkQWxsKGZlYXR1cmVzKTtcbiAqIC8vPWNvb3Jkc1xuICovXG5mdW5jdGlvbiBjb29yZEFsbChsYXllcikge1xuICAgIHZhciBjb29yZHMgPSBbXTtcbiAgICBjb29yZEVhY2gobGF5ZXIsIGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgICBjb29yZHMucHVzaChjb29yZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvb3Jkcztcbn1cbm1vZHVsZS5leHBvcnRzLmNvb3JkQWxsID0gY29vcmRBbGw7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGVhY2ggZ2VvbWV0cnkgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LmZvckVhY2goKVxuICpcbiAqIEBuYW1lIGdlb21FYWNoXG4gKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50R2VvbWV0cnksIGN1cnJlbnRJbmRleClcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsyNiwgMzddXG4gKiAgICAgICB9XG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHR1cmYuZ2VvbUVhY2goZmVhdHVyZXMsIGZ1bmN0aW9uIChjdXJyZW50R2VvbWV0cnksIGN1cnJlbnRJbmRleCkge1xuICogICAvLz1jdXJyZW50R2VvbWV0cnlcbiAqICAgLy89Y3VycmVudEluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZ2VvbUVhY2gobGF5ZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGksIGosIGcsIGdlb21ldHJ5LCBzdG9wRyxcbiAgICAgICAgZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24sXG4gICAgICAgIGlzR2VvbWV0cnlDb2xsZWN0aW9uLFxuICAgICAgICBjdXJyZW50SW5kZXggPSAwLFxuICAgICAgICBpc0ZlYXR1cmVDb2xsZWN0aW9uID0gbGF5ZXIudHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgaXNGZWF0dXJlID0gbGF5ZXIudHlwZSA9PT0gJ0ZlYXR1cmUnLFxuICAgICAgICBzdG9wID0gaXNGZWF0dXJlQ29sbGVjdGlvbiA/IGxheWVyLmZlYXR1cmVzLmxlbmd0aCA6IDE7XG5cbiAgLy8gVGhpcyBsb2dpYyBtYXkgbG9vayBhIGxpdHRsZSB3ZWlyZC4gVGhlIHJlYXNvbiB3aHkgaXQgaXMgdGhhdCB3YXlcbiAgLy8gaXMgYmVjYXVzZSBpdCdzIHRyeWluZyB0byBiZSBmYXN0LiBHZW9KU09OIHN1cHBvcnRzIG11bHRpcGxlIGtpbmRzXG4gIC8vIG9mIG9iamVjdHMgYXQgaXRzIHJvb3Q6IEZlYXR1cmVDb2xsZWN0aW9uLCBGZWF0dXJlcywgR2VvbWV0cmllcy5cbiAgLy8gVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIGhhbmRsaW5nIGFsbCBvZiB0aGVtLCBhbmQgdGhhdFxuICAvLyBtZWFucyB0aGF0IHNvbWUgb2YgdGhlIGBmb3JgIGxvb3BzIHlvdSBzZWUgYmVsb3cgYWN0dWFsbHkganVzdCBkb24ndCBhcHBseVxuICAvLyB0byBjZXJ0YWluIGlucHV0cy4gRm9yIGluc3RhbmNlLCBpZiB5b3UgZ2l2ZSB0aGlzIGp1c3QgYVxuICAvLyBQb2ludCBnZW9tZXRyeSwgdGhlbiBib3RoIGxvb3BzIGFyZSBzaG9ydC1jaXJjdWl0ZWQgYW5kIGFsbCB3ZSBkb1xuICAvLyBpcyBncmFkdWFsbHkgcmVuYW1lIHRoZSBpbnB1dCB1bnRpbCBpdCdzIGNhbGxlZCAnZ2VvbWV0cnknLlxuICAvL1xuICAvLyBUaGlzIGFsc28gYWltcyB0byBhbGxvY2F0ZSBhcyBmZXcgcmVzb3VyY2VzIGFzIHBvc3NpYmxlOiBqdXN0IGFcbiAgLy8gZmV3IG51bWJlcnMgYW5kIGJvb2xlYW5zLCByYXRoZXIgdGhhbiBhbnkgdGVtcG9yYXJ5IGFycmF5cyBhcyB3b3VsZFxuICAvLyBiZSByZXF1aXJlZCB3aXRoIHRoZSBub3JtYWxpemF0aW9uIGFwcHJvYWNoLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdG9wOyBpKyspIHtcblxuICAgICAgICBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbiA9IChpc0ZlYXR1cmVDb2xsZWN0aW9uID8gbGF5ZXIuZmVhdHVyZXNbaV0uZ2VvbWV0cnkgOlxuICAgICAgICAoaXNGZWF0dXJlID8gbGF5ZXIuZ2VvbWV0cnkgOiBsYXllcikpO1xuICAgICAgICBpc0dlb21ldHJ5Q29sbGVjdGlvbiA9IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nO1xuICAgICAgICBzdG9wRyA9IGlzR2VvbWV0cnlDb2xsZWN0aW9uID8gZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24uZ2VvbWV0cmllcy5sZW5ndGggOiAxO1xuXG4gICAgICAgIGZvciAoZyA9IDA7IGcgPCBzdG9wRzsgZysrKSB7XG4gICAgICAgICAgICBnZW9tZXRyeSA9IGlzR2VvbWV0cnlDb2xsZWN0aW9uID9cbiAgICAgICAgICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLmdlb21ldHJpZXNbZ10gOiBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdQb2ludCcgfHxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeS50eXBlID09PSAnTGluZVN0cmluZycgfHxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeS50eXBlID09PSAnTXVsdGlQb2ludCcgfHxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicgfHxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeS50eXBlID09PSAnTXVsdGlMaW5lU3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnR5cGUgPT09ICdNdWx0aVBvbHlnb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZ2VvbWV0cnksIGN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICAgICAgY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZ2VvbWV0cnkuZ2VvbWV0cmllc1tqXSwgY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gR2VvbWV0cnkgVHlwZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMuZ2VvbUVhY2ggPSBnZW9tRWFjaDtcblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZ2VvbVJlZHVjZVxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYXMgYXJndW1lbnRzIGRlcGVuZFxuICogb24gd2hldGhlciB0aGUgcmVkdWNlIG1ldGhvZCBoYXMgYW4gaW5pdGlhbFZhbHVlIGFyZ3VtZW50LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCB0byB0aGUgcmVkdWNlIG1ldGhvZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIGluaXRpYWxWYWx1ZS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBlbGVtZW50IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIElmIGFuIGluaXRpYWxWYWx1ZSBpcyBub3QgcHJvdmlkZWQ6XG4gKiAgLSBUaGUgcHJldmlvdXNWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKiAgLSBUaGUgY3VycmVudFZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYWxsYmFjayBnZW9tUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0geyp9IGN1cnJlbnRHZW9tZXRyeSBUaGUgY3VycmVudCBGZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZVxuICogYXJyYXkuU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICovXG5cbi8qKlxuICogUmVkdWNlIGdlb21ldHJ5IGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5yZWR1Y2UoKS5cbiAqXG4gKiBAbmFtZSBnZW9tUmVkdWNlXG4gKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50R2VvbWV0cnksIGN1cnJlbnRJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICogICBcImZlYXR1cmVzXCI6IFtcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge1wiZm9vXCI6IFwiYmFyXCJ9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzI2LCAzN11cbiAqICAgICAgIH1cbiAqICAgICB9LFxuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XCJoZWxsb1wiOiBcIndvcmxkXCJ9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzM2LCA1M11cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIF1cbiAqIH07XG4gKiB0dXJmLmdlb21SZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50R2VvbWV0cnksIGN1cnJlbnRJbmRleCkge1xuICogICAvLz1wcmV2aW91c1ZhbHVlXG4gKiAgIC8vPWN1cnJlbnRHZW9tZXRyeVxuICogICAvLz1jdXJyZW50SW5kZXhcbiAqICAgcmV0dXJuIGN1cnJlbnRHZW9tZXRyeVxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGdlb21SZWR1Y2UobGF5ZXIsIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBnZW9tRWFjaChsYXllciwgZnVuY3Rpb24gKGN1cnJlbnRHZW9tZXRyeSwgY3VycmVudEluZGV4KSB7XG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IDAgJiYgaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjdXJyZW50R2VvbWV0cnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2socHJldmlvdXNWYWx1ZSwgY3VycmVudEdlb21ldHJ5LCBjdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cy5nZW9tUmVkdWNlID0gZ2VvbVJlZHVjZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2lzb2JhbmRzL25vZGVfbW9kdWxlcy9AdHVyZi9tZXRhL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgdHdvUHJvZHVjdCA9IHJlcXVpcmUoXCJ0d28tcHJvZHVjdFwiKVxudmFyIHJvYnVzdFN1bSA9IHJlcXVpcmUoXCJyb2J1c3Qtc3VtXCIpXG52YXIgcm9idXN0U2NhbGUgPSByZXF1aXJlKFwicm9idXN0LXNjYWxlXCIpXG52YXIgcm9idXN0U3VidHJhY3QgPSByZXF1aXJlKFwicm9idXN0LXN1YnRyYWN0XCIpXG5cbnZhciBOVU1fRVhQQU5EID0gNVxuXG52YXIgRVBTSUxPTiAgICAgPSAxLjExMDIyMzAyNDYyNTE1NjVlLTE2XG52YXIgRVJSQk9VTkQzICAgPSAoMy4wICsgMTYuMCAqIEVQU0lMT04pICogRVBTSUxPTlxudmFyIEVSUkJPVU5ENCAgID0gKDcuMCArIDU2LjAgKiBFUFNJTE9OKSAqIEVQU0lMT05cblxuZnVuY3Rpb24gY29mYWN0b3IobSwgYykge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KG0ubGVuZ3RoLTEpXG4gIGZvcih2YXIgaT0xOyBpPG0ubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgciA9IHJlc3VsdFtpLTFdID0gbmV3IEFycmF5KG0ubGVuZ3RoLTEpXG4gICAgZm9yKHZhciBqPTAsaz0wOyBqPG0ubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmKGogPT09IGMpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIHJbaysrXSA9IG1baV1bal1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBtYXRyaXgobikge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KG4pXG4gIGZvcih2YXIgaT0wOyBpPG47ICsraSkge1xuICAgIHJlc3VsdFtpXSA9IG5ldyBBcnJheShuKVxuICAgIGZvcih2YXIgaj0wOyBqPG47ICsraikge1xuICAgICAgcmVzdWx0W2ldW2pdID0gW1wibVwiLCBqLCBcIltcIiwgKG4taS0xKSwgXCJdXCJdLmpvaW4oXCJcIilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBzaWduKG4pIHtcbiAgaWYobiAmIDEpIHtcbiAgICByZXR1cm4gXCItXCJcbiAgfVxuICByZXR1cm4gXCJcIlxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN1bShleHByKSB7XG4gIGlmKGV4cHIubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGV4cHJbMF1cbiAgfSBlbHNlIGlmKGV4cHIubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIFtcInN1bShcIiwgZXhwclswXSwgXCIsXCIsIGV4cHJbMV0sIFwiKVwiXS5qb2luKFwiXCIpXG4gIH0gZWxzZSB7XG4gICAgdmFyIG0gPSBleHByLmxlbmd0aD4+MVxuICAgIHJldHVybiBbXCJzdW0oXCIsIGdlbmVyYXRlU3VtKGV4cHIuc2xpY2UoMCwgbSkpLCBcIixcIiwgZ2VuZXJhdGVTdW0oZXhwci5zbGljZShtKSksIFwiKVwiXS5qb2luKFwiXCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5hbnQobSkge1xuICBpZihtLmxlbmd0aCA9PT0gMikge1xuICAgIHJldHVybiBbW1wic3VtKHByb2QoXCIsIG1bMF1bMF0sIFwiLFwiLCBtWzFdWzFdLCBcIikscHJvZCgtXCIsIG1bMF1bMV0sIFwiLFwiLCBtWzFdWzBdLCBcIikpXCJdLmpvaW4oXCJcIildXG4gIH0gZWxzZSB7XG4gICAgdmFyIGV4cHIgPSBbXVxuICAgIGZvcih2YXIgaT0wOyBpPG0ubGVuZ3RoOyArK2kpIHtcbiAgICAgIGV4cHIucHVzaChbXCJzY2FsZShcIiwgZ2VuZXJhdGVTdW0oZGV0ZXJtaW5hbnQoY29mYWN0b3IobSwgaSkpKSwgXCIsXCIsIHNpZ24oaSksIG1bMF1baV0sIFwiKVwiXS5qb2luKFwiXCIpKVxuICAgIH1cbiAgICByZXR1cm4gZXhwclxuICB9XG59XG5cbmZ1bmN0aW9uIG9yaWVudGF0aW9uKG4pIHtcbiAgdmFyIHBvcyA9IFtdXG4gIHZhciBuZWcgPSBbXVxuICB2YXIgbSA9IG1hdHJpeChuKVxuICB2YXIgYXJncyA9IFtdXG4gIGZvcih2YXIgaT0wOyBpPG47ICsraSkge1xuICAgIGlmKChpJjEpPT09MCkge1xuICAgICAgcG9zLnB1c2guYXBwbHkocG9zLCBkZXRlcm1pbmFudChjb2ZhY3RvcihtLCBpKSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIG5lZy5wdXNoLmFwcGx5KG5lZywgZGV0ZXJtaW5hbnQoY29mYWN0b3IobSwgaSkpKVxuICAgIH1cbiAgICBhcmdzLnB1c2goXCJtXCIgKyBpKVxuICB9XG4gIHZhciBwb3NFeHByID0gZ2VuZXJhdGVTdW0ocG9zKVxuICB2YXIgbmVnRXhwciA9IGdlbmVyYXRlU3VtKG5lZylcbiAgdmFyIGZ1bmNOYW1lID0gXCJvcmllbnRhdGlvblwiICsgbiArIFwiRXhhY3RcIlxuICB2YXIgY29kZSA9IFtcImZ1bmN0aW9uIFwiLCBmdW5jTmFtZSwgXCIoXCIsIGFyZ3Muam9pbigpLCBcIil7dmFyIHA9XCIsIHBvc0V4cHIsIFwiLG49XCIsIG5lZ0V4cHIsIFwiLGQ9c3ViKHAsbik7XFxcbnJldHVybiBkW2QubGVuZ3RoLTFdO307cmV0dXJuIFwiLCBmdW5jTmFtZV0uam9pbihcIlwiKVxuICB2YXIgcHJvYyA9IG5ldyBGdW5jdGlvbihcInN1bVwiLCBcInByb2RcIiwgXCJzY2FsZVwiLCBcInN1YlwiLCBjb2RlKVxuICByZXR1cm4gcHJvYyhyb2J1c3RTdW0sIHR3b1Byb2R1Y3QsIHJvYnVzdFNjYWxlLCByb2J1c3RTdWJ0cmFjdClcbn1cblxudmFyIG9yaWVudGF0aW9uM0V4YWN0ID0gb3JpZW50YXRpb24oMylcbnZhciBvcmllbnRhdGlvbjRFeGFjdCA9IG9yaWVudGF0aW9uKDQpXG5cbnZhciBDQUNIRUQgPSBbXG4gIGZ1bmN0aW9uIG9yaWVudGF0aW9uMCgpIHsgcmV0dXJuIDAgfSxcbiAgZnVuY3Rpb24gb3JpZW50YXRpb24xKCkgeyByZXR1cm4gMCB9LFxuICBmdW5jdGlvbiBvcmllbnRhdGlvbjIoYSwgYikgeyBcbiAgICByZXR1cm4gYlswXSAtIGFbMF1cbiAgfSxcbiAgZnVuY3Rpb24gb3JpZW50YXRpb24zKGEsIGIsIGMpIHtcbiAgICB2YXIgbCA9IChhWzFdIC0gY1sxXSkgKiAoYlswXSAtIGNbMF0pXG4gICAgdmFyIHIgPSAoYVswXSAtIGNbMF0pICogKGJbMV0gLSBjWzFdKVxuICAgIHZhciBkZXQgPSBsIC0gclxuICAgIHZhciBzXG4gICAgaWYobCA+IDApIHtcbiAgICAgIGlmKHIgPD0gMCkge1xuICAgICAgICByZXR1cm4gZGV0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzID0gbCArIHJcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYobCA8IDApIHtcbiAgICAgIGlmKHIgPj0gMCkge1xuICAgICAgICByZXR1cm4gZGV0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzID0gLShsICsgcilcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRldFxuICAgIH1cbiAgICB2YXIgdG9sID0gRVJSQk9VTkQzICogc1xuICAgIGlmKGRldCA+PSB0b2wgfHwgZGV0IDw9IC10b2wpIHtcbiAgICAgIHJldHVybiBkZXRcbiAgICB9XG4gICAgcmV0dXJuIG9yaWVudGF0aW9uM0V4YWN0KGEsIGIsIGMpXG4gIH0sXG4gIGZ1bmN0aW9uIG9yaWVudGF0aW9uNChhLGIsYyxkKSB7XG4gICAgdmFyIGFkeCA9IGFbMF0gLSBkWzBdXG4gICAgdmFyIGJkeCA9IGJbMF0gLSBkWzBdXG4gICAgdmFyIGNkeCA9IGNbMF0gLSBkWzBdXG4gICAgdmFyIGFkeSA9IGFbMV0gLSBkWzFdXG4gICAgdmFyIGJkeSA9IGJbMV0gLSBkWzFdXG4gICAgdmFyIGNkeSA9IGNbMV0gLSBkWzFdXG4gICAgdmFyIGFkeiA9IGFbMl0gLSBkWzJdXG4gICAgdmFyIGJkeiA9IGJbMl0gLSBkWzJdXG4gICAgdmFyIGNkeiA9IGNbMl0gLSBkWzJdXG4gICAgdmFyIGJkeGNkeSA9IGJkeCAqIGNkeVxuICAgIHZhciBjZHhiZHkgPSBjZHggKiBiZHlcbiAgICB2YXIgY2R4YWR5ID0gY2R4ICogYWR5XG4gICAgdmFyIGFkeGNkeSA9IGFkeCAqIGNkeVxuICAgIHZhciBhZHhiZHkgPSBhZHggKiBiZHlcbiAgICB2YXIgYmR4YWR5ID0gYmR4ICogYWR5XG4gICAgdmFyIGRldCA9IGFkeiAqIChiZHhjZHkgLSBjZHhiZHkpIFxuICAgICAgICAgICAgKyBiZHogKiAoY2R4YWR5IC0gYWR4Y2R5KVxuICAgICAgICAgICAgKyBjZHogKiAoYWR4YmR5IC0gYmR4YWR5KVxuICAgIHZhciBwZXJtYW5lbnQgPSAoTWF0aC5hYnMoYmR4Y2R5KSArIE1hdGguYWJzKGNkeGJkeSkpICogTWF0aC5hYnMoYWR6KVxuICAgICAgICAgICAgICAgICAgKyAoTWF0aC5hYnMoY2R4YWR5KSArIE1hdGguYWJzKGFkeGNkeSkpICogTWF0aC5hYnMoYmR6KVxuICAgICAgICAgICAgICAgICAgKyAoTWF0aC5hYnMoYWR4YmR5KSArIE1hdGguYWJzKGJkeGFkeSkpICogTWF0aC5hYnMoY2R6KVxuICAgIHZhciB0b2wgPSBFUlJCT1VORDQgKiBwZXJtYW5lbnRcbiAgICBpZiAoKGRldCA+IHRvbCkgfHwgKC1kZXQgPiB0b2wpKSB7XG4gICAgICByZXR1cm4gZGV0XG4gICAgfVxuICAgIHJldHVybiBvcmllbnRhdGlvbjRFeGFjdChhLGIsYyxkKVxuICB9XG5dXG5cbmZ1bmN0aW9uIHNsb3dPcmllbnQoYXJncykge1xuICB2YXIgcHJvYyA9IENBQ0hFRFthcmdzLmxlbmd0aF1cbiAgaWYoIXByb2MpIHtcbiAgICBwcm9jID0gQ0FDSEVEW2FyZ3MubGVuZ3RoXSA9IG9yaWVudGF0aW9uKGFyZ3MubGVuZ3RoKVxuICB9XG4gIHJldHVybiBwcm9jLmFwcGx5KHVuZGVmaW5lZCwgYXJncylcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVPcmllbnRhdGlvblByb2MoKSB7XG4gIHdoaWxlKENBQ0hFRC5sZW5ndGggPD0gTlVNX0VYUEFORCkge1xuICAgIENBQ0hFRC5wdXNoKG9yaWVudGF0aW9uKENBQ0hFRC5sZW5ndGgpKVxuICB9XG4gIHZhciBhcmdzID0gW11cbiAgdmFyIHByb2NBcmdzID0gW1wic2xvd1wiXVxuICBmb3IodmFyIGk9MDsgaTw9TlVNX0VYUEFORDsgKytpKSB7XG4gICAgYXJncy5wdXNoKFwiYVwiICsgaSlcbiAgICBwcm9jQXJncy5wdXNoKFwib1wiICsgaSlcbiAgfVxuICB2YXIgY29kZSA9IFtcbiAgICBcImZ1bmN0aW9uIGdldE9yaWVudGF0aW9uKFwiLCBhcmdzLmpvaW4oKSwgXCIpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6Y2FzZSAxOnJldHVybiAwO1wiXG4gIF1cbiAgZm9yKHZhciBpPTI7IGk8PU5VTV9FWFBBTkQ7ICsraSkge1xuICAgIGNvZGUucHVzaChcImNhc2UgXCIsIGksIFwiOnJldHVybiBvXCIsIGksIFwiKFwiLCBhcmdzLnNsaWNlKDAsIGkpLmpvaW4oKSwgXCIpO1wiKVxuICB9XG4gIGNvZGUucHVzaChcIn12YXIgcz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoOysraSl7c1tpXT1hcmd1bWVudHNbaV19O3JldHVybiBzbG93KHMpO31yZXR1cm4gZ2V0T3JpZW50YXRpb25cIilcbiAgcHJvY0FyZ3MucHVzaChjb2RlLmpvaW4oXCJcIikpXG5cbiAgdmFyIHByb2MgPSBGdW5jdGlvbi5hcHBseSh1bmRlZmluZWQsIHByb2NBcmdzKVxuICBtb2R1bGUuZXhwb3J0cyA9IHByb2MuYXBwbHkodW5kZWZpbmVkLCBbc2xvd09yaWVudF0uY29uY2F0KENBQ0hFRCkpXG4gIGZvcih2YXIgaT0wOyBpPD1OVU1fRVhQQU5EOyArK2kpIHtcbiAgICBtb2R1bGUuZXhwb3J0c1tpXSA9IENBQ0hFRFtpXVxuICB9XG59XG5cbmdlbmVyYXRlT3JpZW50YXRpb25Qcm9jKClcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yb2J1c3Qtb3JpZW50YXRpb24vb3JpZW50YXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB3Z3M4NCA9IHJlcXVpcmUoJ3dnczg0Jyk7XG5cbm1vZHVsZS5leHBvcnRzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5tb2R1bGUuZXhwb3J0cy5yaW5nID0gcmluZ0FyZWE7XG5cbmZ1bmN0aW9uIGdlb21ldHJ5KF8pIHtcbiAgICB2YXIgYXJlYSA9IDAsIGk7XG4gICAgc3dpdGNoIChfLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUG9seWdvbic6XG4gICAgICAgICAgICByZXR1cm4gcG9seWdvbkFyZWEoXy5jb29yZGluYXRlcyk7XG4gICAgICAgIGNhc2UgJ011bHRpUG9seWdvbic6XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgXy5jb29yZGluYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFyZWEgKz0gcG9seWdvbkFyZWEoXy5jb29yZGluYXRlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJlYTtcbiAgICAgICAgY2FzZSAnUG9pbnQnOlxuICAgICAgICBjYXNlICdNdWx0aVBvaW50JzpcbiAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XG4gICAgICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgY2FzZSAnR2VvbWV0cnlDb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBfLmdlb21ldHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmVhICs9IGdlb21ldHJ5KF8uZ2VvbWV0cmllc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJlYTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBvbHlnb25BcmVhKGNvb3Jkcykge1xuICAgIHZhciBhcmVhID0gMDtcbiAgICBpZiAoY29vcmRzICYmIGNvb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFyZWEgKz0gTWF0aC5hYnMocmluZ0FyZWEoY29vcmRzWzBdKSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmVhIC09IE1hdGguYWJzKHJpbmdBcmVhKGNvb3Jkc1tpXSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcmVhO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYXJlYSBvZiB0aGUgcG9seWdvbiB3ZXJlIGl0IHByb2plY3RlZCBvbnRvXG4gKiAgICAgdGhlIGVhcnRoLiAgTm90ZSB0aGF0IHRoaXMgYXJlYSB3aWxsIGJlIHBvc2l0aXZlIGlmIHJpbmcgaXMgb3JpZW50ZWRcbiAqICAgICBjbG9ja3dpc2UsIG90aGVyd2lzZSBpdCB3aWxsIGJlIG5lZ2F0aXZlLlxuICpcbiAqIFJlZmVyZW5jZTpcbiAqIFJvYmVydC4gRy4gQ2hhbWJlcmxhaW4gYW5kIFdpbGxpYW0gSC4gRHVxdWV0dGUsIFwiU29tZSBBbGdvcml0aG1zIGZvclxuICogICAgIFBvbHlnb25zIG9uIGEgU3BoZXJlXCIsIEpQTCBQdWJsaWNhdGlvbiAwNy0wMywgSmV0IFByb3B1bHNpb25cbiAqICAgICBMYWJvcmF0b3J5LCBQYXNhZGVuYSwgQ0EsIEp1bmUgMjAwNyBodHRwOi8vdHJzLW5ldy5qcGwubmFzYS5nb3YvZHNwYWNlL2hhbmRsZS8yMDE0LzQwNDA5XG4gKlxuICogUmV0dXJuczpcbiAqIHtmbG9hdH0gVGhlIGFwcHJveGltYXRlIHNpZ25lZCBnZW9kZXNpYyBhcmVhIG9mIHRoZSBwb2x5Z29uIGluIHNxdWFyZVxuICogICAgIG1ldGVycy5cbiAqL1xuXG5mdW5jdGlvbiByaW5nQXJlYShjb29yZHMpIHtcbiAgICB2YXIgcDEsIHAyLCBwMywgbG93ZXJJbmRleCwgbWlkZGxlSW5kZXgsIHVwcGVySW5kZXgsIGksXG4gICAgYXJlYSA9IDAsXG4gICAgY29vcmRzTGVuZ3RoID0gY29vcmRzLmxlbmd0aDtcblxuICAgIGlmIChjb29yZHNMZW5ndGggPiAyKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb29yZHNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPT09IGNvb3Jkc0xlbmd0aCAtIDIpIHsvLyBpID0gTi0yXG4gICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IGNvb3Jkc0xlbmd0aCAtIDI7XG4gICAgICAgICAgICAgICAgbWlkZGxlSW5kZXggPSBjb29yZHNMZW5ndGggLTE7XG4gICAgICAgICAgICAgICAgdXBwZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGNvb3Jkc0xlbmd0aCAtIDEpIHsvLyBpID0gTi0xXG4gICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IGNvb3Jkc0xlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgbWlkZGxlSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaSA9IDAgdG8gTi0zXG4gICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgbWlkZGxlSW5kZXggPSBpKzE7XG4gICAgICAgICAgICAgICAgdXBwZXJJbmRleCA9IGkrMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAxID0gY29vcmRzW2xvd2VySW5kZXhdO1xuICAgICAgICAgICAgcDIgPSBjb29yZHNbbWlkZGxlSW5kZXhdO1xuICAgICAgICAgICAgcDMgPSBjb29yZHNbdXBwZXJJbmRleF07XG4gICAgICAgICAgICBhcmVhICs9ICggcmFkKHAzWzBdKSAtIHJhZChwMVswXSkgKSAqIE1hdGguc2luKCByYWQocDJbMV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZWEgPSBhcmVhICogd2dzODQuUkFESVVTICogd2dzODQuUkFESVVTIC8gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJlYTtcbn1cblxuZnVuY3Rpb24gcmFkKF8pIHtcbiAgICByZXR1cm4gXyAqIE1hdGguUEkgLyAxODA7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQG1hcGJveC9nZW9qc29uLWFyZWEvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkZXN0aW5hdGlvbiA9IHJlcXVpcmUoJ0B0dXJmL2Rlc3RpbmF0aW9uJyk7XG52YXIgcG9seWdvbiA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKS5wb2x5Z29uO1xuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIFBvaW50fSBhbmQgY2FsY3VsYXRlcyB0aGUgY2lyY2xlIHBvbHlnb24gZ2l2ZW4gYSByYWRpdXMgaW4gZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnM7IGFuZCBzdGVwcyBmb3IgcHJlY2lzaW9uLlxuICpcbiAqIEBuYW1lIGNpcmNsZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvaW50PnxudW1iZXJbXX0gY2VudGVyIGNlbnRlciBwb2ludFxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyByYWRpdXMgb2YgdGhlIGNpcmNsZVxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwcz02NF0gbnVtYmVyIG9mIHN0ZXBzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIG1pbGVzLCBraWxvbWV0ZXJzLCBkZWdyZWVzLCBvciByYWRpYW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fSBjaXJjbGUgcG9seWdvblxuICogQGV4YW1wbGVcbiAqIHZhciBjZW50ZXIgPSBbLTc1LjM0MywgMzkuOTg0XTtcbiAqIHZhciByYWRpdXMgPSA1O1xuICogdmFyIHN0ZXBzID0gMTA7XG4gKiB2YXIgdW5pdHMgPSAna2lsb21ldGVycyc7XG4gKiB2YXIgcHJvcGVydGllcyA9IHtmb286ICdiYXInfTtcbiAqXG4gKiB2YXIgY2lyY2xlID0gdHVyZi5jaXJjbGUoY2VudGVyLCByYWRpdXMsIHN0ZXBzLCB1bml0cywgcHJvcGVydGllcyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3R1cmYucG9pbnQoY2VudGVyKSwgY2lyY2xlXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjZW50ZXIsIHJhZGl1cywgc3RlcHMsIHVuaXRzLCBwcm9wZXJ0aWVzKSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghY2VudGVyKSB0aHJvdyBuZXcgRXJyb3IoJ2NlbnRlciBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghcmFkaXVzKSB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl1cyBpcyByZXF1aXJlZCcpO1xuXG4gICAgLy8gZGVmYXVsdCBwYXJhbXNcbiAgICBzdGVwcyA9IHN0ZXBzIHx8IDY0O1xuICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IGNlbnRlci5wcm9wZXJ0aWVzIHx8IHt9O1xuXG4gICAgdmFyIGNvb3JkaW5hdGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwczsgaSsrKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzLnB1c2goZGVzdGluYXRpb24oY2VudGVyLCByYWRpdXMsIGkgKiAzNjAgLyBzdGVwcywgdW5pdHMpLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICB9XG4gICAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlc1swXSk7XG5cbiAgICByZXR1cm4gcG9seWdvbihbY29vcmRpbmF0ZXNdLCBwcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9jaXJjbGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IGNsaXBCdWZmZXIgZnJvbSBcIi4vYnVmZmVyXCI7XG5pbXBvcnQgY2xpcExpbmUgZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IGNsaXBQb2x5Z29uIGZyb20gXCIuL3BvbHlnb25cIjtcbmltcG9ydCB7bWVyZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuXG52YXIgY2xpcE1heCA9IDFlOSwgY2xpcE1pbiA9IC1jbGlwTWF4O1xuXG4vLyBUT0RPIFVzZSBkMy1wb2x5Z29u4oCZcyBwb2x5Z29uQ29udGFpbnMgaGVyZSBmb3IgdGhlIHJpbmcgY2hlY2s/XG4vLyBUT0RPIEVsaW1pbmF0ZSBkdXBsaWNhdGUgYnVmZmVyaW5nIGluIGNsaXBCdWZmZXIgYW5kIHBvbHlnb24ucHVzaD9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcblxuICBmdW5jdGlvbiB2aXNpYmxlKHgsIHkpIHtcbiAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgIGlmIChmcm9tID09IG51bGxcbiAgICAgICAgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSlcbiAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICBkbyBzdHJlYW0ucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgIHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xuICAgICAgICA6IGFicyhwWzBdIC0geDEpIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMVxuICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxuICAgICAgICA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjsgLy8gYWJzKHBbMV0gLSB5MSkgPCBlcHNpbG9uXG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVQb2ludChhLCBiKSB7XG4gICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYlxuICAgICAgICA6IGNhID09PSAwID8gYlsxXSAtIGFbMV1cbiAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXVxuICAgICAgICA6IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sXG4gICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHJpbmcsXG4gICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIHhfLCB5Xywgdl8sIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBjbGVhbjtcblxuICAgIHZhciBjbGlwU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICBwb2x5Z29uRW5kOiBwb2x5Z29uRW5kXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGlmICh2aXNpYmxlKHgsIHkpKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgIHZhciB3aW5kaW5nID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICBhMCA9IGIwLCBhMSA9IGIxLCBwb2ludCA9IHJpbmdbal0sIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07XG4gICAgICAgICAgaWYgKGExIDw9IHkxKSB7IGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nOyB9XG4gICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgIH1cblxuICAgIC8vIEJ1ZmZlciBnZW9tZXRyeSB3aXRoaW4gYSBwb2x5Z29uIGFuZCB0aGVuIGNsaXAgaXQgZW4gbWFzc2UuXG4gICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkluc2lkZSgpLFxuICAgICAgICAgIGNsZWFuSW5zaWRlID0gY2xlYW4gJiYgc3RhcnRJbnNpZGUsXG4gICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgaWYgKGNsZWFuSW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgICAgYWN0aXZlU3RyZWFtID0gc3RyZWFtLCBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBjbGlwU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgaWYgKHBvbHlnb24pIHBvbHlnb24ucHVzaChyaW5nID0gW10pO1xuICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgdl8gPSBmYWxzZTtcbiAgICAgIHhfID0geV8gPSBOYU47XG4gICAgfVxuXG4gICAgLy8gVE9ETyByYXRoZXIgdGhhbiBzcGVjaWFsLWNhc2UgcG9seWdvbnMsIHNpbXBseSBoYW5kbGUgdGhlbSBzZXBhcmF0ZWx5LlxuICAgIC8vIElkZWFsbHksIGNvaW5jaWRlbnQgaW50ZXJzZWN0aW9uIHBvaW50cyBzaG91bGQgYmUgaml0dGVyZWQgdG8gYXZvaWRcbiAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGlmIChzZWdtZW50cykge1xuICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJTdHJlYW0ucmVqb2luKCk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goYnVmZmVyU3RyZWFtLnJlc3VsdCgpKTtcbiAgICAgIH1cbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIGlmICh2XykgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQoeCwgeSkge1xuICAgICAgdmFyIHYgPSB2aXNpYmxlKHgsIHkpO1xuICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIHhfXyA9IHgsIHlfXyA9IHksIHZfXyA9IHY7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIGEgPSBbeF8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4XykpLCB5XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHlfKSldLFxuICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgIGlmIChjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkpIHtcbiAgICAgICAgICAgIGlmICghdl8pIHtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYVswXSwgYVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICBpZiAoIXYpIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeTAgPSAwLFxuICAgICAgeDEgPSA5NjAsXG4gICAgICB5MSA9IDUwMCxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICBjbGlwO1xuXG4gIHJldHVybiBjbGlwID0ge1xuICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBjbGlwRXh0ZW50KHgwLCB5MCwgeDEsIHkxKShjYWNoZVN0cmVhbSA9IHN0cmVhbSk7XG4gICAgfSxcbiAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0sIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsLCBjbGlwKSA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH1cbiAgfTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9leHRlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCB7ZGVmYXVsdCBhcyBiaXNlY3QsIGJpc2VjdFJpZ2h0LCBiaXNlY3RMZWZ0fSBmcm9tIFwiLi9zcmMvYmlzZWN0XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgYXNjZW5kaW5nfSBmcm9tIFwiLi9zcmMvYXNjZW5kaW5nXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgYmlzZWN0b3J9IGZyb20gXCIuL3NyYy9iaXNlY3RvclwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGNyb3NzfSBmcm9tIFwiLi9zcmMvY3Jvc3NcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBkZXNjZW5kaW5nfSBmcm9tIFwiLi9zcmMvZGVzY2VuZGluZ1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGRldmlhdGlvbn0gZnJvbSBcIi4vc3JjL2RldmlhdGlvblwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGV4dGVudH0gZnJvbSBcIi4vc3JjL2V4dGVudFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGhpc3RvZ3JhbX0gZnJvbSBcIi4vc3JjL2hpc3RvZ3JhbVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRocmVzaG9sZEZyZWVkbWFuRGlhY29uaXN9IGZyb20gXCIuL3NyYy90aHJlc2hvbGQvZnJlZWRtYW5EaWFjb25pc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRocmVzaG9sZFNjb3R0fSBmcm9tIFwiLi9zcmMvdGhyZXNob2xkL3Njb3R0XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdGhyZXNob2xkU3R1cmdlc30gZnJvbSBcIi4vc3JjL3RocmVzaG9sZC9zdHVyZ2VzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgbWF4fSBmcm9tIFwiLi9zcmMvbWF4XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgbWVhbn0gZnJvbSBcIi4vc3JjL21lYW5cIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtZWRpYW59IGZyb20gXCIuL3NyYy9tZWRpYW5cIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtZXJnZX0gZnJvbSBcIi4vc3JjL21lcmdlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgbWlufSBmcm9tIFwiLi9zcmMvbWluXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcGFpcnN9IGZyb20gXCIuL3NyYy9wYWlyc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHBlcm11dGV9IGZyb20gXCIuL3NyYy9wZXJtdXRlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcXVhbnRpbGV9IGZyb20gXCIuL3NyYy9xdWFudGlsZVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHJhbmdlfSBmcm9tIFwiLi9zcmMvcmFuZ2VcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2FufSBmcm9tIFwiLi9zcmMvc2NhblwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHNodWZmbGV9IGZyb20gXCIuL3NyYy9zaHVmZmxlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3VtfSBmcm9tIFwiLi9zcmMvc3VtXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdGlja3MsIHRpY2tJbmNyZW1lbnQsIHRpY2tTdGVwfSBmcm9tIFwiLi9zcmMvdGlja3NcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyB0cmFuc3Bvc2V9IGZyb20gXCIuL3NyYy90cmFuc3Bvc2VcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyB2YXJpYW5jZX0gZnJvbSBcIi4vc3JjL3ZhcmlhbmNlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgemlwfSBmcm9tIFwiLi9zcmMvemlwXCI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHZhbHVlb2YgPSBudW1iZXI7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1swXSwgMCwgdmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1tuIC0gMV0sIG4gLSAxLCB2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgdmFsdWUxID0gK3ZhbHVlb2YodmFsdWVzW2kwICsgMV0sIGkwICsgMSwgdmFsdWVzKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2lkZW50aXR5LmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgc2lnbiwgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtjb25pY1Byb2plY3Rpb259IGZyb20gXCIuL2NvbmljXCI7XG5pbXBvcnQge2N5bGluZHJpY2FsRXF1YWxBcmVhUmF3fSBmcm9tIFwiLi9jeWxpbmRyaWNhbEVxdWFsQXJlYVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNFcXVhbEFyZWFSYXcoeTAsIHkxKSB7XG4gIHZhciBzeTAgPSBzaW4oeTApLCBuID0gKHN5MCArIHNpbih5MSkpIC8gMjtcblxuICAvLyBBcmUgdGhlIHBhcmFsbGVscyBzeW1tZXRyaWNhbCBhcm91bmQgdGhlIEVxdWF0b3I/XG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gY3lsaW5kcmljYWxFcXVhbEFyZWFSYXcoeTApO1xuXG4gIHZhciBjID0gMSArIHN5MCAqICgyICogbiAtIHN5MCksIHIwID0gc3FydChjKSAvIG47XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgdmFyIHIgPSBzcXJ0KGMgLSAyICogbiAqIHNpbih5KSkgLyBuO1xuICAgIHJldHVybiBbciAqIHNpbih4ICo9IG4pLCByMCAtIHIgKiBjb3MoeCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHIweSA9IHIwIC0geTtcbiAgICByZXR1cm4gW2F0YW4yKHgsIGFicyhyMHkpKSAvIG4gKiBzaWduKHIweSksIGFzaW4oKGMgLSAoeCAqIHggKyByMHkgKiByMHkpICogbiAqIG4pIC8gKDIgKiBuKSldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0VxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxNTUuNDI0KVxuICAgICAgLmNlbnRlcihbMCwgMzMuNjQ0Ml0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1YWxBcmVhLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2RlZ3JlZXMsIHBpLCByYWRpYW5zfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtwcm9qZWN0aW9uTXV0YXRvcn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljUHJvamVjdGlvbihwcm9qZWN0QXQpIHtcbiAgdmFyIHBoaTAgPSAwLFxuICAgICAgcGhpMSA9IHBpIC8gMyxcbiAgICAgIG0gPSBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxuICAgICAgcCA9IG0ocGhpMCwgcGhpMSk7XG5cbiAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBtKHBoaTAgPSBfWzBdICogcmFkaWFucywgcGhpMSA9IF9bMV0gKiByYWRpYW5zKSA6IFtwaGkwICogZGVncmVlcywgcGhpMSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHJldHVybiBwO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2RlZmF1bHQgYXMgZ2VvU3RyZWFtfSBmcm9tIFwiLi4vc3RyZWFtXCI7XG5pbXBvcnQgYm91bmRzU3RyZWFtIGZyb20gXCIuLi9wYXRoL2JvdW5kc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KSB7XG4gIHZhciB3ID0gZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLFxuICAgICAgaCA9IGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSxcbiAgICAgIGNsaXAgPSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgJiYgcHJvamVjdGlvbi5jbGlwRXh0ZW50KCk7XG5cbiAgcHJvamVjdGlvblxuICAgICAgLnNjYWxlKDE1MClcbiAgICAgIC50cmFuc2xhdGUoWzAsIDBdKTtcblxuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQobnVsbCk7XG5cbiAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvbi5zdHJlYW0oYm91bmRzU3RyZWFtKSk7XG5cbiAgdmFyIGIgPSBib3VuZHNTdHJlYW0ucmVzdWx0KCksXG4gICAgICBrID0gTWF0aC5taW4odyAvIChiWzFdWzBdIC0gYlswXVswXSksIGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pKSxcbiAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgeSA9ICtleHRlbnRbMF1bMV0gKyAoaCAtIGsgKiAoYlsxXVsxXSArIGJbMF1bMV0pKSAvIDI7XG5cbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KGNsaXApO1xuXG4gIHJldHVybiBwcm9qZWN0aW9uXG4gICAgICAuc2NhbGUoayAqIDE1MClcbiAgICAgIC50cmFuc2xhdGUoW3gsIHldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgW1swLCAwXSwgc2l6ZV0sIG9iamVjdCk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2F0YW4sIGV4cCwgaGFsZlBpLCBsb2csIHBpLCB0YW4sIHRhdX0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCByb3RhdGlvbiBmcm9tIFwiLi4vcm90YXRpb25cIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgbG9nKHRhbigoaGFsZlBpICsgcGhpKSAvIDIpKV07XG59XG5cbm1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFt4LCAyICogYXRhbihleHAoeSkpIC0gaGFsZlBpXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbWVyY2F0b3JQcm9qZWN0aW9uKG1lcmNhdG9yUmF3KVxuICAgICAgLnNjYWxlKDk2MSAvIHRhdSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJjYXRvclByb2plY3Rpb24ocHJvamVjdCkge1xuICB2YXIgbSA9IHByb2plY3Rpb24ocHJvamVjdCksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHNjYWxlID0gbS5zY2FsZSxcbiAgICAgIHRyYW5zbGF0ZSA9IG0udHJhbnNsYXRlLFxuICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MTsgLy8gY2xpcCBleHRlbnRcblxuICBtLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlKF8pLCByZWNsaXAoKSkgOiBzY2FsZSgpO1xuICB9O1xuXG4gIG0udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZShfKSwgcmVjbGlwKCkpIDogdHJhbnNsYXRlKCk7XG4gIH07XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyKF8pLCByZWNsaXAoKSkgOiBjZW50ZXIoKTtcbiAgfTtcblxuICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKF8gPT0gbnVsbCA/IHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCA6ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSksIHJlY2xpcCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjbGlwKCkge1xuICAgIHZhciBrID0gcGkgKiBzY2FsZSgpLFxuICAgICAgICB0ID0gbShyb3RhdGlvbihtLnJvdGF0ZSgpKS5pbnZlcnQoWzAsIDBdKSk7XG4gICAgcmV0dXJuIGNsaXBFeHRlbnQoeDAgPT0gbnVsbFxuICAgICAgICA/IFtbdFswXSAtIGssIHRbMV0gLSBrXSwgW3RbMF0gKyBrLCB0WzFdICsga11dIDogcHJvamVjdCA9PT0gbWVyY2F0b3JSYXdcbiAgICAgICAgPyBbW01hdGgubWF4KHRbMF0gLSBrLCB4MCksIHkwXSwgW01hdGgubWluKHRbMF0gKyBrLCB4MSksIHkxXV1cbiAgICAgICAgOiBbW3gwLCBNYXRoLm1heCh0WzFdIC0gaywgeTApXSwgW3gxLCBNYXRoLm1pbih0WzFdICsgaywgeTEpXV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlY2xpcCgpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL21lcmNhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIHBvaW50ID0gaGVscGVycy5wb2ludDtcbnZhciBjb29yZEVhY2ggPSBtZXRhLmNvb3JkRWFjaDtcbnZhciBmZWF0dXJlRWFjaCA9IG1ldGEuZmVhdHVyZUVhY2g7XG52YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSBoZWxwZXJzLmZlYXR1cmVDb2xsZWN0aW9uO1xuXG4vKipcbiAqIFRha2VzIGEgZmVhdHVyZSBvciBzZXQgb2YgZmVhdHVyZXMgYW5kIHJldHVybnMgYWxsIHBvc2l0aW9ucyBhcyB7QGxpbmsgUG9pbnR8cG9pbnRzfS5cbiAqXG4gKiBAbmFtZSBleHBsb2RlXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBpbnB1dCBmZWF0dXJlc1xuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPHBvaW50Pn0gcG9pbnRzIHJlcHJlc2VudGluZyB0aGUgZXhwbG9kZWQgaW5wdXQgZmVhdHVyZXNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBpdCBlbmNvdW50ZXJzIGFuIHVua25vd24gZ2VvbWV0cnkgdHlwZVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWy04MSwgNDFdLCBbLTg4LCAzNl0sIFstODQsIDMxXSwgWy04MCwgMzNdLCBbLTc3LCAzOV0sIFstODEsIDQxXV1dKTtcbiAqXG4gKiB2YXIgZXhwbG9kZSA9IHR1cmYuZXhwbG9kZShwb2x5Z29uKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9seWdvbiwgZXhwbG9kZV1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbikge1xuICAgIHZhciBwb2ludHMgPSBbXTtcbiAgICBpZiAoZ2VvanNvbi50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XG4gICAgICAgIGZlYXR1cmVFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBjb29yZEVhY2goZmVhdHVyZSwgZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQoY29vcmQsIGZlYXR1cmUucHJvcGVydGllcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvb3JkRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KGNvb3JkLCBnZW9qc29uLnByb3BlcnRpZXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihwb2ludHMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2V4cGxvZGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyk7XG52YXIgYmVhcmluZyA9IHJlcXVpcmUoJ0B0dXJmL2JlYXJpbmcnKTtcbnZhciBkaXN0YW5jZSA9IHJlcXVpcmUoJ0B0dXJmL2Rpc3RhbmNlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50Jyk7XG52YXIgZGVzdGluYXRpb24gPSByZXF1aXJlKCdAdHVyZi9kZXN0aW5hdGlvbicpO1xudmFyIGxpbmVJbnRlcnNlY3RzID0gcmVxdWlyZSgnQHR1cmYvbGluZS1pbnRlcnNlY3QnKTtcbnZhciBwb2ludCA9IGhlbHBlcnMucG9pbnQ7XG52YXIgZ2V0Q29vcmRzID0gaW52YXJpYW50LmdldENvb3JkcztcbnZhciBsaW5lU3RyaW5nID0gaGVscGVycy5saW5lU3RyaW5nO1xudmFyIGZsYXR0ZW5FYWNoID0gbWV0YS5mbGF0dGVuRWFjaDtcblxuLyoqXG4gKiBUYWtlcyBhIHtAbGluayBQb2ludH0gYW5kIGEge0BsaW5rIExpbmVTdHJpbmd9IGFuZCBjYWxjdWxhdGVzIHRoZSBjbG9zZXN0IFBvaW50IG9uIHRoZSAoTXVsdGkpTGluZVN0cmluZy5cbiAqXG4gKiBAbmFtZSBwb2ludE9uTGluZVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPExpbmVTdHJpbmd8TXVsdGlMaW5lU3RyaW5nPn0gbGluZXMgbGluZXMgdG8gc25hcCB0b1xuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvaW50PnxudW1iZXJbXX0gcHQgcG9pbnQgdG8gc25hcCBmcm9tXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9pbnQ+fSBjbG9zZXN0IHBvaW50IG9uIHRoZSBgbGluZWAgdG8gYHBvaW50YC4gVGhlIHByb3BlcnRpZXMgb2JqZWN0IHdpbGwgY29udGFpbiB0aHJlZSB2YWx1ZXM6IGBpbmRleGA6IGNsb3Nlc3QgcG9pbnQgd2FzIGZvdW5kIG9uIG50aCBsaW5lIHBhcnQsIGBkaXN0YDogZGlzdGFuY2UgYmV0d2VlbiBwdCBhbmQgdGhlIGNsb3Nlc3QgcG9pbnQsIGBsb2NhdGlvbmA6IGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIGJldHdlZW4gc3RhcnQgYW5kIHRoZSBjbG9zZXN0IHBvaW50LlxuICogQGV4YW1wbGVcbiAqIHZhciBsaW5lID0gdHVyZi5saW5lU3RyaW5nKFtcbiAqICAgICBbLTc3LjAzMTY2OSwgMzguODc4NjA1XSxcbiAqICAgICBbLTc3LjAyOTYwOSwgMzguODgxOTQ2XSxcbiAqICAgICBbLTc3LjAyMDMzOSwgMzguODg0MDg0XSxcbiAqICAgICBbLTc3LjAyNTY2MSwgMzguODg1ODIxXSxcbiAqICAgICBbLTc3LjAyMTg4NCwgMzguODg5NTYzXSxcbiAqICAgICBbLTc3LjAxOTgyNCwgMzguODkyMzY4XVxuICogXSk7XG4gKiB2YXIgcHQgPSB0dXJmLnBvaW50KFstNzcuMDM3MDc2LCAzOC44ODQwMTddKTtcbiAqXG4gKiB2YXIgc25hcHBlZCA9IHR1cmYucG9pbnRPbkxpbmUobGluZSwgcHQsICdtaWxlcycpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtsaW5lLCBwdCwgc25hcHBlZF07XG4gKiBzbmFwcGVkLnByb3BlcnRpZXNbJ21hcmtlci1jb2xvciddID0gJyMwMGYnO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaW5lcywgcHQsIHVuaXRzKSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIHZhciB0eXBlID0gKGxpbmVzLmdlb21ldHJ5KSA/IGxpbmVzLmdlb21ldHJ5LnR5cGUgOiBsaW5lcy50eXBlO1xuICAgIGlmICh0eXBlICE9PSAnTGluZVN0cmluZycgJiYgdHlwZSAhPT0gJ011bHRpTGluZVN0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsaW5lcyBtdXN0IGJlIExpbmVTdHJpbmcgb3IgTXVsdGlMaW5lU3RyaW5nJyk7XG4gICAgfVxuXG4gICAgdmFyIGNsb3Nlc3RQdCA9IHBvaW50KFtJbmZpbml0eSwgSW5maW5pdHldLCB7XG4gICAgICAgIGRpc3Q6IEluZmluaXR5XG4gICAgfSk7XG5cbiAgICB2YXIgbGVuZ3RoID0gMC4wO1xuICAgIGZsYXR0ZW5FYWNoKGxpbmVzLCBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICB2YXIgY29vcmRzID0gZ2V0Q29vcmRzKGxpbmUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgLy9zdGFydFxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcG9pbnQoY29vcmRzW2ldKTtcbiAgICAgICAgICAgIHN0YXJ0LnByb3BlcnRpZXMuZGlzdCA9IGRpc3RhbmNlKHB0LCBzdGFydCwgdW5pdHMpO1xuICAgICAgICAgICAgLy9zdG9wXG4gICAgICAgICAgICB2YXIgc3RvcCA9IHBvaW50KGNvb3Jkc1tpICsgMV0pO1xuICAgICAgICAgICAgc3RvcC5wcm9wZXJ0aWVzLmRpc3QgPSBkaXN0YW5jZShwdCwgc3RvcCwgdW5pdHMpO1xuICAgICAgICAgICAgLy8gc2VjdGlvbkxlbmd0aFxuICAgICAgICAgICAgdmFyIHNlY3Rpb25MZW5ndGggPSBkaXN0YW5jZShzdGFydCwgc3RvcCwgdW5pdHMpO1xuICAgICAgICAgICAgLy9wZXJwZW5kaWN1bGFyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0RGlzdGFuY2UgPSBNYXRoLm1heChzdGFydC5wcm9wZXJ0aWVzLmRpc3QsIHN0b3AucHJvcGVydGllcy5kaXN0KTtcbiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBiZWFyaW5nKHN0YXJ0LCBzdG9wKTtcbiAgICAgICAgICAgIHZhciBwZXJwZW5kaWN1bGFyUHQxID0gZGVzdGluYXRpb24ocHQsIGhlaWdodERpc3RhbmNlLCBkaXJlY3Rpb24gKyA5MCwgdW5pdHMpO1xuICAgICAgICAgICAgdmFyIHBlcnBlbmRpY3VsYXJQdDIgPSBkZXN0aW5hdGlvbihwdCwgaGVpZ2h0RGlzdGFuY2UsIGRpcmVjdGlvbiAtIDkwLCB1bml0cyk7XG4gICAgICAgICAgICB2YXIgaW50ZXJzZWN0ID0gbGluZUludGVyc2VjdHMobGluZVN0cmluZyhbcGVycGVuZGljdWxhclB0MS5nZW9tZXRyeS5jb29yZGluYXRlcywgcGVycGVuZGljdWxhclB0Mi5nZW9tZXRyeS5jb29yZGluYXRlc10pLCBsaW5lU3RyaW5nKFtzdGFydC5nZW9tZXRyeS5jb29yZGluYXRlcywgc3RvcC5nZW9tZXRyeS5jb29yZGluYXRlc10pKTtcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY3RQdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0LmZlYXR1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3RQdCA9IGludGVyc2VjdC5mZWF0dXJlc1swXTtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3RQdC5wcm9wZXJ0aWVzLmRpc3QgPSBkaXN0YW5jZShwdCwgaW50ZXJzZWN0UHQsIHVuaXRzKTtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3RQdC5wcm9wZXJ0aWVzLmxvY2F0aW9uID0gbGVuZ3RoICsgZGlzdGFuY2Uoc3RhcnQsIGludGVyc2VjdFB0LCB1bml0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdGFydC5wcm9wZXJ0aWVzLmRpc3QgPCBjbG9zZXN0UHQucHJvcGVydGllcy5kaXN0KSB7XG4gICAgICAgICAgICAgICAgY2xvc2VzdFB0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgY2xvc2VzdFB0LnByb3BlcnRpZXMuaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RQdC5wcm9wZXJ0aWVzLmxvY2F0aW9uID0gbGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0b3AucHJvcGVydGllcy5kaXN0IDwgY2xvc2VzdFB0LnByb3BlcnRpZXMuZGlzdCkge1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RQdCA9IHN0b3A7XG4gICAgICAgICAgICAgICAgY2xvc2VzdFB0LnByb3BlcnRpZXMuaW5kZXggPSBpICsgMTtcbiAgICAgICAgICAgICAgICBjbG9zZXN0UHQucHJvcGVydGllcy5sb2NhdGlvbiA9IGxlbmd0aCArIHNlY3Rpb25MZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0UHQgJiYgaW50ZXJzZWN0UHQucHJvcGVydGllcy5kaXN0IDwgY2xvc2VzdFB0LnByb3BlcnRpZXMuZGlzdCkge1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RQdCA9IGludGVyc2VjdFB0O1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RQdC5wcm9wZXJ0aWVzLmluZGV4ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBsZW5ndGhcbiAgICAgICAgICAgIGxlbmd0aCArPSBzZWN0aW9uTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIHJldHVybiBjbG9zZXN0UHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvcG9pbnQtb24tbGluZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHJidXNoID0gcmVxdWlyZSgncmJ1c2gnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpO1xudmFyIGZlYXR1cmVFYWNoID0gbWV0YS5mZWF0dXJlRWFjaDtcbnZhciBjb29yZEVhY2ggPSBtZXRhLmNvb3JkRWFjaDtcblxuLyoqXG4gKiBHZW9KU09OIGltcGxlbWVudGF0aW9uIG9mIFtSQnVzaF0oaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvcmJ1c2gjcmJ1c2gpIHNwYXRpYWwgaW5kZXguXG4gKlxuICogQG5hbWUgcmJ1c2hcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4RW50cmllcz05XSBkZWZpbmVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIGluIGEgdHJlZSBub2RlLiA5ICh1c2VkIGJ5IGRlZmF1bHQpIGlzIGFcbiAqIHJlYXNvbmFibGUgY2hvaWNlIGZvciBtb3N0IGFwcGxpY2F0aW9ucy4gSGlnaGVyIHZhbHVlIG1lYW5zIGZhc3RlciBpbnNlcnRpb24gYW5kIHNsb3dlciBzZWFyY2gsIGFuZCB2aWNlIHZlcnNhLlxuICogQHJldHVybnMge1JCdXNofSBHZW9KU09OIFJCdXNoXG4gKiBAZXhhbXBsZVxuICogdmFyIHJidXNoID0gcmVxdWlyZSgnZ2VvanNvbi1yYnVzaCcpXG4gKiB2YXIgdHJlZSA9IHJidXNoKClcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF4RW50cmllcykge1xuICAgIHZhciB0cmVlID0gcmJ1c2gobWF4RW50cmllcyk7XG4gICAgLyoqXG4gICAgICogW2luc2VydF0oaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvcmJ1c2gjZGF0YS1mb3JtYXQpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0ZlYXR1cmU8YW55Pn0gZmVhdHVyZSBpbnNlcnQgc2luZ2xlIEdlb0pTT04gRmVhdHVyZVxuICAgICAqIEByZXR1cm5zIHtSQnVzaH0gR2VvSlNPTiBSQnVzaFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHBvbHlnb24gPSB7XG4gICAgICogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gICAgICogICBcInByb3BlcnRpZXNcIjoge30sXG4gICAgICogICBcImdlb21ldHJ5XCI6IHtcbiAgICAgKiAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICAgICAqICAgICBcImNvb3JkaW5hdGVzXCI6IFtbWy03OCwgNDFdLCBbLTY3LCA0MV0sIFstNjcsIDQ4XSwgWy03OCwgNDhdLCBbLTc4LCA0MV1dXVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiB0cmVlLmluc2VydChwb2x5Z29uKVxuICAgICAqL1xuICAgIHRyZWUuaW5zZXJ0ID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmVhdHVyZSkpIHtcbiAgICAgICAgICAgIHZhciBiYm94ID0gZmVhdHVyZTtcbiAgICAgICAgICAgIGZlYXR1cmUgPSBiYm94UG9seWdvbihiYm94KTtcbiAgICAgICAgICAgIGZlYXR1cmUuYmJveCA9IGJib3g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmZWF0dXJlLmJib3ggPSBmZWF0dXJlLmJib3ggPyBmZWF0dXJlLmJib3ggOiB0dXJmQkJveChmZWF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmJ1c2gucHJvdG90eXBlLmluc2VydC5jYWxsKHRoaXMsIGZlYXR1cmUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBbbG9hZF0oaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvcmJ1c2gjYnVsay1pbnNlcnRpbmctZGF0YSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QkJveFtdfEZlYXR1cmVDb2xsZWN0aW9uPGFueT59IGZlYXR1cmVzIGxvYWQgZW50aXJlIEdlb0pTT04gRmVhdHVyZUNvbGxlY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7UkJ1c2h9IEdlb0pTT04gUkJ1c2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwb2x5Z29ucyA9IHtcbiAgICAgKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gICAgICogICBcImZlYXR1cmVzXCI6IFtcbiAgICAgKiAgICAge1xuICAgICAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAgICAgKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gICAgICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gICAgICogICAgICAgICBcInR5cGVcIjogXCJQb2x5Z29uXCIsXG4gICAgICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFtbWy03OCwgNDFdLCBbLTY3LCA0MV0sIFstNjcsIDQ4XSwgWy03OCwgNDhdLCBbLTc4LCA0MV1dXVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfSxcbiAgICAgKiAgICAge1xuICAgICAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAgICAgKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gICAgICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gICAgICogICAgICAgICBcInR5cGVcIjogXCJQb2x5Z29uXCIsXG4gICAgICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFtbWy05MywgMzJdLCBbLTgzLCAzMl0sIFstODMsIDM5XSwgWy05MywgMzldLCBbLTkzLCAzMl1dXVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfVxuICAgICAqICAgXVxuICAgICAqIH1cbiAgICAgKiB0cmVlLmxvYWQocG9seWdvbnMpXG4gICAgICovXG4gICAgdHJlZS5sb2FkID0gZnVuY3Rpb24gKGZlYXR1cmVzKSB7XG4gICAgICAgIHZhciBsb2FkID0gW107XG4gICAgICAgIC8vIExvYWQgYW4gQXJyYXkgb2YgQkJveFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmZWF0dXJlcykpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGJib3gpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IGJib3hQb2x5Z29uKGJib3gpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuYmJveCA9IGJib3g7XG4gICAgICAgICAgICAgICAgbG9hZC5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBMb2FkIEZlYXR1cmVDb2xsZWN0aW9uXG4gICAgICAgICAgICBmZWF0dXJlRWFjaChmZWF0dXJlcywgZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLmJib3ggPSBmZWF0dXJlLmJib3ggPyBmZWF0dXJlLmJib3ggOiB0dXJmQkJveChmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICBsb2FkLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmJ1c2gucHJvdG90eXBlLmxvYWQuY2FsbCh0aGlzLCBsb2FkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogW3JlbW92ZV0oaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvcmJ1c2gjcmVtb3ZpbmctZGF0YSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QkJveHxGZWF0dXJlPGFueT59IGZlYXR1cmUgcmVtb3ZlIHNpbmdsZSBHZW9KU09OIEZlYXR1cmVcbiAgICAgKiBAcmV0dXJucyB7UkJ1c2h9IEdlb0pTT04gUkJ1c2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwb2x5Z29uID0ge1xuICAgICAqICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICAgICAqICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICAgICAqICAgXCJnZW9tZXRyeVwiOiB7XG4gICAgICogICAgIFwidHlwZVwiOiBcIlBvbHlnb25cIixcbiAgICAgKiAgICAgXCJjb29yZGluYXRlc1wiOiBbW1stNzgsIDQxXSwgWy02NywgNDFdLCBbLTY3LCA0OF0sIFstNzgsIDQ4XSwgWy03OCwgNDFdXV1cbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogdHJlZS5yZW1vdmUocG9seWdvbilcbiAgICAgKi9cbiAgICB0cmVlLnJlbW92ZSA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZlYXR1cmUpKSB7XG4gICAgICAgICAgICB2YXIgYmJveCA9IGZlYXR1cmU7XG4gICAgICAgICAgICBmZWF0dXJlID0gYmJveFBvbHlnb24oYmJveCk7XG4gICAgICAgICAgICBmZWF0dXJlLmJib3ggPSBiYm94O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYnVzaC5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcywgZmVhdHVyZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFtjbGVhcl0oaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvcmJ1c2gjcmVtb3ZpbmctZGF0YSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtSQnVzaH0gR2VvSlNPTiBSYnVzaFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdHJlZS5jbGVhcigpXG4gICAgICovXG4gICAgdHJlZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJidXNoLnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBbc2VhcmNoXShodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci9yYnVzaCNzZWFyY2gpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0JCb3h8RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxhbnk+fSBnZW9qc29uIHNlYXJjaCB3aXRoIEdlb0pTT05cbiAgICAgKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248YW55Pn0gYWxsIGZlYXR1cmVzIHRoYXQgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBHZW9KU09OLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHBvbHlnb24gPSB7XG4gICAgICogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gICAgICogICBcInByb3BlcnRpZXNcIjoge30sXG4gICAgICogICBcImdlb21ldHJ5XCI6IHtcbiAgICAgKiAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICAgICAqICAgICBcImNvb3JkaW5hdGVzXCI6IFtbWy03OCwgNDFdLCBbLTY3LCA0MV0sIFstNjcsIDQ4XSwgWy03OCwgNDhdLCBbLTc4LCA0MV1dXVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiB0cmVlLnNlYXJjaChwb2x5Z29uKVxuICAgICAqL1xuICAgIHRyZWUuc2VhcmNoID0gZnVuY3Rpb24gKGdlb2pzb24pIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gcmJ1c2gucHJvdG90eXBlLnNlYXJjaC5jYWxsKHRoaXMsIHRoaXMudG9CQm94KGdlb2pzb24pKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZXNcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogW2NvbGxpZGVzXShodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci9yYnVzaCNjb2xsaXNpb25zKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtCQm94fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBjb2xsaWRlcyB3aXRoIEdlb0pTT05cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGVyZSBhcmUgYW55IGl0ZW1zIGludGVyc2VjdGluZyB0aGUgZ2l2ZW4gR2VvSlNPTiwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHBvbHlnb24gPSB7XG4gICAgICogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gICAgICogICBcInByb3BlcnRpZXNcIjoge30sXG4gICAgICogICBcImdlb21ldHJ5XCI6IHtcbiAgICAgKiAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICAgICAqICAgICBcImNvb3JkaW5hdGVzXCI6IFtbWy03OCwgNDFdLCBbLTY3LCA0MV0sIFstNjcsIDQ4XSwgWy03OCwgNDhdLCBbLTc4LCA0MV1dXVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiB0cmVlLmNvbGxpZGVzKHBvbHlnb24pXG4gICAgICovXG4gICAgdHJlZS5jb2xsaWRlcyA9IGZ1bmN0aW9uIChnZW9qc29uKSB7XG4gICAgICAgIHJldHVybiByYnVzaC5wcm90b3R5cGUuY29sbGlkZXMuY2FsbCh0aGlzLCB0aGlzLnRvQkJveChnZW9qc29uKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFthbGxdKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3VybmVyL3JidXNoI3NlYXJjaClcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxhbnk+fSBhbGwgdGhlIGZlYXR1cmVzIGluIFJCdXNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB0cmVlLmFsbCgpXG4gICAgICogLy89RmVhdHVyZUNvbGxlY3Rpb25cbiAgICAgKi9cbiAgICB0cmVlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gcmJ1c2gucHJvdG90eXBlLmFsbC5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlc1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBbdG9KU09OXShodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci9yYnVzaCNleHBvcnQtYW5kLWltcG9ydClcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHthbnl9IGV4cG9ydCBkYXRhIGFzIEpTT04gb2JqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgZXhwb3J0ZWQgPSB0cmVlLnRvSlNPTigpXG4gICAgICogLy89SlNPTiBvYmplY3RcbiAgICAgKi9cbiAgICB0cmVlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJidXNoLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogW2Zyb21KU09OXShodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci9yYnVzaCNleHBvcnQtYW5kLWltcG9ydClcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YW55fSBqc29uIGltcG9ydCBwcmV2aW91c2x5IGV4cG9ydGVkIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7UkJ1c2h9IEdlb0pTT04gUkJ1c2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBleHBvcnRlZCA9IHtcbiAgICAgKiAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAqICAgICB7XG4gICAgICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICAgICAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICAgICAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAgICAgKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzExMCwgNTBdXG4gICAgICogICAgICAgfSxcbiAgICAgKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gICAgICogICAgICAgXCJiYm94XCI6IFsxMTAsIDUwLCAxMTAsIDUwXVxuICAgICAqICAgICB9XG4gICAgICogICBdLFxuICAgICAqICAgXCJoZWlnaHRcIjogMSxcbiAgICAgKiAgIFwibGVhZlwiOiB0cnVlLFxuICAgICAqICAgXCJtaW5YXCI6IDExMCxcbiAgICAgKiAgIFwibWluWVwiOiA1MCxcbiAgICAgKiAgIFwibWF4WFwiOiAxMTAsXG4gICAgICogICBcIm1heFlcIjogNTBcbiAgICAgKiB9XG4gICAgICogdHJlZS5mcm9tSlNPTihleHBvcnRlZClcbiAgICAgKi9cbiAgICB0cmVlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIHJidXNoLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBHZW9KU09OIHRvIHttaW5YLCBtaW5ZLCBtYXhYLCBtYXhZfSBzY2hlbWFcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCQm94fEZlYXR1cmVDb2xsZWN0aW98RmVhdHVyZTxhbnk+fSBnZW9qc29uIGZlYXR1cmUocykgdG8gcmV0cmlldmUgQkJveCBmcm9tXG4gICAgICogQHJldHVybnMge09iamVjdH0gY29udmVydGVkIHRvIHttaW5YLCBtaW5ZLCBtYXhYLCBtYXhZfVxuICAgICAqL1xuICAgIHRyZWUudG9CQm94ID0gZnVuY3Rpb24gKGdlb2pzb24pIHtcbiAgICAgICAgdmFyIGJib3g7XG4gICAgICAgIGlmIChnZW9qc29uLmJib3gpIGJib3ggPSBnZW9qc29uLmJib3g7XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZ2VvanNvbikgJiYgZ2VvanNvbi5sZW5ndGggPT09IDQpIGJib3ggPSBnZW9qc29uO1xuICAgICAgICBlbHNlIGJib3ggPSB0dXJmQkJveChnZW9qc29uKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluWDogYmJveFswXSxcbiAgICAgICAgICAgIG1pblk6IGJib3hbMV0sXG4gICAgICAgICAgICBtYXhYOiBiYm94WzJdLFxuICAgICAgICAgICAgbWF4WTogYmJveFszXVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIHRyZWU7XG59O1xuXG4vKipcbiAqIFRha2VzIGEgYmJveCBhbmQgcmV0dXJucyBhbiBlcXVpdmFsZW50IHtAbGluayBQb2x5Z29ufHBvbHlnb259LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBiYm94UG9seWdvblxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBiYm94IGV4dGVudCBpbiBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0gb3JkZXJcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fSBhIFBvbHlnb24gcmVwcmVzZW50YXRpb24gb2YgdGhlIGJvdW5kaW5nIGJveFxuICogQGV4YW1wbGVcbiAqIHZhciBiYm94ID0gWzAsIDAsIDEwLCAxMF07XG4gKlxuICogdmFyIHBvbHkgPSB0dXJmLmJib3hQb2x5Z29uKGJib3gpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5XVxuICovXG5mdW5jdGlvbiBiYm94UG9seWdvbihiYm94KSB7XG4gICAgdmFyIGxvd0xlZnQgPSBbYmJveFswXSwgYmJveFsxXV07XG4gICAgdmFyIHRvcExlZnQgPSBbYmJveFswXSwgYmJveFszXV07XG4gICAgdmFyIHRvcFJpZ2h0ID0gW2Jib3hbMl0sIGJib3hbM11dO1xuICAgIHZhciBsb3dSaWdodCA9IFtiYm94WzJdLCBiYm94WzFdXTtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBbW2xvd0xlZnQsIGxvd1JpZ2h0LCB0b3BSaWdodCwgdG9wTGVmdCwgbG93TGVmdF1dO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBiYm94OiBiYm94LFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHNldCBvZiBmZWF0dXJlcywgY2FsY3VsYXRlcyB0aGUgYmJveCBvZiBhbGwgaW5wdXQgZmVhdHVyZXMsIGFuZCByZXR1cm5zIGEgYm91bmRpbmcgYm94LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBiYm94XG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBpbnB1dCBmZWF0dXJlc1xuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IGJib3ggZXh0ZW50IGluIFttaW5YLCBtaW5ZLCBtYXhYLCBtYXhZXSBvcmRlclxuICogQGV4YW1wbGVcbiAqIHZhciBsaW5lID0gdHVyZi5saW5lU3RyaW5nKFtbLTc0LCA0MF0sIFstNzgsIDQyXSwgWy04MiwgMzVdXSk7XG4gKiB2YXIgYmJveCA9IHR1cmYuYmJveChsaW5lKTtcbiAqIHZhciBiYm94UG9seWdvbiA9IHR1cmYuYmJveFBvbHlnb24oYmJveCk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2xpbmUsIGJib3hQb2x5Z29uXVxuICovXG5mdW5jdGlvbiB0dXJmQkJveChnZW9qc29uKSB7XG4gICAgdmFyIGJib3ggPSBbSW5maW5pdHksIEluZmluaXR5LCAtSW5maW5pdHksIC1JbmZpbml0eV07XG4gICAgY29vcmRFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgICBpZiAoYmJveFswXSA+IGNvb3JkWzBdKSBiYm94WzBdID0gY29vcmRbMF07XG4gICAgICAgIGlmIChiYm94WzFdID4gY29vcmRbMV0pIGJib3hbMV0gPSBjb29yZFsxXTtcbiAgICAgICAgaWYgKGJib3hbMl0gPCBjb29yZFswXSkgYmJveFsyXSA9IGNvb3JkWzBdO1xuICAgICAgICBpZiAoYmJveFszXSA8IGNvb3JkWzFdKSBiYm94WzNdID0gY29vcmRbMV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGJib3g7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9nZW9qc29uLXJidXNoL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZmxhdHRlbkVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuZmxhdHRlbkVhY2g7XG52YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykuZmVhdHVyZUNvbGxlY3Rpb247XG5cbi8qKlxuICogRmxhdHRlbnMgYW55IHtAbGluayBHZW9KU09OfSB0byBhIHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0gaW5zcGlyZWQgYnkgW2dlb2pzb24tZmxhdHRlbl0oaHR0cHM6Ly9naXRodWIuY29tL3RtY3cvZ2VvanNvbi1mbGF0dGVuKS5cbiAqXG4gKiBAbmFtZSBmbGF0dGVuXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEdlb21ldHJ5fEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBhbnkgdmFsaWQgR2VvSlNPTiBPYmplY3RcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxhbnk+fSBhbGwgTXVsdGktR2VvbWV0cmllcyBhcmUgZmxhdHRlbmVkIGludG8gc2luZ2xlIEZlYXR1cmVzXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpR2VvbWV0cnkgPSB0dXJmLm11bHRpUG9seWdvbihbXG4gKiAgIFtbWzEwMi4wLCAyLjBdLCBbMTAzLjAsIDIuMF0sIFsxMDMuMCwgMy4wXSwgWzEwMi4wLCAzLjBdLCBbMTAyLjAsIDIuMF1dXSxcbiAqICAgW1tbMTAwLjAsIDAuMF0sIFsxMDEuMCwgMC4wXSwgWzEwMS4wLCAxLjBdLCBbMTAwLjAsIDEuMF0sIFsxMDAuMCwgMC4wXV0sXG4gKiAgIFtbMTAwLjIsIDAuMl0sIFsxMDAuOCwgMC4yXSwgWzEwMC44LCAwLjhdLCBbMTAwLjIsIDAuOF0sIFsxMDAuMiwgMC4yXV1dXG4gKiBdKTtcbiAqXG4gKiB2YXIgZmxhdHRlbiA9IHR1cmYuZmxhdHRlbihtdWx0aUdlb21ldHJ5KTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbZmxhdHRlbl1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbikge1xuICAgIGlmICghZ2VvanNvbikgdGhyb3cgbmV3IEVycm9yKCdnZW9qc29uIGlzIHJlcXVpcmVkJyk7XG5cbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGZsYXR0ZW5FYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChmZWF0dXJlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24ocmVzdWx0cyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvZmxhdHRlbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldENvb3JkcyA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpLmdldENvb3JkcztcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGxpbmVTdHJpbmcgPSBoZWxwZXJzLmxpbmVTdHJpbmc7XG52YXIgbXVsdGlMaW5lU3RyaW5nID0gaGVscGVycy5tdWx0aUxpbmVTdHJpbmc7XG52YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSBoZWxwZXJzLmZlYXR1cmVDb2xsZWN0aW9uO1xuXG4vKipcbiAqIENvbnZlcnRzIGEge0BsaW5rIFBvbHlnb259IHRvIHtAbGluayBMaW5lU3RyaW5nfChNdWx0aSlMaW5lU3RyaW5nfSBvciB7QGxpbmsgTXVsdGlQb2x5Z29ufSB0byBhIHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0gb2Yge0BsaW5rIExpbmVTdHJpbmd8KE11bHRpKUxpbmVTdHJpbmd9LlxuICpcbiAqIEBuYW1lIHBvbHlnb25Ub0xpbmVTdHJpbmdcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IHBvbHlnb24gRmVhdHVyZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIHRyYW5zbGF0ZXMgR2VvSlNPTiBwcm9wZXJ0aWVzIHRvIEZlYXR1cmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlPExpbmVTdHJpbmd8TXVsdGlMaW5lc3RyaW5nPn0gY29udmVydGVkIChNdWx0aSlQb2x5Z29uIHRvIChNdWx0aSlMaW5lU3RyaW5nXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvbHkgPSB0dXJmLnBvbHlnb24oW1tbMTI1LCAtMzBdLCBbMTQ1LCAtMzBdLCBbMTQ1LCAtMjBdLCBbMTI1LCAtMjBdLCBbMTI1LCAtMzBdXV0pO1xuICpcbiAqIHZhciBsaW5lID0gdHVyZi5wb2x5Z29uVG9MaW5lU3RyaW5nKHBvbHkpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtsaW5lXTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9seWdvbiwgcHJvcGVydGllcykge1xuICAgIHZhciBnZW9tID0gZ2V0R2VvbVR5cGUocG9seWdvbik7XG4gICAgdmFyIGNvb3JkcyA9IGdldENvb3Jkcyhwb2x5Z29uKTtcbiAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCBwb2x5Z29uLnByb3BlcnRpZXMgfHwge307XG5cbiAgICBpZiAoIWNvb3Jkcy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcigncG9seWdvbiBtdXN0IGNvbnRhaW4gY29vcmRpbmF0ZXMnKTtcblxuICAgIHN3aXRjaCAoZ2VvbSkge1xuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICByZXR1cm4gY29vcmRzVG9MaW5lKGNvb3JkcywgcHJvcGVydGllcyk7XG4gICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgdmFyIGxpbmVzID0gW107XG4gICAgICAgIGNvb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgICAgICAgbGluZXMucHVzaChjb29yZHNUb0xpbmUoY29vcmQsIHByb3BlcnRpZXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihsaW5lcyk7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZW9tICcgKyBnZW9tICsgJyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gY29vcmRzVG9MaW5lKGNvb3JkcywgcHJvcGVydGllcykge1xuICAgIGlmIChjb29yZHMubGVuZ3RoID4gMSkgcmV0dXJuIG11bHRpTGluZVN0cmluZyhjb29yZHMsIHByb3BlcnRpZXMpO1xuICAgIHJldHVybiBsaW5lU3RyaW5nKGNvb3Jkc1swXSwgcHJvcGVydGllcyk7XG59XG5cbmZ1bmN0aW9uIGdldEdlb21UeXBlKGZlYXR1cmUpIHtcbiAgICByZXR1cm4gKGZlYXR1cmUuZ2VvbWV0cnkpID8gZmVhdHVyZS5nZW9tZXRyeS50eXBlIDogZmVhdHVyZS50eXBlO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvcG9seWdvbi10by1saW5lc3RyaW5nL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SaHVtYl9saW5lXG4vLyBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbCNyaHVtYmxpbmVzXG52YXIgZ2V0Q29vcmQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKS5nZXRDb29yZDtcbnZhciBHZW9kZXN5TGF0TG9uID0gcmVxdWlyZSgnZ2VvZGVzeScpLkxhdExvblNwaGVyaWNhbDtcblxuLyoqXG4gKiBUYWtlcyB0d28ge0BsaW5rIFBvaW50fHBvaW50c30gYW5kIGZpbmRzIHRoZSBiZWFyaW5nIGFuZ2xlIGJldHdlZW4gdGhlbSBhbG9uZyBhIFJodW1iIGxpbmVcbiAqIGkuZS4gdGhlIGFuZ2xlIG1lYXN1cmVkIGluIGRlZ3JlZXMgc3RhcnQgdGhlIG5vcnRoIGxpbmUgKDAgZGVncmVlcylcbiAqXG4gKiBAbmFtZSByaHVtYkJlYXJpbmdcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPn0gc3RhcnQgc3RhcnRpbmcgUG9pbnRcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPn0gZW5kIGVuZGluZyBQb2ludFxuICogQHBhcmFtIHtib29sZWFufSBbZmluYWw9ZmFsc2VdIGNhbGN1bGF0ZXMgdGhlIGZpbmFsIGJlYXJpbmcgaWYgdHJ1ZVxuICogQHJldHVybnMge251bWJlcn0gYmVhcmluZyBmcm9tIG5vcnRoIGluIGRlY2ltYWwgZGVncmVlcywgYmV0d2VlbiAtMTgwIGFuZCAxODAgZGVncmVlcyAocG9zaXRpdmUgY2xvY2t3aXNlKVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2ludDEgPSB0dXJmLnBvaW50KFstNzUuMzQzLCAzOS45ODRdLCB7XCJtYXJrZXItY29sb3JcIjogXCIjRjAwXCJ9KTtcbiAqIHZhciBwb2ludDIgPSB0dXJmLnBvaW50KFstNzUuNTM0LCAzOS4xMjNdLCB7XCJtYXJrZXItY29sb3JcIjogXCIjMDBGXCJ9KTtcbiAqXG4gKiB2YXIgYmVhcmluZyA9IHR1cmYucmh1bWJCZWFyaW5nKHBvaW50MSwgcG9pbnQyKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9pbnQxLCBwb2ludDJdXG4gKiBwb2ludDEucHJvcGVydGllcy5iZWFyaW5nID0gYmVhcmluZ1xuICogcG9pbnQyLnByb3BlcnRpZXMuYmVhcmluZyA9IGJlYXJpbmdcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZmluYWwpIHtcbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKCFzdGFydCkgdGhyb3cgbmV3IEVycm9yKCdzdGFydCBwb2ludCBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghZW5kKSB0aHJvdyBuZXcgRXJyb3IoJ2VuZCBwb2ludCBpcyByZXF1aXJlZCcpO1xuXG4gICAgdmFyIGNvb3Jkc1N0YXJ0ID0gZ2V0Q29vcmQoc3RhcnQpO1xuICAgIHZhciBjb29yZHNFbmQgPSBnZXRDb29yZChlbmQpO1xuICAgIHZhciBvcmlnaW4gPSBuZXcgR2VvZGVzeUxhdExvbihjb29yZHNTdGFydFsxXSwgY29vcmRzU3RhcnRbMF0pO1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IG5ldyBHZW9kZXN5TGF0TG9uKGNvb3Jkc0VuZFsxXSwgY29vcmRzRW5kWzBdKTtcbiAgICB2YXIgYmVhcjM2MDtcblxuICAgIGlmIChmaW5hbCkgYmVhcjM2MCA9IGRlc3RpbmF0aW9uLnJodW1iQmVhcmluZ1RvKG9yaWdpbik7XG4gICAgZWxzZSBiZWFyMzYwID0gb3JpZ2luLnJodW1iQmVhcmluZ1RvKGRlc3RpbmF0aW9uKTtcblxuICAgIHZhciBiZWFyMTgwID0gKGJlYXIzNjAgPiAxODApID8gLSgzNjAgLSBiZWFyMzYwKSA6IGJlYXIzNjA7XG5cbiAgICByZXR1cm4gYmVhcjE4MDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9yaHVtYi1iZWFyaW5nL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiBucG0gbWFpbiBtb2R1bGUgKi9cbid1c2Ugc3RyaWN0JztcbmV4cG9ydHMuTGF0TG9uU3BoZXJpY2FsICAgPSByZXF1aXJlKCcuL2xhdGxvbi1zcGhlcmljYWwuanMnKTtcbmV4cG9ydHMuTGF0TG9uRWxsaXBzb2lkYWwgPSByZXF1aXJlKCcuL2xhdGxvbi1lbGxpcHNvaWRhbC5qcycpO1xuLy8gbWVyZ2UgdmluY2VudHkgbWV0aG9kcyBpbnRvIExhdExvbkVsbGlwc29pZGFsXG52YXIgViA9IHJlcXVpcmUoJy4vbGF0bG9uLXZpbmNlbnR5LmpzJyk7XG5mb3IgKHZhciBwcm9wIGluIFYpIGV4cG9ydHMuTGF0TG9uRWxsaXBzb2lkYWxbcHJvcF0gPSBWW3Byb3BdO1xuZXhwb3J0cy5MYXRMb25WZWN0b3JzICAgICA9IHJlcXVpcmUoJy4vbGF0bG9uLXZlY3RvcnMuanMnKTtcbmV4cG9ydHMuVmVjdG9yM2QgICAgICAgICAgPSByZXF1aXJlKCcuL3ZlY3RvcjNkLmpzJyk7XG5leHBvcnRzLlV0bSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi91dG0uanMnKTtcbmV4cG9ydHMuTWdycyAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL21ncnMuanMnKTtcbmV4cG9ydHMuT3NHcmlkUmVmICAgICAgICAgPSByZXF1aXJlKCcuL29zZ3JpZHJlZi5qcycpO1xuZXhwb3J0cy5EbXMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vZG1zLmpzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9nZW9kZXN5L25wbS5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuLyogVmVjdG9yIGhhbmRsaW5nIGZ1bmN0aW9ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjKSBDaHJpcyBWZW5lc3MgMjAxMS0yMDE2ICAqL1xuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1JVCBMaWNlbmNlICAqL1xuLyogd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2dlb2Rlc3kvZG9jcy9tb2R1bGUtdmVjdG9yM2QuaHRtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuLyoqXG4gKiBMaWJyYXJ5IG9mIDMtZCB2ZWN0b3IgbWFuaXB1bGF0aW9uIHJvdXRpbmVzLlxuICpcbiAqIEluIGEgZ2VvZGVzeSBjb250ZXh0LCB0aGVzZSB2ZWN0b3JzIG1heSBiZSB1c2VkIHRvIHJlcHJlc2VudDpcbiAqICAtIG4tdmVjdG9yIHJlcHJlc2VudGluZyBhIG5vcm1hbCB0byBwb2ludCBvbiBFYXJ0aCdzIHN1cmZhY2VcbiAqICAtIGVhcnRoLWNlbnRlcmVkLCBlYXJ0aCBmaXhlZCB2ZWN0b3IgKOKJoSBHYWRl4oCZcyDigJhwLXZlY3RvcuKAmSlcbiAqICAtIGdyZWF0IGNpcmNsZSBub3JtYWwgdG8gdmVjdG9yIChvbiBzcGhlcmljYWwgZWFydGggbW9kZWwpXG4gKiAgLSBtb3Rpb24gdmVjdG9yIG9uIEVhcnRoJ3Mgc3VyZmFjZVxuICogIC0gZXRjXG4gKlxuICogRnVuY3Rpb25zIHJldHVybiB2ZWN0b3JzIGFzIHJldHVybiByZXN1bHRzLCBzbyB0aGF0IG9wZXJhdGlvbnMgY2FuIGJlIGNoYWluZWQuXG4gKiBAZXhhbXBsZSB2YXIgdiA9IHYxLmNyb3NzKHYyKS5kb3QodjMpIC8vIOKJoSB2McOXdjLii4V2M1xuICpcbiAqIEBtb2R1bGUgdmVjdG9yM2RcbiAqL1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIDMtZCB2ZWN0b3IuXG4gKlxuICogVGhlIHZlY3RvciBtYXkgYmUgbm9ybWFsaXNlZCwgb3IgdXNlIHgveS96IHZhbHVlcyBmb3IgZWcgaGVpZ2h0IHJlbGF0aXZlIHRvIHRoZSBzcGhlcmUgb3JcbiAqIGVsbGlwc29pZCwgZGlzdGFuY2UgZnJvbSBlYXJ0aCBjZW50cmUsIGV0Yy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWCBjb21wb25lbnQgb2YgdmVjdG9yLlxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvbXBvbmVudCBvZiB2ZWN0b3IuXG4gKiBAcGFyYW0ge251bWJlcn0geiAtIFogY29tcG9uZW50IG9mIHZlY3Rvci5cbiAqL1xuZnVuY3Rpb24gVmVjdG9yM2QoeCwgeSwgeikge1xuICAgIC8vIGFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCAnbmV3J1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBWZWN0b3IzZCkpIHJldHVybiBuZXcgVmVjdG9yM2QoeCwgeSwgeik7XG5cbiAgICB0aGlzLnggPSBOdW1iZXIoeCk7XG4gICAgdGhpcy55ID0gTnVtYmVyKHkpO1xuICAgIHRoaXMueiA9IE51bWJlcih6KTtcbn1cblxuXG4vKipcbiAqIEFkZHMgc3VwcGxpZWQgdmVjdG9yIHRvIOKAmHRoaXPigJkgdmVjdG9yLlxuICpcbiAqIEBwYXJhbSAgIHtWZWN0b3IzZH0gdiAtIFZlY3RvciB0byBiZSBhZGRlZCB0byB0aGlzIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtWZWN0b3IzZH0gVmVjdG9yIHJlcHJlc2VudGluZyBzdW0gb2YgdGhpcyBhbmQgdi5cbiAqL1xuVmVjdG9yM2QucHJvdG90eXBlLnBsdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCEodiBpbnN0YW5jZW9mIFZlY3RvcjNkKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigndiBpcyBub3QgVmVjdG9yM2Qgb2JqZWN0Jyk7XG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjNkKHRoaXMueCArIHYueCwgdGhpcy55ICsgdi55LCB0aGlzLnogKyB2LnopO1xufTtcblxuXG4vKipcbiAqIFN1YnRyYWN0cyBzdXBwbGllZCB2ZWN0b3IgZnJvbSDigJh0aGlz4oCZIHZlY3Rvci5cbiAqXG4gKiBAcGFyYW0gICB7VmVjdG9yM2R9IHYgLSBWZWN0b3IgdG8gYmUgc3VidHJhY3RlZCBmcm9tIHRoaXMgdmVjdG9yLlxuICogQHJldHVybnMge1ZlY3RvcjNkfSBWZWN0b3IgcmVwcmVzZW50aW5nIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGlzIGFuZCB2LlxuICovXG5WZWN0b3IzZC5wcm90b3R5cGUubWludXMgPSBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCEodiBpbnN0YW5jZW9mIFZlY3RvcjNkKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigndiBpcyBub3QgVmVjdG9yM2Qgb2JqZWN0Jyk7XG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjNkKHRoaXMueCAtIHYueCwgdGhpcy55IC0gdi55LCB0aGlzLnogLSB2LnopO1xufTtcblxuXG4vKipcbiAqIE11bHRpcGxpZXMg4oCYdGhpc+KAmSB2ZWN0b3IgYnkgYSBzY2FsYXIgdmFsdWUuXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gICB4IC0gRmFjdG9yIHRvIG11bHRpcGx5IHRoaXMgdmVjdG9yIGJ5LlxuICogQHJldHVybnMge1ZlY3RvcjNkfSBWZWN0b3Igc2NhbGVkIGJ5IHguXG4gKi9cblZlY3RvcjNkLnByb3RvdHlwZS50aW1lcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICB4ID0gTnVtYmVyKHgpO1xuXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzZCh0aGlzLnggKiB4LCB0aGlzLnkgKiB4LCB0aGlzLnogKiB4KTtcbn07XG5cblxuLyoqXG4gKiBEaXZpZGVzIOKAmHRoaXPigJkgdmVjdG9yIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgeCAtIEZhY3RvciB0byBkaXZpZGUgdGhpcyB2ZWN0b3IgYnkuXG4gKiBAcmV0dXJucyB7VmVjdG9yM2R9IFZlY3RvciBkaXZpZGVkIGJ5IHguXG4gKi9cblZlY3RvcjNkLnByb3RvdHlwZS5kaXZpZGVkQnkgPSBmdW5jdGlvbih4KSB7XG4gICAgeCA9IE51bWJlcih4KTtcblxuICAgIHJldHVybiBuZXcgVmVjdG9yM2QodGhpcy54IC8geCwgdGhpcy55IC8geCwgdGhpcy56IC8geCk7XG59O1xuXG5cbi8qKlxuICogTXVsdGlwbGllcyDigJh0aGlz4oCZIHZlY3RvciBieSB0aGUgc3VwcGxpZWQgdmVjdG9yIHVzaW5nIGRvdCAoc2NhbGFyKSBwcm9kdWN0LlxuICpcbiAqIEBwYXJhbSAgIHtWZWN0b3IzZH0gdiAtIFZlY3RvciB0byBiZSBkb3R0ZWQgd2l0aCB0aGlzIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IERvdCBwcm9kdWN0IG9mIOKAmHRoaXPigJkgYW5kIHYuXG4gKi9cblZlY3RvcjNkLnByb3RvdHlwZS5kb3QgPSBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCEodiBpbnN0YW5jZW9mIFZlY3RvcjNkKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigndiBpcyBub3QgVmVjdG9yM2Qgb2JqZWN0Jyk7XG5cbiAgICByZXR1cm4gdGhpcy54KnYueCArIHRoaXMueSp2LnkgKyB0aGlzLnoqdi56O1xufTtcblxuXG4vKipcbiAqIE11bHRpcGxpZXMg4oCYdGhpc+KAmSB2ZWN0b3IgYnkgdGhlIHN1cHBsaWVkIHZlY3RvciB1c2luZyBjcm9zcyAodmVjdG9yKSBwcm9kdWN0LlxuICpcbiAqIEBwYXJhbSAgIHtWZWN0b3IzZH0gdiAtIFZlY3RvciB0byBiZSBjcm9zc2VkIHdpdGggdGhpcyB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7VmVjdG9yM2R9IENyb3NzIHByb2R1Y3Qgb2Yg4oCYdGhpc+KAmSBhbmQgdi5cbiAqL1xuVmVjdG9yM2QucHJvdG90eXBlLmNyb3NzID0gZnVuY3Rpb24odikge1xuICAgIGlmICghKHYgaW5zdGFuY2VvZiBWZWN0b3IzZCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3YgaXMgbm90IFZlY3RvcjNkIG9iamVjdCcpO1xuXG4gICAgdmFyIHggPSB0aGlzLnkqdi56IC0gdGhpcy56KnYueTtcbiAgICB2YXIgeSA9IHRoaXMueip2LnggLSB0aGlzLngqdi56O1xuICAgIHZhciB6ID0gdGhpcy54KnYueSAtIHRoaXMueSp2Lng7XG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjNkKHgsIHksIHopO1xufTtcblxuXG4vKipcbiAqIE5lZ2F0ZXMgYSB2ZWN0b3IgdG8gcG9pbnQgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvblxuICpcbiAqIEByZXR1cm5zIHtWZWN0b3IzZH0gTmVnYXRlZCB2ZWN0b3IuXG4gKi9cblZlY3RvcjNkLnByb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjNkKC10aGlzLngsIC10aGlzLnksIC10aGlzLnopO1xufTtcblxuXG4vKipcbiAqIExlbmd0aCAobWFnbml0dWRlIG9yIG5vcm0pIG9mIOKAmHRoaXPigJkgdmVjdG9yXG4gKlxuICogQHJldHVybnMge251bWJlcn0gTWFnbml0dWRlIG9mIHRoaXMgdmVjdG9yLlxuICovXG5WZWN0b3IzZC5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLngqdGhpcy54ICsgdGhpcy55KnRoaXMueSArIHRoaXMueip0aGlzLnopO1xufTtcblxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYSB2ZWN0b3IgdG8gaXRzIHVuaXQgdmVjdG9yXG4gKiDigJMgaWYgdGhlIHZlY3RvciBpcyBhbHJlYWR5IHVuaXQgb3IgaXMgemVybyBtYWduaXR1ZGUsIHRoaXMgaXMgYSBuby1vcC5cbiAqXG4gKiBAcmV0dXJucyB7VmVjdG9yM2R9IE5vcm1hbGlzZWQgdmVyc2lvbiBvZiB0aGlzIHZlY3Rvci5cbiAqL1xuVmVjdG9yM2QucHJvdG90eXBlLnVuaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9ybSA9IHRoaXMubGVuZ3RoKCk7XG4gICAgaWYgKG5vcm0gPT0gMSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKG5vcm0gPT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgICB2YXIgeCA9IHRoaXMueC9ub3JtO1xuICAgIHZhciB5ID0gdGhpcy55L25vcm07XG4gICAgdmFyIHogPSB0aGlzLnovbm9ybTtcblxuICAgIHJldHVybiBuZXcgVmVjdG9yM2QoeCwgeSwgeik7XG59O1xuXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYW5nbGUgYmV0d2VlbiDigJh0aGlz4oCZIHZlY3RvciBhbmQgc3VwcGxpZWQgdmVjdG9yLlxuICpcbiAqIEBwYXJhbSAgIHtWZWN0b3IzZH0gdlxuICogQHBhcmFtICAge1ZlY3RvcjNkfSBbdlNpZ25dIC0gSWYgc3VwcGxpZWQgKGFuZCBvdXQgb2YgcGxhbmUgb2YgdGhpcyBhbmQgdiksIGFuZ2xlIGlzIHNpZ25lZCArdmUgaWZcbiAqICAgICB0aGlzLT52IGlzIGNsb2Nrd2lzZSBsb29raW5nIGFsb25nIHZTaWduLCAtdmUgaW4gb3Bwb3NpdGUgZGlyZWN0aW9uIChvdGhlcndpc2UgdW5zaWduZWQgYW5nbGUpLlxuICogQHJldHVybnMge251bWJlcn0gQW5nbGUgKGluIHJhZGlhbnMpIGJldHdlZW4gdGhpcyB2ZWN0b3IgYW5kIHN1cHBsaWVkIHZlY3Rvci5cbiAqL1xuVmVjdG9yM2QucHJvdG90eXBlLmFuZ2xlVG8gPSBmdW5jdGlvbih2LCB2U2lnbikge1xuICAgIGlmICghKHYgaW5zdGFuY2VvZiBWZWN0b3IzZCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3YgaXMgbm90IFZlY3RvcjNkIG9iamVjdCcpO1xuXG4gICAgdmFyIHNpbs64ID0gdGhpcy5jcm9zcyh2KS5sZW5ndGgoKTtcbiAgICB2YXIgY29zzrggPSB0aGlzLmRvdCh2KTtcblxuICAgIGlmICh2U2lnbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghKHZTaWduIGluc3RhbmNlb2YgVmVjdG9yM2QpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCd2U2lnbiBpcyBub3QgVmVjdG9yM2Qgb2JqZWN0Jyk7XG4gICAgICAgIC8vIHVzZSB2U2lnbiBhcyByZWZlcmVuY2UgdG8gZ2V0IHNpZ24gb2Ygc2luzrhcbiAgICAgICAgc2luzrggPSB0aGlzLmNyb3NzKHYpLmRvdCh2U2lnbik8MCA/IC1zaW7OuCA6IHNpbs64O1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLmF0YW4yKHNpbs64LCBjb3POuCk7XG59O1xuXG5cbi8qKlxuICogUm90YXRlcyDigJh0aGlz4oCZIHBvaW50IGFyb3VuZCBhbiBheGlzIGJ5IGEgc3BlY2lmaWVkIGFuZ2xlLlxuICpcbiAqIEBwYXJhbSAgIHtWZWN0b3IzZH0gYXhpcyAtIFRoZSBheGlzIGJlaW5nIHJvdGF0ZWQgYXJvdW5kLlxuICogQHBhcmFtICAge251bWJlcn0gICB0aGV0YSAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiAoaW4gcmFkaWFucykuXG4gKiBAcmV0dXJucyB7VmVjdG9yM2R9IFRoZSByb3RhdGVkIHBvaW50LlxuICovXG5WZWN0b3IzZC5wcm90b3R5cGUucm90YXRlQXJvdW5kID0gZnVuY3Rpb24oYXhpcywgdGhldGEpIHtcbiAgICBpZiAoIShheGlzIGluc3RhbmNlb2YgVmVjdG9yM2QpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdheGlzIGlzIG5vdCBWZWN0b3IzZCBvYmplY3QnKTtcblxuICAgIC8vIGVuLndpa2lwZWRpYS5vcmcvd2lraS9Sb3RhdGlvbl9tYXRyaXgjUm90YXRpb25fbWF0cml4X2Zyb21fYXhpc19hbmRfYW5nbGVcbiAgICAvLyBlbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhdGVybmlvbnNfYW5kX3NwYXRpYWxfcm90YXRpb24jUXVhdGVybmlvbi1kZXJpdmVkX3JvdGF0aW9uX21hdHJpeFxuICAgIHZhciBwMSA9IHRoaXMudW5pdCgpO1xuICAgIHZhciBwID0gWyBwMS54LCBwMS55LCBwMS56IF07IC8vIHRoZSBwb2ludCBiZWluZyByb3RhdGVkXG4gICAgdmFyIGEgPSBheGlzLnVuaXQoKTsgICAgICAgICAgLy8gdGhlIGF4aXMgYmVpbmcgcm90YXRlZCBhcm91bmRcbiAgICB2YXIgcyA9IE1hdGguc2luKHRoZXRhKTtcbiAgICB2YXIgYyA9IE1hdGguY29zKHRoZXRhKTtcbiAgICAvLyBxdWF0ZXJuaW9uLWRlcml2ZWQgcm90YXRpb24gbWF0cml4XG4gICAgdmFyIHEgPSBbXG4gICAgICAgIFsgYS54KmEueCooMS1jKSArIGMsICAgICBhLngqYS55KigxLWMpIC0gYS56KnMsIGEueCphLnoqKDEtYykgKyBhLnkqc10sXG4gICAgICAgIFsgYS55KmEueCooMS1jKSArIGEueipzLCBhLnkqYS55KigxLWMpICsgYywgICAgIGEueSphLnoqKDEtYykgLSBhLngqc10sXG4gICAgICAgIFsgYS56KmEueCooMS1jKSAtIGEueSpzLCBhLnoqYS55KigxLWMpICsgYS54KnMsIGEueiphLnoqKDEtYykgKyBjICAgIF0sXG4gICAgXTtcbiAgICAvLyBtdWx0aXBseSBxIMOXIHBcbiAgICB2YXIgcXAgPSBbMCwgMCwgMF07XG4gICAgZm9yICh2YXIgaT0wOyBpPDM7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqPTA7IGo8MzsgaisrKSB7XG4gICAgICAgICAgICBxcFtpXSArPSBxW2ldW2pdICogcFtqXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcDIgPSBuZXcgVmVjdG9yM2QocXBbMF0sIHFwWzFdLCBxcFsyXSk7XG4gICAgcmV0dXJuIHAyO1xuICAgIC8vIHF2IGVuLndpa2lwZWRpYS5vcmcvd2lraS9Sb2RyaWd1ZXMnX3JvdGF0aW9uX2Zvcm11bGEuLi5cbn07XG5cblxuLyoqXG4gKiBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmVjdG9yLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtwcmVjaXNpb249M10gLSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gYmUgdXNlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFZlY3RvciByZXByZXNlbnRlZCBhcyBbeCx5LHpdLlxuICovXG5WZWN0b3IzZC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgcCA9IChwcmVjaXNpb24gPT09IHVuZGVmaW5lZCkgPyAzIDogTnVtYmVyKHByZWNpc2lvbik7XG5cbiAgICB2YXIgc3RyID0gJ1snICsgdGhpcy54LnRvRml4ZWQocCkgKyAnLCcgKyB0aGlzLnkudG9GaXhlZChwKSArICcsJyArIHRoaXMuei50b0ZpeGVkKHApICsgJ10nO1xuXG4gICAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gVmVjdG9yM2Q7IC8vIOKJoSBleHBvcnQgZGVmYXVsdCBWZWN0b3IzZFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2VvZGVzeS92ZWN0b3IzZC5qc1xuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmh1bWJfbGluZVxuLy8gaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLmh0bWwjcmh1bWJsaW5lc1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyk7XG52YXIgZ2V0Q29vcmQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKS5nZXRDb29yZDtcbnZhciBHZW9kZXN5TGF0TG9uID0gcmVxdWlyZSgnZ2VvZGVzeScpLkxhdExvblNwaGVyaWNhbDtcbnZhciByYWRpYW5zVG9EaXN0YW5jZSA9IGhlbHBlcnMucmFkaWFuc1RvRGlzdGFuY2U7XG52YXIgZGlzdGFuY2VUb1JhZGlhbnMgPSBoZWxwZXJzLmRpc3RhbmNlVG9SYWRpYW5zO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIGFsb25nIGEgcmh1bWIgbGluZSBiZXR3ZWVuIHR3byB7QGxpbmsgUG9pbnR8cG9pbnRzfSBpbiBkZWdyZWVzLCByYWRpYW5zLFxuICogbWlsZXMsIG9yIGtpbG9tZXRlcnMuXG4gKlxuICogQG5hbWUgcmh1bWJEaXN0YW5jZVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvaW50PnxBcnJheTxudW1iZXI+fSBmcm9tIG9yaWdpbiBwb2ludFxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvaW50PnxBcnJheTxudW1iZXI+fSB0byBkZXN0aW5hdGlvbiBwb2ludFxuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBwb2ludHNcbiAqIEBleGFtcGxlXG4gKiB2YXIgZnJvbSA9IHR1cmYucG9pbnQoWy03NS4zNDMsIDM5Ljk4NF0pO1xuICogdmFyIHRvID0gdHVyZi5wb2ludChbLTc1LjUzNCwgMzkuMTIzXSk7XG4gKlxuICogdmFyIGRpc3RhbmNlID0gdHVyZi5yaHVtYkRpc3RhbmNlKGZyb20sIHRvLCBcIm1pbGVzXCIpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtmcm9tLCB0b107XG4gKiBmcm9tLnByb3BlcnRpZXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAqIHRvLnByb3BlcnRpZXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHVuaXRzKSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghZnJvbSkgdGhyb3cgbmV3IEVycm9yKCdmcm9tIHBvaW50IGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCF0bykgdGhyb3cgbmV3IEVycm9yKCd0byBwb2ludCBpcyByZXF1aXJlZCcpO1xuXG4gICAgdW5pdHMgPSB1bml0cyB8fCAna2lsb21ldGVycyc7XG5cbiAgICB2YXIgY29vcmRzRnJvbSA9IGdldENvb3JkKGZyb20pO1xuICAgIHZhciBjb29yZHNUbyA9IGdldENvb3JkKHRvKTtcbiAgICB2YXIgb3JpZ2luID0gbmV3IEdlb2Rlc3lMYXRMb24oY29vcmRzRnJvbVsxXSwgY29vcmRzRnJvbVswXSk7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gbmV3IEdlb2Rlc3lMYXRMb24oY29vcmRzVG9bMV0sIGNvb3Jkc1RvWzBdKTtcblxuICAgIC8vIGNvbXBlbnNhdGUgdGhlIGNyb3NzaW5nIG9mIHRoZSAxODB0aCBtZXJpZGlhbiAoaHR0cHM6Ly9tYWN3cmlnaHQub3JnLzIwMTYvMDkvMjYvdGhlLTE4MHRoLW1lcmlkaWFuLmh0bWwpXG4gICAgLy8gc29sdXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvMzI1MCNpc3N1ZWNvbW1lbnQtMjk0ODg3Njc4XG4gICAgZGVzdGluYXRpb25bMF0gKz0gKGRlc3RpbmF0aW9uWzBdIC0gb3JpZ2luWzBdID4gMTgwKSA/IC0zNjAgOiAob3JpZ2luWzBdIC0gZGVzdGluYXRpb25bMF0gPiAxODApID8gMzYwIDogMDtcbiAgICB2YXIgZGlzdGFuY2VJbk1ldGVycyA9IG9yaWdpbi5yaHVtYkRpc3RhbmNlVG8oZGVzdGluYXRpb24pO1xuICAgIHZhciBkaXN0YW5jZSA9IHJhZGlhbnNUb0Rpc3RhbmNlKGRpc3RhbmNlVG9SYWRpYW5zKGRpc3RhbmNlSW5NZXRlcnMsICdtZXRlcnMnKSwgdW5pdHMpO1xuICAgIHJldHVybiBkaXN0YW5jZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9yaHVtYi1kaXN0YW5jZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBXcmFwcyBhIEdlb0pTT04ge0BsaW5rIEdlb21ldHJ5fSBpbiBhIEdlb0pTT04ge0BsaW5rIEZlYXR1cmV9LlxuICpcbiAqIEBuYW1lIGZlYXR1cmVcbiAqIEBwYXJhbSB7R2VvbWV0cnl9IGdlb21ldHJ5IGlucHV0IGdlb21ldHJ5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb259IGEgRmVhdHVyZUNvbGxlY3Rpb24gb2YgaW5wdXQgZmVhdHVyZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgZ2VvbWV0cnkgPSB7XG4gKiAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgIFwiY29vcmRpbmF0ZXNcIjogW1xuICogICAgICAgIDY3LjUsXG4gKiAgICAgICAgMzIuODQyNjczNjMxOTU0MzFcbiAqICAgICAgXVxuICogICAgfVxuICpcbiAqIHZhciBmZWF0dXJlID0gdHVyZi5mZWF0dXJlKGdlb21ldHJ5KTtcbiAqXG4gKiAvLz1mZWF0dXJlXG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmUoZ2VvbWV0cnksIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWdlb21ldHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlb21ldHJ5IHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnlcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMuZmVhdHVyZSA9IGZlYXR1cmU7XG5cbi8qKlxuICogVGFrZXMgY29vcmRpbmF0ZXMgYW5kIHByb3BlcnRpZXMgKG9wdGlvbmFsKSBhbmQgcmV0dXJucyBhIG5ldyB7QGxpbmsgUG9pbnR9IGZlYXR1cmUuXG4gKlxuICogQG5hbWUgcG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXMgbG9uZ2l0dWRlLCBsYXRpdHVkZSBwb3NpdGlvbiAoZWFjaCBpbiBkZWNpbWFsIGRlZ3JlZXMpXG4gKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXMgYW4gT2JqZWN0IHRoYXQgaXMgdXNlZCBhcyB0aGUge0BsaW5rIEZlYXR1cmV9J3NcbiAqIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvaW50Pn0gYSBQb2ludCBmZWF0dXJlXG4gKiBAZXhhbXBsZVxuICogdmFyIHB0MSA9IHR1cmYucG9pbnQoWy03NS4zNDMsIDM5Ljk4NF0pO1xuICpcbiAqIC8vPXB0MVxuICovXG5tb2R1bGUuZXhwb3J0cy5wb2ludCA9IGZ1bmN0aW9uIChjb29yZGluYXRlcywgcHJvcGVydGllcykge1xuICAgIGlmICghY29vcmRpbmF0ZXMpIHRocm93IG5ldyBFcnJvcignTm8gY29vcmRpbmF0ZXMgcGFzc2VkJyk7XG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ0Nvb3JkaW5hdGVzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoIDwgMikgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBtdXN0IGJlIGF0IGxlYXN0IDIgbnVtYmVycyBsb25nJyk7XG4gICAgaWYgKHR5cGVvZiBjb29yZGluYXRlc1swXSAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGNvb3JkaW5hdGVzWzFdICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBtdXN0IG51bWJlcnMnKTtcblxuICAgIHJldHVybiBmZWF0dXJlKHtcbiAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG4vKipcbiAqIFRha2VzIGFuIGFycmF5IG9mIExpbmVhclJpbmdzIGFuZCBvcHRpb25hbGx5IGFuIHtAbGluayBPYmplY3R9IHdpdGggcHJvcGVydGllcyBhbmQgcmV0dXJucyBhIHtAbGluayBQb2x5Z29ufSBmZWF0dXJlLlxuICpcbiAqIEBuYW1lIHBvbHlnb25cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBMaW5lYXJSaW5nc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGEgcHJvcGVydGllcyBvYmplY3RcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fSBhIFBvbHlnb24gZmVhdHVyZVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIGEgTGluZWFyUmluZyBvZiB0aGUgcG9seWdvbiBoYXMgdG9vIGZldyBwb3NpdGlvbnNcbiAqIG9yIGlmIGEgTGluZWFyUmluZyBvZiB0aGUgUG9seWdvbiBkb2VzIG5vdCBoYXZlIG1hdGNoaW5nIFBvc2l0aW9ucyBhdCB0aGVcbiAqIGJlZ2lubmluZyAmIGVuZC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1xuICogIFstMi4yNzU1NDMsIDUzLjQ2NDU0N10sXG4gKiAgWy0yLjI3NTU0MywgNTMuNDg5MjcxXSxcbiAqICBbLTIuMjE1MTE4LCA1My40ODkyNzFdLFxuICogIFstMi4yMTUxMTgsIDUzLjQ2NDU0N10sXG4gKiAgWy0yLjI3NTU0MywgNTMuNDY0NTQ3XVxuICogXV0sIHsgbmFtZTogJ3BvbHkxJywgcG9wdWxhdGlvbjogNDAwfSk7XG4gKlxuICogLy89cG9seWdvblxuICovXG5tb2R1bGUuZXhwb3J0cy5wb2x5Z29uID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCFjb29yZGluYXRlcykgdGhyb3cgbmV3IEVycm9yKCdObyBjb29yZGluYXRlcyBwYXNzZWQnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJpbmcgPSBjb29yZGluYXRlc1tpXTtcbiAgICAgICAgaWYgKHJpbmcubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFYWNoIExpbmVhclJpbmcgb2YgYSBQb2x5Z29uIG11c3QgaGF2ZSA0IG9yIG1vcmUgUG9zaXRpb25zLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmluZ1tyaW5nLmxlbmd0aCAtIDFdLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAocmluZ1tyaW5nLmxlbmd0aCAtIDFdW2pdICE9PSByaW5nWzBdW2pdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhbmQgbGFzdCBQb3NpdGlvbiBhcmUgbm90IGVxdWl2YWxlbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgTGluZVN0cmluZ30gYmFzZWQgb24gYVxuICogY29vcmRpbmF0ZSBhcnJheS4gUHJvcGVydGllcyBjYW4gYmUgYWRkZWQgb3B0aW9uYWxseS5cbiAqXG4gKiBAbmFtZSBsaW5lU3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBQb3NpdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllcyBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gYSBMaW5lU3RyaW5nIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmVzdHJpbmcxID0gdHVyZi5saW5lU3RyaW5nKFtcbiAqICAgWy0yMS45NjQ0MTYsIDY0LjE0ODIwM10sXG4gKiAgIFstMjEuOTU2MTc2LCA2NC4xNDEzMTZdLFxuICogICBbLTIxLjkzOTAxLCA2NC4xMzU5MjRdLFxuICogICBbLTIxLjkyNzMzNywgNjQuMTM2NjczXVxuICogXSk7XG4gKiB2YXIgbGluZXN0cmluZzIgPSB0dXJmLmxpbmVTdHJpbmcoW1xuICogICBbLTIxLjkyOTA1NCwgNjQuMTI3OTg1XSxcbiAqICAgWy0yMS45MTI5MTgsIDY0LjEzNDcyNl0sXG4gKiAgIFstMjEuOTE2MDA3LCA2NC4xNDEwMTZdLFxuICogICBbLTIxLjkzMDA4NCwgNjQuMTQ0NDZdXG4gKiBdLCB7bmFtZTogJ2xpbmUgMScsIGRpc3RhbmNlOiAxNDV9KTtcbiAqXG4gKiAvLz1saW5lc3RyaW5nMVxuICpcbiAqIC8vPWxpbmVzdHJpbmcyXG4gKi9cbm1vZHVsZS5leHBvcnRzLmxpbmVTdHJpbmcgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvb3JkaW5hdGVzIHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnTGluZVN0cmluZycsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgIH0sIHByb3BlcnRpZXMpO1xufTtcblxuLyoqXG4gKiBUYWtlcyBvbmUgb3IgbW9yZSB7QGxpbmsgRmVhdHVyZXxGZWF0dXJlc30gYW5kIGNyZWF0ZXMgYSB7QGxpbmsgRmVhdHVyZUNvbGxlY3Rpb259LlxuICpcbiAqIEBuYW1lIGZlYXR1cmVDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0ZlYXR1cmVbXX0gZmVhdHVyZXMgaW5wdXQgZmVhdHVyZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbn0gYSBGZWF0dXJlQ29sbGVjdGlvbiBvZiBpbnB1dCBmZWF0dXJlc1xuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IFtcbiAqICB0dXJmLnBvaW50KFstNzUuMzQzLCAzOS45ODRdLCB7bmFtZTogJ0xvY2F0aW9uIEEnfSksXG4gKiAgdHVyZi5wb2ludChbLTc1LjgzMywgMzkuMjg0XSwge25hbWU6ICdMb2NhdGlvbiBCJ30pLFxuICogIHR1cmYucG9pbnQoWy03NS41MzQsIDM5LjEyM10sIHtuYW1lOiAnTG9jYXRpb24gQyd9KVxuICogXTtcbiAqXG4gKiB2YXIgZmMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKGZlYXR1cmVzKTtcbiAqXG4gKiAvLz1mY1xuICovXG5tb2R1bGUuZXhwb3J0cy5mZWF0dXJlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIChmZWF0dXJlcykge1xuICAgIGlmICghZmVhdHVyZXMpIHRocm93IG5ldyBFcnJvcignTm8gZmVhdHVyZXMgcGFzc2VkJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgICBmZWF0dXJlczogZmVhdHVyZXNcbiAgICB9O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEZlYXR1cmU8TXVsdGlMaW5lU3RyaW5nPn0gYmFzZWQgb24gYVxuICogY29vcmRpbmF0ZSBhcnJheS4gUHJvcGVydGllcyBjYW4gYmUgYWRkZWQgb3B0aW9uYWxseS5cbiAqXG4gKiBAbmFtZSBtdWx0aUxpbmVTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBMaW5lU3RyaW5nc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPE11bHRpTGluZVN0cmluZz59IGEgTXVsdGlMaW5lU3RyaW5nIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpTGluZSA9IHR1cmYubXVsdGlMaW5lU3RyaW5nKFtbWzAsMF0sWzEwLDEwXV1dKTtcbiAqXG4gKiAvLz1tdWx0aUxpbmVcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzLm11bHRpTGluZVN0cmluZyA9IGZ1bmN0aW9uIChjb29yZGluYXRlcywgcHJvcGVydGllcykge1xuICAgIGlmICghY29vcmRpbmF0ZXMpIHRocm93IG5ldyBFcnJvcignTm8gY29vcmRpbmF0ZXMgcGFzc2VkJyk7XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdNdWx0aUxpbmVTdHJpbmcnLFxuICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICB9LCBwcm9wZXJ0aWVzKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBGZWF0dXJlPE11bHRpUG9pbnQ+fSBiYXNlZCBvbiBhXG4gKiBjb29yZGluYXRlIGFycmF5LiBQcm9wZXJ0aWVzIGNhbiBiZSBhZGRlZCBvcHRpb25hbGx5LlxuICpcbiAqIEBuYW1lIG11bHRpUG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkaW5hdGVzIGFuIGFycmF5IG9mIFBvc2l0aW9uc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPE11bHRpUG9pbnQ+fSBhIE11bHRpUG9pbnQgZmVhdHVyZVxuICogQHRocm93cyB7RXJyb3J9IGlmIG5vIGNvb3JkaW5hdGVzIGFyZSBwYXNzZWRcbiAqIEBleGFtcGxlXG4gKiB2YXIgbXVsdGlQdCA9IHR1cmYubXVsdGlQb2ludChbWzAsMF0sWzEwLDEwXV0pO1xuICpcbiAqIC8vPW11bHRpUHRcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzLm11bHRpUG9pbnQgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvb3JkaW5hdGVzIHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnTXVsdGlQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgIH0sIHByb3BlcnRpZXMpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgRmVhdHVyZTxNdWx0aVBvbHlnb24+fSBiYXNlZCBvbiBhXG4gKiBjb29yZGluYXRlIGFycmF5LiBQcm9wZXJ0aWVzIGNhbiBiZSBhZGRlZCBvcHRpb25hbGx5LlxuICpcbiAqIEBuYW1lIG11bHRpUG9seWdvblxuICogQHBhcmFtIHtBcnJheTxBcnJheTxBcnJheTxBcnJheTxudW1iZXI+Pj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBQb2x5Z29uc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPE11bHRpUG9seWdvbj59IGEgbXVsdGlwb2x5Z29uIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpUG9seSA9IHR1cmYubXVsdGlQb2x5Z29uKFtbW1swLDBdLFswLDEwXSxbMTAsMTBdLFsxMCwwXSxbMCwwXV1dXSk7XG4gKlxuICogLy89bXVsdGlQb2x5XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5tdWx0aVBvbHlnb24gPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvb3JkaW5hdGVzIHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnTXVsdGlQb2x5Z29uJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgRmVhdHVyZTxHZW9tZXRyeUNvbGxlY3Rpb24+fSBiYXNlZCBvbiBhXG4gKiBjb29yZGluYXRlIGFycmF5LiBQcm9wZXJ0aWVzIGNhbiBiZSBhZGRlZCBvcHRpb25hbGx5LlxuICpcbiAqIEBuYW1lIGdlb21ldHJ5Q29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheTx7R2VvbWV0cnl9Pn0gZ2VvbWV0cmllcyBhbiBhcnJheSBvZiBHZW9KU09OIEdlb21ldHJpZXNcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllcyBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxHZW9tZXRyeUNvbGxlY3Rpb24+fSBhIEdlb0pTT04gR2VvbWV0cnlDb2xsZWN0aW9uIEZlYXR1cmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgcHQgPSB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzEwMCwgMF1cbiAqICAgICB9O1xuICogdmFyIGxpbmUgPSB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiTGluZVN0cmluZ1wiLFxuICogICAgIFwiY29vcmRpbmF0ZXNcIjogWyBbMTAxLCAwXSwgWzEwMiwgMV0gXVxuICogICB9O1xuICogdmFyIGNvbGxlY3Rpb24gPSB0dXJmLmdlb21ldHJ5Q29sbGVjdGlvbihbcHQsIGxpbmVdKTtcbiAqXG4gKiAvLz1jb2xsZWN0aW9uXG4gKi9cbm1vZHVsZS5leHBvcnRzLmdlb21ldHJ5Q29sbGVjdGlvbiA9IGZ1bmN0aW9uIChnZW9tZXRyaWVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCFnZW9tZXRyaWVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlb21ldHJpZXMgcGFzc2VkJyk7XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdHZW9tZXRyeUNvbGxlY3Rpb24nLFxuICAgICAgICBnZW9tZXRyaWVzOiBnZW9tZXRyaWVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG52YXIgZmFjdG9ycyA9IHtcbiAgICBtaWxlczogMzk2MCxcbiAgICBuYXV0aWNhbG1pbGVzOiAzNDQxLjE0NSxcbiAgICBkZWdyZWVzOiA1Ny4yOTU3Nzk1LFxuICAgIHJhZGlhbnM6IDEsXG4gICAgaW5jaGVzOiAyNTA5MDU2MDAsXG4gICAgeWFyZHM6IDY5Njk2MDAsXG4gICAgbWV0ZXJzOiA2MzczMDAwLFxuICAgIG1ldHJlczogNjM3MzAwMCxcbiAgICBraWxvbWV0ZXJzOiA2MzczLFxuICAgIGtpbG9tZXRyZXM6IDYzNzMsXG4gICAgZmVldDogMjA5MDg3OTIuNjVcbn07XG5cbi8qXG4gKiBDb252ZXJ0IGEgZGlzdGFuY2UgbWVhc3VyZW1lbnQgZnJvbSByYWRpYW5zIHRvIGEgbW9yZSBmcmllbmRseSB1bml0LlxuICpcbiAqIEBuYW1lIHJhZGlhbnNUb0Rpc3RhbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgaW4gcmFkaWFucyBhY3Jvc3MgdGhlIHNwaGVyZVxuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnNcbiAqIGluY2hlcywgeWFyZHMsIG1ldHJlcywgbWV0ZXJzLCBraWxvbWV0cmVzLCBraWxvbWV0ZXJzLlxuICogQHJldHVybnMge251bWJlcn0gZGlzdGFuY2VcbiAqL1xubW9kdWxlLmV4cG9ydHMucmFkaWFuc1RvRGlzdGFuY2UgPSBmdW5jdGlvbiAocmFkaWFucywgdW5pdHMpIHtcbiAgICB2YXIgZmFjdG9yID0gZmFjdG9yc1t1bml0cyB8fCAna2lsb21ldGVycyddO1xuICAgIGlmIChmYWN0b3IgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQnKTtcblxuICAgIHJldHVybiByYWRpYW5zICogZmFjdG9yO1xufTtcblxuLypcbiAqIENvbnZlcnQgYSBkaXN0YW5jZSBtZWFzdXJlbWVudCBmcm9tIGEgcmVhbC13b3JsZCB1bml0IGludG8gcmFkaWFuc1xuICpcbiAqIEBuYW1lIGRpc3RhbmNlVG9SYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgaW4gcmVhbCB1bml0c1xuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnNcbiAqIGluY2hlcywgeWFyZHMsIG1ldHJlcywgbWV0ZXJzLCBraWxvbWV0cmVzLCBraWxvbWV0ZXJzLlxuICogQHJldHVybnMge251bWJlcn0gcmFkaWFuc1xuICovXG5tb2R1bGUuZXhwb3J0cy5kaXN0YW5jZVRvUmFkaWFucyA9IGZ1bmN0aW9uIChkaXN0YW5jZSwgdW5pdHMpIHtcbiAgICB2YXIgZmFjdG9yID0gZmFjdG9yc1t1bml0cyB8fCAna2lsb21ldGVycyddO1xuICAgIGlmIChmYWN0b3IgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQnKTtcblxuICAgIHJldHVybiBkaXN0YW5jZSAvIGZhY3Rvcjtcbn07XG5cbi8qXG4gKiBDb252ZXJ0IGEgZGlzdGFuY2UgbWVhc3VyZW1lbnQgZnJvbSBhIHJlYWwtd29ybGQgdW5pdCBpbnRvIGRlZ3JlZXNcbiAqXG4gKiBAbmFtZSBkaXN0YW5jZVRvUmFkaWFuc1xuICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIGluIHJlYWwgdW5pdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHM9a2lsb21ldGVyc10gY2FuIGJlIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBvciBraWxvbWV0ZXJzXG4gKiBpbmNoZXMsIHlhcmRzLCBtZXRyZXMsIG1ldGVycywga2lsb21ldHJlcywga2lsb21ldGVycy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRlZ3JlZXNcbiAqL1xubW9kdWxlLmV4cG9ydHMuZGlzdGFuY2VUb0RlZ3JlZXMgPSBmdW5jdGlvbiAoZGlzdGFuY2UsIHVuaXRzKSB7XG4gICAgdmFyIGZhY3RvciA9IGZhY3RvcnNbdW5pdHMgfHwgJ2tpbG9tZXRlcnMnXTtcbiAgICBpZiAoZmFjdG9yID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bml0Jyk7XG5cbiAgICByZXR1cm4gKGRpc3RhbmNlIC8gZmFjdG9yKSAqIDU3LjI5NTg7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvaXNvYmFuZHMvbm9kZV9tb2R1bGVzL0B0dXJmL2hlbHBlcnMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluc2lkZSA9IHJlcXVpcmUoJ0B0dXJmL2luc2lkZScpLFxuICAgIF9yZXF1aXJlID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLFxuICAgIHBvaW50ID0gX3JlcXVpcmUucG9pbnQ7XG5cbi8qKiBSZXR1cm5zIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHBvaW50IHEgcmVsYXRpdmUgdG8gdGhlIHZlY3RvciBwMSAtPiBwMi5cbiAqIEltcGxlbWVudGF0aW9uIG9mIGdlb3M6OmFsZ29yaXRobTo6Q0dBbGdvcml0aG06Om9yaWVudGF0aW9uSW5kZXgoKVxuICogKHNhbWUgYXMgZ2Vvczo6YWxnb3JpdGhtOjpDR0FsZ29yaXRobTo6Y29tcHV0ZU9yaWVudGF0aW9uKCkpXG4gKlxuICogQHBhcmFtIHtOdW1iZXJbXX0gcDEgLSB0aGUgb3JpZ2luIHBvaW50IG9mIHRoZSB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyW119IHAyIC0gdGhlIGZpbmFsIHBvaW50IG9mIHRoZSB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyW119IHEgLSB0aGUgcG9pbnQgdG8gY29tcHV0ZSB0aGUgZGlyZWN0aW9uIHRvXG4gKlxuICogQHJldHVybnMge051bWJlcn0gLSAxIGlmIHEgaXMgY2N3IChsZWZ0KSBmcm9tIHAxLT5wMixcbiAqICAgIC0xIGlmIHEgaXMgY3cgKHJpZ2h0KSBmcm9tIHAxLT5wMixcbiAqICAgICAwIGlmIHEgaXMgY29saW5lYXIgd2l0aCBwMS0+cDJcbiAqL1xuZnVuY3Rpb24gb3JpZW50YXRpb25JbmRleChwMSwgcDIsIHEpIHtcbiAgdmFyIGR4MSA9IHAyWzBdIC0gcDFbMF0sXG4gICAgICBkeTEgPSBwMlsxXSAtIHAxWzFdLFxuICAgICAgZHgyID0gcVswXSAtIHAyWzBdLFxuICAgICAgZHkyID0gcVsxXSAtIHAyWzFdO1xuXG4gIHJldHVybiBNYXRoLnNpZ24oZHgxICogZHkyIC0gZHgyICogZHkxKTtcbn1cblxuLyoqIENoZWNrcyBpZiB0d28gZW52ZWxvcGVzIGFyZSBlcXVhbC5cbiAqIFRoZSBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgdGhlIGFyZ3VtZW50cyBhcmUgZW52ZWxvcGVzLCBpLmUuOiBSZWN0YW5ndWxhciBwb2x5Z29uXG4gKlxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb24+fSBlbnYxIC0gRW52ZWxvcGVcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29uPn0gZW52MiAtIEVudmVsb3BlXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBUcnVlIGlmIHRoZSBlbnZlbG9wZXMgYXJlIGVxdWFsXG4gKi9cbmZ1bmN0aW9uIGVudmVsb3BlSXNFcXVhbChlbnYxLCBlbnYyKSB7XG4gIHZhciBlbnZYMSA9IGVudjEuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGNbMF07XG4gIH0pLFxuICAgICAgZW52WTEgPSBlbnYxLmdlb21ldHJ5LmNvb3JkaW5hdGVzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjWzFdO1xuICB9KSxcbiAgICAgIGVudlgyID0gZW52Mi5nZW9tZXRyeS5jb29yZGluYXRlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gY1swXTtcbiAgfSksXG4gICAgICBlbnZZMiA9IGVudjIuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGNbMV07XG4gIH0pO1xuXG4gIHJldHVybiBNYXRoLm1heChudWxsLCBlbnZYMSkgPT09IE1hdGgubWF4KG51bGwsIGVudlgyKSAmJiBNYXRoLm1heChudWxsLCBlbnZZMSkgPT09IE1hdGgubWF4KG51bGwsIGVudlkyKSAmJiBNYXRoLm1pbihudWxsLCBlbnZYMSkgPT09IE1hdGgubWluKG51bGwsIGVudlgyKSAmJiBNYXRoLm1pbihudWxsLCBlbnZZMSkgPT09IE1hdGgubWluKG51bGwsIGVudlkyKTtcbn1cblxuLyoqIENoZWNrIGlmIGEgZW52ZWxvcGUgaXMgY29udGFpbmVkIGluIG90aGVyIG9uZS5cbiAqIFRoZSBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgdGhlIGFyZ3VtZW50cyBhcmUgZW52ZWxvcGVzLCBpLmUuOiBDb252ZXggcG9seWdvblxuICogWFhYOiBFbnZlbG9wZXMgYXJlIHJlY3Rhbmd1bGFyLCBjaGVja2luZyBpZiBhIHBvaW50IGlzIGluc2lkZSBhIHJlY3Rhbmd1bGUgaXMgc29tZXRoaW5nIGVhc3ksXG4gKiB0aGlzIGNvdWxkIGJlIGZ1cnRoZXIgaW1wcm92ZWQuXG4gKlxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb24+fSBzZWxmIC0gRW52ZWxvcGVcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29uPn0gZW52IC0gRW52ZWxvcGVcbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIFRydWUgaWYgZW52IGlzIGNvbnRhaW5lZCBpbiBzZWxmXG4gKi9cbmZ1bmN0aW9uIGVudmVsb3BlQ29udGFpbnMoc2VsZiwgZW52KSB7XG4gIHJldHVybiBlbnYuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0uZXZlcnkoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gaW5zaWRlKHBvaW50KGMpLCBzZWxmKTtcbiAgfSk7XG59XG5cbi8qKiBDaGVja3MgaWYgdHdvIGNvb3JkaW5hdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcltdfSBjb29yZDEgLSBGaXJzdCBjb29yZGluYXRlXG4gKiBAcGFyYW0ge051bWJlcltdfSBjb29yZDIgLSBTZWNvbmQgY29vcmRpbmF0ZVxuICogQHJldHVybnMge0Jvb2xlYW59IC0gVHJ1ZSBpZiBjb29yZGluYXRlcyBhcmUgZXF1YWxcbiAqL1xuZnVuY3Rpb24gY29vcmRpbmF0ZXNFcXVhbChjb29yZDEsIGNvb3JkMikge1xuICByZXR1cm4gY29vcmQxWzBdID09PSBjb29yZDJbMF0gJiYgY29vcmQxWzFdID09PSBjb29yZDJbMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvcmllbnRhdGlvbkluZGV4OiBvcmllbnRhdGlvbkluZGV4LFxuICBlbnZlbG9wZUlzRXF1YWw6IGVudmVsb3BlSXNFcXVhbCxcbiAgZW52ZWxvcGVDb250YWluczogZW52ZWxvcGVDb250YWlucyxcbiAgY29vcmRpbmF0ZXNFcXVhbDogY29vcmRpbmF0ZXNFcXVhbFxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wb2x5Z29uaXplL2Rpc3QvdXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpO1xudmFyIGdldENvb3JkcyA9IGludmFyaWFudC5nZXRDb29yZHM7XG52YXIgZmVhdHVyZUVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuZmVhdHVyZUVhY2g7XG5cbi8qKlxuICogVGFrZXMgYSB7QGxpbmsgUG9pbnR9IGdyaWQgYW5kIHJldHVybnMgYSBjb3JyZXNwb25kZW50IG1hdHJpeCB7QXJyYXk8QXJyYXk8bnVtYmVyPj59XG4gKiBvZiB0aGUgJ3Byb3BlcnR5JyB2YWx1ZXNcbiAqXG4gKiBAbmFtZSBncmlkVG9NYXRyaXhcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBncmlkIG9mIHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wZXJ0eT0nZWxldmF0aW9uJ10gdGhlIHByb3BlcnR5IG5hbWUgaW4gYHBvaW50c2AgZnJvbSB3aGljaCB6LXZhbHVlcyB3aWxsIGJlIHB1bGxlZFxuICogQHBhcmFtIHtib29sZWFufSBbZmxpcD1mYWxzZV0gcmV0dXJucyB0aGUgbWF0cml4IHVwc2lkZS1kb3duXG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG1hdHJpeCBvZiBwcm9wZXJ0eSB2YWx1ZXNcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBwb2ludEdyaWQgPSByZXF1aXJlKCdAdHVyZi9wb2ludC1ncmlkJyk7XG4gKiAgIHZhciBleHRlbnQgPSBbLTcwLjgyMzM2NCwgLTMzLjU1Mzk4NCwgLTcwLjQ3MzE3NSwgLTMzLjMwMjk4Nl07XG4gKiAgIHZhciBjZWxsU2l6ZSA9IDM7XG4gKiAgIHZhciBncmlkID0gcG9pbnRHcmlkKGV4dGVudCwgY2VsbFNpemUpO1xuICogICAvLyBhZGQgYSByYW5kb20gcHJvcGVydHkgdG8gZWFjaCBwb2ludCBiZXR3ZWVuIDAgYW5kIDYwXG4gKiAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JpZC5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICogICAgIGdyaWQuZmVhdHVyZXNbaV0ucHJvcGVydGllcy5lbGV2YXRpb24gPSAoTWF0aC5yYW5kb20oKSAqIDYwKTtcbiAqICAgfVxuICogICBncmlkVG9NYXRyaXgoZ3JpZCk7XG4gKiAgIC8vPSBbXG4gKiAgICAgWyAxLCAxMywgMTAsICA5LCAxMCwgMTMsIDE4XSxcbiAqICAgICBbMzQsICA4LCAgNSwgIDQsICA1LCAgOCwgMTNdLFxuICogICAgIFsxMCwgIDUsICAyLCAgMSwgIDIsICA1LCAgNF0sXG4gKiAgICAgWyAwLCAgNCwgNTYsIDE5LCAgMSwgIDQsICA5XSxcbiAqICAgICBbMTAsICA1LCAgMiwgIDEsICAyLCAgNSwgMTBdLFxuICogICAgIFs1NywgIDgsICA1LCAgNCwgIDUsICAwLCA1N10sXG4gKiAgICAgWyAzLCAxMywgMTAsICA5LCAgNSwgMTMsIDE4XSxcbiAqICAgICBbMTgsIDEzLCAxMCwgIDksIDc4LCAxMywgMThdXG4gKiAgIF1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ3JpZCwgcHJvcGVydHksIGZsaXApIHtcbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaW52YXJpYW50LmNvbGxlY3Rpb25PZihncmlkLCAnUG9pbnQnLCAnaW5wdXQgbXVzdCBjb250YWluIFBvaW50cycpO1xuICAgIHByb3BlcnR5ID0gcHJvcGVydHkgfHwgJ2VsZXZhdGlvbic7XG5cbiAgICB2YXIgcG9pbnRzTWF0cml4ID0gc29ydFBvaW50c0J5TGF0TG5nKGdyaWQsIGZsaXApO1xuXG4gICAgdmFyIG1hdHJpeCA9IFtdO1xuXG4gICAgLy8gY3JlYXRlIHByb3BlcnR5IG1hdHJpeCBmcm9tIHNvcnRlZCBwb2ludHNcbiAgICAvLyBsb29waW5nIG9yZGVyIG1hdHRlcnMgaGVyZVxuICAgIGZvciAodmFyIHIgPSAwOyByIDwgcG9pbnRzTWF0cml4Lmxlbmd0aDsgcisrKSB7XG4gICAgICAgIHZhciBwb2ludFJvdyA9IHBvaW50c01hdHJpeFtyXTtcbiAgICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHBvaW50Um93Lmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBwb2ludFJvd1tjXTtcbiAgICAgICAgICAgIC8vIHByb3BlcnR5IGV4aXN0XG4gICAgICAgICAgICBpZiAocG9pbnQucHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICByb3cucHVzaChwb2ludC5wcm9wZXJ0aWVzW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvdy5wdXNoKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1hdHJpeC5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdHJpeDtcbn07XG5cbi8qKlxuICogU29ydHMgcG9pbnRzIGJ5IGxhdGl0dWRlIGFuZCBsb25naXR1ZGUsIGNyZWF0aW5nIGEgMi1kaW1lbnNpb25hbCBhcnJheSBvZiBwb2ludHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IHBvaW50cyBHZW9KU09OIFBvaW50IGZlYXR1cmVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmbGlwPWZhbHNlXSByZXR1cm5zIHRoZSBtYXRyaXggdXBzaWRlLWRvd25cbiAqIEByZXR1cm5zIHtBcnJheTxBcnJheTxQb2ludD4+fSBwb2ludHMgYnkgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZVxuICovXG5mdW5jdGlvbiBzb3J0UG9pbnRzQnlMYXRMbmcocG9pbnRzLCBmbGlwKSB7XG4gICAgdmFyIHBvaW50c0J5TGF0aXR1ZGUgPSB7fTtcblxuICAgIC8vIGRpdmlkZSBwb2ludHMgYnkgcm93cyB3aXRoIHRoZSBzYW1lIGxhdGl0dWRlXG4gICAgZmVhdHVyZUVhY2gocG9pbnRzLCBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgdmFyIGxhdCA9IGdldENvb3Jkcyhwb2ludClbMV07XG4gICAgICAgIGlmICghcG9pbnRzQnlMYXRpdHVkZVtsYXRdKSB7IHBvaW50c0J5TGF0aXR1ZGVbbGF0XSA9IFtdOyB9XG4gICAgICAgIHBvaW50c0J5TGF0aXR1ZGVbbGF0XS5wdXNoKHBvaW50KTtcbiAgICB9KTtcblxuICAgIC8vIHNvcnQgcG9pbnRzICh3aXRoIHRoZSBzYW1lIGxhdGl0dWRlKSBieSBsb25naXR1ZGVcbiAgICB2YXIgb3JkZXJlZFJvd3NCeUxhdGl0dWRlID0gT2JqZWN0LmtleXMocG9pbnRzQnlMYXRpdHVkZSkubWFwKGZ1bmN0aW9uIChsYXQpIHtcbiAgICAgICAgdmFyIHJvdyA9IHBvaW50c0J5TGF0aXR1ZGVbbGF0XTtcbiAgICAgICAgdmFyIHJvd09yZGVyZWRCeUxvbmdpdHVkZSA9IHJvdy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29vcmRzKGEpWzBdIC0gZ2V0Q29vcmRzKGIpWzBdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJvd09yZGVyZWRCeUxvbmdpdHVkZTtcbiAgICB9KTtcblxuICAgIC8vIHNvcnQgcm93cyAob2YgcG9pbnRzIHdpdGggdGhlIHNhbWUgbGF0aXR1ZGUpIGJ5IGxhdGl0dWRlXG4gICAgdmFyIHBvaW50TWF0cml4ID0gb3JkZXJlZFJvd3NCeUxhdGl0dWRlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgaWYgKGZsaXApIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRDb29yZHMoYVswXSlbMV0gLSBnZXRDb29yZHMoYlswXSlbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29vcmRzKGJbMF0pWzFdIC0gZ2V0Q29vcmRzKGFbMF0pWzFdO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBvaW50TWF0cml4O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JpZC10by1tYXRyaXgvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIVxuKiBAbGljZW5zZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UuXG4qIENvcHlyaWdodCAoYykgMjAxNSwgMjAxNSBSb25ueSBMb3JlbnogPHJvbm55QHRiaS51bml2aWUuYWMuYXQ+XG4qIHYuIDEuMi4wXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9SYXVtWmVpdC9NYXJjaGluZ1NxdWFyZXMuanNcbiovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoWycuL21hcmNoaW5nc3F1YXJlcy1pc29iYW5kcycsICcuL21hcmNoaW5nc3F1YXJlcy1pc29jb250b3VycyddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnLi9tYXJjaGluZ3NxdWFyZXMtaXNvYmFuZHMnKSxyZXF1aXJlKCcuL21hcmNoaW5nc3F1YXJlcy1pc29jb250b3VycycpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290Lk1hcmNoaW5nU3F1YXJlc0pTID0gZmFjdG9yeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyb290Lk1hcmNoaW5nU3F1YXJlc0pTKSA/IHJvb3QuTWFyY2hpbmdTcXVhcmVzSlMuaXNvQmFuZHMgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJvb3QuTWFyY2hpbmdTcXVhcmVzSlMpID8gcm9vdC5NYXJjaGluZ1NxdWFyZXNKUy5pc29Db250b3VycyA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKGlzb0JhbmRzLCBpc29Db250b3Vycykge1xuICByZXR1cm4ge1xuICAgICAgaXNvQmFuZHMgOiAodHlwZW9mIGlzb0JhbmRzID09PSAnZnVuY3Rpb24nKSA/IGlzb0JhbmRzIDogKCgodHlwZW9mIGlzb0JhbmRzID09PSAnb2JqZWN0JykgJiYgKHR5cGVvZiBpc29CYW5kcy5pc29CYW5kcyA9PT0gJ2Z1bmN0aW9uJykpID8gaXNvQmFuZHMuaXNvQmFuZHMgOiBudWxsKSxcbiAgICAgIGlzb0NvbnRvdXJzOiAodHlwZW9mIGlzb0NvbnRvdXJzID09PSAnZnVuY3Rpb24nKSA/IGlzb0NvbnRvdXJzIDogKCgodHlwZW9mIGlzb0NvbnRvdXJzID09PSAnb2JqZWN0JykgJiYgKHR5cGVvZiBpc29Db250b3Vycy5pc29Db250b3VycyA9PT0gJ2Z1bmN0aW9uJykpID8gaXNvQ29udG91cnMuaXNvQ29udG91cnMgOiBudWxsKVxuICB9O1xufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbWFyY2hpbmdzcXVhcmVzL21hcmNoaW5nc3F1YXJlcy5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuY29vcmRFYWNoLFxuICAgIGNvbnZleEh1bGwgPSByZXF1aXJlKCdjb252ZXgtaHVsbCcpLFxuICAgIHBvbHlnb24gPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykucG9seWdvbjtcblxuLyoqXG4gKiBUYWtlcyBhIHtAbGluayBGZWF0dXJlfSBvciBhIHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0gYW5kIHJldHVybnMgYSBjb252ZXggaHVsbCB7QGxpbmsgUG9seWdvbn0uXG4gKlxuICogSW50ZXJuYWxseSB0aGlzIHVzZXNcbiAqIHRoZSBbY29udmV4LWh1bGxdKGh0dHBzOi8vZ2l0aHViLmNvbS9taWtvbGFseXNlbmtvL2NvbnZleC1odWxsKSBtb2R1bGUgdGhhdFxuICogaW1wbGVtZW50cyBhIFttb25vdG9uZSBjaGFpbiBodWxsXShodHRwOi8vZW4ud2lraWJvb2tzLm9yZy93aWtpL0FsZ29yaXRobV9JbXBsZW1lbnRhdGlvbi9HZW9tZXRyeS9Db252ZXhfaHVsbC9Nb25vdG9uZV9jaGFpbikuXG4gKlxuICogQG5hbWUgY29udmV4XG4gKiBAcGFyYW0ge0ZlYXR1cmV8RmVhdHVyZUNvbGxlY3Rpb259IGZlYXR1cmUgaW5wdXQgRmVhdHVyZSBvciBGZWF0dXJlQ29sbGVjdGlvblxuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbj59IGEgY29udmV4IGh1bGxcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnRzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbXG4gKiAgIHR1cmYucG9pbnQoWzEwLjE5NTMxMiwgNDMuNzU1MjI1XSksXG4gKiAgIHR1cmYucG9pbnQoWzEwLjQwNDA1MiwgNDMuODQyNDUxMV0pLFxuICogICB0dXJmLnBvaW50KFsxMC41Nzk4MzMsIDQzLjY1OTkyNF0pLFxuICogICB0dXJmLnBvaW50KFsxMC4zNjAxMDcsIDQzLjUxNjY4OF0pLFxuICogICB0dXJmLnBvaW50KFsxMC4xNDAzOCwgNDMuNTg4MzQ4XSksXG4gKiAgIHR1cmYucG9pbnQoWzEwLjE5NTMxMiwgNDMuNzU1MjI1XSlcbiAqIF0pO1xuICpcbiAqIHZhciBodWxsID0gdHVyZi5jb252ZXgocG9pbnRzKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9pbnRzLCBodWxsXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgdmFyIHBvaW50cyA9IFtdO1xuXG4gICAgLy8gUmVtb3ZlIFogaW4gY29vcmRpbmF0ZXMgYmVjYXVzZSBpdCBicmVha3MgdGhlIGNvbnZleEh1bGwgYWxnb3JpdGhtXG4gICAgZWFjaChmZWF0dXJlLCBmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgcG9pbnRzLnB1c2goW2Nvb3JkWzBdLCBjb29yZFsxXV0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGh1bGwgPSBjb252ZXhIdWxsKHBvaW50cyk7XG5cbiAgICAvLyBIdWxsIHNob3VsZCBoYXZlIGF0IGxlYXN0IDMgZGlmZmVyZW50IHZlcnRpY2VzIGluIG9yZGVyIHRvIGNyZWF0ZSBhIHZhbGlkIHBvbHlnb25cbiAgICBpZiAoaHVsbC5sZW5ndGggPj0gMykge1xuICAgICAgICB2YXIgcmluZyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGh1bGwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJpbmcucHVzaChwb2ludHNbaHVsbFtpXVswXV0pO1xuICAgICAgICB9XG4gICAgICAgIHJpbmcucHVzaChwb2ludHNbaHVsbFtodWxsLmxlbmd0aCAtIDFdWzFdXSk7XG4gICAgICAgIHJldHVybiBwb2x5Z29uKFtyaW5nXSk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvY29udmV4L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IHR3b1Byb2R1Y3RcblxudmFyIFNQTElUVEVSID0gKyhNYXRoLnBvdygyLCAyNykgKyAxLjApXG5cbmZ1bmN0aW9uIHR3b1Byb2R1Y3QoYSwgYiwgcmVzdWx0KSB7XG4gIHZhciB4ID0gYSAqIGJcblxuICB2YXIgYyA9IFNQTElUVEVSICogYVxuICB2YXIgYWJpZyA9IGMgLSBhXG4gIHZhciBhaGkgPSBjIC0gYWJpZ1xuICB2YXIgYWxvID0gYSAtIGFoaVxuXG4gIHZhciBkID0gU1BMSVRURVIgKiBiXG4gIHZhciBiYmlnID0gZCAtIGJcbiAgdmFyIGJoaSA9IGQgLSBiYmlnXG4gIHZhciBibG8gPSBiIC0gYmhpXG5cbiAgdmFyIGVycjEgPSB4IC0gKGFoaSAqIGJoaSlcbiAgdmFyIGVycjIgPSBlcnIxIC0gKGFsbyAqIGJoaSlcbiAgdmFyIGVycjMgPSBlcnIyIC0gKGFoaSAqIGJsbylcblxuICB2YXIgeSA9IGFsbyAqIGJsbyAtIGVycjNcblxuICBpZihyZXN1bHQpIHtcbiAgICByZXN1bHRbMF0gPSB5XG4gICAgcmVzdWx0WzFdID0geFxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJldHVybiBbIHksIHggXVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3by1wcm9kdWN0L3R3by1wcm9kdWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvL2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVsYXVuYXlfdHJpYW5ndWxhdGlvblxuLy9odHRwczovL2dpdGh1Yi5jb20vaXJvbndhbGxhYnkvZGVsYXVuYXlcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIHBvbHlnb24gPSBoZWxwZXJzLnBvbHlnb247XG52YXIgZmVhdHVyZWNvbGxlY3Rpb24gPSBoZWxwZXJzLmZlYXR1cmVDb2xsZWN0aW9uO1xuXG4vKipcbiAqIFRha2VzIGEgc2V0IG9mIHtAbGluayBQb2ludHxwb2ludHN9IGFuZCBjcmVhdGVzIGFcbiAqIFtUcmlhbmd1bGF0ZWQgSXJyZWd1bGFyIE5ldHdvcmtdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJpYW5ndWxhdGVkX2lycmVndWxhcl9uZXR3b3JrKSxcbiAqIG9yIGEgVElOIGZvciBzaG9ydCwgcmV0dXJuZWQgYXMgYSBjb2xsZWN0aW9uIG9mIFBvbHlnb25zLiBUaGVzZSBhcmUgb2Z0ZW4gdXNlZFxuICogZm9yIGRldmVsb3BpbmcgZWxldmF0aW9uIGNvbnRvdXIgbWFwcyBvciBzdGVwcGVkIGhlYXQgdmlzdWFsaXphdGlvbnMuXG4gKlxuICogSWYgYW4gb3B0aW9uYWwgei12YWx1ZSBwcm9wZXJ0eSBpcyBwcm92aWRlZCB0aGVuIGl0IGlzIGFkZGVkIGFzIHByb3BlcnRpZXMgY2FsbGVkIGBhYCwgYGJgLFxuICogYW5kIGBjYCByZXByZXNlbnRpbmcgaXRzIHZhbHVlIGF0IGVhY2ggb2YgdGhlIHBvaW50cyB0aGF0IHJlcHJlc2VudCB0aGUgY29ybmVycyBvZiB0aGVcbiAqIHRyaWFuZ2xlLlxuICpcbiAqIEBuYW1lIHRpblxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IHBvaW50cyBpbnB1dCBwb2ludHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbel0gbmFtZSBvZiB0aGUgcHJvcGVydHkgZnJvbSB3aGljaCB0byBwdWxsIHogdmFsdWVzXG4gKiBUaGlzIGlzIG9wdGlvbmFsOiBpZiBub3QgZ2l2ZW4sIHRoZW4gdGhlcmUgd2lsbCBiZSBubyBleHRyYSBkYXRhIGFkZGVkIHRvIHRoZSBkZXJpdmVkIHRyaWFuZ2xlcy5cbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2x5Z29uPn0gVElOIG91dHB1dFxuICogQGV4YW1wbGVcbiAqIC8vIGdlbmVyYXRlIHNvbWUgcmFuZG9tIHBvaW50IGRhdGFcbiAqIHZhciBwb2ludHMgPSB0dXJmLnJhbmRvbSgncG9pbnRzJywgMzAsIHtcbiAqICAgYmJveDogWzUwLCAzMCwgNzAsIDUwXVxuICogfSk7XG4gKiAvLyBhZGQgYSByYW5kb20gcHJvcGVydHkgdG8gZWFjaCBwb2ludCBiZXR3ZWVuIDAgYW5kIDlcbiAqIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gKiAgIHBvaW50cy5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzLnogPSB+fihNYXRoLnJhbmRvbSgpICogOSk7XG4gKiB9XG4gKiB2YXIgdGluID0gdHVyZi50aW4ocG9pbnRzLCAneicpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFt0aW4sIHBvaW50c11cbiAqIGZvciAodmFyIGkgPSAwOyBpIDwgdGluLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gKiAgIHZhciBwcm9wZXJ0aWVzICA9IHRpbi5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzO1xuICogICBwcm9wZXJ0aWVzLmZpbGwgPSAnIycgKyBwcm9wZXJ0aWVzLmEgKyBwcm9wZXJ0aWVzLmIgKyBwcm9wZXJ0aWVzLmM7XG4gKiB9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvaW50cywgeikge1xuICAgIGlmIChwb2ludHMudHlwZSAhPT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdwb2ludHMgbXVzdCBiZSBhIEZlYXR1cmVDb2xsZWN0aW9uJyk7XG4gICAgLy9icmVhayBkb3duIHBvaW50c1xuICAgIHZhciBpc1BvaW50WiA9IGZhbHNlO1xuICAgIHJldHVybiBmZWF0dXJlY29sbGVjdGlvbih0cmlhbmd1bGF0ZShwb2ludHMuZmVhdHVyZXMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgICAgIHg6IHAuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgICB5OiBwLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdXG4gICAgICAgIH07XG4gICAgICAgIGlmICh6KSB7XG4gICAgICAgICAgICBwb2ludC56ID0gcC5wcm9wZXJ0aWVzW3pdO1xuICAgICAgICB9IGVsc2UgaWYgKHAuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICBpc1BvaW50WiA9IHRydWU7XG4gICAgICAgICAgICBwb2ludC56ID0gcC5nZW9tZXRyeS5jb29yZGluYXRlc1syXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfSkpLm1hcChmdW5jdGlvbiAodHJpYW5nbGUpIHtcblxuICAgICAgICB2YXIgYSA9IFt0cmlhbmdsZS5hLngsIHRyaWFuZ2xlLmEueV07XG4gICAgICAgIHZhciBiID0gW3RyaWFuZ2xlLmIueCwgdHJpYW5nbGUuYi55XTtcbiAgICAgICAgdmFyIGMgPSBbdHJpYW5nbGUuYy54LCB0cmlhbmdsZS5jLnldO1xuICAgICAgICB2YXIgcHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgIC8vIEFkZCB6IGNvb3JkaW5hdGVzIHRvIHRyaWFuZ2xlIHBvaW50cyBpZiB1c2VyIHBhc3NlZFxuICAgICAgICAvLyB0aGVtIGluIHRoYXQgd2F5IG90aGVyd2lzZSBhZGQgaXQgYXMgYSBwcm9wZXJ0eS5cbiAgICAgICAgaWYgKGlzUG9pbnRaKSB7XG4gICAgICAgICAgICBhLnB1c2godHJpYW5nbGUuYS56KTtcbiAgICAgICAgICAgIGIucHVzaCh0cmlhbmdsZS5iLnopO1xuICAgICAgICAgICAgYy5wdXNoKHRyaWFuZ2xlLmMueik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIGE6IHRyaWFuZ2xlLmEueixcbiAgICAgICAgICAgICAgICBiOiB0cmlhbmdsZS5iLnosXG4gICAgICAgICAgICAgICAgYzogdHJpYW5nbGUuYy56XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvbHlnb24oW1thLCBiLCBjLCBhXV0sIHByb3BlcnRpZXMpO1xuXG4gICAgfSkpO1xufTtcblxuZnVuY3Rpb24gVHJpYW5nbGUoYSwgYiwgYykge1xuICAgIHRoaXMuYSA9IGE7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmMgPSBjO1xuXG4gICAgdmFyIEEgPSBiLnggLSBhLngsXG4gICAgICAgIEIgPSBiLnkgLSBhLnksXG4gICAgICAgIEMgPSBjLnggLSBhLngsXG4gICAgICAgIEQgPSBjLnkgLSBhLnksXG4gICAgICAgIEUgPSBBICogKGEueCArIGIueCkgKyBCICogKGEueSArIGIueSksXG4gICAgICAgIEYgPSBDICogKGEueCArIGMueCkgKyBEICogKGEueSArIGMueSksXG4gICAgICAgIEcgPSAyICogKEEgKiAoYy55IC0gYi55KSAtIEIgKiAoYy54IC0gYi54KSksXG4gICAgICAgIGR4LCBkeTtcblxuICAgIC8vIElmIHRoZSBwb2ludHMgb2YgdGhlIHRyaWFuZ2xlIGFyZSBjb2xsaW5lYXIsIHRoZW4ganVzdCBmaW5kIHRoZVxuICAgIC8vIGV4dHJlbWVzIGFuZCB1c2UgdGhlIG1pZHBvaW50IGFzIHRoZSBjZW50ZXIgb2YgdGhlIGNpcmN1bWNpcmNsZS5cbiAgICB0aGlzLnggPSAoRCAqIEUgLSBCICogRikgLyBHO1xuICAgIHRoaXMueSA9IChBICogRiAtIEMgKiBFKSAvIEc7XG4gICAgZHggPSB0aGlzLnggLSBhLng7XG4gICAgZHkgPSB0aGlzLnkgLSBhLnk7XG4gICAgdGhpcy5yID0gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGJ5WChhLCBiKSB7XG4gICAgcmV0dXJuIGIueCAtIGEueDtcbn1cblxuZnVuY3Rpb24gZGVkdXAoZWRnZXMpIHtcbiAgICB2YXIgaiA9IGVkZ2VzLmxlbmd0aCxcbiAgICAgICAgYSwgYiwgaSwgbSwgbjtcblxuICAgIG91dGVyOlxuICB3aGlsZSAoaikge1xuICAgICAgYiA9IGVkZ2VzWy0tal07XG4gICAgICBhID0gZWRnZXNbLS1qXTtcbiAgICAgIGkgPSBqO1xuICAgICAgd2hpbGUgKGkpIHtcbiAgICAgICAgICBuID0gZWRnZXNbLS1pXTtcbiAgICAgICAgICBtID0gZWRnZXNbLS1pXTtcbiAgICAgICAgICBpZiAoKGEgPT09IG0gJiYgYiA9PT0gbikgfHwgKGEgPT09IG4gJiYgYiA9PT0gbSkpIHtcbiAgICAgICAgICAgICAgZWRnZXMuc3BsaWNlKGosIDIpO1xuICAgICAgICAgICAgICBlZGdlcy5zcGxpY2UoaSwgMik7XG4gICAgICAgICAgICAgIGogLT0gMjtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyaWFuZ3VsYXRlKHZlcnRpY2VzKSB7XG4gICAgLy8gQmFpbCBpZiB0aGVyZSBhcmVuJ3QgZW5vdWdoIHZlcnRpY2VzIHRvIGZvcm0gYW55IHRyaWFuZ2xlcy5cbiAgICBpZiAodmVydGljZXMubGVuZ3RoIDwgMylcbiAgICAgICAgcmV0dXJuIFtdO1xuXG4gICAgLy8gRW5zdXJlIHRoZSB2ZXJ0ZXggYXJyYXkgaXMgaW4gb3JkZXIgb2YgZGVzY2VuZGluZyBYIGNvb3JkaW5hdGVcbiAgICAvLyAod2hpY2ggaXMgbmVlZGVkIHRvIGVuc3VyZSBhIHN1YnF1YWRyYXRpYyBydW50aW1lKSwgYW5kIHRoZW4gZmluZFxuICAgIC8vIHRoZSBib3VuZGluZyBib3ggYXJvdW5kIHRoZSBwb2ludHMuXG4gICAgdmVydGljZXMuc29ydChieVgpO1xuXG4gICAgdmFyIGkgPSB2ZXJ0aWNlcy5sZW5ndGggLSAxLFxuICAgICAgICB4bWluID0gdmVydGljZXNbaV0ueCxcbiAgICAgICAgeG1heCA9IHZlcnRpY2VzWzBdLngsXG4gICAgICAgIHltaW4gPSB2ZXJ0aWNlc1tpXS55LFxuICAgICAgICB5bWF4ID0geW1pbixcbiAgICAgICAgZXBzaWxvbiA9IDFlLTEyO1xuXG4gICAgdmFyIGEsXG4gICAgICAgIGIsXG4gICAgICAgIGMsXG4gICAgICAgIEEsXG4gICAgICAgIEIsXG4gICAgICAgIEc7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICh2ZXJ0aWNlc1tpXS55IDwgeW1pbilcbiAgICAgICAgICAgIHltaW4gPSB2ZXJ0aWNlc1tpXS55O1xuICAgICAgICBpZiAodmVydGljZXNbaV0ueSA+IHltYXgpXG4gICAgICAgICAgICB5bWF4ID0gdmVydGljZXNbaV0ueTtcbiAgICB9XG5cbiAgICAvL0ZpbmQgYSBzdXBlcnRyaWFuZ2xlLCB3aGljaCBpcyBhIHRyaWFuZ2xlIHRoYXQgc3Vycm91bmRzIGFsbCB0aGVcbiAgICAvL3ZlcnRpY2VzLiBUaGlzIGlzIHVzZWQgbGlrZSBzb21ldGhpbmcgb2YgYSBzZW50aW5lbCB2YWx1ZSB0byByZW1vdmVcbiAgICAvL2Nhc2VzIGluIHRoZSBtYWluIGFsZ29yaXRobSwgYW5kIGlzIHJlbW92ZWQgYmVmb3JlIHdlIHJldHVybiBhbnlcbiAgICAvLyByZXN1bHRzLlxuXG4gICAgLy8gT25jZSBmb3VuZCwgcHV0IGl0IGluIHRoZSBcIm9wZW5cIiBsaXN0LiAoVGhlIFwib3BlblwiIGxpc3QgaXMgZm9yXG4gICAgLy8gdHJpYW5nbGVzIHdobyBtYXkgc3RpbGwgbmVlZCB0byBiZSBjb25zaWRlcmVkOyB0aGUgXCJjbG9zZWRcIiBsaXN0IGlzXG4gICAgLy8gZm9yIHRyaWFuZ2xlcyB3aGljaCBkbyBub3QuKVxuICAgIHZhciBkeCA9IHhtYXggLSB4bWluLFxuICAgICAgICBkeSA9IHltYXggLSB5bWluLFxuICAgICAgICBkbWF4ID0gKGR4ID4gZHkpID8gZHggOiBkeSxcbiAgICAgICAgeG1pZCA9ICh4bWF4ICsgeG1pbikgKiAwLjUsXG4gICAgICAgIHltaWQgPSAoeW1heCArIHltaW4pICogMC41LFxuICAgICAgICBvcGVuID0gW1xuICAgICAgICAgICAgbmV3IFRyaWFuZ2xlKHtcbiAgICAgICAgICAgICAgICB4OiB4bWlkIC0gMjAgKiBkbWF4LFxuICAgICAgICAgICAgICAgIHk6IHltaWQgLSBkbWF4LFxuICAgICAgICAgICAgICAgIF9fc2VudGluZWw6IHRydWVcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB4OiB4bWlkLFxuICAgICAgICAgICAgICAgIHk6IHltaWQgKyAyMCAqIGRtYXgsXG4gICAgICAgICAgICAgICAgX19zZW50aW5lbDogdHJ1ZVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHg6IHhtaWQgKyAyMCAqIGRtYXgsXG4gICAgICAgICAgICAgICAgeTogeW1pZCAtIGRtYXgsXG4gICAgICAgICAgICAgICAgX19zZW50aW5lbDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICApXSxcbiAgICAgICAgY2xvc2VkID0gW10sXG4gICAgICAgIGVkZ2VzID0gW10sXG4gICAgICAgIGo7XG5cbiAgICAvLyBJbmNyZW1lbnRhbGx5IGFkZCBlYWNoIHZlcnRleCB0byB0aGUgbWVzaC5cbiAgICBpID0gdmVydGljZXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy8gRm9yIGVhY2ggb3BlbiB0cmlhbmdsZSwgY2hlY2sgdG8gc2VlIGlmIHRoZSBjdXJyZW50IHBvaW50IGlzXG4gICAgICAgIC8vIGluc2lkZSBpdCdzIGNpcmN1bWNpcmNsZS4gSWYgaXQgaXMsIHJlbW92ZSB0aGUgdHJpYW5nbGUgYW5kIGFkZFxuICAgICAgICAvLyBpdCdzIGVkZ2VzIHRvIGFuIGVkZ2UgbGlzdC5cbiAgICAgICAgZWRnZXMubGVuZ3RoID0gMDtcbiAgICAgICAgaiA9IG9wZW4ubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIHBvaW50IGlzIHRvIHRoZSByaWdodCBvZiB0aGlzIHRyaWFuZ2xlJ3MgY2lyY3VtY2lyY2xlLFxuICAgICAgICAgICAgLy8gdGhlbiB0aGlzIHRyaWFuZ2xlIHNob3VsZCBuZXZlciBnZXQgY2hlY2tlZCBhZ2Fpbi4gUmVtb3ZlIGl0XG4gICAgICAgICAgICAvLyBmcm9tIHRoZSBvcGVuIGxpc3QsIGFkZCBpdCB0byB0aGUgY2xvc2VkIGxpc3QsIGFuZCBza2lwLlxuICAgICAgICAgICAgZHggPSB2ZXJ0aWNlc1tpXS54IC0gb3BlbltqXS54O1xuICAgICAgICAgICAgaWYgKGR4ID4gMCAmJiBkeCAqIGR4ID4gb3BlbltqXS5yKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VkLnB1c2gob3BlbltqXSk7XG4gICAgICAgICAgICAgICAgb3Blbi5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vdCwgc2tpcCB0aGlzIHRyaWFuZ2xlLlxuICAgICAgICAgICAgZHkgPSB2ZXJ0aWNlc1tpXS55IC0gb3BlbltqXS55O1xuICAgICAgICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5ID4gb3BlbltqXS5yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHRyaWFuZ2xlIGFuZCBhZGQgaXQncyBlZGdlcyB0byB0aGUgZWRnZSBsaXN0LlxuICAgICAgICAgICAgZWRnZXMucHVzaChcbiAgICAgICAgb3BlbltqXS5hLCBvcGVuW2pdLmIsXG4gICAgICAgIG9wZW5bal0uYiwgb3BlbltqXS5jLFxuICAgICAgICBvcGVuW2pdLmMsIG9wZW5bal0uYVxuICAgICAgKTtcbiAgICAgICAgICAgIG9wZW4uc3BsaWNlKGosIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFueSBkb3VibGVkIGVkZ2VzLlxuICAgICAgICBkZWR1cChlZGdlcyk7XG5cbiAgICAgICAgLy8gQWRkIGEgbmV3IHRyaWFuZ2xlIGZvciBlYWNoIGVkZ2UuXG4gICAgICAgIGogPSBlZGdlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChqKSB7XG4gICAgICAgICAgICBiID0gZWRnZXNbLS1qXTtcbiAgICAgICAgICAgIGEgPSBlZGdlc1stLWpdO1xuICAgICAgICAgICAgYyA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgICAgLy8gQXZvaWQgYWRkaW5nIGNvbGluZWFyIHRyaWFuZ2xlcyAod2hpY2ggaGF2ZSBlcnJvci1wcm9uZVxuICAgICAgICAgICAgLy8gY2lyY3VtY2lyY2xlcylcbiAgICAgICAgICAgIEEgPSBiLnggLSBhLng7XG4gICAgICAgICAgICBCID0gYi55IC0gYS55O1xuICAgICAgICAgICAgRyA9IDIgKiAoQSAqIChjLnkgLSBiLnkpIC0gQiAqIChjLnggLSBiLngpKTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhHKSA+IGVwc2lsb24pIHtcbiAgICAgICAgICAgICAgICBvcGVuLnB1c2gobmV3IFRyaWFuZ2xlKGEsIGIsIGMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvcHkgYW55IHJlbWFpbmluZyBvcGVuIHRyaWFuZ2xlcyB0byB0aGUgY2xvc2VkIGxpc3QsIGFuZCB0aGVuXG4gICAgLy8gcmVtb3ZlIGFueSB0cmlhbmdsZXMgdGhhdCBzaGFyZSBhIHZlcnRleCB3aXRoIHRoZSBzdXBlcnRyaWFuZ2xlLlxuICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGNsb3NlZCwgb3Blbik7XG5cbiAgICBpID0gY2xvc2VkLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBpZiAoY2xvc2VkW2ldLmEuX19zZW50aW5lbCB8fFxuICAgICAgY2xvc2VkW2ldLmIuX19zZW50aW5lbCB8fFxuICAgICAgY2xvc2VkW2ldLmMuX19zZW50aW5lbClcbiAgICAgICAgICAgIGNsb3NlZC5zcGxpY2UoaSwgMSk7XG5cbiAgICByZXR1cm4gY2xvc2VkO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvdGluL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYXJlYSA9IHJlcXVpcmUoJ0BtYXBib3gvZ2VvanNvbi1hcmVhJykuZ2VvbWV0cnk7XG52YXIgZ2VvbVJlZHVjZSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5nZW9tUmVkdWNlO1xuXG4vKipcbiAqIFRha2VzIG9uZSBvciBtb3JlIGZlYXR1cmVzIGFuZCByZXR1cm5zIHRoZWlyIGFyZWEgaW4gc3F1YXJlIG1ldGVycy5cbiAqXG4gKiBAbmFtZSBhcmVhXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBpbnB1dCBHZW9KU09OIGZlYXR1cmUocylcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFyZWEgaW4gc3F1YXJlIG1ldGVyc1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWzEyNSwgLTE1XSwgWzExMywgLTIyXSwgWzE1NCwgLTI3XSwgWzE0NCwgLTE1XSwgWzEyNSwgLTE1XV1dKTtcbiAqXG4gKiB2YXIgYXJlYSA9IHR1cmYuYXJlYShwb2x5Z29uKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9seWdvbl1cbiAqIHBvbHlnb24ucHJvcGVydGllcy5hcmVhID0gYXJlYVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uKSB7XG4gICAgcmV0dXJuIGdlb21SZWR1Y2UoZ2VvanNvbiwgZnVuY3Rpb24gKHZhbHVlLCBnZW9tZXRyeSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgKyBhcmVhKGdlb21ldHJ5KTtcbiAgICB9LCAwKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9hcmVhL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJpbmcpe1xuICB2YXIgc3VtID0gMDtcbiAgdmFyIGkgPSAxO1xuICB2YXIgbGVuID0gcmluZy5sZW5ndGg7XG4gIHZhciBwcmV2LGN1cjtcbiAgd2hpbGUoaTxsZW4pe1xuICAgIHByZXYgPSBjdXJ8fHJpbmdbMF07XG4gICAgY3VyID0gcmluZ1tpXTtcbiAgICBzdW0gKz0gKChjdXJbMF0tcHJldlswXSkqKGN1clsxXStwcmV2WzFdKSk7XG4gICAgaSsrO1xuICB9XG4gIHJldHVybiBzdW0gPiAwO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R1cmYtaXMtY2xvY2t3aXNlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmJveCA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gnKTtcbnZhciBiYm94UG9seWdvbiA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gtcG9seWdvbicpO1xuXG4vKipcbiAqIFRha2VzIGFueSBudW1iZXIgb2YgZmVhdHVyZXMgYW5kIHJldHVybnMgYSByZWN0YW5ndWxhciB7QGxpbmsgUG9seWdvbn0gdGhhdCBlbmNvbXBhc3NlcyBhbGwgdmVydGljZXMuXG4gKlxuICogQG5hbWUgZW52ZWxvcGVcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxhbnk+fSBnZW9qc29uIGlucHV0IGZlYXR1cmVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxQb2x5Z29uPn0gYSByZWN0YW5ndWxhciBQb2x5Z29uIGZlYXR1cmUgdGhhdCBlbmNvbXBhc3NlcyBhbGwgdmVydGljZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgdHVyZi5wb2ludChbLTc1LjM0MywgMzkuOTg0XSwge1wibmFtZVwiOiBcIkxvY2F0aW9uIEFcIn0pLFxuICogICB0dXJmLnBvaW50KFstNzUuODMzLCAzOS4yODRdLCB7XCJuYW1lXCI6IFwiTG9jYXRpb24gQlwifSksXG4gKiAgIHR1cmYucG9pbnQoWy03NS41MzQsIDM5LjEyM10sIHtcIm5hbWVcIjogXCJMb2NhdGlvbiBDXCJ9KVxuICogXSk7XG4gKlxuICogdmFyIGVudmVsb3BlZCA9IHR1cmYuZW52ZWxvcGUoZmVhdHVyZXMpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtmZWF0dXJlcywgZW52ZWxvcGVkXTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbikge1xuICAgIHJldHVybiBiYm94UG9seWdvbihiYm94KGdlb2pzb24pKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9lbnZlbG9wZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHBvbHlnb24gPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykucG9seWdvbjtcblxuLyoqXG4gKiBUYWtlcyBhIGJib3ggYW5kIHJldHVybnMgYW4gZXF1aXZhbGVudCB7QGxpbmsgUG9seWdvbnxwb2x5Z29ufS5cbiAqXG4gKiBAbmFtZSBiYm94UG9seWdvblxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBiYm94IGV4dGVudCBpbiBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0gb3JkZXJcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fSBhIFBvbHlnb24gcmVwcmVzZW50YXRpb24gb2YgdGhlIGJvdW5kaW5nIGJveFxuICogQGV4YW1wbGVcbiAqIHZhciBiYm94ID0gWzAsIDAsIDEwLCAxMF07XG4gKlxuICogdmFyIHBvbHkgPSB0dXJmLmJib3hQb2x5Z29uKGJib3gpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5XVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiYm94KSB7XG4gICAgdmFyIGxvd0xlZnQgPSBbYmJveFswXSwgYmJveFsxXV07XG4gICAgdmFyIHRvcExlZnQgPSBbYmJveFswXSwgYmJveFszXV07XG4gICAgdmFyIHRvcFJpZ2h0ID0gW2Jib3hbMl0sIGJib3hbM11dO1xuICAgIHZhciBsb3dSaWdodCA9IFtiYm94WzJdLCBiYm94WzFdXTtcblxuICAgIHJldHVybiBwb2x5Z29uKFtbXG4gICAgICAgIGxvd0xlZnQsXG4gICAgICAgIGxvd1JpZ2h0LFxuICAgICAgICB0b3BSaWdodCxcbiAgICAgICAgdG9wTGVmdCxcbiAgICAgICAgbG93TGVmdFxuICAgIF1dKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9iYm94LXBvbHlnb24vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlclwiO1xuaW1wb3J0IHthdGFuMiwgY29zLCBxdWFydGVyUGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG5leHBvcnQgdmFyIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAwLFxuICAgIHBoaTAwLFxuICAgIGxhbWJkYTAsXG4gICAgY29zUGhpMCxcbiAgICBzaW5QaGkwO1xuXG5leHBvcnQgdmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhUmluZyA9ICthcmVhUmluZ1N1bTtcbiAgICBhcmVhU3VtLmFkZChhcmVhUmluZyA8IDAgPyB0YXUgKyBhcmVhUmluZyA6IGFyZWFSaW5nKTtcbiAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMubGluZUVuZCA9IHRoaXMucG9pbnQgPSBub29wO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdW0uYWRkKHRhdSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludChsYW1iZGEwMCwgcGhpMDApO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvcyhwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpKSwgc2luUGhpMCA9IHNpbihwaGkpO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpOyAvLyBoYWxmIHRoZSBhbmd1bGFyIGRpc3RhbmNlIGZyb20gc291dGggcG9sZVxuXG4gIC8vIFNwaGVyaWNhbCBleGNlc3MgRSBmb3IgYSBzcGhlcmljYWwgdHJpYW5nbGUgd2l0aCB2ZXJ0aWNlczogc291dGggcG9sZSxcbiAgLy8gcHJldmlvdXMgcG9pbnQsIGN1cnJlbnQgcG9pbnQuICBVc2VzIGEgZm9ybXVsYSBkZXJpdmVkIGZyb20gQ2Fnbm9saeKAmXNcbiAgLy8gdGhlb3JlbS4gIFNlZSBUb2RodW50ZXIsIFNwaGVyaWNhbCBUcmlnLiAoMTg3MSksIFNlYy4gMTAzLCBFcS4gKDIpLlxuICB2YXIgZExhbWJkYSA9IGxhbWJkYSAtIGxhbWJkYTAsXG4gICAgICBzZExhbWJkYSA9IGRMYW1iZGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgIGFkTGFtYmRhID0gc2RMYW1iZGEgKiBkTGFtYmRhLFxuICAgICAgY29zUGhpID0gY29zKHBoaSksXG4gICAgICBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpLFxuICAgICAgdSA9IGNvc1BoaTAgKiBjb3NQaGkgKyBrICogY29zKGFkTGFtYmRhKSxcbiAgICAgIHYgPSBrICogc2RMYW1iZGEgKiBzaW4oYWRMYW1iZGEpO1xuICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xuXG4gIC8vIEFkdmFuY2UgdGhlIHByZXZpb3VzIHBvaW50cy5cbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvc1BoaSwgc2luUGhpMCA9IHNpblBoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGFyZWFTdW0ucmVzZXQoKTtcbiAgc3RyZWFtKG9iamVjdCwgYXJlYVN0cmVhbSk7XG4gIHJldHVybiBhcmVhU3VtICogMjtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvYXJlYS5qc1xuLy8gbW9kdWxlIGlkID0gNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UsIHNwaGVyaWNhbH0gZnJvbSBcIi4vY2FydGVzaWFuXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7YWNvcywgY29zLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IHtyb3RhdGVSYWRpYW5zfSBmcm9tIFwiLi9yb3RhdGlvblwiO1xuXG4vLyBHZW5lcmF0ZXMgYSBjaXJjbGUgY2VudGVyZWQgYXQgWzDCsCwgMMKwXSwgd2l0aCBhIGdpdmVuIHJhZGl1cyBhbmQgcHJlY2lzaW9uLlxuZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgdDAsIHQxKSB7XG4gIGlmICghZGVsdGEpIHJldHVybjtcbiAgdmFyIGNvc1JhZGl1cyA9IGNvcyhyYWRpdXMpLFxuICAgICAgc2luUmFkaXVzID0gc2luKHJhZGl1cyksXG4gICAgICBzdGVwID0gZGlyZWN0aW9uICogZGVsdGE7XG4gIGlmICh0MCA9PSBudWxsKSB7XG4gICAgdDAgPSByYWRpdXMgKyBkaXJlY3Rpb24gKiB0YXU7XG4gICAgdDEgPSByYWRpdXMgLSBzdGVwIC8gMjtcbiAgfSBlbHNlIHtcbiAgICB0MCA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQwKTtcbiAgICB0MSA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQxKTtcbiAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXU7XG4gIH1cbiAgZm9yICh2YXIgcG9pbnQsIHQgPSB0MDsgZGlyZWN0aW9uID4gMCA/IHQgPiB0MSA6IHQgPCB0MTsgdCAtPSBzdGVwKSB7XG4gICAgcG9pbnQgPSBzcGhlcmljYWwoW2Nvc1JhZGl1cywgLXNpblJhZGl1cyAqIGNvcyh0KSwgLXNpblJhZGl1cyAqIHNpbih0KV0pO1xuICAgIHN0cmVhbS5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIHNpZ25lZCBhbmdsZSBvZiBhIGNhcnRlc2lhbiBwb2ludCByZWxhdGl2ZSB0byBbY29zUmFkaXVzLCAwLCAwXS5cbmZ1bmN0aW9uIGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHBvaW50KSB7XG4gIHBvaW50ID0gY2FydGVzaWFuKHBvaW50KSwgcG9pbnRbMF0gLT0gY29zUmFkaXVzO1xuICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKHBvaW50KTtcbiAgdmFyIHJhZGl1cyA9IGFjb3MoLXBvaW50WzFdKTtcbiAgcmV0dXJuICgoLXBvaW50WzJdIDwgMCA/IC1yYWRpdXMgOiByYWRpdXMpICsgdGF1IC0gZXBzaWxvbikgJSB0YXU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2VudGVyID0gY29uc3RhbnQoWzAsIDBdKSxcbiAgICAgIHJhZGl1cyA9IGNvbnN0YW50KDkwKSxcbiAgICAgIHByZWNpc2lvbiA9IGNvbnN0YW50KDYpLFxuICAgICAgcmluZyxcbiAgICAgIHJvdGF0ZSxcbiAgICAgIHN0cmVhbSA9IHtwb2ludDogcG9pbnR9O1xuXG4gIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgeFswXSAqPSBkZWdyZWVzLCB4WzFdICo9IGRlZ3JlZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGUoKSB7XG4gICAgdmFyIGMgPSBjZW50ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgciA9IHJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucyxcbiAgICAgICAgcCA9IHByZWNpc2lvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucztcbiAgICByaW5nID0gW107XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucygtY1swXSAqIHJhZGlhbnMsIC1jWzFdICogcmFkaWFucywgMCkuaW52ZXJ0O1xuICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHIsIHAsIDEpO1xuICAgIGMgPSB7dHlwZTogXCJQb2x5Z29uXCIsIGNvb3JkaW5hdGVzOiBbcmluZ119O1xuICAgIHJpbmcgPSByb3RhdGUgPSBudWxsO1xuICAgIHJldHVybiBjO1xuICB9XG5cbiAgY2lyY2xlLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcbiAgfTtcblxuICBjaXJjbGUucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBjaXJjbGUpIDogcmFkaXVzO1xuICB9O1xuXG4gIGNpcmNsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2lzaW9uID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGNpcmNsZSkgOiBwcmVjaXNpb247XG4gIH07XG5cbiAgcmV0dXJuIGNpcmNsZTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2lyY2xlLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG5cbiAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBhKHgsIHkpLCBiKHhbMF0sIHhbMV0pO1xuICB9XG5cbiAgaWYgKGEuaW52ZXJ0ICYmIGIuaW52ZXJ0KSBjb21wb3NlLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICB9O1xuXG4gIHJldHVybiBjb21wb3NlO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jb21wb3NlLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxpbmVzID0gW10sXG4gICAgICBsaW5lO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBsaW5lLnB1c2goW3gsIHldKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBub29wLFxuICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaW5lcztcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBsaW5lID0gbnVsbDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2J1ZmZlci5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWxcIjtcblxuZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xuICB0aGlzLnggPSBwb2ludDtcbiAgdGhpcy56ID0gcG9pbnRzO1xuICB0aGlzLm8gPSBvdGhlcjsgLy8gYW5vdGhlciBpbnRlcnNlY3Rpb25cbiAgdGhpcy5lID0gZW50cnk7IC8vIGlzIGFuIGVudHJ5P1xuICB0aGlzLnYgPSBmYWxzZTsgLy8gdmlzaXRlZFxuICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsOyAvLyBuZXh0ICYgcHJldmlvdXNcbn1cblxuLy8gQSBnZW5lcmFsaXplZCBwb2x5Z29uIGNsaXBwaW5nIGFsZ29yaXRobTogZ2l2ZW4gYSBwb2x5Z29uIHRoYXQgaGFzIGJlZW4gY3V0XG4vLyBpbnRvIGl0cyB2aXNpYmxlIGxpbmUgc2VnbWVudHMsIGFuZCByZWpvaW5zIHRoZSBzZWdtZW50cyBieSBpbnRlcnBvbGF0aW5nXG4vLyBhbG9uZyB0aGUgY2xpcCBlZGdlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gIHZhciBzdWJqZWN0ID0gW10sXG4gICAgICBjbGlwID0gW10sXG4gICAgICBpLFxuICAgICAgbjtcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl0sIHg7XG5cbiAgICAvLyBJZiB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIG9mIGEgc2VnbWVudCBhcmUgY29pbmNpZGVudCwgdGhlbiB0cmVhdCBhcyBhXG4gICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgLy8gZXh0ZXJpb3IgcmluZyBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICBpZiAocG9pbnRFcXVhbChwMCwgcDEpKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XG4gIH0pO1xuXG4gIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblxuICBjbGlwLnNvcnQoY29tcGFyZUludGVyc2VjdGlvbik7XG4gIGxpbmsoc3ViamVjdCk7XG4gIGxpbmsoY2xpcCk7XG5cbiAgZm9yIChpID0gMCwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgY2xpcFtpXS5lID0gc3RhcnRJbnNpZGUgPSAhc3RhcnRJbnNpZGU7XG4gIH1cblxuICB2YXIgc3RhcnQgPSBzdWJqZWN0WzBdLFxuICAgICAgcG9pbnRzLFxuICAgICAgcG9pbnQ7XG5cbiAgd2hpbGUgKDEpIHtcbiAgICAvLyBGaW5kIGZpcnN0IHVudmlzaXRlZCBpbnRlcnNlY3Rpb24uXG4gICAgdmFyIGN1cnJlbnQgPSBzdGFydCxcbiAgICAgICAgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICB3aGlsZSAoY3VycmVudC52KSBpZiAoKGN1cnJlbnQgPSBjdXJyZW50Lm4pID09PSBzdGFydCkgcmV0dXJuO1xuICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgZG8ge1xuICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgaWYgKGN1cnJlbnQuZSkge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50Lm4ueCwgMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIHBvaW50cyA9IGN1cnJlbnQucC56O1xuICAgICAgICAgIGZvciAoaSA9IHBvaW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQucC54LCAtMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubztcbiAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgfSB3aGlsZSAoIWN1cnJlbnQudik7XG4gICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsaW5rKGFycmF5KSB7XG4gIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gIHZhciBuLFxuICAgICAgaSA9IDAsXG4gICAgICBhID0gYXJyYXlbMF0sXG4gICAgICBiO1xuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEubiA9IGIgPSBhcnJheVtpXTtcbiAgICBiLnAgPSBhO1xuICAgIGEgPSBiO1xuICB9XG4gIGEubiA9IGIgPSBhcnJheVswXTtcbiAgYi5wID0gYTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9wb2x5Z29uLmpzXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhYnMoYVswXSAtIGJbMF0pIDwgZXBzaWxvbiAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbjtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcG9pbnRFcXVhbC5qc1xuLy8gbW9kdWxlIGlkID0gNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qc1xuLy8gbW9kdWxlIGlkID0gNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gIGlmIChmID09IG51bGwpIGYgPSBwYWlyO1xuICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwID0gYXJyYXlbMF0sIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICB3aGlsZSAoaSA8IG4pIHBhaXJzW2ldID0gZihwLCBwID0gYXJyYXlbKytpXSk7XG4gIHJldHVybiBwYWlycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhaXIoYSwgYikge1xuICByZXR1cm4gW2EsIGJdO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3BhaXJzLmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgdmFyaWFuY2UgZnJvbSBcIi4vdmFyaWFuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgdmFyIHYgPSB2YXJpYW5jZShhcnJheSwgZik7XG4gIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qc1xuLy8gbW9kdWxlIGlkID0gODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UgPSBzdG9wIDwgc3RhcnQsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIGlmIChyZXZlcnNlKSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG5cbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yKSArIDE7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3N0dXJnZXMuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluLmpzXG4vLyBtb2R1bGUgaWQgPSA4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgbWluIGZyb20gXCIuL21pblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRyaXgpIHtcbiAgaWYgKCEobiA9IG1hdHJpeC5sZW5ndGgpKSByZXR1cm4gW107XG4gIGZvciAodmFyIGkgPSAtMSwgbSA9IG1pbihtYXRyaXgsIGxlbmd0aCksIHRyYW5zcG9zZSA9IG5ldyBBcnJheShtKTsgKytpIDwgbTspIHtcbiAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjspIHtcbiAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRyYW5zcG9zZTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoKGQpIHtcbiAgcmV0dXJuIGQubGVuZ3RoO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RyYW5zcG9zZS5qc1xuLy8gbW9kdWxlIGlkID0gODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyXCI7XG5pbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2V9IGZyb20gXCIuL2NhcnRlc2lhblwiO1xuaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBwaSwgcXVhcnRlclBpLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgc3VtID0gYWRkZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbiwgcG9pbnQpIHtcbiAgdmFyIGxhbWJkYSA9IHBvaW50WzBdLFxuICAgICAgcGhpID0gcG9pbnRbMV0sXG4gICAgICBub3JtYWwgPSBbc2luKGxhbWJkYSksIC1jb3MobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICBzdW0ucmVzZXQoKTtcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEobSA9IChyaW5nID0gcG9seWdvbltpXSkubGVuZ3RoKSkgY29udGludWU7XG4gICAgdmFyIHJpbmcsXG4gICAgICAgIG0sXG4gICAgICAgIHBvaW50MCA9IHJpbmdbbSAtIDFdLFxuICAgICAgICBsYW1iZGEwID0gcG9pbnQwWzBdLFxuICAgICAgICBwaGkwID0gcG9pbnQwWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgc2luUGhpMCA9IHNpbihwaGkwKSxcbiAgICAgICAgY29zUGhpMCA9IGNvcyhwaGkwKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgIHZhciBwb2ludDEgPSByaW5nW2pdLFxuICAgICAgICAgIGxhbWJkYTEgPSBwb2ludDFbMF0sXG4gICAgICAgICAgcGhpMSA9IHBvaW50MVsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgICAgc2luUGhpMSA9IHNpbihwaGkxKSxcbiAgICAgICAgICBjb3NQaGkxID0gY29zKHBoaTEpLFxuICAgICAgICAgIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgICAgc2lnbiA9IGRlbHRhID49IDAgPyAxIDogLTEsXG4gICAgICAgICAgYWJzRGVsdGEgPSBzaWduICogZGVsdGEsXG4gICAgICAgICAgYW50aW1lcmlkaWFuID0gYWJzRGVsdGEgPiBwaSxcbiAgICAgICAgICBrID0gc2luUGhpMCAqIHNpblBoaTE7XG5cbiAgICAgIHN1bS5hZGQoYXRhbjIoayAqIHNpZ24gKiBzaW4oYWJzRGVsdGEpLCBjb3NQaGkwICogY29zUGhpMSArIGsgKiBjb3MoYWJzRGVsdGEpKSk7XG4gICAgICBhbmdsZSArPSBhbnRpbWVyaWRpYW4gPyBkZWx0YSArIHNpZ24gKiB0YXUgOiBkZWx0YTtcblxuICAgICAgLy8gQXJlIHRoZSBsb25naXR1ZGVzIGVpdGhlciBzaWRlIG9mIHRoZSBwb2ludOKAmXMgbWVyaWRpYW4gKGxhbWJkYSksXG4gICAgICAvLyBhbmQgYXJlIHRoZSBsYXRpdHVkZXMgc21hbGxlciB0aGFuIHRoZSBwYXJhbGxlbCAocGhpKT9cbiAgICAgIGlmIChhbnRpbWVyaWRpYW4gXiBsYW1iZGEwID49IGxhbWJkYSBeIGxhbWJkYTEgPj0gbGFtYmRhKSB7XG4gICAgICAgIHZhciBhcmMgPSBjYXJ0ZXNpYW5Dcm9zcyhjYXJ0ZXNpYW4ocG9pbnQwKSwgY2FydGVzaWFuKHBvaW50MSkpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGFyYyk7XG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBjYXJ0ZXNpYW5Dcm9zcyhub3JtYWwsIGFyYyk7XG4gICAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgdmFyIHBoaUFyYyA9IChhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gLTEgOiAxKSAqIGFzaW4oaW50ZXJzZWN0aW9uWzJdKTtcbiAgICAgICAgaWYgKHBoaSA+IHBoaUFyYyB8fCBwaGkgPT09IHBoaUFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcbiAgICAgICAgICB3aW5kaW5nICs9IGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAxIDogLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBGaXJzdCwgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIFNvdXRoIHBvbGUgaXMgaW5zaWRlIG9yIG91dHNpZGU6XG4gIC8vXG4gIC8vIEl0IGlzIGluc2lkZSBpZjpcbiAgLy8gKiB0aGUgcG9seWdvbiB3aW5kcyBhcm91bmQgaXQgaW4gYSBjbG9ja3dpc2UgZGlyZWN0aW9uLlxuICAvLyAqIHRoZSBwb2x5Z29uIGRvZXMgbm90IChjdW11bGF0aXZlbHkpIHdpbmQgYXJvdW5kIGl0LCBidXQgaGFzIGEgbmVnYXRpdmVcbiAgLy8gICAoY291bnRlci1jbG9ja3dpc2UpIGFyZWEuXG4gIC8vXG4gIC8vIFNlY29uZCwgY291bnQgdGhlIChzaWduZWQpIG51bWJlciBvZiB0aW1lcyBhIHNlZ21lbnQgY3Jvc3NlcyBhIGxhbWJkYVxuICAvLyBmcm9tIHRoZSBwb2ludCB0byB0aGUgU291dGggcG9sZS4gIElmIGl0IGlzIHplcm8sIHRoZW4gdGhlIHBvaW50IGlzIHRoZVxuICAvLyBzYW1lIHNpZGUgYXMgdGhlIFNvdXRoIHBvbGUuXG5cbiAgcmV0dXJuIChhbmdsZSA8IC1lcHNpbG9uIHx8IGFuZ2xlIDwgZXBzaWxvbiAmJiBzdW0gPCAtZXBzaWxvbikgXiAod2luZGluZyAmIDEpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2x5Z29uQ29udGFpbnMuanNcbi8vIG1vZHVsZSBpZCA9IDkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBsZW5ndGggZnJvbSBcIi4vbGVuZ3RoXCI7XG5cbnZhciBjb29yZGluYXRlcyA9IFtudWxsLCBudWxsXSxcbiAgICBvYmplY3QgPSB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICBjb29yZGluYXRlc1sxXSA9IGI7XG4gIHJldHVybiBsZW5ndGgob2JqZWN0KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvZGlzdGFuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlclwiO1xuaW1wb3J0IHthYnMsIGF0YW4yLCBjb3MsIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcFwiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW1cIjtcblxudmFyIGxlbmd0aFN1bSA9IGFkZGVyKCksXG4gICAgbGFtYmRhMCxcbiAgICBzaW5QaGkwLFxuICAgIGNvc1BoaTA7XG5cbnZhciBsZW5ndGhTdHJlYW0gPSB7XG4gIHNwaGVyZTogbm9vcCxcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbGVuZ3RoTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IG5vb3AsXG4gIHBvbHlnb25FbmQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIGxlbmd0aExpbmVTdGFydCgpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnRGaXJzdDtcbiAgbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBsZW5ndGhMaW5lRW5kO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhMaW5lRW5kKCkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IG5vb3A7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBsYW1iZGEwID0gbGFtYmRhLCBzaW5QaGkwID0gc2luKHBoaSksIGNvc1BoaTAgPSBjb3MocGhpKTtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnQ7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgY29zUGhpID0gY29zKHBoaSksXG4gICAgICBkZWx0YSA9IGFicyhsYW1iZGEgLSBsYW1iZGEwKSxcbiAgICAgIGNvc0RlbHRhID0gY29zKGRlbHRhKSxcbiAgICAgIHNpbkRlbHRhID0gc2luKGRlbHRhKSxcbiAgICAgIHggPSBjb3NQaGkgKiBzaW5EZWx0YSxcbiAgICAgIHkgPSBjb3NQaGkwICogc2luUGhpIC0gc2luUGhpMCAqIGNvc1BoaSAqIGNvc0RlbHRhLFxuICAgICAgeiA9IHNpblBoaTAgKiBzaW5QaGkgKyBjb3NQaGkwICogY29zUGhpICogY29zRGVsdGE7XG4gIGxlbmd0aFN1bS5hZGQoYXRhbjIoc3FydCh4ICogeCArIHkgKiB5KSwgeikpO1xuICBsYW1iZGEwID0gbGFtYmRhLCBzaW5QaGkwID0gc2luUGhpLCBjb3NQaGkwID0gY29zUGhpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QpIHtcbiAgbGVuZ3RoU3VtLnJlc2V0KCk7XG4gIHN0cmVhbShvYmplY3QsIGxlbmd0aFN0cmVhbSk7XG4gIHJldHVybiArbGVuZ3RoU3VtO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9sZW5ndGguanNcbi8vIG1vZHVsZSBpZCA9IDkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbnZhciB4MCA9IEluZmluaXR5LFxuICAgIHkwID0geDAsXG4gICAgeDEgPSAteDAsXG4gICAgeTEgPSB4MTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogbm9vcCxcbiAgcG9seWdvbkVuZDogbm9vcCxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm91bmRzID0gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgeDEgPSB5MSA9IC0oeTAgPSB4MCA9IEluZmluaXR5KTtcbiAgICByZXR1cm4gYm91bmRzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludCh4LCB5KSB7XG4gIGlmICh4IDwgeDApIHgwID0geDtcbiAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gIGlmICh5ID4geTEpIHkxID0geTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYm91bmRzU3RyZWFtO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2JvdW5kcy5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGNvbmljRXF1YWxBcmVhIGZyb20gXCIuL2NvbmljRXF1YWxBcmVhXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uaWNFcXVhbEFyZWEoKVxuICAgICAgLnBhcmFsbGVscyhbMjkuNSwgNDUuNV0pXG4gICAgICAuc2NhbGUoMTA3MClcbiAgICAgIC50cmFuc2xhdGUoWzQ4MCwgMjUwXSlcbiAgICAgIC5yb3RhdGUoWzk2LCAwXSlcbiAgICAgIC5jZW50ZXIoWy0wLjYsIDM4LjddKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hbGJlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDk0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlclwiO1xuaW1wb3J0IGNsaXBQb2x5Z29uIGZyb20gXCIuL3BvbHlnb25cIjtcbmltcG9ydCB7ZXBzaWxvbiwgaGFsZlBpfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHBvbHlnb25Db250YWlucyBmcm9tIFwiLi4vcG9seWdvbkNvbnRhaW5zXCI7XG5pbXBvcnQge21lcmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHN0YXJ0KSB7XG4gIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIHNpbmspIHtcbiAgICB2YXIgbGluZSA9IGNsaXBMaW5lKHNpbmspLFxuICAgICAgICByb3RhdGVkU3RhcnQgPSByb3RhdGUuaW52ZXJ0KHN0YXJ0WzBdLCBzdGFydFsxXSksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHJvdGF0ZWRTdGFydCk7XG4gICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc2luayk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnRJbnNpZGUpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuICAgICAgfSxcbiAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpbmsucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgc2luay5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEgPSBwb2ludFswXSwgcGhpID0gcG9pbnRbMV0pKSBzaW5rLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUobGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciBwb2ludCA9IHJvdGF0ZShsYW1iZGEsIHBoaSk7XG4gICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgdmFyIHBvaW50ID0gcm90YXRlKGxhbWJkYSwgcGhpKTtcbiAgICAgIHJpbmdTaW5rLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgcmluZ1NpbmsubGluZVN0YXJ0KCk7XG4gICAgICByaW5nID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHBvaW50UmluZyhyaW5nWzBdWzBdLCByaW5nWzBdWzFdKTtcbiAgICAgIHJpbmdTaW5rLmxpbmVFbmQoKTtcblxuICAgICAgdmFyIGNsZWFuID0gcmluZ1NpbmsuY2xlYW4oKSxcbiAgICAgICAgICByaW5nU2VnbWVudHMgPSByaW5nQnVmZmVyLnJlc3VsdCgpLFxuICAgICAgICAgIGksIG4gPSByaW5nU2VnbWVudHMubGVuZ3RoLCBtLFxuICAgICAgICAgIHNlZ21lbnQsXG4gICAgICAgICAgcG9pbnQ7XG5cbiAgICAgIHJpbmcucG9wKCk7XG4gICAgICBwb2x5Z29uLnB1c2gocmluZyk7XG4gICAgICByaW5nID0gbnVsbDtcblxuICAgICAgaWYgKCFuKSByZXR1cm47XG5cbiAgICAgIC8vIE5vIGludGVyc2VjdGlvbnMuXG4gICAgICBpZiAoY2xlYW4gJiAxKSB7XG4gICAgICAgIHNlZ21lbnQgPSByaW5nU2VnbWVudHNbMF07XG4gICAgICAgIGlmICgobSA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPiAwKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc2luay5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmVqb2luIGNvbm5lY3RlZCBzZWdtZW50cy5cbiAgICAgIC8vIFRPRE8gcmV1c2UgcmluZ0J1ZmZlci5yZWpvaW4oKT9cbiAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcblxuICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKHZhbGlkU2VnbWVudCkpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGlwO1xuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZFNlZ21lbnQoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAxO1xufVxuXG4vLyBJbnRlcnNlY3Rpb25zIGFyZSBzb3J0ZWQgYWxvbmcgdGhlIGNsaXAgZWRnZS4gRm9yIGJvdGggYW50aW1lcmlkaWFuIGN1dHRpbmdcbi8vIGFuZCBjaXJjbGUgY2xpcHBpbmcsIHRoZSBzYW1lIGNvbXBhcmlzb24gaXMgdXNlZC5cbmZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICByZXR1cm4gKChhID0gYS54KVswXSA8IDAgPyBhWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGFbMV0pXG4gICAgICAgLSAoKGIgPSBiLngpWzBdIDwgMCA/IGJbMV0gLSBoYWxmUGkgLSBlcHNpbG9uIDogaGFsZlBpIC0gYlsxXSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXJSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XG59XG5cbmVxdWlyZWN0YW5ndWxhclJhdy5pbnZlcnQgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXG4gICAgICAuc2NhbGUoMTUyLjYzKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVpcmVjdGFuZ3VsYXIuanNcbi8vIG1vZHVsZSBpZCA9IDk2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkaXN0YW5jZSA9IHJlcXVpcmUoJ0B0dXJmL2Rpc3RhbmNlJyk7XG52YXIgc2VnbWVudFJlZHVjZSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5zZWdtZW50UmVkdWNlO1xuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIEdlb0pTT059IGFuZCBtZWFzdXJlcyBpdHMgbGVuZ3RoIGluIHRoZSBzcGVjaWZpZWQgdW5pdHMsIHtAbGluayAoTXVsdGkpUG9pbnR8UG9pbnR9J3MgZGlzdGFuY2UgYXJlIGlnbm9yZWQuXG4gKlxuICogQG5hbWUgbGluZURpc3RhbmNlXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmV8R2VvbWV0cnl9IGdlb2pzb24gR2VvSlNPTiB0byBtZWFzdXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHJldHVybnMge251bWJlcn0gbGVuZ3RoIG9mIEdlb0pTT05cbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhbWzExNSwgLTMyXSwgWzEzMSwgLTIyXSwgWzE0MywgLTI1XSwgWzE1MCwgLTM0XV0pO1xuICogdmFyIGxlbmd0aCA9IHR1cmYubGluZURpc3RhbmNlKGxpbmUsICdtaWxlcycpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtsaW5lXTtcbiAqIGxpbmUucHJvcGVydGllcy5kaXN0YW5jZSA9IGxlbmd0aDtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaW5lRGlzdGFuY2UoZ2VvanNvbiwgdW5pdHMpIHtcbiAgICAvLyBJbnB1dCBWYWxpZGF0aW9uXG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb2pzb24gaXMgcmVxdWlyZWQnKTtcblxuICAgIC8vIENhbGN1bGF0ZSBkaXN0YW5jZSBmcm9tIDItdmVydGV4IGxpbmUgc2VnZW1lbnRzXG4gICAgcmV0dXJuIHNlZ21lbnRSZWR1Y2UoZ2VvanNvbiwgZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIHNlZ21lbnQpIHtcbiAgICAgICAgdmFyIGNvb3JkcyA9IHNlZ21lbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlICsgZGlzdGFuY2UoY29vcmRzWzBdLCBjb29yZHNbMV0sIHVuaXRzKTtcbiAgICB9LCAwKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9saW5lLWRpc3RhbmNlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmVhcmluZyA9IHJlcXVpcmUoJ0B0dXJmL2JlYXJpbmcnKTtcbnZhciBkaXN0YW5jZSA9IHJlcXVpcmUoJ0B0dXJmL2Rpc3RhbmNlJyk7XG52YXIgZGVzdGluYXRpb24gPSByZXF1aXJlKCdAdHVyZi9kZXN0aW5hdGlvbicpO1xudmFyIGxpbmVTdHJpbmcgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykubGluZVN0cmluZztcblxuLyoqXG4gKiBUYWtlcyBhIHtAbGluayBMaW5lU3RyaW5nfGxpbmV9LCBhIHNwZWNpZmllZCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSB0byBhIHN0YXJ0IHtAbGluayBQb2ludH0sXG4gKiBhbmQgYSBzcGVjaWZpZWQgIGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIHRvIGEgc3RvcCBwb2ludFxuICogYW5kIHJldHVybnMgYSBzdWJzZWN0aW9uIG9mIHRoZSBsaW5lIGluLWJldHdlZW4gdGhvc2UgcG9pbnRzLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgZXh0cmFjdGluZyBvbmx5IHRoZSBwYXJ0IG9mIGEgcm91dGUgYmV0d2VlbiB0d28gZGlzdGFuY2VzLlxuICpcbiAqIEBuYW1lIGxpbmVTbGljZUFsb25nXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz58TGluZVN0cmluZ30gbGluZSBpbnB1dCBsaW5lXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnREaXN0IGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIHRvIHN0YXJ0aW5nIHBvaW50XG4gKiBAcGFyYW0ge251bWJlcn0gc3RvcERpc3QgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmUgdG8gZW5kaW5nIHBvaW50XG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHJldHVybnMge0ZlYXR1cmU8TGluZVN0cmluZz59IHNsaWNlZCBsaW5lXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1s3LCA0NV0sIFs5LCA0NV0sIFsxNCwgNDBdLCBbMTQsIDQxXV0pO1xuICogdmFyIHN0YXJ0ID0gMTIuNTtcbiAqIHZhciBzdG9wID0gMjU7XG4gKiB2YXIgc2xpY2VkID0gdHVyZi5saW5lU2xpY2VBbG9uZyhsaW5lLCBzdGFydCwgc3RvcCwgJ21pbGVzJyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2xpbmUsIHN0YXJ0LCBzdG9wLCBzbGljZWRdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpbmUsIHN0YXJ0RGlzdCwgc3RvcERpc3QsIHVuaXRzKSB7XG4gICAgdmFyIGNvb3JkcztcbiAgICB2YXIgc2xpY2UgPSBbXTtcbiAgICBpZiAobGluZS50eXBlID09PSAnRmVhdHVyZScpIGNvb3JkcyA9IGxpbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgZWxzZSBpZiAobGluZS50eXBlID09PSAnTGluZVN0cmluZycpIGNvb3JkcyA9IGxpbmUuY29vcmRpbmF0ZXM7XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ2lucHV0IG11c3QgYmUgYSBMaW5lU3RyaW5nIEZlYXR1cmUgb3IgR2VvbWV0cnknKTtcblxuICAgIHZhciB0cmF2ZWxsZWQgPSAwO1xuICAgIHZhciBvdmVyc2hvdCwgZGlyZWN0aW9uLCBpbnRlcnBvbGF0ZWQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHN0YXJ0RGlzdCA+PSB0cmF2ZWxsZWQgJiYgaSA9PT0gY29vcmRzLmxlbmd0aCAtIDEpIGJyZWFrO1xuICAgICAgICBlbHNlIGlmICh0cmF2ZWxsZWQgPiBzdGFydERpc3QgJiYgc2xpY2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBvdmVyc2hvdCA9IHN0YXJ0RGlzdCAtIHRyYXZlbGxlZDtcbiAgICAgICAgICAgIGlmICghb3ZlcnNob3QpIHtcbiAgICAgICAgICAgICAgICBzbGljZS5wdXNoKGNvb3Jkc1tpXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmVTdHJpbmcoc2xpY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aW9uID0gYmVhcmluZyhjb29yZHNbaV0sIGNvb3Jkc1tpIC0gMV0pIC0gMTgwO1xuICAgICAgICAgICAgaW50ZXJwb2xhdGVkID0gZGVzdGluYXRpb24oY29vcmRzW2ldLCBvdmVyc2hvdCwgZGlyZWN0aW9uLCB1bml0cyk7XG4gICAgICAgICAgICBzbGljZS5wdXNoKGludGVycG9sYXRlZC5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhdmVsbGVkID49IHN0b3BEaXN0KSB7XG4gICAgICAgICAgICBvdmVyc2hvdCA9IHN0b3BEaXN0IC0gdHJhdmVsbGVkO1xuICAgICAgICAgICAgaWYgKCFvdmVyc2hvdCkge1xuICAgICAgICAgICAgICAgIHNsaWNlLnB1c2goY29vcmRzW2ldKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZVN0cmluZyhzbGljZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBiZWFyaW5nKGNvb3Jkc1tpXSwgY29vcmRzW2kgLSAxXSkgLSAxODA7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZWQgPSBkZXN0aW5hdGlvbihjb29yZHNbaV0sIG92ZXJzaG90LCBkaXJlY3Rpb24sIHVuaXRzKTtcbiAgICAgICAgICAgIHNsaWNlLnB1c2goaW50ZXJwb2xhdGVkLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgICAgIHJldHVybiBsaW5lU3RyaW5nKHNsaWNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmF2ZWxsZWQgPj0gc3RhcnREaXN0KSB7XG4gICAgICAgICAgICBzbGljZS5wdXNoKGNvb3Jkc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA9PT0gY29vcmRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBsaW5lU3RyaW5nKHNsaWNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYXZlbGxlZCArPSBkaXN0YW5jZShjb29yZHNbaV0sIGNvb3Jkc1tpICsgMV0sIHVuaXRzKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVTdHJpbmcoY29vcmRzW2Nvb3Jkcy5sZW5ndGggLSAxXSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvbGluZS1zbGljZS1hbG9uZy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRpc3RhbmNlID0gcmVxdWlyZSgnQHR1cmYvZGlzdGFuY2UnKTtcbnZhciB0dXJmQkJveCA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIHBvaW50ID0gaGVscGVycy5wb2ludDtcbnZhciBwb2x5Z29uID0gaGVscGVycy5wb2x5Z29uO1xudmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3F1YXJlIGdyaWQgZnJvbSBhIGJvdW5kaW5nIGJveCwge0BsaW5rIEZlYXR1cmV9IG9yIHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0uXG4gKlxuICogQG5hbWUgc3F1YXJlR3JpZFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fEZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gYmJveCBleHRlbnQgaW4gW21pblgsIG1pblksIG1heFgsIG1heFldIG9yZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gY2VsbFNpemUgd2lkdGggb2YgZWFjaCBjZWxsXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIHVzZWQgaW4gY2FsY3VsYXRpbmcgY2VsbFNpemUsIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHBhcmFtIHtib29sZWFufSBbY29tcGxldGVseVdpdGhpbj1mYWxzZV0gYWRqdXN0IHdpZHRoICYgaGVpZ2h0IGNlbGxTaXplIHRvIGZpdCBleGFjdGx5IHdpdGhpbiBiYm94XG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248UG9seWdvbj59IGdyaWQgYSBncmlkIG9mIHBvbHlnb25zXG4gKiBAZXhhbXBsZVxuICogdmFyIGJib3ggPSBbLTk1LCAzMCAsLTg1LCA0MF07XG4gKiB2YXIgY2VsbFNpemUgPSA1MDtcbiAqIHZhciB1bml0cyA9ICdtaWxlcyc7XG4gKlxuICogdmFyIHNxdWFyZUdyaWQgPSB0dXJmLnNxdWFyZUdyaWQoYmJveCwgY2VsbFNpemUsIHVuaXRzKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbc3F1YXJlR3JpZF1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcXVhcmVHcmlkKGJib3gsIGNlbGxTaXplLCB1bml0cywgY29tcGxldGVseVdpdGhpbikge1xuICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKCFiYm94KSB0aHJvdyBuZXcgRXJyb3IoJ2Jib3ggaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYmJveCkpIGJib3ggPSB0dXJmQkJveChiYm94KTsgLy8gQ29udmVydCBHZW9KU09OIHRvIGJib3hcbiAgICBpZiAoYmJveC5sZW5ndGggIT09IDQpIHRocm93IG5ldyBFcnJvcignYmJveCBtdXN0IGNvbnRhaW4gNCBudW1iZXJzJyk7XG5cbiAgICB2YXIgd2VzdCA9IGJib3hbMF07XG4gICAgdmFyIHNvdXRoID0gYmJveFsxXTtcbiAgICB2YXIgZWFzdCA9IGJib3hbMl07XG4gICAgdmFyIG5vcnRoID0gYmJveFszXTtcblxuICAgIC8vIGRpc3RhbmNlXG4gICAgdmFyIHhEaXN0YW5jZSA9IGRpc3RhbmNlKHBvaW50KFt3ZXN0LCBzb3V0aF0pLCBwb2ludChbZWFzdCwgc291dGhdKSwgdW5pdHMpO1xuICAgIHZhciB5RGlzdGFuY2UgPSBkaXN0YW5jZShwb2ludChbd2VzdCwgc291dGhdKSwgcG9pbnQoW3dlc3QsIG5vcnRoXSksIHVuaXRzKTtcblxuICAgIC8vIHJvd3MgJiBjb2x1bW5zXG4gICAgdmFyIGNvbHVtbnMgPSBNYXRoLmNlaWwoeERpc3RhbmNlIC8gY2VsbFNpemUpO1xuICAgIHZhciByb3dzID0gTWF0aC5jZWlsKHlEaXN0YW5jZSAvIGNlbGxTaXplKTtcblxuICAgIC8vIGNvbHVtbnMgfCB3aWR0aCB8IHhcbiAgICB2YXIgeEZyYWN0aW9uID0gY2VsbFNpemUgLyB4RGlzdGFuY2U7XG4gICAgdmFyIGNlbGxXaWR0aCA9IHhGcmFjdGlvbiAqIChlYXN0IC0gd2VzdCk7XG4gICAgaWYgKGNvbXBsZXRlbHlXaXRoaW4gPT09IHRydWUpIGNlbGxXaWR0aCA9IGNlbGxXaWR0aCAqICgoeERpc3RhbmNlIC8gY2VsbFNpemUpIC8gY29sdW1ucyk7XG5cbiAgICAvLyByb3dzIHwgaGVpZ2h0IHwgeVxuICAgIHZhciB5RnJhY3Rpb24gPSBjZWxsU2l6ZSAvIHlEaXN0YW5jZTtcbiAgICB2YXIgY2VsbEhlaWdodCA9IHlGcmFjdGlvbiAqIChub3J0aCAtIHNvdXRoKTtcbiAgICBpZiAoY29tcGxldGVseVdpdGhpbiA9PT0gdHJ1ZSkgY2VsbEhlaWdodCA9IGNlbGxIZWlnaHQgKiAoKHlEaXN0YW5jZSAvIGNlbGxTaXplKSAvIHJvd3MpO1xuXG4gICAgLy8gaXRlcmF0ZSBvdmVyIGNvbHVtbnMgJiByb3dzXG4gICAgdmFyIGN1cnJlbnRYID0gd2VzdDtcbiAgICBmb3IgKHZhciBjb2x1bW4gPSAwOyBjb2x1bW4gPCBjb2x1bW5zOyBjb2x1bW4rKykge1xuICAgICAgICB2YXIgY3VycmVudFkgPSBzb3V0aDtcbiAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgcm93czsgcm93KyspIHtcbiAgICAgICAgICAgIHZhciBjZWxsUG9seSA9IHBvbHlnb24oW1tcbiAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZXSxcbiAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZICsgY2VsbEhlaWdodF0sXG4gICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WSArIGNlbGxIZWlnaHRdLFxuICAgICAgICAgICAgICAgIFtjdXJyZW50WCArIGNlbGxXaWR0aCwgY3VycmVudFldLFxuICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFldXG4gICAgICAgICAgICBdXSk7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goY2VsbFBvbHkpO1xuXG4gICAgICAgICAgICBjdXJyZW50WSArPSBjZWxsSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRYICs9IGNlbGxXaWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uKHJlc3VsdHMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3NxdWFyZS1ncmlkL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY29vcmRFYWNoID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpLmNvb3JkRWFjaDtcblxuLyoqXG4gKiBUYWtlcyBhIEdlb0pTT04gRmVhdHVyZSBvciBGZWF0dXJlQ29sbGVjdGlvbiBhbmQgdHJ1bmNhdGVzIHRoZSBwcmVjaXNpb24gb2YgdGhlIGdlb21ldHJ5LlxuICpcbiAqIEBuYW1lIHRydW5jYXRlXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBhbnkgR2VvSlNPTiBGZWF0dXJlLCBGZWF0dXJlQ29sbGVjdGlvbiwgR2VvbWV0cnkgb3IgR2VvbWV0cnlDb2xsZWN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249Nl0gY29vcmRpbmF0ZSBkZWNpbWFsIHByZWNpc2lvblxuICogQHBhcmFtIHtudW1iZXJ9IFtjb29yZGluYXRlcz0zXSBtYXhpbXVtIG51bWJlciBvZiBjb29yZGluYXRlcyAocHJpbWFybHkgdXNlZCB0byByZW1vdmUgeiBjb29yZGluYXRlcylcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW211dGF0ZT1mYWxzZV0gYWxsb3dzIEdlb0pTT04gaW5wdXQgdG8gYmUgbXV0YXRlZCAoc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaWYgdHJ1ZSlcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlPGFueT59IGxheWVyIHdpdGggdHJ1bmNhdGVkIGdlb21ldHJ5XG4gKiBAZXhhbXBsZVxuICogdmFyIHBvaW50ID0gdHVyZi5wb2ludChbXG4gKiAgICAgNzAuNDY5MjMwNTU1NjY4NTksXG4gKiAgICAgNTguMTEwODg4OTA4MDI5MDYsXG4gKiAgICAgMTUwOFxuICogXSk7XG4gKlxuICogdmFyIHRydW5jYXRlZCA9IHR1cmYudHJ1bmNhdGUocG9pbnQpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFt0cnVuY2F0ZWRdO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uLCBwcmVjaXNpb24sIGNvb3JkaW5hdGVzLCBtdXRhdGUpIHtcbiAgICAvLyBkZWZhdWx0IHBhcmFtc1xuICAgIHByZWNpc2lvbiA9IChwcmVjaXNpb24gPT09IHVuZGVmaW5lZCB8fCBwcmVjaXNpb24gPT09IG51bGwgfHwgaXNOYU4ocHJlY2lzaW9uKSkgPyA2IDogcHJlY2lzaW9uO1xuICAgIGNvb3JkaW5hdGVzID0gKGNvb3JkaW5hdGVzID09PSB1bmRlZmluZWQgfHwgY29vcmRpbmF0ZXMgPT09IG51bGwgfHwgaXNOYU4oY29vcmRpbmF0ZXMpKSA/IDMgOiBjb29yZGluYXRlcztcblxuICAgIC8vIHZhbGlkYXRpb25cbiAgICBpZiAoIWdlb2pzb24pIHRocm93IG5ldyBFcnJvcignPGdlb2pzb24+IGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKHR5cGVvZiBwcmVjaXNpb24gIT09ICdudW1iZXInKSB0aHJvdyBuZXcgRXJyb3IoJzxwcmVjaXNpb24+IG11c3QgYmUgYSBudW1iZXInKTtcbiAgICBpZiAodHlwZW9mIGNvb3JkaW5hdGVzICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKCc8Y29vcmRpbmF0ZXM+IG11c3QgYmUgYSBudW1iZXInKTtcblxuICAgIC8vIHByZXZlbnQgaW5wdXQgbXV0YXRpb25cbiAgICBpZiAobXV0YXRlID09PSBmYWxzZSB8fCBtdXRhdGUgPT09IHVuZGVmaW5lZCkgZ2VvanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZ2VvanNvbikpO1xuXG4gICAgdmFyIGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuXG4gICAgLy8gVHJ1bmNhdGUgQ29vcmRpbmF0ZXNcbiAgICBjb29yZEVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICB0cnVuY2F0ZShjb29yZHMsIGZhY3RvciwgY29vcmRpbmF0ZXMpO1xuICAgIH0pO1xuICAgIHJldHVybiBnZW9qc29uO1xufTtcblxuLyoqXG4gKiBUcnVuY2F0ZSBDb29yZGluYXRlcyAtIE11dGF0ZXMgY29vcmRpbmF0ZXMgaW4gcGxhY2VcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBjb29yZHMgR2VvbWV0cnkgQ29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYWN0b3Igcm91bmRpbmcgZmFjdG9yIGZvciBjb29yZGluYXRlIGRlY2ltYWwgcHJlY2lzaW9uXG4gKiBAcGFyYW0ge251bWJlcn0gY29vcmRpbmF0ZXMgbWF4aW11bSBudW1iZXIgb2YgY29vcmRpbmF0ZXMgKHByaW1hcmx5IHVzZWQgdG8gcmVtb3ZlIHogY29vcmRpbmF0ZXMpXG4gKiBAcmV0dXJucyB7QXJyYXk8YW55Pn0gbXV0YXRlZCBjb29yZGluYXRlc1xuICovXG5mdW5jdGlvbiB0cnVuY2F0ZShjb29yZHMsIGZhY3RvciwgY29vcmRpbmF0ZXMpIHtcbiAgICAvLyBSZW1vdmUgZXh0cmEgY29vcmRpbmF0ZXMgKHVzdWFsbHkgZWxldmF0aW9uIGNvb3JkaW5hdGVzIGFuZCBtb3JlKVxuICAgIGlmIChjb29yZHMubGVuZ3RoID4gY29vcmRpbmF0ZXMpIGNvb3Jkcy5zcGxpY2UoY29vcmRpbmF0ZXMsIGNvb3Jkcy5sZW5ndGgpO1xuXG4gICAgLy8gVHJ1bmNhdGUgY29vcmRpbmF0ZSBkZWNpbWFsc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvb3Jkc1tpXSA9IE1hdGgucm91bmQoY29vcmRzW2ldICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIGNvb3Jkcztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3RydW5jYXRlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZGVzdGluYXRpb24gPSByZXF1aXJlKCdAdHVyZi9kZXN0aW5hdGlvbicpO1xudmFyIGNpcmNsZSA9IHJlcXVpcmUoJ0B0dXJmL2NpcmNsZScpO1xudmFyIGxpbmVTdHJpbmcgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykubGluZVN0cmluZztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2lyY3VsYXIgYXJjLCBvZiBhIGNpcmNsZSBvZiB0aGUgZ2l2ZW4gcmFkaXVzIGFuZCBjZW50ZXIgcG9pbnQsIGJldHdlZW4gYmVhcmluZzEgYW5kIGJlYXJpbmcyO1xuICogMCBiZWFyaW5nIGlzIE5vcnRoIG9mIGNlbnRlciBwb2ludCwgcG9zaXRpdmUgY2xvY2t3aXNlLlxuICpcbiAqIEBuYW1lIGxpbmVBcmNcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2ludD59IGNlbnRlciBjZW50ZXIgcG9pbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgcmFkaXVzIG9mIHRoZSBjaXJjbGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWFyaW5nMSBhbmdsZSwgaW4gZGVjaW1hbCBkZWdyZWVzLCBvZiB0aGUgZmlyc3QgcmFkaXVzIG9mIHRoZSBhcmNcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWFyaW5nMiBhbmdsZSwgaW4gZGVjaW1hbCBkZWdyZWVzLCBvZiB0aGUgc2Vjb25kIHJhZGl1cyBvZiB0aGUgYXJjXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0ZXBzPTY0XSBudW1iZXIgb2Ygc3RlcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHM9a2lsb21ldGVyc10gbWlsZXMsIGtpbG9tZXRlcnMsIGRlZ3JlZXMsIG9yIHJhZGlhbnNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBsaW5lIGFyY1xuICogQGV4YW1wbGVcbiAqIHZhciBjZW50ZXIgPSB0dXJmLnBvaW50KFstNzUsIDQwXSk7XG4gKiB2YXIgcmFkaXVzID0gNTtcbiAqIHZhciBiZWFyaW5nMSA9IDI1O1xuICogdmFyIGJlYXJpbmcyID0gNDc7XG4gKlxuICogdmFyIGFyYyA9IHR1cmYubGluZUFyYyhjZW50ZXIsIHJhZGl1cywgYmVhcmluZzEsIGJlYXJpbmcyKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbY2VudGVyLCBhcmNdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNlbnRlciwgcmFkaXVzLCBiZWFyaW5nMSwgYmVhcmluZzIsIHN0ZXBzLCB1bml0cykge1xuICAgIC8vIHZhbGlkYXRpb25cbiAgICBpZiAoIWNlbnRlcikgdGhyb3cgbmV3IEVycm9yKCdjZW50ZXIgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoYmVhcmluZzEgPT09IHVuZGVmaW5lZCB8fCBiZWFyaW5nMSA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdiZWFyaW5nMSBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChiZWFyaW5nMiA9PT0gdW5kZWZpbmVkIHx8IGJlYXJpbmcyID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ2JlYXJpbmcyIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCFyYWRpdXMpIHRocm93IG5ldyBFcnJvcigncmFkaXVzIGlzIHJlcXVpcmVkJyk7XG5cbiAgICAvLyBkZWZhdWx0IHBhcmFtc1xuICAgIHN0ZXBzID0gc3RlcHMgfHwgNjQ7XG5cbiAgICB2YXIgYW5nbGUxID0gY29udmVydEFuZ2xlVG8zNjAoYmVhcmluZzEpO1xuICAgIHZhciBhbmdsZTIgPSBjb252ZXJ0QW5nbGVUbzM2MChiZWFyaW5nMik7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBjZW50ZXIucHJvcGVydGllcztcblxuICAgIC8vIGhhbmRsZSBhbmdsZSBwYXJhbWV0ZXJzXG4gICAgaWYgKGFuZ2xlMSA9PT0gYW5nbGUyKSB7XG4gICAgICAgIHJldHVybiBsaW5lU3RyaW5nKGNpcmNsZShjZW50ZXIsIHJhZGl1cywgc3RlcHMsIHVuaXRzKS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSwgcHJvcGVydGllcyk7XG4gICAgfVxuICAgIHZhciBhcmNTdGFydERlZ3JlZSA9IGFuZ2xlMTtcbiAgICB2YXIgYXJjRW5kRGVncmVlID0gKGFuZ2xlMSA8IGFuZ2xlMikgPyBhbmdsZTIgOiBhbmdsZTIgKyAzNjA7XG5cbiAgICB2YXIgYWxmYSA9IGFyY1N0YXJ0RGVncmVlO1xuICAgIHZhciBjb29yZGluYXRlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChhbGZhIDwgYXJjRW5kRGVncmVlKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzLnB1c2goZGVzdGluYXRpb24oY2VudGVyLCByYWRpdXMsIGFsZmEsIHVuaXRzKS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIGkrKztcbiAgICAgICAgYWxmYSA9IGFyY1N0YXJ0RGVncmVlICsgaSAqIDM2MCAvIHN0ZXBzO1xuICAgIH1cbiAgICBpZiAoYWxmYSA+IGFyY0VuZERlZ3JlZSkge1xuICAgICAgICBjb29yZGluYXRlcy5wdXNoKGRlc3RpbmF0aW9uKGNlbnRlciwgcmFkaXVzLCBhcmNFbmREZWdyZWUsIHVuaXRzKS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBsaW5lU3RyaW5nKGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzKTtcbn07XG5cblxuLyoqXG4gKiBUYWtlcyBhbnkgYW5nbGUgaW4gIGRlZ3JlZXNcbiAqIGFuZCByZXR1cm5zIGEgdmFsaWQgYW5nbGUgYmV0d2VlbiAwLTM2MCBkZWdyZWVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbGZhIGFuZ2xlIGJldHdlZW4gLTE4MC0xODAgZGVncmVlc1xuICogQHJldHVybnMge251bWJlcn0gYW5nbGUgYmV0d2VlbiAwLTM2MCBkZWdyZWVzXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRBbmdsZVRvMzYwKGFsZmEpIHtcbiAgICB2YXIgYmV0YSA9IGFsZmEgJSAzNjA7XG4gICAgaWYgKGJldGEgPCAwKSB7XG4gICAgICAgIGJldGEgKz0gMzYwO1xuICAgIH1cbiAgICByZXR1cm4gYmV0YTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtYXJjL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi9saWIva2V5cy5qcycpO1xudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9saWIvaXNfYXJndW1lbnRzLmpzJyk7XG5cbnZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0cy5zdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcbiAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgeC5sZW5ndGggIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG4gIHZhciBpLCBrZXk7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XG4gIH1cbiAgaWYgKGlzQnVmZmVyKGEpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcbiAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG4vKiBVVE0gLyBXR1MtODQgQ29udmVyc2lvbiBGdW5jdGlvbnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMpIENocmlzIFZlbmVzcyAyMDE0LTIwMTYgICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUlUIExpY2VuY2UgICovXG4vKiB3d3cubW92YWJsZS10eXBlLmNvLnVrL3NjcmlwdHMvbGF0bG9uZy11dG0tbWdycy5odG1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiB3d3cubW92YWJsZS10eXBlLmNvLnVrL3NjcmlwdHMvZ2VvZGVzeS9kb2NzL21vZHVsZS11dG0uaHRtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5cbid1c2Ugc3RyaWN0JztcbmlmICh0eXBlb2YgbW9kdWxlIT0ndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgdmFyIExhdExvbiA9IHJlcXVpcmUoJy4vbGF0bG9uLWVsbGlwc29pZGFsLmpzJyk7IC8vIOKJoSBpbXBvcnQgTGF0TG9uIGZyb20gJ2xhdGxvbi1lbGxpcHNvaWRhbC5qcydcblxuXG4vKipcbiAqIENvbnZlcnQgYmV0d2VlbiBVbml2ZXJzYWwgVHJhbnN2ZXJzZSBNZXJjYXRvciBjb29yZGluYXRlcyBhbmQgV0dTIDg0IGxhdGl0dWRlL2xvbmdpdHVkZSBwb2ludHMuXG4gKlxuICogTWV0aG9kIGJhc2VkIG9uIEthcm5leSAyMDExIOKAmFRyYW5zdmVyc2UgTWVyY2F0b3Igd2l0aCBhbiBhY2N1cmFjeSBvZiBhIGZldyBuYW5vbWV0ZXJz4oCZLFxuICogYnVpbGRpbmcgb24gS3LDvGdlciAxOTEyIOKAmEtvbmZvcm1lIEFiYmlsZHVuZyBkZXMgRXJkZWxsaXBzb2lkcyBpbiBkZXIgRWJlbmXigJkuXG4gKlxuICogQG1vZHVsZSAgIHV0bVxuICogQHJlcXVpcmVzIGxhdGxvbi1lbGxpcHNvaWRhbFxuICovXG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgVXRtIGNvb3JkaW5hdGUgb2JqZWN0LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtICB7bnVtYmVyfSB6b25lIC0gVVRNIDbCsCBsb25naXR1ZGluYWwgem9uZSAoMS4uNjAgY292ZXJpbmcgMTgwwrBXLi4xODDCsEUpLlxuICogQHBhcmFtICB7c3RyaW5nfSBoZW1pc3BoZXJlIC0gTiBmb3Igbm9ydGhlcm4gaGVtaXNwaGVyZSwgUyBmb3Igc291dGhlcm4gaGVtaXNwaGVyZS5cbiAqIEBwYXJhbSAge251bWJlcn0gZWFzdGluZyAtIEVhc3RpbmcgaW4gbWV0cmVzIGZyb20gZmFsc2UgZWFzdGluZyAoLTUwMGttIGZyb20gY2VudHJhbCBtZXJpZGlhbikuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG5vcnRoaW5nIC0gTm9ydGhpbmcgaW4gbWV0cmVzIGZyb20gZXF1YXRvciAoTikgb3IgZnJvbSBmYWxzZSBub3J0aGluZyAtMTAsMDAwa20gKFMpLlxuICogQHBhcmFtICB7TGF0TG9uLmRhdHVtfSBbZGF0dW09V0dTODRdIC0gRGF0dW0gVVRNIGNvb3JkaW5hdGUgaXMgYmFzZWQgb24uXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtjb252ZXJnZW5jZV0gLSBNZXJpZGlhbiBjb252ZXJnZW5jZSAoYmVhcmluZyBvZiBncmlkIG5vcnRoIGNsb2Nrd2lzZSBmcm9tIHRydWVcbiAqICAgICAgICAgICAgICAgICAgbm9ydGgpLCBpbiBkZWdyZWVzXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtzY2FsZV0gLSBHcmlkIHNjYWxlIGZhY3RvclxuICogQHRocm93cyB7RXJyb3J9ICBJbnZhbGlkIFVUTSBjb29yZGluYXRlXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHV0bUNvb3JkID0gbmV3IFV0bSgzMSwgJ04nLCA0NDgyNTEsIDU0MTE5MzIpO1xuICovXG5mdW5jdGlvbiBVdG0oem9uZSwgaGVtaXNwaGVyZSwgZWFzdGluZywgbm9ydGhpbmcsIGRhdHVtLCBjb252ZXJnZW5jZSwgc2NhbGUpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXRtKSkgeyAvLyBhbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgJ25ldydcbiAgICAgICAgcmV0dXJuIG5ldyBVdG0oem9uZSwgaGVtaXNwaGVyZSwgZWFzdGluZywgbm9ydGhpbmcsIGRhdHVtLCBjb252ZXJnZW5jZSwgc2NhbGUpO1xuICAgIH1cblxuICAgIGlmIChkYXR1bSA9PT0gdW5kZWZpbmVkKSBkYXR1bSA9IExhdExvbi5kYXR1bS5XR1M4NDsgLy8gZGVmYXVsdCBpZiBub3Qgc3VwcGxpZWRcbiAgICBpZiAoY29udmVyZ2VuY2UgPT09IHVuZGVmaW5lZCkgY29udmVyZ2VuY2UgPSBudWxsOyAgIC8vIGRlZmF1bHQgaWYgbm90IHN1cHBsaWVkXG4gICAgaWYgKHNjYWxlID09PSB1bmRlZmluZWQpIHNjYWxlID0gbnVsbDsgICAgICAgICAgICAgICAvLyBkZWZhdWx0IGlmIG5vdCBzdXBwbGllZFxuXG4gICAgaWYgKCEoMTw9em9uZSAmJiB6b25lPD02MCkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBVVE0gem9uZSAnK3pvbmUpO1xuICAgIGlmICghaGVtaXNwaGVyZS5tYXRjaCgvW05TXS9pKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFVUTSBoZW1pc3BoZXJlICcraGVtaXNwaGVyZSk7XG4gICAgLy8gcmFuZ2UtY2hlY2sgZWFzdGluZy9ub3J0aGluZyAod2l0aCA0MGttIG92ZXJsYXAgYmV0d2VlbiB6b25lcykgLSBpcyB0aGlzIHdvcnRod2hpbGU/XG4gICAgLy9pZiAoISgxMjBlMzw9ZWFzdGluZyAmJiBlYXN0aW5nPD04ODBlMykpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBVVE0gZWFzdGluZyAnKyBlYXN0aW5nKTtcbiAgICAvL2lmICghKDA8PW5vcnRoaW5nICYmIG5vcnRoaW5nPD0xMDAwMGUzKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFVUTSBub3J0aGluZyAnKyBub3J0aGluZyk7XG5cbiAgICB0aGlzLnpvbmUgPSBOdW1iZXIoem9uZSk7XG4gICAgdGhpcy5oZW1pc3BoZXJlID0gaGVtaXNwaGVyZS50b1VwcGVyQ2FzZSgpO1xuICAgIHRoaXMuZWFzdGluZyA9IE51bWJlcihlYXN0aW5nKTtcbiAgICB0aGlzLm5vcnRoaW5nID0gTnVtYmVyKG5vcnRoaW5nKTtcbiAgICB0aGlzLmRhdHVtID0gZGF0dW07XG4gICAgdGhpcy5jb252ZXJnZW5jZSA9IGNvbnZlcmdlbmNlPT09bnVsbCA/IG51bGwgOiBOdW1iZXIoY29udmVyZ2VuY2UpO1xuICAgIHRoaXMuc2NhbGUgPSBzY2FsZT09PW51bGwgPyBudWxsIDogTnVtYmVyKHNjYWxlKTtcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIGxhdGl0dWRlL2xvbmdpdHVkZSB0byBVVE0gY29vcmRpbmF0ZS5cbiAqXG4gKiBJbXBsZW1lbnRzIEthcm5leeKAmXMgbWV0aG9kLCB1c2luZyBLcsO8Z2VyIHNlcmllcyB0byBvcmRlciBuXjYsIGdpdmluZyByZXN1bHRzIGFjY3VyYXRlIHRvIDVubSBmb3JcbiAqIGRpc3RhbmNlcyB1cCB0byAzOTAwa20gZnJvbSB0aGUgY2VudHJhbCBtZXJpZGlhbi5cbiAqXG4gKiBAcmV0dXJucyB7VXRtfSAgIFVUTSBjb29yZGluYXRlLlxuICogQHRocm93cyAge0Vycm9yfSBJZiBwb2ludCBub3QgdmFsaWQsIGlmIHBvaW50IG91dHNpZGUgbGF0aXR1ZGUgcmFuZ2UuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIGxhdGxvbmcgPSBuZXcgTGF0TG9uKDQ4Ljg1ODIsIDIuMjk0NSk7XG4gKiAgIHZhciB1dG1Db29yZCA9IGxhdGxvbmcudG9VdG0oKTsgLy8gdXRtQ29vcmQudG9TdHJpbmcoKTogJzMxIE4gNDQ4MjUyIDU0MTE5MzMnXG4gKi9cbkxhdExvbi5wcm90b3R5cGUudG9VdG0gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNOYU4odGhpcy5sYXQpIHx8IGlzTmFOKHRoaXMubG9uKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBvaW50Jyk7XG4gICAgaWYgKCEoLTgwPHRoaXMubGF0ICYmIHRoaXMubGF0PDg0KSkgdGhyb3cgbmV3IEVycm9yKCdPdXRzaWRlIFVUTSBsaW1pdHMgKCcrdGhpcy5sYXQrJywnK3RoaXMubG9uKycpJyk7XG5cbiAgICB2YXIgZmFsc2VFYXN0aW5nID0gNTAwZTMsIGZhbHNlTm9ydGhpbmcgPSAxMDAwMGUzO1xuXG4gICAgdmFyIHpvbmUgPSBNYXRoLmZsb29yKCh0aGlzLmxvbisxODApLzYpICsgMTsgLy8gbG9uZ2l0dWRpbmFsIHpvbmVcbiAgICB2YXIgzrswID0gKCh6b25lLTEpKjYgLSAxODAgKyAzKS50b1JhZGlhbnMoKTsgLy8gbG9uZ2l0dWRlIG9mIGNlbnRyYWwgbWVyaWRpYW5cblxuICAgIC8vIC0tLS0gaGFuZGxlIE5vcndheS9TdmFsYmFyZCBleGNlcHRpb25zXG4gICAgLy8gZ3JpZCB6b25lcyBhcmUgOMKwIHRhbGw7IDDCsE4gaXMgb2Zmc2V0IDEwIGludG8gbGF0aXR1ZGUgYmFuZHMgYXJyYXlcbiAgICB2YXIgbWdyc0xhdEJhbmRzID0gJ0NERUZHSEpLTE1OUFFSU1RVVldYWCc7IC8vIFggaXMgcmVwZWF0ZWQgZm9yIDgwLTg0wrBOXG4gICAgdmFyIGxhdEJhbmQgPSBtZ3JzTGF0QmFuZHMuY2hhckF0KE1hdGguZmxvb3IodGhpcy5sYXQvOCsxMCkpO1xuICAgIC8vIGFkanVzdCB6b25lICYgY2VudHJhbCBtZXJpZGlhbiBmb3IgTm9yd2F5XG4gICAgaWYgKHpvbmU9PTMxICYmIGxhdEJhbmQ9PSdWJyAmJiB0aGlzLmxvbj49IDMpIHsgem9uZSsrOyDOuzAgKz0gKDYpLnRvUmFkaWFucygpOyB9XG4gICAgLy8gYWRqdXN0IHpvbmUgJiBjZW50cmFsIG1lcmlkaWFuIGZvciBTdmFsYmFyZFxuICAgIGlmICh6b25lPT0zMiAmJiBsYXRCYW5kPT0nWCcgJiYgdGhpcy5sb248ICA5KSB7IHpvbmUtLTsgzrswIC09ICg2KS50b1JhZGlhbnMoKTsgfVxuICAgIGlmICh6b25lPT0zMiAmJiBsYXRCYW5kPT0nWCcgJiYgdGhpcy5sb24+PSA5KSB7IHpvbmUrKzsgzrswICs9ICg2KS50b1JhZGlhbnMoKTsgfVxuICAgIGlmICh6b25lPT0zNCAmJiBsYXRCYW5kPT0nWCcgJiYgdGhpcy5sb248IDIxKSB7IHpvbmUtLTsgzrswIC09ICg2KS50b1JhZGlhbnMoKTsgfVxuICAgIGlmICh6b25lPT0zNCAmJiBsYXRCYW5kPT0nWCcgJiYgdGhpcy5sb24+PTIxKSB7IHpvbmUrKzsgzrswICs9ICg2KS50b1JhZGlhbnMoKTsgfVxuICAgIGlmICh6b25lPT0zNiAmJiBsYXRCYW5kPT0nWCcgJiYgdGhpcy5sb248IDMzKSB7IHpvbmUtLTsgzrswIC09ICg2KS50b1JhZGlhbnMoKTsgfVxuICAgIGlmICh6b25lPT0zNiAmJiBsYXRCYW5kPT0nWCcgJiYgdGhpcy5sb24+PTMzKSB7IHpvbmUrKzsgzrswICs9ICg2KS50b1JhZGlhbnMoKTsgfVxuXG4gICAgdmFyIM+GID0gdGhpcy5sYXQudG9SYWRpYW5zKCk7ICAgICAgLy8gbGF0aXR1ZGUgwrEgZnJvbSBlcXVhdG9yXG4gICAgdmFyIM67ID0gdGhpcy5sb24udG9SYWRpYW5zKCkgLSDOuzA7IC8vIGxvbmdpdHVkZSDCsSBmcm9tIGNlbnRyYWwgbWVyaWRpYW5cblxuICAgIHZhciBhID0gdGhpcy5kYXR1bS5lbGxpcHNvaWQuYSwgZiA9IHRoaXMuZGF0dW0uZWxsaXBzb2lkLmY7XG4gICAgLy8gV0dTIDg0OiBhID0gNjM3ODEzNywgYiA9IDYzNTY3NTIuMzE0MjQ1LCBmID0gMS8yOTguMjU3MjIzNTYzO1xuXG4gICAgdmFyIGswID0gMC45OTk2OyAvLyBVVE0gc2NhbGUgb24gdGhlIGNlbnRyYWwgbWVyaWRpYW5cblxuICAgIC8vIC0tLS0gZWFzdGluZywgbm9ydGhpbmc6IEthcm5leSAyMDExIEVxIDctMTQsIDI5LCAzNTpcblxuICAgIHZhciBlID0gTWF0aC5zcXJ0KGYqKDItZikpOyAvLyBlY2NlbnRyaWNpdHlcbiAgICB2YXIgbiA9IGYgLyAoMiAtIGYpOyAgICAgICAgLy8gM3JkIGZsYXR0ZW5pbmdcbiAgICB2YXIgbjIgPSBuKm4sIG4zID0gbipuMiwgbjQgPSBuKm4zLCBuNSA9IG4qbjQsIG42ID0gbipuNTsgLy8gVE9ETzogY29tcGFyZSBIb3JuZXItZm9ybSBhY2N1cmFjeT9cblxuICAgIHZhciBjb3POuyA9IE1hdGguY29zKM67KSwgc2luzrsgPSBNYXRoLnNpbijOuyksIHRhbs67ID0gTWF0aC50YW4ozrspO1xuXG4gICAgdmFyIM+EID0gTWF0aC50YW4oz4YpOyAvLyDPhCDiiaEgdGFuz4YsIM+Eyrkg4omhIHRhbs+Gyrk7IHByaW1lICjKuSkgaW5kaWNhdGVzIGFuZ2xlcyBvbiB0aGUgY29uZm9ybWFsIHNwaGVyZVxuICAgIHZhciDPgyA9IE1hdGguc2luaChlKk1hdGguYXRhbmgoZSrPhC9NYXRoLnNxcnQoMSvPhCrPhCkpKTtcblxuICAgIHZhciDPhMq5ID0gz4QqTWF0aC5zcXJ0KDErz4Mqz4MpIC0gz4MqTWF0aC5zcXJ0KDErz4Qqz4QpO1xuXG4gICAgdmFyIM6+yrkgPSBNYXRoLmF0YW4yKM+EyrksIGNvc867KTtcbiAgICB2YXIgzrfKuSA9IE1hdGguYXNpbmgoc2luzrsgLyBNYXRoLnNxcnQoz4TKuSrPhMq5ICsgY29zzrsqY29zzrspKTtcblxuICAgIHZhciBBID0gYS8oMStuKSAqICgxICsgMS80Km4yICsgMS82NCpuNCArIDEvMjU2Km42KTsgLy8gMs+AQSBpcyB0aGUgY2lyY3VtZmVyZW5jZSBvZiBhIG1lcmlkaWFuXG5cbiAgICB2YXIgzrEgPSBbIG51bGwsIC8vIG5vdGUgzrEgaXMgb25lLWJhc2VkIGFycmF5ICg2dGggb3JkZXIgS3LDvGdlciBleHByZXNzaW9ucylcbiAgICAgICAgMS8yKm4gLSAyLzMqbjIgKyA1LzE2Km4zICsgICA0MS8xODAqbjQgLSAgICAgMTI3LzI4OCpuNSArICAgICAgNzg5MS8zNzgwMCpuNixcbiAgICAgICAgICAgICAgMTMvNDgqbjIgLSAgMy81Km4zICsgNTU3LzE0NDAqbjQgKyAgICAgMjgxLzYzMCpuNSAtIDE5ODM0MzMvMTkzNTM2MCpuNixcbiAgICAgICAgICAgICAgICAgICAgICAgNjEvMjQwKm4zIC0gIDEwMy8xNDAqbjQgKyAxNTA2MS8yNjg4MCpuNSArICAgMTY3NjAzLzE4MTQ0MCpuNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OTU2MS8xNjEyODAqbjQgLSAgICAgMTc5LzE2OCpuNSArIDY2MDE2NjEvNzI1NzYwMCpuNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNDcyOS84MDY0MCpuNSAtIDM0MTg4ODkvMTk5NTg0MCpuNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjEyMzc4OTQxLzMxOTMzNDQwMCpuNiBdO1xuXG4gICAgdmFyIM6+ID0gzr7KuTtcbiAgICBmb3IgKHZhciBqPTE7IGo8PTY7IGorKykgzr4gKz0gzrFbal0gKiBNYXRoLnNpbigyKmoqzr7KuSkgKiBNYXRoLmNvc2goMipqKs63yrkpO1xuXG4gICAgdmFyIM63ID0gzrfKuTtcbiAgICBmb3IgKHZhciBqPTE7IGo8PTY7IGorKykgzrcgKz0gzrFbal0gKiBNYXRoLmNvcygyKmoqzr7KuSkgKiBNYXRoLnNpbmgoMipqKs63yrkpO1xuXG4gICAgdmFyIHggPSBrMCAqIEEgKiDOtztcbiAgICB2YXIgeSA9IGswICogQSAqIM6+O1xuXG4gICAgLy8gLS0tLSBjb252ZXJnZW5jZTogS2FybmV5IDIwMTEgRXEgMjMsIDI0XG5cbiAgICB2YXIgcMq5ID0gMTtcbiAgICBmb3IgKHZhciBqPTE7IGo8PTY7IGorKykgcMq5ICs9IDIqairOsVtqXSAqIE1hdGguY29zKDIqairOvsq5KSAqIE1hdGguY29zaCgyKmoqzrfKuSk7XG4gICAgdmFyIHHKuSA9IDA7XG4gICAgZm9yICh2YXIgaj0xOyBqPD02OyBqKyspIHHKuSArPSAyKmoqzrFbal0gKiBNYXRoLnNpbigyKmoqzr7KuSkgKiBNYXRoLnNpbmgoMipqKs63yrkpO1xuXG4gICAgdmFyIM6zyrkgPSBNYXRoLmF0YW4oz4TKuSAvIE1hdGguc3FydCgxK8+Eyrkqz4TKuSkqdGFuzrspO1xuICAgIHZhciDOs8q6ID0gTWF0aC5hdGFuMihxyrksIHDKuSk7XG5cbiAgICB2YXIgzrMgPSDOs8q5ICsgzrPKujtcblxuICAgIC8vIC0tLS0gc2NhbGU6IEthcm5leSAyMDExIEVxIDI1XG5cbiAgICB2YXIgc2luz4YgPSBNYXRoLnNpbijPhik7XG4gICAgdmFyIGvKuSA9IE1hdGguc3FydCgxIC0gZSplKnNpbs+GKnNpbs+GKSAqIE1hdGguc3FydCgxICsgz4Qqz4QpIC8gTWF0aC5zcXJ0KM+Eyrkqz4TKuSArIGNvc867KmNvc867KTtcbiAgICB2YXIga8q6ID0gQSAvIGEgKiBNYXRoLnNxcnQocMq5KnDKuSArIHHKuSpxyrkpO1xuXG4gICAgdmFyIGsgPSBrMCAqIGvKuSAqIGvKujtcblxuICAgIC8vIC0tLS0tLS0tLS0tLVxuXG4gICAgLy8gc2hpZnQgeC95IHRvIGZhbHNlIG9yaWdpbnNcbiAgICB4ID0geCArIGZhbHNlRWFzdGluZzsgICAgICAgICAgICAgLy8gbWFrZSB4IHJlbGF0aXZlIHRvIGZhbHNlIGVhc3RpbmdcbiAgICBpZiAoeSA8IDApIHkgPSB5ICsgZmFsc2VOb3J0aGluZzsgLy8gbWFrZSB5IGluIHNvdXRoZXJuIGhlbWlzcGhlcmUgcmVsYXRpdmUgdG8gZmFsc2Ugbm9ydGhpbmdcblxuICAgIC8vIHJvdW5kIHRvIHJlYXNvbmFibGUgcHJlY2lzaW9uXG4gICAgeCA9IE51bWJlcih4LnRvRml4ZWQoNikpOyAvLyBubSBwcmVjaXNpb25cbiAgICB5ID0gTnVtYmVyKHkudG9GaXhlZCg2KSk7IC8vIG5tIHByZWNpc2lvblxuICAgIHZhciBjb252ZXJnZW5jZSA9IE51bWJlcijOsy50b0RlZ3JlZXMoKS50b0ZpeGVkKDkpKTtcbiAgICB2YXIgc2NhbGUgPSBOdW1iZXIoay50b0ZpeGVkKDEyKSk7XG5cbiAgICB2YXIgaCA9IHRoaXMubGF0Pj0wID8gJ04nIDogJ1MnOyAvLyBoZW1pc3BoZXJlXG5cbiAgICByZXR1cm4gbmV3IFV0bSh6b25lLCBoLCB4LCB5LCB0aGlzLmRhdHVtLCBjb252ZXJnZW5jZSwgc2NhbGUpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIFVUTSB6b25lL2Vhc3Rpbmcvbm9ydGhpbmcgY29vcmRpbmF0ZSB0byBsYXRpdHVkZS9sb25naXR1ZGVcbiAqXG4gKiBAcGFyYW0gICB7VXRtfSAgICB1dG1Db29yZCAtIFVUTSBjb29yZGluYXRlIHRvIGJlIGNvbnZlcnRlZCB0byBsYXRpdHVkZS9sb25naXR1ZGUuXG4gKiBAcmV0dXJucyB7TGF0TG9ufSBMYXRpdHVkZS9sb25naXR1ZGUgb2Ygc3VwcGxpZWQgZ3JpZCByZWZlcmVuY2UuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIGdyaWQgPSBuZXcgVXRtKDMxLCAnTicsIDQ0ODI1MS43OTUsIDU0MTE5MzIuNjc4KTtcbiAqICAgdmFyIGxhdGxvbmcgPSBncmlkLnRvTGF0TG9uRSgpOyAvLyBsYXRsb25nLnRvU3RyaW5nKCk6IDQ4wrA1MeKAsjI5LjUy4oCzTiwgMDAywrAxN+KAsjQwLjIw4oCzRVxuICovXG5VdG0ucHJvdG90eXBlLnRvTGF0TG9uRSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB6ID0gdGhpcy56b25lO1xuICAgIHZhciBoID0gdGhpcy5oZW1pc3BoZXJlO1xuICAgIHZhciB4ID0gdGhpcy5lYXN0aW5nO1xuICAgIHZhciB5ID0gdGhpcy5ub3J0aGluZztcblxuICAgIGlmIChpc05hTih6KSB8fCBpc05hTih4KSB8fCBpc05hTih5KSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvb3JkaW5hdGUnKTtcblxuICAgIHZhciBmYWxzZUVhc3RpbmcgPSA1MDBlMywgZmFsc2VOb3J0aGluZyA9IDEwMDAwZTM7XG5cbiAgICB2YXIgYSA9IHRoaXMuZGF0dW0uZWxsaXBzb2lkLmEsIGYgPSB0aGlzLmRhdHVtLmVsbGlwc29pZC5mO1xuICAgIC8vIFdHUyA4NDogIGEgPSA2Mzc4MTM3LCBiID0gNjM1Njc1Mi4zMTQyNDUsIGYgPSAxLzI5OC4yNTcyMjM1NjM7XG5cbiAgICB2YXIgazAgPSAwLjk5OTY7IC8vIFVUTSBzY2FsZSBvbiB0aGUgY2VudHJhbCBtZXJpZGlhblxuXG4gICAgeCA9IHggLSBmYWxzZUVhc3Rpbmc7ICAgICAgICAgICAgICAgLy8gbWFrZSB4IMKxIHJlbGF0aXZlIHRvIGNlbnRyYWwgbWVyaWRpYW5cbiAgICB5ID0gaD09J1MnID8geSAtIGZhbHNlTm9ydGhpbmcgOiB5OyAvLyBtYWtlIHkgwrEgcmVsYXRpdmUgdG8gZXF1YXRvclxuXG4gICAgLy8gLS0tLSBmcm9tIEthcm5leSAyMDExIEVxIDE1LTIyLCAzNjpcblxuICAgIHZhciBlID0gTWF0aC5zcXJ0KGYqKDItZikpOyAvLyBlY2NlbnRyaWNpdHlcbiAgICB2YXIgbiA9IGYgLyAoMiAtIGYpOyAgICAgICAgLy8gM3JkIGZsYXR0ZW5pbmdcbiAgICB2YXIgbjIgPSBuKm4sIG4zID0gbipuMiwgbjQgPSBuKm4zLCBuNSA9IG4qbjQsIG42ID0gbipuNTtcblxuICAgIHZhciBBID0gYS8oMStuKSAqICgxICsgMS80Km4yICsgMS82NCpuNCArIDEvMjU2Km42KTsgLy8gMs+AQSBpcyB0aGUgY2lyY3VtZmVyZW5jZSBvZiBhIG1lcmlkaWFuXG5cbiAgICB2YXIgzrcgPSB4IC8gKGswKkEpO1xuICAgIHZhciDOviA9IHkgLyAoazAqQSk7XG5cbiAgICB2YXIgzrIgPSBbIG51bGwsIC8vIG5vdGUgzrIgaXMgb25lLWJhc2VkIGFycmF5ICg2dGggb3JkZXIgS3LDvGdlciBleHByZXNzaW9ucylcbiAgICAgICAgMS8yKm4gLSAyLzMqbjIgKyAzNy85NipuMyAtICAgIDEvMzYwKm40IC0gICA4MS81MTIqbjUgKyAgICA5NjE5OS82MDQ4MDAqbjYsXG4gICAgICAgICAgICAgICAxLzQ4Km4yICsgIDEvMTUqbjMgLSA0MzcvMTQ0MCpuNCArICAgNDYvMTA1Km41IC0gMTExODcxMS8zODcwNzIwKm42LFxuICAgICAgICAgICAgICAgICAgICAgICAgMTcvNDgwKm4zIC0gICAzNy84NDAqbjQgLSAyMDkvNDQ4MCpuNSArICAgICAgNTU2OS85MDcyMCpuNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQzOTcvMTYxMjgwKm40IC0gICAxMS81MDQqbjUgLSAgODMwMjUxLzcyNTc2MDAqbjYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ1ODMvMTYxMjgwKm41IC0gIDEwODg0Ny8zOTkxNjgwKm42LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwNjQ4NjkzLzYzODY2ODgwMCpuNiBdO1xuXG4gICAgdmFyIM6+yrkgPSDOvjtcbiAgICBmb3IgKHZhciBqPTE7IGo8PTY7IGorKykgzr7KuSAtPSDOsltqXSAqIE1hdGguc2luKDIqairOvikgKiBNYXRoLmNvc2goMipqKs63KTtcblxuICAgIHZhciDOt8q5ID0gzrc7XG4gICAgZm9yICh2YXIgaj0xOyBqPD02OyBqKyspIM63yrkgLT0gzrJbal0gKiBNYXRoLmNvcygyKmoqzr4pICogTWF0aC5zaW5oKDIqairOtyk7XG5cbiAgICB2YXIgc2luaM63yrkgPSBNYXRoLnNpbmgozrfKuSk7XG4gICAgdmFyIHNpbs6+yrkgPSBNYXRoLnNpbijOvsq5KSwgY29zzr7KuSA9IE1hdGguY29zKM6+yrkpO1xuXG4gICAgdmFyIM+EyrkgPSBzaW7Ovsq5IC8gTWF0aC5zcXJ0KHNpbmjOt8q5KnNpbmjOt8q5ICsgY29zzr7KuSpjb3POvsq5KTtcblxuICAgIHZhciDPhGkgPSDPhMq5O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIM+DaSA9IE1hdGguc2luaChlKk1hdGguYXRhbmgoZSrPhGkvTWF0aC5zcXJ0KDErz4RpKs+EaSkpKTtcbiAgICAgICAgdmFyIM+Eacq5ID0gz4RpICogTWF0aC5zcXJ0KDErz4NpKs+DaSkgLSDPg2kgKiBNYXRoLnNxcnQoMSvPhGkqz4RpKTtcbiAgICAgICAgdmFyIM60z4RpID0gKM+EyrkgLSDPhGnKuSkvTWF0aC5zcXJ0KDErz4Rpyrkqz4RpyrkpXG4gICAgICAgICAgICAqICgxICsgKDEtZSplKSrPhGkqz4RpKSAvICgoMS1lKmUpKk1hdGguc3FydCgxK8+EaSrPhGkpKTtcbiAgICAgICAgz4RpICs9IM60z4RpO1xuICAgIH0gd2hpbGUgKE1hdGguYWJzKM60z4RpKSA+IDFlLTEyKTsgLy8gdXNpbmcgSUVFRSA3NTQgzrTPhGkgLT4gMCBhZnRlciAyLTMgaXRlcmF0aW9uc1xuICAgIC8vIG5vdGUgcmVsYXRpdmVseSBsYXJnZSBjb252ZXJnZW5jZSB0ZXN0IGFzIM60z4RpIHRvZ2dsZXMgb24gwrExLjEyZS0xNiBmb3IgZWcgMzEgTiA0MDAwMDAgNTAwMDAwMFxuICAgIHZhciDPhCA9IM+EaTtcblxuICAgIHZhciDPhiA9IE1hdGguYXRhbijPhCk7XG5cbiAgICB2YXIgzrsgPSBNYXRoLmF0YW4yKHNpbmjOt8q5LCBjb3POvsq5KTtcblxuICAgIC8vIC0tLS0gY29udmVyZ2VuY2U6IEthcm5leSAyMDExIEVxIDI2LCAyN1xuXG4gICAgdmFyIHAgPSAxO1xuICAgIGZvciAodmFyIGo9MTsgajw9NjsgaisrKSBwIC09IDIqairOsltqXSAqIE1hdGguY29zKDIqairOvikgKiBNYXRoLmNvc2goMipqKs63KTtcbiAgICB2YXIgcSA9IDA7XG4gICAgZm9yICh2YXIgaj0xOyBqPD02OyBqKyspIHEgKz0gMipqKs6yW2pdICogTWF0aC5zaW4oMipqKs6+KSAqIE1hdGguc2luaCgyKmoqzrcpO1xuXG4gICAgdmFyIM6zyrkgPSBNYXRoLmF0YW4oTWF0aC50YW4ozr7KuSkgKiBNYXRoLnRhbmgozrfKuSkpO1xuICAgIHZhciDOs8q6ID0gTWF0aC5hdGFuMihxLCBwKTtcblxuICAgIHZhciDOsyA9IM6zyrkgKyDOs8q6O1xuXG4gICAgLy8gLS0tLSBzY2FsZTogS2FybmV5IDIwMTEgRXEgMjhcblxuICAgIHZhciBzaW7PhiA9IE1hdGguc2luKM+GKTtcbiAgICB2YXIga8q5ID0gTWF0aC5zcXJ0KDEgLSBlKmUqc2luz4Yqc2luz4YpICogTWF0aC5zcXJ0KDEgKyDPhCrPhCkgKiBNYXRoLnNxcnQoc2luaM63yrkqc2luaM63yrkgKyBjb3POvsq5KmNvc86+yrkpO1xuICAgIHZhciBryrogPSBBIC8gYSAvIE1hdGguc3FydChwKnAgKyBxKnEpO1xuXG4gICAgdmFyIGsgPSBrMCAqIGvKuSAqIGvKujtcblxuICAgIC8vIC0tLS0tLS0tLS0tLVxuXG4gICAgdmFyIM67MCA9ICgoei0xKSo2IC0gMTgwICsgMykudG9SYWRpYW5zKCk7IC8vIGxvbmdpdHVkZSBvZiBjZW50cmFsIG1lcmlkaWFuXG4gICAgzrsgKz0gzrswOyAvLyBtb3ZlIM67IGZyb20gem9uYWwgdG8gZ2xvYmFsIGNvb3JkaW5hdGVzXG5cbiAgICAvLyByb3VuZCB0byByZWFzb25hYmxlIHByZWNpc2lvblxuICAgIHZhciBsYXQgPSBOdW1iZXIoz4YudG9EZWdyZWVzKCkudG9GaXhlZCgxMSkpOyAvLyBubSBwcmVjaXNpb24gKDFubSA9IDEwXi0xMcKwKVxuICAgIHZhciBsb24gPSBOdW1iZXIozrsudG9EZWdyZWVzKCkudG9GaXhlZCgxMSkpOyAvLyAoc3RyaWN0bHkgbGF0IHJvdW5kaW5nIHNob3VsZCBiZSDPhuKLhWNvc8+GISlcbiAgICB2YXIgY29udmVyZ2VuY2UgPSBOdW1iZXIozrMudG9EZWdyZWVzKCkudG9GaXhlZCg5KSk7XG4gICAgdmFyIHNjYWxlID0gTnVtYmVyKGsudG9GaXhlZCgxMikpO1xuXG4gICAgdmFyIGxhdExvbmcgPSBuZXcgTGF0TG9uKGxhdCwgbG9uLCB0aGlzLmRhdHVtKTtcbiAgICAvLyAuLi4gYW5kIGFkZCB0aGUgY29udmVyZ2VuY2UgYW5kIHNjYWxlIGludG8gdGhlIExhdExvbiBvYmplY3QgLi4uIHdvbmRlcmZ1bCBKYXZhU2NyaXB0IVxuICAgIGxhdExvbmcuY29udmVyZ2VuY2UgPSBjb252ZXJnZW5jZTtcbiAgICBsYXRMb25nLnNjYWxlID0gc2NhbGU7XG5cbiAgICByZXR1cm4gbGF0TG9uZztcbn07XG5cblxuLyoqXG4gKiBQYXJzZXMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIFVUTSBjb29yZGluYXRlLlxuICpcbiAqIEEgVVRNIGNvb3JkaW5hdGUgY29tcHJpc2VzIChzcGFjZS1zZXBhcmF0ZWQpXG4gKiAgLSB6b25lXG4gKiAgLSBoZW1pc3BoZXJlXG4gKiAgLSBlYXN0aW5nXG4gKiAgLSBub3J0aGluZy5cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSB1dG1Db29yZCAtIFVUTSBjb29yZGluYXRlIChXR1MgODQpLlxuICogQHBhcmFtICAge0RhdHVtfSAgW2RhdHVtPVdHUzg0XSAtIERhdHVtIGNvb3JkaW5hdGUgaXMgZGVmaW5lZCBpbiAoZGVmYXVsdCBXR1MgODQpLlxuICogQHJldHVybnMge1V0bX1cbiAqIEB0aHJvd3MgIHtFcnJvcn0gIEludmFsaWQgVVRNIGNvb3JkaW5hdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHV0bUNvb3JkID0gVXRtLnBhcnNlKCczMSBOIDQ0ODI1MSA1NDExOTMyJyk7XG4gKiAgIC8vIHV0bUNvb3JkOiB7em9uZTogMzEsIGhlbWlzcGhlcmU6ICdOJywgZWFzdGluZzogNDQ4MjUxLCBub3J0aGluZzogNTQxMTkzMiB9XG4gKi9cblV0bS5wYXJzZSA9IGZ1bmN0aW9uKHV0bUNvb3JkLCBkYXR1bSkge1xuICAgIGlmIChkYXR1bSA9PT0gdW5kZWZpbmVkKSBkYXR1bSA9IExhdExvbi5kYXR1bS5XR1M4NDsgLy8gZGVmYXVsdCBpZiBub3Qgc3VwcGxpZWRcblxuICAgIC8vIG1hdGNoIHNlcGFyYXRlIGVsZW1lbnRzIChzZXBhcmF0ZWQgYnkgd2hpdGVzcGFjZSlcbiAgICB1dG1Db29yZCA9IHV0bUNvb3JkLnRyaW0oKS5tYXRjaCgvXFxTKy9nKTtcblxuICAgIGlmICh1dG1Db29yZD09bnVsbCB8fCB1dG1Db29yZC5sZW5ndGghPTQpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBVVE0gY29vcmRpbmF0ZSDigJgnK3V0bUNvb3JkKyfigJknKTtcblxuICAgIHZhciB6b25lID0gdXRtQ29vcmRbMF0sIGhlbWlzcGhlcmUgPSB1dG1Db29yZFsxXSwgZWFzdGluZyA9IHV0bUNvb3JkWzJdLCBub3J0aGluZyA9IHV0bUNvb3JkWzNdO1xuXG4gICAgcmV0dXJuIG5ldyBVdG0oem9uZSwgaGVtaXNwaGVyZSwgZWFzdGluZywgbm9ydGhpbmcsIGRhdHVtKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgVVRNIGNvb3JkaW5hdGUuXG4gKlxuICogVG8gZGlzdGluZ3Vpc2ggZnJvbSBNR1JTIGdyaWQgem9uZSBkZXNpZ25hdG9ycywgYSBzcGFjZSBpcyBsZWZ0IGJldHdlZW4gdGhlIHpvbmUgYW5kIHRoZVxuICogaGVtaXNwaGVyZS5cbiAqXG4gKiBOb3RlIHRoYXQgVVRNIGNvb3JkaW5hdGVzIGdldCByb3VuZGVkLCBub3QgdHJ1bmNhdGVkICh1bmxpa2UgTUdSUyBncmlkIHJlZmVyZW5jZXMpLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtkaWdpdHM9MF0gLSBOdW1iZXIgb2YgZGlnaXRzIHRvIGFwcGVhciBhZnRlciB0aGUgZGVjaW1hbCBwb2ludCAoMyDiiaEgbW0pLlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvb3JkaW5hdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHV0bSA9IFV0bS5wYXJzZSgnMzEgTiA0NDgyNTEgNTQxMTkzMicpLnRvU3RyaW5nKDQpOyAgLy8gMzEgTiA0NDgyNTEuMDAwMCA1NDExOTMyLjAwMDBcbiAqL1xuVXRtLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKGRpZ2l0cykge1xuICAgIGRpZ2l0cyA9IE51bWJlcihkaWdpdHN8fDApOyAvLyBkZWZhdWx0IDAgaWYgbm90IHN1cHBsaWVkXG5cbiAgICB2YXIgeiA9IHRoaXMuem9uZTwxMCA/ICcwJyt0aGlzLnpvbmUgOiB0aGlzLnpvbmU7IC8vIGxlYWRpbmcgemVyb1xuICAgIHZhciBoID0gdGhpcy5oZW1pc3BoZXJlO1xuICAgIHZhciBlID0gdGhpcy5lYXN0aW5nO1xuICAgIHZhciBuID0gdGhpcy5ub3J0aGluZztcbiAgICBpZiAoaXNOYU4oeikgfHwgIWgubWF0Y2goL1tOU10vKSB8fCBpc05hTihlKSB8fCBpc05hTihuKSkgcmV0dXJuICcnO1xuXG4gICAgcmV0dXJuIHorJyAnK2grJyAnK2UudG9GaXhlZChkaWdpdHMpKycgJytuLnRvRml4ZWQoZGlnaXRzKTtcbn07XG5cblxuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuXG4vKiogUG9seWZpbGwgTWF0aC5zaW5oIGZvciBvbGQgYnJvd3NlcnMgLyBJRSAqL1xuaWYgKE1hdGguc2luaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgTWF0aC5zaW5oID0gZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gKE1hdGguZXhwKHgpIC0gTWF0aC5leHAoLXgpKSAvIDI7XG4gICAgfTtcbn1cblxuLyoqIFBvbHlmaWxsIE1hdGguY29zaCBmb3Igb2xkIGJyb3dzZXJzIC8gSUUgKi9cbmlmIChNYXRoLmNvc2ggPT09IHVuZGVmaW5lZCkge1xuICAgIE1hdGguY29zaCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIChNYXRoLmV4cCh4KSArIE1hdGguZXhwKC14KSkgLyAyO1xuICAgIH07XG59XG5cbi8qKiBQb2x5ZmlsbCBNYXRoLnRhbmggZm9yIG9sZCBicm93c2VycyAvIElFICovXG5pZiAoTWF0aC50YW5oID09PSB1bmRlZmluZWQpIHtcbiAgICBNYXRoLnRhbmggPSBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiAoTWF0aC5leHAoeCkgLSBNYXRoLmV4cCgteCkpIC8gKE1hdGguZXhwKHgpICsgTWF0aC5leHAoLXgpKTtcbiAgICB9O1xufVxuXG4vKiogUG9seWZpbGwgTWF0aC5hc2luaCBmb3Igb2xkIGJyb3dzZXJzIC8gSUUgKi9cbmlmIChNYXRoLmFzaW5oID09PSB1bmRlZmluZWQpIHtcbiAgICBNYXRoLmFzaW5oID0gZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gTWF0aC5sb2coeCArIE1hdGguc3FydCgxICsgeCp4KSk7XG4gICAgfTtcbn1cblxuLyoqIFBvbHlmaWxsIE1hdGguYXRhbmggZm9yIG9sZCBicm93c2VycyAvIElFICovXG5pZiAoTWF0aC5hdGFuaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgTWF0aC5hdGFuaCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKCgxK3gpIC8gKDEteCkpIC8gMjtcbiAgICB9O1xufVxuXG4vKiogUG9seWZpbGwgU3RyaW5nLnRyaW0gZm9yIG9sZCBicm93c2Vyc1xuICogIChxLnYuIGJsb2cuc3RldmVubGV2aXRoYW4uY29tL2FyY2hpdmVzL2Zhc3Rlci10cmltLWphdmFzY3JpcHQpICovXG5pZiAoU3RyaW5nLnByb3RvdHlwZS50cmltID09PSB1bmRlZmluZWQpIHtcbiAgICBTdHJpbmcucHJvdG90eXBlLnRyaW0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKS5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9O1xufVxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBVdG07IC8vIOKJoSBleHBvcnQgZGVmYXVsdCBVdG1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dlb2Rlc3kvdXRtLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBVbndyYXAgYSBjb29yZGluYXRlIGZyb20gYSBQb2ludCBGZWF0dXJlLCBHZW9tZXRyeSBvciBhIHNpbmdsZSBjb29yZGluYXRlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55PnxHZW9tZXRyeXxGZWF0dXJlPFBvaW50Pn0gb2JqIGFueSB2YWx1ZVxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IGNvb3JkaW5hdGVzXG4gKi9cbmZ1bmN0aW9uIGdldENvb3JkKG9iaikge1xuICAgIGlmICghb2JqKSB0aHJvdyBuZXcgRXJyb3IoJ05vIG9iaiBwYXNzZWQnKTtcblxuICAgIHZhciBjb29yZGluYXRlcyA9IGdldENvb3JkcyhvYmopO1xuXG4gICAgLy8gZ2V0Q29vcmQoKSBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgdHdvIG51bWJlcnMgKFBvaW50KVxuICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPiAxICYmXG4gICAgICAgIHR5cGVvZiBjb29yZGluYXRlc1swXSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIGNvb3JkaW5hdGVzWzFdID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlIGlzIG5vdCBhIHZhbGlkIFBvaW50Jyk7XG4gICAgfVxufVxuXG4vKipcbiAqIFVud3JhcCBjb29yZGluYXRlcyBmcm9tIGEgRmVhdHVyZSwgR2VvbWV0cnkgT2JqZWN0IG9yIGFuIEFycmF5IG9mIG51bWJlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT58R2VvbWV0cnl8RmVhdHVyZTxhbnk+fSBvYmogYW55IHZhbHVlXG4gKiBAcmV0dXJucyB7QXJyYXk8YW55Pn0gY29vcmRpbmF0ZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Q29vcmRzKG9iaikge1xuICAgIGlmICghb2JqKSB0aHJvdyBuZXcgRXJyb3IoJ05vIG9iaiBwYXNzZWQnKTtcbiAgICB2YXIgY29vcmRpbmF0ZXM7XG5cbiAgICAvLyBBcnJheSBvZiBudW1iZXJzXG4gICAgaWYgKG9iai5sZW5ndGgpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMgPSBvYmo7XG5cbiAgICAvLyBHZW9tZXRyeSBPYmplY3RcbiAgICB9IGVsc2UgaWYgKG9iai5jb29yZGluYXRlcykge1xuICAgICAgICBjb29yZGluYXRlcyA9IG9iai5jb29yZGluYXRlcztcblxuICAgIC8vIEZlYXR1cmVcbiAgICB9IGVsc2UgaWYgKG9iai5nZW9tZXRyeSAmJiBvYmouZ2VvbWV0cnkuY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMgPSBvYmouZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgfVxuICAgIC8vIENoZWNrcyBpZiBjb29yZGluYXRlcyBjb250YWlucyBhIG51bWJlclxuICAgIGlmIChjb29yZGluYXRlcykge1xuICAgICAgICBjb250YWluc051bWJlcihjb29yZGluYXRlcyk7XG4gICAgICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyB2YWxpZCBjb29yZGluYXRlcycpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBjb29yZGluYXRlcyBjb250YWlucyBhIG51bWJlclxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGNvb3JkaW5hdGVzIEdlb0pTT04gQ29vcmRpbmF0ZXNcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIEFycmF5IGNvbnRhaW5zIGEgbnVtYmVyXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTnVtYmVyKGNvb3JkaW5hdGVzKSB7XG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgdHlwZW9mIGNvb3JkaW5hdGVzWzBdID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB0eXBlb2YgY29vcmRpbmF0ZXNbMV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29vcmRpbmF0ZXNbMF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjb250YWluc051bWJlcihjb29yZGluYXRlc1swXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignY29vcmRpbmF0ZXMgbXVzdCBvbmx5IGNvbnRhaW4gbnVtYmVycycpO1xufVxuXG4vKipcbiAqIEVuZm9yY2UgZXhwZWN0YXRpb25zIGFib3V0IHR5cGVzIG9mIEdlb0pTT04gb2JqZWN0cyBmb3IgVHVyZi5cbiAqXG4gKiBAYWxpYXMgZ2VvanNvblR5cGVcbiAqIEBwYXJhbSB7R2VvSlNPTn0gdmFsdWUgYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBleHBlY3RlZCBHZW9KU09OIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgY2FsbGluZyBmdW5jdGlvblxuICogQHRocm93cyB7RXJyb3J9IGlmIHZhbHVlIGlzIG5vdCB0aGUgZXhwZWN0ZWQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gZ2VvanNvblR5cGUodmFsdWUsIHR5cGUsIG5hbWUpIHtcbiAgICBpZiAoIXR5cGUgfHwgIW5hbWUpIHRocm93IG5ldyBFcnJvcigndHlwZSBhbmQgbmFtZSByZXF1aXJlZCcpO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCB0byAnICsgbmFtZSArICc6IG11c3QgYmUgYSAnICsgdHlwZSArICcsIGdpdmVuICcgKyB2YWx1ZS50eXBlKTtcbiAgICB9XG59XG5cbi8qKlxuICogRW5mb3JjZSBleHBlY3RhdGlvbnMgYWJvdXQgdHlwZXMgb2Yge0BsaW5rIEZlYXR1cmV9IGlucHV0cyBmb3IgVHVyZi5cbiAqIEludGVybmFsbHkgdGhpcyB1c2VzIHtAbGluayBnZW9qc29uVHlwZX0gdG8ganVkZ2UgZ2VvbWV0cnkgdHlwZXMuXG4gKlxuICogQGFsaWFzIGZlYXR1cmVPZlxuICogQHBhcmFtIHtGZWF0dXJlfSBmZWF0dXJlIGEgZmVhdHVyZSB3aXRoIGFuIGV4cGVjdGVkIGdlb21ldHJ5IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIGV4cGVjdGVkIEdlb0pTT04gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiBjYWxsaW5nIGZ1bmN0aW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gZXJyb3IgaWYgdmFsdWUgaXMgbm90IHRoZSBleHBlY3RlZCB0eXBlLlxuICovXG5mdW5jdGlvbiBmZWF0dXJlT2YoZmVhdHVyZSwgdHlwZSwgbmFtZSkge1xuICAgIGlmICghZmVhdHVyZSkgdGhyb3cgbmV3IEVycm9yKCdObyBmZWF0dXJlIHBhc3NlZCcpO1xuICAgIGlmICghbmFtZSkgdGhyb3cgbmV3IEVycm9yKCcuZmVhdHVyZU9mKCkgcmVxdWlyZXMgYSBuYW1lJyk7XG4gICAgaWYgKCFmZWF0dXJlIHx8IGZlYXR1cmUudHlwZSAhPT0gJ0ZlYXR1cmUnIHx8ICFmZWF0dXJlLmdlb21ldHJ5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCB0byAnICsgbmFtZSArICcsIEZlYXR1cmUgd2l0aCBnZW9tZXRyeSByZXF1aXJlZCcpO1xuICAgIH1cbiAgICBpZiAoIWZlYXR1cmUuZ2VvbWV0cnkgfHwgZmVhdHVyZS5nZW9tZXRyeS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCB0byAnICsgbmFtZSArICc6IG11c3QgYmUgYSAnICsgdHlwZSArICcsIGdpdmVuICcgKyBmZWF0dXJlLmdlb21ldHJ5LnR5cGUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFbmZvcmNlIGV4cGVjdGF0aW9ucyBhYm91dCB0eXBlcyBvZiB7QGxpbmsgRmVhdHVyZUNvbGxlY3Rpb259IGlucHV0cyBmb3IgVHVyZi5cbiAqIEludGVybmFsbHkgdGhpcyB1c2VzIHtAbGluayBnZW9qc29uVHlwZX0gdG8ganVkZ2UgZ2VvbWV0cnkgdHlwZXMuXG4gKlxuICogQGFsaWFzIGNvbGxlY3Rpb25PZlxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbn0gZmVhdHVyZUNvbGxlY3Rpb24gYSBGZWF0dXJlQ29sbGVjdGlvbiBmb3Igd2hpY2ggZmVhdHVyZXMgd2lsbCBiZSBqdWRnZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIGV4cGVjdGVkIEdlb0pTT04gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiBjYWxsaW5nIGZ1bmN0aW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdmFsdWUgaXMgbm90IHRoZSBleHBlY3RlZCB0eXBlLlxuICovXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YoZmVhdHVyZUNvbGxlY3Rpb24sIHR5cGUsIG5hbWUpIHtcbiAgICBpZiAoIWZlYXR1cmVDb2xsZWN0aW9uKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGZlYXR1cmVDb2xsZWN0aW9uIHBhc3NlZCcpO1xuICAgIGlmICghbmFtZSkgdGhyb3cgbmV3IEVycm9yKCcuY29sbGVjdGlvbk9mKCkgcmVxdWlyZXMgYSBuYW1lJyk7XG4gICAgaWYgKCFmZWF0dXJlQ29sbGVjdGlvbiB8fCBmZWF0dXJlQ29sbGVjdGlvbi50eXBlICE9PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCB0byAnICsgbmFtZSArICcsIEZlYXR1cmVDb2xsZWN0aW9uIHJlcXVpcmVkJyk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlc1tpXTtcbiAgICAgICAgaWYgKCFmZWF0dXJlIHx8IGZlYXR1cmUudHlwZSAhPT0gJ0ZlYXR1cmUnIHx8ICFmZWF0dXJlLmdlb21ldHJ5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgdG8gJyArIG5hbWUgKyAnLCBGZWF0dXJlIHdpdGggZ2VvbWV0cnkgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZlYXR1cmUuZ2VvbWV0cnkgfHwgZmVhdHVyZS5nZW9tZXRyeS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQgdG8gJyArIG5hbWUgKyAnOiBtdXN0IGJlIGEgJyArIHR5cGUgKyAnLCBnaXZlbiAnICsgZmVhdHVyZS5nZW9tZXRyeS50eXBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuZ2VvanNvblR5cGUgPSBnZW9qc29uVHlwZTtcbm1vZHVsZS5leHBvcnRzLmNvbGxlY3Rpb25PZiA9IGNvbGxlY3Rpb25PZjtcbm1vZHVsZS5leHBvcnRzLmZlYXR1cmVPZiA9IGZlYXR1cmVPZjtcbm1vZHVsZS5leHBvcnRzLmdldENvb3JkID0gZ2V0Q29vcmQ7XG5tb2R1bGUuZXhwb3J0cy5nZXRDb29yZHMgPSBnZXRDb29yZHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9pc29iYW5kcy9ub2RlX21vZHVsZXMvQHR1cmYvaW52YXJpYW50L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL3V0aWwnKSxcbiAgICBvcmllbnRhdGlvbkluZGV4ID0gX3JlcXVpcmUub3JpZW50YXRpb25JbmRleCxcbiAgICBlbnZlbG9wZUlzRXF1YWwgPSBfcmVxdWlyZS5lbnZlbG9wZUlzRXF1YWwsXG4gICAgZW52ZWxvcGVDb250YWlucyA9IF9yZXF1aXJlLmVudmVsb3BlQ29udGFpbnMsXG4gICAgY29vcmRpbmF0ZXNFcXVhbCA9IF9yZXF1aXJlLmNvb3JkaW5hdGVzRXF1YWwsXG4gICAgX3JlcXVpcmUyID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLFxuICAgIG11bHRpUG9pbnQgPSBfcmVxdWlyZTIubXVsdGlQb2ludCxcbiAgICBwb2x5Z29uID0gX3JlcXVpcmUyLnBvbHlnb24sXG4gICAgcG9pbnQgPSBfcmVxdWlyZTIucG9pbnQsXG4gICAgZW52ZWxvcGUgPSByZXF1aXJlKCdAdHVyZi9lbnZlbG9wZScpLFxuICAgIF9pbnNpZGUgPSByZXF1aXJlKCdAdHVyZi9pbnNpZGUnKTtcblxuLyoqIFJpbmcgb2YgZWRnZXMgd2hpY2ggZm9ybSBhIHBvbHlnb24uXG4gKiBUaGUgcmluZyBtYXkgYmUgZWl0aGVyIGFuIG91dGVyIHNoZWxsIG9yIGEgaG9sZS5cbiAqXG4gKiBUaGlzIGNsYXNzIGlzIGluc3BpcmVkIGluIEdFT1MncyBnZW9zOjpvcGVyYXRpb246OnBvbHlnb25pemU6OkVkZ2VSaW5nXG4gKi9cblxuXG52YXIgRWRnZVJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVkZ2VSaW5nKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGdlUmluZyk7XG5cbiAgICB0aGlzLmVkZ2VzID0gW107XG4gICAgdGhpcy5wb2x5Z29uID0gdW5kZWZpbmVkOyAvLzwgQ2FjaGVzIFBvbHlnb24gcmVwcmVzZW50YXRpb25cbiAgICB0aGlzLmVudmVsb3BlID0gdW5kZWZpbmVkOyAvLzwgQ2FjaGVzIEVudmVsb3BlIHJlcHJlc2VudGF0aW9uXG4gIH1cblxuICAvKiogQWRkIGFuIGVkZ2UgdG8gdGhlIHJpbmcsIGluc2VydGluZyBpdCBpbiB0aGUgbGFzdCBwb3NpdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtFZGdlfSBlZGdlIC0gRWRnZSB0byBiZSBpbnNlcnRlZFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhFZGdlUmluZywgW3tcbiAgICBrZXk6ICdwdXNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaChlZGdlKSB7XG4gICAgICAvLyBFbXVsYXRlIEFycmF5IGdldHRlciAoW10pIGJlaGF2aW91clxuICAgICAgdGhpc1t0aGlzLmVkZ2VzLmxlbmd0aF0gPSBlZGdlO1xuICAgICAgdGhpcy5lZGdlcy5wdXNoKGVkZ2UpO1xuICAgICAgdGhpcy5wb2x5Z29uID0gdGhpcy5lbnZlbG9wZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKiogR2V0IEVkZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaSAtIEluZGV4XG4gICAgICogQHJldHVybnMge0VkZ2V9IC0gRWRnZSBpbiB0aGUgaSBwb3NpdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoaSkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZXNbaV07XG4gICAgfVxuXG4gICAgLyoqIEdldHRlciBvZiBsZW5ndGggcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSAtIExlbmd0aCBvZiB0aGUgZWRnZSByaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmb3JFYWNoJyxcblxuXG4gICAgLyoqIFNpbWlsYXIgdG8gQXJyYXkucHJvdG90eXBlLmZvckVhY2ggZm9yIHRoZSBsaXN0IG9mIEVkZ2VzIGluIHRoZSBFZGdlUmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGYgLSBUaGUgc2FtZSBmdW5jdGlvbiB0byBiZSBwYXNzZWQgdG8gQXJyYXkucHJvdG90eXBlLmZvckVhY2hcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yRWFjaChmKSB7XG4gICAgICB0aGlzLmVkZ2VzLmZvckVhY2goZik7XG4gICAgfVxuXG4gICAgLyoqIFNpbWlsYXIgdG8gQXJyYXkucHJvdG90eXBlLm1hcCBmb3IgdGhlIGxpc3Qgb2YgRWRnZXMgaW4gdGhlIEVkZ2VSaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZiAtIFRoZSBzYW1lIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCB0byBBcnJheS5wcm90b3R5cGUubWFwXG4gICAgICogQHJldHVybnMge0FycmF5fSAtIFRoZSBtYXBwZWQgdmFsdWVzIGluIHRoZSBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtYXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXAoZikge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZXMubWFwKGYpO1xuICAgIH1cblxuICAgIC8qKiBTaW1pbGFyIHRvIEFycmF5LnByb3RvdHlwZS5zb21lIGZvciB0aGUgbGlzdCBvZiBFZGdlcyBpbiB0aGUgRWRnZVJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmIC0gVGhlIHNhbWUgZnVuY3Rpb24gdG8gYmUgcGFzc2VkIHRvIEFycmF5LnByb3RvdHlwZS5zb21lXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IC0gVHJ1ZSBpZiBhbiBFZGdlIGNoZWNrIHRoZSBjb25kaXRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc29tZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvbWUoZikge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZXMuc29tZShmKTtcbiAgICB9XG5cbiAgICAvKiogQ2hlY2sgaWYgdGhlIHJpbmcgaXMgdmFsaWQgaW4gZ2VvbXRyeSB0ZXJtcy5cbiAgICAgKiBBIHJpbmcgbXVzdCBoYXZlIGVpdGhlciAwIG9yIDQgb3IgbW9yZSBwb2ludHMuIFRoZSBmaXJzdCBhbmQgdGhlIGxhc3QgbXVzdCBiZVxuICAgICAqIGVxdWFsIChpbiAyRClcbiAgICAgKiBnZW9zOjpnZW9tOjpMaW5lYXJSaW5nOjp2YWxpZGF0ZUNvbnN0cnVjdGlvblxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IC0gVmFsaWRpdHkgb2YgdGhlIEVkZ2VSaW5nXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzVmFsaWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1ZhbGlkKCkge1xuICAgICAgLy8gVE9ETzogc3R1YlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqIFRlc3RzIHdoZXRoZXIgdGhpcyByaW5nIGlzIGEgaG9sZS5cbiAgICAgKiBBIHJpbmcgaXMgYSBob2xlIGlmIGl0IGlzIG9yaWVudGVkIGNvdW50ZXItY2xvY2t3aXNlLlxuICAgICAqIFNpbWlsYXIgaW1wbGVtZW50YXRpb24gb2YgZ2Vvczo6YWxnb3JpdGhtOjpDR0FsZ29yaXRobXM6OmlzQ0NXXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZTogaWYgaXQgaXMgYSBob2xlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzSG9sZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzSG9sZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIFhYWDogQXNzdW1pbmcgUmluZyBpcyB2YWxpZFxuICAgICAgLy8gRmluZCBoaWdoZXN0IHBvaW50XG4gICAgICB2YXIgaGlJbmRleCA9IHRoaXMuZWRnZXMucmVkdWNlKGZ1bmN0aW9uIChoaWdoLCBlZGdlLCBpKSB7XG4gICAgICAgIGlmIChlZGdlLmZyb20uY29vcmRpbmF0ZXNbMV0gPiBfdGhpcy5lZGdlc1toaWdoXS5mcm9tLmNvb3JkaW5hdGVzWzFdKSBoaWdoID0gaTtcbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9LCAwKSxcbiAgICAgICAgICBpUHJldiA9IChoaUluZGV4ID09PSAwID8gdGhpcy5sZW5ndGggOiBoaUluZGV4KSAtIDEsXG4gICAgICAgICAgaU5leHQgPSAoaGlJbmRleCArIDEpICUgdGhpcy5sZW5ndGgsXG4gICAgICAgICAgZGlzYyA9IG9yaWVudGF0aW9uSW5kZXgodGhpcy5lZGdlc1tpUHJldl0uZnJvbS5jb29yZGluYXRlcywgdGhpcy5lZGdlc1toaUluZGV4XS5mcm9tLmNvb3JkaW5hdGVzLCB0aGlzLmVkZ2VzW2lOZXh0XS5mcm9tLmNvb3JkaW5hdGVzKTtcblxuICAgICAgaWYgKGRpc2MgPT09IDApIHJldHVybiB0aGlzLmVkZ2VzW2lQcmV2XS5mcm9tLmNvb3JkaW5hdGVzWzBdID4gdGhpcy5lZGdlc1tpTmV4dF0uZnJvbS5jb29yZGluYXRlc1swXTtcbiAgICAgIHJldHVybiBkaXNjID4gMDtcbiAgICB9XG5cbiAgICAvKiogQ3JlYXRlcyBhIE11bHRpUG9pbnQgcmVwcmVzZW50aW5nIHRoZSBFZGdlUmluZyAoZGlzY2FydHMgZWRnZXMgZGlyZWN0aW9ucykuXG4gICAgICogQHJldHVybnMge0ZlYXR1cmU8TXVsdGlQb2ludD59IC0gTXVsdGlwb2ludCByZXByZXNlbnRhdGlvbiBvZiB0aGUgRWRnZVJpbmdcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9NdWx0aVBvaW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9NdWx0aVBvaW50KCkge1xuICAgICAgcmV0dXJuIG11bHRpUG9pbnQodGhpcy5lZGdlcy5tYXAoZnVuY3Rpb24gKGVkZ2UpIHtcbiAgICAgICAgcmV0dXJuIGVkZ2UuZnJvbS5jb29yZGluYXRlcztcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICAvKiogQ3JlYXRlcyBhIFBvbHlnb24gcmVwcmVzZW50aW5nIHRoZSBFZGdlUmluZy5cbiAgICAgKiBAcmV0dXJucyB7RmVhdHVyZTxQb2x5Z29uPn0gLSBQb2x5Z29uIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFZGdlIFJpbmdcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9Qb2x5Z29uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9Qb2x5Z29uKCkge1xuICAgICAgaWYgKHRoaXMucG9seWdvbikgcmV0dXJuIHRoaXMucG9seWdvbjtcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IHRoaXMuZWRnZXMubWFwKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgIHJldHVybiBlZGdlLmZyb20uY29vcmRpbmF0ZXM7XG4gICAgICB9KTtcbiAgICAgIGNvb3JkaW5hdGVzLnB1c2godGhpcy5lZGdlc1swXS5mcm9tLmNvb3JkaW5hdGVzKTtcbiAgICAgIHJldHVybiB0aGlzLnBvbHlnb24gPSBwb2x5Z29uKFtjb29yZGluYXRlc10pO1xuICAgIH1cblxuICAgIC8qKiBDYWxjdWxhdGVzIHRoZSBlbnZlbG9wZSBvZiB0aGUgRWRnZVJpbmcuXG4gICAgICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbj59IC0gZW52ZWxvcGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0RW52ZWxvcGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbnZlbG9wZSgpIHtcbiAgICAgIGlmICh0aGlzLmVudmVsb3BlKSByZXR1cm4gdGhpcy5lbnZlbG9wZTtcbiAgICAgIHJldHVybiB0aGlzLmVudmVsb3BlID0gZW52ZWxvcGUodGhpcy50b1BvbHlnb24oKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYGdlb3M6Om9wZXJhdGlvbjo6cG9seWdvbml6ZTo6RWRnZVJpbmc6OmZpbmRFZGdlUmluZ0NvbnRhaW5pbmdgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VkZ2VSaW5nfSB0ZXN0RWRnZVJpbmcgLSBFZGdlUmluZyB0byBsb29rIGluIHRoZSBsaXN0XG4gICAgICogQHBhcmFtIHtFZGdlUmluZ1tdfSBzaGVsbExpc3QgLSBMaXN0IG9mIEVkZ2VSaW5nIGluIHdoaWNoIHRvIHNlYXJjaFxuICAgICAqXG4gICAgICogQHJldHVybnMge0VkZ2VSaW5nfSAtIEVkZ2VSaW5nIHdoaWNoIGNvbnRhaW5zIHRoZSB0ZXN0RWRnZVJpbmdcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5zaWRlJyxcblxuXG4gICAgLyoqIENoZWNrcyBpZiB0aGUgcG9pbnQgaXMgaW5zaWRlIHRoZSBlZGdlUmluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHtGZWF0dXJlPFBvaW50Pn0gcG9pbnQgLSBQb2ludCB0byBjaGVjayBpZiBpdCBpcyBpbnNpZGUgdGhlIGVkZ2VSaW5nXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IC0gVHJ1ZSBpZiBpdCBpcyBpbnNpZGUsIEZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNpZGUocG9pbnQpIHtcbiAgICAgIHJldHVybiBfaW5zaWRlKHBvaW50LCB0aGlzLnRvUG9seWdvbigpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsZW5ndGgnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZXMubGVuZ3RoO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZmluZEVkZ2VSaW5nQ29udGFpbmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRFZGdlUmluZ0NvbnRhaW5pbmcodGVzdEVkZ2VSaW5nLCBzaGVsbExpc3QpIHtcbiAgICAgIHZhciB0ZXN0RW52ZWxvcGUgPSB0ZXN0RWRnZVJpbmcuZ2V0RW52ZWxvcGUoKTtcblxuICAgICAgdmFyIG1pbkVudmVsb3BlID0gdm9pZCAwLFxuICAgICAgICAgIG1pblNoZWxsID0gdm9pZCAwO1xuICAgICAgc2hlbGxMaXN0LmZvckVhY2goZnVuY3Rpb24gKHNoZWxsKSB7XG4gICAgICAgIHZhciB0cnlFbnZlbG9wZSA9IHNoZWxsLmdldEVudmVsb3BlKCk7XG5cbiAgICAgICAgaWYgKG1pblNoZWxsKSBtaW5FbnZlbG9wZSA9IG1pblNoZWxsLmdldEVudmVsb3BlKCk7XG5cbiAgICAgICAgLy8gdGhlIGhvbGUgZW52ZWxvcGUgY2Fubm90IGVxdWFsIHRoZSBzaGVsbCBlbnZlbG9wZVxuICAgICAgICBpZiAoZW52ZWxvcGVJc0VxdWFsKHRyeUVudmVsb3BlLCB0ZXN0RW52ZWxvcGUpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGVudmVsb3BlQ29udGFpbnModHJ5RW52ZWxvcGUsIHRlc3RFbnZlbG9wZSkpIHtcbiAgICAgICAgICB2YXIgdGVzdFBvaW50ID0gdGVzdEVkZ2VSaW5nLm1hcChmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVkZ2UuZnJvbS5jb29yZGluYXRlcztcbiAgICAgICAgICB9KS5maW5kKGZ1bmN0aW9uIChwdCkge1xuICAgICAgICAgICAgcmV0dXJuICFzaGVsbC5zb21lKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb29yZGluYXRlc0VxdWFsKHB0LCBlZGdlLmZyb20uY29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodGVzdFBvaW50ICYmIHNoZWxsLmluc2lkZShwb2ludCh0ZXN0UG9pbnQpKSkge1xuICAgICAgICAgICAgaWYgKCFtaW5TaGVsbCB8fCBlbnZlbG9wZUNvbnRhaW5zKG1pbkVudmVsb3BlLCB0cnlFbnZlbG9wZSkpIG1pblNoZWxsID0gc2hlbGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG1pblNoZWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFZGdlUmluZztcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGdlUmluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wb2x5Z29uaXplL2Rpc3QvRWRnZVJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDEwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKTtcbnZhciBnZXRDb29yZHMgPSBpbnZhcmlhbnQuZ2V0Q29vcmRzO1xudmFyIGdldEdlb21UeXBlID0gaW52YXJpYW50LmdldEdlb21UeXBlO1xuXG4vKipcbiAqIFJlbW92ZXMgcmVkdW5kYW50IGNvb3JkaW5hdGVzIGZyb20gYW55IEdlb0pTT04gR2VvbWV0cnkuXG4gKlxuICogQG5hbWUgY2xlYW5Db29yZHNcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZX0gZ2VvanNvbiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFttdXRhdGU9ZmFsc2VdIGFsbG93cyBHZW9KU09OIGlucHV0IHRvIGJlIG11dGF0ZWRcbiAqIEByZXR1cm5zIHtHZW9tZXRyeXxGZWF0dXJlfSB0aGUgY2xlYW5lZCBpbnB1dCBGZWF0dXJlL0dlb21ldHJ5XG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1swLCAwXSwgWzAsIDJdLCBbMCwgNV0sIFswLCA4XSwgWzAsIDhdLCBbMCwgMTBdXSk7XG4gKiB2YXIgbXVsdGlQb2ludCA9IHR1cmYubXVsdGlQb2ludChbWzAsIDBdLCBbMCwgMF0sIFsyLCAyXV0pO1xuICpcbiAqIHR1cmYuY2xlYW5Db29yZHMobGluZSkuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gKiAvLz0gW1swLCAwXSwgWzAsIDEwXV1cbiAqXG4gKiB0dXJmLmNsZWFuQ29vcmRzKG11bHRpUG9pbnQpLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICogLy89IFtbMCwgMF0sIFsyLCAyXV1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbiwgbXV0YXRlKSB7XG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb2pzb24gaXMgcmVxdWlyZWQnKTtcbiAgICB2YXIgdHlwZSA9IGdldEdlb21UeXBlKGdlb2pzb24pO1xuXG4gICAgLy8gU3RvcmUgbmV3IFwiY2xlYW5cIiBwb2ludHMgaW4gdGhpcyBBcnJheVxuICAgIHZhciBuZXdDb29yZHMgPSBbXTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICBuZXdDb29yZHMgPSBjbGVhbkNvb3JkcyhnZW9qc29uKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgZ2V0Q29vcmRzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgIG5ld0Nvb3Jkcy5wdXNoKGNsZWFuQ29vcmRzKGxpbmUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ011bHRpUG9seWdvbic6XG4gICAgICAgIGdldENvb3JkcyhnZW9qc29uKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2x5Z29ucykge1xuICAgICAgICAgICAgdmFyIHBvbHlQb2ludHMgPSBbXTtcbiAgICAgICAgICAgIHBvbHlnb25zLmZvckVhY2goZnVuY3Rpb24gKHJpbmcpIHtcbiAgICAgICAgICAgICAgICBwb2x5UG9pbnRzLnB1c2goY2xlYW5Db29yZHMocmluZykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXdDb29yZHMucHVzaChwb2x5UG9pbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICAgIHZhciBleGlzdGluZyA9IHt9O1xuICAgICAgICBnZXRDb29yZHMoZ2VvanNvbikuZm9yRWFjaChmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBjb29yZC5qb2luKCctJyk7XG4gICAgICAgICAgICBpZiAoIWV4aXN0aW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXdDb29yZHMucHVzaChjb29yZCk7XG4gICAgICAgICAgICAgICAgZXhpc3Rpbmdba2V5XSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodHlwZSArICcgZ2VvbWV0cnkgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQgaW5wdXQgbXV0YXRpb25cbiAgICBpZiAoZ2VvanNvbi5jb29yZGluYXRlcykge1xuICAgICAgICBpZiAobXV0YXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBnZW9qc29uLmNvb3JkaW5hdGVzID0gbmV3Q29vcmRzO1xuICAgICAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdlb21ldHJ5KGdlb2pzb24sIHR5cGUsIG5ld0Nvb3Jkcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG11dGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlcyA9IG5ld0Nvb3JkcztcbiAgICAgICAgICAgIHJldHVybiBnZW9qc29uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmZWF0dXJlKGdlb2pzb24sIHR5cGUsIG5ld0Nvb3Jkcyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGUgR2VvbWV0cnkgZnJvbSBleGlzdGluZyBHZW9tZXRyeVxuICpcbiAqIEBwYXJhbSB7R2VvbWV0cnl9IGdlb2pzb24gRXhpc3RpbmcgR2VvbWV0cnlcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEdlb21ldHJ5IFR5cGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXMgQ29vcmRpbmF0ZXNcbiAqIEByZXR1cm5zIHtHZW9tZXRyeX0gR2VvbWV0cnlcbiAqL1xuZnVuY3Rpb24gZ2VvbWV0cnkoZ2VvanNvbiwgdHlwZSwgY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgZ2VvbSA9IHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfTtcbiAgICBpZiAoZ2VvanNvbi5iYm94KSBnZW9tLmJib3ggPSBnZW9qc29uLmJib3g7XG4gICAgcmV0dXJuIGdlb207XG59XG5cbi8qKlxuICogQ3JlYXRlIEZlYXR1cmUgZnJvbSBleGlzdGluZyBGZWF0dXJlXG4gKlxuICogQHBhcmFtIHtGZWF0dXJlfSBnZW9qc29uIEV4aXN0aW5nIEZlYXR1cmVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEZlYXR1cmUgVHlwZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBjb29yZGluYXRlcyBDb29yZGluYXRlc1xuICogQHJldHVybnMge0ZlYXR1cmV9IEZlYXR1cmVcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShnZW9qc29uLCB0eXBlLCBjb29yZGluYXRlcykge1xuICAgIHZhciBmZWF0ID0gaGVscGVycy5mZWF0dXJlKGdlb21ldHJ5KGdlb2pzb24uZ2VvbWV0cnksIHR5cGUsIGNvb3JkaW5hdGVzKSwgZ2VvanNvbi5wcm9wZXJ0aWVzKTtcbiAgICBpZiAoZ2VvanNvbi5pZCkgZmVhdC5pZCA9IGdlb2pzb24uaWQ7XG4gICAgaWYgKGdlb2pzb24uYmJveCkgZmVhdC5iYm94ID0gZ2VvanNvbi5iYm94O1xuICAgIHJldHVybiBmZWF0O1xufVxuXG4vKipcbiAqIENsZWFuIENvb3Jkc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj58TGluZVN0cmluZ30gbGluZSBMaW5lXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gQ2xlYW5lZCBjb29yZGluYXRlc1xuICovXG5mdW5jdGlvbiBjbGVhbkNvb3JkcyhsaW5lKSB7XG4gICAgdmFyIHBvaW50cyA9IGdldENvb3JkcyhsaW5lKTtcbiAgICAvLyBoYW5kbGUgXCJjbGVhblwiIHNlZ21lbnRcbiAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMiAmJiAhZXF1YWxzKHBvaW50c1swXSwgcG9pbnRzWzFdKSkgcmV0dXJuIHBvaW50cztcblxuICAgIHZhciBwcmV2UG9pbnQsIHBvaW50LCBuZXh0UG9pbnQ7XG4gICAgdmFyIG5ld1BvaW50cyA9IFtdO1xuICAgIHZhciBzZWNvbmRUb0xhc3QgPSBwb2ludHMubGVuZ3RoIC0gMTtcblxuICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1swXSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzZWNvbmRUb0xhc3Q7IGkrKykge1xuICAgICAgICBwcmV2UG9pbnQgPSBwb2ludHNbaSAtIDFdO1xuICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgbmV4dFBvaW50ID0gcG9pbnRzW2kgKyAxXTtcblxuICAgICAgICBpZiAoIWlzUG9pbnRPbkxpbmVTZWdtZW50KHByZXZQb2ludCwgbmV4dFBvaW50LCBwb2ludCkpIHtcbiAgICAgICAgICAgIG5ld1BvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXdQb2ludHMucHVzaChuZXh0UG9pbnQpO1xuICAgIHJldHVybiBuZXdQb2ludHM7XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHBvaW50cyBhbmQgcmV0dXJucyBpZiB0aGV5IGFyZSBlcXVhbHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBwdDEgcG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcHQyIHBvaW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGV5IGFyZSBlcXVhbHNcbiAqL1xuZnVuY3Rpb24gZXF1YWxzKHB0MSwgcHQyKSB7XG4gICAgcmV0dXJuIHB0MVswXSA9PT0gcHQyWzBdICYmIHB0MVsxXSA9PT0gcHQyWzFdO1xufVxuXG4vKipcbiAqIFJldHVybnMgaWYgYHBvaW50YCBpcyBvbiB0aGUgc2VnbWVudCBiZXR3ZWVuIGBzdGFydGAgYW5kIGBlbmRgLlxuICogQm9ycm93ZWQgZnJvbSBgQHR1cmYvYm9vbGVhbi1wb2ludC1vbi1saW5lYCB0byBzcGVlZCB1cCB0aGUgZXZhbHVhdGlvbiAoaW5zdGVhZCBvZiB1c2luZyB0aGUgbW9kdWxlIGFzIGRlcGVuZGVuY3kpXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc3RhcnQgY29vcmQgcGFpciBvZiBzdGFydCBvZiBsaW5lXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGVuZCBjb29yZCBwYWlyIG9mIGVuZCBvZiBsaW5lXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHBvaW50IGNvb3JkIHBhaXIgb2YgcG9pbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlL2ZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUG9pbnRPbkxpbmVTZWdtZW50KHN0YXJ0LCBlbmQsIHBvaW50KSB7XG4gICAgdmFyIHggPSBwb2ludFswXSwgeSA9IHBvaW50WzFdO1xuICAgIHZhciBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgdmFyIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XG5cbiAgICB2YXIgZHhjID0geCAtIHN0YXJ0WDtcbiAgICB2YXIgZHljID0geSAtIHN0YXJ0WTtcbiAgICB2YXIgZHhsID0gZW5kWCAtIHN0YXJ0WDtcbiAgICB2YXIgZHlsID0gZW5kWSAtIHN0YXJ0WTtcbiAgICB2YXIgY3Jvc3MgPSBkeGMgKiBkeWwgLSBkeWMgKiBkeGw7XG5cbiAgICBpZiAoY3Jvc3MgIT09IDApIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIGlmIChNYXRoLmFicyhkeGwpID49IE1hdGguYWJzKGR5bCkpIHJldHVybiBkeGwgPiAwID8gc3RhcnRYIDw9IHggJiYgeCA8PSBlbmRYIDogZW5kWCA8PSB4ICYmIHggPD0gc3RhcnRYO1xuICAgIGVsc2UgcmV0dXJuIGR5bCA+IDAgPyBzdGFydFkgPD0geSAmJiB5IDw9IGVuZFkgOiBlbmRZIDw9IHkgJiYgeSA8PSBzdGFydFk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9jbGVhbi1jb29yZHMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEwN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiBqc2hpbnQgZXN2ZXJzaW9uOjYgKi9cblxuaW1wb3J0IHtjb21iaW5lLGJ1ZmZlcixiYm94Q2xpcCwgYXJlYX0gZnJvbSBcIkB0dXJmL3R1cmZcIjtcbmZ1bmN0aW9uIHNlbmRNZXNzYWdlKG0pe3Bvc3RNZXNzYWdlKHttZXNzYWdlOm19KTt9XG5mdW5jdGlvbiBzZW5kUHJvZ3Jlc3MobSl7cG9zdE1lc3NhZ2Uoe3Byb2dyZXNzOm19KTt9XG5mdW5jdGlvbiBzZW5kRW5kKG0pe3Bvc3RNZXNzYWdlKHtlbmQ6bX0pO31cblxuLy8gSW5pdGFsIG1lc3NhZ2VcbnBvc3RNZXNzYWdlKHtcbiAgcHJvZ3Jlc3M6IDAsXG4gIG1lc3NhZ2U6IFwic3RhcnRcIlxufSk7XG5cblxuLy8gaGFuZGxlIG1lc3NhZ2Ugc2VuZCBmcm9tIHRoZSBtYWluIHRocmVhZFxub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICB2YXIgZGF0YSA9IGUuZGF0YTtcbiAgdmFyIG91dCA9IDA7XG4gIHZhciBnID0gIGRhdGEuZ2VvanNvbjtcbiAgdmFyIGZlYXR1cmVzTGVuZ3RoID0gZy5mZWF0dXJlcy5sZW5ndGg7XG4gIC8vIGdldCBhbGwgYWJqZWN0IGluIG9uZVxuICBzZW5kTWVzc2FnZShcIkV4dHJhY3RpbmcgZ2VvbWV0cnkgZnJvbSBcIiArIGZlYXR1cmVzTGVuZ3RoICsgXCIgZmVhdHVyZXMgLi4uXCIpO1xuXG4gIHNlbmRNZXNzYWdlKFwiQ29tYmluZSBcIiArIGZlYXR1cmVzTGVuZ3RoICsgXCIgZmVhdHVyZXMgLi4uXCIpO1xuICBnID0gY29tYmluZShnKTtcblxuICBzZW5kTWVzc2FnZShcIkNhbGN1bGF0aW5nIGVudmVsb3BwZSAuLi5cIik7XG4gIGcgPSBidWZmZXIoZywwKTtcblxuICBzZW5kTWVzc2FnZShcIkNsaXBwaW5nIGRhdGEgdG8gc2VsZWN0ZWQgZXh0ZW50IC4uLlwiKTsgXG4gIGcgPSBiYm94Q2xpcChnLmZlYXR1cmVzWzBdLGRhdGEuYmJveCk7XG5cbiAgc2VuZE1lc3NhZ2UoXCJDYWxjdWxhdGluZyBhcmVhIC4uLlwiKTtcbiAgb3V0ID0gYXJlYShnKSAqIDFlLTY7XG5cbiAgc2VuZEVuZChNYXRoLnJvdW5kKG91dCkpO1xuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL214X2hlbHBlcl9jYWxjX2FyZWEud29ya2VyLmpzIiwiaW1wb3J0IHtcbiAgICBwb2ludCxcbiAgICBwb2x5Z29uLFxuICAgIGxpbmVTdHJpbmcsXG4gICAgbXVsdGlQb2ludCxcbiAgICBtdWx0aVBvbHlnb24sXG4gICAgbXVsdGlMaW5lU3RyaW5nLFxuICAgIGZlYXR1cmUsXG4gICAgZ2VvbWV0cnksXG4gICAgZmVhdHVyZUNvbGxlY3Rpb24sXG4gICAgZ2VvbWV0cnlDb2xsZWN0aW9uLFxuICAgIHJhZGlhbnNUb0Rpc3RhbmNlLFxuICAgIGRpc3RhbmNlVG9SYWRpYW5zLFxuICAgIGRpc3RhbmNlVG9EZWdyZWVzLFxuICAgIGJlYXJpbmdUb0FuZ2xlLFxuICAgIHJhZGlhbnMyZGVncmVlcyxcbiAgICBkZWdyZWVzMnJhZGlhbnMsXG4gICAgcm91bmQsXG4gICAgY29udmVydERpc3RhbmNlLFxuICAgIGNvbnZlcnRBcmVhfSBmcm9tICdAdHVyZi9oZWxwZXJzJztcbmltcG9ydCB7XG4gICAgZ2V0R2VvbSxcbiAgICBnZXRHZW9tVHlwZSxcbiAgICBnZXRDb29yZCxcbiAgICBnZXRDb29yZHMsXG4gICAgZ2VvanNvblR5cGUsXG4gICAgZmVhdHVyZU9mLFxuICAgIGNvbGxlY3Rpb25PZixcbiAgICBjb250YWluc051bWJlcn0gZnJvbSAnQHR1cmYvaW52YXJpYW50JztcbmltcG9ydCB7XG4gICAgY29vcmRFYWNoLFxuICAgIGNvb3JkUmVkdWNlLFxuICAgIHByb3BFYWNoLFxuICAgIHByb3BSZWR1Y2UsXG4gICAgZmVhdHVyZUVhY2gsXG4gICAgZmVhdHVyZVJlZHVjZSxcbiAgICBjb29yZEFsbCxcbiAgICBnZW9tRWFjaCxcbiAgICBnZW9tUmVkdWNlLFxuICAgIGZsYXR0ZW5FYWNoLFxuICAgIGZsYXR0ZW5SZWR1Y2UsXG4gICAgc2VnbWVudEVhY2gsXG4gICAgc2VnbWVudFJlZHVjZX0gZnJvbSAnQHR1cmYvbWV0YSc7XG5pbXBvcnQgKiBhcyBpc29saW5lcyBmcm9tICdAdHVyZi9pc29saW5lcyc7XG5pbXBvcnQgKiBhcyBjb252ZXggZnJvbSAnQHR1cmYvY29udmV4JztcbmltcG9ydCAqIGFzIHdpdGhpbiBmcm9tICdAdHVyZi93aXRoaW4nO1xuaW1wb3J0ICogYXMgY29uY2F2ZSBmcm9tICdAdHVyZi9jb25jYXZlJztcbmltcG9ydCAqIGFzIGRpZmZlcmVuY2UgZnJvbSAnQHR1cmYvZGlmZmVyZW5jZSc7XG5pbXBvcnQgKiBhcyBkaXNzb2x2ZSBmcm9tICdAdHVyZi9kaXNzb2x2ZSc7XG5pbXBvcnQgKiBhcyBjb2xsZWN0IGZyb20gJ0B0dXJmL2NvbGxlY3QnO1xuaW1wb3J0ICogYXMgZmxpcCBmcm9tICdAdHVyZi9mbGlwJztcbmltcG9ydCAqIGFzIHNpbXBsaWZ5IGZyb20gJ0B0dXJmL3NpbXBsaWZ5JztcbmltcG9ydCAqIGFzIGJlemllciBmcm9tICdAdHVyZi9iZXppZXInO1xuaW1wb3J0ICogYXMgdGFnIGZyb20gJ0B0dXJmL3RhZyc7XG5pbXBvcnQgKiBhcyBzYW1wbGUgZnJvbSAnQHR1cmYvc2FtcGxlJztcbmltcG9ydCAqIGFzIGVudmVsb3BlIGZyb20gJ0B0dXJmL2VudmVsb3BlJztcbmltcG9ydCAqIGFzIHNxdWFyZSBmcm9tICdAdHVyZi9zcXVhcmUnO1xuaW1wb3J0ICogYXMgY2lyY2xlIGZyb20gJ0B0dXJmL2NpcmNsZSc7XG5pbXBvcnQgKiBhcyBtaWRwb2ludCBmcm9tICdAdHVyZi9taWRwb2ludCc7XG5pbXBvcnQgKiBhcyBidWZmZXIgZnJvbSAnQHR1cmYvYnVmZmVyJztcbmltcG9ydCAqIGFzIGNlbnRlciBmcm9tICdAdHVyZi9jZW50ZXInO1xuaW1wb3J0ICogYXMgY2VudGVyT2ZNYXNzIGZyb20gJ0B0dXJmL2NlbnRlci1vZi1tYXNzJztcbmltcG9ydCAqIGFzIGNlbnRyb2lkIGZyb20gJ0B0dXJmL2NlbnRyb2lkJztcbmltcG9ydCAqIGFzIGNvbWJpbmUgZnJvbSAnQHR1cmYvY29tYmluZSc7XG5pbXBvcnQgKiBhcyBkaXN0YW5jZSBmcm9tICdAdHVyZi9kaXN0YW5jZSc7XG5pbXBvcnQgKiBhcyBleHBsb2RlIGZyb20gJ0B0dXJmL2V4cGxvZGUnO1xuaW1wb3J0ICogYXMgYmJveCBmcm9tICdAdHVyZi9iYm94JztcbmltcG9ydCAqIGFzIHRlc3NlbGF0ZSBmcm9tICdAdHVyZi90ZXNzZWxhdGUnO1xuaW1wb3J0ICogYXMgYmJveFBvbHlnb24gZnJvbSAnQHR1cmYvYmJveC1wb2x5Z29uJztcbmltcG9ydCAqIGFzIGluc2lkZSBmcm9tICdAdHVyZi9pbnNpZGUnO1xuaW1wb3J0ICogYXMgaW50ZXJzZWN0IGZyb20gJ0B0dXJmL2ludGVyc2VjdCc7XG5pbXBvcnQgKiBhcyBuZWFyZXN0IGZyb20gJ0B0dXJmL25lYXJlc3QnO1xuaW1wb3J0ICogYXMgcGxhbmVwb2ludCBmcm9tICdAdHVyZi9wbGFuZXBvaW50JztcbmltcG9ydCAqIGFzIHJhbmRvbSBmcm9tICdAdHVyZi9yYW5kb20nO1xuaW1wb3J0ICogYXMgdGluIGZyb20gJ0B0dXJmL3Rpbic7XG5pbXBvcnQgKiBhcyB1bmlvbiBmcm9tICdAdHVyZi91bmlvbic7XG5pbXBvcnQgKiBhcyBiZWFyaW5nIGZyb20gJ0B0dXJmL2JlYXJpbmcnO1xuaW1wb3J0ICogYXMgZGVzdGluYXRpb24gZnJvbSAnQHR1cmYvZGVzdGluYXRpb24nO1xuaW1wb3J0ICogYXMga2lua3MgZnJvbSAnQHR1cmYva2lua3MnO1xuaW1wb3J0ICogYXMgcG9pbnRPblN1cmZhY2UgZnJvbSAnQHR1cmYvcG9pbnQtb24tc3VyZmFjZSc7XG5pbXBvcnQgKiBhcyBhcmVhIGZyb20gJ0B0dXJmL2FyZWEnO1xuaW1wb3J0ICogYXMgYWxvbmcgZnJvbSAnQHR1cmYvYWxvbmcnO1xuaW1wb3J0ICogYXMgbGluZURpc3RhbmNlIGZyb20gJ0B0dXJmL2xpbmUtZGlzdGFuY2UnO1xuaW1wb3J0ICogYXMgbGluZVNsaWNlIGZyb20gJ0B0dXJmL2xpbmUtc2xpY2UnO1xuaW1wb3J0ICogYXMgbGluZVNsaWNlQWxvbmcgZnJvbSAnQHR1cmYvbGluZS1zbGljZS1hbG9uZyc7XG5pbXBvcnQgKiBhcyBwb2ludE9uTGluZSBmcm9tICdAdHVyZi9wb2ludC1vbi1saW5lJztcbmltcG9ydCAqIGFzIHBvaW50R3JpZCBmcm9tICdAdHVyZi9wb2ludC1ncmlkJztcbmltcG9ydCAqIGFzIHNxdWFyZUdyaWQgZnJvbSAnQHR1cmYvc3F1YXJlLWdyaWQnO1xuaW1wb3J0ICogYXMgdHJpYW5nbGVHcmlkIGZyb20gJ0B0dXJmL3RyaWFuZ2xlLWdyaWQnO1xuaW1wb3J0ICogYXMgaGV4R3JpZCBmcm9tICdAdHVyZi9oZXgtZ3JpZCc7XG5pbXBvcnQgKiBhcyBpZHcgZnJvbSAnQHR1cmYvaWR3JztcbmltcG9ydCAqIGFzIHRydW5jYXRlIGZyb20gJ0B0dXJmL3RydW5jYXRlJztcbmltcG9ydCAqIGFzIGZsYXR0ZW4gZnJvbSAnQHR1cmYvZmxhdHRlbic7XG5pbXBvcnQgKiBhcyBsaW5lSW50ZXJzZWN0IGZyb20gJ0B0dXJmL2xpbmUtaW50ZXJzZWN0JztcbmltcG9ydCAqIGFzIG1hc2sgZnJvbSAnQHR1cmYvbWFzayc7XG5pbXBvcnQgKiBhcyBsaW5lQ2h1bmsgZnJvbSAnQHR1cmYvbGluZS1jaHVuayc7XG5pbXBvcnQgKiBhcyB1bmtpbmtQb2x5Z29uIGZyb20gJ0B0dXJmL3Vua2luay1wb2x5Z29uJztcbmltcG9ydCAqIGFzIGdyZWF0Q2lyY2xlIGZyb20gJ0B0dXJmL2dyZWF0LWNpcmNsZSc7XG5pbXBvcnQgKiBhcyBsaW5lU2VnbWVudCBmcm9tICdAdHVyZi9saW5lLXNlZ21lbnQnO1xuaW1wb3J0ICogYXMgbGluZVNwbGl0IGZyb20gJ0B0dXJmL2xpbmUtc3BsaXQnO1xuaW1wb3J0ICogYXMgbGluZUFyYyBmcm9tICdAdHVyZi9saW5lLWFyYyc7XG5pbXBvcnQgKiBhcyBwb2x5Z29uVG9MaW5lU3RyaW5nIGZyb20gJ0B0dXJmL3BvbHlnb24tdG8tbGluZXN0cmluZyc7XG5pbXBvcnQgKiBhcyBsaW5lU3RyaW5nVG9Qb2x5Z29uIGZyb20gJ0B0dXJmL2xpbmVzdHJpbmctdG8tcG9seWdvbic7XG5pbXBvcnQgKiBhcyBiYm94Q2xpcCBmcm9tICdAdHVyZi9iYm94LWNsaXAnO1xuaW1wb3J0ICogYXMgbGluZU92ZXJsYXAgZnJvbSAnQHR1cmYvbGluZS1vdmVybGFwJztcbmltcG9ydCAqIGFzIHNlY3RvciBmcm9tICdAdHVyZi9zZWN0b3InO1xuaW1wb3J0ICogYXMgcmh1bWJCZWFyaW5nIGZyb20gJ0B0dXJmL3JodW1iLWJlYXJpbmcnO1xuaW1wb3J0ICogYXMgcmh1bWJEaXN0YW5jZSBmcm9tICdAdHVyZi9yaHVtYi1kaXN0YW5jZSc7XG5pbXBvcnQgKiBhcyByaHVtYkRlc3RpbmF0aW9uIGZyb20gJ0B0dXJmL3JodW1iLWRlc3RpbmF0aW9uJztcbmltcG9ydCAqIGFzIHBvbHlnb25UYW5nZW50cyBmcm9tICdAdHVyZi9wb2x5Z29uLXRhbmdlbnRzJztcbmltcG9ydCAqIGFzIHJld2luZCBmcm9tICdAdHVyZi9yZXdpbmQnO1xuaW1wb3J0ICogYXMgaXNvYmFuZHMgZnJvbSAnQHR1cmYvaXNvYmFuZHMnO1xuaW1wb3J0ICogYXMgdHJhbnNmb3JtUm90YXRlIGZyb20gJ0B0dXJmL3RyYW5zZm9ybS1yb3RhdGUnO1xuaW1wb3J0ICogYXMgdHJhbnNmb3JtU2NhbGUgZnJvbSAnQHR1cmYvdHJhbnNmb3JtLXNjYWxlJztcbmltcG9ydCAqIGFzIHRyYW5zZm9ybVRyYW5zbGF0ZSBmcm9tICdAdHVyZi90cmFuc2Zvcm0tdHJhbnNsYXRlJztcbmltcG9ydCAqIGFzIGxpbmVPZmZzZXQgZnJvbSAnQHR1cmYvbGluZS1vZmZzZXQnO1xuaW1wb3J0ICogYXMgcG9seWdvbml6ZSBmcm9tICdAdHVyZi9wb2x5Z29uaXplJztcbmltcG9ydCAqIGFzIGJvb2xlYW5EaXNqb2ludCBmcm9tICdAdHVyZi9ib29sZWFuLWRpc2pvaW50JztcbmltcG9ydCAqIGFzIGJvb2xlYW5Db250YWlucyBmcm9tICdAdHVyZi9ib29sZWFuLWNvbnRhaW5zJztcbmltcG9ydCAqIGFzIGJvb2xlYW5Dcm9zc2VzIGZyb20gJ0B0dXJmL2Jvb2xlYW4tY3Jvc3Nlcyc7XG5pbXBvcnQgKiBhcyBib29sZWFuQ2xvY2t3aXNlIGZyb20gJ0B0dXJmL2Jvb2xlYW4tY2xvY2t3aXNlJztcbmltcG9ydCAqIGFzIGJvb2xlYW5FcXVhbCBmcm9tICdAdHVyZi9ib29sZWFuLWVxdWFsJztcbmltcG9ydCAqIGFzIGNsb25lIGZyb20gJ0B0dXJmL2Nsb25lJztcbmltcG9ydCAqIGFzIGNsZWFuQ29vcmRzIGZyb20gJ0B0dXJmL2NsZWFuLWNvb3Jkcyc7XG5leHBvcnQge1xuICAgIGlzb2xpbmVzLFxuICAgIGNvbnZleCxcbiAgICB3aXRoaW4sXG4gICAgY29uY2F2ZSxcbiAgICBkaWZmZXJlbmNlLFxuICAgIGRpc3NvbHZlLFxuICAgIGNvbGxlY3QsXG4gICAgZmxpcCxcbiAgICBzaW1wbGlmeSxcbiAgICBiZXppZXIsXG4gICAgdGFnLFxuICAgIHNhbXBsZSxcbiAgICBlbnZlbG9wZSxcbiAgICBzcXVhcmUsXG4gICAgY2lyY2xlLFxuICAgIG1pZHBvaW50LFxuICAgIGJ1ZmZlcixcbiAgICBjZW50ZXIsXG4gICAgY2VudGVyT2ZNYXNzLFxuICAgIGNlbnRyb2lkLFxuICAgIGNvbWJpbmUsXG4gICAgZGlzdGFuY2UsXG4gICAgZXhwbG9kZSxcbiAgICBiYm94LFxuICAgIHRlc3NlbGF0ZSxcbiAgICBiYm94UG9seWdvbixcbiAgICBpbnNpZGUsXG4gICAgaW50ZXJzZWN0LFxuICAgIG5lYXJlc3QsXG4gICAgcGxhbmVwb2ludCxcbiAgICByYW5kb20sXG4gICAgdGluLFxuICAgIHVuaW9uLFxuICAgIGJlYXJpbmcsXG4gICAgZGVzdGluYXRpb24sXG4gICAga2lua3MsXG4gICAgcG9pbnRPblN1cmZhY2UsXG4gICAgYXJlYSxcbiAgICBhbG9uZyxcbiAgICBsaW5lRGlzdGFuY2UsXG4gICAgbGluZVNsaWNlLFxuICAgIGxpbmVTbGljZUFsb25nLFxuICAgIHBvaW50T25MaW5lLFxuICAgIHBvaW50R3JpZCxcbiAgICBzcXVhcmVHcmlkLFxuICAgIHRyaWFuZ2xlR3JpZCxcbiAgICBoZXhHcmlkLFxuICAgIGlkdyxcbiAgICBwb2ludCxcbiAgICBwb2x5Z29uLFxuICAgIGxpbmVTdHJpbmcsXG4gICAgbXVsdGlQb2ludCxcbiAgICBtdWx0aVBvbHlnb24sXG4gICAgbXVsdGlMaW5lU3RyaW5nLFxuICAgIGZlYXR1cmUsXG4gICAgZ2VvbWV0cnksXG4gICAgZmVhdHVyZUNvbGxlY3Rpb24sXG4gICAgZ2VvbWV0cnlDb2xsZWN0aW9uLFxuICAgIHJhZGlhbnNUb0Rpc3RhbmNlLFxuICAgIGRpc3RhbmNlVG9SYWRpYW5zLFxuICAgIGRpc3RhbmNlVG9EZWdyZWVzLFxuICAgIGdldENvb3JkLFxuICAgIGdldENvb3JkcyxcbiAgICBnZXRHZW9tLFxuICAgIGdldEdlb21UeXBlLFxuICAgIGdlb2pzb25UeXBlLFxuICAgIGZlYXR1cmVPZixcbiAgICBjb2xsZWN0aW9uT2YsXG4gICAgY29udGFpbnNOdW1iZXIsXG4gICAgdHJ1bmNhdGUsXG4gICAgZmxhdHRlbixcbiAgICBjb29yZEVhY2gsXG4gICAgY29vcmRSZWR1Y2UsXG4gICAgcHJvcEVhY2gsXG4gICAgcHJvcFJlZHVjZSxcbiAgICBmZWF0dXJlRWFjaCxcbiAgICBjb29yZEFsbCxcbiAgICBnZW9tRWFjaCxcbiAgICBsaW5lSW50ZXJzZWN0LFxuICAgIG1hc2ssXG4gICAgbGluZUNodW5rLFxuICAgIHVua2lua1BvbHlnb24sXG4gICAgZ3JlYXRDaXJjbGUsXG4gICAgbGluZVNlZ21lbnQsXG4gICAgbGluZVNwbGl0LFxuICAgIGxpbmVBcmMsXG4gICAgcG9seWdvblRvTGluZVN0cmluZyxcbiAgICBsaW5lU3RyaW5nVG9Qb2x5Z29uLFxuICAgIGJib3hDbGlwLFxuICAgIGxpbmVPdmVybGFwLFxuICAgIHNlY3RvcixcbiAgICByaHVtYkJlYXJpbmcsXG4gICAgcmh1bWJEaXN0YW5jZSxcbiAgICByaHVtYkRlc3RpbmF0aW9uLFxuICAgIHBvbHlnb25UYW5nZW50cyxcbiAgICByZXdpbmQsXG4gICAgaXNvYmFuZHMsXG4gICAgcmFkaWFuczJkZWdyZWVzLFxuICAgIGRlZ3JlZXMycmFkaWFucyxcbiAgICByb3VuZCxcbiAgICBmbGF0dGVuRWFjaCxcbiAgICBmbGF0dGVuUmVkdWNlLFxuICAgIGNvbnZlcnREaXN0YW5jZSxcbiAgICBjb252ZXJ0QXJlYSxcbiAgICB0cmFuc2Zvcm1Sb3RhdGUsXG4gICAgdHJhbnNmb3JtU2NhbGUsXG4gICAgdHJhbnNmb3JtVHJhbnNsYXRlLFxuICAgIGxpbmVPZmZzZXQsXG4gICAgcG9seWdvbml6ZSxcbiAgICBiZWFyaW5nVG9BbmdsZSxcbiAgICBmZWF0dXJlUmVkdWNlLFxuICAgIGdlb21SZWR1Y2UsXG4gICAgYm9vbGVhbkRpc2pvaW50LFxuICAgIGJvb2xlYW5Db250YWlucyxcbiAgICBib29sZWFuQ3Jvc3NlcyxcbiAgICBib29sZWFuQ2xvY2t3aXNlLFxuICAgIGJvb2xlYW5FcXVhbCxcbiAgICBjbG9uZSxcbiAgICBzZWdtZW50RWFjaCxcbiAgICBzZWdtZW50UmVkdWNlLFxuICAgIGNsZWFuQ29vcmRzXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvdHVyZi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDEwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmJveCA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50Jyk7XG52YXIgZ3JpZFRvTWF0cml4ID0gcmVxdWlyZSgnZ3JpZC10by1tYXRyaXgnKTtcbnZhciBtYXJjaGluZ3NxdWFyZXMgPSByZXF1aXJlKCdtYXJjaGluZ3NxdWFyZXMnKTtcbnZhciBtdWx0aUxpbmVTdHJpbmcgPSBoZWxwZXJzLm11bHRpTGluZVN0cmluZztcbnZhciBjb29yZEVhY2ggPSBtZXRhLmNvb3JkRWFjaDtcbnZhciBjb2xsZWN0aW9uT2YgPSBpbnZhcmlhbnQuY29sbGVjdGlvbk9mO1xudmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbjtcblxuLyoqXG4gKiBUYWtlcyBhIGdyaWQge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBvZiB7QGxpbmsgUG9pbnR9IGZlYXR1cmVzIHdpdGggei12YWx1ZXMgYW5kIGFuIGFycmF5IG9mXG4gKiB2YWx1ZSBicmVha3MgYW5kIGdlbmVyYXRlcyBbaXNvbGluZXNdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSXNvbGluZSkuXG4gKlxuICogQG5hbWUgaXNvbGluZXNcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBwb2ludEdyaWQgaW5wdXQgcG9pbnRzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGJyZWFrcyB2YWx1ZXMgb2YgYHpQcm9wZXJ0eWAgd2hlcmUgdG8gZHJhdyBpc29saW5lc1xuICogQHBhcmFtIHtzdHJpbmd9IFt6UHJvcGVydHk9J2VsZXZhdGlvbiddIHRoZSBwcm9wZXJ0eSBuYW1lIGluIGBwb2ludHNgIGZyb20gd2hpY2ggei12YWx1ZXMgd2lsbCBiZSBwdWxsZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc1RvQWxsSXNvbGluZXM9e31dIEdlb0pTT04gcHJvcGVydGllcyBwYXNzZWQgdG8gQUxMIGlzb2xpbmVzXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IFtwcm9wZXJ0aWVzUGVySXNvbGluZT1bXV0gR2VvSlNPTiBwcm9wZXJ0aWVzIHBhc3NlZCwgaW4gb3JkZXIsIHRvIHRoZSBjb3JyZXNwb25kZW50IGlzb2xpbmU7XG4gKiB0aGUgYnJlYWtzIGFycmF5IHdpbGwgZGVmaW5lIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgaXNvbGluZXMgYXJlIGNyZWF0ZWRcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxNdWx0aUxpbmVTdHJpbmc+fSBhIEZlYXR1cmVDb2xsZWN0aW9uIG9mIHtAbGluayBNdWx0aUxpbmVTdHJpbmd9IGZlYXR1cmVzIHJlcHJlc2VudGluZyBpc29saW5lc1xuICogQGV4YW1wbGVcbiAqIC8vIGNyZWF0ZSBhIGdyaWQgb2YgcG9pbnRzIHdpdGggcmFuZG9tIHotdmFsdWVzIGluIHRoZWlyIHByb3BlcnRpZXNcbiAqIHZhciBleHRlbnQgPSBbMCwgMzAsIDIwLCA1MF07XG4gKiB2YXIgY2VsbFdpZHRoID0gMTAwO1xuICogdmFyIHVuaXRzID0gJ21pbGVzJztcbiAqIHZhciBwb2ludEdyaWQgPSB0dXJmLnBvaW50R3JpZChleHRlbnQsIGNlbGxXaWR0aCwgdW5pdHMpO1xuICogZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludEdyaWQuZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAqICAgICBwb2ludEdyaWQuZmVhdHVyZXNbaV0ucHJvcGVydGllcy50ZW1wZXJhdHVyZSA9IE1hdGgucmFuZG9tKCkgKiAxMDtcbiAqIH1cbiAqIHZhciBicmVha3MgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xuICpcbiAqIHZhciBpc29saW5lcyA9IHR1cmYuaXNvbGluZXMocG9pbnRHcmlkLCBicmVha3MsICd0ZW1wZXJhdHVyZScpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtpc29saW5lc107XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvaW50R3JpZCwgYnJlYWtzLCB6UHJvcGVydHksIHByb3BlcnRpZXNUb0FsbElzb2xpbmVzLCBwcm9wZXJ0aWVzUGVySXNvbGluZSkge1xuICAgIC8vIERlZmF1bHQgUGFyYW1zXG4gICAgelByb3BlcnR5ID0gelByb3BlcnR5IHx8ICdlbGV2YXRpb24nO1xuICAgIHByb3BlcnRpZXNUb0FsbElzb2xpbmVzID0gcHJvcGVydGllc1RvQWxsSXNvbGluZXMgfHwge307XG4gICAgcHJvcGVydGllc1Blcklzb2xpbmUgPSBwcm9wZXJ0aWVzUGVySXNvbGluZSB8fCBbXTtcblxuICAgIC8vIElucHV0IHZhbGlkYXRpb25cbiAgICBjb2xsZWN0aW9uT2YocG9pbnRHcmlkLCAnUG9pbnQnLCAnSW5wdXQgbXVzdCBjb250YWluIFBvaW50cycpO1xuICAgIGlmICghYnJlYWtzKSB0aHJvdyBuZXcgRXJyb3IoJ2JyZWFrcyBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShicmVha3MpKSB0aHJvdyBuZXcgRXJyb3IoJ2JyZWFrcyBtdXN0IGJlIGFuIEFycmF5Jyk7XG4gICAgaWYgKCFpc09iamVjdChwcm9wZXJ0aWVzVG9BbGxJc29saW5lcykpIHRocm93IG5ldyBFcnJvcigncHJvcGVydGllc1RvQWxsSXNvbGluZXMgbXVzdCBiZSBhbiBPYmplY3QnKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcGVydGllc1Blcklzb2xpbmUpKSB0aHJvdyBuZXcgRXJyb3IoJ3Byb3BlcnRpZXNQZXJJc29saW5lIG11c3QgYmUgYW4gQXJyYXknKTtcbiAgICBpZiAodHlwZW9mIHpQcm9wZXJ0eSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcignelByb3BlcnR5IG11c3QgYmUgYSBzdHJpbmcnKTtcblxuICAgIC8vIElzb2xpbmUgbWV0aG9kc1xuICAgIHZhciBtYXRyaXggPSBncmlkVG9NYXRyaXgocG9pbnRHcmlkLCB6UHJvcGVydHksIHRydWUpO1xuICAgIHZhciBpc29saW5lcyA9IGNyZWF0ZUlzb0xpbmVzKG1hdHJpeCwgYnJlYWtzLCB6UHJvcGVydHksIHByb3BlcnRpZXNUb0FsbElzb2xpbmVzLCBwcm9wZXJ0aWVzUGVySXNvbGluZSk7XG4gICAgdmFyIHNjYWxlZElzb2xpbmVzID0gcmVzY2FsZUlzb2xpbmVzKGlzb2xpbmVzLCBtYXRyaXgsIHBvaW50R3JpZCk7XG5cbiAgICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24oc2NhbGVkSXNvbGluZXMpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBpc29saW5lcyBsaW5lcyAoZmVhdHVyZXNDb2xsZWN0aW9uIG9mIE11bHRpTGluZVN0cmluZyBmZWF0dXJlcykgZnJvbSB0aGUgMkQgZGF0YSBncmlkXG4gKlxuICogTWFyY2hpbmdzcXVhcmVzIHByb2Nlc3MgdGhlIGdyaWQgZGF0YSBhcyBhIDNEIHJlcHJlc2VudGF0aW9uIG9mIGEgZnVuY3Rpb24gb24gYSAyRCBwbGFuZSwgdGhlcmVmb3JlIGl0XG4gKiBhc3N1bWVzIHRoZSBwb2ludHMgKHgteSBjb29yZGluYXRlcykgYXJlIG9uZSAndW5pdCcgZGlzdGFuY2UuIFRoZSByZXN1bHQgb2YgdGhlIGlzb2xpbmVzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlXG4gKiByZXNjYWxlZCwgd2l0aCB0dXJmanMsIHRvIHRoZSBvcmlnaW5hbCBhcmVhIGFuZCBwcm9wb3J0aW9ucyBvbiB0aGUgbWFwXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG1hdHJpeCBHcmlkIERhdGFcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYnJlYWtzIEJyZWFrc1xuICogQHBhcmFtIHtzdHJpbmd9IHpQcm9wZXJ0eSBuYW1lIG9mIHRoZSB6LXZhbHVlcyBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzVG9BbGxJc29saW5lcz17fV0gR2VvSlNPTiBwcm9wZXJ0aWVzIHBhc3NlZCB0byBBTEwgaXNvbGluZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc1Blcklzb2xpbmU9W11dIEdlb0pTT04gcHJvcGVydGllcyBwYXNzZWQgdG8gdGhlIGNvcnJlc3BvbmRlbnQgaXNvbGluZVxuICogQHJldHVybnMge0FycmF5PE11bHRpTGluZVN0cmluZz59IGlzb2xpbmVzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlzb0xpbmVzKG1hdHJpeCwgYnJlYWtzLCB6UHJvcGVydHksIHByb3BlcnRpZXNUb0FsbElzb2xpbmVzLCBwcm9wZXJ0aWVzUGVySXNvbGluZSkge1xuICAgIHZhciBpc29saW5lcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYnJlYWtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0aHJlc2hvbGQgPSArYnJlYWtzW2ldOyAvLyBtYWtlIHN1cmUgaXQncyBhIG51bWJlclxuXG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgcHJvcGVydGllc1RvQWxsSXNvbGluZXMsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzUGVySXNvbGluZVtpXVxuICAgICAgICApO1xuICAgICAgICBwcm9wZXJ0aWVzW3pQcm9wZXJ0eV0gPSB0aHJlc2hvbGQ7XG4gICAgICAgIHZhciBpc29saW5lID0gbXVsdGlMaW5lU3RyaW5nKG1hcmNoaW5nc3F1YXJlcy5pc29Db250b3VycyhtYXRyaXgsIHRocmVzaG9sZCksIHByb3BlcnRpZXMpO1xuXG4gICAgICAgIGlzb2xpbmVzLnB1c2goaXNvbGluZSk7XG4gICAgfVxuICAgIHJldHVybiBpc29saW5lcztcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGVzIGFuZCBzY2FsZXMgaXNvbGluZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxNdWx0aUxpbmVTdHJpbmc+fSBpc29saW5lcyB0byBiZSByZXNjYWxlZFxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gbWF0cml4IEdyaWQgRGF0YVxuICogQHBhcmFtIHtPYmplY3R9IHBvaW50cyBQb2ludHMgYnkgTGF0aXR1ZGVcbiAqIEByZXR1cm5zIHtBcnJheTxNdWx0aUxpbmVTdHJpbmc+fSBpc29saW5lc1xuICovXG5mdW5jdGlvbiByZXNjYWxlSXNvbGluZXMoaXNvbGluZXMsIG1hdHJpeCwgcG9pbnRzKSB7XG5cbiAgICAvLyBnZXQgZGltZW5zaW9ucyAob24gdGhlIG1hcCkgb2YgdGhlIG9yaWdpbmFsIGdyaWRcbiAgICB2YXIgZ3JpZEJib3ggPSBiYm94KHBvaW50cyk7IC8vIFsgbWluWCwgbWluWSwgbWF4WCwgbWF4WSBdXG4gICAgdmFyIG9yaWdpbmFsV2lkdGggPSBncmlkQmJveFsyXSAtIGdyaWRCYm94WzBdO1xuICAgIHZhciBvcmlnaW5hbEhlaWd0aCA9IGdyaWRCYm94WzNdIC0gZ3JpZEJib3hbMV07XG5cbiAgICAvLyBnZXQgb3JpZ2luLCB3aGljaCBpcyB0aGUgZmlyc3QgcG9pbnQgb2YgdGhlIGxhc3Qgcm93IG9uIHRoZSByZWN0YW5ndWxhciBkYXRhIG9uIHRoZSBtYXBcbiAgICB2YXIgeDAgPSBncmlkQmJveFswXTtcbiAgICB2YXIgeTAgPSBncmlkQmJveFsxXTtcblxuICAgIC8vIGdldCBudW1iZXIgb2YgY2VsbHMgcGVyIHNpZGVcbiAgICB2YXIgbWF0cml4V2lkdGggPSBtYXRyaXhbMF0ubGVuZ3RoIC0gMTtcbiAgICB2YXIgbWF0cml4SGVpZ2h0ID0gbWF0cml4Lmxlbmd0aCAtIDE7XG5cbiAgICAvLyBjYWxjdWxhdGUgdGhlIHNjYWxpbmcgZmFjdG9yIGJldHdlZW4gbWF0cml4IGFuZCByZWN0YW5ndWxhciBncmlkIG9uIHRoZSBtYXBcbiAgICB2YXIgc2NhbGVYID0gb3JpZ2luYWxXaWR0aCAvIG1hdHJpeFdpZHRoO1xuICAgIHZhciBzY2FsZVkgPSBvcmlnaW5hbEhlaWd0aCAvIG1hdHJpeEhlaWdodDtcblxuICAgIHZhciByZXNpemUgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgcG9pbnRbMF0gPSBwb2ludFswXSAqIHNjYWxlWCArIHgwO1xuICAgICAgICBwb2ludFsxXSA9IHBvaW50WzFdICogc2NhbGVZICsgeTA7XG4gICAgfTtcblxuICAgIC8vIHJlc2l6ZSBhbmQgc2hpZnQgZWFjaCBwb2ludC9saW5lIG9mIHRoZSBpc29saW5lc1xuICAgIGlzb2xpbmVzLmZvckVhY2goZnVuY3Rpb24gKGlzb2xpbmUpIHtcbiAgICAgICAgY29vcmRFYWNoKGlzb2xpbmUsIHJlc2l6ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGlzb2xpbmVzO1xufVxuXG4vKipcbiAqIENoZWNrcyBpbnB1dCB0eXBlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gYmUgY2hlY2tlZFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGlucHV0IGlzIGFuIE9iamVjdFxuICovXG5mdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgIHJldHVybiAoISFpbnB1dCkgJiYgKGlucHV0LmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvaXNvbGluZXMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDExMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiFcbiogQGxpY2Vuc2UgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLlxuKiBDb3B5cmlnaHQgKGMpIDIwMTUsIDIwMTUgUm9ubnkgTG9yZW56IDxyb25ueUB0YmkudW5pdmllLmFjLmF0PlxuKiB2LiAxLjIuMFxuKiBodHRwczovL2dpdGh1Yi5jb20vUmF1bVplaXQvTWFyY2hpbmdTcXVhcmVzLmpzXG4qL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHsgcmV0dXJuIHsgaXNvQmFuZHMgOiBmYWN0b3J5KCkgfTsgfSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHsgaXNvQmFuZHMgOiBmYWN0b3J5KCkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290Lk1hcmNoaW5nU3F1YXJlc0pTID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNvQmFuZHMgOiBmYWN0b3J5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc29Db250b3VycyA6IChyb290Lk1hcmNoaW5nU3F1YXJlc0pTKSA/IHJvb3QuTWFyY2hpbmdTcXVhcmVzSlMuaXNvQ29udG91cnMgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4gIHZhciBkZWZhdWx0U2V0dGluZ3MgPSB7XG4gICAgc3VjY2Vzc0NhbGxiYWNrOiAgbnVsbCxcbiAgICB2ZXJib3NlOiAgICAgICAgICBmYWxzZSxcbiAgICBwb2x5Z29uczogICAgICAgICBmYWxzZVxuICB9O1xuICAgIFxuICB2YXIgc2V0dGluZ3MgPSB7fTtcbiAgICBcbiAgICAvKlxuICAgICAgQ29tcHV0ZSBpc29iYW5kcyhzKSBvZiBhIHNjYWxhciAyRCBmaWVsZCBnaXZlbiBhIGNlcnRhaW5cbiAgICAgIHRocmVzaG9sZCBhbmQgYSBiYW5kd2lkdGggYnkgYXBwbHlpbmcgdGhlIE1hcmNoaW5nIFNxdWFyZXNcbiAgICAgIEFsZ29yaXRobS4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYSBsaXN0IG9mIHBhdGggY29vcmRpbmF0ZXNcbiAgICAgIGVpdGhlciBmb3IgaW5kaXZpZHVhbCBwb2x5Z29ucyB3aXRoaW4gZWFjaCBncmlkIGNlbGwsIG9yIHRoZVxuICAgICAgb3V0bGluZSBvZiBjb25uZWN0ZWQgcG9seWdvbnMuXG4gICAgKi9cbiAgZnVuY3Rpb24gaXNvQmFuZHMoZGF0YSwgbWluViwgYmFuZHdpZHRoLCBvcHRpb25zKXtcbiAgICAvKiBwcm9jZXNzIG9wdGlvbnMgKi9cbiAgICBvcHRpb25zID0gb3B0aW9ucyA/IG9wdGlvbnMgOiB7fTtcblxuICAgIHZhciBvcHRpb25LZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdFNldHRpbmdzKTtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBvcHRpb25LZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHZhciBrZXkgPSBvcHRpb25LZXlzW2ldO1xuICAgICAgdmFyIHZhbCA9IG9wdGlvbnNba2V5XTtcbiAgICAgIHZhbCA9ICgodHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgIT09IG51bGwpKSA/IHZhbCA6IGRlZmF1bHRTZXR0aW5nc1trZXldO1xuXG4gICAgICBzZXR0aW5nc1trZXldID0gdmFsO1xuICAgIH1cblxuICAgIGlmKHNldHRpbmdzLnZlcmJvc2UpXG4gICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiBjb21wdXRpbmcgaXNvYmFuZHMgZm9yIFtcIiArIG1pblYgKyBcIjpcIiArIChtaW5WICsgYmFuZHdpZHRoKSArIFwiXVwiKTtcblxuICAgIHZhciBncmlkID0gY29tcHV0ZUJhbmRHcmlkKGRhdGEsIG1pblYsIGJhbmR3aWR0aCk7XG5cbiAgICB2YXIgcmV0O1xuICAgIGlmKHNldHRpbmdzLnBvbHlnb25zKXtcbiAgICAgIGlmIChzZXR0aW5ncy52ZXJib3NlKVxuICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiByZXR1cm5pbmcgc2luZ2xlIHBvbHlnb25zIGZvciBlYWNoIGdyaWQgY2VsbFwiKTtcbiAgICAgIHJldCA9IEJhbmRHcmlkMkFyZWFzKGdyaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc2V0dGluZ3MudmVyYm9zZSlcbiAgICAgICAgY29uc29sZS5sb2coXCJNYXJjaGluZ1NxdWFyZXNKUy1pc29CYW5kczogcmV0dXJuaW5nIHBvbHlnb24gcGF0aHMgZm9yIGVudGlyZSBkYXRhIGdyaWRcIik7XG4gICAgICByZXQgPSBCYW5kR3JpZDJBcmVhUGF0aHMoZ3JpZCk7XG4gICAgfVxuXG4gICAgaWYodHlwZW9mIHNldHRpbmdzLnN1Y2Nlc3NDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHNldHRpbmdzLnN1Y2Nlc3NDYWxsYmFjayhyZXQpO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qXG4gICAgVGhhdHMgYWxsIGZvciB0aGUgcHVibGljIGludGVyZmFjZSwgYmVsb3cgZm9sbG93cyB0aGUgYWN0dWFsXG4gICAgaW1wbGVtZW50YXRpb25cbiAgKi9cblxuICAvKiBTb21lIHByaXZhdGUgdmFyaWFibGVzICovXG4gIHZhciBOb2RlMCA9IDY0LFxuICAgICAgTm9kZTEgPSAxNixcbiAgICAgIE5vZGUyID0gNCxcbiAgICAgIE5vZGUzID0gMTtcblxuICAvKiAgRm9yIGlzb0JhbmRzLCBlYWNoIHNxdWFyZSBpcyBkZWZpbmVkIGJ5IHRoZSB0aHJlZSBzdGF0ZXNcbiAgICAgIG9mIGl0cyBjb3JuZXIgcG9pbnRzLiBIb3dldmVyLCBzaW5jZSBjb21wdXRlcnMgdXNlIHBvd2VyLTJcbiAgICAgIHZhbHVlcywgd2UgdXNlIDJiaXRzIHBlciB0cml0LCBpLmUuOlxuXG4gICAgICAwMCAuLi4gYmVsb3cgbWluVlxuICAgICAgMDEgLi4uIGJldHdlZW4gbWluViBhbmQgbWF4VlxuICAgICAgMTAgLi4uIGFib3ZlIG1heFZcblxuICAgICAgSGVuY2Ugd2UgbWFwIHRoZSA0LXRyaXQgY29uZmlndXJhdGlvbnMgYXMgZm9sbG93czpcblxuICAgICAgMDAwMCA9PiAwXG4gICAgICAwMDAxID0+IDFcbiAgICAgIDAwMDIgPT4gMlxuICAgICAgMDAxMCA9PiA0XG4gICAgICAwMDExID0+IDVcbiAgICAgIDAwMTIgPT4gNlxuICAgICAgMDAyMCA9PiA4XG4gICAgICAwMDIxID0+IDlcbiAgICAgIDAwMjIgPT4gMTBcbiAgICAgIDAxMDAgPT4gMTZcbiAgICAgIDAxMDEgPT4gMTdcbiAgICAgIDAxMDIgPT4gMThcbiAgICAgIDAxMTAgPT4gMjBcbiAgICAgIDAxMTEgPT4gMjFcbiAgICAgIDAxMTIgPT4gMjJcbiAgICAgIDAxMjAgPT4gMjRcbiAgICAgIDAxMjEgPT4gMjVcbiAgICAgIDAxMjIgPT4gMjZcbiAgICAgIDAyMDAgPT4gMzJcbiAgICAgIDAyMDEgPT4gMzNcbiAgICAgIDAyMDIgPT4gMzRcbiAgICAgIDAyMTAgPT4gMzZcbiAgICAgIDAyMTEgPT4gMzdcbiAgICAgIDAyMTIgPT4gMzhcbiAgICAgIDAyMjAgPT4gNDBcbiAgICAgIDAyMjEgPT4gNDFcbiAgICAgIDAyMjIgPT4gNDJcbiAgICAgIDEwMDAgPT4gNjRcbiAgICAgIDEwMDEgPT4gNjVcbiAgICAgIDEwMDIgPT4gNjZcbiAgICAgIDEwMTAgPT4gNjhcbiAgICAgIDEwMTEgPT4gNjlcbiAgICAgIDEwMTIgPT4gNzBcbiAgICAgIDEwMjAgPT4gNzJcbiAgICAgIDEwMjEgPT4gNzNcbiAgICAgIDEwMjIgPT4gNzRcbiAgICAgIDExMDAgPT4gODBcbiAgICAgIDExMDEgPT4gODFcbiAgICAgIDExMDIgPT4gODJcbiAgICAgIDExMTAgPT4gODRcbiAgICAgIDExMTEgPT4gODVcbiAgICAgIDExMTIgPT4gODZcbiAgICAgIDExMjAgPT4gODhcbiAgICAgIDExMjEgPT4gODlcbiAgICAgIDExMjIgPT4gOTBcbiAgICAgIDEyMDAgPT4gOTZcbiAgICAgIDEyMDEgPT4gOTdcbiAgICAgIDEyMDIgPT4gOThcbiAgICAgIDEyMTAgPT4gMTAwXG4gICAgICAxMjExID0+IDEwMVxuICAgICAgMTIxMiA9PiAxMDJcbiAgICAgIDEyMjAgPT4gMTA0XG4gICAgICAxMjIxID0+IDEwNVxuICAgICAgMTIyMiA9PiAxMDZcbiAgICAgIDIwMDAgPT4gMTI4XG4gICAgICAyMDAxID0+IDEyOVxuICAgICAgMjAwMiA9PiAxMzBcbiAgICAgIDIwMTAgPT4gMTMyXG4gICAgICAyMDExID0+IDEzM1xuICAgICAgMjAxMiA9PiAxMzRcbiAgICAgIDIwMjAgPT4gMTM2XG4gICAgICAyMDIxID0+IDEzN1xuICAgICAgMjAyMiA9PiAxMzhcbiAgICAgIDIxMDAgPT4gMTQ0XG4gICAgICAyMTAxID0+IDE0NVxuICAgICAgMjEwMiA9PiAxNDZcbiAgICAgIDIxMTAgPT4gMTQ4XG4gICAgICAyMTExID0+IDE0OVxuICAgICAgMjExMiA9PiAxNTBcbiAgICAgIDIxMjAgPT4gMTUyXG4gICAgICAyMTIxID0+IDE1M1xuICAgICAgMjEyMiA9PiAxNTRcbiAgICAgIDIyMDAgPT4gMTYwXG4gICAgICAyMjAxID0+IDE2MVxuICAgICAgMjIwMiA9PiAxNjJcbiAgICAgIDIyMTAgPT4gMTY0XG4gICAgICAyMjExID0+IDE2NVxuICAgICAgMjIxMiA9PiAxNjZcbiAgICAgIDIyMjAgPT4gMTY4XG4gICAgICAyMjIxID0+IDE2OVxuICAgICAgMjIyMiA9PiAxNzBcbiAgKi9cblxuICAvKlxuICAgIFRoZSBsb29rLXVwIHRhYmxlcyBmb3IgdHJhY2luZyBiYWNrIHRoZSBjb250b3VyIHBhdGhcbiAgICBvZiBpc29CYW5kc1xuICAqL1xuXG4gIHZhciBpc29CYW5kTmV4dFhUTCA9IFtdO1xuICB2YXIgaXNvQmFuZE5leHRZVEwgPSBbXTtcbiAgdmFyIGlzb0JhbmROZXh0T1RMID0gW107XG5cbiAgdmFyIGlzb0JhbmROZXh0WFRSID0gW107XG4gIHZhciBpc29CYW5kTmV4dFlUUiA9IFtdO1xuICB2YXIgaXNvQmFuZE5leHRPVFIgPSBbXTtcblxuICB2YXIgaXNvQmFuZE5leHRYUlQgPSBbXTtcbiAgdmFyIGlzb0JhbmROZXh0WVJUID0gW107XG4gIHZhciBpc29CYW5kTmV4dE9SVCA9IFtdO1xuXG4gIHZhciBpc29CYW5kTmV4dFhSQiA9IFtdO1xuICB2YXIgaXNvQmFuZE5leHRZUkIgPSBbXTtcbiAgdmFyIGlzb0JhbmROZXh0T1JCID0gW107XG5cbiAgdmFyIGlzb0JhbmROZXh0WEJMID0gW107XG4gIHZhciBpc29CYW5kTmV4dFlCTCA9IFtdO1xuICB2YXIgaXNvQmFuZE5leHRPQkwgPSBbXTtcblxuICB2YXIgaXNvQmFuZE5leHRYQlIgPSBbXTtcbiAgdmFyIGlzb0JhbmROZXh0WUJSID0gW107XG4gIHZhciBpc29CYW5kTmV4dE9CUiA9IFtdO1xuXG4gIHZhciBpc29CYW5kTmV4dFhMVCA9IFtdO1xuICB2YXIgaXNvQmFuZE5leHRZTFQgPSBbXTtcbiAgdmFyIGlzb0JhbmROZXh0T0xUID0gW107XG5cbiAgdmFyIGlzb0JhbmROZXh0WExCID0gW107XG4gIHZhciBpc29CYW5kTmV4dFlMQiA9IFtdO1xuICB2YXIgaXNvQmFuZE5leHRPTEIgPSBbXTtcblxuICBpc29CYW5kTmV4dFhSVFs4NV0gPSBpc29CYW5kTmV4dFhSQls4NV0gPSAtMTtcbiAgaXNvQmFuZE5leHRZUlRbODVdID0gaXNvQmFuZE5leHRZUkJbODVdID0gMDtcbiAgaXNvQmFuZE5leHRPUlRbODVdID0gaXNvQmFuZE5leHRPUkJbODVdID0gMTtcbiAgaXNvQmFuZE5leHRYTFRbODVdID0gaXNvQmFuZE5leHRYTEJbODVdID0gMTtcbiAgaXNvQmFuZE5leHRZTFRbODVdID0gaXNvQmFuZE5leHRZTEJbODVdID0gMDtcbiAgaXNvQmFuZE5leHRPTFRbODVdID0gaXNvQmFuZE5leHRPTEJbODVdID0gMTtcblxuICBpc29CYW5kTmV4dFhUTFs4NV0gPSBpc29CYW5kTmV4dFhUUls4NV0gPSAwO1xuICBpc29CYW5kTmV4dFlUTFs4NV0gPSBpc29CYW5kTmV4dFlUUls4NV0gPSAtMTtcbiAgaXNvQmFuZE5leHRPVExbODVdID0gaXNvQmFuZE5leHRPQkxbODVdID0gMDtcbiAgaXNvQmFuZE5leHRYQlJbODVdID0gaXNvQmFuZE5leHRYQkxbODVdID0gMDtcbiAgaXNvQmFuZE5leHRZQlJbODVdID0gaXNvQmFuZE5leHRZQkxbODVdID0gMTtcbiAgaXNvQmFuZE5leHRPVFJbODVdID0gaXNvQmFuZE5leHRPQlJbODVdID0gMTtcblxuXG4gIC8qIHRyaWFuZ2xlIGNhc2VzICovXG4gIGlzb0JhbmROZXh0WExCWzFdID0gaXNvQmFuZE5leHRYTEJbMTY5XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzFdID0gaXNvQmFuZE5leHRZTEJbMTY5XSA9IC0xO1xuICBpc29CYW5kTmV4dE9MQlsxXSA9IGlzb0JhbmROZXh0T0xCWzE2OV0gPSAwO1xuICBpc29CYW5kTmV4dFhCTFsxXSA9IGlzb0JhbmROZXh0WEJMWzE2OV0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbMV0gPSBpc29CYW5kTmV4dFlCTFsxNjldID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbMV0gPSBpc29CYW5kTmV4dE9CTFsxNjldID0gMDtcblxuICBpc29CYW5kTmV4dFhSQls0XSA9IGlzb0JhbmROZXh0WFJCWzE2Nl0gPSAwO1xuICBpc29CYW5kTmV4dFlSQls0XSA9IGlzb0JhbmROZXh0WVJCWzE2Nl0gPSAtMTtcbiAgaXNvQmFuZE5leHRPUkJbNF0gPSBpc29CYW5kTmV4dE9SQlsxNjZdID0gMTtcbiAgaXNvQmFuZE5leHRYQlJbNF0gPSBpc29CYW5kTmV4dFhCUlsxNjZdID0gMTtcbiAgaXNvQmFuZE5leHRZQlJbNF0gPSBpc29CYW5kTmV4dFlCUlsxNjZdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbNF0gPSBpc29CYW5kTmV4dE9CUlsxNjZdID0gMDtcblxuICBpc29CYW5kTmV4dFhSVFsxNl0gPSBpc29CYW5kTmV4dFhSVFsxNTRdID0gMDtcbiAgaXNvQmFuZE5leHRZUlRbMTZdID0gaXNvQmFuZE5leHRZUlRbMTU0XSA9IDE7XG4gIGlzb0JhbmROZXh0T1JUWzE2XSA9IGlzb0JhbmROZXh0T1JUWzE1NF0gPSAxO1xuICBpc29CYW5kTmV4dFhUUlsxNl0gPSBpc29CYW5kTmV4dFhUUlsxNTRdID0gMTtcbiAgaXNvQmFuZE5leHRZVFJbMTZdID0gaXNvQmFuZE5leHRZVFJbMTU0XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzE2XSA9IGlzb0JhbmROZXh0T1RSWzE1NF0gPSAxO1xuXG4gIGlzb0JhbmROZXh0WExUWzY0XSA9IGlzb0JhbmROZXh0WExUWzEwNl0gPSAwO1xuICBpc29CYW5kTmV4dFlMVFs2NF0gPSBpc29CYW5kTmV4dFlMVFsxMDZdID0gMTtcbiAgaXNvQmFuZE5leHRPTFRbNjRdID0gaXNvQmFuZE5leHRPTFRbMTA2XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzY0XSA9IGlzb0JhbmROZXh0WFRMWzEwNl0gPSAtMTtcbiAgaXNvQmFuZE5leHRZVExbNjRdID0gaXNvQmFuZE5leHRZVExbMTA2XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzY0XSA9IGlzb0JhbmROZXh0T1RMWzEwNl0gPSAxO1xuXG4gIC8qIHNpbmdsZSB0cmFwZXpvaWQgY2FzZXMgKi9cbiAgaXNvQmFuZE5leHRYTFRbMl0gPSBpc29CYW5kTmV4dFhMVFsxNjhdID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbMl0gPSBpc29CYW5kTmV4dFlMVFsxNjhdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xUWzJdID0gaXNvQmFuZE5leHRPTFRbMTY4XSA9IDE7XG4gIGlzb0JhbmROZXh0WExCWzJdID0gaXNvQmFuZE5leHRYTEJbMTY4XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzJdID0gaXNvQmFuZE5leHRZTEJbMTY4XSA9IC0xO1xuICBpc29CYW5kTmV4dE9MQlsyXSA9IGlzb0JhbmROZXh0T0xCWzE2OF0gPSAwO1xuICBpc29CYW5kTmV4dFhCTFsyXSA9IGlzb0JhbmROZXh0WEJMWzE2OF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbMl0gPSBpc29CYW5kTmV4dFlCTFsxNjhdID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbMl0gPSBpc29CYW5kTmV4dE9CTFsxNjhdID0gMDtcbiAgaXNvQmFuZE5leHRYQlJbMl0gPSBpc29CYW5kTmV4dFhCUlsxNjhdID0gLTE7XG4gIGlzb0JhbmROZXh0WUJSWzJdID0gaXNvQmFuZE5leHRZQlJbMTY4XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JSWzJdID0gaXNvQmFuZE5leHRPQlJbMTY4XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbOF0gPSBpc29CYW5kTmV4dFhSVFsxNjJdID0gMDtcbiAgaXNvQmFuZE5leHRZUlRbOF0gPSBpc29CYW5kTmV4dFlSVFsxNjJdID0gLTE7XG4gIGlzb0JhbmROZXh0T1JUWzhdID0gaXNvQmFuZE5leHRPUlRbMTYyXSA9IDA7XG4gIGlzb0JhbmROZXh0WFJCWzhdID0gaXNvQmFuZE5leHRYUkJbMTYyXSA9IDA7XG4gIGlzb0JhbmROZXh0WVJCWzhdID0gaXNvQmFuZE5leHRZUkJbMTYyXSA9IC0xO1xuICBpc29CYW5kTmV4dE9SQls4XSA9IGlzb0JhbmROZXh0T1JCWzE2Ml0gPSAxO1xuICBpc29CYW5kTmV4dFhCTFs4XSA9IGlzb0JhbmROZXh0WEJMWzE2Ml0gPSAxO1xuICBpc29CYW5kTmV4dFlCTFs4XSA9IGlzb0JhbmROZXh0WUJMWzE2Ml0gPSAwO1xuICBpc29CYW5kTmV4dE9CTFs4XSA9IGlzb0JhbmROZXh0T0JMWzE2Ml0gPSAxO1xuICBpc29CYW5kTmV4dFhCUls4XSA9IGlzb0JhbmROZXh0WEJSWzE2Ml0gPSAxO1xuICBpc29CYW5kTmV4dFlCUls4XSA9IGlzb0JhbmROZXh0WUJSWzE2Ml0gPSAwO1xuICBpc29CYW5kTmV4dE9CUls4XSA9IGlzb0JhbmROZXh0T0JSWzE2Ml0gPSAwO1xuXG4gIGlzb0JhbmROZXh0WFJUWzMyXSA9IGlzb0JhbmROZXh0WFJUWzEzOF0gPSAwO1xuICBpc29CYW5kTmV4dFlSVFszMl0gPSBpc29CYW5kTmV4dFlSVFsxMzhdID0gMTtcbiAgaXNvQmFuZE5leHRPUlRbMzJdID0gaXNvQmFuZE5leHRPUlRbMTM4XSA9IDE7XG4gIGlzb0JhbmROZXh0WFJCWzMyXSA9IGlzb0JhbmROZXh0WFJCWzEzOF0gPSAwO1xuICBpc29CYW5kTmV4dFlSQlszMl0gPSBpc29CYW5kTmV4dFlSQlsxMzhdID0gMTtcbiAgaXNvQmFuZE5leHRPUkJbMzJdID0gaXNvQmFuZE5leHRPUkJbMTM4XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzMyXSA9IGlzb0JhbmROZXh0WFRMWzEzOF0gPSAxO1xuICBpc29CYW5kTmV4dFlUTFszMl0gPSBpc29CYW5kTmV4dFlUTFsxMzhdID0gMDtcbiAgaXNvQmFuZE5leHRPVExbMzJdID0gaXNvQmFuZE5leHRPVExbMTM4XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRSWzMyXSA9IGlzb0JhbmROZXh0WFRSWzEzOF0gPSAxO1xuICBpc29CYW5kTmV4dFlUUlszMl0gPSBpc29CYW5kTmV4dFlUUlsxMzhdID0gMDtcbiAgaXNvQmFuZE5leHRPVFJbMzJdID0gaXNvQmFuZE5leHRPVFJbMTM4XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYTEJbMTI4XSA9IGlzb0JhbmROZXh0WExCWzQyXSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzEyOF0gPSBpc29CYW5kTmV4dFlMQls0Ml0gPSAxO1xuICBpc29CYW5kTmV4dE9MQlsxMjhdID0gaXNvQmFuZE5leHRPTEJbNDJdID0gMTtcbiAgaXNvQmFuZE5leHRYTFRbMTI4XSA9IGlzb0JhbmROZXh0WExUWzQyXSA9IDA7XG4gIGlzb0JhbmROZXh0WUxUWzEyOF0gPSBpc29CYW5kTmV4dFlMVFs0Ml0gPSAxO1xuICBpc29CYW5kTmV4dE9MVFsxMjhdID0gaXNvQmFuZE5leHRPTFRbNDJdID0gMDtcbiAgaXNvQmFuZE5leHRYVExbMTI4XSA9IGlzb0JhbmROZXh0WFRMWzQyXSA9IC0xO1xuICBpc29CYW5kTmV4dFlUTFsxMjhdID0gaXNvQmFuZE5leHRZVExbNDJdID0gMDtcbiAgaXNvQmFuZE5leHRPVExbMTI4XSA9IGlzb0JhbmROZXh0T1RMWzQyXSA9IDE7XG4gIGlzb0JhbmROZXh0WFRSWzEyOF0gPSBpc29CYW5kTmV4dFhUUls0Ml0gPSAtMTtcbiAgaXNvQmFuZE5leHRZVFJbMTI4XSA9IGlzb0JhbmROZXh0WVRSWzQyXSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzEyOF0gPSBpc29CYW5kTmV4dE9UUls0Ml0gPSAwO1xuXG4gIC8qIHNpbmdsZSByZWN0YW5nbGUgY2FzZXMgKi9cbiAgaXNvQmFuZE5leHRYUkJbNV0gPSBpc29CYW5kTmV4dFhSQlsxNjVdID0gLTE7XG4gIGlzb0JhbmROZXh0WVJCWzVdID0gaXNvQmFuZE5leHRZUkJbMTY1XSA9IDA7XG4gIGlzb0JhbmROZXh0T1JCWzVdID0gaXNvQmFuZE5leHRPUkJbMTY1XSA9IDA7XG4gIGlzb0JhbmROZXh0WExCWzVdID0gaXNvQmFuZE5leHRYTEJbMTY1XSA9IDE7XG4gIGlzb0JhbmROZXh0WUxCWzVdID0gaXNvQmFuZE5leHRZTEJbMTY1XSA9IDA7XG4gIGlzb0JhbmROZXh0T0xCWzVdID0gaXNvQmFuZE5leHRPTEJbMTY1XSA9IDA7XG5cbiAgaXNvQmFuZE5leHRYQlJbMjBdID0gaXNvQmFuZE5leHRYQlJbMTUwXSA9IDA7XG4gIGlzb0JhbmROZXh0WUJSWzIwXSA9IGlzb0JhbmROZXh0WUJSWzE1MF0gPSAxO1xuICBpc29CYW5kTmV4dE9CUlsyMF0gPSBpc29CYW5kTmV4dE9CUlsxNTBdID0gMTtcbiAgaXNvQmFuZE5leHRYVFJbMjBdID0gaXNvQmFuZE5leHRYVFJbMTUwXSA9IDA7XG4gIGlzb0JhbmROZXh0WVRSWzIwXSA9IGlzb0JhbmROZXh0WVRSWzE1MF0gPSAtMTtcbiAgaXNvQmFuZE5leHRPVFJbMjBdID0gaXNvQmFuZE5leHRPVFJbMTUwXSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbODBdID0gaXNvQmFuZE5leHRYUlRbOTBdID0gLTE7XG4gIGlzb0JhbmROZXh0WVJUWzgwXSA9IGlzb0JhbmROZXh0WVJUWzkwXSA9IDA7XG4gIGlzb0JhbmROZXh0T1JUWzgwXSA9IGlzb0JhbmROZXh0T1JUWzkwXSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzgwXSA9IGlzb0JhbmROZXh0WExUWzkwXSA9IDE7XG4gIGlzb0JhbmROZXh0WUxUWzgwXSA9IGlzb0JhbmROZXh0WUxUWzkwXSA9IDA7XG4gIGlzb0JhbmROZXh0T0xUWzgwXSA9IGlzb0JhbmROZXh0T0xUWzkwXSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYQkxbNjVdID0gaXNvQmFuZE5leHRYQkxbMTA1XSA9IDA7XG4gIGlzb0JhbmROZXh0WUJMWzY1XSA9IGlzb0JhbmROZXh0WUJMWzEwNV0gPSAxO1xuICBpc29CYW5kTmV4dE9CTFs2NV0gPSBpc29CYW5kTmV4dE9CTFsxMDVdID0gMDtcbiAgaXNvQmFuZE5leHRYVExbNjVdID0gaXNvQmFuZE5leHRYVExbMTA1XSA9IDA7XG4gIGlzb0JhbmROZXh0WVRMWzY1XSA9IGlzb0JhbmROZXh0WVRMWzEwNV0gPSAtMTtcbiAgaXNvQmFuZE5leHRPVExbNjVdID0gaXNvQmFuZE5leHRPVExbMTA1XSA9IDA7XG5cbiAgaXNvQmFuZE5leHRYUlRbMTYwXSA9IGlzb0JhbmROZXh0WFJUWzEwXSA9IC0xO1xuICBpc29CYW5kTmV4dFlSVFsxNjBdID0gaXNvQmFuZE5leHRZUlRbMTBdID0gMDtcbiAgaXNvQmFuZE5leHRPUlRbMTYwXSA9IGlzb0JhbmROZXh0T1JUWzEwXSA9IDE7XG4gIGlzb0JhbmROZXh0WFJCWzE2MF0gPSBpc29CYW5kTmV4dFhSQlsxMF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZUkJbMTYwXSA9IGlzb0JhbmROZXh0WVJCWzEwXSA9IDA7XG4gIGlzb0JhbmROZXh0T1JCWzE2MF0gPSBpc29CYW5kTmV4dE9SQlsxMF0gPSAwO1xuICBpc29CYW5kTmV4dFhMQlsxNjBdID0gaXNvQmFuZE5leHRYTEJbMTBdID0gMTtcbiAgaXNvQmFuZE5leHRZTEJbMTYwXSA9IGlzb0JhbmROZXh0WUxCWzEwXSA9IDA7XG4gIGlzb0JhbmROZXh0T0xCWzE2MF0gPSBpc29CYW5kTmV4dE9MQlsxMF0gPSAwO1xuICBpc29CYW5kTmV4dFhMVFsxNjBdID0gaXNvQmFuZE5leHRYTFRbMTBdID0gMTtcbiAgaXNvQmFuZE5leHRZTFRbMTYwXSA9IGlzb0JhbmROZXh0WUxUWzEwXSA9IDA7XG4gIGlzb0JhbmROZXh0T0xUWzE2MF0gPSBpc29CYW5kTmV4dE9MVFsxMF0gPSAxO1xuXG4gIGlzb0JhbmROZXh0WEJSWzEzMF0gPSBpc29CYW5kTmV4dFhCUls0MF0gPSAwO1xuICBpc29CYW5kTmV4dFlCUlsxMzBdID0gaXNvQmFuZE5leHRZQlJbNDBdID0gMTtcbiAgaXNvQmFuZE5leHRPQlJbMTMwXSA9IGlzb0JhbmROZXh0T0JSWzQwXSA9IDE7XG4gIGlzb0JhbmROZXh0WEJMWzEzMF0gPSBpc29CYW5kTmV4dFhCTFs0MF0gPSAwO1xuICBpc29CYW5kTmV4dFlCTFsxMzBdID0gaXNvQmFuZE5leHRZQkxbNDBdID0gMTtcbiAgaXNvQmFuZE5leHRPQkxbMTMwXSA9IGlzb0JhbmROZXh0T0JMWzQwXSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzEzMF0gPSBpc29CYW5kTmV4dFhUTFs0MF0gPSAwO1xuICBpc29CYW5kTmV4dFlUTFsxMzBdID0gaXNvQmFuZE5leHRZVExbNDBdID0gLTE7XG4gIGlzb0JhbmROZXh0T1RMWzEzMF0gPSBpc29CYW5kTmV4dE9UTFs0MF0gPSAwO1xuICBpc29CYW5kTmV4dFhUUlsxMzBdID0gaXNvQmFuZE5leHRYVFJbNDBdID0gMDtcbiAgaXNvQmFuZE5leHRZVFJbMTMwXSA9IGlzb0JhbmROZXh0WVRSWzQwXSA9IC0xO1xuICBpc29CYW5kTmV4dE9UUlsxMzBdID0gaXNvQmFuZE5leHRPVFJbNDBdID0gMTtcblxuICAvKiBzaW5nbGUgaGV4YWdvbiBjYXNlcyAqL1xuICBpc29CYW5kTmV4dFhSQlszN10gPSBpc29CYW5kTmV4dFhSQlsxMzNdID0gMDtcbiAgaXNvQmFuZE5leHRZUkJbMzddID0gaXNvQmFuZE5leHRZUkJbMTMzXSA9IDE7XG4gIGlzb0JhbmROZXh0T1JCWzM3XSA9IGlzb0JhbmROZXh0T1JCWzEzM10gPSAxO1xuICBpc29CYW5kTmV4dFhMQlszN10gPSBpc29CYW5kTmV4dFhMQlsxMzNdID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMzddID0gaXNvQmFuZE5leHRZTEJbMTMzXSA9IDE7XG4gIGlzb0JhbmROZXh0T0xCWzM3XSA9IGlzb0JhbmROZXh0T0xCWzEzM10gPSAwO1xuICBpc29CYW5kTmV4dFhUTFszN10gPSBpc29CYW5kTmV4dFhUTFsxMzNdID0gLTE7XG4gIGlzb0JhbmROZXh0WVRMWzM3XSA9IGlzb0JhbmROZXh0WVRMWzEzM10gPSAwO1xuICBpc29CYW5kTmV4dE9UTFszN10gPSBpc29CYW5kTmV4dE9UTFsxMzNdID0gMDtcbiAgaXNvQmFuZE5leHRYVFJbMzddID0gaXNvQmFuZE5leHRYVFJbMTMzXSA9IDE7XG4gIGlzb0JhbmROZXh0WVRSWzM3XSA9IGlzb0JhbmROZXh0WVRSWzEzM10gPSAwO1xuICBpc29CYW5kTmV4dE9UUlszN10gPSBpc29CYW5kTmV4dE9UUlsxMzNdID0gMDtcblxuICBpc29CYW5kTmV4dFhCUlsxNDhdID0gaXNvQmFuZE5leHRYQlJbMjJdID0gLTE7XG4gIGlzb0JhbmROZXh0WUJSWzE0OF0gPSBpc29CYW5kTmV4dFlCUlsyMl0gPSAwO1xuICBpc29CYW5kTmV4dE9CUlsxNDhdID0gaXNvQmFuZE5leHRPQlJbMjJdID0gMDtcbiAgaXNvQmFuZE5leHRYTEJbMTQ4XSA9IGlzb0JhbmROZXh0WExCWzIyXSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzE0OF0gPSBpc29CYW5kTmV4dFlMQlsyMl0gPSAtMTtcbiAgaXNvQmFuZE5leHRPTEJbMTQ4XSA9IGlzb0JhbmROZXh0T0xCWzIyXSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzE0OF0gPSBpc29CYW5kTmV4dFhMVFsyMl0gPSAwO1xuICBpc29CYW5kTmV4dFlMVFsxNDhdID0gaXNvQmFuZE5leHRZTFRbMjJdID0gMTtcbiAgaXNvQmFuZE5leHRPTFRbMTQ4XSA9IGlzb0JhbmROZXh0T0xUWzIyXSA9IDE7XG4gIGlzb0JhbmROZXh0WFRSWzE0OF0gPSBpc29CYW5kTmV4dFhUUlsyMl0gPSAtMTtcbiAgaXNvQmFuZE5leHRZVFJbMTQ4XSA9IGlzb0JhbmROZXh0WVRSWzIyXSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzE0OF0gPSBpc29CYW5kTmV4dE9UUlsyMl0gPSAxO1xuXG4gIGlzb0JhbmROZXh0WFJUWzgyXSA9IGlzb0JhbmROZXh0WFJUWzg4XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzgyXSA9IGlzb0JhbmROZXh0WVJUWzg4XSA9IC0xO1xuICBpc29CYW5kTmV4dE9SVFs4Ml0gPSBpc29CYW5kTmV4dE9SVFs4OF0gPSAxO1xuICBpc29CYW5kTmV4dFhCUls4Ml0gPSBpc29CYW5kTmV4dFhCUls4OF0gPSAxO1xuICBpc29CYW5kTmV4dFlCUls4Ml0gPSBpc29CYW5kTmV4dFlCUls4OF0gPSAwO1xuICBpc29CYW5kTmV4dE9CUls4Ml0gPSBpc29CYW5kTmV4dE9CUls4OF0gPSAxO1xuICBpc29CYW5kTmV4dFhCTFs4Ml0gPSBpc29CYW5kTmV4dFhCTFs4OF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbODJdID0gaXNvQmFuZE5leHRZQkxbODhdID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbODJdID0gaXNvQmFuZE5leHRPQkxbODhdID0gMTtcbiAgaXNvQmFuZE5leHRYTFRbODJdID0gaXNvQmFuZE5leHRYTFRbODhdID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbODJdID0gaXNvQmFuZE5leHRZTFRbODhdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xUWzgyXSA9IGlzb0JhbmROZXh0T0xUWzg4XSA9IDA7XG5cbiAgaXNvQmFuZE5leHRYUlRbNzNdID0gaXNvQmFuZE5leHRYUlRbOTddID0gMDtcbiAgaXNvQmFuZE5leHRZUlRbNzNdID0gaXNvQmFuZE5leHRZUlRbOTddID0gMTtcbiAgaXNvQmFuZE5leHRPUlRbNzNdID0gaXNvQmFuZE5leHRPUlRbOTddID0gMDtcbiAgaXNvQmFuZE5leHRYUkJbNzNdID0gaXNvQmFuZE5leHRYUkJbOTddID0gMDtcbiAgaXNvQmFuZE5leHRZUkJbNzNdID0gaXNvQmFuZE5leHRZUkJbOTddID0gLTE7XG4gIGlzb0JhbmROZXh0T1JCWzczXSA9IGlzb0JhbmROZXh0T1JCWzk3XSA9IDA7XG4gIGlzb0JhbmROZXh0WEJMWzczXSA9IGlzb0JhbmROZXh0WEJMWzk3XSA9IDE7XG4gIGlzb0JhbmROZXh0WUJMWzczXSA9IGlzb0JhbmROZXh0WUJMWzk3XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JMWzczXSA9IGlzb0JhbmROZXh0T0JMWzk3XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzczXSA9IGlzb0JhbmROZXh0WFRMWzk3XSA9IDE7XG4gIGlzb0JhbmROZXh0WVRMWzczXSA9IGlzb0JhbmROZXh0WVRMWzk3XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzczXSA9IGlzb0JhbmROZXh0T1RMWzk3XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbMTQ1XSA9IGlzb0JhbmROZXh0WFJUWzI1XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzE0NV0gPSBpc29CYW5kTmV4dFlSVFsyNV0gPSAtMTtcbiAgaXNvQmFuZE5leHRPUlRbMTQ1XSA9IGlzb0JhbmROZXh0T1JUWzI1XSA9IDA7XG4gIGlzb0JhbmROZXh0WEJMWzE0NV0gPSBpc29CYW5kTmV4dFhCTFsyNV0gPSAxO1xuICBpc29CYW5kTmV4dFlCTFsxNDVdID0gaXNvQmFuZE5leHRZQkxbMjVdID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbMTQ1XSA9IGlzb0JhbmROZXh0T0JMWzI1XSA9IDE7XG4gIGlzb0JhbmROZXh0WExCWzE0NV0gPSBpc29CYW5kTmV4dFhMQlsyNV0gPSAwO1xuICBpc29CYW5kTmV4dFlMQlsxNDVdID0gaXNvQmFuZE5leHRZTEJbMjVdID0gMTtcbiAgaXNvQmFuZE5leHRPTEJbMTQ1XSA9IGlzb0JhbmROZXh0T0xCWzI1XSA9IDE7XG4gIGlzb0JhbmROZXh0WFRSWzE0NV0gPSBpc29CYW5kTmV4dFhUUlsyNV0gPSAtMTtcbiAgaXNvQmFuZE5leHRZVFJbMTQ1XSA9IGlzb0JhbmROZXh0WVRSWzI1XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzE0NV0gPSBpc29CYW5kTmV4dE9UUlsyNV0gPSAwO1xuXG4gIGlzb0JhbmROZXh0WFJCWzcwXSA9IGlzb0JhbmROZXh0WFJCWzEwMF0gPSAwO1xuICBpc29CYW5kTmV4dFlSQls3MF0gPSBpc29CYW5kTmV4dFlSQlsxMDBdID0gMTtcbiAgaXNvQmFuZE5leHRPUkJbNzBdID0gaXNvQmFuZE5leHRPUkJbMTAwXSA9IDA7XG4gIGlzb0JhbmROZXh0WEJSWzcwXSA9IGlzb0JhbmROZXh0WEJSWzEwMF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQlJbNzBdID0gaXNvQmFuZE5leHRZQlJbMTAwXSA9IDA7XG4gIGlzb0JhbmROZXh0T0JSWzcwXSA9IGlzb0JhbmROZXh0T0JSWzEwMF0gPSAxO1xuICBpc29CYW5kTmV4dFhMVFs3MF0gPSBpc29CYW5kTmV4dFhMVFsxMDBdID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbNzBdID0gaXNvQmFuZE5leHRZTFRbMTAwXSA9IC0xO1xuICBpc29CYW5kTmV4dE9MVFs3MF0gPSBpc29CYW5kTmV4dE9MVFsxMDBdID0gMTtcbiAgaXNvQmFuZE5leHRYVExbNzBdID0gaXNvQmFuZE5leHRYVExbMTAwXSA9IDE7XG4gIGlzb0JhbmROZXh0WVRMWzcwXSA9IGlzb0JhbmROZXh0WVRMWzEwMF0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFs3MF0gPSBpc29CYW5kTmV4dE9UTFsxMDBdID0gMDtcblxuICAvKiBzaW5nbGUgcGVudGFnb24gY2FzZXMgKi9cbiAgaXNvQmFuZE5leHRYUkJbMTAxXSA9IGlzb0JhbmROZXh0WFJCWzY5XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJCWzEwMV0gPSBpc29CYW5kTmV4dFlSQls2OV0gPSAxO1xuICBpc29CYW5kTmV4dE9SQlsxMDFdID0gaXNvQmFuZE5leHRPUkJbNjldID0gMDtcbiAgaXNvQmFuZE5leHRYVExbMTAxXSA9IGlzb0JhbmROZXh0WFRMWzY5XSA9IDE7XG4gIGlzb0JhbmROZXh0WVRMWzEwMV0gPSBpc29CYW5kTmV4dFlUTFs2OV0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFsxMDFdID0gaXNvQmFuZE5leHRPVExbNjldID0gMDtcblxuICBpc29CYW5kTmV4dFhMQlsxNDldID0gaXNvQmFuZE5leHRYTEJbMjFdID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMTQ5XSA9IGlzb0JhbmROZXh0WUxCWzIxXSA9IDE7XG4gIGlzb0JhbmROZXh0T0xCWzE0OV0gPSBpc29CYW5kTmV4dE9MQlsyMV0gPSAxO1xuICBpc29CYW5kTmV4dFhUUlsxNDldID0gaXNvQmFuZE5leHRYVFJbMjFdID0gLTE7XG4gIGlzb0JhbmROZXh0WVRSWzE0OV0gPSBpc29CYW5kTmV4dFlUUlsyMV0gPSAwO1xuICBpc29CYW5kTmV4dE9UUlsxNDldID0gaXNvQmFuZE5leHRPVFJbMjFdID0gMDtcblxuICBpc29CYW5kTmV4dFhCUls4Nl0gPSBpc29CYW5kTmV4dFhCUls4NF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQlJbODZdID0gaXNvQmFuZE5leHRZQlJbODRdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbODZdID0gaXNvQmFuZE5leHRPQlJbODRdID0gMTtcbiAgaXNvQmFuZE5leHRYTFRbODZdID0gaXNvQmFuZE5leHRYTFRbODRdID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbODZdID0gaXNvQmFuZE5leHRZTFRbODRdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xUWzg2XSA9IGlzb0JhbmROZXh0T0xUWzg0XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbODldID0gaXNvQmFuZE5leHRYUlRbODFdID0gMDtcbiAgaXNvQmFuZE5leHRZUlRbODldID0gaXNvQmFuZE5leHRZUlRbODFdID0gLTE7XG4gIGlzb0JhbmROZXh0T1JUWzg5XSA9IGlzb0JhbmROZXh0T1JUWzgxXSA9IDA7XG4gIGlzb0JhbmROZXh0WEJMWzg5XSA9IGlzb0JhbmROZXh0WEJMWzgxXSA9IDE7XG4gIGlzb0JhbmROZXh0WUJMWzg5XSA9IGlzb0JhbmROZXh0WUJMWzgxXSA9IDA7XG4gIGlzb0JhbmROZXh0T0JMWzg5XSA9IGlzb0JhbmROZXh0T0JMWzgxXSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbOTZdID0gaXNvQmFuZE5leHRYUlRbNzRdID0gMDtcbiAgaXNvQmFuZE5leHRZUlRbOTZdID0gaXNvQmFuZE5leHRZUlRbNzRdID0gMTtcbiAgaXNvQmFuZE5leHRPUlRbOTZdID0gaXNvQmFuZE5leHRPUlRbNzRdID0gMDtcbiAgaXNvQmFuZE5leHRYUkJbOTZdID0gaXNvQmFuZE5leHRYUkJbNzRdID0gLTE7XG4gIGlzb0JhbmROZXh0WVJCWzk2XSA9IGlzb0JhbmROZXh0WVJCWzc0XSA9IDA7XG4gIGlzb0JhbmROZXh0T1JCWzk2XSA9IGlzb0JhbmROZXh0T1JCWzc0XSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzk2XSA9IGlzb0JhbmROZXh0WExUWzc0XSA9IDE7XG4gIGlzb0JhbmROZXh0WUxUWzk2XSA9IGlzb0JhbmROZXh0WUxUWzc0XSA9IDA7XG4gIGlzb0JhbmROZXh0T0xUWzk2XSA9IGlzb0JhbmROZXh0T0xUWzc0XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzk2XSA9IGlzb0JhbmROZXh0WFRMWzc0XSA9IDE7XG4gIGlzb0JhbmROZXh0WVRMWzk2XSA9IGlzb0JhbmROZXh0WVRMWzc0XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzk2XSA9IGlzb0JhbmROZXh0T1RMWzc0XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbMjRdID0gaXNvQmFuZE5leHRYUlRbMTQ2XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzI0XSA9IGlzb0JhbmROZXh0WVJUWzE0Nl0gPSAtMTtcbiAgaXNvQmFuZE5leHRPUlRbMjRdID0gaXNvQmFuZE5leHRPUlRbMTQ2XSA9IDE7XG4gIGlzb0JhbmROZXh0WEJSWzI0XSA9IGlzb0JhbmROZXh0WEJSWzE0Nl0gPSAxO1xuICBpc29CYW5kTmV4dFlCUlsyNF0gPSBpc29CYW5kTmV4dFlCUlsxNDZdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbMjRdID0gaXNvQmFuZE5leHRPQlJbMTQ2XSA9IDE7XG4gIGlzb0JhbmROZXh0WEJMWzI0XSA9IGlzb0JhbmROZXh0WEJMWzE0Nl0gPSAwO1xuICBpc29CYW5kTmV4dFlCTFsyNF0gPSBpc29CYW5kTmV4dFlCTFsxNDZdID0gMTtcbiAgaXNvQmFuZE5leHRPQkxbMjRdID0gaXNvQmFuZE5leHRPQkxbMTQ2XSA9IDE7XG4gIGlzb0JhbmROZXh0WFRSWzI0XSA9IGlzb0JhbmROZXh0WFRSWzE0Nl0gPSAwO1xuICBpc29CYW5kTmV4dFlUUlsyNF0gPSBpc29CYW5kTmV4dFlUUlsxNDZdID0gLTE7XG4gIGlzb0JhbmROZXh0T1RSWzI0XSA9IGlzb0JhbmROZXh0T1RSWzE0Nl0gPSAwO1xuXG4gIGlzb0JhbmROZXh0WFJCWzZdID0gaXNvQmFuZE5leHRYUkJbMTY0XSA9IC0xO1xuICBpc29CYW5kTmV4dFlSQls2XSA9IGlzb0JhbmROZXh0WVJCWzE2NF0gPSAwO1xuICBpc29CYW5kTmV4dE9SQls2XSA9IGlzb0JhbmROZXh0T1JCWzE2NF0gPSAxO1xuICBpc29CYW5kTmV4dFhCUls2XSA9IGlzb0JhbmROZXh0WEJSWzE2NF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQlJbNl0gPSBpc29CYW5kTmV4dFlCUlsxNjRdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbNl0gPSBpc29CYW5kTmV4dE9CUlsxNjRdID0gMDtcbiAgaXNvQmFuZE5leHRYTEJbNl0gPSBpc29CYW5kTmV4dFhMQlsxNjRdID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbNl0gPSBpc29CYW5kTmV4dFlMQlsxNjRdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xCWzZdID0gaXNvQmFuZE5leHRPTEJbMTY0XSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzZdID0gaXNvQmFuZE5leHRYTFRbMTY0XSA9IDE7XG4gIGlzb0JhbmROZXh0WUxUWzZdID0gaXNvQmFuZE5leHRZTFRbMTY0XSA9IDA7XG4gIGlzb0JhbmROZXh0T0xUWzZdID0gaXNvQmFuZE5leHRPTFRbMTY0XSA9IDA7XG5cbiAgaXNvQmFuZE5leHRYQkxbMTI5XSA9IGlzb0JhbmROZXh0WEJMWzQxXSA9IDA7XG4gIGlzb0JhbmROZXh0WUJMWzEyOV0gPSBpc29CYW5kTmV4dFlCTFs0MV0gPSAxO1xuICBpc29CYW5kTmV4dE9CTFsxMjldID0gaXNvQmFuZE5leHRPQkxbNDFdID0gMTtcbiAgaXNvQmFuZE5leHRYTEJbMTI5XSA9IGlzb0JhbmROZXh0WExCWzQxXSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzEyOV0gPSBpc29CYW5kTmV4dFlMQls0MV0gPSAxO1xuICBpc29CYW5kTmV4dE9MQlsxMjldID0gaXNvQmFuZE5leHRPTEJbNDFdID0gMDtcbiAgaXNvQmFuZE5leHRYVExbMTI5XSA9IGlzb0JhbmROZXh0WFRMWzQxXSA9IC0xO1xuICBpc29CYW5kTmV4dFlUTFsxMjldID0gaXNvQmFuZE5leHRZVExbNDFdID0gMDtcbiAgaXNvQmFuZE5leHRPVExbMTI5XSA9IGlzb0JhbmROZXh0T1RMWzQxXSA9IDA7XG4gIGlzb0JhbmROZXh0WFRSWzEyOV0gPSBpc29CYW5kTmV4dFhUUls0MV0gPSAwO1xuICBpc29CYW5kTmV4dFlUUlsxMjldID0gaXNvQmFuZE5leHRZVFJbNDFdID0gLTE7XG4gIGlzb0JhbmROZXh0T1RSWzEyOV0gPSBpc29CYW5kTmV4dE9UUls0MV0gPSAwO1xuXG4gIGlzb0JhbmROZXh0WEJSWzY2XSA9IGlzb0JhbmROZXh0WEJSWzEwNF0gPSAwO1xuICBpc29CYW5kTmV4dFlCUls2Nl0gPSBpc29CYW5kTmV4dFlCUlsxMDRdID0gMTtcbiAgaXNvQmFuZE5leHRPQlJbNjZdID0gaXNvQmFuZE5leHRPQlJbMTA0XSA9IDA7XG4gIGlzb0JhbmROZXh0WEJMWzY2XSA9IGlzb0JhbmROZXh0WEJMWzEwNF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbNjZdID0gaXNvQmFuZE5leHRZQkxbMTA0XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JMWzY2XSA9IGlzb0JhbmROZXh0T0JMWzEwNF0gPSAxO1xuICBpc29CYW5kTmV4dFhMVFs2Nl0gPSBpc29CYW5kTmV4dFhMVFsxMDRdID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbNjZdID0gaXNvQmFuZE5leHRZTFRbMTA0XSA9IC0xO1xuICBpc29CYW5kTmV4dE9MVFs2Nl0gPSBpc29CYW5kTmV4dE9MVFsxMDRdID0gMDtcbiAgaXNvQmFuZE5leHRYVExbNjZdID0gaXNvQmFuZE5leHRYVExbMTA0XSA9IDA7XG4gIGlzb0JhbmROZXh0WVRMWzY2XSA9IGlzb0JhbmROZXh0WVRMWzEwNF0gPSAtMTtcbiAgaXNvQmFuZE5leHRPVExbNjZdID0gaXNvQmFuZE5leHRPVExbMTA0XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbMTQ0XSA9IGlzb0JhbmROZXh0WFJUWzI2XSA9IC0xO1xuICBpc29CYW5kTmV4dFlSVFsxNDRdID0gaXNvQmFuZE5leHRZUlRbMjZdID0gMDtcbiAgaXNvQmFuZE5leHRPUlRbMTQ0XSA9IGlzb0JhbmROZXh0T1JUWzI2XSA9IDA7XG4gIGlzb0JhbmROZXh0WExCWzE0NF0gPSBpc29CYW5kTmV4dFhMQlsyNl0gPSAxO1xuICBpc29CYW5kTmV4dFlMQlsxNDRdID0gaXNvQmFuZE5leHRZTEJbMjZdID0gMDtcbiAgaXNvQmFuZE5leHRPTEJbMTQ0XSA9IGlzb0JhbmROZXh0T0xCWzI2XSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzE0NF0gPSBpc29CYW5kTmV4dFhMVFsyNl0gPSAwO1xuICBpc29CYW5kTmV4dFlMVFsxNDRdID0gaXNvQmFuZE5leHRZTFRbMjZdID0gMTtcbiAgaXNvQmFuZE5leHRPTFRbMTQ0XSA9IGlzb0JhbmROZXh0T0xUWzI2XSA9IDE7XG4gIGlzb0JhbmROZXh0WFRSWzE0NF0gPSBpc29CYW5kTmV4dFhUUlsyNl0gPSAtMTtcbiAgaXNvQmFuZE5leHRZVFJbMTQ0XSA9IGlzb0JhbmROZXh0WVRSWzI2XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzE0NF0gPSBpc29CYW5kTmV4dE9UUlsyNl0gPSAxO1xuXG4gIGlzb0JhbmROZXh0WFJCWzM2XSA9IGlzb0JhbmROZXh0WFJCWzEzNF0gPSAwO1xuICBpc29CYW5kTmV4dFlSQlszNl0gPSBpc29CYW5kTmV4dFlSQlsxMzRdID0gMTtcbiAgaXNvQmFuZE5leHRPUkJbMzZdID0gaXNvQmFuZE5leHRPUkJbMTM0XSA9IDE7XG4gIGlzb0JhbmROZXh0WEJSWzM2XSA9IGlzb0JhbmROZXh0WEJSWzEzNF0gPSAwO1xuICBpc29CYW5kTmV4dFlCUlszNl0gPSBpc29CYW5kTmV4dFlCUlsxMzRdID0gMTtcbiAgaXNvQmFuZE5leHRPQlJbMzZdID0gaXNvQmFuZE5leHRPQlJbMTM0XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzM2XSA9IGlzb0JhbmROZXh0WFRMWzEzNF0gPSAwO1xuICBpc29CYW5kTmV4dFlUTFszNl0gPSBpc29CYW5kTmV4dFlUTFsxMzRdID0gLTE7XG4gIGlzb0JhbmROZXh0T1RMWzM2XSA9IGlzb0JhbmROZXh0T1RMWzEzNF0gPSAxO1xuICBpc29CYW5kTmV4dFhUUlszNl0gPSBpc29CYW5kTmV4dFhUUlsxMzRdID0gMTtcbiAgaXNvQmFuZE5leHRZVFJbMzZdID0gaXNvQmFuZE5leHRZVFJbMTM0XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzM2XSA9IGlzb0JhbmROZXh0T1RSWzEzNF0gPSAwO1xuXG4gIGlzb0JhbmROZXh0WFJUWzldID0gaXNvQmFuZE5leHRYUlRbMTYxXSA9IC0xO1xuICBpc29CYW5kTmV4dFlSVFs5XSA9IGlzb0JhbmROZXh0WVJUWzE2MV0gPSAwO1xuICBpc29CYW5kTmV4dE9SVFs5XSA9IGlzb0JhbmROZXh0T1JUWzE2MV0gPSAwO1xuICBpc29CYW5kTmV4dFhSQls5XSA9IGlzb0JhbmROZXh0WFJCWzE2MV0gPSAwO1xuICBpc29CYW5kTmV4dFlSQls5XSA9IGlzb0JhbmROZXh0WVJCWzE2MV0gPSAtMTtcbiAgaXNvQmFuZE5leHRPUkJbOV0gPSBpc29CYW5kTmV4dE9SQlsxNjFdID0gMDtcbiAgaXNvQmFuZE5leHRYQkxbOV0gPSBpc29CYW5kTmV4dFhCTFsxNjFdID0gMTtcbiAgaXNvQmFuZE5leHRZQkxbOV0gPSBpc29CYW5kTmV4dFlCTFsxNjFdID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbOV0gPSBpc29CYW5kTmV4dE9CTFsxNjFdID0gMDtcbiAgaXNvQmFuZE5leHRYTEJbOV0gPSBpc29CYW5kTmV4dFhMQlsxNjFdID0gMTtcbiAgaXNvQmFuZE5leHRZTEJbOV0gPSBpc29CYW5kTmV4dFlMQlsxNjFdID0gMDtcbiAgaXNvQmFuZE5leHRPTEJbOV0gPSBpc29CYW5kTmV4dE9MQlsxNjFdID0gMTtcblxuICAvKiA4LXNpZGVkIGNhc2VzICovXG4gIGlzb0JhbmROZXh0WFJUWzEzNl0gPSAwO1xuICBpc29CYW5kTmV4dFlSVFsxMzZdID0gMTtcbiAgaXNvQmFuZE5leHRPUlRbMTM2XSA9IDE7XG4gIGlzb0JhbmROZXh0WFJCWzEzNl0gPSAwO1xuICBpc29CYW5kTmV4dFlSQlsxMzZdID0gMTtcbiAgaXNvQmFuZE5leHRPUkJbMTM2XSA9IDA7XG4gIGlzb0JhbmROZXh0WEJSWzEzNl0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQlJbMTM2XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JSWzEzNl0gPSAxO1xuICBpc29CYW5kTmV4dFhCTFsxMzZdID0gLTE7XG4gIGlzb0JhbmROZXh0WUJMWzEzNl0gPSAwO1xuICBpc29CYW5kTmV4dE9CTFsxMzZdID0gMDtcbiAgaXNvQmFuZE5leHRYTEJbMTM2XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzEzNl0gPSAtMTtcbiAgaXNvQmFuZE5leHRPTEJbMTM2XSA9IDA7XG4gIGlzb0JhbmROZXh0WExUWzEzNl0gPSAwO1xuICBpc29CYW5kTmV4dFlMVFsxMzZdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xUWzEzNl0gPSAxO1xuICBpc29CYW5kTmV4dFhUTFsxMzZdID0gMTtcbiAgaXNvQmFuZE5leHRZVExbMTM2XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzEzNl0gPSAwO1xuICBpc29CYW5kTmV4dFhUUlsxMzZdID0gMTtcbiAgaXNvQmFuZE5leHRZVFJbMTM2XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzEzNl0gPSAxO1xuXG4gIGlzb0JhbmROZXh0WFJUWzM0XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzM0XSA9IC0xO1xuICBpc29CYW5kTmV4dE9SVFszNF0gPSAwO1xuICBpc29CYW5kTmV4dFhSQlszNF0gPSAwO1xuICBpc29CYW5kTmV4dFlSQlszNF0gPSAtMTtcbiAgaXNvQmFuZE5leHRPUkJbMzRdID0gMTtcbiAgaXNvQmFuZE5leHRYQlJbMzRdID0gMTtcbiAgaXNvQmFuZE5leHRZQlJbMzRdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbMzRdID0gMDtcbiAgaXNvQmFuZE5leHRYQkxbMzRdID0gMTtcbiAgaXNvQmFuZE5leHRZQkxbMzRdID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbMzRdID0gMTtcbiAgaXNvQmFuZE5leHRYTEJbMzRdID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMzRdID0gMTtcbiAgaXNvQmFuZE5leHRPTEJbMzRdID0gMTtcbiAgaXNvQmFuZE5leHRYTFRbMzRdID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbMzRdID0gMTtcbiAgaXNvQmFuZE5leHRPTFRbMzRdID0gMDtcbiAgaXNvQmFuZE5leHRYVExbMzRdID0gLTE7XG4gIGlzb0JhbmROZXh0WVRMWzM0XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzM0XSA9IDE7XG4gIGlzb0JhbmROZXh0WFRSWzM0XSA9IC0xO1xuICBpc29CYW5kTmV4dFlUUlszNF0gPSAwO1xuICBpc29CYW5kTmV4dE9UUlszNF0gPSAwO1xuXG4gIGlzb0JhbmROZXh0WFJUWzM1XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzM1XSA9IDE7XG4gIGlzb0JhbmROZXh0T1JUWzM1XSA9IDE7XG4gIGlzb0JhbmROZXh0WFJCWzM1XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJCWzM1XSA9IC0xO1xuICBpc29CYW5kTmV4dE9SQlszNV0gPSAxO1xuICBpc29CYW5kTmV4dFhCUlszNV0gPSAxO1xuICBpc29CYW5kTmV4dFlCUlszNV0gPSAwO1xuICBpc29CYW5kTmV4dE9CUlszNV0gPSAwO1xuICBpc29CYW5kTmV4dFhCTFszNV0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbMzVdID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbMzVdID0gMDtcbiAgaXNvQmFuZE5leHRYTEJbMzVdID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMzVdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xCWzM1XSA9IDA7XG4gIGlzb0JhbmROZXh0WExUWzM1XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxUWzM1XSA9IDE7XG4gIGlzb0JhbmROZXh0T0xUWzM1XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzM1XSA9IC0xO1xuICBpc29CYW5kTmV4dFlUTFszNV0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFszNV0gPSAxO1xuICBpc29CYW5kTmV4dFhUUlszNV0gPSAxO1xuICBpc29CYW5kTmV4dFlUUlszNV0gPSAwO1xuICBpc29CYW5kTmV4dE9UUlszNV0gPSAxO1xuXG4gIC8qIDYtc2lkZWQgY2FzZXMgKi9cbiAgaXNvQmFuZE5leHRYUlRbMTUzXSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzE1M10gPSAxO1xuICBpc29CYW5kTmV4dE9SVFsxNTNdID0gMTtcbiAgaXNvQmFuZE5leHRYQkxbMTUzXSA9IC0xO1xuICBpc29CYW5kTmV4dFlCTFsxNTNdID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbMTUzXSA9IDA7XG4gIGlzb0JhbmROZXh0WExCWzE1M10gPSAwO1xuICBpc29CYW5kTmV4dFlMQlsxNTNdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xCWzE1M10gPSAwO1xuICBpc29CYW5kTmV4dFhUUlsxNTNdID0gMTtcbiAgaXNvQmFuZE5leHRZVFJbMTUzXSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzE1M10gPSAxO1xuXG4gIGlzb0JhbmROZXh0WFJCWzEwMl0gPSAwO1xuICBpc29CYW5kTmV4dFlSQlsxMDJdID0gLTE7XG4gIGlzb0JhbmROZXh0T1JCWzEwMl0gPSAxO1xuICBpc29CYW5kTmV4dFhCUlsxMDJdID0gMTtcbiAgaXNvQmFuZE5leHRZQlJbMTAyXSA9IDA7XG4gIGlzb0JhbmROZXh0T0JSWzEwMl0gPSAwO1xuICBpc29CYW5kTmV4dFhMVFsxMDJdID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbMTAyXSA9IDE7XG4gIGlzb0JhbmROZXh0T0xUWzEwMl0gPSAwO1xuICBpc29CYW5kTmV4dFhUTFsxMDJdID0gLTE7XG4gIGlzb0JhbmROZXh0WVRMWzEwMl0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFsxMDJdID0gMTtcblxuICBpc29CYW5kTmV4dFhSVFsxNTVdID0gMDtcbiAgaXNvQmFuZE5leHRZUlRbMTU1XSA9IC0xO1xuICBpc29CYW5kTmV4dE9SVFsxNTVdID0gMDtcbiAgaXNvQmFuZE5leHRYQkxbMTU1XSA9IDE7XG4gIGlzb0JhbmROZXh0WUJMWzE1NV0gPSAwO1xuICBpc29CYW5kTmV4dE9CTFsxNTVdID0gMTtcbiAgaXNvQmFuZE5leHRYTEJbMTU1XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzE1NV0gPSAxO1xuICBpc29CYW5kTmV4dE9MQlsxNTVdID0gMTtcbiAgaXNvQmFuZE5leHRYVFJbMTU1XSA9IC0xO1xuICBpc29CYW5kTmV4dFlUUlsxNTVdID0gMDtcbiAgaXNvQmFuZE5leHRPVFJbMTU1XSA9IDA7XG5cbiAgaXNvQmFuZE5leHRYUkJbMTAzXSA9IDA7XG4gIGlzb0JhbmROZXh0WVJCWzEwM10gPSAxO1xuICBpc29CYW5kTmV4dE9SQlsxMDNdID0gMDtcbiAgaXNvQmFuZE5leHRYQlJbMTAzXSA9IC0xO1xuICBpc29CYW5kTmV4dFlCUlsxMDNdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbMTAzXSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzEwM10gPSAwO1xuICBpc29CYW5kTmV4dFlMVFsxMDNdID0gLTE7XG4gIGlzb0JhbmROZXh0T0xUWzEwM10gPSAxO1xuICBpc29CYW5kTmV4dFhUTFsxMDNdID0gMTtcbiAgaXNvQmFuZE5leHRZVExbMTAzXSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzEwM10gPSAwO1xuXG4gIC8qIDctc2lkZWQgY2FzZXMgKi9cbiAgaXNvQmFuZE5leHRYUlRbMTUyXSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzE1Ml0gPSAxO1xuICBpc29CYW5kTmV4dE9SVFsxNTJdID0gMTtcbiAgaXNvQmFuZE5leHRYQlJbMTUyXSA9IC0xO1xuICBpc29CYW5kTmV4dFlCUlsxNTJdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbMTUyXSA9IDE7XG4gIGlzb0JhbmROZXh0WEJMWzE1Ml0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbMTUyXSA9IDA7XG4gIGlzb0JhbmROZXh0T0JMWzE1Ml0gPSAwO1xuICBpc29CYW5kTmV4dFhMQlsxNTJdID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMTUyXSA9IC0xO1xuICBpc29CYW5kTmV4dE9MQlsxNTJdID0gMDtcbiAgaXNvQmFuZE5leHRYTFRbMTUyXSA9IDA7XG4gIGlzb0JhbmROZXh0WUxUWzE1Ml0gPSAtMTtcbiAgaXNvQmFuZE5leHRPTFRbMTUyXSA9IDE7XG4gIGlzb0JhbmROZXh0WFRSWzE1Ml0gPSAxO1xuICBpc29CYW5kTmV4dFlUUlsxNTJdID0gMDtcbiAgaXNvQmFuZE5leHRPVFJbMTUyXSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbMTU2XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzE1Nl0gPSAtMTtcbiAgaXNvQmFuZE5leHRPUlRbMTU2XSA9IDE7XG4gIGlzb0JhbmROZXh0WEJSWzE1Nl0gPSAxO1xuICBpc29CYW5kTmV4dFlCUlsxNTZdID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbMTU2XSA9IDE7XG4gIGlzb0JhbmROZXh0WEJMWzE1Nl0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbMTU2XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JMWzE1Nl0gPSAwO1xuICBpc29CYW5kTmV4dFhMQlsxNTZdID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMTU2XSA9IC0xO1xuICBpc29CYW5kTmV4dE9MQlsxNTZdID0gMDtcbiAgaXNvQmFuZE5leHRYTFRbMTU2XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxUWzE1Nl0gPSAxO1xuICBpc29CYW5kTmV4dE9MVFsxNTZdID0gMTtcbiAgaXNvQmFuZE5leHRYVFJbMTU2XSA9IC0xO1xuICBpc29CYW5kTmV4dFlUUlsxNTZdID0gMDtcbiAgaXNvQmFuZE5leHRPVFJbMTU2XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUlRbMTM3XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzEzN10gPSAxO1xuICBpc29CYW5kTmV4dE9SVFsxMzddID0gMTtcbiAgaXNvQmFuZE5leHRYUkJbMTM3XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJCWzEzN10gPSAxO1xuICBpc29CYW5kTmV4dE9SQlsxMzddID0gMDtcbiAgaXNvQmFuZE5leHRYQkxbMTM3XSA9IC0xO1xuICBpc29CYW5kTmV4dFlCTFsxMzddID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbMTM3XSA9IDA7XG4gIGlzb0JhbmROZXh0WExCWzEzN10gPSAwO1xuICBpc29CYW5kTmV4dFlMQlsxMzddID0gLTE7XG4gIGlzb0JhbmROZXh0T0xCWzEzN10gPSAwO1xuICBpc29CYW5kTmV4dFhUTFsxMzddID0gMTtcbiAgaXNvQmFuZE5leHRZVExbMTM3XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzEzN10gPSAwO1xuICBpc29CYW5kTmV4dFhUUlsxMzddID0gMTtcbiAgaXNvQmFuZE5leHRZVFJbMTM3XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RSWzEzN10gPSAxO1xuXG4gIGlzb0JhbmROZXh0WFJUWzEzOV0gPSAwO1xuICBpc29CYW5kTmV4dFlSVFsxMzldID0gMTtcbiAgaXNvQmFuZE5leHRPUlRbMTM5XSA9IDE7XG4gIGlzb0JhbmROZXh0WFJCWzEzOV0gPSAwO1xuICBpc29CYW5kTmV4dFlSQlsxMzldID0gLTE7XG4gIGlzb0JhbmROZXh0T1JCWzEzOV0gPSAwO1xuICBpc29CYW5kTmV4dFhCTFsxMzldID0gMTtcbiAgaXNvQmFuZE5leHRZQkxbMTM5XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JMWzEzOV0gPSAwO1xuICBpc29CYW5kTmV4dFhMQlsxMzldID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMTM5XSA9IDE7XG4gIGlzb0JhbmROZXh0T0xCWzEzOV0gPSAwO1xuICBpc29CYW5kTmV4dFhUTFsxMzldID0gLTE7XG4gIGlzb0JhbmROZXh0WVRMWzEzOV0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFsxMzldID0gMDtcbiAgaXNvQmFuZE5leHRYVFJbMTM5XSA9IDE7XG4gIGlzb0JhbmROZXh0WVRSWzEzOV0gPSAwO1xuICBpc29CYW5kTmV4dE9UUlsxMzldID0gMTtcblxuICBpc29CYW5kTmV4dFhSVFs5OF0gPSAwO1xuICBpc29CYW5kTmV4dFlSVFs5OF0gPSAtMTtcbiAgaXNvQmFuZE5leHRPUlRbOThdID0gMDtcbiAgaXNvQmFuZE5leHRYUkJbOThdID0gMDtcbiAgaXNvQmFuZE5leHRZUkJbOThdID0gLTE7XG4gIGlzb0JhbmROZXh0T1JCWzk4XSA9IDE7XG4gIGlzb0JhbmROZXh0WEJSWzk4XSA9IDE7XG4gIGlzb0JhbmROZXh0WUJSWzk4XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JSWzk4XSA9IDA7XG4gIGlzb0JhbmROZXh0WEJMWzk4XSA9IDE7XG4gIGlzb0JhbmROZXh0WUJMWzk4XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JMWzk4XSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzk4XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxUWzk4XSA9IDE7XG4gIGlzb0JhbmROZXh0T0xUWzk4XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzk4XSA9IC0xO1xuICBpc29CYW5kTmV4dFlUTFs5OF0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFs5OF0gPSAxO1xuXG4gIGlzb0JhbmROZXh0WFJUWzk5XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJUWzk5XSA9IDE7XG4gIGlzb0JhbmROZXh0T1JUWzk5XSA9IDA7XG4gIGlzb0JhbmROZXh0WFJCWzk5XSA9IDA7XG4gIGlzb0JhbmROZXh0WVJCWzk5XSA9IC0xO1xuICBpc29CYW5kTmV4dE9SQls5OV0gPSAxO1xuICBpc29CYW5kTmV4dFhCUls5OV0gPSAxO1xuICBpc29CYW5kTmV4dFlCUls5OV0gPSAwO1xuICBpc29CYW5kTmV4dE9CUls5OV0gPSAwO1xuICBpc29CYW5kTmV4dFhCTFs5OV0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQkxbOTldID0gMDtcbiAgaXNvQmFuZE5leHRPQkxbOTldID0gMTtcbiAgaXNvQmFuZE5leHRYTFRbOTldID0gMDtcbiAgaXNvQmFuZE5leHRZTFRbOTldID0gLTE7XG4gIGlzb0JhbmROZXh0T0xUWzk5XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzk5XSA9IDE7XG4gIGlzb0JhbmROZXh0WVRMWzk5XSA9IDA7XG4gIGlzb0JhbmROZXh0T1RMWzk5XSA9IDE7XG5cbiAgaXNvQmFuZE5leHRYUkJbMzhdID0gMDtcbiAgaXNvQmFuZE5leHRZUkJbMzhdID0gLTE7XG4gIGlzb0JhbmROZXh0T1JCWzM4XSA9IDE7XG4gIGlzb0JhbmROZXh0WEJSWzM4XSA9IDE7XG4gIGlzb0JhbmROZXh0WUJSWzM4XSA9IDA7XG4gIGlzb0JhbmROZXh0T0JSWzM4XSA9IDA7XG4gIGlzb0JhbmROZXh0WExCWzM4XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxCWzM4XSA9IDE7XG4gIGlzb0JhbmROZXh0T0xCWzM4XSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzM4XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxUWzM4XSA9IDE7XG4gIGlzb0JhbmROZXh0T0xUWzM4XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzM4XSA9IC0xO1xuICBpc29CYW5kTmV4dFlUTFszOF0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFszOF0gPSAxO1xuICBpc29CYW5kTmV4dFhUUlszOF0gPSAtMTtcbiAgaXNvQmFuZE5leHRZVFJbMzhdID0gMDtcbiAgaXNvQmFuZE5leHRPVFJbMzhdID0gMDtcblxuICBpc29CYW5kTmV4dFhSQlszOV0gPSAwO1xuICBpc29CYW5kTmV4dFlSQlszOV0gPSAxO1xuICBpc29CYW5kTmV4dE9SQlszOV0gPSAxO1xuICBpc29CYW5kTmV4dFhCUlszOV0gPSAtMTtcbiAgaXNvQmFuZE5leHRZQlJbMzldID0gMDtcbiAgaXNvQmFuZE5leHRPQlJbMzldID0gMDtcbiAgaXNvQmFuZE5leHRYTEJbMzldID0gMDtcbiAgaXNvQmFuZE5leHRZTEJbMzldID0gLTE7XG4gIGlzb0JhbmROZXh0T0xCWzM5XSA9IDE7XG4gIGlzb0JhbmROZXh0WExUWzM5XSA9IDA7XG4gIGlzb0JhbmROZXh0WUxUWzM5XSA9IDE7XG4gIGlzb0JhbmROZXh0T0xUWzM5XSA9IDA7XG4gIGlzb0JhbmROZXh0WFRMWzM5XSA9IC0xO1xuICBpc29CYW5kTmV4dFlUTFszOV0gPSAwO1xuICBpc29CYW5kTmV4dE9UTFszOV0gPSAxO1xuICBpc29CYW5kTmV4dFhUUlszOV0gPSAxO1xuICBpc29CYW5kTmV4dFlUUlszOV0gPSAwO1xuICBpc29CYW5kTmV4dE9UUlszOV0gPSAwO1xuXG5cbiAgLypcbiAgIERlZmluZSBoZWxwZXIgZnVuY3Rpb25zIGZvciB0aGUgcG9seWdvbl90YWJsZVxuICAgKi9cblxuICAvKiB0cmlhbmdsZSBjYXNlcyAqL1xuICB2YXIgcDAwID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1tjZWxsLmJvdHRvbWxlZnQsIDBdLCBbMCwgMF0sIFswLCBjZWxsLmxlZnRib3R0b21dXTtcbiAgfTtcbiAgdmFyIHAwMSA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgY2VsbC5yaWdodGJvdHRvbV0sIFsxLCAwXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdXTtcbiAgfTtcbiAgdmFyIHAwMiA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbY2VsbC50b3ByaWdodCwgMV0sIFsxLCAxXSwgWzEsIGNlbGwucmlnaHR0b3BdXTtcbiAgfTtcbiAgdmFyIHAwMyA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMCwgY2VsbC5sZWZ0dG9wXSwgWzAsIDFdLCBbY2VsbC50b3BsZWZ0LCAxXV07XG4gIH07XG4gIC8qIHRyYXBlem9pZCBjYXNlcyAqL1xuICB2YXIgcDA0ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1tjZWxsLmJvdHRvbXJpZ2h0LCAwXSwgW2NlbGwuYm90dG9tbGVmdCwgMF0sIFswLCBjZWxsLmxlZnRib3R0b21dLCBbMCwgY2VsbC5sZWZ0dG9wXV07XG4gIH07XG4gIHZhciBwMDUgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgWzEsIGNlbGwucmlnaHR0b3BdLCBbMSwgY2VsbC5yaWdodGJvdHRvbV1dO1xuICB9O1xuICB2YXIgcDA2ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCBjZWxsLnJpZ2h0dG9wXSwgWzEsIGNlbGwucmlnaHRib3R0b21dLCBbY2VsbC50b3BsZWZ0LCAxXSwgW2NlbGwudG9wcmlnaHQsIDFdXTtcbiAgfTtcbiAgdmFyIHAwNyA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgWzAsIGNlbGwubGVmdHRvcF0sIFtjZWxsLnRvcGxlZnQsIDFdLCBbY2VsbC50b3ByaWdodCwgMV1dO1xuICB9O1xuICAvKiByZWN0YW5nbGUgY2FzZXMgKi9cbiAgdmFyIHAwOCA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMCwgMF0sIFswLCBjZWxsLmxlZnRib3R0b21dLCBbMSwgY2VsbC5yaWdodGJvdHRvbV0sIFsxLCAwXV07XG4gIH07XG4gIHZhciBwMDkgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbWzEsIDBdLCBbY2VsbC5ib3R0b21yaWdodCwgMF0sIFtjZWxsLnRvcHJpZ2h0LCAxXSwgWzEsIDFdXTtcbiAgfTtcbiAgdmFyIHAxMCA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgMV0sIFsxLCBjZWxsLnJpZ2h0dG9wXSwgWzAsIGNlbGwubGVmdHRvcF0sIFswLCAxXV07XG4gIH07XG4gIHZhciBwMTEgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbW2NlbGwuYm90dG9tbGVmdCwgMF0sIFswLCAwXSwgWzAsIDFdLCBbY2VsbC50b3BsZWZ0LCAxXV07XG4gIH07XG4gIHZhciBwMTIgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbWzEsIGNlbGwucmlnaHR0b3BdLCBbMSwgY2VsbC5yaWdodGJvdHRvbV0sIFswLCBjZWxsLmxlZnRib3R0b21dLCBbMCwgY2VsbC5sZWZ0dG9wXV07XG4gIH07XG4gIHZhciBwMTMgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbW2NlbGwudG9wbGVmdCwgMV0sIFtjZWxsLnRvcHJpZ2h0LCAxXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXV07XG4gIH07XG4gIC8qIHNxdWFyZSBjYXNlICovXG4gIHZhciBwMTQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtbMCwgMF0sIFswLCAxXSwgWzEsIDFdLCBbMSwgMF1dO1xuICB9O1xuICAvKiBwZW50YWdvbiBjYXNlcyAqL1xuICB2YXIgcDE1ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgWzEsIDBdLCBbMCwgMF0sIFswLCAxXSwgW2NlbGwudG9wbGVmdCwgMV1dO1xuICB9O1xuICAvKiAxMjExIHx8IDEwMTEgKi9cbiAgdmFyIHAxNiA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbY2VsbC50b3ByaWdodCwgMV0sIFsxLCAxXSwgWzEsIDBdLCBbMCwgMF0sIFswLCBjZWxsLmxlZnRib3R0b21dXTtcbiAgfTtcbiAgLyogMjExMSB8fCAwMTExICovXG4gIHZhciBwMTcgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbWzEsIDBdLCBbY2VsbC5ib3R0b21yaWdodCwgMF0sIFswLCBjZWxsLmxlZnR0b3BdLCBbMCwgMV0sIFsxLCAxXV07XG4gIH07XG4gIC8qIDExMTIgfHwgMTExMCAqL1xuICB2YXIgcDE4ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCAxXSwgWzEsIGNlbGwucmlnaHR0b3BdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgWzAsIDBdLCBbMCwgMV1dO1xuICB9O1xuICAvKiAxMTIxIHx8IDExMDEgKi9cbiAgdmFyIHAxOSA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgY2VsbC5yaWdodHRvcF0sIFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgWzAsIGNlbGwubGVmdHRvcF0sIFswLCAxXSwgW2NlbGwudG9wbGVmdCwgMV1dO1xuICB9O1xuICAvKiAxMjAwIHx8IDEwMjIgKi9cbiAgdmFyIHAyMCA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgMV0sIFsxLCBjZWxsLnJpZ2h0dG9wXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgW2NlbGwudG9wcmlnaHQsIDFdXTtcbiAgfTtcbiAgLyogMDEyMCB8fCAyMTAyICovXG4gIHZhciBwMjEgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbWzEsIGNlbGwucmlnaHRib3R0b21dLCBbMSwgMF0sIFtjZWxsLmJvdHRvbXJpZ2h0LCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV0sIFswLCBjZWxsLmxlZnR0b3BdXTtcbiAgfTtcbiAgLyogMDAxMiB8fCAyMjEwICovXG4gIHZhciBwMjIgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbW2NlbGwudG9wcmlnaHQsIDFdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgWzAsIDBdLCBbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgW2NlbGwudG9wbGVmdCwgMV1dO1xuICB9O1xuICAvKiAyMDAxIHx8IDAyMjEgKi9cbiAgdmFyIHAyMyA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbY2VsbC5ib3R0b21yaWdodCwgMF0sIFtjZWxsLmJvdHRvbWxlZnQsIDBdLCBbMCwgY2VsbC5sZWZ0dG9wXSwgWzAsIDFdLCBbY2VsbC50b3BsZWZ0LCAxXV07XG4gIH07XG4gIC8qIDEwMDIgfHwgMTIyMCAqL1xuICB2YXIgcDI0ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCAxXSwgWzEsIGNlbGwucmlnaHR0b3BdLCBbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgWzAsIGNlbGwubGVmdHRvcF0sIFtjZWxsLnRvcHJpZ2h0LCAxXV07XG4gIH07XG4gIC8qIDIxMDAgfHwgMDEyMiAqL1xuICB2YXIgcDI1ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgWzEsIDBdLCBbY2VsbC5ib3R0b21yaWdodCwgMF0sIFtjZWxsLnRvcGxlZnQsIDFdLCBbY2VsbC50b3ByaWdodCwgMV1dO1xuICB9O1xuICAvKiAwMjEwIHx8IDIwMTIgKi9cbiAgdmFyIHAyNiA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgY2VsbC5yaWdodHRvcF0sIFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgW2NlbGwuYm90dG9tbGVmdCwgMF0sIFswLCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV1dO1xuICB9O1xuICAvKiAwMDIxIHx8IDIyMDEgKi9cbiAgLypoZXhhZ29uIGNhc2VzICovXG4gIHZhciBwMjcgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbWzEsIGNlbGwucmlnaHRib3R0b21dLCBbMSwgMF0sIFswLCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV0sIFtjZWxsLnRvcGxlZnQsIDFdLCBbY2VsbC50b3ByaWdodCwgMV1dO1xuICB9O1xuICAvKiAwMjExIHx8IDIwMTEgKi9cbiAgdmFyIHAyOCA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgMV0sIFsxLCAwXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgWzAsIGNlbGwubGVmdHRvcF0sIFtjZWxsLnRvcHJpZ2h0LCAxXV07XG4gIH07XG4gIC8qIDIxMTAgfHwgMDExMiAqL1xuICB2YXIgcDI5ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCAxXSwgWzEsIGNlbGwucmlnaHR0b3BdLCBbY2VsbC5ib3R0b21yaWdodCwgMF0sIFtjZWxsLmJvdHRvbWxlZnQsIDBdLCBbMCwgY2VsbC5sZWZ0dG9wXSwgWzAsIDFdXTtcbiAgfTtcbiAgLyogMTEwMiB8fCAxMTIwICovXG4gIHZhciBwMzAgPSBmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBbWzEsIGNlbGwucmlnaHR0b3BdLCBbMSwgY2VsbC5yaWdodGJvdHRvbV0sIFtjZWxsLmJvdHRvbWxlZnQsIDBdLCBbMCwgMF0sIFswLCAxXSwgW2NlbGwudG9wbGVmdCwgMV1dO1xuICB9O1xuICAvKiAxMDIxIHx8IDEyMDEgKi9cbiAgdmFyIHAzMSA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgMV0sIFsxLCBjZWxsLnJpZ2h0dG9wXSwgW2NlbGwuYm90dG9tbGVmdCwgMF0sIFswLCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV0sIFtjZWxsLnRvcHJpZ2h0LCAxXV07XG4gIH07XG4gIC8qIDIxMDEgfHwgMDEyMSAqL1xuICB2YXIgcDMyID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgWzEsIDBdLCBbY2VsbC5ib3R0b21yaWdodCwgMF0sIFswLCBjZWxsLmxlZnR0b3BdLCBbMCwgMV0sIFtjZWxsLnRvcGxlZnQsIDFdXTtcbiAgfTtcbiAgLyogMTAxMiB8fCAxMjEwICovXG4gIC8qIDgtc2lkZWQgY2FzZXMgKi9cbiAgdmFyIHAzMyA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgY2VsbC5yaWdodHRvcF0sIFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV0sIFswLCBjZWxsLmxlZnR0b3BdLCBbY2VsbC50b3BsZWZ0LCAxXSwgW2NlbGwudG9wcmlnaHQsIDFdXTtcbiAgfTtcbiAgLyogZmxpcHBlZCA9PSAxIHN0YXRlIGZvciAwMjAyIGFuZCAyMDIwICovXG4gIC8qIDYtc2lkZWQgY2FzZXMgKi9cbiAgdmFyIHAzNCA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgMV0sIFsxLCBjZWxsLnJpZ2h0dG9wXSwgW2NlbGwuYm90dG9tbGVmdCwgMF0sIFswLCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV0sIFtjZWxsLnRvcHJpZ2h0LCAxXV07XG4gIH07XG4gIC8qIDAxMDEgd2l0aCBmbGlwcGVkID09IDEgfHwgMjEyMSB3aXRoIGZsaXBwZWQgPT0gMSAqL1xuICB2YXIgcDM1ID0gZnVuY3Rpb24gKGNlbGwpIHtcbiAgICByZXR1cm4gW1sxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgWzEsIDBdLCBbY2VsbC5ib3R0b21yaWdodCwgMF0sIFswLCBjZWxsLmxlZnR0b3BdLCBbMCwgMV0sIFtjZWxsLnRvcGxlZnQsIDFdXTtcbiAgfTtcbiAgLyogMTAxMCB3aXRoIGZsaXBwZWQgPT0gMSB8fCAxMjEyIHdpdGggZmxpcHBlZCA9PSAxICovXG4gIC8qIDctc2lkZWQgY2FzZXMgKi9cbiAgdmFyIHAzNiA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgMV0sIFsxLCBjZWxsLnJpZ2h0dG9wXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV0sIFswLCBjZWxsLmxlZnR0b3BdLCBbY2VsbC50b3ByaWdodCwgMV1dO1xuICB9O1xuICAvKiAyMTIwIHdpdGggZmxpcHBlZCA9PSAxIHx8IDAxMDIgd2l0aCBmbGlwcGVkID09IDEgKi9cbiAgdmFyIHAzNyA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgY2VsbC5yaWdodHRvcF0sIFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgW2NlbGwuYm90dG9tbGVmdCwgMF0sIFswLCAwXSwgWzAsIGNlbGwubGVmdGJvdHRvbV0sIFtjZWxsLnRvcGxlZnQsIDFdLCBbY2VsbC50b3ByaWdodCwgMV1dO1xuICB9O1xuICAvKiAyMDIxIHdpdGggZmxpcHBlZCA9PSAxIHx8IDAyMDEgd2l0aCBmbGlwcGVkID09IDEgKi9cbiAgdmFyIHAzOCA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgY2VsbC5yaWdodHRvcF0sIFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgWzAsIGNlbGwubGVmdHRvcF0sIFswLCAxXSwgW2NlbGwudG9wbGVmdCwgMV1dO1xuICB9O1xuICAvKiAxMjAyIHdpdGggZmxpcHBlZCA9PSAxIHx8IDEwMjAgd2l0aCBmbGlwcGVkID09IDEgKi9cbiAgdmFyIHAzOSA9IGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFtbMSwgY2VsbC5yaWdodGJvdHRvbV0sIFsxLCAwXSwgW2NlbGwuYm90dG9tcmlnaHQsIDBdLCBbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgWzAsIGNlbGwubGVmdHRvcF0sIFtjZWxsLnRvcGxlZnQsIDFdLCBbY2VsbC50b3ByaWdodCwgMV1dO1xuICB9O1xuICAvKiAwMjEyIHdpdGggZmxpcHBlZCA9PSAxIHx8IDIwMTAgd2l0aCBmbGlwcGVkID09IDEgKi9cblxuXG5cbiAgLypcbiAgICBUaGUgbG9va3VwIHRhYmxlcyBmb3IgZWRnZSBudW1iZXIgZ2l2ZW4gdGhlIHBvbHlnb25cbiAgICBpcyBlbnRlcmVkIGF0IGEgc3BlY2lmaWMgbG9jYXRpb25cbiAgKi9cblxuICB2YXIgaXNvQmFuZEVkZ2VSVCA9IFtdO1xuICB2YXIgaXNvQmFuZEVkZ2VSQiA9IFtdO1xuICB2YXIgaXNvQmFuZEVkZ2VCUiA9IFtdO1xuICB2YXIgaXNvQmFuZEVkZ2VCTCA9IFtdO1xuICB2YXIgaXNvQmFuZEVkZ2VMQiA9IFtdO1xuICB2YXIgaXNvQmFuZEVkZ2VMVCA9IFtdO1xuICB2YXIgaXNvQmFuZEVkZ2VUTCA9IFtdO1xuICB2YXIgaXNvQmFuZEVkZ2VUUiA9IFtdO1xuXG4gIC8qIHRyaWFuZ2xlIGNhc2VzICovXG4gIGlzb0JhbmRFZGdlQkxbMV0gICAgPSBpc29CYW5kRWRnZUxCWzFdICAgID0gMTg7XG4gIGlzb0JhbmRFZGdlQkxbMTY5XSAgPSBpc29CYW5kRWRnZUxCWzE2OV0gID0gMTg7XG4gIGlzb0JhbmRFZGdlQlJbNF0gICAgPSBpc29CYW5kRWRnZVJCWzRdICAgID0gMTI7XG4gIGlzb0JhbmRFZGdlQlJbMTY2XSAgPSBpc29CYW5kRWRnZVJCWzE2Nl0gID0gMTI7XG4gIGlzb0JhbmRFZGdlUlRbMTZdICAgPSBpc29CYW5kRWRnZVRSWzE2XSAgID0gNDtcbiAgaXNvQmFuZEVkZ2VSVFsxNTRdICA9IGlzb0JhbmRFZGdlVFJbMTU0XSAgPSA0O1xuICBpc29CYW5kRWRnZUxUWzY0XSAgID0gaXNvQmFuZEVkZ2VUTFs2NF0gICA9IDIyO1xuICBpc29CYW5kRWRnZUxUWzEwNl0gID0gaXNvQmFuZEVkZ2VUTFsxMDZdICA9IDIyO1xuXG4gIC8qIHRyYXBlem9pZCBjYXNlcyAqL1xuICBpc29CYW5kRWRnZUJSWzJdICAgID0gaXNvQmFuZEVkZ2VMVFsyXSAgICA9IDE3O1xuICBpc29CYW5kRWRnZUJMWzJdICAgID0gaXNvQmFuZEVkZ2VMQlsyXSAgICA9IDE4O1xuICBpc29CYW5kRWRnZUJSWzE2OF0gID0gaXNvQmFuZEVkZ2VMVFsxNjhdICA9IDE3O1xuICBpc29CYW5kRWRnZUJMWzE2OF0gID0gaXNvQmFuZEVkZ2VMQlsxNjhdICA9IDE4O1xuICBpc29CYW5kRWRnZVJUWzhdICAgID0gaXNvQmFuZEVkZ2VCTFs4XSAgICA9IDk7XG4gIGlzb0JhbmRFZGdlUkJbOF0gICAgPSBpc29CYW5kRWRnZUJSWzhdICAgID0gMTI7XG4gIGlzb0JhbmRFZGdlUlRbMTYyXSAgPSBpc29CYW5kRWRnZUJMWzE2Ml0gID0gOTtcbiAgaXNvQmFuZEVkZ2VSQlsxNjJdICA9IGlzb0JhbmRFZGdlQlJbMTYyXSAgPSAxMjtcbiAgaXNvQmFuZEVkZ2VSVFszMl0gICA9IGlzb0JhbmRFZGdlVFJbMzJdICAgPSA0O1xuICBpc29CYW5kRWRnZVJCWzMyXSAgID0gaXNvQmFuZEVkZ2VUTFszMl0gICA9IDE7XG4gIGlzb0JhbmRFZGdlUlRbMTM4XSAgPSBpc29CYW5kRWRnZVRSWzEzOF0gID0gNDtcbiAgaXNvQmFuZEVkZ2VSQlsxMzhdICA9IGlzb0JhbmRFZGdlVExbMTM4XSAgPSAxO1xuICBpc29CYW5kRWRnZUxCWzEyOF0gID0gaXNvQmFuZEVkZ2VUUlsxMjhdICA9IDIxO1xuICBpc29CYW5kRWRnZUxUWzEyOF0gID0gaXNvQmFuZEVkZ2VUTFsxMjhdICA9IDIyO1xuICBpc29CYW5kRWRnZUxCWzQyXSAgID0gaXNvQmFuZEVkZ2VUUls0Ml0gICA9IDIxO1xuICBpc29CYW5kRWRnZUxUWzQyXSAgID0gaXNvQmFuZEVkZ2VUTFs0Ml0gICA9IDIyO1xuXG4gIC8qIHJlY3RhbmdsZSBjYXNlcyAqL1xuICBpc29CYW5kRWRnZVJCWzVdID0gaXNvQmFuZEVkZ2VMQls1XSA9IDE0O1xuICBpc29CYW5kRWRnZVJCWzE2NV0gPSBpc29CYW5kRWRnZUxCWzE2NV0gPSAxNDtcbiAgaXNvQmFuZEVkZ2VCUlsyMF0gPSBpc29CYW5kRWRnZVRSWzIwXSA9IDY7XG4gIGlzb0JhbmRFZGdlQlJbMTUwXSA9IGlzb0JhbmRFZGdlVFJbMTUwXSA9IDY7XG4gIGlzb0JhbmRFZGdlUlRbODBdID0gaXNvQmFuZEVkZ2VMVFs4MF0gPSAxMTtcbiAgaXNvQmFuZEVkZ2VSVFs5MF0gPSBpc29CYW5kRWRnZUxUWzkwXSA9IDExO1xuICBpc29CYW5kRWRnZUJMWzY1XSA9IGlzb0JhbmRFZGdlVExbNjVdID0gMztcbiAgaXNvQmFuZEVkZ2VCTFsxMDVdID0gaXNvQmFuZEVkZ2VUTFsxMDVdID0gMztcbiAgaXNvQmFuZEVkZ2VSVFsxNjBdID0gaXNvQmFuZEVkZ2VMVFsxNjBdID0gMTE7XG4gIGlzb0JhbmRFZGdlUkJbMTYwXSA9IGlzb0JhbmRFZGdlTEJbMTYwXSA9IDE0O1xuICBpc29CYW5kRWRnZVJUWzEwXSA9IGlzb0JhbmRFZGdlTFRbMTBdID0gMTE7XG4gIGlzb0JhbmRFZGdlUkJbMTBdID0gaXNvQmFuZEVkZ2VMQlsxMF0gPSAxNDtcbiAgaXNvQmFuZEVkZ2VCUlsxMzBdID0gaXNvQmFuZEVkZ2VUUlsxMzBdID0gNjtcbiAgaXNvQmFuZEVkZ2VCTFsxMzBdID0gaXNvQmFuZEVkZ2VUTFsxMzBdID0gMztcbiAgaXNvQmFuZEVkZ2VCUls0MF0gPSBpc29CYW5kRWRnZVRSWzQwXSA9IDY7XG4gIGlzb0JhbmRFZGdlQkxbNDBdID0gaXNvQmFuZEVkZ2VUTFs0MF0gPSAzO1xuXG4gIC8qIHBlbnRhZ29uIGNhc2VzICovXG4gIGlzb0JhbmRFZGdlUkJbMTAxXSA9IGlzb0JhbmRFZGdlVExbMTAxXSA9IDE7XG4gIGlzb0JhbmRFZGdlUkJbNjldID0gaXNvQmFuZEVkZ2VUTFs2OV0gPSAxO1xuICBpc29CYW5kRWRnZUxCWzE0OV0gPSBpc29CYW5kRWRnZVRSWzE0OV0gPSAyMTtcbiAgaXNvQmFuZEVkZ2VMQlsyMV0gPSBpc29CYW5kRWRnZVRSWzIxXSA9IDIxO1xuICBpc29CYW5kRWRnZUJSWzg2XSA9IGlzb0JhbmRFZGdlTFRbODZdID0gMTc7XG4gIGlzb0JhbmRFZGdlQlJbODRdID0gaXNvQmFuZEVkZ2VMVFs4NF0gPSAxNztcbiAgaXNvQmFuZEVkZ2VSVFs4OV0gPSBpc29CYW5kRWRnZUJMWzg5XSA9IDk7XG4gIGlzb0JhbmRFZGdlUlRbODFdID0gaXNvQmFuZEVkZ2VCTFs4MV0gPSA5O1xuICBpc29CYW5kRWRnZVJUWzk2XSA9IGlzb0JhbmRFZGdlVExbOTZdID0gMDtcbiAgaXNvQmFuZEVkZ2VSQls5Nl0gPSBpc29CYW5kRWRnZUxUWzk2XSA9IDE1O1xuICBpc29CYW5kRWRnZVJUWzc0XSA9IGlzb0JhbmRFZGdlVExbNzRdID0gMDtcbiAgaXNvQmFuZEVkZ2VSQls3NF0gPSBpc29CYW5kRWRnZUxUWzc0XSA9IDE1O1xuICBpc29CYW5kRWRnZVJUWzI0XSA9IGlzb0JhbmRFZGdlQlJbMjRdID0gODtcbiAgaXNvQmFuZEVkZ2VCTFsyNF0gPSBpc29CYW5kRWRnZVRSWzI0XSA9IDc7XG4gIGlzb0JhbmRFZGdlUlRbMTQ2XSA9IGlzb0JhbmRFZGdlQlJbMTQ2XSA9IDg7XG4gIGlzb0JhbmRFZGdlQkxbMTQ2XSA9IGlzb0JhbmRFZGdlVFJbMTQ2XSA9IDc7XG4gIGlzb0JhbmRFZGdlUkJbNl0gPSBpc29CYW5kRWRnZUxUWzZdID0gMTU7XG4gIGlzb0JhbmRFZGdlQlJbNl0gPSBpc29CYW5kRWRnZUxCWzZdID0gMTY7XG4gIGlzb0JhbmRFZGdlUkJbMTY0XSA9IGlzb0JhbmRFZGdlTFRbMTY0XSA9IDE1O1xuICBpc29CYW5kRWRnZUJSWzE2NF0gPSBpc29CYW5kRWRnZUxCWzE2NF0gPSAxNjtcbiAgaXNvQmFuZEVkZ2VCTFsxMjldID0gaXNvQmFuZEVkZ2VUUlsxMjldID0gNztcbiAgaXNvQmFuZEVkZ2VMQlsxMjldID0gaXNvQmFuZEVkZ2VUTFsxMjldID0gMjA7XG4gIGlzb0JhbmRFZGdlQkxbNDFdID0gaXNvQmFuZEVkZ2VUUls0MV0gPSA3O1xuICBpc29CYW5kRWRnZUxCWzQxXSA9IGlzb0JhbmRFZGdlVExbNDFdID0gMjA7XG4gIGlzb0JhbmRFZGdlQlJbNjZdID0gaXNvQmFuZEVkZ2VUTFs2Nl0gPSAyO1xuICBpc29CYW5kRWRnZUJMWzY2XSA9IGlzb0JhbmRFZGdlTFRbNjZdID0gMTk7XG4gIGlzb0JhbmRFZGdlQlJbMTA0XSA9IGlzb0JhbmRFZGdlVExbMTA0XSA9IDI7XG4gIGlzb0JhbmRFZGdlQkxbMTA0XSA9IGlzb0JhbmRFZGdlTFRbMTA0XSA9IDE5O1xuICBpc29CYW5kRWRnZVJUWzE0NF0gPSBpc29CYW5kRWRnZUxCWzE0NF0gPSAxMDtcbiAgaXNvQmFuZEVkZ2VMVFsxNDRdID0gaXNvQmFuZEVkZ2VUUlsxNDRdID0gMjM7XG4gIGlzb0JhbmRFZGdlUlRbMjZdID0gaXNvQmFuZEVkZ2VMQlsyNl0gPSAxMDtcbiAgaXNvQmFuZEVkZ2VMVFsyNl0gPSBpc29CYW5kRWRnZVRSWzI2XSA9IDIzO1xuICBpc29CYW5kRWRnZVJCWzM2XSA9IGlzb0JhbmRFZGdlVFJbMzZdID0gNTtcbiAgaXNvQmFuZEVkZ2VCUlszNl0gPSBpc29CYW5kRWRnZVRMWzM2XSA9IDI7XG4gIGlzb0JhbmRFZGdlUkJbMTM0XSA9IGlzb0JhbmRFZGdlVFJbMTM0XSA9IDU7XG4gIGlzb0JhbmRFZGdlQlJbMTM0XSA9IGlzb0JhbmRFZGdlVExbMTM0XSA9IDI7XG4gIGlzb0JhbmRFZGdlUlRbOV0gPSBpc29CYW5kRWRnZUxCWzldID0gMTA7XG4gIGlzb0JhbmRFZGdlUkJbOV0gPSBpc29CYW5kRWRnZUJMWzldID0gMTM7XG4gIGlzb0JhbmRFZGdlUlRbMTYxXSA9IGlzb0JhbmRFZGdlTEJbMTYxXSA9IDEwO1xuICBpc29CYW5kRWRnZVJCWzE2MV0gPSBpc29CYW5kRWRnZUJMWzE2MV0gPSAxMztcblxuICAvKiBoZXhhZ29uIGNhc2VzICovXG4gIGlzb0JhbmRFZGdlUkJbMzddID0gaXNvQmFuZEVkZ2VUUlszN10gPSA1O1xuICBpc29CYW5kRWRnZUxCWzM3XSA9IGlzb0JhbmRFZGdlVExbMzddID0gMjA7XG4gIGlzb0JhbmRFZGdlUkJbMTMzXSA9IGlzb0JhbmRFZGdlVFJbMTMzXSA9IDU7XG4gIGlzb0JhbmRFZGdlTEJbMTMzXSA9IGlzb0JhbmRFZGdlVExbMTMzXSA9IDIwO1xuICBpc29CYW5kRWRnZUJSWzE0OF0gPSBpc29CYW5kRWRnZUxCWzE0OF0gPSAxNjtcbiAgaXNvQmFuZEVkZ2VMVFsxNDhdID0gaXNvQmFuZEVkZ2VUUlsxNDhdID0gMjM7XG4gIGlzb0JhbmRFZGdlQlJbMjJdID0gaXNvQmFuZEVkZ2VMQlsyMl0gPSAxNjtcbiAgaXNvQmFuZEVkZ2VMVFsyMl0gPSBpc29CYW5kRWRnZVRSWzIyXSA9IDIzO1xuICBpc29CYW5kRWRnZVJUWzgyXSA9IGlzb0JhbmRFZGdlQlJbODJdID0gODtcbiAgaXNvQmFuZEVkZ2VCTFs4Ml0gPSBpc29CYW5kRWRnZUxUWzgyXSA9IDE5O1xuICBpc29CYW5kRWRnZVJUWzg4XSA9IGlzb0JhbmRFZGdlQlJbODhdID0gODtcbiAgaXNvQmFuZEVkZ2VCTFs4OF0gPSBpc29CYW5kRWRnZUxUWzg4XSA9IDE5O1xuICBpc29CYW5kRWRnZVJUWzczXSA9IGlzb0JhbmRFZGdlVExbNzNdID0gMDtcbiAgaXNvQmFuZEVkZ2VSQls3M10gPSBpc29CYW5kRWRnZUJMWzczXSA9IDEzO1xuICBpc29CYW5kRWRnZVJUWzk3XSA9IGlzb0JhbmRFZGdlVExbOTddID0gMDtcbiAgaXNvQmFuZEVkZ2VSQls5N10gPSBpc29CYW5kRWRnZUJMWzk3XSA9IDEzO1xuICBpc29CYW5kRWRnZVJUWzE0NV0gPSBpc29CYW5kRWRnZUJMWzE0NV0gPSA5O1xuICBpc29CYW5kRWRnZUxCWzE0NV0gPSBpc29CYW5kRWRnZVRSWzE0NV0gPSAyMTtcbiAgaXNvQmFuZEVkZ2VSVFsyNV0gPSBpc29CYW5kRWRnZUJMWzI1XSA9IDk7XG4gIGlzb0JhbmRFZGdlTEJbMjVdID0gaXNvQmFuZEVkZ2VUUlsyNV0gPSAyMTtcbiAgaXNvQmFuZEVkZ2VSQls3MF0gPSBpc29CYW5kRWRnZVRMWzcwXSA9IDE7XG4gIGlzb0JhbmRFZGdlQlJbNzBdID0gaXNvQmFuZEVkZ2VMVFs3MF0gPSAxNztcbiAgaXNvQmFuZEVkZ2VSQlsxMDBdID0gaXNvQmFuZEVkZ2VUTFsxMDBdID0gMTtcbiAgaXNvQmFuZEVkZ2VCUlsxMDBdID0gaXNvQmFuZEVkZ2VMVFsxMDBdID0gMTc7XG5cbiAgLyogOC1zaWRlZCBjYXNlcyAqL1xuICBpc29CYW5kRWRnZVJUWzM0XSA9IGlzb0JhbmRFZGdlQkxbMzRdID0gOTtcbiAgaXNvQmFuZEVkZ2VSQlszNF0gPSBpc29CYW5kRWRnZUJSWzM0XSA9IDEyO1xuICBpc29CYW5kRWRnZUxCWzM0XSA9IGlzb0JhbmRFZGdlVFJbMzRdID0gMjE7XG4gIGlzb0JhbmRFZGdlTFRbMzRdID0gaXNvQmFuZEVkZ2VUTFszNF0gPSAyMjtcbiAgaXNvQmFuZEVkZ2VSVFsxMzZdID0gaXNvQmFuZEVkZ2VUUlsxMzZdID0gNDtcbiAgaXNvQmFuZEVkZ2VSQlsxMzZdID0gaXNvQmFuZEVkZ2VUTFsxMzZdID0gMTtcbiAgaXNvQmFuZEVkZ2VCUlsxMzZdID0gaXNvQmFuZEVkZ2VMVFsxMzZdID0gMTc7XG4gIGlzb0JhbmRFZGdlQkxbMTM2XSA9IGlzb0JhbmRFZGdlTEJbMTM2XSA9IDE4O1xuICBpc29CYW5kRWRnZVJUWzM1XSA9IGlzb0JhbmRFZGdlVFJbMzVdID0gNDtcbiAgaXNvQmFuZEVkZ2VSQlszNV0gPSBpc29CYW5kRWRnZUJSWzM1XSA9IDEyO1xuICBpc29CYW5kRWRnZUJMWzM1XSA9IGlzb0JhbmRFZGdlTEJbMzVdID0gMTg7XG4gIGlzb0JhbmRFZGdlTFRbMzVdID0gaXNvQmFuZEVkZ2VUTFszNV0gPSAyMjtcblxuICAvKiA2LXNpZGVkIGNhc2VzICovXG4gIGlzb0JhbmRFZGdlUlRbMTUzXSA9IGlzb0JhbmRFZGdlVFJbMTUzXSA9IDQ7XG4gIGlzb0JhbmRFZGdlQkxbMTUzXSA9IGlzb0JhbmRFZGdlTEJbMTUzXSA9IDE4O1xuICBpc29CYW5kRWRnZVJCWzEwMl0gPSBpc29CYW5kRWRnZUJSWzEwMl0gPSAxMjtcbiAgaXNvQmFuZEVkZ2VMVFsxMDJdID0gaXNvQmFuZEVkZ2VUTFsxMDJdID0gMjI7XG4gIGlzb0JhbmRFZGdlUlRbMTU1XSA9IGlzb0JhbmRFZGdlQkxbMTU1XSA9IDk7XG4gIGlzb0JhbmRFZGdlTEJbMTU1XSA9IGlzb0JhbmRFZGdlVFJbMTU1XSA9IDIzO1xuICBpc29CYW5kRWRnZVJCWzEwM10gPSBpc29CYW5kRWRnZVRMWzEwM10gPSAxO1xuICBpc29CYW5kRWRnZUJSWzEwM10gPSBpc29CYW5kRWRnZUxUWzEwM10gPSAxNztcblxuICAvKiA3LXNpZGVkIGNhc2VzICovXG4gIGlzb0JhbmRFZGdlUlRbMTUyXSA9IGlzb0JhbmRFZGdlVFJbMTUyXSA9IDQ7XG4gIGlzb0JhbmRFZGdlQlJbMTUyXSA9IGlzb0JhbmRFZGdlTFRbMTUyXSA9IDE3O1xuICBpc29CYW5kRWRnZUJMWzE1Ml0gPSBpc29CYW5kRWRnZUxCWzE1Ml0gPSAxODtcbiAgaXNvQmFuZEVkZ2VSVFsxNTZdID0gaXNvQmFuZEVkZ2VCUlsxNTZdID0gODtcbiAgaXNvQmFuZEVkZ2VCTFsxNTZdID0gaXNvQmFuZEVkZ2VMQlsxNTZdID0gMTg7XG4gIGlzb0JhbmRFZGdlTFRbMTU2XSA9IGlzb0JhbmRFZGdlVFJbMTU2XSA9IDIzO1xuICBpc29CYW5kRWRnZVJUWzEzN10gPSBpc29CYW5kRWRnZVRSWzEzN10gPSA0O1xuICBpc29CYW5kRWRnZVJCWzEzN10gPSBpc29CYW5kRWRnZVRMWzEzN10gPSAxO1xuICBpc29CYW5kRWRnZUJMWzEzN10gPSBpc29CYW5kRWRnZUxCWzEzN10gPSAxODtcbiAgaXNvQmFuZEVkZ2VSVFsxMzldID0gaXNvQmFuZEVkZ2VUUlsxMzldID0gNDtcbiAgaXNvQmFuZEVkZ2VSQlsxMzldID0gaXNvQmFuZEVkZ2VCTFsxMzldID0gMTM7XG4gIGlzb0JhbmRFZGdlTEJbMTM5XSA9IGlzb0JhbmRFZGdlVExbMTM5XSA9IDIwO1xuICBpc29CYW5kRWRnZVJUWzk4XSA9IGlzb0JhbmRFZGdlQkxbOThdID0gOTtcbiAgaXNvQmFuZEVkZ2VSQls5OF0gPSBpc29CYW5kRWRnZUJSWzk4XSA9IDEyO1xuICBpc29CYW5kRWRnZUxUWzk4XSA9IGlzb0JhbmRFZGdlVExbOThdID0gMjI7XG4gIGlzb0JhbmRFZGdlUlRbOTldID0gaXNvQmFuZEVkZ2VUTFs5OV0gPSAwO1xuICBpc29CYW5kRWRnZVJCWzk5XSA9IGlzb0JhbmRFZGdlQlJbOTldID0gMTI7XG4gIGlzb0JhbmRFZGdlQkxbOTldID0gaXNvQmFuZEVkZ2VMVFs5OV0gPSAxOTtcbiAgaXNvQmFuZEVkZ2VSQlszOF0gPSBpc29CYW5kRWRnZUJSWzM4XSA9IDEyO1xuICBpc29CYW5kRWRnZUxCWzM4XSA9IGlzb0JhbmRFZGdlVFJbMzhdID0gMjE7XG4gIGlzb0JhbmRFZGdlTFRbMzhdID0gaXNvQmFuZEVkZ2VUTFszOF0gPSAyMjtcbiAgaXNvQmFuZEVkZ2VSQlszOV0gPSBpc29CYW5kRWRnZVRSWzM5XSA9IDU7XG4gIGlzb0JhbmRFZGdlQlJbMzldID0gaXNvQmFuZEVkZ2VMQlszOV0gPSAxNjtcbiAgaXNvQmFuZEVkZ2VMVFszOV0gPSBpc29CYW5kRWRnZVRMWzM5XSA9IDIyO1xuXG4gIC8qXG4gICAgVGhlIGxvb2t1cCB0YWJsZXMgZm9yIGFsbCBkaWZmZXJlbnQgcG9seWdvbnMgdGhhdFxuICAgIG1heSBhcHBlYXIgd2l0aGluIGEgZ3JpZCBjZWxsXG4gICovXG5cbiAgdmFyIHBvbHlnb25fdGFibGUgPSBbXTtcblxuICAvKiB0cmlhbmdsZSBjYXNlcyAqL1xuICBwb2x5Z29uX3RhYmxlWzFdID0gcG9seWdvbl90YWJsZVsxNjldID0gcDAwOyAvKiAyMjIxIHx8IDAwMDEgKi9cbiAgcG9seWdvbl90YWJsZVs0XSA9IHBvbHlnb25fdGFibGVbMTY2XSA9IHAwMTsgLyogMjIxMiB8fCAwMDEwICovXG4gIHBvbHlnb25fdGFibGVbMTZdID0gcG9seWdvbl90YWJsZVsxNTRdID0gcDAyOyAvKiAyMTIyIHx8IDAxMDAgKi9cbiAgcG9seWdvbl90YWJsZVs2NF0gPSBwb2x5Z29uX3RhYmxlWzEwNl0gPSBwMDM7IC8qIDEyMjIgfHwgMTAwMCAqL1xuXG4gIC8qIHRyYXBlem9pZCBjYXNlcyAqL1xuICBwb2x5Z29uX3RhYmxlWzE2OF0gPSBwb2x5Z29uX3RhYmxlWzJdID0gcDA0OyAvKiAyMjIwIHx8IDAwMDIgKi9cbiAgcG9seWdvbl90YWJsZVsxNjJdID0gcG9seWdvbl90YWJsZVs4XSA9IHAwNTsgLyogMjIwMiB8fCAwMDIwICovXG4gIHBvbHlnb25fdGFibGVbMTM4XSA9IHBvbHlnb25fdGFibGVbMzJdID0gcDA2OyAvKiAyMDIyIHx8IDAyMDAgKi9cbiAgcG9seWdvbl90YWJsZVs0Ml0gPSBwb2x5Z29uX3RhYmxlWzEyOF0gPSBwMDc7IC8qIDAyMjIgfHwgMjAwMCAqL1xuXG4gIC8qIHJlY3RhbmdsZSBjYXNlcyAqL1xuICBwb2x5Z29uX3RhYmxlWzVdID0gcG9seWdvbl90YWJsZVsxNjVdID0gcDA4OyAvKiAwMDExIHx8IDIyMTEgKi9cbiAgcG9seWdvbl90YWJsZVsyMF0gPSBwb2x5Z29uX3RhYmxlWzE1MF0gPSBwMDk7IC8qIDAxMTAgfHwgMjExMiAqL1xuICBwb2x5Z29uX3RhYmxlWzgwXSA9IHBvbHlnb25fdGFibGVbOTBdID0gcDEwOyAvKiAxMTAwIHx8IDExMjIgKi9cbiAgcG9seWdvbl90YWJsZVs2NV0gPSBwb2x5Z29uX3RhYmxlWzEwNV0gPSBwMTE7IC8qIDEwMDEgfHwgMTIyMSAqL1xuICBwb2x5Z29uX3RhYmxlWzE2MF0gPSBwb2x5Z29uX3RhYmxlWzEwXSA9IHAxMjsgLyogMjIwMCB8fCAwMDIyICovXG4gIHBvbHlnb25fdGFibGVbMTMwXSA9IHBvbHlnb25fdGFibGVbNDBdID0gcDEzOyAvKiAyMDAyIHx8IDAyMjAgKi9cblxuICAvKiBzcXVhcmUgY2FzZSAqL1xuICBwb2x5Z29uX3RhYmxlWzg1XSA9IHAxNDsgLyogMTExMSAqL1xuXG4gIC8qIHBlbnRhZ29uIGNhc2VzICovXG4gIHBvbHlnb25fdGFibGVbMTAxXSA9IHBvbHlnb25fdGFibGVbNjldID0gcDE1OyAvKiAxMjExIHx8IDEwMTEgKi9cbiAgcG9seWdvbl90YWJsZVsxNDldID0gcG9seWdvbl90YWJsZVsyMV0gPSBwMTY7IC8qIDIxMTEgfHwgMDExMSAqL1xuICBwb2x5Z29uX3RhYmxlWzg2XSA9IHBvbHlnb25fdGFibGVbODRdID0gcDE3OyAvKiAxMTEyIHx8IDExMTAgKi9cbiAgcG9seWdvbl90YWJsZVs4OV0gPSBwb2x5Z29uX3RhYmxlWzgxXSA9IHAxODsgLyogMTEyMSB8fCAxMTAxICovXG4gIHBvbHlnb25fdGFibGVbOTZdID0gcG9seWdvbl90YWJsZVs3NF0gPSBwMTk7IC8qIDEyMDAgfHwgMTAyMiAqL1xuICBwb2x5Z29uX3RhYmxlWzI0XSA9IHBvbHlnb25fdGFibGVbMTQ2XSA9IHAyMDsgLyogMDEyMCB8fCAyMTAyICovXG4gIHBvbHlnb25fdGFibGVbNl0gPSBwb2x5Z29uX3RhYmxlWzE2NF0gPSBwMjE7IC8qIDAwMTIgfHwgMjIxMCAqL1xuICBwb2x5Z29uX3RhYmxlWzEyOV0gPSBwb2x5Z29uX3RhYmxlWzQxXSA9IHAyMjsgLyogMjAwMSB8fCAwMjIxICovXG4gIHBvbHlnb25fdGFibGVbNjZdID0gcG9seWdvbl90YWJsZVsxMDRdID0gcDIzOyAvKiAxMDAyIHx8IDEyMjAgKi9cbiAgcG9seWdvbl90YWJsZVsxNDRdID0gcG9seWdvbl90YWJsZVsyNl0gPSBwMjQ7IC8qIDIxMDAgfHwgMDEyMiAqL1xuICBwb2x5Z29uX3RhYmxlWzM2XSA9IHBvbHlnb25fdGFibGVbMTM0XSA9IHAyNTsgLyogMDIxMCB8fCAyMDEyICovXG4gIHBvbHlnb25fdGFibGVbOV0gPSBwb2x5Z29uX3RhYmxlWzE2MV0gPSBwMjY7IC8qIDAwMjEgfHwgMjIwMSAqL1xuXG4gIC8qIGhleGFnb24gY2FzZXMgKi9cbiAgcG9seWdvbl90YWJsZVszN10gPSBwb2x5Z29uX3RhYmxlWzEzM10gPSBwMjc7IC8qIDAyMTEgfHwgMjAxMSAqL1xuICBwb2x5Z29uX3RhYmxlWzE0OF0gPSBwb2x5Z29uX3RhYmxlWzIyXSA9IHAyODsgLyogMjExMCB8fCAwMTEyICovXG4gIHBvbHlnb25fdGFibGVbODJdID0gcG9seWdvbl90YWJsZVs4OF0gPSBwMjk7IC8qIDExMDIgfHwgMTEyMCAqL1xuICBwb2x5Z29uX3RhYmxlWzczXSA9IHBvbHlnb25fdGFibGVbOTddID0gcDMwOyAvKiAxMDIxIHx8IDEyMDEgKi9cbiAgcG9seWdvbl90YWJsZVsxNDVdID0gcG9seWdvbl90YWJsZVsyNV0gPSBwMzE7IC8qIDIxMDEgfHwgMDEyMSAqL1xuICBwb2x5Z29uX3RhYmxlWzcwXSA9IHBvbHlnb25fdGFibGVbMTAwXSA9IHAzMjsgLyogMTAxMiB8fCAxMjEwICovXG5cbiAgLyogOC1zaWRlZCBjYXNlcyAqL1xuICBwb2x5Z29uX3RhYmxlWzM0XSA9IGZ1bmN0aW9uKGMpeyByZXR1cm4gWyBwMDcoYyksIHAwNShjKSBdO307IC8qIDAyMDIgfHwgMjAyMCB3aXRoIGZsaXBwZWQgPT0gMCAqL1xuICBwb2x5Z29uX3RhYmxlWzM1XSA9IHAzMzsgLyogZmxpcHBlZCA9PSAxIHN0YXRlIGZvciAwMjAyIGFuZCAyMDIwICovXG4gIHBvbHlnb25fdGFibGVbMTM2XSA9IGZ1bmN0aW9uKGMpeyByZXR1cm4gWyBwMDYoYyksIHAwNChjKSBdO307IC8qIDIwMjAgfHwgMDIwMiB3aXRoIGZsaXBwZWQgPT0gMCAqL1xuXG4gIC8qIDYtc2lkZWQgY2FzZXMgKi9cbiAgcG9seWdvbl90YWJsZVsxNTNdID0gZnVuY3Rpb24oYyl7IHJldHVybiBbIHAwMihjKSwgcDAwKGMpIF07fTsgLyogMDEwMSB3aXRoIGZsaXBwZWQgPT0gMCB8fCAyMTIxIHdpdGggZmxpcHBlZCA9PSAyICovXG4gIHBvbHlnb25fdGFibGVbMTAyXSA9IGZ1bmN0aW9uKGMpeyByZXR1cm4gWyBwMDEoYyksIHAwMyhjKSBdO307IC8qIDEwMTAgd2l0aCBmbGlwcGVkID09IDAgfHwgMTIxMiB3aXRoIGZsaXBwZWQgPT0gMiAqL1xuICBwb2x5Z29uX3RhYmxlWzE1NV0gPSBwMzQ7IC8qIDAxMDEgd2l0aCBmbGlwcGVkID09IDEgfHwgMjEyMSB3aXRoIGZsaXBwZWQgPT0gMSAqL1xuICBwb2x5Z29uX3RhYmxlWzEwM10gPSBwMzU7IC8qIDEwMTAgd2l0aCBmbGlwcGVkID09IDEgfHwgMTIxMiB3aXRoIGZsaXBwZWQgPT0gMSAqL1xuXG4gIC8qIDctc2lkZWQgY2FzZXMgKi9cbiAgcG9seWdvbl90YWJsZVsxNTJdID0gZnVuY3Rpb24oYyl7IHJldHVybiBbIHAwMihjKSwgcDA0KGMpIF07fTsgLyogMjEyMCB3aXRoIGZsaXBwZWQgPT0gMiB8fCAwMTAyIHdpdGggZmxpcHBlZCA9PSAwICovXG4gIHBvbHlnb25fdGFibGVbMTU2XSA9IHAzNjsgLyogMjEyMCB3aXRoIGZsaXBwZWQgPT0gMSB8fCAwMTAyIHdpdGggZmxpcHBlZCA9PSAxICovXG4gIHBvbHlnb25fdGFibGVbMTM3XSA9IGZ1bmN0aW9uKGMpeyByZXR1cm4gWyBwMDYoYyksIHAwMChjKSBdO307IC8qIDIwMjEgd2l0aCBmbGlwcGVkID09IDIgfHwgMDIwMSB3aXRoIGZsaXBwZWQgPT0gMCAqL1xuICBwb2x5Z29uX3RhYmxlWzEzOV0gPSBwMzc7IC8qIDIwMjEgd2l0aCBmbGlwcGVkID09IDEgfHwgMDIwMSB3aXRoIGZsaXBwZWQgPT0gMSAqL1xuICBwb2x5Z29uX3RhYmxlWzk4XSA9IGZ1bmN0aW9uKGMpeyByZXR1cm4gWyBwMDUoYyksIHAwMyhjKSBdO307IC8qIDEyMDIgd2l0aCBmbGlwcGVkID09IDIgfHwgMTAyMCB3aXRoIGZsaXBwZWQgPT0gMCAqL1xuICBwb2x5Z29uX3RhYmxlWzk5XSA9IHAzODsgLyogMTIwMiB3aXRoIGZsaXBwZWQgPT0gMSB8fCAxMDIwIHdpdGggZmxpcHBlZCA9PSAxICovXG4gIHBvbHlnb25fdGFibGVbMzhdID0gZnVuY3Rpb24oYyl7IHJldHVybiBbIHAwMShjKSwgcDA3KGMpIF07fTsgLyogMDIxMiB3aXRoIGZsaXBwZWQgPT0gMiB8fCAyMDEwIHdpdGggZmxpcHBlZCA9PSAwICovXG4gIHBvbHlnb25fdGFibGVbMzldID0gcDM5OyAvKiAwMjEyIHdpdGggZmxpcHBlZCA9PSAxIHx8IDIwMTAgd2l0aCBmbGlwcGVkID09IDEgKi9cbiAgXG4gIFxuICAvKlxuICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgU29tZSBzbWFsbCBoZWxwZXIgZnVuY3Rpb25zXG4gICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICAqL1xuXG4gIC8qIGFzc3VtZSB0aGF0IHgxID09IDEgJiYgIHgwID09IDAgKi9cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVYKHksIHkwLCB5MSl7XG4gICAgcmV0dXJuICh5IC0geTApIC8gKHkxIC0geTApO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBcnJheShteUFycmF5KSB7XG4gICAgcmV0dXJuIG15QXJyYXkuY29uc3RydWN0b3IudG9TdHJpbmcoKS5pbmRleE9mKFwiQXJyYXlcIikgPiAtMTtcbiAgfVxuXG4gIC8qXG4gICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICBCZWxvdyBpcyB0aGUgYWN0dWFsIE1hcmNoaW5nIFNxdWFyZXMgaW1wbGVtZW50YXRpb25cbiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gICovXG5cbiAgZnVuY3Rpb24gY29tcHV0ZUJhbmRHcmlkKGRhdGEsIG1pblYsIGJhbmR3aWR0aCl7XG4gICAgdmFyIHJvd3MgPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgdmFyIGNvbHMgPSBkYXRhWzBdLmxlbmd0aCAtIDE7XG4gICAgdmFyIEJhbmRHcmlkID0geyByb3dzOiByb3dzLCBjb2xzOiBjb2xzLCBjZWxsczogW10gfTtcblxuICAgIHZhciBtYXhWID0gbWluViArIE1hdGguYWJzKGJhbmR3aWR0aCk7XG5cbiAgICBmb3IodmFyIGogPSAwOyBqIDwgcm93czsgKytqKXtcbiAgICAgIEJhbmRHcmlkLmNlbGxzW2pdID0gW107XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY29sczsgKytpKXtcbiAgICAgICAgLyogIGNvbXBvc2UgdGhlIDQtdHJpdCBjb3JuZXIgcmVwcmVzZW50YXRpb24gKi9cbiAgICAgICAgdmFyIGN2YWwgPSAwO1xuXG4gICAgICAgIHZhciB0bCA9IGRhdGFbaisxXVtpXTtcbiAgICAgICAgdmFyIHRyID0gZGF0YVtqKzFdW2krMV07XG4gICAgICAgIHZhciBiciA9IGRhdGFbal1baSsxXTtcbiAgICAgICAgdmFyIGJsID0gZGF0YVtqXVtpXTtcblxuICAgICAgICBpZihpc05hTih0bCkgfHwgaXNOYU4odHIpIHx8IGlzTmFOKGJyKSB8fCBpc05hTihibCkpe1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3ZhbCB8PSAodGwgPCBtaW5WKSA/IDAgOiAodGwgPiBtYXhWKSA/IDEyOCA6IDY0O1xuICAgICAgICBjdmFsIHw9ICh0ciA8IG1pblYpID8gMCA6ICh0ciA+IG1heFYpID8gMzIgOiAxNjtcbiAgICAgICAgY3ZhbCB8PSAoYnIgPCBtaW5WKSA/IDAgOiAoYnIgPiBtYXhWKSA/IDggOiA0O1xuICAgICAgICBjdmFsIHw9IChibCA8IG1pblYpID8gMCA6IChibCA+IG1heFYpID8gMiA6IDE7XG5cbiAgICAgICAgdmFyIGN2YWxfcmVhbCA9ICtjdmFsO1xuXG4gICAgICAgIC8qIHJlc29sdmUgYW1iaWd1aXR5IHZpYSBhdmVyYWdpbmcgKi9cbiAgICAgICAgdmFyIGZsaXBwZWQgPSAwO1xuICAgICAgICBpZiggICAgIChjdmFsID09PSAxNykgLyogMDEwMSAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSAxOCkgLyogMDEwMiAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSAzMykgLyogMDIwMSAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSAzNCkgLyogMDIwMiAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSAzOCkgLyogMDIxMiAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSA2OCkgLyogMTAxMCAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSA3MikgLyogMTAyMCAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSA5OCkgLyogMTIwMiAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSAxMDIpIC8qIDEyMTIgKi9cbiAgICAgICAgICAgIHx8ICAoY3ZhbCA9PT0gMTMyKSAvKiAyMDEwICovXG4gICAgICAgICAgICB8fCAgKGN2YWwgPT09IDEzNikgLyogMjAyMCAqL1xuICAgICAgICAgICAgfHwgIChjdmFsID09PSAxMzcpIC8qIDIwMjEgKi9cbiAgICAgICAgICAgIHx8ICAoY3ZhbCA9PT0gMTUyKSAvKiAyMTIwICovXG4gICAgICAgICAgICB8fCAgKGN2YWwgPT09IDE1MykgLyogMjEyMSAqL1xuICAgICAgICApe1xuICAgICAgICAgIHZhciBhdmVyYWdlID0gKHRsICsgdHIgKyBiciArIGJsKSAvIDQ7XG4gICAgICAgICAgLyogc2V0IGZsaXBwZWQgc3RhdGUgKi9cbiAgICAgICAgICBmbGlwcGVkID0gKGF2ZXJhZ2UgPiBtYXhWKSA/IDIgOiAoYXZlcmFnZSA8IG1pblYpID8gMCA6IDE7XG5cbiAgICAgICAgICAvKiBhZGp1c3QgY3ZhbCBmb3IgZmxpcHBlZCBjYXNlcyAqL1xuXG4gICAgICAgICAgLyogOC1zaWRlZCBjYXNlcyAqL1xuICAgICAgICAgIGlmKGN2YWwgPT09IDM0KXtcbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDEpe1xuICAgICAgICAgICAgICBjdmFsID0gMzU7XG4gICAgICAgICAgICB9IGVsc2UgaWYoZmxpcHBlZCA9PT0gMCl7XG4gICAgICAgICAgICAgIGN2YWwgPSAxMzY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEzNil7XG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSAxKXtcbiAgICAgICAgICAgICAgY3ZhbCA9IDM1O1xuICAgICAgICAgICAgICBmbGlwcGVkID0gNDtcbiAgICAgICAgICAgIH0gZWxzZSBpZihmbGlwcGVkID09PSAwKXtcbiAgICAgICAgICAgICAgY3ZhbCA9IDM0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qIDYtc2lkZWQgcG9seWdvbiBjYXNlcyAqL1xuICAgICAgICAgIGVsc2UgaWYoY3ZhbCA9PT0gMTcpe1xuICAgICAgICAgICAgaWYoZmxpcHBlZCA9PT0gMSl7XG4gICAgICAgICAgICAgIGN2YWwgPSAxNTU7XG4gICAgICAgICAgICAgIGZsaXBwZWQgPSA0O1xuICAgICAgICAgICAgfSBlbHNlIGlmKGZsaXBwZWQgPT09IDApe1xuICAgICAgICAgICAgICBjdmFsID0gMTUzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA2OCl7XG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSAxKXtcbiAgICAgICAgICAgICAgY3ZhbCA9IDEwMztcbiAgICAgICAgICAgICAgZmxpcHBlZCA9IDQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYoZmxpcHBlZCA9PT0gMCl7XG4gICAgICAgICAgICAgIGN2YWwgPSAxMDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE1Myl7XG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSAxKVxuICAgICAgICAgICAgICBjdmFsID0gMTU1O1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMDIpe1xuICAgICAgICAgICAgaWYoZmxpcHBlZCA9PT0gMSlcbiAgICAgICAgICAgICAgY3ZhbCA9IDEwMztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvKiA3LXNpZGVkIHBvbHlnb24gY2FzZXMgKi9cbiAgICAgICAgICBlbHNlIGlmKGN2YWwgPT09IDE1Mil7XG4gICAgICAgICAgICBpZihmbGlwcGVkIDwgMil7XG4gICAgICAgICAgICAgIGN2YWwgICAgPSAxNTY7XG4gICAgICAgICAgICAgIGZsaXBwZWQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMzcpe1xuICAgICAgICAgICAgaWYoZmxpcHBlZCA8IDIpe1xuICAgICAgICAgICAgICBjdmFsID0gMTM5O1xuICAgICAgICAgICAgICBmbGlwcGVkID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gOTgpe1xuICAgICAgICAgICAgaWYoZmxpcHBlZCA8IDIpe1xuICAgICAgICAgICAgICBjdmFsICAgID0gOTk7XG4gICAgICAgICAgICAgIGZsaXBwZWQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAzOCl7XG4gICAgICAgICAgICBpZihmbGlwcGVkIDwgMil7XG4gICAgICAgICAgICAgIGN2YWwgICAgPSAzOTtcbiAgICAgICAgICAgICAgZmxpcHBlZCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE4KXtcbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPiAwKXtcbiAgICAgICAgICAgICAgY3ZhbCA9IDE1NjtcbiAgICAgICAgICAgICAgZmxpcHBlZCA9IDQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdmFsID0gMTUyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAzMyl7XG4gICAgICAgICAgICBpZihmbGlwcGVkID4gMCl7XG4gICAgICAgICAgICAgIGN2YWwgPSAxMzk7XG4gICAgICAgICAgICAgIGZsaXBwZWQgPSA0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3ZhbCA9IDEzNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gNzIpe1xuICAgICAgICAgICAgaWYoZmxpcHBlZCA+IDApe1xuICAgICAgICAgICAgICBjdmFsID0gOTk7XG4gICAgICAgICAgICAgIGZsaXBwZWQgPSA0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3ZhbCA9IDk4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMzIpe1xuICAgICAgICAgICAgaWYoZmxpcHBlZCA+IDApe1xuICAgICAgICAgICAgICBjdmFsID0gMzk7XG4gICAgICAgICAgICAgIGZsaXBwZWQgPSA0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3ZhbCA9IDM4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGFkZCBjZWxsIHRvIEJhbmRHcmlkIGlmIGl0IGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBwb2x5Z29uLXNpZGUgKi9cbiAgICAgICAgaWYoKGN2YWwgIT0gMCkgJiYgKGN2YWwgIT0gMTcwKSl7XG4gICAgICAgICAgdmFyIHRvcGxlZnQsIHRvcHJpZ2h0LCBib3R0b21sZWZ0LCBib3R0b21yaWdodCxcbiAgICAgICAgICAgICAgcmlnaHR0b3AsIHJpZ2h0Ym90dG9tLCBsZWZ0dG9wLCBsZWZ0Ym90dG9tO1xuXG4gICAgICAgICAgdG9wbGVmdCA9IHRvcHJpZ2h0ID0gYm90dG9tbGVmdCA9IGJvdHRvbXJpZ2h0ID0gcmlnaHR0b3BcbiAgICAgICAgICAgICAgICAgID0gcmlnaHRib3R0b20gPSBsZWZ0dG9wID0gbGVmdGJvdHRvbSA9IDAuNTtcblxuICAgICAgICAgIHZhciBlZGdlcyA9IFtdO1xuXG4gICAgICAgICAgLyogZG8gaW50ZXJwb2xhdGlvbiBoZXJlICovXG4gICAgICAgICAgLyogMXN0IFRyaWFuZ2xlcyAqL1xuICAgICAgICAgIGlmKGN2YWwgPT09IDEpeyAvKiAwMDAxICovXG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIGJsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE2OSl7IC8qIDIyMjEgKi9cbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDQpeyAvKiAwMDEwICovXG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIGJyKTtcbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxNjYpeyAvKiAyMjEyICovXG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBiciwgdHIpO1xuICAgICAgICAgICAgYm90dG9tcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxNil7IC8qIDAxMDAgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTU0KXsgLyogMjEyMiAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDY0KXsgLyogMTAwMCAqL1xuICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEwNil7IC8qIDEyMjIgKi9cbiAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTFRbY3ZhbF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKiAybmQgVHJhcGV6b2lkcyAqL1xuICAgICAgICAgIGVsc2UgaWYoY3ZhbCA9PT0gMTY4KXsgLyogMjIyMCAqL1xuICAgICAgICAgICAgYm90dG9tcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAyKXsgLyogMDAwMiAqL1xuICAgICAgICAgICAgYm90dG9tcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCBibCk7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIGJsKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQlJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJMW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTYyKXsgLyogMjIwMiAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIHRyKTtcbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIGJsKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQlJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJMW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gOCl7IC8qIDAwMjAgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgYnIpO1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgYnIpO1xuICAgICAgICAgICAgYm90dG9tbGVmdCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgYnIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEzOCl7IC8qIDIwMjIgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgYnIpO1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMzIpeyAvKiAwMjAwICovXG4gICAgICAgICAgICByaWdodHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBiciwgdHIpO1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgIHRvcGxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIHRyKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gNDIpeyAvKiAwMjIyICovXG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIGJsKTtcbiAgICAgICAgICAgIHRvcGxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIHRyKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTEJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxUW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTI4KXsgLyogMjAwMCAqL1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogM3JkIHJlY3RhbmdsZSBjYXNlcyAqL1xuICAgICAgICAgIGlmKGN2YWwgPT09IDUpeyAvKiAwMDExICovXG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIGJyKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxNjUpeyAvKiAyMjExICovXG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBiciwgdHIpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMjApeyAvKiAwMTEwICovXG4gICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgYnIpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIHRyKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE1MCl7IC8qIDIxMTIgKi9cbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQlJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA4MCl7IC8qIDExMDAgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICBsZWZ0dG9wID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA5MCl7IC8qIDExMjIgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIGJsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDY1KXsgLyogMTAwMSAqL1xuICAgICAgICAgICAgYm90dG9tbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIGJsKTtcbiAgICAgICAgICAgIHRvcGxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMDUpeyAvKiAxMjIxICovXG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxNjApeyAvKiAyMjAwICovXG4gICAgICAgICAgICByaWdodHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBiciwgdHIpO1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMCl7IC8qIDAwMjIgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgYnIpO1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIGJsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMzApeyAvKiAyMDAyICovXG4gICAgICAgICAgICBib3R0b21yaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIGJsKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQlJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJMW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gNDApeyAvKiAwMjIwICovXG4gICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgYnIpO1xuICAgICAgICAgICAgYm90dG9tbGVmdCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgYnIpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIHRyKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qIDR0aCBzaW5nbGUgcGVudGFnb24gY2FzZXMgKi9cbiAgICAgICAgICBlbHNlIGlmKGN2YWwgPT09IDEwMSl7IC8qIDEyMTEgKi9cbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA2OSl7IC8qIDEwMTEgKi9cbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgYnIpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE0OSl7IC8qIDIxMTEgKi9cbiAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIHRsKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMjEpeyAvKiAwMTExICovXG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIHRyKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDg2KXsgLyogMTExMiAqL1xuICAgICAgICAgICAgYm90dG9tcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJSW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gODQpeyAvKiAxMTEwICovXG4gICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgYnIpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJSW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gODkpeyAvKiAxMTIxICovXG4gICAgICAgICAgICByaWdodHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIGJyKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDgxKXsgLyogMTEwMSAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCBibCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA5Nil7IC8qIDEyMDAgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IGludGVycG9sYXRlWChtaW5WLCBiciwgdHIpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IGludGVycG9sYXRlWChtYXhWLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDc0KXsgLyogMTAyMiAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IDEtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIGJsKTtcbiAgICAgICAgICAgIHRvcGxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMjQpeyAvKiAwMTIwICovXG4gICAgICAgICAgICByaWdodHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIGJyKTtcbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE0Nil7IC8qIDIxMDIgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIGJsKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA2KXsgLyogMDAxMiAqL1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIGJsKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE2NCl7IC8qIDIyMTAgKi9cbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgYnIpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEyOSl7IC8qIDIwMDEgKi9cbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCBibCk7XG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCB0bCk7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gNDEpeyAvKiAwMjIxICovXG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIHRyKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTEJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA2Nil7IC8qIDEwMDIgKi9cbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgYm90dG9tbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIGJsKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJSW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEwNCl7IC8qIDEyMjAgKi9cbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICBsZWZ0dG9wID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCB0bCk7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVRMW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTQ0KXsgLyogMjEwMCAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIHRsKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDI2KXsgLyogMDEyMiAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIGJsKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxUW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMzYpeyAvKiAwMjEwICovXG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBiciwgdHIpO1xuICAgICAgICAgICAgYm90dG9tcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIGJyKTtcbiAgICAgICAgICAgIHRvcGxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIHRyKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJSW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTM0KXsgLyogMjAxMiAqL1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIGJsKTtcbiAgICAgICAgICAgIHRvcGxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCB0bCk7XG4gICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQlJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA5KXsgLyogMDAyMSAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIGJyKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTYxKXsgLyogMjIwMSAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIHRyKTtcbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogNXRoIHNpbmdsZSBoZXhhZ29uIGNhc2VzICovXG4gICAgICAgICAgZWxzZSBpZihjdmFsID09PSAzNyl7IC8qIDAyMTEgKi9cbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gMS0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCB0cik7XG4gICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtYXhWLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEzMyl7IC8qIDIwMTEgKi9cbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgYnIpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE0OCl7IC8qIDIxMTAgKi9cbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICBsZWZ0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCB0bCk7XG4gICAgICAgICAgICBsZWZ0dG9wID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCB0bCk7XG4gICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTFRbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAyMil7IC8qIDAxMTIgKi9cbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIGJsKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJSW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDgyKXsgLyogMTEwMiAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMS0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCBibCk7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIGJsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA4OCl7IC8qIDExMjAgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgYm90dG9tcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA3Myl7IC8qIDEwMjEgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgYnIpO1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDk3KXsgLyogMTIwMSAqL1xuICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIHRyKTtcbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IGludGVycG9sYXRlWChtYXhWLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE0NSl7IC8qIDIxMDEgKi9cbiAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgdG9wcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCB0bCk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxCW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMjUpeyAvKiAwMTIxICovXG4gICAgICAgICAgICByaWdodHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIGJyKTtcbiAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDcwKXsgLyogMTAxMiAqL1xuICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIGJsKTtcbiAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEwMCl7IC8qIDEyMTAgKi9cbiAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgYnIpO1xuICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgdG9wbGVmdCA9IGludGVycG9sYXRlWChtYXhWLCB0bCwgdHIpO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCUltjdmFsXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogOC1zaWRlZCBjYXNlcyAqL1xuICAgICAgICAgIGVsc2UgaWYoY3ZhbCA9PT0gMzQpeyAvKiAwMjAyIHx8IDIwMjAgd2l0aCBmbGlwcGVkID09IDAgKi9cbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDApe1xuICAgICAgICAgICAgICByaWdodHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIGJyKTtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCB0bCk7XG4gICAgICAgICAgICAgIHRvcGxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCB0bCk7XG4gICAgICAgICAgICAgIHRvcHJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIHRyKTtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgICAgYm90dG9tcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCBibCk7XG4gICAgICAgICAgICAgIGJvdHRvbWxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICAgIGxlZnRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICAgIHRvcGxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIHRyKTtcbiAgICAgICAgICAgICAgdG9wcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDM1KXsgLyogZmxpcHBlZCA9PSAxIHN0YXRlIGZvciAwMjAyLCBhbmQgMjAyMCB3aXRoIGZsaXBwZWQgPT0gNCovXG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSA0KXtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCB0cik7XG4gICAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTFRbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMzYpeyAvKiAyMDIwIHx8IDAyMDIgd2l0aCBmbGlwcGVkID09IDAgKi9cbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDApe1xuICAgICAgICAgICAgICByaWdodHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBiciwgdHIpO1xuICAgICAgICAgICAgICByaWdodGJvdHRvbSA9IGludGVycG9sYXRlWChtaW5WLCBiciwgdHIpO1xuICAgICAgICAgICAgICBib3R0b21yaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIGJsKTtcbiAgICAgICAgICAgICAgYm90dG9tbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIGJsKTtcbiAgICAgICAgICAgICAgbGVmdGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIGJsKTtcbiAgICAgICAgICAgICAgbGVmdHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIGJsKTtcbiAgICAgICAgICAgICAgdG9wbGVmdCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtYXhWLCB0bCwgdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogNi1zaWRlZCBwb2x5Z29uIGNhc2VzICovXG4gICAgICAgICAgZWxzZSBpZihjdmFsID09PSAxNTMpeyAvKiAwMTAxIHdpdGggZmxpcHBlZCA9PSAwIHx8IDIxMjEgd2l0aCBmbGlwcGVkID09IDIgKi9cbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDApe1xuICAgICAgICAgICAgICByaWdodHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBiciwgdHIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQkxbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMDIpeyAvKiAxMDEwIHdpdGggZmxpcHBlZCA9PSAwIHx8IDEyMTIgd2l0aCBmbGlwcGVkID09IDIgKi9cbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDApe1xuICAgICAgICAgICAgICByaWdodGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIGJyKTtcbiAgICAgICAgICAgICAgYm90dG9tcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIHRyKTtcbiAgICAgICAgICAgICAgYm90dG9tcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICAgIHRvcGxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTFRbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxNTUpeyAvKiAwMTAxIHdpdGggZmxpcHBlZCA9PSA0IHx8IDIxMjEgd2l0aCBmbGlwcGVkID09IDEgKi9cbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDQpe1xuICAgICAgICAgICAgICByaWdodHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBiciwgdHIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTEJbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMDMpeyAvKiAxMDEwIHdpdGggZmxpcHBlZCA9PSA0IHx8IDEyMTIgd2l0aCBmbGlwcGVkID09IDEgKi9cbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDQpe1xuICAgICAgICAgICAgICByaWdodGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIGJyKTtcbiAgICAgICAgICAgICAgYm90dG9tcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0ciwgdGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIHRyKTtcbiAgICAgICAgICAgICAgYm90dG9tcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICAgIHRvcGxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgdGwsIHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSQltjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlQlJbY3ZhbF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qIDctc2lkZWQgcG9seWdvbiBjYXNlcyAqL1xuICAgICAgICAgIGVsc2UgaWYoY3ZhbCA9PT0gMTUyKXsgLyogMjEyMCB3aXRoIGZsaXBwZWQgPT0gMiB8fCAwMTAyIHdpdGggZmxpcHBlZCA9PSAwICovXG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSAwKXtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgICAgYm90dG9tcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCBibCk7XG4gICAgICAgICAgICAgIGJvdHRvbWxlZnQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCBibCk7XG4gICAgICAgICAgICAgIGxlZnRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCBibCk7XG4gICAgICAgICAgICAgIGxlZnR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCBibCk7XG4gICAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCB0cik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByaWdodHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIGJyKTtcbiAgICAgICAgICAgICAgYm90dG9tcmlnaHQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgYm90dG9tbGVmdCA9IGludGVycG9sYXRlWChtaW5WLCBibCwgYnIpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCB0bCk7XG4gICAgICAgICAgICAgIGxlZnR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgdG9wcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCB0bCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJSW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDE1Nil7IC8qIDIxMjAgd2l0aCBmbGlwcGVkID09IDEgfHwgMDEwMiB3aXRoIGZsaXBwZWQgPT0gNCAqL1xuICAgICAgICAgICAgaWYoZmxpcHBlZCA9PT0gNCl7XG4gICAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtaW5WLCBibCwgdGwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCB0bCk7XG4gICAgICAgICAgICAgIHRvcHJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJUW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlTFRbY3ZhbF0pO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMzcpeyAvKiAyMDIxIHdpdGggZmxpcHBlZCA9PSAyIHx8IDAyMDEgd2l0aCBmbGlwcGVkID09IDAgKi9cbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPT09IDApe1xuICAgICAgICAgICAgICByaWdodHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBiciwgdHIpO1xuICAgICAgICAgICAgICByaWdodGJvdHRvbSA9IGludGVycG9sYXRlWChtaW5WLCBiciwgdHIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCB0cik7XG4gICAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByaWdodHRvcCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIGJyKTtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1heFYsIHRyLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbWxlZnQgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIGJyKTtcbiAgICAgICAgICAgICAgbGVmdGJvdHRvbSA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VSVFtjdmFsXSk7XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJMW2N2YWxdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTM5KXsgLyogMjAyMSB3aXRoIGZsaXBwZWQgPT0gMSB8fCAwMjAxIHdpdGggZmxpcHBlZCA9PSA0ICovXG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSA0KXtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSBpbnRlcnBvbGF0ZVgobWF4ViwgYnIsIHRyKTtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIHRyKTtcbiAgICAgICAgICAgICAgYm90dG9tbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgYnIsIGJsKTtcbiAgICAgICAgICAgICAgbGVmdGJvdHRvbSA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdGwsIGJsKTtcbiAgICAgICAgICAgICAgdG9wbGVmdCA9IGludGVycG9sYXRlWChtaW5WLCB0bCwgdHIpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IGludGVycG9sYXRlWChtYXhWLCB0bCwgdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWF4ViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgdG9wbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWF4ViwgdHIsIHRsKTtcbiAgICAgICAgICAgICAgdG9wcmlnaHQgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCB0bCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMQltjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDk4KXsgLyogMTIwMiB3aXRoIGZsaXBwZWQgPT0gMiB8fCAxMDIwIHdpdGggZmxpcHBlZCA9PSAwICovXG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSAwKXtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGxlZnR0b3AgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgdG9wbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDk5KXsgLyogMTIwMiB3aXRoIGZsaXBwZWQgPT0gMSB8fCAxMDIwIHdpdGggZmxpcHBlZCA9PSA0ICovXG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSA0KXtcbiAgICAgICAgICAgICAgcmlnaHR0b3AgPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21yaWdodCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgYnIpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGxlZnR0b3AgPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgdG9wbGVmdCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJpZ2h0dG9wID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1pblYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtaW5WLCBiciwgYmwpO1xuICAgICAgICAgICAgICBib3R0b21sZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUlRbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZVJCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VCTFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDM4KXsgLyogMDIxMiB3aXRoIGZsaXBwZWQgPT0gMiB8fCAyMDEwIHdpdGggZmxpcHBlZCA9PSAwICovXG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSAwKXtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCB0cik7XG4gICAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUxCW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDM5KXsgLyogMDIxMiB3aXRoIGZsaXBwZWQgPT0gMSB8fCAyMDEwIHdpdGggZmxpcHBlZCA9PSA0ICovXG4gICAgICAgICAgICBpZihmbGlwcGVkID09PSA0KXtcbiAgICAgICAgICAgICAgcmlnaHRib3R0b20gPSAxIC0gaW50ZXJwb2xhdGVYKG1pblYsIHRyLCBicik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1pblYsIGJsLCBicik7XG4gICAgICAgICAgICAgIGxlZnRib3R0b20gPSBpbnRlcnBvbGF0ZVgobWluViwgYmwsIHRsKTtcbiAgICAgICAgICAgICAgbGVmdHRvcCA9IGludGVycG9sYXRlWChtYXhWLCBibCwgdGwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0ciwgdGwpO1xuICAgICAgICAgICAgICB0b3ByaWdodCA9IDEgLSBpbnRlcnBvbGF0ZVgobWluViwgdHIsIHRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJpZ2h0Ym90dG9tID0gaW50ZXJwb2xhdGVYKG1heFYsIGJyLCB0cik7XG4gICAgICAgICAgICAgIGJvdHRvbXJpZ2h0ID0gMSAtIGludGVycG9sYXRlWChtYXhWLCBiciwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0Ym90dG9tID0gMSAtIGludGVycG9sYXRlWChtYXhWLCB0bCwgYmwpO1xuICAgICAgICAgICAgICBsZWZ0dG9wID0gMSAtIGludGVycG9sYXRlWChtaW5WLCB0bCwgYmwpO1xuICAgICAgICAgICAgICB0b3BsZWZ0ID0gaW50ZXJwb2xhdGVYKG1pblYsIHRsLCB0cik7XG4gICAgICAgICAgICAgIHRvcHJpZ2h0ID0gaW50ZXJwb2xhdGVYKG1heFYsIHRsLCB0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlcy5wdXNoKGlzb0JhbmRFZGdlUkJbY3ZhbF0pO1xuICAgICAgICAgICAgZWRnZXMucHVzaChpc29CYW5kRWRnZUJSW2N2YWxdKTtcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goaXNvQmFuZEVkZ2VMVFtjdmFsXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxzZSBpZihjdmFsID09PSA4NSl7XG4gICAgICAgICAgICByaWdodHRvcCA9IDE7XG4gICAgICAgICAgICByaWdodGJvdHRvbSA9IDA7XG4gICAgICAgICAgICBib3R0b21yaWdodCA9IDE7XG4gICAgICAgICAgICBib3R0b21sZWZ0ID0gMDtcbiAgICAgICAgICAgIGxlZnRib3R0b20gPSAwO1xuICAgICAgICAgICAgbGVmdHRvcCA9IDE7XG4gICAgICAgICAgICB0b3BsZWZ0ID0gMDtcbiAgICAgICAgICAgIHRvcHJpZ2h0ID0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZih0b3BsZWZ0IDwgMCB8fCB0b3BsZWZ0ID4gMSB8fCB0b3ByaWdodCA8IDAgfHwgdG9wcmlnaHQgPiAxIHx8IHJpZ2h0dG9wIDwgMCB8fCByaWdodHRvcCA+IDEgfHwgYm90dG9tcmlnaHQgPCAwIHx8IGJvdHRvbXJpZ2h0ID4gMSB8fCBsZWZ0Ym90dG9tIDwgMCB8fCBsZWZ0Ym90dG9tID4gMSB8fCBsZWZ0dG9wIDwgMCB8fCBsZWZ0dG9wID4gMSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiBcIiArIGN2YWwgKyBcIiBcIiArIGN2YWxfcmVhbCArIFwiIFwiICsgdGwgKyBcIixcIiArIHRyICsgXCIsXCIgKyBiciArIFwiLFwiICsgYmwgKyBcIiBcIiArIGZsaXBwZWQgKyBcIiBcIiArIHRvcGxlZnQgKyBcIiBcIiArIHRvcHJpZ2h0ICsgXCIgXCIgKyByaWdodHRvcCArIFwiIFwiICsgcmlnaHRib3R0b20gKyBcIiBcIiArIGJvdHRvbXJpZ2h0ICsgXCIgXCIgKyBib3R0b21sZWZ0ICsgXCIgXCIgKyBsZWZ0Ym90dG9tICsgXCIgXCIgKyBsZWZ0dG9wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBCYW5kR3JpZC5jZWxsc1tqXVtpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN2YWw6ICAgICAgICAgY3ZhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN2YWxfcmVhbDogICAgY3ZhbF9yZWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxpcHBlZDogICAgICBmbGlwcGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wbGVmdDogICAgICB0b3BsZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wcmlnaHQ6ICAgICB0b3ByaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0dG9wOiAgICAgcmlnaHR0b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodGJvdHRvbTogIHJpZ2h0Ym90dG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tcmlnaHQ6ICBib3R0b21yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbWxlZnQ6ICAgYm90dG9tbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRib3R0b206ICAgbGVmdGJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnR0b3A6ICAgICAgbGVmdHRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiAgICAgICAgZWRnZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBCYW5kR3JpZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJhbmRHcmlkMkFyZWFQYXRocyhncmlkKXtcbiAgICB2YXIgYXJlYXMgPSBbXTtcbiAgICB2YXIgcm93cyA9IGdyaWQucm93cztcbiAgICB2YXIgY29scyA9IGdyaWQuY29scztcbiAgICB2YXIgY3VycmVudFBvbHlnb24gPSBbXTtcblxuICAgIGZvcih2YXIgaiA9IDA7IGogPCByb3dzOyBqKyspe1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNvbHM7IGkrKyl7XG4gICAgICAgIGlmKCh0eXBlb2YgZ3JpZC5jZWxsc1tqXVtpXSAhPT0gJ3VuZGVmaW5lZCcpICYmIChncmlkLmNlbGxzW2pdW2ldLmVkZ2VzLmxlbmd0aCA+IDApKXtcbiAgICAgICAgICAvKiB0cmFjZSBiYWNrIHBvbHlnb24gcGF0aCBzdGFydGluZyBmcm9tIHRoaXMgY2VsbCAqL1xuXG4gICAgICAgICAgdmFyIGNlbGwgPSBncmlkLmNlbGxzW2pdW2ldO1xuXG4gICAgICAgICAgLyogZ2V0IHN0YXJ0IGNvb3JkaW5hdGVzICovXG5cbiAgICAgICAgICB2YXIgcHJldiAgPSBnZXRTdGFydFhZKGNlbGwpLFxuICAgICAgICAgICAgICBuZXh0ICA9IG51bGwsXG4gICAgICAgICAgICAgIHAgICAgID0gaSxcbiAgICAgICAgICAgICAgcSAgICAgPSBqO1xuXG4gICAgICAgICAgaWYocHJldiAhPT0gbnVsbCl7XG4gICAgICAgICAgICBjdXJyZW50UG9seWdvbi5wdXNoKFsgcHJldi5wWzBdICsgcCwgcHJldi5wWzFdICsgcSBdKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coY2VsbCk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiY29vcmRzOiBcIiArIChwcmV2LnBbMF0gKyBwKSArIFwiIFwiICsgKHByZXYucFsxXSArIHEpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb3tcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cocCArIFwiLFwiICsgcSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGdyaWQuY2VsbHNbcV1bcF0pO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhncmlkLmNlbGxzW3FdW3BdLmVkZ2VzKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJmcm9tIDogXCIgKyBwcmV2LnggKyBcIiBcIiArIHByZXYueSArIFwiIFwiICsgcHJldi5vKTtcblxuICAgICAgICAgICAgbmV4dCA9IGdldEV4aXRYWShncmlkLmNlbGxzW3FdW3BdLCBwcmV2LngsIHByZXYueSwgcHJldi5vKTtcbiAgICAgICAgICAgIGlmKG5leHQgIT09IG51bGwpe1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiY29vcmRzOiBcIiArIChuZXh0LnBbMF0gKyBwKSArIFwiIFwiICsgKG5leHQucFsxXSArIHEpKTtcbiAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaChbIG5leHQucFswXSArIHAsIG5leHQucFsxXSArIHEgXSk7XG4gICAgICAgICAgICAgIHAgKz0gbmV4dC54O1xuICAgICAgICAgICAgICBxICs9IG5leHQueTtcbiAgICAgICAgICAgICAgcHJldiA9IG5leHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZ2V0RXhpdFhZKCkgcmV0dXJuZWQgbnVsbCFcIik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInRvIDogXCIgKyBuZXh0LnggKyBcIiBcIiArIG5leHQueSArIFwiIFwiICsgbmV4dC5vKTtcbiAgICAgICAgICAgIC8qIHNwZWNpYWwgY2FzZSwgd2hlcmUgd2UndmUgcmVhY2hlZCB0aGUgZ3JpZCBib3VuZGFyaWVzICovXG4gICAgICAgICAgICBpZigocSA8IDApIHx8IChxID49IHJvd3MpIHx8IChwIDwgMCkgfHwgKHAgPj0gY29scykgfHwgKHR5cGVvZiBncmlkLmNlbGxzW3FdW3BdID09PSAndW5kZWZpbmVkJykpe1xuICAgICAgICAgICAgICAvKiB0byBjcmVhdGUgYSBjbG9zZWQgcGF0aCwgd2UgbmVlZCB0byB0cmFjZSBvdXIgd2F5XG4gICAgICAgICAgICAgICAgICBhcnJvdW5kIHRoZSBtaXNzaW5nIGRhdGEsIHVudGlsIHdlIGZpbmQgYW4gZW50cnlcbiAgICAgICAgICAgICAgICAgIHBvaW50IGFnYWluXG4gICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgLyogc2V0IGJhY2sgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBjZWxsICovXG4gICAgICAgICAgICAgIHAgLT0gbmV4dC54O1xuICAgICAgICAgICAgICBxIC09IG5leHQueTtcblxuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwicmVhY2hlZCBib3VuZGFyeSBhdCBcIiArIHAgKyBcIiBcIiArIHEpO1xuXG4gICAgICAgICAgICAgIHZhciBtaXNzaW5nID0gdHJhY2VPdXRPZkdyaWRQYXRoKGdyaWQsIHAsIHEsIG5leHQueCwgbmV4dC55LCBuZXh0Lm8pO1xuICAgICAgICAgICAgICBpZihtaXNzaW5nICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICBtaXNzaW5nLnBhdGguZm9yRWFjaChmdW5jdGlvbihwcCl7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiY29vcmRzOiBcIiArIChwcFswXSkgKyBcIiBcIiArIChwcFsxXSkpO1xuICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaChwcCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcCA9IG1pc3NpbmcuaTtcbiAgICAgICAgICAgICAgICBxID0gbWlzc2luZy5qO1xuICAgICAgICAgICAgICAgIHByZXYgPSBtaXNzaW5nO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZ3JpZC5jZWxsc1txXVtwXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSggICAgKHR5cGVvZiBncmlkLmNlbGxzW3FdW3BdICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAmJiAoZ3JpZC5jZWxsc1txXVtwXS5lZGdlcy5sZW5ndGggPiAwKSk7XG5cbiAgICAgICAgICBhcmVhcy5wdXNoKGN1cnJlbnRQb2x5Z29uKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwibmV4dCBwb2x5Z29uXCIpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coY3VycmVudFBvbHlnb24pO1xuICAgICAgICAgIGN1cnJlbnRQb2x5Z29uID0gW107XG4gICAgICAgICAgaWYoZ3JpZC5jZWxsc1tqXVtpXS5lZGdlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcmVhcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWNlT3V0T2ZHcmlkUGF0aChncmlkLCBpLCBqLCBkX3gsIGRfeSwgZF9vKXtcbiAgICB2YXIgY2VsbCA9IGdyaWQuY2VsbHNbal1baV07XG4gICAgdmFyIGN2YWwgPSBjZWxsLmN2YWxfcmVhbDtcbiAgICB2YXIgcCA9IGkgKyBkX3gsXG4gICAgICAgIHEgPSBqICsgZF95O1xuICAgIHZhciBwYXRoID0gW107XG4gICAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUoIWNsb3NlZCl7XG4gICAgICAvL2NvbnNvbGUubG9nKFwicHJvY2Vzc2luZyBjZWxsIFwiICsgcCArIFwiLFwiICsgcSArIFwiIFwiICsgZF94ICsgXCIgXCIgKyBkX3kgKyBcIiBcIiArIGRfbyk7XG4gICAgICBpZigodHlwZW9mIGdyaWQuY2VsbHNbcV0gPT09ICd1bmRlZmluZWQnKSB8fCAodHlwZW9mIGdyaWQuY2VsbHNbcV1bcF0gPT09ICd1bmRlZmluZWQnKSl7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJ3aGljaCBpcyB1bmRlZmluZWRcIik7XG4gICAgICAgIC8qIHdlIGNhbid0IG1vdmUgb24sIHNvIHdlIGhhdmUgdG8gY2hhbmdlIGRpcmVjdGlvbiB0byBwcm9jZWVkIGZ1cnRoZXIgKi9cblxuICAgICAgICAvKiBnbyBiYWNrIHRvIHByZXZpb3VzIGNlbGwgKi9cbiAgICAgICAgcSAtPSBkX3k7XG4gICAgICAgIHAgLT0gZF94O1xuICAgICAgICBjZWxsID0gZ3JpZC5jZWxsc1txXVtwXTtcbiAgICAgICAgY3ZhbCA9IGNlbGwuY3ZhbF9yZWFsO1xuXG4gICAgICAgIC8qIGNoZWNrIHdoZXJlIHdlJ3ZlIGxlZnQgZGVmaW5lZCBjZWxscyBvZiB0aGUgZ3JpZC4uLiAqL1xuICAgICAgICBpZihkX3kgPT09IC0xKXsgLyogd2UgY2FtZSBmcm9tIHRvcCAqL1xuICAgICAgICAgIGlmKGRfbyA9PT0gMCl7ICAvKiBleGl0IGxlZnQgKi9cbiAgICAgICAgICAgIGlmKGN2YWwgJiBOb2RlMyl7IC8qIGxvd2VyIGxlZnQgbm9kZSBpcyB3aXRoaW4gcmFuZ2UsIHNvIHdlIG1vdmUgbGVmdCAqL1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3AsIHFdKTtcbiAgICAgICAgICAgICAgZF94ID0gLTE7XG4gICAgICAgICAgICAgIGRfeSA9IDA7XG4gICAgICAgICAgICAgIGRfbyA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCAmIE5vZGUyKXsgLyogbG93ZXIgcmlnaHQgbm9kZSBpcyB3aXRoaW4gcmFuZ2UsIHNvIHdlIG1vdmUgcmlnaHQgKi9cbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwICsgMSwgcV0pO1xuICAgICAgICAgICAgICBkX3ggPSAxO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHsgLyogY2xvc2UgdGhlIHBhdGggKi9cbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwICsgY2VsbC5ib3R0b21yaWdodCwgcV0pO1xuICAgICAgICAgICAgICBkX3ggPSAwO1xuICAgICAgICAgICAgICBkX3kgPSAxO1xuICAgICAgICAgICAgICBkX28gPSAxO1xuICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwLCBxXSk7XG4gICAgICAgICAgICAgIGRfeCA9IC0xO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGN2YWwgJiBOb2RlMil7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCArIGNlbGwuYm90dG9tcmlnaHQsIHFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gMTtcbiAgICAgICAgICAgICAgZF9vID0gMTtcbiAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3AgKyBjZWxsLmJvdHRvbWxlZnQsIHFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gMTtcbiAgICAgICAgICAgICAgZF9vID0gMDtcbiAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYoZF95ID09PSAxKXsgLyogd2UgY2FtZSBmcm9tIGJvdHRvbSAqL1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ3ZSBjYW1lIGZyb20gYm90dG9tIGFuZCBoaXQgYSBub24tZXhpc3RpbmcgY2VsbCBcIiArIChwICsgZF94KSArIFwiLFwiICsgKHEgKyBkX3kpICsgXCIhXCIpO1xuICAgICAgICAgIGlmKGRfbyA9PT0gMCl7IC8qIGV4aXQgbGVmdCAqL1xuICAgICAgICAgICAgaWYoY3ZhbCAmIE5vZGUxKXsgLyogdG9wIHJpZ2h0IG5vZGUgaXMgd2l0aGluIHJhbmdlLCBzbyB3ZSBtb3ZlIHJpZ2h0ICovXG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCsxLHErMV0pO1xuICAgICAgICAgICAgICBkX3ggPSAxO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCEoY3ZhbCAmIE5vZGUwKSl7IC8qIGZvdW5kIGVudHJ5IHdpdGhpbiBzYW1lIGNlbGwgKi9cbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwICsgY2VsbC50b3ByaWdodCwgcSArIDFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gLTE7XG4gICAgICAgICAgICAgIGRfbyA9IDE7XG4gICAgICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJmb3VuZCBlbnRyeSBmcm9tIGJvdHRvbSBhdCBcIiArIHAgKyBcIixcIiArIHEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCArIGNlbGwudG9wbGVmdCwgcSArIDFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gLTE7XG4gICAgICAgICAgICAgIGRfbyA9IDA7XG4gICAgICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihjdmFsICYgTm9kZTEpe1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3ArMSwgcSsxXSk7XG4gICAgICAgICAgICAgIGRfeCA9IDE7XG4gICAgICAgICAgICAgIGRfeSA9IDA7XG4gICAgICAgICAgICAgIGRfbyA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgeyAvKiBtb3ZlIHJpZ2h0ICovXG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCsxLCBxKzFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMTtcbiAgICAgICAgICAgICAgZF95ID0gMDtcbiAgICAgICAgICAgICAgZF9vID0gMTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInd0ZlwiKTtcbiAgICAgICAgICAgICAgLy9icmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZihkX3ggPT09IC0xKXsgLyogd2UgY2FtZSBmcm9tIHJpZ2h0ICovXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIndlIGNhbWUgZnJvbSByaWdodCBhbmQgaGl0IGEgbm9uLWV4aXN0aW5nIGNlbGwgYXQgXCIgKyAocCArIGRfeCkgKyBcIixcIiArIChxICsgZF95KSArIFwiIVwiKTtcbiAgICAgICAgICBpZihkX28gPT09IDApe1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImNvbnRpbnVlIGF0IGJvdHRvbVwiKTtcbiAgICAgICAgICAgIGlmKGN2YWwgJiBOb2RlMCl7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCxxKzFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gMTtcbiAgICAgICAgICAgICAgZF9vID0gMDtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm1vdmluZyB1cHdhcmRzIHRvIFwiICsgKHAgKyBkX3gpICsgXCIsXCIgKyAocSArIGRfeSkgKyBcIiFcIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYoIShjdmFsICYgTm9kZTMpKXsgLyogdGhlcmUgaGFzIHRvIGJlIGFuIGVudHJ5IGludG8gdGhlIHJlZ3VsYXIgZ3JpZCBhZ2FpbiEgKi9cbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImV4aXRpbmcgdG9wXCIpO1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3AsIHEgKyBjZWxsLmxlZnR0b3BdKTtcbiAgICAgICAgICAgICAgZF94ID0gMTtcbiAgICAgICAgICAgICAgZF95ID0gMDtcbiAgICAgICAgICAgICAgZF9vID0gMTtcbiAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZXhpdGluZyBib3R0b21cIik7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCwgcSArIGNlbGwubGVmdGJvdHRvbV0pO1xuICAgICAgICAgICAgICBkX3ggPSAxO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAwO1xuICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImNvbnRpbnVlIGF0IHRvcFwiKTtcbiAgICAgICAgICAgIGlmKGN2YWwgJiBOb2RlMCl7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCxxKzFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gMTtcbiAgICAgICAgICAgICAgZF9vID0gMDtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm1vdmluZyB1cHdhcmRzIHRvIFwiICsgKHAgKyBkX3gpICsgXCIsXCIgKyAocSArIGRfeSkgKyBcIiFcIik7XG4gICAgICAgICAgICB9IGVsc2UgeyAvKiAqL1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiB3dGZcIik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKGRfeCA9PT0gMSl7IC8qIHdlIGNhbWUgZnJvbSBsZWZ0ICovXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIndlIGNhbWUgZnJvbSBsZWZ0IGFuZCBoaXQgYSBub24tZXhpc3RpbmcgY2VsbCBcIiArIChwICsgZF94KSArIFwiLFwiICsgKHEgKyBkX3kpICsgXCIhXCIpO1xuICAgICAgICAgIGlmKGRfbyA9PT0gMCl7IC8qIGV4aXQgYm90dG9tICovXG4gICAgICAgICAgICBpZihjdmFsICYgTm9kZTIpe1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3ArMSxxXSk7XG4gICAgICAgICAgICAgIGRfeCA9IDA7XG4gICAgICAgICAgICAgIGRfeSA9IC0xO1xuICAgICAgICAgICAgICBkX28gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwKzEscStjZWxsLnJpZ2h0Ym90dG9tXSk7XG4gICAgICAgICAgICAgIGRfeCA9IC0xO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAwO1xuICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgeyAvKiBleGl0IHRvcCAqL1xuICAgICAgICAgICAgaWYoY3ZhbCAmIE5vZGUyKXtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwKzEscV0pO1xuICAgICAgICAgICAgICBkX3ggPSAwO1xuICAgICAgICAgICAgICBkX3kgPSAtMTtcbiAgICAgICAgICAgICAgZF9vID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZighKGN2YWwgJiBOb2RlMSkpe1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3AgKyAxLCBxICsgY2VsbC5yaWdodGJvdHRvbV0pO1xuICAgICAgICAgICAgICBkX3ggPSAtMTtcbiAgICAgICAgICAgICAgZF95ID0gMDtcbiAgICAgICAgICAgICAgZF9vID0gMDtcbiAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3ArMSxxK2NlbGwucmlnaHR0b3BdKTtcbiAgICAgICAgICAgICAgZF94ID0gLTE7XG4gICAgICAgICAgICAgIGRfeSA9IDA7XG4gICAgICAgICAgICAgIGRfbyA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLyogd2UgY2FtZSBmcm9tIHRoZSBzYW1lIGNlbGwgKi9cbiAgICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiB3ZSBjYW1lIGZyb20gbm93aGVyZSFcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHsgLyogdHJ5IHRvIGZpbmQgYW4gZW50cnkgaW50byB0aGUgcmVndWxhciBncmlkIGFnYWluISAqL1xuICAgICAgICBjZWxsID0gZ3JpZC5jZWxsc1txXVtwXTtcbiAgICAgICAgY3ZhbCA9IGNlbGwuY3ZhbF9yZWFsO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwid2hpY2ggaXMgZGVmaW5lZFwiKTtcblxuICAgICAgICBpZihkX3ggPT09IC0xKXtcbiAgICAgICAgICBpZihkX28gPT09IDApe1xuICAgICAgICAgICAgLyogdHJ5IHRvIGdvIGRvd253YXJkcyAqL1xuICAgICAgICAgICAgaWYoKHR5cGVvZiBncmlkLmNlbGxzW3EgLSAxXSAhPT0gJ3VuZGVmaW5lZCcpICYmICh0eXBlb2YgZ3JpZC5jZWxsc1txIC0gMV1bcF0gIT09ICd1bmRlZmluZWQnKSl7XG4gICAgICAgICAgICAgIGRfeCA9IDA7XG4gICAgICAgICAgICAgIGRfeSA9IC0xO1xuICAgICAgICAgICAgICBkX28gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGN2YWwgJiBOb2RlMyl7IC8qIHByb2NlZWQgc2VhcmNoaW5nIGluIHgtZGlyZWN0aW9uICovXG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJwcm9jZWVkaW5nIGluIHgtZGlyZWN0aW9uIVwiKTtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwLCBxXSk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvKiB3ZSBtdXN0IGhhdmUgZm91bmQgYW4gZW50cnkgaW50byB0aGUgcmVndWxhciBncmlkICovXG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCArIGNlbGwuYm90dG9tcmlnaHQsIHFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gMTtcbiAgICAgICAgICAgICAgZF9vID0gMTtcbiAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImZvdW5kIGVudHJ5IGZyb20gYm90dG9tIGF0IFwiICsgcCArIFwiLFwiICsgcSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihjdmFsICYgTm9kZTApIHsgLyogcHJvY2VlZCBzZWFyY2hpbiBpbiB4LWRpcmVjdGlvbiAqL1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiBwcm9jZWVkaW5nIGluIHgtZGlyZWN0aW9uIVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8qIHdlIG11c3QgaGF2ZSBmb3VuZCBhbiBlbnRyeSBpbnRvIHRoZSByZWd1bGFyIGdyaWQgKi9cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJNYXJjaGluZ1NxdWFyZXNKUy1pc29CYW5kczogZm91bmQgZW50cnkgZnJvbSB0b3AgYXQgXCIgKyBwICsgXCIsXCIgKyBxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYoZF94ID09PSAxKXtcbiAgICAgICAgICBpZihkX28gPT09IDApe1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJNYXJjaGluZ1NxdWFyZXNKUy1pc29CYW5kczogd3RmXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8qIHRyeSB0byBnbyB1cHdhcmRzICovXG4gICAgICAgICAgICBpZigodHlwZW9mIGdyaWQuY2VsbHNbcSsxXSAhPT0gJ3VuZGVmaW5lZCcpICYmICh0eXBlb2YgZ3JpZC5jZWxsc1txKzFdW3BdICE9PSAndW5kZWZpbmVkJykpe1xuICAgICAgICAgICAgICBkX3ggPSAwO1xuICAgICAgICAgICAgICBkX3kgPSAxO1xuICAgICAgICAgICAgICBkX28gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGN2YWwgJiBOb2RlMSl7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCsxLHErMV0pO1xuICAgICAgICAgICAgICBkX3ggPSAxO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHsgLyogZm91bmQgYW4gZW50cnkgcG9pbnQgaW50byByZWd1bGFyIGdyaWQhICovXG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCtjZWxsLnRvcGxlZnQsIHEgKyAxXSk7XG4gICAgICAgICAgICAgIGRfeCA9IDA7XG4gICAgICAgICAgICAgIGRfeSA9IC0xO1xuICAgICAgICAgICAgICBkX28gPSAwO1xuICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZm91bmQgZW50cnkgZnJvbSBib3R0b20gYXQgXCIgKyBwICsgXCIsXCIgKyBxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYoZF95ID09PSAtMSl7XG4gICAgICAgICAgaWYoZF9vID09PSAxKXtcbiAgICAgICAgICAgIC8qIHRyeSB0byBnbyByaWdodCAqL1xuICAgICAgICAgICAgaWYodHlwZW9mIGdyaWQuY2VsbHNbcV1bcCsxXSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICBkX3ggPSAxO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGN2YWwgJiBOb2RlMil7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCsxLHFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gLTE7XG4gICAgICAgICAgICAgIGRfbyA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgeyAvKiBmb3VuZCBlbnRyeSBpbnRvIHJlZ3VsYXIgZ3JpZCEgKi9cbiAgICAgICAgICAgICAgcGF0aC5wdXNoKFtwKzEsIHEgKyBjZWxsLnJpZ2h0dG9wXSk7XG4gICAgICAgICAgICAgIGRfeCA9IC0xO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAxO1xuICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZm91bmQgZW50cnkgZnJvbSB0b3AgYXQgXCIgKyBwICsgXCIsXCIgKyBxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTWFyY2hpbmdTcXVhcmVzSlMtaXNvQmFuZHM6IHd0ZlwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKGRfeSA9PT0gMSl7XG4gICAgICAgICAgaWYoZF9vID09PSAwKXtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ3ZSBjYW1lIGZyb20gYm90dG9tIGxlZnQgYW5kIHByb2NlZWQgdG8gdGhlIGxlZnRcIik7XG4gICAgICAgICAgICAvKiB0cnkgdG8gZ28gbGVmdCAqL1xuICAgICAgICAgICAgaWYodHlwZW9mIGdyaWQuY2VsbHNbcV1bcCAtIDFdICE9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgIGRfeCA9IC0xO1xuICAgICAgICAgICAgICBkX3kgPSAwO1xuICAgICAgICAgICAgICBkX28gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGN2YWwgJiBOb2RlMCl7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChbcCxxKzFdKTtcbiAgICAgICAgICAgICAgZF94ID0gMDtcbiAgICAgICAgICAgICAgZF95ID0gMTtcbiAgICAgICAgICAgICAgZF9vID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8qIGZvdW5kIGFuIGVudHJ5IHBvaW50IGludG8gcmVndWxhciBncmlkISAqL1xuICAgICAgICAgICAgICBwYXRoLnB1c2goW3AsIHEgKyBjZWxsLmxlZnRib3R0b21dKTtcbiAgICAgICAgICAgICAgZF94ID0gMTtcbiAgICAgICAgICAgICAgZF95ID0gMDtcbiAgICAgICAgICAgICAgZF9vID0gMDtcbiAgICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImZvdW5kIGVudHJ5IGZyb20gYm90dG9tIGF0IFwiICsgcCArIFwiLFwiICsgcSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwid2UgY2FtZSBmcm9tIGJvdHRvbSByaWdodCBhbmQgcHJvY2VlZCB0byB0aGUgcmlnaHRcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiB3dGZcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJNYXJjaGluZ1NxdWFyZXNKUy1pc29CYW5kczogd2hlcmUgZGlkIHdlIGNhbWUgZnJvbT8/P1wiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIHAgKz0gZF94O1xuICAgICAgcSArPSBkX3k7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiZ29pbmcgb24gdG8gIFwiICsgcCArIFwiLFwiICsgcSArIFwiIHZpYSBcIiArIGRfeCArIFwiIFwiICsgZF95ICsgXCIgXCIgKyBkX28pO1xuXG4gICAgICBpZigocCA9PT0gaSkgJiYgKHEgPT09IGopKXsgLyogYmFpbCBvdXQsIG9uY2Ugd2UndmUgY2xvc2VkIGEgY2lyY2xlIHBhdGggKi9cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvL2NvbnNvbGUubG9nKFwiZXhpdCB3aXRoIFwiICsgcCArIFwiLFwiICsgcSArIFwiIFwiICsgZF94ICsgXCIgXCIgKyBkX3kgKyBcIiBcIiArIGRfbyk7XG4gICAgcmV0dXJuIHsgcGF0aDogcGF0aCwgaTogcCwgajogcSwgeDogZF94LCB5OiBkX3ksIG86IGRfbyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlRWRnZShjZWxsLCBlZGdlSWR4KXtcbiAgICBkZWxldGUgY2VsbC5lZGdlc1tlZGdlSWR4XTtcbiAgICBmb3IodmFyIGsgPSBlZGdlSWR4ICsgMTsgayA8IGNlbGwuZWRnZXMubGVuZ3RoOyBrKyspe1xuICAgICAgY2VsbC5lZGdlc1trLTFdID0gY2VsbC5lZGdlc1trXTtcbiAgICB9XG4gICAgY2VsbC5lZGdlcy5wb3AoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFN0YXJ0WFkoY2VsbCl7XG5cbiAgICBpZihjZWxsLmVkZ2VzLmxlbmd0aCA+IDApe1xuICAgICAgdmFyIGUgPSBjZWxsLmVkZ2VzW2NlbGwuZWRnZXMubGVuZ3RoIC0gMV07XG4gICAgICAvL2NvbnNvbGUubG9nKFwic3RhcnRpbmcgd2l0aCBlZGdlIFwiICsgZSk7XG4gICAgICB2YXIgY3ZhbCA9IGNlbGwuY3ZhbF9yZWFsO1xuICAgICAgc3dpdGNoKGUpe1xuICAgICAgICBjYXNlIDA6ICAgaWYoY3ZhbCAmIE5vZGUxKXsgLyogbm9kZSAxIHdpdGhpbiByYW5nZSAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0dG9wXSwgeDogLTEsIHk6IDAsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLyogbm9kZSAxIGJlbG93IG9yIGFib3ZlIHRocmVzaG9sZCAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFtjZWxsLnRvcGxlZnQsIDFdLCB4OiAwLCB5OiAtMSwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTogICBpZihjdmFsICYgTm9kZTIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFtjZWxsLnRvcGxlZnQsIDFdLCB4OiAwLCB5OiAtMSwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgeDogLTEsIHk6IDAsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDI6ICAgaWYoY3ZhbCAmIE5vZGUyKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC5ib3R0b21yaWdodCwgMF0sIHg6IDAsIHk6IDEsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC50b3BsZWZ0LCAxXSwgeDogMCwgeTogLTEsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDM6ICAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC50b3BsZWZ0LCAxXSwgeDogMCwgeTogLTEsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgeDogMCwgeTogMSwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgNDogICBpZihjdmFsICYgTm9kZTEpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0dG9wXSwgeDogLTEsIHk6IDAsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC50b3ByaWdodCwgMV0sIHg6IDAsIHk6IC0xLCBvOiAxfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSA1OiAgIGlmKGN2YWwgJiBOb2RlMil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogW2NlbGwudG9wcmlnaHQsIDFdLCB4OiAwLCB5OiAtMSwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgeDogLTEsIHk6IDAsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDY6ICAgaWYoY3ZhbCAmIE5vZGUyKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC5ib3R0b21yaWdodCwgMF0sIHg6IDAsIHk6IDEsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC50b3ByaWdodCwgMV0sIHg6IDAsIHk6IC0xLCBvOiAxfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSA3OiAgIGlmKGN2YWwgJiBOb2RlMyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogW2NlbGwudG9wcmlnaHQsIDFdLCB4OiAwLCB5OiAtMSwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFtjZWxsLmJvdHRvbWxlZnQsIDBdLCB4OiAwLCB5OiAxLCBvOiAwfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSA4OiAgIGlmKGN2YWwgJiBOb2RlMil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogW2NlbGwuYm90dG9tcmlnaHQsIDBdLCB4OiAwLCB5OiAxLCBvOiAxfTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogWzEsIGNlbGwucmlnaHR0b3BdLCB4OiAtMSwgeTogMCwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgOTogICBpZihjdmFsICYgTm9kZTMpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0dG9wXSwgeDogLTEsIHk6IDAsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgeDogMCwgeTogMSwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTA6ICBpZihjdmFsICYgTm9kZTMpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFswLCBjZWxsLmxlZnRib3R0b21dLCB4OiAxLCB5OiAwLCBvOiAwfTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogWzEsIGNlbGwucmlnaHR0b3BdLCB4OiAtMSwgeTogMCwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTE6ICBpZihjdmFsICYgTm9kZTApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0dG9wXSwgeDogLTEsIHk6IDAsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbMCwgY2VsbC5sZWZ0dG9wXSwgeDogMSwgeTogMCwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTI6ICBpZihjdmFsICYgTm9kZTIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFtjZWxsLmJvdHRvbXJpZ2h0LCAwXSwgeDogMCwgeTogMSwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgeDogLTEsIHk6IDAsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDEzOiAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbMSwgY2VsbC5yaWdodGJvdHRvbV0sIHg6IC0xLCB5OiAwLCBvOiAwfTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogW2NlbGwuYm90dG9tbGVmdCwgMF0sIHg6IDAsIHk6IDEsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDE0OiAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgeDogMSwgeTogMCwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFsxLCBjZWxsLnJpZ2h0Ym90dG9tXSwgeDogLTEsIHk6IDAsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDE1OiAgaWYoY3ZhbCAmIE5vZGUwKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbMSwgY2VsbC5yaWdodGJvdHRvbV0sIHg6IC0xLCB5OiAwLCBvOiAwfTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogWzAsIGNlbGwubGVmdHRvcF0sIHg6IDEsIHk6IDAsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDE2OiAgaWYoY3ZhbCAmIE5vZGUyKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC5ib3R0b21yaWdodCwgMF0sIHg6IDAsIHk6IDEsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgeDogMSwgeTogMCwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTc6ICBpZihjdmFsICYgTm9kZTApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFtjZWxsLmJvdHRvbXJpZ2h0LCAwXSwgeDogMCwgeTogMSwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFswLCBjZWxsLmxlZnR0b3BdLCB4OiAxLCB5OiAwLCBvOiAxfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogIGlmKGN2YWwgJiBOb2RlMyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogWzAsIGNlbGwubGVmdGJvdHRvbV0sIHg6IDEsIHk6IDAsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC5ib3R0b21sZWZ0LCAwXSwgeDogMCwgeTogMSwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTk6ICBpZihjdmFsICYgTm9kZTApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFtjZWxsLmJvdHRvbWxlZnQsIDBdLCB4OiAwLCB5OiAxLCBvOiAwfTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogWzAsIGNlbGwubGVmdHRvcF0sIHg6IDEsIHk6IDAsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDIwOiAgaWYoY3ZhbCAmIE5vZGUwKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC50b3BsZWZ0LCAxXSwgeDogMCwgeTogLTEsIG86IDB9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbMCwgY2VsbC5sZWZ0Ym90dG9tXSwgeDogMSwgeTogMCwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMjE6ICBpZihjdmFsICYgTm9kZTEpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFswLCBjZWxsLmxlZnRib3R0b21dLCB4OiAxLCB5OiAwLCBvOiAwfTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogW2NlbGwudG9wcmlnaHQsIDFdLCB4OiAwLCB5OiAtMSwgbzogMX07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMjI6ICBpZihjdmFsICYgTm9kZTApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFtjZWxsLnRvcGxlZnQsIDFdLCB4OiAwLCB5OiAtMSwgbzogMH07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3A6IFswLCBjZWxsLmxlZnR0b3BdLCB4OiAxLCB5OiAwLCBvOiAxfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAyMzogIGlmKGN2YWwgJiBOb2RlMSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cDogWzAsIGNlbGwubGVmdHRvcF0sIHg6IDEsIHk6IDAsIG86IDF9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwOiBbY2VsbC50b3ByaWdodCwgMV0sIHg6IDAsIHk6IC0xLCBvOiAxfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogIGNvbnNvbGUubG9nKFwiTWFyY2hpbmdTcXVhcmVzSlMtaXNvQmFuZHM6IGVkZ2UgaW5kZXggb3V0IG9mIHJhbmdlIVwiKTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNlbGwpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFeGl0WFkoY2VsbCwgeCwgeSwgbyl7XG5cbiAgICB2YXIgZSwgaWRfeCwgZF94LCBkX3ksIGN2YWwgPSBjZWxsLmN2YWw7XG4gICAgdmFyIGRfbztcblxuICAgIHN3aXRjaCh4KXtcbiAgICAgIGNhc2UgLTE6ICBzd2l0Y2gobyl7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6ICAgZSA9IGlzb0JhbmRFZGdlUkJbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZF94ID0gaXNvQmFuZE5leHRYUkJbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZF95ID0gaXNvQmFuZE5leHRZUkJbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZF9vID0gaXNvQmFuZE5leHRPUkJbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OiAgZSA9IGlzb0JhbmRFZGdlUlRbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZF94ID0gaXNvQmFuZE5leHRYUlRbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZF95ID0gaXNvQmFuZE5leHRZUlRbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZF9vID0gaXNvQmFuZE5leHRPUlRbY3ZhbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOiAgIHN3aXRjaChvKXtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDogICBlID0gaXNvQmFuZEVkZ2VMQltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3ggPSBpc29CYW5kTmV4dFhMQltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3kgPSBpc29CYW5kTmV4dFlMQltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX28gPSBpc29CYW5kTmV4dE9MQltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICBlID0gaXNvQmFuZEVkZ2VMVFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3ggPSBpc29CYW5kTmV4dFhMVFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3kgPSBpc29CYW5kTmV4dFlMVFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX28gPSBpc29CYW5kTmV4dE9MVFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAgc3dpdGNoKHkpe1xuICAgICAgICAgICAgICAgICAgY2FzZSAtMTogIHN3aXRjaChvKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogICBlID0gaXNvQmFuZEVkZ2VUTFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3ggPSBpc29CYW5kTmV4dFhUTFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3kgPSBpc29CYW5kTmV4dFlUTFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX28gPSBpc29CYW5kTmV4dE9UTFtjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICBlID0gaXNvQmFuZEVkZ2VUUltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3ggPSBpc29CYW5kTmV4dFhUUltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX3kgPSBpc29CYW5kTmV4dFlUUltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkX28gPSBpc29CYW5kTmV4dE9UUltjdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIDE6ICAgc3dpdGNoKG8pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiAgIGUgPSBpc29CYW5kRWRnZUJMW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRfeCA9IGlzb0JhbmROZXh0WEJMW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRfeSA9IGlzb0JhbmROZXh0WUJMW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRfbyA9IGlzb0JhbmROZXh0T0JMW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogIGUgPSBpc29CYW5kRWRnZUJSW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRfeCA9IGlzb0JhbmROZXh0WEJSW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRfeSA9IGlzb0JhbmROZXh0WUJSW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRfbyA9IGlzb0JhbmROZXh0T0JSW2N2YWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWRfeCA9IGNlbGwuZWRnZXMuaW5kZXhPZihlKTtcbiAgICBpZih0eXBlb2YgY2VsbC5lZGdlc1tpZF94XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgZGVsZXRlRWRnZShjZWxsLCBpZF94KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9jb25zb2xlLmxvZyhcIndyb25nIGVkZ2VzLi4uXCIpO1xuICAgICAgLy9jb25zb2xlLmxvZyh4ICsgXCIgXCIgKyB5ICsgXCIgXCIgKyBvKTtcbiAgICAgIC8vY29uc29sZS5sb2coY2VsbCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjdmFsID0gY2VsbC5jdmFsX3JlYWw7XG5cbiAgICBzd2l0Y2goZSl7XG4gICAgICAgIGNhc2UgMDogICBpZihjdmFsICYgTm9kZTEpeyAvKiBub2RlIDEgd2l0aGluIHJhbmdlICovXG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLnRvcGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLyogbm9kZSAxIGJlbG93IG9yIGFib3ZlIHRocmVzaG9sZCAqL1xuICAgICAgICAgICAgICAgICAgICB4ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGNlbGwucmlnaHR0b3A7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOiAgIGlmKGN2YWwgJiBOb2RlMil7XG4gICAgICAgICAgICAgICAgICAgIHggPSAxO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5yaWdodGJvdHRvbTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLnRvcGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogICBpZihjdmFsICYgTm9kZTIpe1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2VsbC50b3BsZWZ0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLmJvdHRvbXJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6ICAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbGwuYm90dG9tbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2VsbC50b3BsZWZ0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6ICAgaWYoY3ZhbCAmIE5vZGUxKXtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbGwudG9wcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZWxsLnJpZ2h0dG9wO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTogICBpZihjdmFsICYgTm9kZTIpe1xuICAgICAgICAgICAgICAgICAgICB4ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGNlbGwucmlnaHRib3R0b207XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2VsbC50b3ByaWdodDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2OiAgIGlmKGN2YWwgJiBOb2RlMil7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLnRvcHJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLmJvdHRvbXJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc6ICAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbGwuYm90dG9tbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2VsbC50b3ByaWdodDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OiAgIGlmKGN2YWwgJiBOb2RlMil7XG4gICAgICAgICAgICAgICAgICAgIHggPSAxO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5yaWdodHRvcDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLmJvdHRvbXJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk6ICAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbGwuYm90dG9tbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGNlbGwucmlnaHR0b3A7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDogIGlmKGN2YWwgJiBOb2RlMyl7XG4gICAgICAgICAgICAgICAgICAgIHggPSAxO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5yaWdodHRvcDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5sZWZ0Ym90dG9tO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTE6ICBpZihjdmFsICYgTm9kZTApe1xuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGNlbGwubGVmdHRvcDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSAxO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5yaWdodHRvcDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyOiAgaWYoY3ZhbCAmIE5vZGUyKXtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZWxsLnJpZ2h0Ym90dG9tO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbGwuYm90dG9tcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTM6ICBpZihjdmFsICYgTm9kZTMpe1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2VsbC5ib3R0b21sZWZ0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSAxO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5yaWdodGJvdHRvbTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE0OiAgaWYoY3ZhbCAmIE5vZGUzKXtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZWxsLnJpZ2h0Ym90dG9tO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZWxsLmxlZnRib3R0b207XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNTogIGlmKGN2YWwgJiBOb2RlMCl7XG4gICAgICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5sZWZ0dG9wO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZWxsLnJpZ2h0Ym90dG9tO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTY6ICBpZihjdmFsICYgTm9kZTIpe1xuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGNlbGwubGVmdGJvdHRvbTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLmJvdHRvbXJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE3OiAgaWYoY3ZhbCAmIE5vZGUwKXtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZWxsLmxlZnR0b3A7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2VsbC5ib3R0b21yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxODogIGlmKGN2YWwgJiBOb2RlMyl7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLmJvdHRvbWxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAwO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZWxsLmxlZnRib3R0b207XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOTogIGlmKGN2YWwgJiBOb2RlMCl7XG4gICAgICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5sZWZ0dG9wO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbGwuYm90dG9tbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyMDogIGlmKGN2YWwgJiBOb2RlMCl7XG4gICAgICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5sZWZ0Ym90dG9tO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbGwudG9wbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyMTogIGlmKGN2YWwgJiBOb2RlMSl7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLnRvcHJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB5ID0gMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgICAgICB5ID0gY2VsbC5sZWZ0Ym90dG9tO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjI6ICBpZihjdmFsICYgTm9kZTApe1xuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGNlbGwubGVmdHRvcDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjZWxsLnRvcGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjM6ICBpZihjdmFsICYgTm9kZTEpe1xuICAgICAgICAgICAgICAgICAgICB4ID0gY2VsbC50b3ByaWdodDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IDE7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGNlbGwubGVmdHRvcDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAgY29uc29sZS5sb2coXCJNYXJjaGluZ1NxdWFyZXNKUy1pc29CYW5kczogZWRnZSBpbmRleCBvdXQgb2YgcmFuZ2UhXCIpO1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY2VsbCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZigodHlwZW9mIHggPT09ICd1bmRlZmluZWQnKSB8fCAodHlwZW9mIHkgPT09ICd1bmRlZmluZWQnKSB8fFxuICAgICAgICAodHlwZW9mIGRfeCA9PT0gJ3VuZGVmaW5lZCcpIHx8ICh0eXBlb2YgZF95ID09PSAndW5kZWZpbmVkJykgfHxcbiAgICAgICAgKHR5cGVvZiBkX28gPT09ICd1bmRlZmluZWQnKSl7XG4gICAgICBjb25zb2xlLmxvZyhcIk1hcmNoaW5nU3F1YXJlc0pTLWlzb0JhbmRzOiB1bmRlZmluZWQgdmFsdWUhXCIpO1xuICAgICAgY29uc29sZS5sb2coY2VsbCk7XG4gICAgICBjb25zb2xlLmxvZyh4ICsgXCIgXCIgKyB5ICsgXCIgXCIgKyBkX3ggKyBcIiBcIiArIGRfeSArIFwiIFwiICsgZF9vKTtcbiAgICB9XG4gICAgcmV0dXJuIHtwOiBbeCwgeV0sIHg6IGRfeCwgeTogZF95LCBvOiBkX299O1xuICB9XG5cbiAgZnVuY3Rpb24gQmFuZEdyaWQyQXJlYXMoZ3JpZCl7XG4gICAgdmFyIGFyZWFzID0gW107XG4gICAgdmFyIGFyZWFfaWR4ID0gMDtcblxuICAgIGdyaWQuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihnLCBqKXtcbiAgICAgIGcuZm9yRWFjaChmdW5jdGlvbihnZywgaSl7XG4gICAgICAgIGlmKHR5cGVvZiBnZyAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgIHZhciBhID0gcG9seWdvbl90YWJsZVtnZy5jdmFsXShnZyk7XG4gICAgICAgICAgaWYoKHR5cGVvZiBhID09PSAnb2JqZWN0JykgJiYgaXNBcnJheShhKSl7XG4gICAgICAgICAgICBpZigodHlwZW9mIGFbMF0gPT09ICdvYmplY3QnKSAmJiBpc0FycmF5KGFbMF0pKXtcbiAgICAgICAgICAgICAgaWYoKHR5cGVvZiBhWzBdWzBdID09PSAnb2JqZWN0JykgJiYgaXNBcnJheShhWzBdWzBdKSl7XG4gICAgICAgICAgICAgICAgYS5mb3JFYWNoKGZ1bmN0aW9uKGFhKXtcbiAgICAgICAgICAgICAgICAgIGFhLmZvckVhY2goZnVuY3Rpb24oYWFhKXtcbiAgICAgICAgICAgICAgICAgICAgYWFhWzBdICs9IGk7XG4gICAgICAgICAgICAgICAgICAgIGFhYVsxXSArPSBqO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBhcmVhc1thcmVhX2lkeCsrXSA9IGFhO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGEuZm9yRWFjaChmdW5jdGlvbihhYSl7XG4gICAgICAgICAgICAgICAgICBhYVswXSArPSBpO1xuICAgICAgICAgICAgICAgICAgYWFbMV0gKz0gajtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhcmVhc1thcmVhX2lkeCsrXSA9IGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTWFyY2hpbmdTcXVhcmVzSlMtaXNvQmFuZHM6IGJhbmRjZWxsIHBvbHlnb24gd2l0aCBtYWxmb3JtZWQgY29vcmRpbmF0ZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTWFyY2hpbmdTcXVhcmVzSlMtaXNvQmFuZHM6IGJhbmRjZWxsIHBvbHlnb24gd2l0aCBudWxsIGNvb3JkaW5hdGVzXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJlYXM7XG4gIH1cblxuICByZXR1cm4gaXNvQmFuZHM7XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL21hcmNoaW5nc3F1YXJlcy9tYXJjaGluZ3NxdWFyZXMtaXNvYmFuZHMuanNcbi8vIG1vZHVsZSBpZCA9IDExMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiFcbiogQGxpY2Vuc2UgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlLlxuKiBDb3B5cmlnaHQgKGMpIDIwMTUsIDIwMTUgUm9ubnkgTG9yZW56IDxyb25ueUB0YmkudW5pdmllLmFjLmF0PlxuKiB2LiAxLjIuMFxuKiBodHRwczovL2dpdGh1Yi5jb20vUmF1bVplaXQvTWFyY2hpbmdTcXVhcmVzLmpzXG4qL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHsgcmV0dXJuIHsgaXNvQ29udG91cnMgOiBmYWN0b3J5KCkgfTsgfSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHsgaXNvQ29udG91cnMgOiBmYWN0b3J5KCkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290Lk1hcmNoaW5nU3F1YXJlc0pTID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNvQ29udG91cnMgOiBmYWN0b3J5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc29CYW5kcyA6IChyb290Lk1hcmNoaW5nU3F1YXJlc0pTKSA/IHJvb3QuTWFyY2hpbmdTcXVhcmVzSlMuaXNvQmFuZHMgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4gIC8qXG4gICAgQ29tcHV0ZSB0aGUgaXNvY29udG91cihzKSBvZiBhIHNjYWxhciAyRCBmaWVsZCBnaXZlblxuICAgIGEgY2VydGFpbiB0aHJlc2hvbGQgYnkgYXBwbHlpbmcgdGhlIE1hcmNoaW5nIFNxdWFyZXNcbiAgICBBbGdvcml0aG0uIFRoZSBmdW5jdGlvbiByZXR1cm5zIGEgbGlzdCBvZiBwYXRoIGNvb3JkaW5hdGVzXG4gICovXG4gIHZhciBkZWZhdWx0U2V0dGluZ3MgPSB7XG4gICAgc3VjY2Vzc0NhbGxiYWNrOiAgbnVsbCxcbiAgICB2ZXJib3NlOiAgICAgICAgICBmYWxzZVxuICB9O1xuXG4gIHZhciBzZXR0aW5ncyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGlzb0NvbnRvdXJzKGRhdGEsIHRocmVzaG9sZCwgb3B0aW9ucyl7XG4gICAgLyogcHJvY2VzcyBvcHRpb25zICovXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBvcHRpb25zIDoge307XG5cbiAgICB2YXIgb3B0aW9uS2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRTZXR0aW5ncyk7XG5cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3B0aW9uS2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICB2YXIga2V5ID0gb3B0aW9uS2V5c1tpXTtcbiAgICAgIHZhciB2YWwgPSBvcHRpb25zW2tleV07XG4gICAgICB2YWwgPSAoKHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsICE9PSBudWxsKSkgPyB2YWwgOiBkZWZhdWx0U2V0dGluZ3Nba2V5XTtcblxuICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbDtcbiAgICB9XG5cbiAgICBpZihzZXR0aW5ncy52ZXJib3NlKVxuICAgICAgY29uc29sZS5sb2coXCJNYXJjaGluZ1NxdWFyZXNKUy1pc29Db250b3VyczogY29tcHV0aW5nIGlzb2NvbnRvdXIgZm9yIFwiICsgdGhyZXNob2xkKTtcblxuICAgIHZhciByZXQgPSBDb250b3VyR3JpZDJQYXRocyhjb21wdXRlQ29udG91ckdyaWQoZGF0YSwgdGhyZXNob2xkKSk7XG5cbiAgICBpZih0eXBlb2Ygc2V0dGluZ3Muc3VjY2Vzc0NhbGxiYWNrID09PSAnZnVuY3Rpb24nKVxuICAgICAgc2V0dGluZ3Muc3VjY2Vzc0NhbGxiYWNrKHJldCk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLypcbiAgICBUaGF0cyBhbGwgZm9yIHRoZSBwdWJsaWMgaW50ZXJmYWNlLCBiZWxvdyBmb2xsb3dzIHRoZSBhY3R1YWxcbiAgICBpbXBsZW1lbnRhdGlvblxuICAqL1xuXG4gIC8qXG4gICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gIElzb2NvbnRvdXIgaW1wbGVtZW50YXRpb24gYmVsb3dcbiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgKi9cblxuICAvKiBhc3N1bWUgdGhhdCB4MSA9PSAxICYmICB4MCA9PSAwICovXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlWCh5LCB5MCwgeTEpe1xuICAgIHJldHVybiAoeSAtIHkwKSAvICh5MSAtIHkwKTtcbiAgfVxuXG4gIC8qIGNvbXB1dGUgdGhlIGlzb2NvbnRvdXIgNC1iaXQgZ3JpZCAqL1xuICBmdW5jdGlvbiBjb21wdXRlQ29udG91ckdyaWQoZGF0YSwgdGhyZXNob2xkKXtcbiAgICB2YXIgcm93cyA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICB2YXIgY29scyA9IGRhdGFbMF0ubGVuZ3RoIC0gMTtcbiAgICB2YXIgQ29udG91ckdyaWQgPSB7IHJvd3M6IHJvd3MsIGNvbHM6IGNvbHMsIGNlbGxzOiBbXSB9O1xuXG4gICAgZm9yKHZhciBqID0gMDsgaiA8IHJvd3M7ICsrail7XG4gICAgICBDb250b3VyR3JpZC5jZWxsc1tqXSA9IFtdO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNvbHM7ICsraSl7XG4gICAgICAgIC8qIGNvbXBvc2UgdGhlIDQtYml0IGNvcm5lciByZXByZXNlbnRhdGlvbiAqL1xuICAgICAgICB2YXIgY3ZhbCA9IDA7XG5cbiAgICAgICAgdmFyIHRsID0gZGF0YVtqKzFdW2ldO1xuICAgICAgICB2YXIgdHIgPSBkYXRhW2orMV1baSsxXTtcbiAgICAgICAgdmFyIGJyID0gZGF0YVtqXVtpKzFdO1xuICAgICAgICB2YXIgYmwgPSBkYXRhW2pdW2ldO1xuXG4gICAgICAgIGlmKGlzTmFOKHRsKSB8fCBpc05hTih0cikgfHwgaXNOYU4oYnIpIHx8IGlzTmFOKGJsKSl7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY3ZhbCB8PSAoKHRsID49IHRocmVzaG9sZCkgPyA4IDogMCk7XG4gICAgICAgIGN2YWwgfD0gKCh0ciA+PSB0aHJlc2hvbGQpID8gNCA6IDApO1xuICAgICAgICBjdmFsIHw9ICgoYnIgPj0gdGhyZXNob2xkKSA/IDIgOiAwKTtcbiAgICAgICAgY3ZhbCB8PSAoKGJsID49IHRocmVzaG9sZCkgPyAxIDogMCk7XG5cbiAgICAgICAgLyogcmVzb2x2ZSBhbWJpZ3VpdHkgZm9yIGN2YWwgPT0gNSB8fCAxMCB2aWEgYXZlcmFnaW5nICovXG4gICAgICAgIHZhciBmbGlwcGVkID0gZmFsc2U7XG4gICAgICAgIGlmKGN2YWwgPT09IDUgfHwgY3ZhbCA9PT0gMTApe1xuICAgICAgICAgIHZhciBhdmVyYWdlID0gKHRsICsgdHIgKyBiciArIGJsKSAvIDQ7XG4gICAgICAgICAgaWYoY3ZhbCA9PT0gNSAmJiAoYXZlcmFnZSA8IHRocmVzaG9sZCkpe1xuICAgICAgICAgICAgY3ZhbCA9IDEwO1xuICAgICAgICAgICAgZmxpcHBlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEwICYmIChhdmVyYWdlIDwgdGhyZXNob2xkKSl7XG4gICAgICAgICAgICBjdmFsID0gNTtcbiAgICAgICAgICAgIGZsaXBwZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGFkZCBjZWxsIHRvIENvbnRvdXJHcmlkIGlmIGl0IGNvbnRhaW5zIGVkZ2VzICovXG4gICAgICAgIGlmKGN2YWwgIT0gMCAmJiBjdmFsICE9IDE1KXtcbiAgICAgICAgICB2YXIgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0O1xuICAgICAgICAgIHRvcCA9IGJvdHRvbSA9IGxlZnQgPSByaWdodCA9IDAuNTtcbiAgICAgICAgICAvKiBpbnRlcnBvbGF0ZSBlZGdlcyBvZiBjZWxsICovXG4gICAgICAgICAgaWYoY3ZhbCA9PT0gMSl7XG4gICAgICAgICAgICBsZWZ0ICAgID0gMSAtIGludGVycG9sYXRlWCh0aHJlc2hvbGQsIHRsLCBibCk7XG4gICAgICAgICAgICBib3R0b20gID0gMSAtIGludGVycG9sYXRlWCh0aHJlc2hvbGQsIGJyLCBibCk7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDIpe1xuICAgICAgICAgICAgYm90dG9tICA9IGludGVycG9sYXRlWCh0aHJlc2hvbGQsIGJsLCBicik7XG4gICAgICAgICAgICByaWdodCAgID0gMSAtIGludGVycG9sYXRlWCh0aHJlc2hvbGQsIHRyLCBicik7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDMpe1xuICAgICAgICAgICAgbGVmdCAgICA9IDEgLSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0bCwgYmwpO1xuICAgICAgICAgICAgcmlnaHQgICA9IDEgLSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0ciwgYnIpO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA0KXtcbiAgICAgICAgICAgIHRvcCAgICAgPSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0bCwgdHIpO1xuICAgICAgICAgICAgcmlnaHQgICA9IGludGVycG9sYXRlWCh0aHJlc2hvbGQsIGJyLCB0cik7XG4gICAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDUpe1xuICAgICAgICAgICAgdG9wICAgICA9IGludGVycG9sYXRlWCh0aHJlc2hvbGQsIHRsLCB0cik7XG4gICAgICAgICAgICByaWdodCAgID0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYnIsIHRyKTtcbiAgICAgICAgICAgIGJvdHRvbSAgPSAxIC0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYnIsIGJsKTtcbiAgICAgICAgICAgIGxlZnQgICAgPSAxIC0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgdGwsIGJsKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gNil7XG4gICAgICAgICAgICBib3R0b20gID0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYmwsIGJyKTtcbiAgICAgICAgICAgIHRvcCAgICAgPSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0bCwgdHIpO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA3KXtcbiAgICAgICAgICAgIGxlZnQgICAgPSAxIC0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgdGwsIGJsKTtcbiAgICAgICAgICAgIHRvcCAgICAgPSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0bCwgdHIpO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA4KXtcbiAgICAgICAgICAgIGxlZnQgICAgPSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCBibCwgdGwpO1xuICAgICAgICAgICAgdG9wICAgICA9IDEgLSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0ciwgdGwpO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSA5KXtcbiAgICAgICAgICAgIGJvdHRvbSAgPSAxIC0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYnIsIGJsKTtcbiAgICAgICAgICAgIHRvcCAgICAgPSAxIC0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgdHIsIHRsKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTApe1xuICAgICAgICAgICAgdG9wICAgICA9IDEgLSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0ciwgdGwpO1xuICAgICAgICAgICAgcmlnaHQgICA9IDEgLSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0ciwgYnIpO1xuICAgICAgICAgICAgYm90dG9tICA9IGludGVycG9sYXRlWCh0aHJlc2hvbGQsIGJsLCBicik7XG4gICAgICAgICAgICBsZWZ0ICAgID0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYmwsIHRsKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTEpe1xuICAgICAgICAgICAgdG9wICAgICA9IDEgLSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0ciwgdGwpO1xuICAgICAgICAgICAgcmlnaHQgICA9IDEgLSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCB0ciwgYnIpO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMil7XG4gICAgICAgICAgICBsZWZ0ICAgID0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYmwsIHRsKTtcbiAgICAgICAgICAgIHJpZ2h0ICAgPSBpbnRlcnBvbGF0ZVgodGhyZXNob2xkLCBiciwgdHIpO1xuICAgICAgICAgIH0gZWxzZSBpZihjdmFsID09PSAxMyl7XG4gICAgICAgICAgICBib3R0b20gID0gMSAtIGludGVycG9sYXRlWCh0aHJlc2hvbGQsIGJyLCBibCk7XG4gICAgICAgICAgICByaWdodCAgID0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYnIsIHRyKTtcbiAgICAgICAgICB9IGVsc2UgaWYoY3ZhbCA9PT0gMTQpe1xuICAgICAgICAgICAgbGVmdCAgICA9IGludGVycG9sYXRlWCh0aHJlc2hvbGQsIGJsLCB0bCk7XG4gICAgICAgICAgICBib3R0b20gID0gaW50ZXJwb2xhdGVYKHRocmVzaG9sZCwgYmwsIGJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJNYXJjaGluZ1NxdWFyZXNKUy1pc29Db250b3VyczogSWxsZWdhbCBjdmFsIGRldGVjdGVkOiBcIiArIGN2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBDb250b3VyR3JpZC5jZWxsc1tqXVtpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3ZhbDogICAgIGN2YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsaXBwZWQ6ICBmbGlwcGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICAgICAgdG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogICAgcmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogICBib3R0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICAgICBsZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gQ29udG91ckdyaWQ7XG4gIH1cblxuICBmdW5jdGlvbiBpc1NhZGRsZShjZWxsKXtcbiAgICByZXR1cm4gY2VsbC5jdmFsID09PSA1IHx8IGNlbGwuY3ZhbCA9PT0gMTA7XG4gIH1cblxuICBmdW5jdGlvbiBpc1RyaXZpYWwoY2VsbCl7XG4gICAgcmV0dXJuIGNlbGwuY3ZhbCA9PT0gMCB8fCBjZWxsLmN2YWwgPT09IDE1O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJDZWxsKGNlbGwpe1xuICAgIGlmKCghaXNUcml2aWFsKGNlbGwpKSAmJiAoY2VsbC5jdmFsICE9PSA1KSAmJiAoY2VsbC5jdmFsICE9PSAxMCkpe1xuICAgICAgY2VsbC5jdmFsID0gMTU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0WFkoY2VsbCwgZWRnZSl7XG4gICAgaWYoZWRnZSA9PT0gXCJ0b3BcIil7XG4gICAgICByZXR1cm4gW2NlbGwudG9wLCAxLjBdO1xuICAgIH0gZWxzZSBpZihlZGdlID09PSBcImJvdHRvbVwiKXtcbiAgICAgIHJldHVybiBbY2VsbC5ib3R0b20sIDAuMF07XG4gICAgfSBlbHNlIGlmKGVkZ2UgPT09IFwicmlnaHRcIil7XG4gICAgICByZXR1cm4gWzEuMCwgY2VsbC5yaWdodF07XG4gICAgfSBlbHNlIGlmKGVkZ2UgPT09IFwibGVmdFwiKXtcbiAgICAgIHJldHVybiBbMC4wLCBjZWxsLmxlZnRdO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRvdXJHcmlkMlBhdGhzKGdyaWQpe1xuICAgIHZhciBwYXRocyA9IFtdO1xuICAgIHZhciBwYXRoX2lkeCA9IDA7XG4gICAgdmFyIHJvd3MgPSBncmlkLnJvd3M7XG4gICAgdmFyIGNvbHMgPSBncmlkLmNvbHM7XG4gICAgdmFyIGVwc2lsb24gPSAxZS03O1xuXG4gICAgZ3JpZC5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGcsIGope1xuICAgICAgZy5mb3JFYWNoKGZ1bmN0aW9uKGdnLCBpKXtcbiAgICAgICAgaWYoKHR5cGVvZiBnZyAhPT0gJ3VuZGVmaW5lZCcpICYmICghaXNTYWRkbGUoZ2cpKSAmJiAoIWlzVHJpdmlhbChnZykpKXtcbiAgICAgICAgICB2YXIgcCA9IHRyYWNlUGF0aChncmlkLmNlbGxzLCBqLCBpKTtcbiAgICAgICAgICB2YXIgbWVyZ2VkID0gZmFsc2U7XG4gICAgICAgICAgLyogd2UgbWF5IHRyeSB0byBtZXJnZSBwYXRocyBhdCB0aGlzIHBvaW50ICovXG4gICAgICAgICAgaWYocC5pbmZvID09PSBcIm1lcmdlYWJsZVwiKXtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgIHNlYXJjaCBiYWNrd2FyZHMgdGhyb3VnaCB0aGUgcGF0aCBhcnJheSB0byBmaW5kIGFuIGVudHJ5XG4gICAgICAgICAgICAgIHRoYXQgc3RhcnRzIHdpdGggd2hlcmUgdGhlIGN1cnJlbnQgcGF0aCBlbmRzLi4uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIHggPSBwLnBhdGhbcC5wYXRoLmxlbmd0aCAtIDFdWzBdLFxuICAgICAgICAgICAgICAgIHkgPSBwLnBhdGhbcC5wYXRoLmxlbmd0aCAtIDFdWzFdO1xuXG4gICAgICAgICAgICBmb3IodmFyIGsgPSBwYXRoX2lkeCAtIDE7IGsgPj0gMDsgay0tKXtcbiAgICAgICAgICAgICAgaWYoKE1hdGguYWJzKHBhdGhzW2tdWzBdWzBdIC0geCkgPD0gZXBzaWxvbikgJiYgKE1hdGguYWJzKHBhdGhzW2tdWzBdWzFdIC0geSkgPD0gZXBzaWxvbikpe1xuICAgICAgICAgICAgICAgIGZvcih2YXIgbCA9IHAucGF0aC5sZW5ndGggLSAyOyBsID49IDA7IC0tbCl7XG4gICAgICAgICAgICAgICAgICBwYXRoc1trXS51bnNoaWZ0KHAucGF0aFtsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lcmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoIW1lcmdlZClcbiAgICAgICAgICAgIHBhdGhzW3BhdGhfaWR4KytdID0gcC5wYXRoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwYXRocztcbiAgfVxuXG4gIC8qXG4gICAgY29uc3RydWN0IGNvbnNlY3V0aXZlIGxpbmUgc2VnbWVudHMgZnJvbSBzdGFydGluZyBjZWxsIGJ5XG4gICAgd2Fsa2luZyBhcnJvdW5kIHRoZSBlbmNsb3NlZCBhcmVhIGNsb2NrLXdpc2VcbiAgICovXG4gIGZ1bmN0aW9uIHRyYWNlUGF0aChncmlkLCBqLCBpKXtcbiAgICB2YXIgbWF4aiA9IGdyaWQubGVuZ3RoO1xuICAgIHZhciBwID0gW107XG4gICAgdmFyIGR4Q29udG91ciA9IFswLCAwLCAxLCAxLCAwLCAwLCAwLCAwLCAtMSwgMCwgMSwgMSwgLTEsIDAsIC0xLCAwXTtcbiAgICB2YXIgZHlDb250b3VyID0gWzAsIC0xLCAwLCAwLCAxLCAxLCAxLCAxLCAwLCAtMSwgMCwgMCwgMCwgLTEsIDAsIDBdO1xuICAgIHZhciBkeCwgZHk7XG4gICAgdmFyIHN0YXJ0RWRnZSA9IFtcIm5vbmVcIiwgXCJsZWZ0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwibm9uZVwiLCBcImJvdHRvbVwiLCBcImxlZnRcIiwgXCJ0b3BcIiwgXCJ0b3BcIiwgXCJub25lXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcIm5vbmVcIl07XG4gICAgdmFyIG5leHRFZGdlICA9IFtcIm5vbmVcIiwgXCJib3R0b21cIiwgXCJyaWdodFwiLCBcInJpZ2h0XCIsIFwidG9wXCIsIFwidG9wXCIsIFwidG9wXCIsIFwidG9wXCIsIFwibGVmdFwiLCBcImJvdHRvbVwiLCBcInJpZ2h0XCIsIFwicmlnaHRcIiwgXCJsZWZ0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcIm5vbmVcIl07XG4gICAgdmFyIGVkZ2U7XG5cbiAgICB2YXIgc3RhcnRDZWxsICAgPSBncmlkW2pdW2ldO1xuICAgIHZhciBjdXJyZW50Q2VsbCA9IGdyaWRbal1baV07XG5cbiAgICB2YXIgY3ZhbCA9IGN1cnJlbnRDZWxsLmN2YWw7XG4gICAgdmFyIGVkZ2UgPSBzdGFydEVkZ2VbY3ZhbF07XG5cbiAgICB2YXIgcHQgPSBnZXRYWShjdXJyZW50Q2VsbCwgZWRnZSk7XG5cbiAgICAvKiBwdXNoIGluaXRpYWwgc2VnbWVudCAqL1xuICAgIHAucHVzaChbaSArIHB0WzBdLCBqICsgcHRbMV1dKTtcbiAgICBlZGdlID0gbmV4dEVkZ2VbY3ZhbF07XG4gICAgcHQgPSBnZXRYWShjdXJyZW50Q2VsbCwgZWRnZSk7XG4gICAgcC5wdXNoKFtpICsgcHRbMF0sIGogKyBwdFsxXV0pO1xuICAgIGNsZWFyQ2VsbChjdXJyZW50Q2VsbCk7XG5cbiAgICAvKiBub3cgd2FsayBhcnJvdW5kIHRoZSBlbmNsb3NlZCBhcmVhIGluIGNsb2Nrd2lzZS1kaXJlY3Rpb24gKi9cbiAgICB2YXIgayA9IGkgKyBkeENvbnRvdXJbY3ZhbF07XG4gICAgdmFyIGwgPSBqICsgZHlDb250b3VyW2N2YWxdO1xuICAgIHZhciBwcmV2X2N2YWwgPSBjdmFsO1xuXG4gICAgd2hpbGUoKGsgPj0gMCkgJiYgKGwgPj0gMCkgJiYgKGwgPCBtYXhqKSAmJiAoKGsgIT0gaSkgfHwgKGwgIT0gaikpKXtcbiAgICAgIGN1cnJlbnRDZWxsID0gZ3JpZFtsXVtrXTtcbiAgICAgIGlmKHR5cGVvZiBjdXJyZW50Q2VsbCA9PT0gJ3VuZGVmaW5lZCcpeyAvKiBwYXRoIGVuZHMgaGVyZSAqL1xuICAgICAgICAvL2NvbnNvbGUubG9nKGsgKyBcIiBcIiArIGwgKyBcIiBpcyB1bmRlZmluZWQsIHN0b3BwaW5nIHBhdGghXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGN2YWwgPSBjdXJyZW50Q2VsbC5jdmFsO1xuICAgICAgaWYoKGN2YWwgPT09IDApIHx8IChjdmFsID09PSAxNSkpe1xuICAgICAgICByZXR1cm4geyBwYXRoOiBwLCBpbmZvOiBcIm1lcmdlYWJsZVwiIH07XG4gICAgICB9XG4gICAgICBlZGdlICA9IG5leHRFZGdlW2N2YWxdO1xuICAgICAgZHggICAgPSBkeENvbnRvdXJbY3ZhbF07XG4gICAgICBkeSAgICA9IGR5Q29udG91cltjdmFsXTtcbiAgICAgIGlmKChjdmFsID09PSA1KSB8fCAoY3ZhbCA9PT0gMTApKXtcbiAgICAgICAgLyogc2VsZWN0IHVwcGVyIG9yIGxvd2VyIGJhbmQsIGRlcGVuZGluZyBvbiBwcmV2aW91cyBjZWxscyBjdmFsICovXG4gICAgICAgIGlmKGN2YWwgPT09IDUpe1xuICAgICAgICAgIGlmKGN1cnJlbnRDZWxsLmZsaXBwZWQpeyAvKiB0aGlzIGlzIGFjdHVhbGx5IGEgZmxpcHBlZCBjYXNlIDEwICovXG4gICAgICAgICAgICBpZihkeUNvbnRvdXJbcHJldl9jdmFsXSA9PT0gLTEpe1xuICAgICAgICAgICAgICBlZGdlICA9IFwibGVmdFwiO1xuICAgICAgICAgICAgICBkeCAgICA9IC0xO1xuICAgICAgICAgICAgICBkeSAgICA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlZGdlICA9IFwicmlnaHRcIjtcbiAgICAgICAgICAgICAgZHggICAgPSAxO1xuICAgICAgICAgICAgICBkeSAgICA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHsgLyogcmVhbCBjYXNlIDUgKi9cbiAgICAgICAgICAgIGlmKGR4Q29udG91cltwcmV2X2N2YWxdID09PSAtMSl7XG4gICAgICAgICAgICAgIGVkZ2UgID0gXCJib3R0b21cIjtcbiAgICAgICAgICAgICAgZHggICAgPSAwO1xuICAgICAgICAgICAgICBkeSAgICA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKGN2YWwgPT09IDEwKXtcbiAgICAgICAgICBpZihjdXJyZW50Q2VsbC5mbGlwcGVkKXsgLyogdGhpcyBpcyBhY3R1YWxseSBhIGZsaXBwZWQgY2FzZSA1ICovXG4gICAgICAgICAgICBpZihkeENvbnRvdXJbcHJldl9jdmFsXSA9PT0gLTEpe1xuICAgICAgICAgICAgICBlZGdlICA9IFwidG9wXCI7XG4gICAgICAgICAgICAgIGR4ICAgID0gMDtcbiAgICAgICAgICAgICAgZHkgICAgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWRnZSAgPSBcImJvdHRvbVwiO1xuICAgICAgICAgICAgICBkeCAgICA9IDA7XG4gICAgICAgICAgICAgIGR5ICAgID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHsgIC8qIHJlYWwgY2FzZSAxMCAqL1xuICAgICAgICAgICAgaWYoZHlDb250b3VyW3ByZXZfY3ZhbF0gPT09IDEpe1xuICAgICAgICAgICAgICBlZGdlICA9IFwibGVmdFwiO1xuICAgICAgICAgICAgICBkeCAgICA9IC0xO1xuICAgICAgICAgICAgICBkeSAgICA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdCA9IGdldFhZKGN1cnJlbnRDZWxsLCBlZGdlKTtcbiAgICAgIHAucHVzaChbayArIHB0WzBdLCBsICsgcHRbMV1dKTtcbiAgICAgIGNsZWFyQ2VsbChjdXJyZW50Q2VsbCk7XG4gICAgICBrICs9IGR4O1xuICAgICAgbCArPSBkeTtcbiAgICAgIHByZXZfY3ZhbCA9IGN2YWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcGF0aDogcCwgaW5mbzogXCJjbG9zZWRcIiB9O1xuICB9XG5cbiAgcmV0dXJuIGlzb0NvbnRvdXJzO1xuXG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9tYXJjaGluZ3NxdWFyZXMvbWFyY2hpbmdzcXVhcmVzLWlzb2NvbnRvdXJzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIGNvbnZleEh1bGwxZCA9IHJlcXVpcmUoJy4vbGliL2NoMWQnKVxudmFyIGNvbnZleEh1bGwyZCA9IHJlcXVpcmUoJy4vbGliL2NoMmQnKVxudmFyIGNvbnZleEh1bGxuZCA9IHJlcXVpcmUoJy4vbGliL2NobmQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZleEh1bGxcblxuZnVuY3Rpb24gY29udmV4SHVsbChwb2ludHMpIHtcbiAgdmFyIG4gPSBwb2ludHMubGVuZ3RoXG4gIGlmKG4gPT09IDApIHtcbiAgICByZXR1cm4gW11cbiAgfSBlbHNlIGlmKG4gPT09IDEpIHtcbiAgICByZXR1cm4gW1swXV1cbiAgfVxuICB2YXIgZCA9IHBvaW50c1swXS5sZW5ndGhcbiAgaWYoZCA9PT0gMCkge1xuICAgIHJldHVybiBbXVxuICB9IGVsc2UgaWYoZCA9PT0gMSkge1xuICAgIHJldHVybiBjb252ZXhIdWxsMWQocG9pbnRzKVxuICB9IGVsc2UgaWYoZCA9PT0gMikge1xuICAgIHJldHVybiBjb252ZXhIdWxsMmQocG9pbnRzKVxuICB9XG4gIHJldHVybiBjb252ZXhIdWxsbmQocG9pbnRzLCBkKVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvbnZleC1odWxsL2NoLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXhIdWxsMWRcblxuZnVuY3Rpb24gY29udmV4SHVsbDFkKHBvaW50cykge1xuICB2YXIgbG8gPSAwXG4gIHZhciBoaSA9IDBcbiAgZm9yKHZhciBpPTE7IGk8cG9pbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYocG9pbnRzW2ldWzBdIDwgcG9pbnRzW2xvXVswXSkge1xuICAgICAgbG8gPSBpXG4gICAgfVxuICAgIGlmKHBvaW50c1tpXVswXSA+IHBvaW50c1toaV1bMF0pIHtcbiAgICAgIGhpID0gaVxuICAgIH1cbiAgfVxuICBpZihsbyA8IGhpKSB7XG4gICAgcmV0dXJuIFtbbG9dLCBbaGldXVxuICB9IGVsc2UgaWYobG8gPiBoaSkge1xuICAgIHJldHVybiBbW2hpXSwgW2xvXV1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW1tsb11dXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb252ZXgtaHVsbC9saWIvY2gxZC5qc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZleEh1bGwyRFxuXG52YXIgbW9ub3RvbmVIdWxsID0gcmVxdWlyZSgnbW9ub3RvbmUtY29udmV4LWh1bGwtMmQnKVxuXG5mdW5jdGlvbiBjb252ZXhIdWxsMkQocG9pbnRzKSB7XG4gIHZhciBodWxsID0gbW9ub3RvbmVIdWxsKHBvaW50cylcbiAgdmFyIGggPSBodWxsLmxlbmd0aFxuICBpZihoIDw9IDIpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICB2YXIgZWRnZXMgPSBuZXcgQXJyYXkoaClcbiAgdmFyIGEgPSBodWxsW2gtMV1cbiAgZm9yKHZhciBpPTA7IGk8aDsgKytpKSB7XG4gICAgdmFyIGIgPSBodWxsW2ldXG4gICAgZWRnZXNbaV0gPSBbYSxiXVxuICAgIGEgPSBiXG4gIH1cbiAgcmV0dXJuIGVkZ2VzXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb252ZXgtaHVsbC9saWIvY2gyZC5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbm90b25lQ29udmV4SHVsbDJEXG5cbnZhciBvcmllbnQgPSByZXF1aXJlKCdyb2J1c3Qtb3JpZW50YXRpb24nKVszXVxuXG5mdW5jdGlvbiBtb25vdG9uZUNvbnZleEh1bGwyRChwb2ludHMpIHtcbiAgdmFyIG4gPSBwb2ludHMubGVuZ3RoXG5cbiAgaWYobiA8IDMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KG4pXG4gICAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgICByZXN1bHRbaV0gPSBpXG4gICAgfVxuXG4gICAgaWYobiA9PT0gMiAmJlxuICAgICAgIHBvaW50c1swXVswXSA9PT0gcG9pbnRzWzFdWzBdICYmXG4gICAgICAgcG9pbnRzWzBdWzFdID09PSBwb2ludHNbMV1bMV0pIHtcbiAgICAgIHJldHVybiBbMF1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvL1NvcnQgcG9pbnQgaW5kaWNlcyBhbG9uZyB4LWF4aXNcbiAgdmFyIHNvcnRlZCA9IG5ldyBBcnJheShuKVxuICBmb3IodmFyIGk9MDsgaTxuOyArK2kpIHtcbiAgICBzb3J0ZWRbaV0gPSBpXG4gIH1cbiAgc29ydGVkLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG4gICAgdmFyIGQgPSBwb2ludHNbYV1bMF0tcG9pbnRzW2JdWzBdXG4gICAgaWYoZCkge1xuICAgICAgcmV0dXJuIGRcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50c1thXVsxXSAtIHBvaW50c1tiXVsxXVxuICB9KVxuXG4gIC8vQ29uc3RydWN0IHVwcGVyIGFuZCBsb3dlciBodWxsc1xuICB2YXIgbG93ZXIgPSBbc29ydGVkWzBdLCBzb3J0ZWRbMV1dXG4gIHZhciB1cHBlciA9IFtzb3J0ZWRbMF0sIHNvcnRlZFsxXV1cblxuICBmb3IodmFyIGk9MjsgaTxuOyArK2kpIHtcbiAgICB2YXIgaWR4ID0gc29ydGVkW2ldXG4gICAgdmFyIHAgICA9IHBvaW50c1tpZHhdXG5cbiAgICAvL0luc2VydCBpbnRvIGxvd2VyIGxpc3RcbiAgICB2YXIgbSA9IGxvd2VyLmxlbmd0aFxuICAgIHdoaWxlKG0gPiAxICYmIG9yaWVudChcbiAgICAgICAgcG9pbnRzW2xvd2VyW20tMl1dLCBcbiAgICAgICAgcG9pbnRzW2xvd2VyW20tMV1dLCBcbiAgICAgICAgcCkgPD0gMCkge1xuICAgICAgbSAtPSAxXG4gICAgICBsb3dlci5wb3AoKVxuICAgIH1cbiAgICBsb3dlci5wdXNoKGlkeClcblxuICAgIC8vSW5zZXJ0IGludG8gdXBwZXIgbGlzdFxuICAgIG0gPSB1cHBlci5sZW5ndGhcbiAgICB3aGlsZShtID4gMSAmJiBvcmllbnQoXG4gICAgICAgIHBvaW50c1t1cHBlclttLTJdXSwgXG4gICAgICAgIHBvaW50c1t1cHBlclttLTFdXSwgXG4gICAgICAgIHApID49IDApIHtcbiAgICAgIG0gLT0gMVxuICAgICAgdXBwZXIucG9wKClcbiAgICB9XG4gICAgdXBwZXIucHVzaChpZHgpXG4gIH1cblxuICAvL01lcmdlIGxpc3RzIHRvZ2V0aGVyXG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkodXBwZXIubGVuZ3RoICsgbG93ZXIubGVuZ3RoIC0gMilcbiAgdmFyIHB0ciAgICA9IDBcbiAgZm9yKHZhciBpPTAsIG5sPWxvd2VyLmxlbmd0aDsgaTxubDsgKytpKSB7XG4gICAgcmVzdWx0W3B0cisrXSA9IGxvd2VyW2ldXG4gIH1cbiAgZm9yKHZhciBqPXVwcGVyLmxlbmd0aC0yOyBqPjA7IC0taikge1xuICAgIHJlc3VsdFtwdHIrK10gPSB1cHBlcltqXVxuICB9XG5cbiAgLy9SZXR1cm4gcmVzdWx0XG4gIHJldHVybiByZXN1bHRcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9tb25vdG9uZS1jb252ZXgtaHVsbC0yZC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gbGluZWFyRXhwYW5zaW9uU3VtXG5cbi8vRWFzeSBjYXNlOiBBZGQgdHdvIHNjYWxhcnNcbmZ1bmN0aW9uIHNjYWxhclNjYWxhcihhLCBiKSB7XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIGF2ID0geCAtIGJ2XG4gIHZhciBiciA9IGIgLSBidlxuICB2YXIgYXIgPSBhIC0gYXZcbiAgdmFyIHkgPSBhciArIGJyXG4gIGlmKHkpIHtcbiAgICByZXR1cm4gW3ksIHhdXG4gIH1cbiAgcmV0dXJuIFt4XVxufVxuXG5mdW5jdGlvbiBsaW5lYXJFeHBhbnNpb25TdW0oZSwgZikge1xuICB2YXIgbmUgPSBlLmxlbmd0aHwwXG4gIHZhciBuZiA9IGYubGVuZ3RofDBcbiAgaWYobmUgPT09IDEgJiYgbmYgPT09IDEpIHtcbiAgICByZXR1cm4gc2NhbGFyU2NhbGFyKGVbMF0sIGZbMF0pXG4gIH1cbiAgdmFyIG4gPSBuZSArIG5mXG4gIHZhciBnID0gbmV3IEFycmF5KG4pXG4gIHZhciBjb3VudCA9IDBcbiAgdmFyIGVwdHIgPSAwXG4gIHZhciBmcHRyID0gMFxuICB2YXIgYWJzID0gTWF0aC5hYnNcbiAgdmFyIGVpID0gZVtlcHRyXVxuICB2YXIgZWEgPSBhYnMoZWkpXG4gIHZhciBmaSA9IGZbZnB0cl1cbiAgdmFyIGZhID0gYWJzKGZpKVxuICB2YXIgYSwgYlxuICBpZihlYSA8IGZhKSB7XG4gICAgYiA9IGVpXG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICAgIGVhID0gYWJzKGVpKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiID0gZmlcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIGlmKChlcHRyIDwgbmUgJiYgZWEgPCBmYSkgfHwgKGZwdHIgPj0gbmYpKSB7XG4gICAgYSA9IGVpXG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICAgIGVhID0gYWJzKGVpKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhID0gZmlcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIHkgPSBiIC0gYnZcbiAgdmFyIHEwID0geVxuICB2YXIgcTEgPSB4XG4gIHZhciBfeCwgX2J2LCBfYXYsIF9iciwgX2FyXG4gIHdoaWxlKGVwdHIgPCBuZSAmJiBmcHRyIDwgbmYpIHtcbiAgICBpZihlYSA8IGZhKSB7XG4gICAgICBhID0gZWlcbiAgICAgIGVwdHIgKz0gMVxuICAgICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgICBlYSA9IGFicyhlaSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGZpXG4gICAgICBmcHRyICs9IDFcbiAgICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgICBmaSA9IGZbZnB0cl1cbiAgICAgICAgZmEgPSBhYnMoZmkpXG4gICAgICB9XG4gICAgfVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9XG4gICAgX3ggPSBxMSArIHhcbiAgICBfYnYgPSBfeCAtIHExXG4gICAgX2F2ID0gX3ggLSBfYnZcbiAgICBfYnIgPSB4IC0gX2J2XG4gICAgX2FyID0gcTEgLSBfYXZcbiAgICBxMCA9IF9hciArIF9iclxuICAgIHExID0gX3hcbiAgfVxuICB3aGlsZShlcHRyIDwgbmUpIHtcbiAgICBhID0gZWlcbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfVxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICB9XG4gIH1cbiAgd2hpbGUoZnB0ciA8IG5mKSB7XG4gICAgYSA9IGZpXG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH0gXG4gICAgX3ggPSBxMSArIHhcbiAgICBfYnYgPSBfeCAtIHExXG4gICAgX2F2ID0gX3ggLSBfYnZcbiAgICBfYnIgPSB4IC0gX2J2XG4gICAgX2FyID0gcTEgLSBfYXZcbiAgICBxMCA9IF9hciArIF9iclxuICAgIHExID0gX3hcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gZltmcHRyXVxuICAgIH1cbiAgfVxuICBpZihxMCkge1xuICAgIGdbY291bnQrK10gPSBxMFxuICB9XG4gIGlmKHExKSB7XG4gICAgZ1tjb3VudCsrXSA9IHExXG4gIH1cbiAgaWYoIWNvdW50KSB7XG4gICAgZ1tjb3VudCsrXSA9IDAuMCAgXG4gIH1cbiAgZy5sZW5ndGggPSBjb3VudFxuICByZXR1cm4gZ1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JvYnVzdC1zdW0vcm9idXN0LXN1bS5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiXG5cbnZhciB0d29Qcm9kdWN0ID0gcmVxdWlyZShcInR3by1wcm9kdWN0XCIpXG52YXIgdHdvU3VtID0gcmVxdWlyZShcInR3by1zdW1cIilcblxubW9kdWxlLmV4cG9ydHMgPSBzY2FsZUxpbmVhckV4cGFuc2lvblxuXG5mdW5jdGlvbiBzY2FsZUxpbmVhckV4cGFuc2lvbihlLCBzY2FsZSkge1xuICB2YXIgbiA9IGUubGVuZ3RoXG4gIGlmKG4gPT09IDEpIHtcbiAgICB2YXIgdHMgPSB0d29Qcm9kdWN0KGVbMF0sIHNjYWxlKVxuICAgIGlmKHRzWzBdKSB7XG4gICAgICByZXR1cm4gdHNcbiAgICB9XG4gICAgcmV0dXJuIFsgdHNbMV0gXVxuICB9XG4gIHZhciBnID0gbmV3IEFycmF5KDIgKiBuKVxuICB2YXIgcSA9IFswLjEsIDAuMV1cbiAgdmFyIHQgPSBbMC4xLCAwLjFdXG4gIHZhciBjb3VudCA9IDBcbiAgdHdvUHJvZHVjdChlWzBdLCBzY2FsZSwgcSlcbiAgaWYocVswXSkge1xuICAgIGdbY291bnQrK10gPSBxWzBdXG4gIH1cbiAgZm9yKHZhciBpPTE7IGk8bjsgKytpKSB7XG4gICAgdHdvUHJvZHVjdChlW2ldLCBzY2FsZSwgdClcbiAgICB2YXIgcHEgPSBxWzFdXG4gICAgdHdvU3VtKHBxLCB0WzBdLCBxKVxuICAgIGlmKHFbMF0pIHtcbiAgICAgIGdbY291bnQrK10gPSBxWzBdXG4gICAgfVxuICAgIHZhciBhID0gdFsxXVxuICAgIHZhciBiID0gcVsxXVxuICAgIHZhciB4ID0gYSArIGJcbiAgICB2YXIgYnYgPSB4IC0gYVxuICAgIHZhciB5ID0gYiAtIGJ2XG4gICAgcVsxXSA9IHhcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgfVxuICBpZihxWzFdKSB7XG4gICAgZ1tjb3VudCsrXSA9IHFbMV1cbiAgfVxuICBpZihjb3VudCA9PT0gMCkge1xuICAgIGdbY291bnQrK10gPSAwLjBcbiAgfVxuICBnLmxlbmd0aCA9IGNvdW50XG4gIHJldHVybiBnXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcm9idXN0LXNjYWxlL3JvYnVzdC1zY2FsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gZmFzdFR3b1N1bVxuXG5mdW5jdGlvbiBmYXN0VHdvU3VtKGEsIGIsIHJlc3VsdCkge1xuXHR2YXIgeCA9IGEgKyBiXG5cdHZhciBidiA9IHggLSBhXG5cdHZhciBhdiA9IHggLSBidlxuXHR2YXIgYnIgPSBiIC0gYnZcblx0dmFyIGFyID0gYSAtIGF2XG5cdGlmKHJlc3VsdCkge1xuXHRcdHJlc3VsdFswXSA9IGFyICsgYnJcblx0XHRyZXN1bHRbMV0gPSB4XG5cdFx0cmV0dXJuIHJlc3VsdFxuXHR9XG5cdHJldHVybiBbYXIrYnIsIHhdXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdvLXN1bS90d28tc3VtLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSByb2J1c3RTdWJ0cmFjdFxuXG4vL0Vhc3kgY2FzZTogQWRkIHR3byBzY2FsYXJzXG5mdW5jdGlvbiBzY2FsYXJTY2FsYXIoYSwgYikge1xuICB2YXIgeCA9IGEgKyBiXG4gIHZhciBidiA9IHggLSBhXG4gIHZhciBhdiA9IHggLSBidlxuICB2YXIgYnIgPSBiIC0gYnZcbiAgdmFyIGFyID0gYSAtIGF2XG4gIHZhciB5ID0gYXIgKyBiclxuICBpZih5KSB7XG4gICAgcmV0dXJuIFt5LCB4XVxuICB9XG4gIHJldHVybiBbeF1cbn1cblxuZnVuY3Rpb24gcm9idXN0U3VidHJhY3QoZSwgZikge1xuICB2YXIgbmUgPSBlLmxlbmd0aHwwXG4gIHZhciBuZiA9IGYubGVuZ3RofDBcbiAgaWYobmUgPT09IDEgJiYgbmYgPT09IDEpIHtcbiAgICByZXR1cm4gc2NhbGFyU2NhbGFyKGVbMF0sIC1mWzBdKVxuICB9XG4gIHZhciBuID0gbmUgKyBuZlxuICB2YXIgZyA9IG5ldyBBcnJheShuKVxuICB2YXIgY291bnQgPSAwXG4gIHZhciBlcHRyID0gMFxuICB2YXIgZnB0ciA9IDBcbiAgdmFyIGFicyA9IE1hdGguYWJzXG4gIHZhciBlaSA9IGVbZXB0cl1cbiAgdmFyIGVhID0gYWJzKGVpKVxuICB2YXIgZmkgPSAtZltmcHRyXVxuICB2YXIgZmEgPSBhYnMoZmkpXG4gIHZhciBhLCBiXG4gIGlmKGVhIDwgZmEpIHtcbiAgICBiID0gZWlcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgZWEgPSBhYnMoZWkpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGIgPSBmaVxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSAtZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIGlmKChlcHRyIDwgbmUgJiYgZWEgPCBmYSkgfHwgKGZwdHIgPj0gbmYpKSB7XG4gICAgYSA9IGVpXG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICAgIGVhID0gYWJzKGVpKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhID0gZmlcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gLWZbZnB0cl1cbiAgICAgIGZhID0gYWJzKGZpKVxuICAgIH1cbiAgfVxuICB2YXIgeCA9IGEgKyBiXG4gIHZhciBidiA9IHggLSBhXG4gIHZhciB5ID0gYiAtIGJ2XG4gIHZhciBxMCA9IHlcbiAgdmFyIHExID0geFxuICB2YXIgX3gsIF9idiwgX2F2LCBfYnIsIF9hclxuICB3aGlsZShlcHRyIDwgbmUgJiYgZnB0ciA8IG5mKSB7XG4gICAgaWYoZWEgPCBmYSkge1xuICAgICAgYSA9IGVpXG4gICAgICBlcHRyICs9IDFcbiAgICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgICBlaSA9IGVbZXB0cl1cbiAgICAgICAgZWEgPSBhYnMoZWkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBmaVxuICAgICAgZnB0ciArPSAxXG4gICAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgICAgZmkgPSAtZltmcHRyXVxuICAgICAgICBmYSA9IGFicyhmaSlcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICB9XG4gIHdoaWxlKGVwdHIgPCBuZSkge1xuICAgIGEgPSBlaVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9XG4gICAgX3ggPSBxMSArIHhcbiAgICBfYnYgPSBfeCAtIHExXG4gICAgX2F2ID0gX3ggLSBfYnZcbiAgICBfYnIgPSB4IC0gX2J2XG4gICAgX2FyID0gcTEgLSBfYXZcbiAgICBxMCA9IF9hciArIF9iclxuICAgIHExID0gX3hcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgIH1cbiAgfVxuICB3aGlsZShmcHRyIDwgbmYpIHtcbiAgICBhID0gZmlcbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfSBcbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSAtZltmcHRyXVxuICAgIH1cbiAgfVxuICBpZihxMCkge1xuICAgIGdbY291bnQrK10gPSBxMFxuICB9XG4gIGlmKHExKSB7XG4gICAgZ1tjb3VudCsrXSA9IHExXG4gIH1cbiAgaWYoIWNvdW50KSB7XG4gICAgZ1tjb3VudCsrXSA9IDAuMCAgXG4gIH1cbiAgZy5sZW5ndGggPSBjb3VudFxuICByZXR1cm4gZ1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JvYnVzdC1zdWJ0cmFjdC9yb2J1c3QtZGlmZi5qc1xuLy8gbW9kdWxlIGlkID0gMTIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZleEh1bGxuRFxuXG52YXIgaWNoID0gcmVxdWlyZSgnaW5jcmVtZW50YWwtY29udmV4LWh1bGwnKVxudmFyIGFmZiA9IHJlcXVpcmUoJ2FmZmluZS1odWxsJylcblxuZnVuY3Rpb24gcGVybXV0ZShwb2ludHMsIGZyb250KSB7XG4gIHZhciBuID0gcG9pbnRzLmxlbmd0aFxuICB2YXIgbnBvaW50cyA9IG5ldyBBcnJheShuKVxuICBmb3IodmFyIGk9MDsgaTxmcm9udC5sZW5ndGg7ICsraSkge1xuICAgIG5wb2ludHNbaV0gPSBwb2ludHNbZnJvbnRbaV1dXG4gIH1cbiAgdmFyIHB0ciA9IGZyb250Lmxlbmd0aFxuICBmb3IodmFyIGk9MDsgaTxuOyArK2kpIHtcbiAgICBpZihmcm9udC5pbmRleE9mKGkpIDwgMCkge1xuICAgICAgbnBvaW50c1twdHIrK10gPSBwb2ludHNbaV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5wb2ludHNcbn1cblxuZnVuY3Rpb24gaW52UGVybXV0ZShjZWxscywgZnJvbnQpIHtcbiAgdmFyIG5jID0gY2VsbHMubGVuZ3RoXG4gIHZhciBuZiA9IGZyb250Lmxlbmd0aFxuICBmb3IodmFyIGk9MDsgaTxuYzsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgIGZvcih2YXIgaj0wOyBqPGMubGVuZ3RoOyArK2opIHtcbiAgICAgIHZhciB4ID0gY1tqXVxuICAgICAgaWYoeCA8IG5mKSB7XG4gICAgICAgIGNbal0gPSBmcm9udFt4XVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHggLSBuZlxuICAgICAgICBmb3IodmFyIGs9MDsgazxuZjsgKytrKSB7XG4gICAgICAgICAgaWYoeCA+PSBmcm9udFtrXSkge1xuICAgICAgICAgICAgeCArPSAxXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNbal0gPSB4XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjZWxsc1xufVxuXG5mdW5jdGlvbiBjb252ZXhIdWxsbkQocG9pbnRzLCBkKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGljaChwb2ludHMsIHRydWUpXG4gIH0gY2F0Y2goZSkge1xuICAgIC8vSWYgcG9pbnQgc2V0IGlzIGRlZ2VuZXJhdGUsIHRyeSB0byBmaW5kIGEgYmFzaXMgYW5kIHJlcnVuIGl0XG4gICAgdmFyIGFoID0gYWZmKHBvaW50cylcbiAgICBpZihhaC5sZW5ndGggPD0gZCkge1xuICAgICAgLy9ObyBiYXNpcywgbm8gdHJ5XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgdmFyIG5wb2ludHMgPSBwZXJtdXRlKHBvaW50cywgYWgpXG4gICAgdmFyIG5odWxsICAgPSBpY2gobnBvaW50cywgdHJ1ZSlcbiAgICByZXR1cm4gaW52UGVybXV0ZShuaHVsbCwgYWgpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb252ZXgtaHVsbC9saWIvY2huZC5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiXG5cbi8vSGlnaCBsZXZlbCBpZGVhOlxuLy8gMS4gVXNlIENsYXJrc29uJ3MgaW5jcmVtZW50YWwgY29uc3RydWN0aW9uIHRvIGZpbmQgY29udmV4IGh1bGxcbi8vIDIuIFBvaW50IGxvY2F0aW9uIGluIHRyaWFuZ3VsYXRpb24gYnkganVtcCBhbmQgd2Fsa1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluY3JlbWVudGFsQ29udmV4SHVsbFxuXG52YXIgb3JpZW50ID0gcmVxdWlyZShcInJvYnVzdC1vcmllbnRhdGlvblwiKVxudmFyIGNvbXBhcmVDZWxsID0gcmVxdWlyZShcInNpbXBsaWNpYWwtY29tcGxleFwiKS5jb21wYXJlQ2VsbHNcblxuZnVuY3Rpb24gY29tcGFyZUludChhLCBiKSB7XG4gIHJldHVybiBhIC0gYlxufVxuXG5mdW5jdGlvbiBTaW1wbGV4KHZlcnRpY2VzLCBhZGphY2VudCwgYm91bmRhcnkpIHtcbiAgdGhpcy52ZXJ0aWNlcyA9IHZlcnRpY2VzXG4gIHRoaXMuYWRqYWNlbnQgPSBhZGphY2VudFxuICB0aGlzLmJvdW5kYXJ5ID0gYm91bmRhcnlcbiAgdGhpcy5sYXN0VmlzaXRlZCA9IC0xXG59XG5cblNpbXBsZXgucHJvdG90eXBlLmZsaXAgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSB0aGlzLnZlcnRpY2VzWzBdXG4gIHRoaXMudmVydGljZXNbMF0gPSB0aGlzLnZlcnRpY2VzWzFdXG4gIHRoaXMudmVydGljZXNbMV0gPSB0XG4gIHZhciB1ID0gdGhpcy5hZGphY2VudFswXVxuICB0aGlzLmFkamFjZW50WzBdID0gdGhpcy5hZGphY2VudFsxXVxuICB0aGlzLmFkamFjZW50WzFdID0gdVxufVxuXG5mdW5jdGlvbiBHbHVlRmFjZXQodmVydGljZXMsIGNlbGwsIGluZGV4KSB7XG4gIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlc1xuICB0aGlzLmNlbGwgPSBjZWxsXG4gIHRoaXMuaW5kZXggPSBpbmRleFxufVxuXG5mdW5jdGlvbiBjb21wYXJlR2x1ZShhLCBiKSB7XG4gIHJldHVybiBjb21wYXJlQ2VsbChhLnZlcnRpY2VzLCBiLnZlcnRpY2VzKVxufVxuXG5mdW5jdGlvbiBiYWtlT3JpZW50KGQpIHtcbiAgdmFyIGNvZGUgPSBbXCJmdW5jdGlvbiBvcmllbnQoKXt2YXIgdHVwbGU9dGhpcy50dXBsZTtyZXR1cm4gdGVzdChcIl1cbiAgZm9yKHZhciBpPTA7IGk8PWQ7ICsraSkge1xuICAgIGlmKGkgPiAwKSB7XG4gICAgICBjb2RlLnB1c2goXCIsXCIpXG4gICAgfVxuICAgIGNvZGUucHVzaChcInR1cGxlW1wiLCBpLCBcIl1cIilcbiAgfVxuICBjb2RlLnB1c2goXCIpfXJldHVybiBvcmllbnRcIilcbiAgdmFyIHByb2MgPSBuZXcgRnVuY3Rpb24oXCJ0ZXN0XCIsIGNvZGUuam9pbihcIlwiKSlcbiAgdmFyIHRlc3QgPSBvcmllbnRbZCsxXVxuICBpZighdGVzdCkge1xuICAgIHRlc3QgPSBvcmllbnRcbiAgfVxuICByZXR1cm4gcHJvYyh0ZXN0KVxufVxuXG52YXIgQkFLRUQgPSBbXVxuXG5mdW5jdGlvbiBUcmlhbmd1bGF0aW9uKGRpbWVuc2lvbiwgdmVydGljZXMsIHNpbXBsaWNlcykge1xuICB0aGlzLmRpbWVuc2lvbiA9IGRpbWVuc2lvblxuICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXNcbiAgdGhpcy5zaW1wbGljZXMgPSBzaW1wbGljZXNcbiAgdGhpcy5pbnRlcmlvciA9IHNpbXBsaWNlcy5maWx0ZXIoZnVuY3Rpb24oYykge1xuICAgIHJldHVybiAhYy5ib3VuZGFyeVxuICB9KVxuXG4gIHRoaXMudHVwbGUgPSBuZXcgQXJyYXkoZGltZW5zaW9uKzEpXG4gIGZvcih2YXIgaT0wOyBpPD1kaW1lbnNpb247ICsraSkge1xuICAgIHRoaXMudHVwbGVbaV0gPSB0aGlzLnZlcnRpY2VzW2ldXG4gIH1cblxuICB2YXIgbyA9IEJBS0VEW2RpbWVuc2lvbl1cbiAgaWYoIW8pIHtcbiAgICBvID0gQkFLRURbZGltZW5zaW9uXSA9IGJha2VPcmllbnQoZGltZW5zaW9uKVxuICB9XG4gIHRoaXMub3JpZW50ID0gb1xufVxuXG52YXIgcHJvdG8gPSBUcmlhbmd1bGF0aW9uLnByb3RvdHlwZVxuXG4vL0RlZ2VuZXJhdGUgc2l0dWF0aW9uIHdoZXJlIHdlIGFyZSBvbiBib3VuZGFyeSwgYnV0IGNvcGxhbmFyIHRvIGZhY2VcbnByb3RvLmhhbmRsZUJvdW5kYXJ5RGVnZW5lcmFjeSA9IGZ1bmN0aW9uKGNlbGwsIHBvaW50KSB7XG4gIHZhciBkID0gdGhpcy5kaW1lbnNpb25cbiAgdmFyIG4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCAtIDFcbiAgdmFyIHR1cGxlID0gdGhpcy50dXBsZVxuICB2YXIgdmVydHMgPSB0aGlzLnZlcnRpY2VzXG5cbiAgLy9EdW1iIHNvbHV0aW9uOiBKdXN0IGRvIGRmcyBmcm9tIGJvdW5kYXJ5IGNlbGwgdW50aWwgd2UgZmluZCBhbnkgcGVhaywgb3IgdGVybWluYXRlXG4gIHZhciB0b1Zpc2l0ID0gWyBjZWxsIF1cbiAgY2VsbC5sYXN0VmlzaXRlZCA9IC1uXG4gIHdoaWxlKHRvVmlzaXQubGVuZ3RoID4gMCkge1xuICAgIGNlbGwgPSB0b1Zpc2l0LnBvcCgpXG4gICAgdmFyIGNlbGxWZXJ0cyA9IGNlbGwudmVydGljZXNcbiAgICB2YXIgY2VsbEFkaiA9IGNlbGwuYWRqYWNlbnRcbiAgICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgICB2YXIgbmVpZ2hib3IgPSBjZWxsQWRqW2ldXG4gICAgICBpZighbmVpZ2hib3IuYm91bmRhcnkgfHwgbmVpZ2hib3IubGFzdFZpc2l0ZWQgPD0gLW4pIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIHZhciBudiA9IG5laWdoYm9yLnZlcnRpY2VzXG4gICAgICBmb3IodmFyIGo9MDsgajw9ZDsgKytqKSB7XG4gICAgICAgIHZhciB2diA9IG52W2pdXG4gICAgICAgIGlmKHZ2IDwgMCkge1xuICAgICAgICAgIHR1cGxlW2pdID0gcG9pbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0dXBsZVtqXSA9IHZlcnRzW3Z2XVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbyA9IHRoaXMub3JpZW50KClcbiAgICAgIGlmKG8gPiAwKSB7XG4gICAgICAgIHJldHVybiBuZWlnaGJvclxuICAgICAgfVxuICAgICAgbmVpZ2hib3IubGFzdFZpc2l0ZWQgPSAtblxuICAgICAgaWYobyA9PT0gMCkge1xuICAgICAgICB0b1Zpc2l0LnB1c2gobmVpZ2hib3IpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbnByb3RvLndhbGsgPSBmdW5jdGlvbihwb2ludCwgcmFuZG9tKSB7XG4gIC8vQWxpYXMgbG9jYWwgcHJvcGVydGllc1xuICB2YXIgbiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMVxuICB2YXIgZCA9IHRoaXMuZGltZW5zaW9uXG4gIHZhciB2ZXJ0cyA9IHRoaXMudmVydGljZXNcbiAgdmFyIHR1cGxlID0gdGhpcy50dXBsZVxuXG4gIC8vQ29tcHV0ZSBpbml0aWFsIGp1bXAgY2VsbFxuICB2YXIgaW5pdEluZGV4ID0gcmFuZG9tID8gKHRoaXMuaW50ZXJpb3IubGVuZ3RoICogTWF0aC5yYW5kb20oKSl8MCA6ICh0aGlzLmludGVyaW9yLmxlbmd0aC0xKVxuICB2YXIgY2VsbCA9IHRoaXMuaW50ZXJpb3JbIGluaXRJbmRleCBdXG5cbiAgLy9TdGFydCB3YWxraW5nXG5vdXRlckxvb3A6XG4gIHdoaWxlKCFjZWxsLmJvdW5kYXJ5KSB7XG4gICAgdmFyIGNlbGxWZXJ0cyA9IGNlbGwudmVydGljZXNcbiAgICB2YXIgY2VsbEFkaiA9IGNlbGwuYWRqYWNlbnRcblxuICAgIGZvcih2YXIgaT0wOyBpPD1kOyArK2kpIHtcbiAgICAgIHR1cGxlW2ldID0gdmVydHNbY2VsbFZlcnRzW2ldXVxuICAgIH1cbiAgICBjZWxsLmxhc3RWaXNpdGVkID0gblxuXG4gICAgLy9GaW5kIGZhcnRoZXN0IGFkamFjZW50IGNlbGxcbiAgICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgICB2YXIgbmVpZ2hib3IgPSBjZWxsQWRqW2ldXG4gICAgICBpZihuZWlnaGJvci5sYXN0VmlzaXRlZCA+PSBuKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICB2YXIgcHJldiA9IHR1cGxlW2ldXG4gICAgICB0dXBsZVtpXSA9IHBvaW50XG4gICAgICB2YXIgbyA9IHRoaXMub3JpZW50KClcbiAgICAgIHR1cGxlW2ldID0gcHJldlxuICAgICAgaWYobyA8IDApIHtcbiAgICAgICAgY2VsbCA9IG5laWdoYm9yXG4gICAgICAgIGNvbnRpbnVlIG91dGVyTG9vcFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYoIW5laWdoYm9yLmJvdW5kYXJ5KSB7XG4gICAgICAgICAgbmVpZ2hib3IubGFzdFZpc2l0ZWQgPSBuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmVpZ2hib3IubGFzdFZpc2l0ZWQgPSAtblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgcmV0dXJuIGNlbGxcbn1cblxucHJvdG8uYWRkUGVha3MgPSBmdW5jdGlvbihwb2ludCwgY2VsbCkge1xuICB2YXIgbiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMVxuICB2YXIgZCA9IHRoaXMuZGltZW5zaW9uXG4gIHZhciB2ZXJ0cyA9IHRoaXMudmVydGljZXNcbiAgdmFyIHR1cGxlID0gdGhpcy50dXBsZVxuICB2YXIgaW50ZXJpb3IgPSB0aGlzLmludGVyaW9yXG4gIHZhciBzaW1wbGljZXMgPSB0aGlzLnNpbXBsaWNlc1xuXG4gIC8vV2Fsa2luZyBmaW5pc2hlZCBhdCBib3VuZGFyeSwgdGltZSB0byBhZGQgcGVha3NcbiAgdmFyIHRvdmlzaXQgPSBbIGNlbGwgXVxuXG4gIC8vU3RyZXRjaCBpbml0aWFsIGJvdW5kYXJ5IGNlbGwgaW50byBhIHBlYWtcbiAgY2VsbC5sYXN0VmlzaXRlZCA9IG5cbiAgY2VsbC52ZXJ0aWNlc1tjZWxsLnZlcnRpY2VzLmluZGV4T2YoLTEpXSA9IG5cbiAgY2VsbC5ib3VuZGFyeSA9IGZhbHNlXG4gIGludGVyaW9yLnB1c2goY2VsbClcblxuICAvL1JlY29yZCBhIGxpc3Qgb2YgYWxsIG5ldyBib3VuZGFyaWVzIGNyZWF0ZWQgYnkgYWRkZWQgcGVha3Mgc28gd2UgY2FuIGdsdWUgdGhlbSB0b2dldGhlciB3aGVuIHdlIGFyZSBhbGwgZG9uZVxuICB2YXIgZ2x1ZUZhY2V0cyA9IFtdXG5cbiAgLy9EbyBhIHRyYXZlcnNhbCBvZiB0aGUgYm91bmRhcnkgd2Fsa2luZyBvdXR3YXJkIGZyb20gc3RhcnRpbmcgcGVha1xuICB3aGlsZSh0b3Zpc2l0Lmxlbmd0aCA+IDApIHtcbiAgICAvL1BvcCBvZmYgcGVhayBhbmQgd2FsayBvdmVyIGFkamFjZW50IGNlbGxzXG4gICAgdmFyIGNlbGwgPSB0b3Zpc2l0LnBvcCgpXG4gICAgdmFyIGNlbGxWZXJ0cyA9IGNlbGwudmVydGljZXNcbiAgICB2YXIgY2VsbEFkaiA9IGNlbGwuYWRqYWNlbnRcbiAgICB2YXIgaW5kZXhPZk4gPSBjZWxsVmVydHMuaW5kZXhPZihuKVxuICAgIGlmKGluZGV4T2ZOIDwgMCkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBmb3IodmFyIGk9MDsgaTw9ZDsgKytpKSB7XG4gICAgICBpZihpID09PSBpbmRleE9mTikge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvL0ZvciBlYWNoIGJvdW5kYXJ5IG5laWdoYm9yIG9mIHRoZSBjZWxsXG4gICAgICB2YXIgbmVpZ2hib3IgPSBjZWxsQWRqW2ldXG4gICAgICBpZighbmVpZ2hib3IuYm91bmRhcnkgfHwgbmVpZ2hib3IubGFzdFZpc2l0ZWQgPj0gbikge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgbnYgPSBuZWlnaGJvci52ZXJ0aWNlc1xuXG4gICAgICAvL1Rlc3QgaWYgbmVpZ2hib3IgaXMgYSBwZWFrXG4gICAgICBpZihuZWlnaGJvci5sYXN0VmlzaXRlZCAhPT0gLW4pIHsgICAgICBcbiAgICAgICAgLy9Db21wdXRlIG9yaWVudGF0aW9uIG9mIHAgcmVsYXRpdmUgdG8gZWFjaCBib3VuZGFyeSBwZWFrXG4gICAgICAgIHZhciBpbmRleE9mTmVnMSA9IDBcbiAgICAgICAgZm9yKHZhciBqPTA7IGo8PWQ7ICsraikge1xuICAgICAgICAgIGlmKG52W2pdIDwgMCkge1xuICAgICAgICAgICAgaW5kZXhPZk5lZzEgPSBqXG4gICAgICAgICAgICB0dXBsZVtqXSA9IHBvaW50XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR1cGxlW2pdID0gdmVydHNbbnZbal1dXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBvID0gdGhpcy5vcmllbnQoKVxuXG4gICAgICAgIC8vVGVzdCBpZiBuZWlnaGJvciBjZWxsIGlzIGFsc28gYSBwZWFrXG4gICAgICAgIGlmKG8gPiAwKSB7XG4gICAgICAgICAgbnZbaW5kZXhPZk5lZzFdID0gblxuICAgICAgICAgIG5laWdoYm9yLmJvdW5kYXJ5ID0gZmFsc2VcbiAgICAgICAgICBpbnRlcmlvci5wdXNoKG5laWdoYm9yKVxuICAgICAgICAgIHRvdmlzaXQucHVzaChuZWlnaGJvcilcbiAgICAgICAgICBuZWlnaGJvci5sYXN0VmlzaXRlZCA9IG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5laWdoYm9yLmxhc3RWaXNpdGVkID0gLW5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgbmEgPSBuZWlnaGJvci5hZGphY2VudFxuXG4gICAgICAvL090aGVyd2lzZSwgcmVwbGFjZSBuZWlnaGJvciB3aXRoIG5ldyBmYWNlXG4gICAgICB2YXIgdnZlcnRzID0gY2VsbFZlcnRzLnNsaWNlKClcbiAgICAgIHZhciB2YWRqID0gY2VsbEFkai5zbGljZSgpXG4gICAgICB2YXIgbmNlbGwgPSBuZXcgU2ltcGxleCh2dmVydHMsIHZhZGosIHRydWUpXG4gICAgICBzaW1wbGljZXMucHVzaChuY2VsbClcblxuICAgICAgLy9Db25uZWN0IHRvIG5laWdoYm9yXG4gICAgICB2YXIgb3Bwb3NpdGUgPSBuYS5pbmRleE9mKGNlbGwpXG4gICAgICBpZihvcHBvc2l0ZSA8IDApIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIG5hW29wcG9zaXRlXSA9IG5jZWxsXG4gICAgICB2YWRqW2luZGV4T2ZOXSA9IG5laWdoYm9yXG5cbiAgICAgIC8vQ29ubmVjdCB0byBjZWxsXG4gICAgICB2dmVydHNbaV0gPSAtMVxuICAgICAgdmFkaltpXSA9IGNlbGxcbiAgICAgIGNlbGxBZGpbaV0gPSBuY2VsbFxuXG4gICAgICAvL0ZsaXAgZmFjZXRcbiAgICAgIG5jZWxsLmZsaXAoKVxuXG4gICAgICAvL0FkZCB0byBnbHVlIGxpc3RcbiAgICAgIGZvcih2YXIgaj0wOyBqPD1kOyArK2opIHtcbiAgICAgICAgdmFyIHV1ID0gdnZlcnRzW2pdXG4gICAgICAgIGlmKHV1IDwgMCB8fCB1dSA9PT0gbikge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5mYWNlID0gbmV3IEFycmF5KGQtMSlcbiAgICAgICAgdmFyIG5wdHIgPSAwXG4gICAgICAgIGZvcih2YXIgaz0wOyBrPD1kOyArK2spIHtcbiAgICAgICAgICB2YXIgdnYgPSB2dmVydHNba11cbiAgICAgICAgICBpZih2diA8IDAgfHwgayA9PT0gaikge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgbmZhY2VbbnB0cisrXSA9IHZ2XG4gICAgICAgIH1cbiAgICAgICAgZ2x1ZUZhY2V0cy5wdXNoKG5ldyBHbHVlRmFjZXQobmZhY2UsIG5jZWxsLCBqKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL0dsdWUgYm91bmRhcnkgZmFjZXRzIHRvZ2V0aGVyXG4gIGdsdWVGYWNldHMuc29ydChjb21wYXJlR2x1ZSlcblxuICBmb3IodmFyIGk9MDsgaSsxPGdsdWVGYWNldHMubGVuZ3RoOyBpKz0yKSB7XG4gICAgdmFyIGEgPSBnbHVlRmFjZXRzW2ldXG4gICAgdmFyIGIgPSBnbHVlRmFjZXRzW2krMV1cbiAgICB2YXIgYWkgPSBhLmluZGV4XG4gICAgdmFyIGJpID0gYi5pbmRleFxuICAgIGlmKGFpIDwgMCB8fCBiaSA8IDApIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGEuY2VsbC5hZGphY2VudFthLmluZGV4XSA9IGIuY2VsbFxuICAgIGIuY2VsbC5hZGphY2VudFtiLmluZGV4XSA9IGEuY2VsbFxuICB9XG59XG5cbnByb3RvLmluc2VydCA9IGZ1bmN0aW9uKHBvaW50LCByYW5kb20pIHtcbiAgLy9BZGQgcG9pbnRcbiAgdmFyIHZlcnRzID0gdGhpcy52ZXJ0aWNlc1xuICB2ZXJ0cy5wdXNoKHBvaW50KVxuXG4gIHZhciBjZWxsID0gdGhpcy53YWxrKHBvaW50LCByYW5kb20pXG4gIGlmKCFjZWxsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvL0FsaWFzIGxvY2FsIHByb3BlcnRpZXNcbiAgdmFyIGQgPSB0aGlzLmRpbWVuc2lvblxuICB2YXIgdHVwbGUgPSB0aGlzLnR1cGxlXG5cbiAgLy9EZWdlbmVyYXRlIGNhc2U6IElmIHBvaW50IGlzIGNvcGxhbmFyIHRvIGNlbGwsIHRoZW4gd2FsayB1bnRpbCB3ZSBmaW5kIGEgbm9uLWRlZ2VuZXJhdGUgYm91bmRhcnlcbiAgZm9yKHZhciBpPTA7IGk8PWQ7ICsraSkge1xuICAgIHZhciB2diA9IGNlbGwudmVydGljZXNbaV1cbiAgICBpZih2diA8IDApIHtcbiAgICAgIHR1cGxlW2ldID0gcG9pbnRcbiAgICB9IGVsc2Uge1xuICAgICAgdHVwbGVbaV0gPSB2ZXJ0c1t2dl1cbiAgICB9XG4gIH1cbiAgdmFyIG8gPSB0aGlzLm9yaWVudCh0dXBsZSlcbiAgaWYobyA8IDApIHtcbiAgICByZXR1cm5cbiAgfSBlbHNlIGlmKG8gPT09IDApIHtcbiAgICBjZWxsID0gdGhpcy5oYW5kbGVCb3VuZGFyeURlZ2VuZXJhY3koY2VsbCwgcG9pbnQpXG4gICAgaWYoIWNlbGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuXG4gIC8vQWRkIHBlYWtzXG4gIHRoaXMuYWRkUGVha3MocG9pbnQsIGNlbGwpXG59XG5cbi8vRXh0cmFjdCBhbGwgYm91bmRhcnkgY2VsbHNcbnByb3RvLmJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkID0gdGhpcy5kaW1lbnNpb25cbiAgdmFyIGJvdW5kYXJ5ID0gW11cbiAgdmFyIGNlbGxzID0gdGhpcy5zaW1wbGljZXNcbiAgdmFyIG5jID0gY2VsbHMubGVuZ3RoXG4gIGZvcih2YXIgaT0wOyBpPG5jOyArK2kpIHtcbiAgICB2YXIgYyA9IGNlbGxzW2ldXG4gICAgaWYoYy5ib3VuZGFyeSkge1xuICAgICAgdmFyIGJjZWxsID0gbmV3IEFycmF5KGQpXG4gICAgICB2YXIgY3YgPSBjLnZlcnRpY2VzXG4gICAgICB2YXIgcHRyID0gMFxuICAgICAgdmFyIHBhcml0eSA9IDBcbiAgICAgIGZvcih2YXIgaj0wOyBqPD1kOyArK2opIHtcbiAgICAgICAgaWYoY3Zbal0gPj0gMCkge1xuICAgICAgICAgIGJjZWxsW3B0cisrXSA9IGN2W2pdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyaXR5ID0gaiYxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKHBhcml0eSA9PT0gKGQmMSkpIHtcbiAgICAgICAgdmFyIHQgPSBiY2VsbFswXVxuICAgICAgICBiY2VsbFswXSA9IGJjZWxsWzFdXG4gICAgICAgIGJjZWxsWzFdID0gdFxuICAgICAgfVxuICAgICAgYm91bmRhcnkucHVzaChiY2VsbClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kYXJ5XG59XG5cbmZ1bmN0aW9uIGluY3JlbWVudGFsQ29udmV4SHVsbChwb2ludHMsIHJhbmRvbVNlYXJjaCkge1xuICB2YXIgbiA9IHBvaW50cy5sZW5ndGhcbiAgaWYobiA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgaGF2ZSBhdCBsZWFzdCBkKzEgcG9pbnRzXCIpXG4gIH1cbiAgdmFyIGQgPSBwb2ludHNbMF0ubGVuZ3RoXG4gIGlmKG4gPD0gZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgaW5wdXQgYXQgbGVhc3QgZCsxIHBvaW50c1wiKVxuICB9XG5cbiAgLy9GSVhNRTogVGhpcyBjb3VsZCBiZSBkZWdlbmVyYXRlLCBidXQgbmVlZCB0byBzZWxlY3QgZCsxIG5vbi1jb3BsYW5hciBwb2ludHMgdG8gYm9vdHN0cmFwIHByb2Nlc3NcbiAgdmFyIGluaXRpYWxTaW1wbGV4ID0gcG9pbnRzLnNsaWNlKDAsIGQrMSlcblxuICAvL01ha2Ugc3VyZSBpbml0aWFsIHNpbXBsZXggaXMgcG9zaXRpdmVseSBvcmllbnRlZFxuICB2YXIgbyA9IG9yaWVudC5hcHBseSh2b2lkIDAsIGluaXRpYWxTaW1wbGV4KVxuICBpZihvID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgbm90IGluIGdlbmVyYWwgcG9zaXRpb25cIilcbiAgfVxuICB2YXIgaW5pdGlhbENvb3JkcyA9IG5ldyBBcnJheShkKzEpXG4gIGZvcih2YXIgaT0wOyBpPD1kOyArK2kpIHtcbiAgICBpbml0aWFsQ29vcmRzW2ldID0gaVxuICB9XG4gIGlmKG8gPCAwKSB7XG4gICAgaW5pdGlhbENvb3Jkc1swXSA9IDFcbiAgICBpbml0aWFsQ29vcmRzWzFdID0gMFxuICB9XG5cbiAgLy9DcmVhdGUgaW5pdGlhbCB0b3BvbG9naWNhbCBpbmRleCwgZ2x1ZSBwb2ludGVycyB0b2dldGhlciAoa2luZCBvZiBtZXNzeSlcbiAgdmFyIGluaXRpYWxDZWxsID0gbmV3IFNpbXBsZXgoaW5pdGlhbENvb3JkcywgbmV3IEFycmF5KGQrMSksIGZhbHNlKVxuICB2YXIgYm91bmRhcnkgPSBpbml0aWFsQ2VsbC5hZGphY2VudFxuICB2YXIgbGlzdCA9IG5ldyBBcnJheShkKzIpXG4gIGZvcih2YXIgaT0wOyBpPD1kOyArK2kpIHtcbiAgICB2YXIgdmVydHMgPSBpbml0aWFsQ29vcmRzLnNsaWNlKClcbiAgICBmb3IodmFyIGo9MDsgajw9ZDsgKytqKSB7XG4gICAgICBpZihqID09PSBpKSB7XG4gICAgICAgIHZlcnRzW2pdID0gLTFcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHQgPSB2ZXJ0c1swXVxuICAgIHZlcnRzWzBdID0gdmVydHNbMV1cbiAgICB2ZXJ0c1sxXSA9IHRcbiAgICB2YXIgY2VsbCA9IG5ldyBTaW1wbGV4KHZlcnRzLCBuZXcgQXJyYXkoZCsxKSwgdHJ1ZSlcbiAgICBib3VuZGFyeVtpXSA9IGNlbGxcbiAgICBsaXN0W2ldID0gY2VsbFxuICB9XG4gIGxpc3RbZCsxXSA9IGluaXRpYWxDZWxsXG4gIGZvcih2YXIgaT0wOyBpPD1kOyArK2kpIHtcbiAgICB2YXIgdmVydHMgPSBib3VuZGFyeVtpXS52ZXJ0aWNlc1xuICAgIHZhciBhZGogPSBib3VuZGFyeVtpXS5hZGphY2VudFxuICAgIGZvcih2YXIgaj0wOyBqPD1kOyArK2opIHtcbiAgICAgIHZhciB2ID0gdmVydHNbal1cbiAgICAgIGlmKHYgPCAwKSB7XG4gICAgICAgIGFkaltqXSA9IGluaXRpYWxDZWxsXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBmb3IodmFyIGs9MDsgazw9ZDsgKytrKSB7XG4gICAgICAgIGlmKGJvdW5kYXJ5W2tdLnZlcnRpY2VzLmluZGV4T2YodikgPCAwKSB7XG4gICAgICAgICAgYWRqW2pdID0gYm91bmRhcnlba11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vSW5pdGlhbGl6ZSB0cmlhbmdsZXNcbiAgdmFyIHRyaWFuZ2xlcyA9IG5ldyBUcmlhbmd1bGF0aW9uKGQsIGluaXRpYWxTaW1wbGV4LCBsaXN0KVxuXG4gIC8vSW5zZXJ0IHJlbWFpbmluZyBwb2ludHNcbiAgdmFyIHVzZVJhbmRvbSA9ICEhcmFuZG9tU2VhcmNoXG4gIGZvcih2YXIgaT1kKzE7IGk8bjsgKytpKSB7XG4gICAgdHJpYW5nbGVzLmluc2VydChwb2ludHNbaV0sIHVzZVJhbmRvbSlcbiAgfVxuICBcbiAgLy9FeHRyYWN0IGJvdW5kYXJ5IGNlbGxzXG4gIHJldHVybiB0cmlhbmdsZXMuYm91bmRhcnkoKVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2luY3JlbWVudGFsLWNvbnZleC1odWxsL2ljaC5qc1xuLy8gbW9kdWxlIGlkID0gMTIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiOyBcInVzZSByZXN0cmljdFwiO1xuXG52YXIgYml0cyAgICAgID0gcmVxdWlyZShcImJpdC10d2lkZGxlXCIpXG4gICwgVW5pb25GaW5kID0gcmVxdWlyZShcInVuaW9uLWZpbmRcIilcblxuLy9SZXR1cm5zIHRoZSBkaW1lbnNpb24gb2YgYSBjZWxsIGNvbXBsZXhcbmZ1bmN0aW9uIGRpbWVuc2lvbihjZWxscykge1xuICB2YXIgZCA9IDBcbiAgICAsIG1heCA9IE1hdGgubWF4XG4gIGZvcih2YXIgaT0wLCBpbD1jZWxscy5sZW5ndGg7IGk8aWw7ICsraSkge1xuICAgIGQgPSBtYXgoZCwgY2VsbHNbaV0ubGVuZ3RoKVxuICB9XG4gIHJldHVybiBkLTFcbn1cbmV4cG9ydHMuZGltZW5zaW9uID0gZGltZW5zaW9uXG5cbi8vQ291bnRzIHRoZSBudW1iZXIgb2YgdmVydGljZXMgaW4gZmFjZXNcbmZ1bmN0aW9uIGNvdW50VmVydGljZXMoY2VsbHMpIHtcbiAgdmFyIHZjID0gLTFcbiAgICAsIG1heCA9IE1hdGgubWF4XG4gIGZvcih2YXIgaT0wLCBpbD1jZWxscy5sZW5ndGg7IGk8aWw7ICsraSkge1xuICAgIHZhciBjID0gY2VsbHNbaV1cbiAgICBmb3IodmFyIGo9MCwgamw9Yy5sZW5ndGg7IGo8amw7ICsraikge1xuICAgICAgdmMgPSBtYXgodmMsIGNbal0pXG4gICAgfVxuICB9XG4gIHJldHVybiB2YysxXG59XG5leHBvcnRzLmNvdW50VmVydGljZXMgPSBjb3VudFZlcnRpY2VzXG5cbi8vUmV0dXJucyBhIGRlZXAgY29weSBvZiBjZWxsc1xuZnVuY3Rpb24gY2xvbmVDZWxscyhjZWxscykge1xuICB2YXIgbmNlbGxzID0gbmV3IEFycmF5KGNlbGxzLmxlbmd0aClcbiAgZm9yKHZhciBpPTAsIGlsPWNlbGxzLmxlbmd0aDsgaTxpbDsgKytpKSB7XG4gICAgbmNlbGxzW2ldID0gY2VsbHNbaV0uc2xpY2UoMClcbiAgfVxuICByZXR1cm4gbmNlbGxzXG59XG5leHBvcnRzLmNsb25lQ2VsbHMgPSBjbG9uZUNlbGxzXG5cbi8vUmFua3MgYSBwYWlyIG9mIGNlbGxzIHVwIHRvIHBlcm11dGF0aW9uXG5mdW5jdGlvbiBjb21wYXJlQ2VsbHMoYSwgYikge1xuICB2YXIgbiA9IGEubGVuZ3RoXG4gICAgLCB0ID0gYS5sZW5ndGggLSBiLmxlbmd0aFxuICAgICwgbWluID0gTWF0aC5taW5cbiAgaWYodCkge1xuICAgIHJldHVybiB0XG4gIH1cbiAgc3dpdGNoKG4pIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIGQgPSBhWzBdK2FbMV0tYlswXS1iWzFdXG4gICAgICBpZihkKSB7XG4gICAgICAgIHJldHVybiBkXG4gICAgICB9XG4gICAgICByZXR1cm4gbWluKGFbMF0sYVsxXSkgLSBtaW4oYlswXSxiWzFdKVxuICAgIGNhc2UgMzpcbiAgICAgIHZhciBsMSA9IGFbMF0rYVsxXVxuICAgICAgICAsIG0xID0gYlswXStiWzFdXG4gICAgICBkID0gbDErYVsyXSAtIChtMStiWzJdKVxuICAgICAgaWYoZCkge1xuICAgICAgICByZXR1cm4gZFxuICAgICAgfVxuICAgICAgdmFyIGwwID0gbWluKGFbMF0sIGFbMV0pXG4gICAgICAgICwgbTAgPSBtaW4oYlswXSwgYlsxXSlcbiAgICAgICAgLCBkICA9IG1pbihsMCwgYVsyXSkgLSBtaW4obTAsIGJbMl0pXG4gICAgICBpZihkKSB7XG4gICAgICAgIHJldHVybiBkXG4gICAgICB9XG4gICAgICByZXR1cm4gbWluKGwwK2FbMl0sIGwxKSAtIG1pbihtMCtiWzJdLCBtMSlcbiAgICBcbiAgICAvL1RPRE86IE1heWJlIG9wdGltaXplIG49NCBhcyB3ZWxsP1xuICAgIFxuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgYXMgPSBhLnNsaWNlKDApXG4gICAgICBhcy5zb3J0KClcbiAgICAgIHZhciBicyA9IGIuc2xpY2UoMClcbiAgICAgIGJzLnNvcnQoKVxuICAgICAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgICAgIHQgPSBhc1tpXSAtIGJzW2ldXG4gICAgICAgIGlmKHQpIHtcbiAgICAgICAgICByZXR1cm4gdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMFxuICB9XG59XG5leHBvcnRzLmNvbXBhcmVDZWxscyA9IGNvbXBhcmVDZWxsc1xuXG5mdW5jdGlvbiBjb21wYXJlWmlwcGVkKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVDZWxscyhhWzBdLCBiWzBdKVxufVxuXG4vL1B1dHMgYSBjZWxsIGNvbXBsZXggaW50byBub3JtYWwgb3JkZXIgZm9yIHRoZSBwdXJwb3NlcyBvZiBmaW5kQ2VsbCBxdWVyaWVzXG5mdW5jdGlvbiBub3JtYWxpemUoY2VsbHMsIGF0dHIpIHtcbiAgaWYoYXR0cikge1xuICAgIHZhciBsZW4gPSBjZWxscy5sZW5ndGhcbiAgICB2YXIgemlwcGVkID0gbmV3IEFycmF5KGxlbilcbiAgICBmb3IodmFyIGk9MDsgaTxsZW47ICsraSkge1xuICAgICAgemlwcGVkW2ldID0gW2NlbGxzW2ldLCBhdHRyW2ldXVxuICAgIH1cbiAgICB6aXBwZWQuc29ydChjb21wYXJlWmlwcGVkKVxuICAgIGZvcih2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgICBjZWxsc1tpXSA9IHppcHBlZFtpXVswXVxuICAgICAgYXR0cltpXSA9IHppcHBlZFtpXVsxXVxuICAgIH1cbiAgICByZXR1cm4gY2VsbHNcbiAgfSBlbHNlIHtcbiAgICBjZWxscy5zb3J0KGNvbXBhcmVDZWxscylcbiAgICByZXR1cm4gY2VsbHNcbiAgfVxufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemVcblxuLy9SZW1vdmVzIGFsbCBkdXBsaWNhdGUgY2VsbHMgaW4gdGhlIGNvbXBsZXhcbmZ1bmN0aW9uIHVuaXF1ZShjZWxscykge1xuICBpZihjZWxscy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICB2YXIgcHRyID0gMVxuICAgICwgbGVuID0gY2VsbHMubGVuZ3RoXG4gIGZvcih2YXIgaT0xOyBpPGxlbjsgKytpKSB7XG4gICAgdmFyIGEgPSBjZWxsc1tpXVxuICAgIGlmKGNvbXBhcmVDZWxscyhhLCBjZWxsc1tpLTFdKSkge1xuICAgICAgaWYoaSA9PT0gcHRyKSB7XG4gICAgICAgIHB0cisrXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBjZWxsc1twdHIrK10gPSBhXG4gICAgfVxuICB9XG4gIGNlbGxzLmxlbmd0aCA9IHB0clxuICByZXR1cm4gY2VsbHNcbn1cbmV4cG9ydHMudW5pcXVlID0gdW5pcXVlO1xuXG4vL0ZpbmRzIGEgY2VsbCBpbiBhIG5vcm1hbGl6ZWQgY2VsbCBjb21wbGV4XG5mdW5jdGlvbiBmaW5kQ2VsbChjZWxscywgYykge1xuICB2YXIgbG8gPSAwXG4gICAgLCBoaSA9IGNlbGxzLmxlbmd0aC0xXG4gICAgLCByICA9IC0xXG4gIHdoaWxlIChsbyA8PSBoaSkge1xuICAgIHZhciBtaWQgPSAobG8gKyBoaSkgPj4gMVxuICAgICAgLCBzICAgPSBjb21wYXJlQ2VsbHMoY2VsbHNbbWlkXSwgYylcbiAgICBpZihzIDw9IDApIHtcbiAgICAgIGlmKHMgPT09IDApIHtcbiAgICAgICAgciA9IG1pZFxuICAgICAgfVxuICAgICAgbG8gPSBtaWQgKyAxXG4gICAgfSBlbHNlIGlmKHMgPiAwKSB7XG4gICAgICBoaSA9IG1pZCAtIDFcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJcbn1cbmV4cG9ydHMuZmluZENlbGwgPSBmaW5kQ2VsbDtcblxuLy9CdWlsZHMgYW4gaW5kZXggZm9yIGFuIG4tY2VsbC4gIFRoaXMgaXMgbW9yZSBnZW5lcmFsIHRoYW4gZHVhbCwgYnV0IGxlc3MgZWZmaWNpZW50XG5mdW5jdGlvbiBpbmNpZGVuY2UoZnJvbV9jZWxscywgdG9fY2VsbHMpIHtcbiAgdmFyIGluZGV4ID0gbmV3IEFycmF5KGZyb21fY2VsbHMubGVuZ3RoKVxuICBmb3IodmFyIGk9MCwgaWw9aW5kZXgubGVuZ3RoOyBpPGlsOyArK2kpIHtcbiAgICBpbmRleFtpXSA9IFtdXG4gIH1cbiAgdmFyIGIgPSBbXVxuICBmb3IodmFyIGk9MCwgbj10b19jZWxscy5sZW5ndGg7IGk8bjsgKytpKSB7XG4gICAgdmFyIGMgPSB0b19jZWxsc1tpXVxuICAgIHZhciBjbCA9IGMubGVuZ3RoXG4gICAgZm9yKHZhciBrPTEsIGtuPSgxPDxjbCk7IGs8a247ICsraykge1xuICAgICAgYi5sZW5ndGggPSBiaXRzLnBvcENvdW50KGspXG4gICAgICB2YXIgbCA9IDBcbiAgICAgIGZvcih2YXIgaj0wOyBqPGNsOyArK2opIHtcbiAgICAgICAgaWYoayAmICgxPDxqKSkge1xuICAgICAgICAgIGJbbCsrXSA9IGNbal1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGlkeD1maW5kQ2VsbChmcm9tX2NlbGxzLCBiKVxuICAgICAgaWYoaWR4IDwgMCkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICBpbmRleFtpZHgrK10ucHVzaChpKVxuICAgICAgICBpZihpZHggPj0gZnJvbV9jZWxscy5sZW5ndGggfHwgY29tcGFyZUNlbGxzKGZyb21fY2VsbHNbaWR4XSwgYikgIT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmRleFxufVxuZXhwb3J0cy5pbmNpZGVuY2UgPSBpbmNpZGVuY2VcblxuLy9Db21wdXRlcyB0aGUgZHVhbCBvZiB0aGUgbWVzaC4gIFRoaXMgaXMgYmFzaWNhbGx5IGFuIG9wdGltaXplZCB2ZXJzaW9uIG9mIGJ1aWxkSW5kZXggZm9yIHRoZSBzaXR1YXRpb24gd2hlcmUgZnJvbV9jZWxscyBpcyBqdXN0IHRoZSBsaXN0IG9mIHZlcnRpY2VzXG5mdW5jdGlvbiBkdWFsKGNlbGxzLCB2ZXJ0ZXhfY291bnQpIHtcbiAgaWYoIXZlcnRleF9jb3VudCkge1xuICAgIHJldHVybiBpbmNpZGVuY2UodW5pcXVlKHNrZWxldG9uKGNlbGxzLCAwKSksIGNlbGxzLCAwKVxuICB9XG4gIHZhciByZXMgPSBuZXcgQXJyYXkodmVydGV4X2NvdW50KVxuICBmb3IodmFyIGk9MDsgaTx2ZXJ0ZXhfY291bnQ7ICsraSkge1xuICAgIHJlc1tpXSA9IFtdXG4gIH1cbiAgZm9yKHZhciBpPTAsIGxlbj1jZWxscy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICB2YXIgYyA9IGNlbGxzW2ldXG4gICAgZm9yKHZhciBqPTAsIGNsPWMubGVuZ3RoOyBqPGNsOyArK2opIHtcbiAgICAgIHJlc1tjW2pdXS5wdXNoKGkpXG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cbmV4cG9ydHMuZHVhbCA9IGR1YWxcblxuLy9FbnVtZXJhdGVzIGFsbCBjZWxscyBpbiB0aGUgY29tcGxleFxuZnVuY3Rpb24gZXhwbG9kZShjZWxscykge1xuICB2YXIgcmVzdWx0ID0gW11cbiAgZm9yKHZhciBpPTAsIGlsPWNlbGxzLmxlbmd0aDsgaTxpbDsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgICAgLCBjbCA9IGMubGVuZ3RofDBcbiAgICBmb3IodmFyIGo9MSwgamw9KDE8PGNsKTsgajxqbDsgKytqKSB7XG4gICAgICB2YXIgYiA9IFtdXG4gICAgICBmb3IodmFyIGs9MDsgazxjbDsgKytrKSB7XG4gICAgICAgIGlmKChqID4+PiBrKSAmIDEpIHtcbiAgICAgICAgICBiLnB1c2goY1trXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2goYilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZShyZXN1bHQpXG59XG5leHBvcnRzLmV4cGxvZGUgPSBleHBsb2RlXG5cbi8vRW51bWVyYXRlcyBhbGwgb2YgdGhlIG4tY2VsbHMgb2YgYSBjZWxsIGNvbXBsZXhcbmZ1bmN0aW9uIHNrZWxldG9uKGNlbGxzLCBuKSB7XG4gIGlmKG4gPCAwKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdXG4gICAgLCBrMCAgICAgPSAoMTw8KG4rMSkpLTFcbiAgZm9yKHZhciBpPTA7IGk8Y2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYyA9IGNlbGxzW2ldXG4gICAgZm9yKHZhciBrPWswOyBrPCgxPDxjLmxlbmd0aCk7IGs9Yml0cy5uZXh0Q29tYmluYXRpb24oaykpIHtcbiAgICAgIHZhciBiID0gbmV3IEFycmF5KG4rMSlcbiAgICAgICAgLCBsID0gMFxuICAgICAgZm9yKHZhciBqPTA7IGo8Yy5sZW5ndGg7ICsraikge1xuICAgICAgICBpZihrICYgKDE8PGopKSB7XG4gICAgICAgICAgYltsKytdID0gY1tqXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaChiKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbm9ybWFsaXplKHJlc3VsdClcbn1cbmV4cG9ydHMuc2tlbGV0b24gPSBza2VsZXRvbjtcblxuLy9Db21wdXRlcyB0aGUgYm91bmRhcnkgb2YgYWxsIGNlbGxzLCBkb2VzIG5vdCByZW1vdmUgZHVwbGljYXRlc1xuZnVuY3Rpb24gYm91bmRhcnkoY2VsbHMpIHtcbiAgdmFyIHJlcyA9IFtdXG4gIGZvcih2YXIgaT0wLGlsPWNlbGxzLmxlbmd0aDsgaTxpbDsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgIGZvcih2YXIgaj0wLGNsPWMubGVuZ3RoOyBqPGNsOyArK2opIHtcbiAgICAgIHZhciBiID0gbmV3IEFycmF5KGMubGVuZ3RoLTEpXG4gICAgICBmb3IodmFyIGs9MCwgbD0wOyBrPGNsOyArK2spIHtcbiAgICAgICAgaWYoayAhPT0gaikge1xuICAgICAgICAgIGJbbCsrXSA9IGNba11cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzLnB1c2goYilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZShyZXMpXG59XG5leHBvcnRzLmJvdW5kYXJ5ID0gYm91bmRhcnk7XG5cbi8vQ29tcHV0ZXMgY29ubmVjdGVkIGNvbXBvbmVudHMgZm9yIGEgZGVuc2UgY2VsbCBjb21wbGV4XG5mdW5jdGlvbiBjb25uZWN0ZWRDb21wb25lbnRzX2RlbnNlKGNlbGxzLCB2ZXJ0ZXhfY291bnQpIHtcbiAgdmFyIGxhYmVscyA9IG5ldyBVbmlvbkZpbmQodmVydGV4X2NvdW50KVxuICBmb3IodmFyIGk9MDsgaTxjZWxscy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjID0gY2VsbHNbaV1cbiAgICBmb3IodmFyIGo9MDsgajxjLmxlbmd0aDsgKytqKSB7XG4gICAgICBmb3IodmFyIGs9aisxOyBrPGMubGVuZ3RoOyArK2spIHtcbiAgICAgICAgbGFiZWxzLmxpbmsoY1tqXSwgY1trXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIGNvbXBvbmVudHMgPSBbXVxuICAgICwgY29tcG9uZW50X2xhYmVscyA9IGxhYmVscy5yYW5rc1xuICBmb3IodmFyIGk9MDsgaTxjb21wb25lbnRfbGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgY29tcG9uZW50X2xhYmVsc1tpXSA9IC0xXG4gIH1cbiAgZm9yKHZhciBpPTA7IGk8Y2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgbCA9IGxhYmVscy5maW5kKGNlbGxzW2ldWzBdKVxuICAgIGlmKGNvbXBvbmVudF9sYWJlbHNbbF0gPCAwKSB7XG4gICAgICBjb21wb25lbnRfbGFiZWxzW2xdID0gY29tcG9uZW50cy5sZW5ndGhcbiAgICAgIGNvbXBvbmVudHMucHVzaChbY2VsbHNbaV0uc2xpY2UoMCldKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnRzW2NvbXBvbmVudF9sYWJlbHNbbF1dLnB1c2goY2VsbHNbaV0uc2xpY2UoMCkpXG4gICAgfVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbi8vQ29tcHV0ZXMgY29ubmVjdGVkIGNvbXBvbmVudHMgZm9yIGEgc3BhcnNlIGdyYXBoXG5mdW5jdGlvbiBjb25uZWN0ZWRDb21wb25lbnRzX3NwYXJzZShjZWxscykge1xuICB2YXIgdmVydGljZXMgID0gdW5pcXVlKG5vcm1hbGl6ZShza2VsZXRvbihjZWxscywgMCkpKVxuICAgICwgbGFiZWxzICAgID0gbmV3IFVuaW9uRmluZCh2ZXJ0aWNlcy5sZW5ndGgpXG4gIGZvcih2YXIgaT0wOyBpPGNlbGxzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGMgPSBjZWxsc1tpXVxuICAgIGZvcih2YXIgaj0wOyBqPGMubGVuZ3RoOyArK2opIHtcbiAgICAgIHZhciB2aiA9IGZpbmRDZWxsKHZlcnRpY2VzLCBbY1tqXV0pXG4gICAgICBmb3IodmFyIGs9aisxOyBrPGMubGVuZ3RoOyArK2spIHtcbiAgICAgICAgbGFiZWxzLmxpbmsodmosIGZpbmRDZWxsKHZlcnRpY2VzLCBbY1trXV0pKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgY29tcG9uZW50cyAgICAgICAgPSBbXVxuICAgICwgY29tcG9uZW50X2xhYmVscyAgPSBsYWJlbHMucmFua3NcbiAgZm9yKHZhciBpPTA7IGk8Y29tcG9uZW50X2xhYmVscy5sZW5ndGg7ICsraSkge1xuICAgIGNvbXBvbmVudF9sYWJlbHNbaV0gPSAtMVxuICB9XG4gIGZvcih2YXIgaT0wOyBpPGNlbGxzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGwgPSBsYWJlbHMuZmluZChmaW5kQ2VsbCh2ZXJ0aWNlcywgW2NlbGxzW2ldWzBdXSkpO1xuICAgIGlmKGNvbXBvbmVudF9sYWJlbHNbbF0gPCAwKSB7XG4gICAgICBjb21wb25lbnRfbGFiZWxzW2xdID0gY29tcG9uZW50cy5sZW5ndGhcbiAgICAgIGNvbXBvbmVudHMucHVzaChbY2VsbHNbaV0uc2xpY2UoMCldKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnRzW2NvbXBvbmVudF9sYWJlbHNbbF1dLnB1c2goY2VsbHNbaV0uc2xpY2UoMCkpXG4gICAgfVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbi8vQ29tcHV0ZXMgY29ubmVjdGVkIGNvbXBvbmVudHMgZm9yIGEgY2VsbCBjb21wbGV4XG5mdW5jdGlvbiBjb25uZWN0ZWRDb21wb25lbnRzKGNlbGxzLCB2ZXJ0ZXhfY291bnQpIHtcbiAgaWYodmVydGV4X2NvdW50KSB7XG4gICAgcmV0dXJuIGNvbm5lY3RlZENvbXBvbmVudHNfZGVuc2UoY2VsbHMsIHZlcnRleF9jb3VudClcbiAgfVxuICByZXR1cm4gY29ubmVjdGVkQ29tcG9uZW50c19zcGFyc2UoY2VsbHMpXG59XG5leHBvcnRzLmNvbm5lY3RlZENvbXBvbmVudHMgPSBjb25uZWN0ZWRDb21wb25lbnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zaW1wbGljaWFsLWNvbXBsZXgvdG9wb2xvZ3kuanNcbi8vIG1vZHVsZSBpZCA9IDEyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIEJpdCB0d2lkZGxpbmcgaGFja3MgZm9yIEphdmFTY3JpcHQuXG4gKlxuICogQXV0aG9yOiBNaWtvbGEgTHlzZW5rb1xuICpcbiAqIFBvcnRlZCBmcm9tIFN0YW5mb3JkIGJpdCB0d2lkZGxpbmcgaGFjayBsaWJyYXJ5OlxuICogICAgaHR0cDovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9+c2VhbmRlci9iaXRoYWNrcy5odG1sXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7IFwidXNlIHJlc3RyaWN0XCI7XG5cbi8vTnVtYmVyIG9mIGJpdHMgaW4gYW4gaW50ZWdlclxudmFyIElOVF9CSVRTID0gMzI7XG5cbi8vQ29uc3RhbnRzXG5leHBvcnRzLklOVF9CSVRTICA9IElOVF9CSVRTO1xuZXhwb3J0cy5JTlRfTUFYICAgPSAgMHg3ZmZmZmZmZjtcbmV4cG9ydHMuSU5UX01JTiAgID0gLTE8PChJTlRfQklUUy0xKTtcblxuLy9SZXR1cm5zIC0xLCAwLCArMSBkZXBlbmRpbmcgb24gc2lnbiBvZiB4XG5leHBvcnRzLnNpZ24gPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiAodiA+IDApIC0gKHYgPCAwKTtcbn1cblxuLy9Db21wdXRlcyBhYnNvbHV0ZSB2YWx1ZSBvZiBpbnRlZ2VyXG5leHBvcnRzLmFicyA9IGZ1bmN0aW9uKHYpIHtcbiAgdmFyIG1hc2sgPSB2ID4+IChJTlRfQklUUy0xKTtcbiAgcmV0dXJuICh2IF4gbWFzaykgLSBtYXNrO1xufVxuXG4vL0NvbXB1dGVzIG1pbmltdW0gb2YgaW50ZWdlcnMgeCBhbmQgeVxuZXhwb3J0cy5taW4gPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiB5IF4gKCh4IF4geSkgJiAtKHggPCB5KSk7XG59XG5cbi8vQ29tcHV0ZXMgbWF4aW11bSBvZiBpbnRlZ2VycyB4IGFuZCB5XG5leHBvcnRzLm1heCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIHggXiAoKHggXiB5KSAmIC0oeCA8IHkpKTtcbn1cblxuLy9DaGVja3MgaWYgYSBudW1iZXIgaXMgYSBwb3dlciBvZiB0d29cbmV4cG9ydHMuaXNQb3cyID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gISh2ICYgKHYtMSkpICYmICghIXYpO1xufVxuXG4vL0NvbXB1dGVzIGxvZyBiYXNlIDIgb2YgdlxuZXhwb3J0cy5sb2cyID0gZnVuY3Rpb24odikge1xuICB2YXIgciwgc2hpZnQ7XG4gIHIgPSAgICAgKHYgPiAweEZGRkYpIDw8IDQ7IHYgPj4+PSByO1xuICBzaGlmdCA9ICh2ID4gMHhGRiAgKSA8PCAzOyB2ID4+Pj0gc2hpZnQ7IHIgfD0gc2hpZnQ7XG4gIHNoaWZ0ID0gKHYgPiAweEYgICApIDw8IDI7IHYgPj4+PSBzaGlmdDsgciB8PSBzaGlmdDtcbiAgc2hpZnQgPSAodiA+IDB4MyAgICkgPDwgMTsgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xuICByZXR1cm4gciB8ICh2ID4+IDEpO1xufVxuXG4vL0NvbXB1dGVzIGxvZyBiYXNlIDEwIG9mIHZcbmV4cG9ydHMubG9nMTAgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiAgKHYgPj0gMTAwMDAwMDAwMCkgPyA5IDogKHYgPj0gMTAwMDAwMDAwKSA/IDggOiAodiA+PSAxMDAwMDAwMCkgPyA3IDpcbiAgICAgICAgICAodiA+PSAxMDAwMDAwKSA/IDYgOiAodiA+PSAxMDAwMDApID8gNSA6ICh2ID49IDEwMDAwKSA/IDQgOlxuICAgICAgICAgICh2ID49IDEwMDApID8gMyA6ICh2ID49IDEwMCkgPyAyIDogKHYgPj0gMTApID8gMSA6IDA7XG59XG5cbi8vQ291bnRzIG51bWJlciBvZiBiaXRzXG5leHBvcnRzLnBvcENvdW50ID0gZnVuY3Rpb24odikge1xuICB2ID0gdiAtICgodiA+Pj4gMSkgJiAweDU1NTU1NTU1KTtcbiAgdiA9ICh2ICYgMHgzMzMzMzMzMykgKyAoKHYgPj4+IDIpICYgMHgzMzMzMzMzMyk7XG4gIHJldHVybiAoKHYgKyAodiA+Pj4gNCkgJiAweEYwRjBGMEYpICogMHgxMDEwMTAxKSA+Pj4gMjQ7XG59XG5cbi8vQ291bnRzIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvc1xuZnVuY3Rpb24gY291bnRUcmFpbGluZ1plcm9zKHYpIHtcbiAgdmFyIGMgPSAzMjtcbiAgdiAmPSAtdjtcbiAgaWYgKHYpIGMtLTtcbiAgaWYgKHYgJiAweDAwMDBGRkZGKSBjIC09IDE2O1xuICBpZiAodiAmIDB4MDBGRjAwRkYpIGMgLT0gODtcbiAgaWYgKHYgJiAweDBGMEYwRjBGKSBjIC09IDQ7XG4gIGlmICh2ICYgMHgzMzMzMzMzMykgYyAtPSAyO1xuICBpZiAodiAmIDB4NTU1NTU1NTUpIGMgLT0gMTtcbiAgcmV0dXJuIGM7XG59XG5leHBvcnRzLmNvdW50VHJhaWxpbmdaZXJvcyA9IGNvdW50VHJhaWxpbmdaZXJvcztcblxuLy9Sb3VuZHMgdG8gbmV4dCBwb3dlciBvZiAyXG5leHBvcnRzLm5leHRQb3cyID0gZnVuY3Rpb24odikge1xuICB2ICs9IHYgPT09IDA7XG4gIC0tdjtcbiAgdiB8PSB2ID4+PiAxO1xuICB2IHw9IHYgPj4+IDI7XG4gIHYgfD0gdiA+Pj4gNDtcbiAgdiB8PSB2ID4+PiA4O1xuICB2IHw9IHYgPj4+IDE2O1xuICByZXR1cm4gdiArIDE7XG59XG5cbi8vUm91bmRzIGRvd24gdG8gcHJldmlvdXMgcG93ZXIgb2YgMlxuZXhwb3J0cy5wcmV2UG93MiA9IGZ1bmN0aW9uKHYpIHtcbiAgdiB8PSB2ID4+PiAxO1xuICB2IHw9IHYgPj4+IDI7XG4gIHYgfD0gdiA+Pj4gNDtcbiAgdiB8PSB2ID4+PiA4O1xuICB2IHw9IHYgPj4+IDE2O1xuICByZXR1cm4gdiAtICh2Pj4+MSk7XG59XG5cbi8vQ29tcHV0ZXMgcGFyaXR5IG9mIHdvcmRcbmV4cG9ydHMucGFyaXR5ID0gZnVuY3Rpb24odikge1xuICB2IF49IHYgPj4+IDE2O1xuICB2IF49IHYgPj4+IDg7XG4gIHYgXj0gdiA+Pj4gNDtcbiAgdiAmPSAweGY7XG4gIHJldHVybiAoMHg2OTk2ID4+PiB2KSAmIDE7XG59XG5cbnZhciBSRVZFUlNFX1RBQkxFID0gbmV3IEFycmF5KDI1Nik7XG5cbihmdW5jdGlvbih0YWIpIHtcbiAgZm9yKHZhciBpPTA7IGk8MjU2OyArK2kpIHtcbiAgICB2YXIgdiA9IGksIHIgPSBpLCBzID0gNztcbiAgICBmb3IgKHYgPj4+PSAxOyB2OyB2ID4+Pj0gMSkge1xuICAgICAgciA8PD0gMTtcbiAgICAgIHIgfD0gdiAmIDE7XG4gICAgICAtLXM7XG4gICAgfVxuICAgIHRhYltpXSA9IChyIDw8IHMpICYgMHhmZjtcbiAgfVxufSkoUkVWRVJTRV9UQUJMRSk7XG5cbi8vUmV2ZXJzZSBiaXRzIGluIGEgMzIgYml0IHdvcmRcbmV4cG9ydHMucmV2ZXJzZSA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuICAoUkVWRVJTRV9UQUJMRVsgdiAgICAgICAgICYgMHhmZl0gPDwgMjQpIHxcbiAgICAgICAgICAoUkVWRVJTRV9UQUJMRVsodiA+Pj4gOCkgICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgICAoUkVWRVJTRV9UQUJMRVsodiA+Pj4gMTYpICYgMHhmZl0gPDwgOCkgIHxcbiAgICAgICAgICAgUkVWRVJTRV9UQUJMRVsodiA+Pj4gMjQpICYgMHhmZl07XG59XG5cbi8vSW50ZXJsZWF2ZSBiaXRzIG9mIDIgY29vcmRpbmF0ZXMgd2l0aCAxNiBiaXRzLiAgVXNlZnVsIGZvciBmYXN0IHF1YWR0cmVlIGNvZGVzXG5leHBvcnRzLmludGVybGVhdmUyID0gZnVuY3Rpb24oeCwgeSkge1xuICB4ICY9IDB4RkZGRjtcbiAgeCA9ICh4IHwgKHggPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgeCA9ICh4IHwgKHggPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgeCA9ICh4IHwgKHggPDwgMikpICYgMHgzMzMzMzMzMztcbiAgeCA9ICh4IHwgKHggPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICB5ICY9IDB4RkZGRjtcbiAgeSA9ICh5IHwgKHkgPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgeSA9ICh5IHwgKHkgPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgeSA9ICh5IHwgKHkgPDwgMikpICYgMHgzMzMzMzMzMztcbiAgeSA9ICh5IHwgKHkgPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICByZXR1cm4geCB8ICh5IDw8IDEpO1xufVxuXG4vL0V4dHJhY3RzIHRoZSBudGggaW50ZXJsZWF2ZWQgY29tcG9uZW50XG5leHBvcnRzLmRlaW50ZXJsZWF2ZTIgPSBmdW5jdGlvbih2LCBuKSB7XG4gIHYgPSAodiA+Pj4gbikgJiAweDU1NTU1NTU1O1xuICB2ID0gKHYgfCAodiA+Pj4gMSkpICAmIDB4MzMzMzMzMzM7XG4gIHYgPSAodiB8ICh2ID4+PiAyKSkgICYgMHgwRjBGMEYwRjtcbiAgdiA9ICh2IHwgKHYgPj4+IDQpKSAgJiAweDAwRkYwMEZGO1xuICB2ID0gKHYgfCAodiA+Pj4gMTYpKSAmIDB4MDAwRkZGRjtcbiAgcmV0dXJuICh2IDw8IDE2KSA+PiAxNjtcbn1cblxuXG4vL0ludGVybGVhdmUgYml0cyBvZiAzIGNvb3JkaW5hdGVzLCBlYWNoIHdpdGggMTAgYml0cy4gIFVzZWZ1bCBmb3IgZmFzdCBvY3RyZWUgY29kZXNcbmV4cG9ydHMuaW50ZXJsZWF2ZTMgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG4gIHggJj0gMHgzRkY7XG4gIHggID0gKHggfCAoeDw8MTYpKSAmIDQyNzgxOTAzMzU7XG4gIHggID0gKHggfCAoeDw8OCkpICAmIDI1MTcxOTY5NTtcbiAgeCAgPSAoeCB8ICh4PDw0KSkgICYgMzI3MjM1NjAzNTtcbiAgeCAgPSAoeCB8ICh4PDwyKSkgICYgMTIyNzEzMzUxMztcblxuICB5ICY9IDB4M0ZGO1xuICB5ICA9ICh5IHwgKHk8PDE2KSkgJiA0Mjc4MTkwMzM1O1xuICB5ICA9ICh5IHwgKHk8PDgpKSAgJiAyNTE3MTk2OTU7XG4gIHkgID0gKHkgfCAoeTw8NCkpICAmIDMyNzIzNTYwMzU7XG4gIHkgID0gKHkgfCAoeTw8MikpICAmIDEyMjcxMzM1MTM7XG4gIHggfD0gKHkgPDwgMSk7XG4gIFxuICB6ICY9IDB4M0ZGO1xuICB6ICA9ICh6IHwgKHo8PDE2KSkgJiA0Mjc4MTkwMzM1O1xuICB6ICA9ICh6IHwgKHo8PDgpKSAgJiAyNTE3MTk2OTU7XG4gIHogID0gKHogfCAoejw8NCkpICAmIDMyNzIzNTYwMzU7XG4gIHogID0gKHogfCAoejw8MikpICAmIDEyMjcxMzM1MTM7XG4gIFxuICByZXR1cm4geCB8ICh6IDw8IDIpO1xufVxuXG4vL0V4dHJhY3RzIG50aCBpbnRlcmxlYXZlZCBjb21wb25lbnQgb2YgYSAzLXR1cGxlXG5leHBvcnRzLmRlaW50ZXJsZWF2ZTMgPSBmdW5jdGlvbih2LCBuKSB7XG4gIHYgPSAodiA+Pj4gbikgICAgICAgJiAxMjI3MTMzNTEzO1xuICB2ID0gKHYgfCAodj4+PjIpKSAgICYgMzI3MjM1NjAzNTtcbiAgdiA9ICh2IHwgKHY+Pj40KSkgICAmIDI1MTcxOTY5NTtcbiAgdiA9ICh2IHwgKHY+Pj44KSkgICAmIDQyNzgxOTAzMzU7XG4gIHYgPSAodiB8ICh2Pj4+MTYpKSAgJiAweDNGRjtcbiAgcmV0dXJuICh2PDwyMik+PjIyO1xufVxuXG4vL0NvbXB1dGVzIG5leHQgY29tYmluYXRpb24gaW4gY29sZXhpY29ncmFwaGljIG9yZGVyICh0aGlzIGlzIG1pc3Rha2VubHkgY2FsbGVkIG5leHRQZXJtdXRhdGlvbiBvbiB0aGUgYml0IHR3aWRkbGluZyBoYWNrcyBwYWdlKVxuZXhwb3J0cy5uZXh0Q29tYmluYXRpb24gPSBmdW5jdGlvbih2KSB7XG4gIHZhciB0ID0gdiB8ICh2IC0gMSk7XG4gIHJldHVybiAodCArIDEpIHwgKCgofnQgJiAtfnQpIC0gMSkgPj4+IChjb3VudFRyYWlsaW5nWmVyb3ModikgKyAxKSk7XG59XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JpdC10d2lkZGxlL3R3aWRkbGUuanNcbi8vIG1vZHVsZSBpZCA9IDEyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjsgXCJ1c2UgcmVzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBVbmlvbkZpbmQ7XG5cbmZ1bmN0aW9uIFVuaW9uRmluZChjb3VudCkge1xuICB0aGlzLnJvb3RzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgdGhpcy5yYW5rcyA9IG5ldyBBcnJheShjb3VudCk7XG4gIFxuICBmb3IodmFyIGk9MDsgaTxjb3VudDsgKytpKSB7XG4gICAgdGhpcy5yb290c1tpXSA9IGk7XG4gICAgdGhpcy5yYW5rc1tpXSA9IDA7XG4gIH1cbn1cblxudmFyIHByb3RvID0gVW5pb25GaW5kLnByb3RvdHlwZVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIFwibGVuZ3RoXCIsIHtcbiAgXCJnZXRcIjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdHMubGVuZ3RoXG4gIH1cbn0pXG5cbnByb3RvLm1ha2VTZXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG4gPSB0aGlzLnJvb3RzLmxlbmd0aDtcbiAgdGhpcy5yb290cy5wdXNoKG4pO1xuICB0aGlzLnJhbmtzLnB1c2goMCk7XG4gIHJldHVybiBuO1xufVxuXG5wcm90by5maW5kID0gZnVuY3Rpb24oeCkge1xuICB2YXIgeDAgPSB4XG4gIHZhciByb290cyA9IHRoaXMucm9vdHM7XG4gIHdoaWxlKHJvb3RzW3hdICE9PSB4KSB7XG4gICAgeCA9IHJvb3RzW3hdXG4gIH1cbiAgd2hpbGUocm9vdHNbeDBdICE9PSB4KSB7XG4gICAgdmFyIHkgPSByb290c1t4MF1cbiAgICByb290c1t4MF0gPSB4XG4gICAgeDAgPSB5XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5cbnByb3RvLmxpbmsgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciB4ciA9IHRoaXMuZmluZCh4KVxuICAgICwgeXIgPSB0aGlzLmZpbmQoeSk7XG4gIGlmKHhyID09PSB5cikge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcmFua3MgPSB0aGlzLnJhbmtzXG4gICAgLCByb290cyA9IHRoaXMucm9vdHNcbiAgICAsIHhkICAgID0gcmFua3NbeHJdXG4gICAgLCB5ZCAgICA9IHJhbmtzW3lyXTtcbiAgaWYoeGQgPCB5ZCkge1xuICAgIHJvb3RzW3hyXSA9IHlyO1xuICB9IGVsc2UgaWYoeWQgPCB4ZCkge1xuICAgIHJvb3RzW3lyXSA9IHhyO1xuICB9IGVsc2Uge1xuICAgIHJvb3RzW3lyXSA9IHhyO1xuICAgICsrcmFua3NbeHJdO1xuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdW5pb24tZmluZC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFmZmluZUh1bGxcblxudmFyIG9yaWVudCA9IHJlcXVpcmUoJ3JvYnVzdC1vcmllbnRhdGlvbicpXG5cbmZ1bmN0aW9uIGxpbmVhcmx5SW5kZXBlbmRlbnQocG9pbnRzLCBkKSB7XG4gIHZhciBuaHVsbCA9IG5ldyBBcnJheShkKzEpXG4gIGZvcih2YXIgaT0wOyBpPHBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgIG5odWxsW2ldID0gcG9pbnRzW2ldXG4gIH1cbiAgZm9yKHZhciBpPTA7IGk8PXBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgIGZvcih2YXIgaj1wb2ludHMubGVuZ3RoOyBqPD1kOyArK2opIHtcbiAgICAgIHZhciB4ID0gbmV3IEFycmF5KGQpXG4gICAgICBmb3IodmFyIGs9MDsgazxkOyArK2spIHtcbiAgICAgICAgeFtrXSA9IE1hdGgucG93KGorMS1pLCBrKVxuICAgICAgfVxuICAgICAgbmh1bGxbal0gPSB4XG4gICAgfVxuICAgIHZhciBvID0gb3JpZW50LmFwcGx5KHZvaWQgMCwgbmh1bGwpXG4gICAgaWYobykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFmZmluZUh1bGwocG9pbnRzKSB7XG4gIHZhciBuID0gcG9pbnRzLmxlbmd0aFxuICBpZihuID09PSAwKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgaWYobiA9PT0gMSkge1xuICAgIHJldHVybiBbMF1cbiAgfVxuICB2YXIgZCA9IHBvaW50c1swXS5sZW5ndGhcbiAgdmFyIGZyYW1lID0gWyBwb2ludHNbMF0gXVxuICB2YXIgaW5kZXggPSBbIDAgXVxuICBmb3IodmFyIGk9MTsgaTxuOyArK2kpIHtcbiAgICBmcmFtZS5wdXNoKHBvaW50c1tpXSlcbiAgICBpZighbGluZWFybHlJbmRlcGVuZGVudChmcmFtZSwgZCkpIHtcbiAgICAgIGZyYW1lLnBvcCgpXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpbmRleC5wdXNoKGkpXG4gICAgaWYoaW5kZXgubGVuZ3RoID09PSBkKzEpIHtcbiAgICAgIHJldHVybiBpbmRleFxuICAgIH1cbiAgfVxuICByZXR1cm4gaW5kZXhcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hZmZpbmUtaHVsbC9hZmYuanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaW5zaWRlID0gcmVxdWlyZSgnQHR1cmYvaW5zaWRlJyk7XG52YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykuZmVhdHVyZUNvbGxlY3Rpb247XG5cbi8qKlxuICogVGFrZXMgYSBzZXQgb2Yge0BsaW5rIFBvaW50fHBvaW50c30gYW5kIGEgc2V0IG9mIHtAbGluayBQb2x5Z29ufHBvbHlnb25zfSBhbmQgcmV0dXJucyB0aGUgcG9pbnRzIHRoYXQgZmFsbCB3aXRoaW4gdGhlIHBvbHlnb25zLlxuICpcbiAqIEBuYW1lIHdpdGhpblxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IHBvaW50cyBpbnB1dCBwb2ludHNcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9seWdvbj59IHBvbHlnb25zIGlucHV0IHBvbHlnb25zXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBwb2ludHMgdGhhdCBsYW5kIHdpdGhpbiBhdCBsZWFzdCBvbmUgcG9seWdvblxuICogQGV4YW1wbGVcbiAqIHZhciBzZWFyY2hXaXRoaW4gPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgICB0dXJmLnBvbHlnb24oW1tcbiAqICAgICAgICAgWy00Ni42NTMsLTIzLjU0M10sXG4gKiAgICAgICAgIFstNDYuNjM0LC0yMy41MzQ2XSxcbiAqICAgICAgICAgWy00Ni42MTMsLTIzLjU0M10sXG4gKiAgICAgICAgIFstNDYuNjE0LC0yMy41NTldLFxuICogICAgICAgICBbLTQ2LjYzMSwtMjMuNTY3XSxcbiAqICAgICAgICAgWy00Ni42NTMsLTIzLjU2MF0sXG4gKiAgICAgICAgIFstNDYuNjUzLC0yMy41NDNdXG4gKiAgICAgXV0pXG4gKiBdKTtcbiAqIHZhciBwb2ludHMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtcbiAqICAgICB0dXJmLnBvaW50KFstNDYuNjMxOCwgLTIzLjU1MjNdKSxcbiAqICAgICB0dXJmLnBvaW50KFstNDYuNjI0NiwgLTIzLjUzMjVdKSxcbiAqICAgICB0dXJmLnBvaW50KFstNDYuNjA2MiwgLTIzLjU1MTNdKSxcbiAqICAgICB0dXJmLnBvaW50KFstNDYuNjYzLCAtMjMuNTU0XSksXG4gKiAgICAgdHVyZi5wb2ludChbLTQ2LjY0MywgLTIzLjU1N10pXG4gKiBdKTtcbiAqXG4gKiB2YXIgcHRzV2l0aGluID0gdHVyZi53aXRoaW4ocG9pbnRzLCBzZWFyY2hXaXRoaW4pO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2ludHMsIHNlYXJjaFdpdGhpbiwgcHRzV2l0aGluXVxuICogdHVyZi5mZWF0dXJlRWFjaChwdHNXaXRoaW4sIGZ1bmN0aW9uIChjdXJyZW50RmVhdHVyZSkge1xuICogICBjdXJyZW50RmVhdHVyZS5wcm9wZXJ0aWVzWydtYXJrZXItc2l6ZSddID0gJ2xhcmdlJztcbiAqICAgY3VycmVudEZlYXR1cmUucHJvcGVydGllc1snbWFya2VyLWNvbG9yJ10gPSAnIzAwMCc7XG4gKiB9KTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9pbnRzLCBwb2x5Z29ucykge1xuICAgIHZhciBwb2ludHNXaXRoaW4gPSBmZWF0dXJlQ29sbGVjdGlvbihbXSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2x5Z29ucy5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBvaW50cy5mZWF0dXJlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdmFyIGlzSW5zaWRlID0gaW5zaWRlKHBvaW50cy5mZWF0dXJlc1tqXSwgcG9seWdvbnMuZmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgaWYgKGlzSW5zaWRlKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzV2l0aGluLmZlYXR1cmVzLnB1c2gocG9pbnRzLmZlYXR1cmVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzV2l0aGluO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3dpdGhpbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDEuIHJ1biB0aW4gb24gcG9pbnRzXG4vLyAyLiBjYWxjdWxhdGUgbGVudGggb2YgYWxsIGVkZ2VzIGFuZCBhcmVhIG9mIGFsbCB0cmlhbmdsZXNcbi8vIDMuIHJlbW92ZSB0cmlhbmdsZXMgdGhhdCBmYWlsIHRoZSBtYXggbGVuZ3RoIHRlc3Rcbi8vIDQuIGJ1ZmZlciB0aGUgcmVzdWx0cyBzbGlnaHRseVxuLy8gNS4gbWVyZ2UgdGhlIHJlc3VsdHNcbnZhciB0aW4gPSByZXF1aXJlKCdAdHVyZi90aW4nKTtcbnZhciB1bmlvbiA9IHJlcXVpcmUoJ0B0dXJmL3VuaW9uJyk7XG52YXIgZGlzdGFuY2UgPSByZXF1aXJlKCdAdHVyZi9kaXN0YW5jZScpO1xuXG4vKipcbiAqIFRha2VzIGEgc2V0IG9mIHtAbGluayBQb2ludHxwb2ludHN9IGFuZCByZXR1cm5zIGEgY29uY2F2ZSBodWxsIHBvbHlnb24uXG4gKiBJbnRlcm5hbGx5LCB0aGlzIHVzZXMgW3R1cmYtdGluXShodHRwczovL2dpdGh1Yi5jb20vVHVyZmpzL3R1cmYtdGluKSB0byBnZW5lcmF0ZSBnZW9tZXRyaWVzLlxuICpcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBwb2ludHMgaW5wdXQgcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4RWRnZSB0aGUgc2l6ZSBvZiBhbiBlZGdlIG5lY2Vzc2FyeSBmb3IgcGFydCBvZiB0aGUgaHVsbCB0byBiZWNvbWUgY29uY2F2ZSAoaW4gbWlsZXMpXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbj59IGEgY29uY2F2ZSBodWxsXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgbWF4RWRnZSBwYXJhbWV0ZXIgaXMgbWlzc2luZyBvciB1bmFibGUgdG8gY29tcHV0ZSBodWxsXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvaW50cyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICB0dXJmLnBvaW50KFstNjMuNjAxMjI2LCA0NC42NDI2NDNdKSxcbiAqICAgdHVyZi5wb2ludChbLTYzLjU5MTQ0MiwgNDQuNjUxNDM2XSksXG4gKiAgIHR1cmYucG9pbnQoWy02My41ODA3OTksIDQ0LjY0ODc0OV0pLFxuICogICB0dXJmLnBvaW50KFstNjMuNTczNTg5LCA0NC42NDE3ODhdKSxcbiAqICAgdHVyZi5wb2ludChbLTYzLjU4NzY2NSwgNDQuNjQ1MzNdKSxcbiAqICAgdHVyZi5wb2ludChbLTYzLjU5NTIxOCwgNDQuNjQ3NjVdKVxuICogXSk7XG4gKlxuICogdmFyIGh1bGwgPSB0dXJmLmNvbmNhdmUocG9pbnRzLCAxLCAnbWlsZXMnKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9pbnRzLCBodWxsXVxuICovXG5mdW5jdGlvbiBjb25jYXZlKHBvaW50cywgbWF4RWRnZSwgdW5pdHMpIHtcbiAgICBpZiAodHlwZW9mIG1heEVkZ2UgIT09ICdudW1iZXInKSB0aHJvdyBuZXcgRXJyb3IoJ21heEVkZ2UgcGFyYW1ldGVyIGlzIHJlcXVpcmVkJyk7XG5cbiAgICB2YXIgdGluUG9seXMgPSB0aW4ocG9pbnRzKTtcbiAgICB2YXIgZmlsdGVyZWRQb2x5cyA9IHRpblBvbHlzLmZlYXR1cmVzLmZpbHRlcihmaWx0ZXJUcmlhbmdsZXMpO1xuICAgIHRpblBvbHlzLmZlYXR1cmVzID0gZmlsdGVyZWRQb2x5cztcbiAgICBpZiAodGluUG9seXMuZmVhdHVyZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvbyBmZXcgcG9seWdvbnMgZm91bmQgdG8gY29tcHV0ZSBjb25jYXZlIGh1bGwnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJUcmlhbmdsZXModHJpYW5nbGUpIHtcbiAgICAgICAgdmFyIHB0MSA9IHRyaWFuZ2xlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdWzBdO1xuICAgICAgICB2YXIgcHQyID0gdHJpYW5nbGUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF1bMV07XG4gICAgICAgIHZhciBwdDMgPSB0cmlhbmdsZS5nZW9tZXRyeS5jb29yZGluYXRlc1swXVsyXTtcbiAgICAgICAgdmFyIGRpc3QxID0gZGlzdGFuY2UocHQxLCBwdDIsIHVuaXRzKTtcbiAgICAgICAgdmFyIGRpc3QyID0gZGlzdGFuY2UocHQyLCBwdDMsIHVuaXRzKTtcbiAgICAgICAgdmFyIGRpc3QzID0gZGlzdGFuY2UocHQxLCBwdDMsIHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIChkaXN0MSA8PSBtYXhFZGdlICYmIGRpc3QyIDw9IG1heEVkZ2UgJiYgZGlzdDMgPD0gbWF4RWRnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKHRpblBvbHlzKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UocG9seWdvbnMpIHtcbiAgICB2YXIgbWVyZ2VkID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwb2x5Z29ucy5mZWF0dXJlc1swXSkpLFxuICAgICAgICBmZWF0dXJlcyA9IHBvbHlnb25zLmZlYXR1cmVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZlYXR1cmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBwb2x5ID0gZmVhdHVyZXNbaV07XG4gICAgICAgIGlmIChwb2x5Lmdlb21ldHJ5KSB7XG4gICAgICAgICAgICBtZXJnZWQgPSB1bmlvbihtZXJnZWQsIHBvbHkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uY2F2ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2NvbmNhdmUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBkZXBlbmQgb24ganN0cyBmb3Igbm93IGh0dHBzOi8vZ2l0aHViLmNvbS9iam9ybmhhcnJ0ZWxsL2pzdHMvYmxvYi9tYXN0ZXIvZXhhbXBsZXMvb3ZlcmxheS5odG1sXG52YXIganN0cyA9IHJlcXVpcmUoJ2pzdHMnKTtcbnZhciBhcmVhID0gcmVxdWlyZSgnQHR1cmYvYXJlYScpO1xudmFyIGZlYXR1cmUgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykuZmVhdHVyZTtcbnZhciBnZXRHZW9tID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50JykuZ2V0R2VvbTtcbnZhciBmbGF0dGVuRWFjaCA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5mbGF0dGVuRWFjaDtcblxuLyoqXG4gKiBGaW5kcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byB7QGxpbmsgUG9seWdvbnxwb2x5Z29uc30gYnkgY2xpcHBpbmcgdGhlIHNlY29uZCBwb2x5Z29uIGZyb20gdGhlIGZpcnN0LlxuICpcbiAqIEBuYW1lIGRpZmZlcmVuY2VcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IHBvbHlnb24xIGlucHV0IFBvbHlnb24gZmVhdHVyZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb258TXVsdGlQb2x5Z29uPn0gcG9seWdvbjIgUG9seWdvbiBmZWF0dXJlIHRvIGRpZmZlcmVuY2UgZnJvbSBwb2x5Z29uMVxuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbnxNdWx0aVBvbHlnb24+fHVuZGVmaW5lZH0gYSBQb2x5Z29uIG9yIE11bHRpUG9seWdvbiBmZWF0dXJlIHNob3dpbmcgdGhlIGFyZWEgb2YgYHBvbHlnb24xYCBleGNsdWRpbmcgdGhlIGFyZWEgb2YgYHBvbHlnb24yYCAoaWYgZW1wdHkgcmV0dXJucyBgdW5kZWZpbmVkYClcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbjEgPSB0dXJmLnBvbHlnb24oW1tcbiAqICAgWzEyOCwgLTI2XSxcbiAqICAgWzE0MSwgLTI2XSxcbiAqICAgWzE0MSwgLTIxXSxcbiAqICAgWzEyOCwgLTIxXSxcbiAqICAgWzEyOCwgLTI2XVxuICogXV0sIHtcbiAqICAgXCJmaWxsXCI6IFwiI0YwMFwiLFxuICogICBcImZpbGwtb3BhY2l0eVwiOiAwLjFcbiAqIH0pO1xuICogdmFyIHBvbHlnb24yID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgIFsxMjYsIC0yOF0sXG4gKiAgIFsxNDAsIC0yOF0sXG4gKiAgIFsxNDAsIC0yMF0sXG4gKiAgIFsxMjYsIC0yMF0sXG4gKiAgIFsxMjYsIC0yOF1cbiAqIF1dLCB7XG4gKiAgIFwiZmlsbFwiOiBcIiMwMEZcIixcbiAqICAgXCJmaWxsLW9wYWNpdHlcIjogMC4xXG4gKiB9KTtcbiAqXG4gKiB2YXIgZGlmZmVyZW5jZSA9IHR1cmYuZGlmZmVyZW5jZShwb2x5Z29uMSwgcG9seWdvbjIpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5Z29uMSwgcG9seWdvbjIsIGRpZmZlcmVuY2VdO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb2x5Z29uMSwgcG9seWdvbjIpIHtcbiAgICB2YXIgZ2VvbTEgPSBnZXRHZW9tKHBvbHlnb24xKTtcbiAgICB2YXIgZ2VvbTIgPSBnZXRHZW9tKHBvbHlnb24yKTtcbiAgICB2YXIgcHJvcGVydGllcyA9IHBvbHlnb24xLnByb3BlcnRpZXMgfHwge307XG5cbiAgICAvLyBJc3N1ZSAjNzIxIC0gSlNUUyBjYW4ndCBoYW5kbGUgZW1wdHkgcG9seWdvbnNcbiAgICBnZW9tMSA9IHJlbW92ZUVtcHR5UG9seWdvbihnZW9tMSk7XG4gICAgZ2VvbTIgPSByZW1vdmVFbXB0eVBvbHlnb24oZ2VvbTIpO1xuICAgIGlmICghZ2VvbTEpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKCFnZW9tMikgcmV0dXJuIGZlYXR1cmUoZ2VvbTEsIHByb3BlcnRpZXMpO1xuXG4gICAgLy8gSlNUUyBkaWZmZXJlbmNlIG9wZXJhdGlvblxuICAgIHZhciByZWFkZXIgPSBuZXcganN0cy5pby5HZW9KU09OUmVhZGVyKCk7XG4gICAgdmFyIGEgPSByZWFkZXIucmVhZChnZW9tMSk7XG4gICAgdmFyIGIgPSByZWFkZXIucmVhZChnZW9tMik7XG4gICAgdmFyIGRpZmZlcmVuY2VkID0gYS5kaWZmZXJlbmNlKGIpO1xuICAgIGlmIChkaWZmZXJlbmNlZC5pc0VtcHR5KCkpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdmFyIHdyaXRlciA9IG5ldyBqc3RzLmlvLkdlb0pTT05Xcml0ZXIoKTtcbiAgICB2YXIgZ2VvbSA9IHdyaXRlci53cml0ZShkaWZmZXJlbmNlZCk7XG5cbiAgICByZXR1cm4gZmVhdHVyZShnZW9tLCBwcm9wZXJ0aWVzKTtcbn07XG5cbi8qKlxuICogRGV0ZWN0IEVtcHR5IFBvbHlnb25cbiAqXG4gKiBAcGFyYW0ge0dlb21ldHJ5PFBvbHlnb258TXVsdGlQb2x5Z29uPn0gZ2VvbSBHZW9tZXRyeSBPYmplY3RcbiAqIEByZXR1cm5zIHtHZW9tZXRyeTxQb2x5Z29ufE11bHRpUG9seWdvbj58dW5kZWZpbmVkfSByZW1vdmVkIGFueSBwb2x5Z29ucyB3aXRoIG5vIGFyZWFzXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUVtcHR5UG9seWdvbihnZW9tKSB7XG4gICAgc3dpdGNoIChnZW9tLnR5cGUpIHtcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgaWYgKGFyZWEoZ2VvbSkgPiAxKSByZXR1cm4gZ2VvbTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjYXNlICdNdWx0aVBvbHlnb24nOlxuICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBbXTtcbiAgICAgICAgZmxhdHRlbkVhY2goZ2VvbSwgZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIGlmIChhcmVhKGZlYXR1cmUpID4gMSkgY29vcmRpbmF0ZXMucHVzaChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGgpIHJldHVybiB7dHlwZTogJ011bHRpUG9seWdvbicsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG4gICAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvZGlmZmVyZW5jZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzLlJBRElVUyA9IDYzNzgxMzc7XG5tb2R1bGUuZXhwb3J0cy5GTEFUVEVOSU5HID0gMS8yOTguMjU3MjIzNTYzO1xubW9kdWxlLmV4cG9ydHMuUE9MQVJfUkFESVVTID0gNjM1Njc1Mi4zMTQyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2dzODQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgdHVyZlVuaW9uID0gcmVxdWlyZSgnQHR1cmYvdW5pb24nKTtcbnZhciB0dXJmT3ZlcmxhcHMgPSByZXF1aXJlKCd0dXJmLW92ZXJsYXBzJyk7XG52YXIgdHVyZmJib3ggPSByZXF1aXJlKCdAdHVyZi9iYm94Jyk7XG52YXIgUmJ1c2ggPSByZXF1aXJlKCdyYnVzaCcpO1xudmFyIGdqdSA9IHJlcXVpcmUoJ2dlb2pzb24tdXRpbHMnKTtcbnZhciBnZXRDbG9zZXN0ID0gcmVxdWlyZSgnZ2V0LWNsb3Nlc3QnKTtcblxuLyoqXG4gKiBEaXNzb2x2ZXMgYSBGZWF0dXJlQ29sbGVjdGlvbiBvZiBwb2x5Z29ucyBiYXNlZCBvbiBhIHByb3BlcnR5LiBOb3RlIHRoYXQgbXVsdGlwYXJ0IGZlYXR1cmVzIHdpdGhpbiB0aGUgY29sbGVjdGlvbiBhcmUgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBuYW1lIGRpc3NvbHZlXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBmZWF0dXJlQ29sbGVjdGlvbiBpbnB1dCBmZWF0dXJlIGNvbGxlY3Rpb24gdG8gYmUgZGlzc29sdmVkXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5TmFtZV0gcHJvcGVydHkgbmFtZSBvbiB3aGljaCB0byBkaXNzb2x2ZSBmZWF0dXJlc1xuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBhIEZlYXR1cmVDb2xsZWN0aW9uIGNvbnRhaW5pbmcgdGhlIGRpc3NvbHZlZCBwb2x5Z29uc1xuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICB0dXJmLnBvbHlnb24oW1tbMCwgMF0sIFswLCAxXSwgWzEsIDFdLCBbMSwgMF0sIFswLCAwXV1dLCB7XCJjb21iaW5lXCI6IFwieWVzXCJ9KSxcbiAqICAgdHVyZi5wb2x5Z29uKFtbWzAsIC0xXSwgWzAsIDBdLCBbMSwgMF0sIFsxLCAtMV0sIFswLC0xXV1dLCB7XCJjb21iaW5lXCI6IFwieWVzXCJ9KSxcbiAqICAgdHVyZi5wb2x5Z29uKFtbWzEsLTFdLFsxLCAwXSwgWzIsIDBdLCBbMiwgLTFdLCBbMSwgLTFdXV0sIHtcImNvbWJpbmVcIjogXCJub1wifSksXG4gKiBdKTtcbiAqXG4gKiB2YXIgZGlzc29sdmVkID0gdHVyZi5kaXNzb2x2ZShmZWF0dXJlcywgJ2NvbWJpbmUnKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbZmVhdHVyZXMsIGRpc3NvbHZlZF1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZmVhdHVyZUNvbGxlY3Rpb24sIHByb3BlcnR5TmFtZSkge1xuXG4gICAgdmFyIG9yaWdpbmFsSW5kZXhPZkl0ZW1zUmVtb3ZlZCA9IFtdO1xuICAgIHZhciB0cmVlSXRlbXMgPSBbXTtcbiAgICB2YXIgcnRyZWUgPSBuZXcgUmJ1c2goKTtcbiAgICBmb3IgKHZhciBwb2x5SW5kZXggPSAwOyBwb2x5SW5kZXggPCBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlcy5sZW5ndGg7IHBvbHlJbmRleCsrKSB7XG4gICAgICAgIHZhciBpbnB1dEZlYXR1cmVCYm94ID0gdHVyZmJib3goZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXNbcG9seUluZGV4XSk7XG4gICAgICAgIHZhciB0cmVlT2JqID0ge1xuICAgICAgICAgICAgbWluWDogaW5wdXRGZWF0dXJlQmJveFswXSxcbiAgICAgICAgICAgIG1pblk6IGlucHV0RmVhdHVyZUJib3hbMV0sXG4gICAgICAgICAgICBtYXhYOiBpbnB1dEZlYXR1cmVCYm94WzJdLFxuICAgICAgICAgICAgbWF4WTogaW5wdXRGZWF0dXJlQmJveFszXSxcbiAgICAgICAgICAgIG9yaWdJbmRleFBvc2l0aW9uOiBwb2x5SW5kZXhcbiAgICAgICAgfTtcbiAgICAgICAgdHJlZUl0ZW1zLnB1c2godHJlZU9iaik7XG4gICAgfVxuICAgIHJ0cmVlLmxvYWQodHJlZUl0ZW1zKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBvbHlnb24gPSBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlc1tpXTtcblxuICAgICAgICB2YXIgcG9seUJvdW5kaW5nQm94ID0gdHVyZmJib3gocG9seWdvbik7XG4gICAgICAgIHZhciBzZWFyY2hPYmogPSB7XG4gICAgICAgICAgICBtaW5YOiBwb2x5Qm91bmRpbmdCb3hbMF0sXG4gICAgICAgICAgICBtaW5ZOiBwb2x5Qm91bmRpbmdCb3hbMV0sXG4gICAgICAgICAgICBtYXhYOiBwb2x5Qm91bmRpbmdCb3hbMl0sXG4gICAgICAgICAgICBtYXhZOiBwb2x5Qm91bmRpbmdCb3hbM11cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvdGVudGlhbE1hdGNoaW5nRmVhdHVyZXMgPSBydHJlZS5zZWFyY2goc2VhcmNoT2JqKTtcblxuICAgICAgICB2YXIgZmVhdHVyZUNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBzZWFyY2hJbmRleCA9IDA7IHNlYXJjaEluZGV4IDwgcG90ZW50aWFsTWF0Y2hpbmdGZWF0dXJlcy5sZW5ndGg7IHNlYXJjaEluZGV4KyspIHtcbiAgICAgICAgICAgIHBvbHlnb24gPSBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlc1tpXTtcblxuICAgICAgICAgICAgdmFyIG1hdGNoRmVhdHVyZVBvc2l0aW9uID0gcG90ZW50aWFsTWF0Y2hpbmdGZWF0dXJlc1tzZWFyY2hJbmRleF0ub3JpZ0luZGV4UG9zaXRpb247XG5cbiAgICAgICAgICAgIGlmIChvcmlnaW5hbEluZGV4T2ZJdGVtc1JlbW92ZWQubGVuZ3RoID4gMCAmJiBtYXRjaEZlYXR1cmVQb3NpdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaEZlYXR1cmVQb3NpdGlvbiA+IG9yaWdpbmFsSW5kZXhPZkl0ZW1zUmVtb3ZlZFtvcmlnaW5hbEluZGV4T2ZJdGVtc1JlbW92ZWQubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hGZWF0dXJlUG9zaXRpb24gPSBtYXRjaEZlYXR1cmVQb3NpdGlvbiAtIChvcmlnaW5hbEluZGV4T2ZJdGVtc1JlbW92ZWQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2xvc2VzdE51bWJlciA9IGdldENsb3Nlc3QuZ3JlYXRlck51bWJlcihtYXRjaEZlYXR1cmVQb3NpdGlvbiwgb3JpZ2luYWxJbmRleE9mSXRlbXNSZW1vdmVkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsb3Nlc3ROdW1iZXIgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRmVhdHVyZVBvc2l0aW9uID0gbWF0Y2hGZWF0dXJlUG9zaXRpb24gLSBjbG9zZXN0TnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWF0Y2hGZWF0dXJlUG9zaXRpb24gPT09IGkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtYXRjaEZlYXR1cmUgPSBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlc1ttYXRjaEZlYXR1cmVQb3NpdGlvbl07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hGZWF0dXJlLnByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSAhPT0gcG9seWdvbi5wcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb3ZlcmxhcENoZWNrID0gdHVyZk92ZXJsYXBzKHBvbHlnb24sIG1hdGNoRmVhdHVyZSk7XG5cbiAgICAgICAgICAgIGlmICghb3ZlcmxhcENoZWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvbHlDbG9uZSA9IEpTT04uc3RyaW5naWZ5KHBvbHlnb24pO1xuICAgICAgICAgICAgICAgIHZhciBwb2x5QmVpbmdDaGVja2VkQ2xvbmUgPSBKU09OLnN0cmluZ2lmeShtYXRjaEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIHZhciBsaW5lc3RyaW5nMSA9IHRvTGluZXN0cmluZyhKU09OLnBhcnNlKHBvbHlDbG9uZSkpO1xuICAgICAgICAgICAgICAgIHZhciBsaW5lc3RyaW5nMiA9IHRvTGluZXN0cmluZyhKU09OLnBhcnNlKHBvbHlCZWluZ0NoZWNrZWRDbG9uZSkpO1xuICAgICAgICAgICAgICAgIG92ZXJsYXBDaGVjayA9IGdqdS5saW5lU3RyaW5nc0ludGVyc2VjdChsaW5lc3RyaW5nMS5nZW9tZXRyeSwgbGluZXN0cmluZzIuZ2VvbWV0cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvdmVybGFwQ2hlY2spIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXNbaV0gPSB0dXJmVW5pb24ocG9seWdvbiwgbWF0Y2hGZWF0dXJlKTtcbiAgICAgICAgICAgIG9yaWdpbmFsSW5kZXhPZkl0ZW1zUmVtb3ZlZC5wdXNoKHBvdGVudGlhbE1hdGNoaW5nRmVhdHVyZXNbc2VhcmNoSW5kZXhdLm9yaWdJbmRleFBvc2l0aW9uKTtcbiAgICAgICAgICAgIG9yaWdpbmFsSW5kZXhPZkl0ZW1zUmVtb3ZlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJ0cmVlLnJlbW92ZShwb3RlbnRpYWxNYXRjaGluZ0ZlYXR1cmVzW3NlYXJjaEluZGV4XSk7XG4gICAgICAgICAgICBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlcy5zcGxpY2UobWF0Y2hGZWF0dXJlUG9zaXRpb24sIDEpO1xuICAgICAgICAgICAgc2VhcmNoT2JqLm9yaWdJbmRleFBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIHJ0cmVlLnJlbW92ZShzZWFyY2hPYmosIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEub3JpZ0luZGV4UG9zaXRpb24gPT09IGIub3JpZ0luZGV4UG9zaXRpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZlYXR1cmVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmVhdHVyZUNoYW5nZWQpIHtcbiAgICAgICAgICAgIHZhciBuZXdCb3VuZGluZ0JveCA9IHR1cmZiYm94KHBvbHlnb24pO1xuICAgICAgICAgICAgcnRyZWUuaW5zZXJ0KHtcbiAgICAgICAgICAgICAgICBtaW5YOiBuZXdCb3VuZGluZ0JveFswXSxcbiAgICAgICAgICAgICAgICBtaW5ZOiBuZXdCb3VuZGluZ0JveFsxXSxcbiAgICAgICAgICAgICAgICBtYXhYOiBuZXdCb3VuZGluZ0JveFsyXSxcbiAgICAgICAgICAgICAgICBtYXhZOiBuZXdCb3VuZGluZ0JveFszXSxcbiAgICAgICAgICAgICAgICBvcmlnSW5kZXhQb3NpdGlvbjogaVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uO1xufTtcblxuZnVuY3Rpb24gdG9MaW5lc3RyaW5nKHBvbHlnb24pIHtcbiAgICBpZiAocG9seWdvbiA9PT0gbnVsbCB8fCBwb2x5Z29uID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignTm8gcG9seWdvbiB3YXMgcGFzc2VkJyk7XG4gICAgcG9seWdvbi5nZW9tZXRyeS50eXBlID0gJ0xpbmVTdHJpbmcnO1xuICAgIHZhciBmbGF0X2FyciA9IFtdLmNvbmNhdC5hcHBseShbXSwgcG9seWdvbi5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgcG9seWdvbi5nZW9tZXRyeS5jb29yZGluYXRlcyA9IGZsYXRfYXJyO1xuICAgIHJldHVybiBwb2x5Z29uO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvZGlzc29sdmUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY2xvY2t3aXNlID0gcmVxdWlyZSgndHVyZi1pcy1jbG9ja3dpc2UnKTtcblxuZnVuY3Rpb24gZG9MaW5lc0ludGVyc2VjdChsaW5lMSwgbGluZTIpIHtcbiAgdmFyIHAxID0gbGluZTFbMF0sXG4gICAgcDIgPSBsaW5lMVsxXSxcbiAgICBwMyA9IGxpbmUyWzBdLFxuICAgIHA0ID0gbGluZTJbMV07XG5cbiAgcmV0dXJuIChjbG9ja3dpc2UoW3AxLCBwMywgcDQsIHAxXSkgIT0gY2xvY2t3aXNlKFtwMiwgcDMsIHA0LCBwMl0pKVxuICAgICYmIChjbG9ja3dpc2UoW3AxLCBwMiwgcDMsIHAxXSkgIT0gY2xvY2t3aXNlKFtwMSwgcDIsIHA0LCBwMV0pKTtcbn1cblxuZnVuY3Rpb24gdGVzdExpbmVzKHJpbmcxLCByaW5nMikge1xuICBmb3IgKHZhciBwMV9pbmQgPSAwOyBwMV9pbmQgPCAocmluZzEubGVuZ3RoIC0gMSk7IHAxX2luZCsrKSB7XG4gICAgdmFyIHAxX2xpbmUgPSBbcmluZzFbcDFfaW5kXSwgcmluZzFbcDFfaW5kICsgMV1dO1xuICAgIGZvciAodmFyIHAyX2luZCA9IDA7IHAyX2luZCA8IChyaW5nMi5sZW5ndGggLSAxKTsgcDJfaW5kKyspIHtcbiAgICAgIHZhciBwMl9saW5lID0gW3JpbmcyW3AyX2luZF0sIHJpbmcyW3AyX2luZCArIDFdXTtcblxuICAgICAgaWYgKGRvTGluZXNJbnRlcnNlY3QocDFfbGluZSwgcDJfbGluZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZXMocG9seWdvbikge1xuICB2YXIgY29vcmRzID0gW1tbXV1dO1xuXG4gIHN3aXRjaCAocG9seWdvbi5nZW9tZXRyeS50eXBlKSB7XG4gICAgY2FzZSAnTGluZVN0cmluZyc6XG4gICAgICBjb29yZHMgPSBbW3BvbHlnb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNdXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgY29vcmRzID0gW3BvbHlnb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgIGNvb3JkcyA9IHBvbHlnb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gY29vcmRzO1xufVxuXG4vKipcbiAqIFNpbmNlIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIG92ZXJsYXAgYW1vdW50LFxuICogb3IgaXQncyBnZW9tZXRyeSwgYnV0IHJhdGhlciBqdXN0IHdoZXRoZXIgb3ZlcmxhcFxuICogb2NjdXJzLCBwb2x5Z29uIG92ZXJsYXAgY2FuIG1vc3Qgc2ltcGx5IGJlIGV4cHJlc3NlZFxuICogYnkgdGVzdGluZyB3aGV0aGVyIGFueSBwYWlyIG9mIGVkZ2VzIG9uIHRoZSB0d28gcG9seWdvbnNcbiAqIGludGVyc2VjdC4gSWYgdGhlcmUgYXJlIGFueSBlZGdlIGludGVyc2VjdGlvbnMsIHRoZVxuICogcG9seWdvbnMgb3ZlcmxhcC5cbiAqXG4gKiBAcGFyYW0gIHtbdHlwZV19IHBvbHkxIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gcG9seTIgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvbHkxLCBwb2x5Mikge1xuICB2YXIgY29vcmRzMSA9IGdldENvb3JkaW5hdGVzKHBvbHkxKSxcbiAgICBjb29yZHMyID0gZ2V0Q29vcmRpbmF0ZXMocG9seTIpO1xuXG4gIC8vIFRoaXMgbG9va3MgY29tcGxldGVseSBzdHVwaWQgcmlkaWN1bG91cyB0b1xuICAvLyBoYXZlIHNvIG1hbnkgbmVzdGVkIGxvb3BzLCBidXQgaXQgc3VwcG9ydHNcbiAgLy8gbXVsdGlwb2x5Z29ucyBuaWNlbHkuIEluIHRoZSBjYXNlIG9mIHBvbHlnb25zXG4gIC8vIG9yIGxpbmVzdHJpbmdzLCB0aGUgb3V0ZXIgbG9vcHMgYXJlIG9ubHkgb25lXG4gIC8vIGl0ZXJhdGlvbi5cbiAgcmV0dXJuIGNvb3JkczEuc29tZShmdW5jdGlvbiAocmluZ3MxKSB7XG4gICAgcmV0dXJuIGNvb3JkczIuc29tZShmdW5jdGlvbiAocmluZ3MyKSB7XG4gICAgICByZXR1cm4gcmluZ3MxLnNvbWUoZnVuY3Rpb24ocmluZzEpIHtcbiAgICAgICAgcmV0dXJuIHJpbmdzMi5zb21lKGZ1bmN0aW9uKHJpbmcyKSB7XG4gICAgICAgICAgcmV0dXJuIHRlc3RMaW5lcyhyaW5nMSwgcmluZzIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90dXJmLW92ZXJsYXBzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnRpYWxTb3J0O1xuXG4vLyBGbG95ZC1SaXZlc3Qgc2VsZWN0aW9uIGFsZ29yaXRobTpcbi8vIFJlYXJyYW5nZSBpdGVtcyBzbyB0aGF0IGFsbCBpdGVtcyBpbiB0aGUgW2xlZnQsIGtdIHJhbmdlIGFyZSBzbWFsbGVyIHRoYW4gYWxsIGl0ZW1zIGluIChrLCByaWdodF07XG4vLyBUaGUgay10aCBlbGVtZW50IHdpbGwgaGF2ZSB0aGUgKGsgLSBsZWZ0ICsgMSl0aCBzbWFsbGVzdCB2YWx1ZSBpbiBbbGVmdCwgcmlnaHRdXG5cbmZ1bmN0aW9uIHBhcnRpYWxTb3J0KGFyciwgaywgbGVmdCwgcmlnaHQsIGNvbXBhcmUpIHtcbiAgICBsZWZ0ID0gbGVmdCB8fCAwO1xuICAgIHJpZ2h0ID0gcmlnaHQgfHwgKGFyci5sZW5ndGggLSAxKTtcbiAgICBjb21wYXJlID0gY29tcGFyZSB8fCBkZWZhdWx0Q29tcGFyZTtcblxuICAgIHdoaWxlIChyaWdodCA+IGxlZnQpIHtcbiAgICAgICAgaWYgKHJpZ2h0IC0gbGVmdCA+IDYwMCkge1xuICAgICAgICAgICAgdmFyIG4gPSByaWdodCAtIGxlZnQgKyAxO1xuICAgICAgICAgICAgdmFyIG0gPSBrIC0gbGVmdCArIDE7XG4gICAgICAgICAgICB2YXIgeiA9IE1hdGgubG9nKG4pO1xuICAgICAgICAgICAgdmFyIHMgPSAwLjUgKiBNYXRoLmV4cCgyICogeiAvIDMpO1xuICAgICAgICAgICAgdmFyIHNkID0gMC41ICogTWF0aC5zcXJ0KHogKiBzICogKG4gLSBzKSAvIG4pICogKG0gLSBuIC8gMiA8IDAgPyAtMSA6IDEpO1xuICAgICAgICAgICAgdmFyIG5ld0xlZnQgPSBNYXRoLm1heChsZWZ0LCBNYXRoLmZsb29yKGsgLSBtICogcyAvIG4gKyBzZCkpO1xuICAgICAgICAgICAgdmFyIG5ld1JpZ2h0ID0gTWF0aC5taW4ocmlnaHQsIE1hdGguZmxvb3IoayArIChuIC0gbSkgKiBzIC8gbiArIHNkKSk7XG4gICAgICAgICAgICBwYXJ0aWFsU29ydChhcnIsIGssIG5ld0xlZnQsIG5ld1JpZ2h0LCBjb21wYXJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ID0gYXJyW2tdO1xuICAgICAgICB2YXIgaSA9IGxlZnQ7XG4gICAgICAgIHZhciBqID0gcmlnaHQ7XG5cbiAgICAgICAgc3dhcChhcnIsIGxlZnQsIGspO1xuICAgICAgICBpZiAoY29tcGFyZShhcnJbcmlnaHRdLCB0KSA+IDApIHN3YXAoYXJyLCBsZWZ0LCByaWdodCk7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBqKSB7XG4gICAgICAgICAgICBzd2FwKGFyciwgaSwgaik7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB3aGlsZSAoY29tcGFyZShhcnJbaV0sIHQpIDwgMCkgaSsrO1xuICAgICAgICAgICAgd2hpbGUgKGNvbXBhcmUoYXJyW2pdLCB0KSA+IDApIGotLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb21wYXJlKGFycltsZWZ0XSwgdCkgPT09IDApIHN3YXAoYXJyLCBsZWZ0LCBqKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgICAgICBzd2FwKGFyciwgaiwgcmlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGogPD0gaykgbGVmdCA9IGogKyAxO1xuICAgICAgICBpZiAoayA8PSBqKSByaWdodCA9IGogLSAxO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3dhcChhcnIsIGksIGopIHtcbiAgICB2YXIgdG1wID0gYXJyW2ldO1xuICAgIGFycltpXSA9IGFycltqXTtcbiAgICBhcnJbal0gPSB0bXA7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9xdWlja3NlbGVjdC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIihmdW5jdGlvbiAoKSB7XG4gIHZhciBnanUgPSB0aGlzLmdqdSA9IHt9O1xuXG4gIC8vIEV4cG9ydCB0aGUgZ2VvanNvbiBvYmplY3QgZm9yICoqQ29tbW9uSlMqKlxuICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGdqdTtcbiAgfVxuXG4gIC8vIGFkYXB0ZWQgZnJvbSBodHRwOi8vd3d3LmtldmxpbmRldi5jb20vZ3VpL21hdGgvaW50ZXJzZWN0aW9uL0ludGVyc2VjdGlvbi5qc1xuICBnanUubGluZVN0cmluZ3NJbnRlcnNlY3QgPSBmdW5jdGlvbiAobDEsIGwyKSB7XG4gICAgdmFyIGludGVyc2VjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsMS5jb29yZGluYXRlcy5sZW5ndGggLSAyOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDw9IGwyLmNvb3JkaW5hdGVzLmxlbmd0aCAtIDI7ICsraikge1xuICAgICAgICB2YXIgYTEgPSB7XG4gICAgICAgICAgeDogbDEuY29vcmRpbmF0ZXNbaV1bMV0sXG4gICAgICAgICAgeTogbDEuY29vcmRpbmF0ZXNbaV1bMF1cbiAgICAgICAgfSxcbiAgICAgICAgICBhMiA9IHtcbiAgICAgICAgICAgIHg6IGwxLmNvb3JkaW5hdGVzW2kgKyAxXVsxXSxcbiAgICAgICAgICAgIHk6IGwxLmNvb3JkaW5hdGVzW2kgKyAxXVswXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYjEgPSB7XG4gICAgICAgICAgICB4OiBsMi5jb29yZGluYXRlc1tqXVsxXSxcbiAgICAgICAgICAgIHk6IGwyLmNvb3JkaW5hdGVzW2pdWzBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBiMiA9IHtcbiAgICAgICAgICAgIHg6IGwyLmNvb3JkaW5hdGVzW2ogKyAxXVsxXSxcbiAgICAgICAgICAgIHk6IGwyLmNvb3JkaW5hdGVzW2ogKyAxXVswXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdWFfdCA9IChiMi54IC0gYjEueCkgKiAoYTEueSAtIGIxLnkpIC0gKGIyLnkgLSBiMS55KSAqIChhMS54IC0gYjEueCksXG4gICAgICAgICAgdWJfdCA9IChhMi54IC0gYTEueCkgKiAoYTEueSAtIGIxLnkpIC0gKGEyLnkgLSBhMS55KSAqIChhMS54IC0gYjEueCksXG4gICAgICAgICAgdV9iID0gKGIyLnkgLSBiMS55KSAqIChhMi54IC0gYTEueCkgLSAoYjIueCAtIGIxLngpICogKGEyLnkgLSBhMS55KTtcbiAgICAgICAgaWYgKHVfYiAhPSAwKSB7XG4gICAgICAgICAgdmFyIHVhID0gdWFfdCAvIHVfYixcbiAgICAgICAgICAgIHViID0gdWJfdCAvIHVfYjtcbiAgICAgICAgICBpZiAoMCA8PSB1YSAmJiB1YSA8PSAxICYmIDAgPD0gdWIgJiYgdWIgPD0gMSkge1xuICAgICAgICAgICAgaW50ZXJzZWN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgJ3R5cGUnOiAnUG9pbnQnLFxuICAgICAgICAgICAgICAnY29vcmRpbmF0ZXMnOiBbYTEueCArIHVhICogKGEyLnggLSBhMS54KSwgYTEueSArIHVhICogKGEyLnkgLSBhMS55KV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW50ZXJzZWN0cy5sZW5ndGggPT0gMCkgaW50ZXJzZWN0cyA9IGZhbHNlO1xuICAgIHJldHVybiBpbnRlcnNlY3RzO1xuICB9XG5cbiAgLy8gQm91bmRpbmcgQm94XG5cbiAgZnVuY3Rpb24gYm91bmRpbmdCb3hBcm91bmRQb2x5Q29vcmRzIChjb29yZHMpIHtcbiAgICB2YXIgeEFsbCA9IFtdLCB5QWxsID0gW11cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRzWzBdLmxlbmd0aDsgaSsrKSB7XG4gICAgICB4QWxsLnB1c2goY29vcmRzWzBdW2ldWzFdKVxuICAgICAgeUFsbC5wdXNoKGNvb3Jkc1swXVtpXVswXSlcbiAgICB9XG5cbiAgICB4QWxsID0geEFsbC5zb3J0KGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIGEgLSBiIH0pXG4gICAgeUFsbCA9IHlBbGwuc29ydChmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhIC0gYiB9KVxuXG4gICAgcmV0dXJuIFsgW3hBbGxbMF0sIHlBbGxbMF1dLCBbeEFsbFt4QWxsLmxlbmd0aCAtIDFdLCB5QWxsW3lBbGwubGVuZ3RoIC0gMV1dIF1cbiAgfVxuXG4gIGdqdS5wb2ludEluQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAocG9pbnQsIGJvdW5kcykge1xuICAgIHJldHVybiAhKHBvaW50LmNvb3JkaW5hdGVzWzFdIDwgYm91bmRzWzBdWzBdIHx8IHBvaW50LmNvb3JkaW5hdGVzWzFdID4gYm91bmRzWzFdWzBdIHx8IHBvaW50LmNvb3JkaW5hdGVzWzBdIDwgYm91bmRzWzBdWzFdIHx8IHBvaW50LmNvb3JkaW5hdGVzWzBdID4gYm91bmRzWzFdWzFdKSBcbiAgfVxuXG4gIC8vIFBvaW50IGluIFBvbHlnb25cbiAgLy8gaHR0cDovL3d3dy5lY3NlLnJwaS5lZHUvSG9tZXBhZ2VzL3dyZi9SZXNlYXJjaC9TaG9ydF9Ob3Rlcy9wbnBvbHkuaHRtbCNMaXN0aW5nIHRoZSBWZXJ0aWNlc1xuXG4gIGZ1bmN0aW9uIHBucG9seSAoeCx5LGNvb3Jkcykge1xuICAgIHZhciB2ZXJ0ID0gWyBbMCwwXSBdXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb29yZHNbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmVydC5wdXNoKGNvb3Jkc1tpXVtqXSlcbiAgICAgIH1cblx0ICB2ZXJ0LnB1c2goY29vcmRzW2ldWzBdKVxuICAgICAgdmVydC5wdXNoKFswLDBdKVxuICAgIH1cblxuICAgIHZhciBpbnNpZGUgPSBmYWxzZVxuICAgIGZvciAodmFyIGkgPSAwLCBqID0gdmVydC5sZW5ndGggLSAxOyBpIDwgdmVydC5sZW5ndGg7IGogPSBpKyspIHtcbiAgICAgIGlmICgoKHZlcnRbaV1bMF0gPiB5KSAhPSAodmVydFtqXVswXSA+IHkpKSAmJiAoeCA8ICh2ZXJ0W2pdWzFdIC0gdmVydFtpXVsxXSkgKiAoeSAtIHZlcnRbaV1bMF0pIC8gKHZlcnRbal1bMF0gLSB2ZXJ0W2ldWzBdKSArIHZlcnRbaV1bMV0pKSBpbnNpZGUgPSAhaW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIGluc2lkZVxuICB9XG5cbiAgZ2p1LnBvaW50SW5Qb2x5Z29uID0gZnVuY3Rpb24gKHAsIHBvbHkpIHtcbiAgICB2YXIgY29vcmRzID0gKHBvbHkudHlwZSA9PSBcIlBvbHlnb25cIikgPyBbIHBvbHkuY29vcmRpbmF0ZXMgXSA6IHBvbHkuY29vcmRpbmF0ZXNcblxuICAgIHZhciBpbnNpZGVCb3ggPSBmYWxzZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZ2p1LnBvaW50SW5Cb3VuZGluZ0JveChwLCBib3VuZGluZ0JveEFyb3VuZFBvbHlDb29yZHMoY29vcmRzW2ldKSkpIGluc2lkZUJveCA9IHRydWVcbiAgICB9XG4gICAgaWYgKCFpbnNpZGVCb3gpIHJldHVybiBmYWxzZVxuXG4gICAgdmFyIGluc2lkZVBvbHkgPSBmYWxzZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocG5wb2x5KHAuY29vcmRpbmF0ZXNbMV0sIHAuY29vcmRpbmF0ZXNbMF0sIGNvb3Jkc1tpXSkpIGluc2lkZVBvbHkgPSB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGluc2lkZVBvbHlcbiAgfVxuXG4gIC8vIHN1cHBvcnQgbXVsdGkgKGJ1dCBub3QgZG9udXQpIHBvbHlnb25zXG4gIGdqdS5wb2ludEluTXVsdGlQb2x5Z29uID0gZnVuY3Rpb24gKHAsIHBvbHkpIHtcbiAgICB2YXIgY29vcmRzX2FycmF5ID0gKHBvbHkudHlwZSA9PSBcIk11bHRpUG9seWdvblwiKSA/IFsgcG9seS5jb29yZGluYXRlcyBdIDogcG9seS5jb29yZGluYXRlc1xuXG4gICAgdmFyIGluc2lkZUJveCA9IGZhbHNlXG4gICAgdmFyIGluc2lkZVBvbHkgPSBmYWxzZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRzX2FycmF5Lmxlbmd0aDsgaSsrKXtcbiAgICAgIHZhciBjb29yZHMgPSBjb29yZHNfYXJyYXlbaV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIWluc2lkZUJveCl7XG4gICAgICAgICAgaWYgKGdqdS5wb2ludEluQm91bmRpbmdCb3gocCwgYm91bmRpbmdCb3hBcm91bmRQb2x5Q29vcmRzKGNvb3Jkc1tqXSkpKSB7XG4gICAgICAgICAgICBpbnNpZGVCb3ggPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWluc2lkZUJveCkgcmV0dXJuIGZhbHNlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIWluc2lkZVBvbHkpe1xuICAgICAgICAgIGlmIChwbnBvbHkocC5jb29yZGluYXRlc1sxXSwgcC5jb29yZGluYXRlc1swXSwgY29vcmRzW2pdKSkge1xuICAgICAgICAgICAgaW5zaWRlUG9seSA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5zaWRlUG9seVxuICB9XG5cbiAgZ2p1Lm51bWJlclRvUmFkaXVzID0gZnVuY3Rpb24gKG51bWJlcikge1xuICAgIHJldHVybiBudW1iZXIgKiBNYXRoLlBJIC8gMTgwO1xuICB9XG5cbiAgZ2p1Lm51bWJlclRvRGVncmVlID0gZnVuY3Rpb24gKG51bWJlcikge1xuICAgIHJldHVybiBudW1iZXIgKiAxODAgLyBNYXRoLlBJO1xuICB9XG5cbiAgLy8gd3JpdHRlbiB3aXRoIGhlbHAgZnJvbSBAdGF1dG9sb2dlXG4gIGdqdS5kcmF3Q2lyY2xlID0gZnVuY3Rpb24gKHJhZGl1c0luTWV0ZXJzLCBjZW50ZXJQb2ludCwgc3RlcHMpIHtcbiAgICB2YXIgY2VudGVyID0gW2NlbnRlclBvaW50LmNvb3JkaW5hdGVzWzFdLCBjZW50ZXJQb2ludC5jb29yZGluYXRlc1swXV0sXG4gICAgICBkaXN0ID0gKHJhZGl1c0luTWV0ZXJzIC8gMTAwMCkgLyA2MzcxLFxuICAgICAgLy8gY29udmVydCBtZXRlcnMgdG8gcmFkaWFudFxuICAgICAgcmFkQ2VudGVyID0gW2dqdS5udW1iZXJUb1JhZGl1cyhjZW50ZXJbMF0pLCBnanUubnVtYmVyVG9SYWRpdXMoY2VudGVyWzFdKV0sXG4gICAgICBzdGVwcyA9IHN0ZXBzIHx8IDE1LFxuICAgICAgLy8gMTUgc2lkZWQgY2lyY2xlXG4gICAgICBwb2x5ID0gW1tjZW50ZXJbMF0sIGNlbnRlclsxXV1dO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcHM7IGkrKykge1xuICAgICAgdmFyIGJybmcgPSAyICogTWF0aC5QSSAqIGkgLyBzdGVwcztcbiAgICAgIHZhciBsYXQgPSBNYXRoLmFzaW4oTWF0aC5zaW4ocmFkQ2VudGVyWzBdKSAqIE1hdGguY29zKGRpc3QpXG4gICAgICAgICAgICAgICsgTWF0aC5jb3MocmFkQ2VudGVyWzBdKSAqIE1hdGguc2luKGRpc3QpICogTWF0aC5jb3MoYnJuZykpO1xuICAgICAgdmFyIGxuZyA9IHJhZENlbnRlclsxXSArIE1hdGguYXRhbjIoTWF0aC5zaW4oYnJuZykgKiBNYXRoLnNpbihkaXN0KSAqIE1hdGguY29zKHJhZENlbnRlclswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNvcyhkaXN0KSAtIE1hdGguc2luKHJhZENlbnRlclswXSkgKiBNYXRoLnNpbihsYXQpKTtcbiAgICAgIHBvbHlbaV0gPSBbXTtcbiAgICAgIHBvbHlbaV1bMV0gPSBnanUubnVtYmVyVG9EZWdyZWUobGF0KTtcbiAgICAgIHBvbHlbaV1bMF0gPSBnanUubnVtYmVyVG9EZWdyZWUobG5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIFwidHlwZVwiOiBcIlBvbHlnb25cIixcbiAgICAgIFwiY29vcmRpbmF0ZXNcIjogW3BvbHldXG4gICAgfTtcbiAgfVxuXG4gIC8vIGFzc3VtZXMgcmVjdGFuZ2xlIHN0YXJ0cyBhdCBsb3dlciBsZWZ0IHBvaW50XG4gIGdqdS5yZWN0YW5nbGVDZW50cm9pZCA9IGZ1bmN0aW9uIChyZWN0YW5nbGUpIHtcbiAgICB2YXIgYmJveCA9IHJlY3RhbmdsZS5jb29yZGluYXRlc1swXTtcbiAgICB2YXIgeG1pbiA9IGJib3hbMF1bMF0sXG4gICAgICB5bWluID0gYmJveFswXVsxXSxcbiAgICAgIHhtYXggPSBiYm94WzJdWzBdLFxuICAgICAgeW1heCA9IGJib3hbMl1bMV07XG4gICAgdmFyIHh3aWR0aCA9IHhtYXggLSB4bWluO1xuICAgIHZhciB5d2lkdGggPSB5bWF4IC0geW1pbjtcbiAgICByZXR1cm4ge1xuICAgICAgJ3R5cGUnOiAnUG9pbnQnLFxuICAgICAgJ2Nvb3JkaW5hdGVzJzogW3htaW4gKyB4d2lkdGggLyAyLCB5bWluICsgeXdpZHRoIC8gMl1cbiAgICB9O1xuICB9XG5cbiAgLy8gZnJvbSBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbFxuICBnanUucG9pbnREaXN0YW5jZSA9IGZ1bmN0aW9uIChwdDEsIHB0Mikge1xuICAgIHZhciBsb24xID0gcHQxLmNvb3JkaW5hdGVzWzBdLFxuICAgICAgbGF0MSA9IHB0MS5jb29yZGluYXRlc1sxXSxcbiAgICAgIGxvbjIgPSBwdDIuY29vcmRpbmF0ZXNbMF0sXG4gICAgICBsYXQyID0gcHQyLmNvb3JkaW5hdGVzWzFdLFxuICAgICAgZExhdCA9IGdqdS5udW1iZXJUb1JhZGl1cyhsYXQyIC0gbGF0MSksXG4gICAgICBkTG9uID0gZ2p1Lm51bWJlclRvUmFkaXVzKGxvbjIgLSBsb24xKSxcbiAgICAgIGEgPSBNYXRoLnBvdyhNYXRoLnNpbihkTGF0IC8gMiksIDIpICsgTWF0aC5jb3MoZ2p1Lm51bWJlclRvUmFkaXVzKGxhdDEpKVxuICAgICAgICAqIE1hdGguY29zKGdqdS5udW1iZXJUb1JhZGl1cyhsYXQyKSkgKiBNYXRoLnBvdyhNYXRoLnNpbihkTG9uIC8gMiksIDIpLFxuICAgICAgYyA9IDIgKiBNYXRoLmF0YW4yKE1hdGguc3FydChhKSwgTWF0aC5zcXJ0KDEgLSBhKSk7XG4gICAgcmV0dXJuICg2MzcxICogYykgKiAxMDAwOyAvLyByZXR1cm5zIG1ldGVyc1xuICB9LFxuXG4gIC8vIGNoZWNrcyBpZiBnZW9tZXRyeSBsaWVzIGVudGlyZWx5IHdpdGhpbiBhIGNpcmNsZVxuICAvLyB3b3JrcyB3aXRoIFBvaW50LCBMaW5lU3RyaW5nLCBQb2x5Z29uXG4gIGdqdS5nZW9tZXRyeVdpdGhpblJhZGl1cyA9IGZ1bmN0aW9uIChnZW9tZXRyeSwgY2VudGVyLCByYWRpdXMpIHtcbiAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PSAnUG9pbnQnKSB7XG4gICAgICByZXR1cm4gZ2p1LnBvaW50RGlzdGFuY2UoZ2VvbWV0cnksIGNlbnRlcikgPD0gcmFkaXVzO1xuICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkudHlwZSA9PSAnTGluZVN0cmluZycgfHwgZ2VvbWV0cnkudHlwZSA9PSAnUG9seWdvbicpIHtcbiAgICAgIHZhciBwb2ludCA9IHt9O1xuICAgICAgdmFyIGNvb3JkaW5hdGVzO1xuICAgICAgaWYgKGdlb21ldHJ5LnR5cGUgPT0gJ1BvbHlnb24nKSB7XG4gICAgICAgIC8vIGl0J3MgZW5vdWdoIHRvIGNoZWNrIHRoZSBleHRlcmlvciByaW5nIG9mIHRoZSBQb2x5Z29uXG4gICAgICAgIGNvb3JkaW5hdGVzID0gZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb29yZGluYXRlcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSBpbiBjb29yZGluYXRlcykge1xuICAgICAgICBwb2ludC5jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzW2ldO1xuICAgICAgICBpZiAoZ2p1LnBvaW50RGlzdGFuY2UocG9pbnQsIGNlbnRlcikgPiByYWRpdXMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBhZGFwdGVkIGZyb20gaHR0cDovL3BhdWxib3Vya2UubmV0L2dlb21ldHJ5L3BvbHlhcmVhL2phdmFzY3JpcHQudHh0XG4gIGdqdS5hcmVhID0gZnVuY3Rpb24gKHBvbHlnb24pIHtcbiAgICB2YXIgYXJlYSA9IDA7XG4gICAgLy8gVE9ETzogcG9seWdvbiBob2xlcyBhdCBjb29yZGluYXRlc1sxXVxuICAgIHZhciBwb2ludHMgPSBwb2x5Z29uLmNvb3JkaW5hdGVzWzBdO1xuICAgIHZhciBqID0gcG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgdmFyIHAxLCBwMjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaiA9IGkrKykge1xuICAgICAgdmFyIHAxID0ge1xuICAgICAgICB4OiBwb2ludHNbaV1bMV0sXG4gICAgICAgIHk6IHBvaW50c1tpXVswXVxuICAgICAgfTtcbiAgICAgIHZhciBwMiA9IHtcbiAgICAgICAgeDogcG9pbnRzW2pdWzFdLFxuICAgICAgICB5OiBwb2ludHNbal1bMF1cbiAgICAgIH07XG4gICAgICBhcmVhICs9IHAxLnggKiBwMi55O1xuICAgICAgYXJlYSAtPSBwMS55ICogcDIueDtcbiAgICB9XG5cbiAgICBhcmVhIC89IDI7XG4gICAgcmV0dXJuIGFyZWE7XG4gIH0sXG5cbiAgLy8gYWRhcHRlZCBmcm9tIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9nZW9tZXRyeS9wb2x5YXJlYS9qYXZhc2NyaXB0LnR4dFxuICBnanUuY2VudHJvaWQgPSBmdW5jdGlvbiAocG9seWdvbikge1xuICAgIHZhciBmLCB4ID0gMCxcbiAgICAgIHkgPSAwO1xuICAgIC8vIFRPRE86IHBvbHlnb24gaG9sZXMgYXQgY29vcmRpbmF0ZXNbMV1cbiAgICB2YXIgcG9pbnRzID0gcG9seWdvbi5jb29yZGluYXRlc1swXTtcbiAgICB2YXIgaiA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgIHZhciBwMSwgcDI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGogPSBpKyspIHtcbiAgICAgIHZhciBwMSA9IHtcbiAgICAgICAgeDogcG9pbnRzW2ldWzFdLFxuICAgICAgICB5OiBwb2ludHNbaV1bMF1cbiAgICAgIH07XG4gICAgICB2YXIgcDIgPSB7XG4gICAgICAgIHg6IHBvaW50c1tqXVsxXSxcbiAgICAgICAgeTogcG9pbnRzW2pdWzBdXG4gICAgICB9O1xuICAgICAgZiA9IHAxLnggKiBwMi55IC0gcDIueCAqIHAxLnk7XG4gICAgICB4ICs9IChwMS54ICsgcDIueCkgKiBmO1xuICAgICAgeSArPSAocDEueSArIHAyLnkpICogZjtcbiAgICB9XG5cbiAgICBmID0gZ2p1LmFyZWEocG9seWdvbikgKiA2O1xuICAgIHJldHVybiB7XG4gICAgICAndHlwZSc6ICdQb2ludCcsXG4gICAgICAnY29vcmRpbmF0ZXMnOiBbeSAvIGYsIHggLyBmXVxuICAgIH07XG4gIH0sXG5cbiAgZ2p1LnNpbXBsaWZ5ID0gZnVuY3Rpb24gKHNvdXJjZSwga2luaykgeyAvKiBzb3VyY2VbXSBhcnJheSBvZiBnZW9qc29uIHBvaW50cyAqL1xuICAgIC8qIGtpbmtcdGluIG1ldHJlcywga2lua3MgYWJvdmUgdGhpcyBkZXB0aCBrZXB0ICAqL1xuICAgIC8qIGtpbmsgZGVwdGggaXMgdGhlIGhlaWdodCBvZiB0aGUgdHJpYW5nbGUgYWJjIHdoZXJlIGEtYiBhbmQgYi1jIGFyZSB0d28gY29uc2VjdXRpdmUgbGluZSBzZWdtZW50cyAqL1xuICAgIGtpbmsgPSBraW5rIHx8IDIwO1xuICAgIHNvdXJjZSA9IHNvdXJjZS5tYXAoZnVuY3Rpb24gKG8pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxuZzogby5jb29yZGluYXRlc1swXSxcbiAgICAgICAgbGF0OiBvLmNvb3JkaW5hdGVzWzFdXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgbl9zb3VyY2UsIG5fc3RhY2ssIG5fZGVzdCwgc3RhcnQsIGVuZCwgaSwgc2lnO1xuICAgIHZhciBkZXZfc3FyLCBtYXhfZGV2X3NxciwgYmFuZF9zcXI7XG4gICAgdmFyIHgxMiwgeTEyLCBkMTIsIHgxMywgeTEzLCBkMTMsIHgyMywgeTIzLCBkMjM7XG4gICAgdmFyIEYgPSAoTWF0aC5QSSAvIDE4MC4wKSAqIDAuNTtcbiAgICB2YXIgaW5kZXggPSBuZXcgQXJyYXkoKTsgLyogYXJheSBvZiBpbmRleGVzIG9mIHNvdXJjZSBwb2ludHMgdG8gaW5jbHVkZSBpbiB0aGUgcmVkdWNlZCBsaW5lICovXG4gICAgdmFyIHNpZ19zdGFydCA9IG5ldyBBcnJheSgpOyAvKiBpbmRpY2VzIG9mIHN0YXJ0ICYgZW5kIG9mIHdvcmtpbmcgc2VjdGlvbiAqL1xuICAgIHZhciBzaWdfZW5kID0gbmV3IEFycmF5KCk7XG5cbiAgICAvKiBjaGVjayBmb3Igc2ltcGxlIGNhc2VzICovXG5cbiAgICBpZiAoc291cmNlLmxlbmd0aCA8IDMpIHJldHVybiAoc291cmNlKTsgLyogb25lIG9yIHR3byBwb2ludHMgKi9cblxuICAgIC8qIG1vcmUgY29tcGxleCBjYXNlLiBpbml0aWFsaXplIHN0YWNrICovXG5cbiAgICBuX3NvdXJjZSA9IHNvdXJjZS5sZW5ndGg7XG4gICAgYmFuZF9zcXIgPSBraW5rICogMzYwLjAgLyAoMi4wICogTWF0aC5QSSAqIDYzNzgxMzcuMCk7IC8qIE5vdyBpbiBkZWdyZWVzICovXG4gICAgYmFuZF9zcXIgKj0gYmFuZF9zcXI7XG4gICAgbl9kZXN0ID0gMDtcbiAgICBzaWdfc3RhcnRbMF0gPSAwO1xuICAgIHNpZ19lbmRbMF0gPSBuX3NvdXJjZSAtIDE7XG4gICAgbl9zdGFjayA9IDE7XG5cbiAgICAvKiB3aGlsZSB0aGUgc3RhY2sgaXMgbm90IGVtcHR5ICAuLi4gKi9cbiAgICB3aGlsZSAobl9zdGFjayA+IDApIHtcblxuICAgICAgLyogLi4uIHBvcCB0aGUgdG9wLW1vc3QgZW50cmllcyBvZmYgdGhlIHN0YWNrcyAqL1xuXG4gICAgICBzdGFydCA9IHNpZ19zdGFydFtuX3N0YWNrIC0gMV07XG4gICAgICBlbmQgPSBzaWdfZW5kW25fc3RhY2sgLSAxXTtcbiAgICAgIG5fc3RhY2stLTtcblxuICAgICAgaWYgKChlbmQgLSBzdGFydCkgPiAxKSB7IC8qIGFueSBpbnRlcm1lZGlhdGUgcG9pbnRzID8gKi9cblxuICAgICAgICAvKiAuLi4geWVzLCBzbyBmaW5kIG1vc3QgZGV2aWFudCBpbnRlcm1lZGlhdGUgcG9pbnQgdG9cbiAgICAgICAgZWl0aGVyIHNpZGUgb2YgbGluZSBqb2luaW5nIHN0YXJ0ICYgZW5kIHBvaW50cyAqL1xuXG4gICAgICAgIHgxMiA9IChzb3VyY2VbZW5kXS5sbmcoKSAtIHNvdXJjZVtzdGFydF0ubG5nKCkpO1xuICAgICAgICB5MTIgPSAoc291cmNlW2VuZF0ubGF0KCkgLSBzb3VyY2Vbc3RhcnRdLmxhdCgpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHgxMikgPiAxODAuMCkgeDEyID0gMzYwLjAgLSBNYXRoLmFicyh4MTIpO1xuICAgICAgICB4MTIgKj0gTWF0aC5jb3MoRiAqIChzb3VyY2VbZW5kXS5sYXQoKSArIHNvdXJjZVtzdGFydF0ubGF0KCkpKTsgLyogdXNlIGF2ZyBsYXQgdG8gcmVkdWNlIGxuZyAqL1xuICAgICAgICBkMTIgPSAoeDEyICogeDEyKSArICh5MTIgKiB5MTIpO1xuXG4gICAgICAgIGZvciAoaSA9IHN0YXJ0ICsgMSwgc2lnID0gc3RhcnQsIG1heF9kZXZfc3FyID0gLTEuMDsgaSA8IGVuZDsgaSsrKSB7XG5cbiAgICAgICAgICB4MTMgPSBzb3VyY2VbaV0ubG5nKCkgLSBzb3VyY2Vbc3RhcnRdLmxuZygpO1xuICAgICAgICAgIHkxMyA9IHNvdXJjZVtpXS5sYXQoKSAtIHNvdXJjZVtzdGFydF0ubGF0KCk7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHgxMykgPiAxODAuMCkgeDEzID0gMzYwLjAgLSBNYXRoLmFicyh4MTMpO1xuICAgICAgICAgIHgxMyAqPSBNYXRoLmNvcyhGICogKHNvdXJjZVtpXS5sYXQoKSArIHNvdXJjZVtzdGFydF0ubGF0KCkpKTtcbiAgICAgICAgICBkMTMgPSAoeDEzICogeDEzKSArICh5MTMgKiB5MTMpO1xuXG4gICAgICAgICAgeDIzID0gc291cmNlW2ldLmxuZygpIC0gc291cmNlW2VuZF0ubG5nKCk7XG4gICAgICAgICAgeTIzID0gc291cmNlW2ldLmxhdCgpIC0gc291cmNlW2VuZF0ubGF0KCk7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHgyMykgPiAxODAuMCkgeDIzID0gMzYwLjAgLSBNYXRoLmFicyh4MjMpO1xuICAgICAgICAgIHgyMyAqPSBNYXRoLmNvcyhGICogKHNvdXJjZVtpXS5sYXQoKSArIHNvdXJjZVtlbmRdLmxhdCgpKSk7XG4gICAgICAgICAgZDIzID0gKHgyMyAqIHgyMykgKyAoeTIzICogeTIzKTtcblxuICAgICAgICAgIGlmIChkMTMgPj0gKGQxMiArIGQyMykpIGRldl9zcXIgPSBkMjM7XG4gICAgICAgICAgZWxzZSBpZiAoZDIzID49IChkMTIgKyBkMTMpKSBkZXZfc3FyID0gZDEzO1xuICAgICAgICAgIGVsc2UgZGV2X3NxciA9ICh4MTMgKiB5MTIgLSB5MTMgKiB4MTIpICogKHgxMyAqIHkxMiAtIHkxMyAqIHgxMikgLyBkMTI7IC8vIHNvbHZlIHRyaWFuZ2xlXG4gICAgICAgICAgaWYgKGRldl9zcXIgPiBtYXhfZGV2X3Nxcikge1xuICAgICAgICAgICAgc2lnID0gaTtcbiAgICAgICAgICAgIG1heF9kZXZfc3FyID0gZGV2X3NxcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF4X2Rldl9zcXIgPCBiYW5kX3NxcikgeyAvKiBpcyB0aGVyZSBhIHNpZy4gaW50ZXJtZWRpYXRlIHBvaW50ID8gKi9cbiAgICAgICAgICAvKiAuLi4gbm8sIHNvIHRyYW5zZmVyIGN1cnJlbnQgc3RhcnQgcG9pbnQgKi9cbiAgICAgICAgICBpbmRleFtuX2Rlc3RdID0gc3RhcnQ7XG4gICAgICAgICAgbl9kZXN0Kys7XG4gICAgICAgIH0gZWxzZSB7IC8qIC4uLiB5ZXMsIHNvIHB1c2ggdHdvIHN1Yi1zZWN0aW9ucyBvbiBzdGFjayBmb3IgZnVydGhlciBwcm9jZXNzaW5nICovXG4gICAgICAgICAgbl9zdGFjaysrO1xuICAgICAgICAgIHNpZ19zdGFydFtuX3N0YWNrIC0gMV0gPSBzaWc7XG4gICAgICAgICAgc2lnX2VuZFtuX3N0YWNrIC0gMV0gPSBlbmQ7XG4gICAgICAgICAgbl9zdGFjaysrO1xuICAgICAgICAgIHNpZ19zdGFydFtuX3N0YWNrIC0gMV0gPSBzdGFydDtcbiAgICAgICAgICBzaWdfZW5kW25fc3RhY2sgLSAxXSA9IHNpZztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLyogLi4uIG5vIGludGVybWVkaWF0ZSBwb2ludHMsIHNvIHRyYW5zZmVyIGN1cnJlbnQgc3RhcnQgcG9pbnQgKi9cbiAgICAgICAgaW5kZXhbbl9kZXN0XSA9IHN0YXJ0O1xuICAgICAgICBuX2Rlc3QrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiB0cmFuc2ZlciBsYXN0IHBvaW50ICovXG4gICAgaW5kZXhbbl9kZXN0XSA9IG5fc291cmNlIC0gMTtcbiAgICBuX2Rlc3QrKztcblxuICAgIC8qIG1ha2UgcmV0dXJuIGFycmF5ICovXG4gICAgdmFyIHIgPSBuZXcgQXJyYXkoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5fZGVzdDsgaSsrKVxuICAgICAgci5wdXNoKHNvdXJjZVtpbmRleFtpXV0pO1xuXG4gICAgcmV0dXJuIHIubWFwKGZ1bmN0aW9uIChvKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIlBvaW50XCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbby5sbmcsIG8ubGF0XVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLmh0bWwjZGVzdFBvaW50XG4gIGdqdS5kZXN0aW5hdGlvblBvaW50ID0gZnVuY3Rpb24gKHB0LCBicm5nLCBkaXN0KSB7XG4gICAgZGlzdCA9IGRpc3QvNjM3MTsgIC8vIGNvbnZlcnQgZGlzdCB0byBhbmd1bGFyIGRpc3RhbmNlIGluIHJhZGlhbnNcbiAgICBicm5nID0gZ2p1Lm51bWJlclRvUmFkaXVzKGJybmcpO1xuXG4gICAgdmFyIGxvbjEgPSBnanUubnVtYmVyVG9SYWRpdXMocHQuY29vcmRpbmF0ZXNbMF0pO1xuICAgIHZhciBsYXQxID0gZ2p1Lm51bWJlclRvUmFkaXVzKHB0LmNvb3JkaW5hdGVzWzFdKTtcblxuICAgIHZhciBsYXQyID0gTWF0aC5hc2luKCBNYXRoLnNpbihsYXQxKSpNYXRoLmNvcyhkaXN0KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zKGxhdDEpKk1hdGguc2luKGRpc3QpKk1hdGguY29zKGJybmcpICk7XG4gICAgdmFyIGxvbjIgPSBsb24xICsgTWF0aC5hdGFuMihNYXRoLnNpbihicm5nKSpNYXRoLnNpbihkaXN0KSpNYXRoLmNvcyhsYXQxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zKGRpc3QpLU1hdGguc2luKGxhdDEpKk1hdGguc2luKGxhdDIpKTtcbiAgICBsb24yID0gKGxvbjIrMypNYXRoLlBJKSAlICgyKk1hdGguUEkpIC0gTWF0aC5QSTsgIC8vIG5vcm1hbGlzZSB0byAtMTgwLi4rMTgwwrpcblxuICAgIHJldHVybiB7XG4gICAgICAndHlwZSc6ICdQb2ludCcsXG4gICAgICAnY29vcmRpbmF0ZXMnOiBbZ2p1Lm51bWJlclRvRGVncmVlKGxvbjIpLCBnanUubnVtYmVyVG9EZWdyZWUobGF0MildXG4gICAgfTtcbiAgfTtcblxufSkoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dlb2pzb24tdXRpbHMvZ2VvanNvbi11dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuKiBAbGljZW5zZSBnZXQtY2xvc2VzdCBodHRwczovL2dpdGh1Yi5jb20vY29zbW9zaW8vZ2V0LWNsb3Nlc3RcbipcbiogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4qXG4qIENvcHlyaWdodCAoYykgMjAxNC0yMDE3IE9saXZpZXIgU2NoZXJyZXIgPHBvZGUuZnJAZ21haWwuY29tPlxuKi9cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEdldCB0aGUgY2xvc2VzdCBudW1iZXIgaW4gYW4gYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBpdGVtIHRoZSBiYXNlIG51bWJlclxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgdGhlIGFycmF5IHRvIHNlYXJjaCBpbnRvXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXREaWZmIHJldHVybnMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgYmFzZSBudW1iZXIgYW5kXG4gKiAgIGFuZCB0aGUgY3VycmVudGx5IHJlYWQgaXRlbSBpbiB0aGUgYXJyYXkuIFRoZSBpdGVtIHdoaWNoIHJldHVybmVkIHRoZSBzbWFsbGVzdCBkaWZmZXJlbmNlIHdpbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZ2V0Q2xvc2VzdChpdGVtLCBhcnJheSwgZ2V0RGlmZikge1xuICAgIHZhciBjbG9zZXN0LFxuICAgICAgICBkaWZmO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZXQgY2xvc2VzdCBleHBlY3RzIGFuIGFycmF5IGFzIHNlY29uZCBhcmd1bWVudFwiKTtcbiAgICB9XG5cbiAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChjb21wYXJlZEl0ZW0sIGNvbXBhcmVkSXRlbUluZGV4KSB7XG4gICAgICAgIHZhciB0aGlzRGlmZiA9IGdldERpZmYoY29tcGFyZWRJdGVtLCBpdGVtKTtcblxuICAgICAgICBpZiAodGhpc0RpZmYgPj0gMCAmJiAodHlwZW9mIGRpZmYgPT0gXCJ1bmRlZmluZWRcIiB8fCB0aGlzRGlmZiA8IGRpZmYpKSB7XG4gICAgICAgICAgICBkaWZmID0gdGhpc0RpZmY7XG4gICAgICAgICAgICBjbG9zZXN0ID0gY29tcGFyZWRJdGVtSW5kZXg7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjbG9zZXN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKipcbiAgICogR2V0IHRoZSBjbG9zZXN0IG51bWJlciBpbiBhbiBhcnJheSBnaXZlbiBhIGJhc2UgbnVtYmVyXG4gICAqIEV4YW1wbGU6IGNsb3Nlc3QoMzAsIFsyMCwgMCwgNTAsIDI5XSkgd2lsbCByZXR1cm4gMyBhcyAyOSBpcyB0aGUgY2xvc2VzdCBpdGVtXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpdGVtIHRoZSBiYXNlIG51bWJlclxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSB0aGUgYXJyYXkgb2YgbnVtYmVycyB0byBzZWFyY2ggaW50b1xuICAgKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgaXRlbSBpbiB0aGUgYXJyYXlcbiAgICovXG4gIG51bWJlcjogZnVuY3Rpb24gY2xvc2VzdE51bWJlcihpdGVtLCBhcnJheSkge1xuICAgICAgcmV0dXJuIF9nZXRDbG9zZXN0KGl0ZW0sIGFycmF5LCBmdW5jdGlvbiAoY29tcGFyZWRJdGVtLCBpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGguYWJzKGNvbXBhcmVkSXRlbSAtIGl0ZW0pO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2xvc2VzdCBncmVhdGVyIG51bWJlciBpbiBhbiBhcnJheSBnaXZlbiBhIGJhc2UgbnVtYmVyXG4gICAqIEV4YW1wbGU6IGNsb3Nlc3QoMzAsIFsyMCwgMCwgNTAsIDI5XSkgd2lsbCByZXR1cm4gMiBhcyA1MCBpcyB0aGUgY2xvc2VzdCBncmVhdGVyIGl0ZW1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGl0ZW0gdGhlIGJhc2UgbnVtYmVyXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IHRoZSBhcnJheSBvZiBudW1iZXJzIHRvIHNlYXJjaCBpbnRvXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBpdGVtIGluIHRoZSBhcnJheVxuICAgKi9cbiAgZ3JlYXRlck51bWJlcjogZnVuY3Rpb24gY2xvc2VzdEdyZWF0ZXJOdW1iZXIoaXRlbSwgYXJyYXkpIHtcbiAgICAgIHJldHVybiBfZ2V0Q2xvc2VzdChpdGVtLCBhcnJheSwgZnVuY3Rpb24gKGNvbXBhcmVkSXRlbSwgaXRlbSkge1xuICAgICAgICAgIHJldHVybiBjb21wYXJlZEl0ZW0gLSBpdGVtO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2xvc2VzdCBsb3dlciBudW1iZXIgaW4gYW4gYXJyYXkgZ2l2ZW4gYSBiYXNlIG51bWJlclxuICAgKiBFeGFtcGxlOiBjbG9zZXN0KDMwLCBbMjAsIDAsIDUwLCAyOV0pIHdpbGwgcmV0dXJuIDAgYXMgMjAgaXMgdGhlIGNsb3Nlc3QgbG93ZXIgaXRlbVxuICAgKiBAcGFyYW0ge051bWJlcn0gaXRlbSB0aGUgYmFzZSBudW1iZXJcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgdGhlIGFycmF5IG9mIG51bWJlcnMgdG8gc2VhcmNoIGludG9cbiAgICogQHJldHVybnMge051bWJlcn0gdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IGl0ZW0gaW4gdGhlIGFycmF5XG4gICAqL1xuICBsb3dlck51bWJlcjogZnVuY3Rpb24gY2xvc2VzdExvd2VyTnVtYmVyKGl0ZW0sIGFycmF5KSB7XG4gICAgcmV0dXJuIF9nZXRDbG9zZXN0KGl0ZW0sIGFycmF5LCBmdW5jdGlvbiAoY29tcGFyZWRJdGVtLCBpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtIC0gY29tcGFyZWRJdGVtO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNsb3Nlc3QgaXRlbSBpbiBhbiBhcnJheSBnaXZlbiBhIGJhc2UgaXRlbSBhbmQgYSBjb21wYXJhdG9yIGZ1bmN0aW9uXG4gICAqIEV4YW1wbGUgKGNsb3Nlc3QoXCJsdW5kaVwiLCBbXCJtdW5kaVwiLCBcIm1hcmRpXCJdLCBnZXRMZXZlbnNodGVpbkRpc3RhbmNlKSkgd2lsbCByZXR1cm4gMCBmb3IgXCJsdW5kaVwiXG4gICAqIEBwYXJhbSB7Kn0gaXRlbSB0aGUgYmFzZSBpdGVtXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IGFuIGFycmF5IG9mIGl0ZW1zXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgYSBjb21wYXJhdG9mIGZ1bmN0aW9uIHRvIGNvbXBhcmUgdGhlIGl0ZW1zXG4gICAqXG4gICAqIFRoZSBmdW5jdGlvbiBsb29rcyBsaWtlOlxuICAgKlxuICAgKiAvLyBjb21wYXJlZEl0ZW0gY29tZXMgZnJvbSB0aGUgYXJyYXlcbiAgICogLy8gYmFzZUl0ZW0gaXMgdGhlIGl0ZW0gdG8gY29tcGFyZSB0aGUgb3RoZXJzIHRvXG4gICAqIC8vIEl0IHJldHVybnMgYSBudW1iZXJcbiAgICogZnVuY3Rpb24gY29tcGFyYXRvcihjb21wYXJlZEl0ZW0sIGJhc2VJdGVtKSB7XG4gICAqICAgICByZXR1cm4gY29tcGFyZWRJdGVtIC0gYmFzZUl0ZW07XG4gICAqIH1cbiAgICovXG4gIGN1c3RvbTogZnVuY3Rpb24gY2xvc2VzdEN1c3RvbShpdGVtLCBhcnJheSwgY29tcGFyYXRvcikge1xuICAgIHJldHVybiBfZ2V0Q2xvc2VzdChpdGVtLCBhcnJheSwgY29tcGFyYXRvcik7XG4gIH1cblxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dldC1jbG9zZXN0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHR1cmZiYm94ID0gcmVxdWlyZSgnQHR1cmYvYmJveCcpO1xudmFyIGluc2lkZSA9IHJlcXVpcmUoJ0B0dXJmL2luc2lkZScpO1xudmFyIHJidXNoID0gcmVxdWlyZSgncmJ1c2gnKTtcblxuLyoqXG4gKiBNZXJnZXMgYSBzcGVjaWZpZWQgcHJvcGVydHkgZnJvbSBhIEZlYXR1cmVDb2xsZWN0aW9uIG9mIHBvaW50cyBpbnRvIGFcbiAqIEZlYXR1cmVDb2xsZWN0aW9uIG9mIHBvbHlnb25zLiBHaXZlbiBhbiBgaW5Qcm9wZXJ0eWAgb24gcG9pbnRzIGFuZCBhbiBgb3V0UHJvcGVydHlgXG4gKiBmb3IgcG9seWdvbnMsIHRoaXMgZmluZHMgZXZlcnkgcG9pbnQgdGhhdCBsaWVzIHdpdGhpbiBlYWNoIHBvbHlnb24sIGNvbGxlY3RzIHRoZVxuICogYGluUHJvcGVydHlgIHZhbHVlcyBmcm9tIHRob3NlIHBvaW50cywgYW5kIGFkZHMgdGhlbSBhcyBhbiBhcnJheSB0byBgb3V0UHJvcGVydHlgXG4gKiBvbiB0aGUgcG9seWdvbi5cbiAqXG4gKiBAbmFtZSBjb2xsZWN0XG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBwb2x5Z29ucyBwb2x5Z29ucyB3aXRoIHZhbHVlcyBvbiB3aGljaCB0byBhZ2dyZWdhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBwb2ludHMgcG9pbnRzIHRvIGJlIGFnZ3JlZ2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpblByb3BlcnR5IHByb3BlcnR5IHRvIGJlIG5lc3RlZCBmcm9tXG4gKiBAcGFyYW0ge3N0cmluZ30gb3V0UHJvcGVydHkgcHJvcGVydHkgdG8gYmUgbmVzdGVkIGludG9cbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2x5Z29uPn0gcG9seWdvbnMgd2l0aCBwcm9wZXJ0aWVzIGxpc3RlZCBiYXNlZCBvbiBgb3V0RmllbGRgXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvbHkxID0gdHVyZi5wb2x5Z29uKFtbWzAsMF0sWzEwLDBdLFsxMCwxMF0sWzAsMTBdLFswLDBdXV0pO1xuICogdmFyIHBvbHkyID0gdHVyZi5wb2x5Z29uKFtbWzEwLDBdLFsyMCwxMF0sWzIwLDIwXSxbMjAsMF0sWzEwLDBdXV0pO1xuICogdmFyIHBvbHlGQyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW3BvbHkxLCBwb2x5Ml0pO1xuICogdmFyIHB0MSA9IHR1cmYucG9pbnQoWzUsNV0sIHtwb3B1bGF0aW9uOiAyMDB9KTtcbiAqIHZhciBwdDIgPSB0dXJmLnBvaW50KFsxLDNdLCB7cG9wdWxhdGlvbjogNjAwfSk7XG4gKiB2YXIgcHQzID0gdHVyZi5wb2ludChbMTQsMl0sIHtwb3B1bGF0aW9uOiAxMDB9KTtcbiAqIHZhciBwdDQgPSB0dXJmLnBvaW50KFsxMywxXSwge3BvcHVsYXRpb246IDIwMH0pO1xuICogdmFyIHB0NSA9IHR1cmYucG9pbnQoWzE5LDddLCB7cG9wdWxhdGlvbjogMzAwfSk7XG4gKiB2YXIgcG9pbnRGQyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW3B0MSwgcHQyLCBwdDMsIHB0NCwgcHQ1XSk7XG4gKiB2YXIgY29sbGVjdGVkID0gdHVyZi5jb2xsZWN0KHBvbHlGQywgcG9pbnRGQywgJ3BvcHVsYXRpb24nLCAndmFsdWVzJyk7XG4gKiB2YXIgdmFsdWVzID0gY29sbGVjdGVkLmZlYXR1cmVzWzBdLnByb3BlcnRpZXMudmFsdWVzXG4gKiAvLz12YWx1ZXMgPT4gWzIwMCwgNjAwXVxuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2ludEZDLCBjb2xsZWN0ZWRdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvbHlnb25zLCBwb2ludHMsIGluUHJvcGVydHksIG91dFByb3BlcnR5KSB7XG4gICAgdmFyIHJ0cmVlID0gcmJ1c2goNik7XG5cbiAgICB2YXIgdHJlZUl0ZW1zID0gcG9pbnRzLmZlYXR1cmVzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluWDogaXRlbS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSxcbiAgICAgICAgICAgIG1pblk6IGl0ZW0uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0sXG4gICAgICAgICAgICBtYXhYOiBpdGVtLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdLFxuICAgICAgICAgICAgbWF4WTogaXRlbS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSxcbiAgICAgICAgICAgIHByb3BlcnR5OiBpdGVtLnByb3BlcnRpZXNbaW5Qcm9wZXJ0eV1cbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJ0cmVlLmxvYWQodHJlZUl0ZW1zKTtcbiAgICBwb2x5Z29ucy5mZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChwb2x5KSB7XG5cbiAgICAgICAgaWYgKCFwb2x5LnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHBvbHkucHJvcGVydGllcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYm94ID0gdHVyZmJib3gocG9seSk7XG4gICAgICAgIHZhciBwb3RlbnRpYWxQb2ludHMgPSBydHJlZS5zZWFyY2goe21pblg6IGJib3hbMF0sIG1pblk6IGJib3hbMV0sIG1heFg6IGJib3hbMl0sIG1heFk6IGJib3hbM119KTtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICBwb3RlbnRpYWxQb2ludHMuZm9yRWFjaChmdW5jdGlvbiAocHQpIHtcbiAgICAgICAgICAgIGlmIChpbnNpZGUoeyd0eXBlJzogJ1BvaW50JywgJ2Nvb3JkaW5hdGVzJzogW3B0Lm1pblgsIHB0Lm1pblldfSwgcG9seSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChwdC5wcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBvbHkucHJvcGVydGllc1tvdXRQcm9wZXJ0eV0gPSB2YWx1ZXM7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcG9seWdvbnM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvY29sbGVjdC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb29yZEVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuY29vcmRFYWNoO1xuXG4vKipcbiAqIFRha2VzIGlucHV0IGZlYXR1cmVzIGFuZCBmbGlwcyBhbGwgb2YgdGhlaXIgY29vcmRpbmF0ZXMgZnJvbSBgW3gsIHldYCB0byBgW3ksIHhdYC5cbiAqXG4gKiBAbmFtZSBmbGlwXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBpbnB1dCBmZWF0dXJlc1xuICogQHBhcmFtIHtib29sZWFufSBbbXV0YXRlPWZhbHNlXSBhbGxvd3MgR2VvSlNPTiBpbnB1dCB0byBiZSBtdXRhdGVkIChzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpZiB0cnVlKVxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gYSBmZWF0dXJlIG9yIHNldCBvZiBmZWF0dXJlcyBvZiB0aGUgc2FtZSB0eXBlIGFzIGBpbnB1dGAgd2l0aCBmbGlwcGVkIGNvb3JkaW5hdGVzXG4gKiBAZXhhbXBsZVxuICogdmFyIHNlcmJpYSA9IHR1cmYucG9pbnQoWzIwLjU2NjQwNiwgNDMuNDIxMDA4XSk7XG4gKlxuICogdmFyIHNhdWRpQXJhYmlhID0gdHVyZi5mbGlwKHNlcmJpYSk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3NlcmJpYSwgc2F1ZGlBcmFiaWFdO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uLCBtdXRhdGUpIHtcbiAgICBpZiAoIWdlb2pzb24pIHRocm93IG5ldyBFcnJvcignZ2VvanNvbiBpcyByZXF1aXJlZCcpO1xuICAgIC8vIGVuc3VyZSB0aGF0IHdlIGRvbid0IG1vZGlmeSBmZWF0dXJlcyBpbi1wbGFjZSBhbmQgY2hhbmdlcyB0byB0aGVcbiAgICAvLyBvdXRwdXQgZG8gbm90IGNoYW5nZSB0aGUgcHJldmlvdXMgZmVhdHVyZSwgaW5jbHVkaW5nIGNoYW5nZXMgdG8gbmVzdGVkXG4gICAgLy8gcHJvcGVydGllcy5cbiAgICBpZiAobXV0YXRlID09PSBmYWxzZSB8fCBtdXRhdGUgPT09IHVuZGVmaW5lZCkgZ2VvanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZ2VvanNvbikpO1xuXG4gICAgY29vcmRFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgICB2YXIgeCA9IGNvb3JkWzBdO1xuICAgICAgICB2YXIgeSA9IGNvb3JkWzFdO1xuICAgICAgICBjb29yZFswXSA9IHk7XG4gICAgICAgIGNvb3JkWzFdID0geDtcbiAgICB9KTtcbiAgICByZXR1cm4gZ2VvanNvbjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9mbGlwL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHNpbXBsaWZ5ID0gcmVxdWlyZSgnc2ltcGxpZnktanMnKTtcblxuLy8gc3VwcG9ydGVkIEdlb0pTT04gZ2VvbWV0cmllcywgdXNlZCB0byBjaGVjayB3aGV0aGVyIHRvIHdyYXAgaW4gc2ltcGxlRmVhdHVyZSgpXG52YXIgc3VwcG9ydGVkVHlwZXMgPSBbJ0xpbmVTdHJpbmcnLCAnTXVsdGlMaW5lU3RyaW5nJywgJ1BvbHlnb24nLCAnTXVsdGlQb2x5Z29uJ107XG5cbi8qKlxuICogVGFrZXMgYSB7QGxpbmsgTGluZVN0cmluZ30gb3Ige0BsaW5rIFBvbHlnb259IGFuZCByZXR1cm5zIGEgc2ltcGxpZmllZCB2ZXJzaW9uLiBJbnRlcm5hbGx5IHVzZXMgW3NpbXBsaWZ5LWpzXShodHRwOi8vbW91cm5lci5naXRodWIuaW8vc2ltcGxpZnktanMvKSB0byBwZXJmb3JtIHNpbXBsaWZpY2F0aW9uLlxuICpcbiAqIEBuYW1lIHNpbXBsaWZ5XG4gKiBAcGFyYW0ge0ZlYXR1cmU8KExpbmVTdHJpbmd8UG9seWdvbnxNdWx0aUxpbmVTdHJpbmd8TXVsdGlQb2x5Z29uKT58RmVhdHVyZUNvbGxlY3Rpb258R2VvbWV0cnlDb2xsZWN0aW9ufSBmZWF0dXJlIGZlYXR1cmUgdG8gYmUgc2ltcGxpZmllZFxuICogQHBhcmFtIHtudW1iZXJ9IFt0b2xlcmFuY2U9MV0gc2ltcGxpZmljYXRpb24gdG9sZXJhbmNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtoaWdoUXVhbGl0eT1mYWxzZV0gd2hldGhlciBvciBub3QgdG8gc3BlbmQgbW9yZSB0aW1lIHRvIGNyZWF0ZVxuICogYSBoaWdoZXItcXVhbGl0eSBzaW1wbGlmaWNhdGlvbiB3aXRoIGEgZGlmZmVyZW50IGFsZ29yaXRobVxuICogQHJldHVybnMge0ZlYXR1cmU8KExpbmVTdHJpbmd8UG9seWdvbnxNdWx0aUxpbmVTdHJpbmd8TXVsdGlQb2x5Z29uKT58RmVhdHVyZUNvbGxlY3Rpb258R2VvbWV0cnlDb2xsZWN0aW9ufSBhIHNpbXBsaWZpZWQgZmVhdHVyZVxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgIFstNzAuNjAzNjM3LCAtMzMuMzk5OTE4XSxcbiAqICAgWy03MC42MTQ2MjQsIC0zMy4zOTUzMzJdLFxuICogICBbLTcwLjYzOTM0MywgLTMzLjM5MjQ2Nl0sXG4gKiAgIFstNzAuNjU5OTQyLCAtMzMuMzk0NzU5XSxcbiAqICAgWy03MC42ODM5NzUsIC0zMy40MDQ1MDRdLFxuICogICBbLTcwLjY5NzAyMSwgLTMzLjQxOTQwNl0sXG4gKiAgIFstNzAuNzAxMTQxLCAtMzMuNDM0MzA2XSxcbiAqICAgWy03MC43MDA0NTQsIC0zMy40NDYzMzldLFxuICogICBbLTcwLjY5NDI3NCwgLTMzLjQ1ODM2OV0sXG4gKiAgIFstNzAuNjgyNjAxLCAtMzMuNDY1ODE2XSxcbiAqICAgWy03MC42Njg4NjksIC0zMy40NzIxMTddLFxuICogICBbLTcwLjY0NjIwOSwgLTMzLjQ3MzgzNV0sXG4gKiAgIFstNzAuNjI0OTIzLCAtMzMuNDcyMTE3XSxcbiAqICAgWy03MC42MDk4MTcsIC0zMy40NjgxMDddLFxuICogICBbLTcwLjU5NTM5NywgLTMzLjQ1ODM2OV0sXG4gKiAgIFstNzAuNTg3MTU4LCAtMzMuNDQyOTAxXSxcbiAqICAgWy03MC41ODcxNTgsIC0zMy40MjYyODNdLFxuICogICBbLTcwLjU5MDU5MSwgLTMzLjQxNDI0OF0sXG4gKiAgIFstNzAuNTk0NzExLCAtMzMuNDA2MjI0XSxcbiAqICAgWy03MC42MDM2MzcsIC0zMy4zOTk5MThdXG4gKiBdXSk7XG4gKiB2YXIgdG9sZXJhbmNlID0gMC4wMTtcbiAqXG4gKiB2YXIgc2ltcGxpZmllZCA9IHR1cmYuc2ltcGxpZnkoZmVhdHVyZSwgdG9sZXJhbmNlLCBmYWxzZSk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2ZlYXR1cmUsIHNpbXBsaWZpZWRdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZlYXR1cmUsIHRvbGVyYW5jZSwgaGlnaFF1YWxpdHkpIHtcbiAgICBpZiAoZmVhdHVyZS50eXBlID09PSAnRmVhdHVyZScpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUZlYXR1cmUoXG4gICAgICAgICAgICBzaW1wbGlmeUhlbHBlcihmZWF0dXJlLCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KSxcbiAgICAgICAgICAgIGZlYXR1cmUucHJvcGVydGllcyk7XG4gICAgfSBlbHNlIGlmIChmZWF0dXJlLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZS5mZWF0dXJlcy5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2ltcGxpZmllZCA9IHNpbXBsaWZ5SGVscGVyKGYsIHRvbGVyYW5jZSwgaGlnaFF1YWxpdHkpO1xuXG4gICAgICAgICAgICAgICAgLy8gd2UgY3JlYXRlIHNpbXBsZUZlYXR1cmUgaGVyZSBiZWNhdXNlIGl0IGRvZXNuJ3QgYXBwbHkgdG8gR2VvbWV0cnlDb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgY2FuJ3QgY3JlYXRlIGl0IGF0IHNpbXBsaWZ5SGVscGVyKClcbiAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydGVkVHlwZXMuaW5kZXhPZihzaW1wbGlmaWVkLnR5cGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpbXBsZUZlYXR1cmUoc2ltcGxpZmllZCwgZi5wcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2ltcGxpZmllZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZmVhdHVyZS50eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ0dlb21ldHJ5Q29sbGVjdGlvbicsXG4gICAgICAgICAgICBnZW9tZXRyaWVzOiBmZWF0dXJlLmdlb21ldHJpZXMubWFwKGZ1bmN0aW9uIChnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1cHBvcnRlZFR5cGVzLmluZGV4T2YoZy50eXBlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaW1wbGlmeUhlbHBlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogZ1xuICAgICAgICAgICAgICAgICAgICB9LCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGc7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgIH1cbn07XG5cblxuZnVuY3Rpb24gc2ltcGxpZnlIZWxwZXIoZmVhdHVyZSwgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSkge1xuICAgIGlmIChmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ0xpbmVTdHJpbmcnLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHNpbXBsaWZ5TGluZShmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnTXVsdGlMaW5lU3RyaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ011bHRpTGluZVN0cmluZycsXG4gICAgICAgICAgICBjb29yZGluYXRlczogZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5tYXAoZnVuY3Rpb24gKGxpbmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpbXBsaWZ5TGluZShsaW5lcywgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBzaW1wbGlmeVBvbHlnb24oZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcywgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSlcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdNdWx0aVBvbHlnb24nLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChyaW5ncykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzaW1wbGlmeVBvbHlnb24ocmluZ3MsIHRvbGVyYW5jZSwgaGlnaFF1YWxpdHkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1bnN1cHBvcnRlZCBnZW9tZXRyeSB0eXBlIHN1cHBsaWVkXG4gICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgIH1cbn1cblxuLypcbiogcmV0dXJucyB0cnVlIGlmIHJpbmcncyBmaXJzdCBjb29yZGluYXRlIGlzIHRoZSBzYW1lIGFzIGl0cyBsYXN0XG4qL1xuZnVuY3Rpb24gY2hlY2tWYWxpZGl0eShyaW5nKSB7XG4gICAgaWYgKHJpbmcubGVuZ3RoIDwgMykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy9pZiB0aGUgbGFzdCBwb2ludCBpcyB0aGUgc2FtZSBhcyB0aGUgZmlyc3QsIGl0J3Mgbm90IGEgdHJpYW5nbGVcbiAgICB9IGVsc2UgaWYgKHJpbmcubGVuZ3RoID09PSAzICYmXG4gICAgICAoKHJpbmdbMl1bMF0gPT09IHJpbmdbMF1bMF0pICYmIChyaW5nWzJdWzFdID09PSByaW5nWzBdWzFdKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2ltcGxlRmVhdHVyZShnZW9tLCBwcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBnZW9tZXRyeTogZ2VvbSxcbiAgICAgICAgcHJvcGVydGllczogcHJvcGVydGllc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5TGluZShjb29yZGluYXRlcywgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSkge1xuICAgIHJldHVybiBzaW1wbGlmeShjb29yZGluYXRlcy5tYXAoZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgIHJldHVybiB7eDogY29vcmRbMF0sIHk6IGNvb3JkWzFdLCB6OiBjb29yZFsyXX07XG4gICAgfSksIHRvbGVyYW5jZSwgaGlnaFF1YWxpdHkpLm1hcChmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIHJldHVybiAoY29vcmRzLnopID8gW2Nvb3Jkcy54LCBjb29yZHMueSwgY29vcmRzLnpdIDogW2Nvb3Jkcy54LCBjb29yZHMueV07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5UG9seWdvbihjb29yZGluYXRlcywgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSkge1xuICAgIHJldHVybiBjb29yZGluYXRlcy5tYXAoZnVuY3Rpb24gKHJpbmcpIHtcbiAgICAgICAgdmFyIHB0cyA9IHJpbmcubWFwKGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHt4OiBjb29yZFswXSwgeTogY29vcmRbMV19O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHB0cy5sZW5ndGggPCA0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcG9seWdvbicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaW1wbGVSaW5nID0gc2ltcGxpZnkocHRzLCB0b2xlcmFuY2UsIGhpZ2hRdWFsaXR5KS5tYXAoZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICAgICAgcmV0dXJuIFtjb29yZHMueCwgY29vcmRzLnldO1xuICAgICAgICB9KTtcbiAgICAgICAgLy9yZW1vdmUgMSBwZXJjZW50IG9mIHRvbGVyYW5jZSB1bnRpbCBlbm91Z2ggcG9pbnRzIHRvIG1ha2UgYSB0cmlhbmdsZVxuICAgICAgICB3aGlsZSAoIWNoZWNrVmFsaWRpdHkoc2ltcGxlUmluZykpIHtcbiAgICAgICAgICAgIHRvbGVyYW5jZSAtPSB0b2xlcmFuY2UgKiAwLjAxO1xuICAgICAgICAgICAgc2ltcGxlUmluZyA9IHNpbXBsaWZ5KHB0cywgdG9sZXJhbmNlLCBoaWdoUXVhbGl0eSkubWFwKGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2Nvb3Jkcy54LCBjb29yZHMueV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoc2ltcGxlUmluZ1tzaW1wbGVSaW5nLmxlbmd0aCAtIDFdWzBdICE9PSBzaW1wbGVSaW5nWzBdWzBdKSB8fFxuICAgICAgICAgICAgICAgIChzaW1wbGVSaW5nW3NpbXBsZVJpbmcubGVuZ3RoIC0gMV1bMV0gIT09IHNpbXBsZVJpbmdbMF1bMV0pKSB7XG4gICAgICAgICAgICBzaW1wbGVSaW5nLnB1c2goc2ltcGxlUmluZ1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpbXBsZVJpbmc7XG4gICAgfSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9zaW1wbGlmeS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG4gKGMpIDIwMTMsIFZsYWRpbWlyIEFnYWZvbmtpblxuIFNpbXBsaWZ5LmpzLCBhIGhpZ2gtcGVyZm9ybWFuY2UgSlMgcG9seWxpbmUgc2ltcGxpZmljYXRpb24gbGlicmFyeVxuIG1vdXJuZXIuZ2l0aHViLmlvL3NpbXBsaWZ5LWpzXG4qL1xuXG4oZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbi8vIHRvIHN1aXQgeW91ciBwb2ludCBmb3JtYXQsIHJ1biBzZWFyY2gvcmVwbGFjZSBmb3IgJy54JyBhbmQgJy55Jztcbi8vIGZvciAzRCB2ZXJzaW9uLCBzZWUgM2QgYnJhbmNoIChjb25maWd1cmFiaWxpdHkgd291bGQgZHJhdyBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBvdmVyaGVhZClcblxuLy8gc3F1YXJlIGRpc3RhbmNlIGJldHdlZW4gMiBwb2ludHNcbmZ1bmN0aW9uIGdldFNxRGlzdChwMSwgcDIpIHtcblxuICAgIHZhciBkeCA9IHAxLnggLSBwMi54LFxuICAgICAgICBkeSA9IHAxLnkgLSBwMi55O1xuXG4gICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG4vLyBzcXVhcmUgZGlzdGFuY2UgZnJvbSBhIHBvaW50IHRvIGEgc2VnbWVudFxuZnVuY3Rpb24gZ2V0U3FTZWdEaXN0KHAsIHAxLCBwMikge1xuXG4gICAgdmFyIHggPSBwMS54LFxuICAgICAgICB5ID0gcDEueSxcbiAgICAgICAgZHggPSBwMi54IC0geCxcbiAgICAgICAgZHkgPSBwMi55IC0geTtcblxuICAgIGlmIChkeCAhPT0gMCB8fCBkeSAhPT0gMCkge1xuXG4gICAgICAgIHZhciB0ID0gKChwLnggLSB4KSAqIGR4ICsgKHAueSAtIHkpICogZHkpIC8gKGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgICAgICBpZiAodCA+IDEpIHtcbiAgICAgICAgICAgIHggPSBwMi54O1xuICAgICAgICAgICAgeSA9IHAyLnk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0ID4gMCkge1xuICAgICAgICAgICAgeCArPSBkeCAqIHQ7XG4gICAgICAgICAgICB5ICs9IGR5ICogdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGR4ID0gcC54IC0geDtcbiAgICBkeSA9IHAueSAtIHk7XG5cbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG4vLyByZXN0IG9mIHRoZSBjb2RlIGRvZXNuJ3QgY2FyZSBhYm91dCBwb2ludCBmb3JtYXRcblxuLy8gYmFzaWMgZGlzdGFuY2UtYmFzZWQgc2ltcGxpZmljYXRpb25cbmZ1bmN0aW9uIHNpbXBsaWZ5UmFkaWFsRGlzdChwb2ludHMsIHNxVG9sZXJhbmNlKSB7XG5cbiAgICB2YXIgcHJldlBvaW50ID0gcG9pbnRzWzBdLFxuICAgICAgICBuZXdQb2ludHMgPSBbcHJldlBvaW50XSxcbiAgICAgICAgcG9pbnQ7XG5cbiAgICBmb3IgKHZhciBpID0gMSwgbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuXG4gICAgICAgIGlmIChnZXRTcURpc3QocG9pbnQsIHByZXZQb2ludCkgPiBzcVRvbGVyYW5jZSkge1xuICAgICAgICAgICAgbmV3UG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgcHJldlBvaW50ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldlBvaW50ICE9PSBwb2ludCkgbmV3UG9pbnRzLnB1c2gocG9pbnQpO1xuXG4gICAgcmV0dXJuIG5ld1BvaW50cztcbn1cblxuLy8gc2ltcGxpZmljYXRpb24gdXNpbmcgb3B0aW1pemVkIERvdWdsYXMtUGV1Y2tlciBhbGdvcml0aG0gd2l0aCByZWN1cnNpb24gZWxpbWluYXRpb25cbmZ1bmN0aW9uIHNpbXBsaWZ5RG91Z2xhc1BldWNrZXIocG9pbnRzLCBzcVRvbGVyYW5jZSkge1xuXG4gICAgdmFyIGxlbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICAgIE1hcmtlckFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5LFxuICAgICAgICBtYXJrZXJzID0gbmV3IE1hcmtlckFycmF5KGxlbiksXG4gICAgICAgIGZpcnN0ID0gMCxcbiAgICAgICAgbGFzdCA9IGxlbiAtIDEsXG4gICAgICAgIHN0YWNrID0gW10sXG4gICAgICAgIG5ld1BvaW50cyA9IFtdLFxuICAgICAgICBpLCBtYXhTcURpc3QsIHNxRGlzdCwgaW5kZXg7XG5cbiAgICBtYXJrZXJzW2ZpcnN0XSA9IG1hcmtlcnNbbGFzdF0gPSAxO1xuXG4gICAgd2hpbGUgKGxhc3QpIHtcblxuICAgICAgICBtYXhTcURpc3QgPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IGZpcnN0ICsgMTsgaSA8IGxhc3Q7IGkrKykge1xuICAgICAgICAgICAgc3FEaXN0ID0gZ2V0U3FTZWdEaXN0KHBvaW50c1tpXSwgcG9pbnRzW2ZpcnN0XSwgcG9pbnRzW2xhc3RdKTtcblxuICAgICAgICAgICAgaWYgKHNxRGlzdCA+IG1heFNxRGlzdCkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBtYXhTcURpc3QgPSBzcURpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF4U3FEaXN0ID4gc3FUb2xlcmFuY2UpIHtcbiAgICAgICAgICAgIG1hcmtlcnNbaW5kZXhdID0gMTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goZmlyc3QsIGluZGV4LCBpbmRleCwgbGFzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIGZpcnN0ID0gc3RhY2sucG9wKCk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChtYXJrZXJzW2ldKSBuZXdQb2ludHMucHVzaChwb2ludHNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdQb2ludHM7XG59XG5cbi8vIGJvdGggYWxnb3JpdGhtcyBjb21iaW5lZCBmb3IgYXdlc29tZSBwZXJmb3JtYW5jZVxuZnVuY3Rpb24gc2ltcGxpZnkocG9pbnRzLCB0b2xlcmFuY2UsIGhpZ2hlc3RRdWFsaXR5KSB7XG5cbiAgICB2YXIgc3FUb2xlcmFuY2UgPSB0b2xlcmFuY2UgIT09IHVuZGVmaW5lZCA/IHRvbGVyYW5jZSAqIHRvbGVyYW5jZSA6IDE7XG5cbiAgICBwb2ludHMgPSBoaWdoZXN0UXVhbGl0eSA/IHBvaW50cyA6IHNpbXBsaWZ5UmFkaWFsRGlzdChwb2ludHMsIHNxVG9sZXJhbmNlKTtcbiAgICBwb2ludHMgPSBzaW1wbGlmeURvdWdsYXNQZXVja2VyKHBvaW50cywgc3FUb2xlcmFuY2UpO1xuXG4gICAgcmV0dXJuIHBvaW50cztcbn1cblxuLy8gZXhwb3J0IGFzIEFNRCBtb2R1bGUgLyBOb2RlIG1vZHVsZSAvIGJyb3dzZXIgb3Igd29ya2VyIHZhcmlhYmxlXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBzaW1wbGlmeTsgfSk7XG5lbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgbW9kdWxlLmV4cG9ydHMgPSBzaW1wbGlmeTtcbmVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgc2VsZi5zaW1wbGlmeSA9IHNpbXBsaWZ5O1xuZWxzZSB3aW5kb3cuc2ltcGxpZnkgPSBzaW1wbGlmeTtcblxufSkoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NpbXBsaWZ5LWpzL3NpbXBsaWZ5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGxpbmVzdHJpbmcgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykubGluZVN0cmluZztcbnZhciBTcGxpbmUgPSByZXF1aXJlKCcuL3NwbGluZS5qcycpO1xuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIExpbmVTdHJpbmd8bGluZX0gYW5kIHJldHVybnMgYSBjdXJ2ZWQgdmVyc2lvblxuICogYnkgYXBwbHlpbmcgYSBbQmV6aWVyIHNwbGluZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CJUMzJUE5emllcl9zcGxpbmUpXG4gKiBhbGdvcml0aG0uXG4gKlxuICogVGhlIGJlemllciBzcGxpbmUgaW1wbGVtZW50YXRpb24gaXMgYnkgW0xlc3playBSeWJpY2tpXShodHRwOi8vbGVzemVrLnJ5Ymlja2kuY2MvKS5cbiAqXG4gKiBAbmFtZSBiZXppZXJcbiAqIEBwYXJhbSB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gbGluZSBpbnB1dCBMaW5lU3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gW3Jlc29sdXRpb249MTAwMDBdIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGJldHdlZW4gcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gW3NoYXJwbmVzcz0wLjg1XSBhIG1lYXN1cmUgb2YgaG93IGN1cnZ5IHRoZSBwYXRoIHNob3VsZCBiZSBiZXR3ZWVuIHNwbGluZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBjdXJ2ZWQgbGluZVxuICogQGV4YW1wbGVcbiAqIHZhciBsaW5lID0gdHVyZi5saW5lU3RyaW5nKFtcbiAqICAgWy03Ni4wOTEzMDgsIDE4LjQyNzUwMV0sXG4gKiAgIFstNzYuNjk1NTU2LCAxOC43Mjk1MDFdLFxuICogICBbLTc2LjU1MjczNCwgMTkuNDA0NDNdLFxuICogICBbLTc0LjYxOTE0LCAxOS4xMzQ3ODldLFxuICogICBbLTczLjY1MjM0MywgMjAuMDc2NTddLFxuICogICBbLTczLjE1Nzk1OCwgMjAuMjEwNjU2XVxuICogXSk7XG4gKlxuICogdmFyIGN1cnZlZCA9IHR1cmYuYmV6aWVyKGxpbmUpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtsaW5lLCBjdXJ2ZWRdXG4gKiBjdXJ2ZWQucHJvcGVydGllcyA9IHsgc3Ryb2tlOiAnIzBGMCcgfTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGluZSwgcmVzb2x1dGlvbiwgc2hhcnBuZXNzKSB7XG4gICAgdmFyIGNvb3JkcyA9IFtdO1xuXG4gICAgdmFyIHNwbGluZSA9IG5ldyBTcGxpbmUoe1xuICAgICAgICBwb2ludHM6IGxpbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uIChwdCkge1xuICAgICAgICAgICAgcmV0dXJuIHt4OiBwdFswXSwgeTogcHRbMV19O1xuICAgICAgICB9KSxcbiAgICAgICAgZHVyYXRpb246IHJlc29sdXRpb24sXG4gICAgICAgIHNoYXJwbmVzczogc2hhcnBuZXNzXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGluZS5kdXJhdGlvbjsgaSArPSAxMCkge1xuICAgICAgICB2YXIgcG9zID0gc3BsaW5lLnBvcyhpKTtcbiAgICAgICAgaWYgKE1hdGguZmxvb3IoaSAvIDEwMCkgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBjb29yZHMucHVzaChbcG9zLngsIHBvcy55XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGluZXN0cmluZyhjb29yZHMsIGxpbmUucHJvcGVydGllcyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvYmV6aWVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogZXNsaW50LWRpc2FibGUgKi9cblxuIC8qKlxuICAgKiBCZXppZXJTcGxpbmVcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2xlc3pla3IvYmV6aWVyLXNwbGluZS1qc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAY29weXJpZ2h0XG4gICAqIENvcHlyaWdodCAoYykgMjAxMyBMZXN6ZWsgUnliaWNraVxuICAgKlxuICAgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAgICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICAgKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gICAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICAgKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICAgKlxuICAgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAgICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAgICpcbiAgICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gICAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgICogU09GVFdBUkUuXG4gICAqL1xudmFyIFNwbGluZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdGhpcy5wb2ludHMgPSBvcHRpb25zLnBvaW50cyB8fCBbXTtcbiAgICB0aGlzLmR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbiB8fCAxMDAwMDtcbiAgICB0aGlzLnNoYXJwbmVzcyA9IG9wdGlvbnMuc2hhcnBuZXNzIHx8IDAuODU7XG4gICAgdGhpcy5jZW50ZXJzID0gW107XG4gICAgdGhpcy5jb250cm9scyA9IFtdO1xuICAgIHRoaXMuc3RlcExlbmd0aCA9IG9wdGlvbnMuc3RlcExlbmd0aCB8fCA2MDtcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMucG9pbnRzLmxlbmd0aDtcbiAgICB0aGlzLmRlbGF5ID0gMDtcbiAgICAvLyB0aGlzIGlzIHRvIGVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggdGhlIDJkIHZlcnNpb25cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHRoaXMucG9pbnRzW2ldLnogPSB0aGlzLnBvaW50c1tpXS56IHx8IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICB2YXIgcDEgPSB0aGlzLnBvaW50c1tpXTtcbiAgICAgICAgdmFyIHAyID0gdGhpcy5wb2ludHNbaSArIDFdO1xuICAgICAgICB0aGlzLmNlbnRlcnMucHVzaCh7XG4gICAgICAgICAgICB4OiAocDEueCArIHAyLngpIC8gMixcbiAgICAgICAgICAgIHk6IChwMS55ICsgcDIueSkgLyAyLFxuICAgICAgICAgICAgejogKHAxLnogKyBwMi56KSAvIDJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuY29udHJvbHMucHVzaChbdGhpcy5wb2ludHNbMF0sIHRoaXMucG9pbnRzWzBdXSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNlbnRlcnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBwMSA9IHRoaXMuY2VudGVyc1tpXTtcbiAgICAgICAgdmFyIHAyID0gdGhpcy5jZW50ZXJzW2kgKyAxXTtcbiAgICAgICAgdmFyIGR4ID0gdGhpcy5wb2ludHNbaSArIDFdLnggLSAodGhpcy5jZW50ZXJzW2ldLnggKyB0aGlzLmNlbnRlcnNbaSArIDFdLngpIC8gMjtcbiAgICAgICAgdmFyIGR5ID0gdGhpcy5wb2ludHNbaSArIDFdLnkgLSAodGhpcy5jZW50ZXJzW2ldLnkgKyB0aGlzLmNlbnRlcnNbaSArIDFdLnkpIC8gMjtcbiAgICAgICAgdmFyIGR6ID0gdGhpcy5wb2ludHNbaSArIDFdLnogLSAodGhpcy5jZW50ZXJzW2ldLnkgKyB0aGlzLmNlbnRlcnNbaSArIDFdLnopIC8gMjtcbiAgICAgICAgdGhpcy5jb250cm9scy5wdXNoKFt7XG4gICAgICAgICAgICB4OiAoMS4wIC0gdGhpcy5zaGFycG5lc3MpICogdGhpcy5wb2ludHNbaSArIDFdLnggKyB0aGlzLnNoYXJwbmVzcyAqICh0aGlzLmNlbnRlcnNbaV0ueCArIGR4KSxcbiAgICAgICAgICAgIHk6ICgxLjAgLSB0aGlzLnNoYXJwbmVzcykgKiB0aGlzLnBvaW50c1tpICsgMV0ueSArIHRoaXMuc2hhcnBuZXNzICogKHRoaXMuY2VudGVyc1tpXS55ICsgZHkpLFxuICAgICAgICAgICAgejogKDEuMCAtIHRoaXMuc2hhcnBuZXNzKSAqIHRoaXMucG9pbnRzW2kgKyAxXS56ICsgdGhpcy5zaGFycG5lc3MgKiAodGhpcy5jZW50ZXJzW2ldLnogKyBkeil9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6ICgxLjAgLSB0aGlzLnNoYXJwbmVzcykgKiB0aGlzLnBvaW50c1tpICsgMV0ueCArIHRoaXMuc2hhcnBuZXNzICogKHRoaXMuY2VudGVyc1tpICsgMV0ueCArIGR4KSxcbiAgICAgICAgICAgICAgICB5OiAoMS4wIC0gdGhpcy5zaGFycG5lc3MpICogdGhpcy5wb2ludHNbaSArIDFdLnkgKyB0aGlzLnNoYXJwbmVzcyAqICh0aGlzLmNlbnRlcnNbaSArIDFdLnkgKyBkeSksXG4gICAgICAgICAgICAgICAgejogKDEuMCAtIHRoaXMuc2hhcnBuZXNzKSAqIHRoaXMucG9pbnRzW2kgKyAxXS56ICsgdGhpcy5zaGFycG5lc3MgKiAodGhpcy5jZW50ZXJzW2kgKyAxXS56ICsgZHopfV0pO1xuICAgIH1cbiAgICB0aGlzLmNvbnRyb2xzLnB1c2goW3RoaXMucG9pbnRzW3RoaXMubGVuZ3RoIC0gMV0sIHRoaXMucG9pbnRzW3RoaXMubGVuZ3RoIC0gMV1dKTtcbiAgICB0aGlzLnN0ZXBzID0gdGhpcy5jYWNoZVN0ZXBzKHRoaXMuc3RlcExlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4gIC8qXG4gICAgQ2FjaGVzIGFuIGFycmF5IG9mIGVxdWlkaXN0YW50IChtb3JlIG9yIGxlc3MpIHBvaW50cyBvbiB0aGUgY3VydmUuXG4gICovXG5TcGxpbmUucHJvdG90eXBlLmNhY2hlU3RlcHMgPSBmdW5jdGlvbiAobWluZGlzdCkge1xuICAgIHZhciBzdGVwcyA9IFtdO1xuICAgIHZhciBsYXN0c3RlcCA9IHRoaXMucG9zKDApO1xuICAgIHN0ZXBzLnB1c2goMCk7XG4gICAgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLmR1cmF0aW9uOyB0ICs9IDEwKSB7XG4gICAgICAgIHZhciBzdGVwID0gdGhpcy5wb3ModCk7XG4gICAgICAgIHZhciBkaXN0ID0gTWF0aC5zcXJ0KChzdGVwLnggLSBsYXN0c3RlcC54KSAqIChzdGVwLnggLSBsYXN0c3RlcC54KSArIChzdGVwLnkgLSBsYXN0c3RlcC55KSAqIChzdGVwLnkgLSBsYXN0c3RlcC55KSArIChzdGVwLnogLSBsYXN0c3RlcC56KSAqIChzdGVwLnogLSBsYXN0c3RlcC56KSk7XG4gICAgICAgIGlmIChkaXN0ID4gbWluZGlzdCkge1xuICAgICAgICAgICAgc3RlcHMucHVzaCh0KTtcbiAgICAgICAgICAgIGxhc3RzdGVwID0gc3RlcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RlcHM7XG59O1xuXG4gIC8qXG4gICAgcmV0dXJucyBhbmdsZSBhbmQgc3BlZWQgaW4gdGhlIGdpdmVuIHBvaW50IGluIHRoZSBjdXJ2ZVxuICAqL1xuU3BsaW5lLnByb3RvdHlwZS52ZWN0b3IgPSBmdW5jdGlvbiAodCkge1xuICAgIHZhciBwMSA9IHRoaXMucG9zKHQgKyAxMCk7XG4gICAgdmFyIHAyID0gdGhpcy5wb3ModCAtIDEwKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbmdsZToxODAgKiBNYXRoLmF0YW4yKHAxLnkgLSBwMi55LCBwMS54IC0gcDIueCkgLyAzLjE0LFxuICAgICAgICBzcGVlZDpNYXRoLnNxcnQoKHAyLnggLSBwMS54KSAqIChwMi54IC0gcDEueCkgKyAocDIueSAtIHAxLnkpICogKHAyLnkgLSBwMS55KSArIChwMi56IC0gcDEueikgKiAocDIueiAtIHAxLnopKVxuICAgIH07XG59O1xuXG4gIC8qXG4gICAgR2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvaW50LCBnaXZlbiB0aW1lLlxuXG4gICAgV0FSTklORzogVGhlIHNwZWVkIGlzIG5vdCBjb25zdGFudC4gVGhlIHRpbWUgaXQgdGFrZXMgYmV0d2VlbiBjb250cm9sIHBvaW50cyBpcyBjb25zdGFudC5cblxuICAgIEZvciBjb25zdGFudCBzcGVlZCwgdXNlIFNwbGluZS5zdGVwc1tpXTtcbiAgKi9cblNwbGluZS5wcm90b3R5cGUucG9zID0gZnVuY3Rpb24gKHRpbWUpIHtcblxuICAgIGZ1bmN0aW9uIGJlemllcih0LCBwMSwgYzEsIGMyLCBwMikge1xuICAgICAgICB2YXIgQiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgdDIgPSB0ICogdCwgdDMgPSB0MiAqIHQ7XG4gICAgICAgICAgICByZXR1cm4gWyh0MyksICgzICogdDIgKiAoMSAtIHQpKSwgKDMgKiB0ICogKDEgLSB0KSAqICgxIC0gdCkpLCAoKDEgLSB0KSAqICgxIC0gdCkgKiAoMSAtIHQpKV07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBiID0gQih0KTtcbiAgICAgICAgdmFyIHBvcyA9IHtcbiAgICAgICAgICAgIHggOiBwMi54ICogYlswXSArIGMyLnggKiBiWzFdICsgYzEueCAqIGJbMl0gKyBwMS54ICogYlszXSxcbiAgICAgICAgICAgIHkgOiBwMi55ICogYlswXSArIGMyLnkgKiBiWzFdICsgYzEueSAqIGJbMl0gKyBwMS55ICogYlszXSxcbiAgICAgICAgICAgIHogOiBwMi56ICogYlswXSArIGMyLnogKiBiWzFdICsgYzEueiAqIGJbMl0gKyBwMS56ICogYlszXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcG9zO1xuICAgIH1cbiAgICB2YXIgdCA9IHRpbWUgLSB0aGlzLmRlbGF5O1xuICAgIGlmICh0IDwgMCkgdCA9IDA7XG4gICAgaWYgKHQgPiB0aGlzLmR1cmF0aW9uKSB0ID0gdGhpcy5kdXJhdGlvbiAtIDE7XG4gICAgLy90ID0gdC10aGlzLmRlbGF5O1xuICAgIHZhciB0MiA9ICh0KSAvIHRoaXMuZHVyYXRpb247XG4gICAgaWYgKHQyID49IDEpIHJldHVybiB0aGlzLnBvaW50c1t0aGlzLmxlbmd0aCAtIDFdO1xuXG4gICAgdmFyIG4gPSBNYXRoLmZsb29yKCh0aGlzLnBvaW50cy5sZW5ndGggLSAxKSAqIHQyKTtcbiAgICB2YXIgdDEgPSAodGhpcy5sZW5ndGggLSAxKSAqIHQyIC0gbjtcbiAgICByZXR1cm4gYmV6aWVyKHQxLCB0aGlzLnBvaW50c1tuXSwgdGhpcy5jb250cm9sc1tuXVsxXSwgdGhpcy5jb250cm9sc1tuICsgMV1bMF0sIHRoaXMucG9pbnRzW24gKyAxXSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNwbGluZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2Jlemllci9zcGxpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDE0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaW5zaWRlID0gcmVxdWlyZSgnQHR1cmYvaW5zaWRlJyk7XG5cbi8qKlxuICogVGFrZXMgYSBzZXQgb2Yge0BsaW5rIFBvaW50fHBvaW50c30gYW5kIGEgc2V0IG9mIHtAbGluayBQb2x5Z29ufHBvbHlnb25zfSBhbmQgcGVyZm9ybXMgYSBzcGF0aWFsIGpvaW4uXG4gKlxuICogQG5hbWUgdGFnXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPFBvaW50Pn0gcG9pbnRzIGlucHV0IHBvaW50c1xuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2x5Z29uPn0gcG9seWdvbnMgaW5wdXQgcG9seWdvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBwcm9wZXJ0eSBpbiBgcG9seWdvbnNgIHRvIGFkZCB0byBqb2luZWQgezxQb2ludD59IGZlYXR1cmVzXG4gKiBAcGFyYW0ge3N0cmluZ30gb3V0RmllbGQgcHJvcGVydHkgaW4gYHBvaW50c2AgaW4gd2hpY2ggdG8gc3RvcmUgam9pbmVkIHByb3BlcnR5IGZyb20gYHBvbHlnb25zYFxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvaW50Pn0gcG9pbnRzIHdpdGggYGNvbnRhaW5pbmdQb2x5SWRgIHByb3BlcnR5IGNvbnRhaW5pbmcgdmFsdWVzIGZyb20gYHBvbHlJZGBcbiAqIEBleGFtcGxlXG4gKiB2YXIgcHQxID0gdHVyZi5wb2ludChbLTc3LCA0NF0pO1xuICogdmFyIHB0MiA9IHR1cmYucG9pbnQoWy03NywgMzhdKTtcbiAqIHZhciBwb2x5MSA9IHR1cmYucG9seWdvbihbW1xuICogICBbLTgxLCA0MV0sXG4gKiAgIFstODEsIDQ3XSxcbiAqICAgWy03MiwgNDddLFxuICogICBbLTcyLCA0MV0sXG4gKiAgIFstODEsIDQxXVxuICogXV0sIHtwb3A6IDMwMDB9KTtcbiAqIHZhciBwb2x5MiA9IHR1cmYucG9seWdvbihbW1xuICogICBbLTgxLCAzNV0sXG4gKiAgIFstODEsIDQxXSxcbiAqICAgWy03MiwgNDFdLFxuICogICBbLTcyLCAzNV0sXG4gKiAgIFstODEsIDM1XVxuICogXV0sIHtwb3A6IDEwMDB9KTtcbiAqXG4gKiB2YXIgcG9pbnRzID0gdHVyZi5mZWF0dXJlQ29sbGVjdGlvbihbcHQxLCBwdDJdKTtcbiAqIHZhciBwb2x5Z29ucyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW3BvbHkxLCBwb2x5Ml0pO1xuICpcbiAqIHZhciB0YWdnZWQgPSB0dXJmLnRhZyhwb2ludHMsIHBvbHlnb25zLCAncG9wJywgJ3BvcHVsYXRpb24nKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbdGFnZ2VkLCBwb2x5Z29uc11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9pbnRzLCBwb2x5Z29ucywgZmllbGQsIG91dEZpZWxkKSB7XG4gICAgLy8gcHJldmVudCBtdXRhdGlvbnNcbiAgICBwb2ludHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBvaW50cykpO1xuICAgIHBvbHlnb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwb2x5Z29ucykpO1xuICAgIHBvaW50cy5mZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChwdCkge1xuICAgICAgICBpZiAoIXB0LnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHB0LnByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBwb2x5Z29ucy5mZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChwb2x5KSB7XG4gICAgICAgICAgICBpZiAocHQucHJvcGVydGllc1tvdXRGaWVsZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBpc0luc2lkZSA9IGluc2lkZShwdCwgcG9seSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzSW5zaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHB0LnByb3BlcnRpZXNbb3V0RmllbGRdID0gcG9seS5wcm9wZXJ0aWVzW2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBwb2ludHM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvdGFnL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMTkzNTE3NS9zYW1wbGluZy1hLXJhbmRvbS1zdWJzZXQtZnJvbS1hbi1hcnJheVxudmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLmZlYXR1cmVDb2xsZWN0aW9uO1xuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBhbmQgcmV0dXJucyBhIEZlYXR1cmVDb2xsZWN0aW9uIHdpdGggZ2l2ZW4gbnVtYmVyIG9mIHtAbGluayBGZWF0dXJlfGZlYXR1cmVzfSBhdCByYW5kb20uXG4gKlxuICogQG5hbWUgc2FtcGxlXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufSBmZWF0dXJlY29sbGVjdGlvbiBzZXQgb2YgaW5wdXQgZmVhdHVyZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gbnVtYmVyIG9mIGZlYXR1cmVzIHRvIHNlbGVjdFxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9ufSBhIEZlYXR1cmVDb2xsZWN0aW9uIHdpdGggYG5gIGZlYXR1cmVzXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvaW50cyA9IHR1cmYucmFuZG9tKCdwb2ludHMnLCAxMDAsIHtcbiAqICAgYmJveDogWy04MCwgMzAsIC02MCwgNjBdXG4gKiB9KTtcbiAqXG4gKiB2YXIgc2FtcGxlID0gdHVyZi5zYW1wbGUocG9pbnRzLCA1KTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9pbnRzLCBzYW1wbGVdXG4gKiB0dXJmLmZlYXR1cmVFYWNoKHNhbXBsZSwgZnVuY3Rpb24gKGN1cnJlbnRGZWF0dXJlKSB7XG4gKiAgIGN1cnJlbnRGZWF0dXJlLnByb3BlcnRpZXNbJ21hcmtlci1zaXplJ10gPSAnbGFyZ2UnO1xuICogICBjdXJyZW50RmVhdHVyZS5wcm9wZXJ0aWVzWydtYXJrZXItY29sb3InXSA9ICcjMDAwJztcbiAqIH0pO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmZWF0dXJlY29sbGVjdGlvbiwgbnVtKSB7XG4gICAgdmFyIG91dEZDID0gZmVhdHVyZUNvbGxlY3Rpb24oZ2V0UmFuZG9tU3ViYXJyYXkoZmVhdHVyZWNvbGxlY3Rpb24uZmVhdHVyZXMsIG51bSkpO1xuICAgIHJldHVybiBvdXRGQztcbn07XG5cbmZ1bmN0aW9uIGdldFJhbmRvbVN1YmFycmF5KGFyciwgc2l6ZSkge1xuICAgIHZhciBzaHVmZmxlZCA9IGFyci5zbGljZSgwKSwgaSA9IGFyci5sZW5ndGgsIG1pbiA9IGkgLSBzaXplLCB0ZW1wLCBpbmRleDtcbiAgICB3aGlsZSAoaS0tID4gbWluKSB7XG4gICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoaSArIDEpICogTWF0aC5yYW5kb20oKSk7XG4gICAgICAgIHRlbXAgPSBzaHVmZmxlZFtpbmRleF07XG4gICAgICAgIHNodWZmbGVkW2luZGV4XSA9IHNodWZmbGVkW2ldO1xuICAgICAgICBzaHVmZmxlZFtpXSA9IHRlbXA7XG4gICAgfVxuICAgIHJldHVybiBzaHVmZmxlZC5zbGljZShtaW4pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvc2FtcGxlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRpc3RhbmNlID0gcmVxdWlyZSgnQHR1cmYvZGlzdGFuY2UnKTtcblxuLyoqXG4gKiBUYWtlcyBhIGJvdW5kaW5nIGJveCBhbmQgY2FsY3VsYXRlcyB0aGUgbWluaW11bSBzcXVhcmUgYm91bmRpbmcgYm94IHRoYXRcbiAqIHdvdWxkIGNvbnRhaW4gdGhlIGlucHV0LlxuICpcbiAqIEBuYW1lIHNxdWFyZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBiYm94IGV4dGVudCBpbiBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXSBvcmRlclxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IGEgc3F1YXJlIHN1cnJvdW5kaW5nIGBiYm94YFxuICogQGV4YW1wbGVcbiAqIHZhciBiYm94ID0gWy0yMCwtMjAsLTE1LDBdO1xuICogdmFyIHNxdWFyZWQgPSB0dXJmLnNxdWFyZShiYm94KTtcbiAqIHZhciBmZWF0dXJlcyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICB0dXJmLmJib3hQb2x5Z29uKGJib3gpLFxuICogICB0dXJmLmJib3hQb2x5Z29uKHNxdWFyZWQpXG4gKiBdKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbZmVhdHVyZXNdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJib3gpIHtcbiAgICB2YXIgd2VzdCA9IGJib3hbMF07XG4gICAgdmFyIHNvdXRoID0gYmJveFsxXTtcbiAgICB2YXIgZWFzdCA9IGJib3hbMl07XG4gICAgdmFyIG5vcnRoID0gYmJveFszXTtcblxuICAgIHZhciBob3Jpem9udGFsRGlzdGFuY2UgPSBkaXN0YW5jZShiYm94LnNsaWNlKDAsIDIpLCBbZWFzdCwgc291dGhdKTtcbiAgICB2YXIgdmVydGljYWxEaXN0YW5jZSA9IGRpc3RhbmNlKGJib3guc2xpY2UoMCwgMiksIFt3ZXN0LCBub3J0aF0pO1xuICAgIGlmIChob3Jpem9udGFsRGlzdGFuY2UgPj0gdmVydGljYWxEaXN0YW5jZSkge1xuICAgICAgICB2YXIgdmVydGljYWxNaWRwb2ludCA9IChzb3V0aCArIG5vcnRoKSAvIDI7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB3ZXN0LFxuICAgICAgICAgICAgdmVydGljYWxNaWRwb2ludCAtICgoZWFzdCAtIHdlc3QpIC8gMiksXG4gICAgICAgICAgICBlYXN0LFxuICAgICAgICAgICAgdmVydGljYWxNaWRwb2ludCArICgoZWFzdCAtIHdlc3QpIC8gMilcbiAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaG9yaXpvbnRhbE1pZHBvaW50ID0gKHdlc3QgKyBlYXN0KSAvIDI7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBob3Jpem9udGFsTWlkcG9pbnQgLSAoKG5vcnRoIC0gc291dGgpIC8gMiksXG4gICAgICAgICAgICBzb3V0aCxcbiAgICAgICAgICAgIGhvcml6b250YWxNaWRwb2ludCArICgobm9ydGggLSBzb3V0aCkgLyAyKSxcbiAgICAgICAgICAgIG5vcnRoXG4gICAgICAgIF07XG4gICAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3NxdWFyZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiZWFyaW5nID0gcmVxdWlyZSgnQHR1cmYvYmVhcmluZycpO1xudmFyIGRlc3RpbmF0aW9uID0gcmVxdWlyZSgnQHR1cmYvZGVzdGluYXRpb24nKTtcbnZhciBkaXN0YW5jZSA9IHJlcXVpcmUoJ0B0dXJmL2Rpc3RhbmNlJyk7XG5cbi8qKlxuICogVGFrZXMgdHdvIHtAbGluayBQb2ludHxwb2ludHN9IGFuZCByZXR1cm5zIGEgcG9pbnQgbWlkd2F5IGJldHdlZW4gdGhlbS5cbiAqIFRoZSBtaWRwb2ludCBpcyBjYWxjdWxhdGVkIGdlb2Rlc2ljYWxseSwgbWVhbmluZyB0aGUgY3VydmF0dXJlIG9mIHRoZSBlYXJ0aCBpcyB0YWtlbiBpbnRvIGFjY291bnQuXG4gKlxuICogQG5hbWUgbWlkcG9pbnRcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPn0gcG9pbnQxIGZpcnN0IHBvaW50XG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8UG9pbnQ+fEFycmF5PG51bWJlcj59IHBvaW50MiBzZWNvbmQgcG9pbnRcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvaW50Pn0gYSBwb2ludCBtaWR3YXkgYmV0d2VlbiBgcHQxYCBhbmQgYHB0MmBcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnQxID0gdHVyZi5wb2ludChbMTQ0LjgzNDgyMywgLTM3Ljc3MTI1N10pO1xuICogdmFyIHBvaW50MiA9IHR1cmYucG9pbnQoWzE0NS4xNDI0NCwgLTM3LjgzMDkzN10pO1xuICpcbiAqIHZhciBtaWRwb2ludCA9IHR1cmYubWlkcG9pbnQocG9pbnQxLCBwb2ludDIpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2ludDEsIHBvaW50MiwgbWlkcG9pbnRdO1xuICogbWlkcG9pbnQucHJvcGVydGllc1snbWFya2VyLWNvbG9yJ10gPSAnI2YwMCc7XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvaW50MSwgcG9pbnQyKSB7XG4gICAgdmFyIGRpc3QgPSBkaXN0YW5jZShwb2ludDEsIHBvaW50MiwgJ21pbGVzJyk7XG4gICAgdmFyIGhlYWRpbmcgPSBiZWFyaW5nKHBvaW50MSwgcG9pbnQyKTtcbiAgICB2YXIgbWlkcG9pbnQgPSBkZXN0aW5hdGlvbihwb2ludDEsIGRpc3QgLyAyLCBoZWFkaW5nLCAnbWlsZXMnKTtcblxuICAgIHJldHVybiBtaWRwb2ludDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9taWRwb2ludC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkMyA9IHJlcXVpcmUoJ2QzLWdlbycpO1xudmFyIGpzdHMgPSByZXF1aXJlKCdqc3RzJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKTtcbnZhciBjZW50ZXIgPSByZXF1aXJlKCdAdHVyZi9jZW50ZXInKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGZlYXR1cmUgPSBoZWxwZXJzLmZlYXR1cmU7XG52YXIgZ2VvbUVhY2ggPSBtZXRhLmdlb21FYWNoO1xudmFyIGZlYXR1cmVFYWNoID0gbWV0YS5mZWF0dXJlRWFjaDtcbnZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IGhlbHBlcnMuZmVhdHVyZUNvbGxlY3Rpb247XG52YXIgcmFkaWFuc1RvRGlzdGFuY2UgPSBoZWxwZXJzLnJhZGlhbnNUb0Rpc3RhbmNlO1xudmFyIGRpc3RhbmNlVG9SYWRpYW5zID0gaGVscGVycy5kaXN0YW5jZVRvUmFkaWFucztcblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgYnVmZmVyIGZvciBpbnB1dCBmZWF0dXJlcyBmb3IgYSBnaXZlbiByYWRpdXMuIFVuaXRzIHN1cHBvcnRlZCBhcmUgbWlsZXMsIGtpbG9tZXRlcnMsIGFuZCBkZWdyZWVzLlxuICpcbiAqIFdoZW4gdXNpbmcgYSBuZWdhdGl2ZSByYWRpdXMsIHRoZSByZXN1bHRpbmcgZ2VvbWV0cnkgbWF5IGJlIGludmFsaWQgaWZcbiAqIGl0J3MgdG9vIHNtYWxsIGNvbXBhcmVkIHRvIHRoZSByYWRpdXMgbWFnbml0dWRlLiBJZiB0aGUgaW5wdXQgaXMgYVxuICogRmVhdHVyZUNvbGxlY3Rpb24sIG9ubHkgdmFsaWQgbWVtYmVycyB3aWxsIGJlIHJldHVybmVkIGluIHRoZSBvdXRwdXRcbiAqIEZlYXR1cmVDb2xsZWN0aW9uIC0gaS5lLiwgdGhlIG91dHB1dCBjb2xsZWN0aW9uIG1heSBoYXZlIGZld2VyIG1lbWJlcnMgdGhhblxuICogdGhlIGlucHV0LCBvciBldmVuIGJlIGVtcHR5LlxuICpcbiAqIEBuYW1lIGJ1ZmZlclxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxHZW9tZXRyeXxGZWF0dXJlPGFueT59IGdlb2pzb24gaW5wdXQgdG8gYmUgYnVmZmVyZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgZGlzdGFuY2UgdG8gZHJhdyB0aGUgYnVmZmVyIChuZWdhdGl2ZSB2YWx1ZXMgYXJlIGFsbG93ZWQpXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGFueSBvZiB0aGUgb3B0aW9ucyBzdXBwb3J0ZWQgYnkgdHVyZiB1bml0c1xuICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwcz02NF0gbnVtYmVyIG9mIHN0ZXBzXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj58dW5kZWZpbmVkfSBidWZmZXJlZCBmZWF0dXJlc1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2ludCA9IHR1cmYucG9pbnQoWy05MC41NDg2MzAsIDE0LjYxNjU5OV0pO1xuICogdmFyIGJ1ZmZlcmVkID0gdHVyZi5idWZmZXIocG9pbnQsIDUwMCwgJ21pbGVzJyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvaW50LCBidWZmZXJlZF1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbiwgcmFkaXVzLCB1bml0cywgc3RlcHMpIHtcbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb2pzb24gaXMgcmVxdWlyZWQnKTtcbiAgICAvLyBBbGxvdyBuZWdhdGl2ZSBidWZmZXJzIChcImVyb3Npb25cIikgb3IgemVyby1zaXplZCBidWZmZXJzIChcInJlcGFpciBnZW9tZXRyeVwiKVxuICAgIGlmIChyYWRpdXMgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdyYWRpdXMgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoc3RlcHMgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdzdGVwcyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG5cbiAgICAvLyBwcmV2ZW50IGlucHV0IG11dGF0aW9uXG4gICAgLy8gZ2VvanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZ2VvanNvbikpO1xuXG4gICAgLy8gZGVmYXVsdCBwYXJhbXNcbiAgICBzdGVwcyA9IHN0ZXBzIHx8IDY0O1xuICAgIHVuaXRzID0gdW5pdHMgfHwgJ2tpbG9tZXRlcnMnO1xuXG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBzd2l0Y2ggKGdlb2pzb24udHlwZSkge1xuICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6XG4gICAgICAgIGdlb21FYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkID0gYnVmZmVyKGdlb21ldHJ5LCByYWRpdXMsIHVuaXRzLCBzdGVwcyk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyZWQpIHJlc3VsdHMucHVzaChidWZmZXJlZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24ocmVzdWx0cyk7XG4gICAgY2FzZSAnRmVhdHVyZUNvbGxlY3Rpb24nOlxuICAgICAgICBmZWF0dXJlRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIG11bHRpQnVmZmVyZWQgPSBidWZmZXIoZmVhdHVyZSwgcmFkaXVzLCB1bml0cywgc3RlcHMpO1xuICAgICAgICAgICAgaWYgKG11bHRpQnVmZmVyZWQpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlRWFjaChtdWx0aUJ1ZmZlcmVkLCBmdW5jdGlvbiAoYnVmZmVyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcmVkKSByZXN1bHRzLnB1c2goYnVmZmVyZWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uKHJlc3VsdHMpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyKGdlb2pzb24sIHJhZGl1cywgdW5pdHMsIHN0ZXBzKTtcbn07XG5cbi8qKlxuICogQnVmZmVyIHNpbmdsZSBGZWF0dXJlL0dlb21ldHJ5XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZTxhbnk+fSBnZW9qc29uIGlucHV0IHRvIGJlIGJ1ZmZlcmVkXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIGRpc3RhbmNlIHRvIGRyYXcgdGhlIGJ1ZmZlclxuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz0na2lsb21ldGVycyddIGFueSBvZiB0aGUgb3B0aW9ucyBzdXBwb3J0ZWQgYnkgdHVyZiB1bml0c1xuICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwcz02NF0gbnVtYmVyIG9mIHN0ZXBzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IGJ1ZmZlcmVkIGZlYXR1cmVcbiAqL1xuZnVuY3Rpb24gYnVmZmVyKGdlb2pzb24sIHJhZGl1cywgdW5pdHMsIHN0ZXBzKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBnZW9qc29uLnByb3BlcnRpZXMgfHwge307XG4gICAgdmFyIGdlb21ldHJ5ID0gKGdlb2pzb24udHlwZSA9PT0gJ0ZlYXR1cmUnKSA/IGdlb2pzb24uZ2VvbWV0cnkgOiBnZW9qc29uO1xuXG4gICAgLy8gR2VvbWV0cnkgVHlwZXMgZmFzdGVyIHRoYW4ganN0c1xuICAgIHN3aXRjaCAoZ2VvbWV0cnkudHlwZSkge1xuICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIGdlb21FYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkID0gYnVmZmVyKGdlb21ldHJ5LCByYWRpdXMsIHVuaXRzLCBzdGVwcyk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyZWQpIHJlc3VsdHMucHVzaChidWZmZXJlZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24ocmVzdWx0cyk7XG4gICAgfVxuXG4gICAgLy8gUHJvamVjdCBHZW9KU09OIHRvIFRyYW5zdmVyc2UgTWVyY2F0b3IgcHJvamVjdGlvbiAoY29udmVydCB0byBNZXRlcnMpXG4gICAgdmFyIGRpc3RhbmNlID0gcmFkaWFuc1RvRGlzdGFuY2UoZGlzdGFuY2VUb1JhZGlhbnMocmFkaXVzLCB1bml0cyksICdtZXRlcnMnKTtcbiAgICB2YXIgcHJvamVjdGlvbiA9IGRlZmluZVByb2plY3Rpb24oZ2VvanNvbik7XG4gICAgdmFyIHByb2plY3RlZCA9IHtcbiAgICAgICAgdHlwZTogZ2VvbWV0cnkudHlwZSxcbiAgICAgICAgY29vcmRpbmF0ZXM6IHByb2plY3RDb29yZHMoZ2VvbWV0cnkuY29vcmRpbmF0ZXMsIHByb2plY3Rpb24pXG4gICAgfTtcblxuICAgIC8vIEpTVFMgYnVmZmVyIG9wZXJhdGlvblxuICAgIHZhciByZWFkZXIgPSBuZXcganN0cy5pby5HZW9KU09OUmVhZGVyKCk7XG4gICAgdmFyIGdlb20gPSByZWFkZXIucmVhZChwcm9qZWN0ZWQpO1xuICAgIHZhciBidWZmZXJlZCA9IGdlb20uYnVmZmVyKGRpc3RhbmNlKTtcbiAgICB2YXIgd3JpdGVyID0gbmV3IGpzdHMuaW8uR2VvSlNPTldyaXRlcigpO1xuICAgIGJ1ZmZlcmVkID0gd3JpdGVyLndyaXRlKGJ1ZmZlcmVkKTtcblxuICAgIC8vIERldGVjdCBpZiBlbXB0eSBnZW9tZXRyaWVzXG4gICAgaWYgKGNvb3Jkc0lzTmFOKGJ1ZmZlcmVkLmNvb3JkaW5hdGVzKSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIC8vIFVucHJvamVjdCBjb29yZGluYXRlcyAoY29udmVydCB0byBEZWdyZWVzKVxuICAgIGJ1ZmZlcmVkLmNvb3JkaW5hdGVzID0gdW5wcm9qZWN0Q29vcmRzKGJ1ZmZlcmVkLmNvb3JkaW5hdGVzLCBwcm9qZWN0aW9uKTtcbiAgICByZXR1cm4gZmVhdHVyZShidWZmZXJlZCwgcHJvcGVydGllcyk7XG59XG5cbi8qKlxuICogQ29vcmRpbmF0ZXMgaXNOYU5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBjb29yZHMgR2VvSlNPTiBDb29yZGluYXRlc1xuICogQHJldHVybnMge0Jvb2xlYW59IGlmIE5hTiBleGlzdHNcbiAqL1xuZnVuY3Rpb24gY29vcmRzSXNOYU4oY29vcmRzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29vcmRzWzBdKSkgcmV0dXJuIGNvb3Jkc0lzTmFOKGNvb3Jkc1swXSk7XG4gICAgcmV0dXJuIGlzTmFOKGNvb3Jkc1swXSk7XG59XG5cbi8qKlxuICogUHJvamVjdCBjb29yZGluYXRlcyB0byBwcm9qZWN0aW9uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gY29vcmRzIHRvIHByb2plY3RcbiAqIEBwYXJhbSB7R2VvUHJvamVjdGlvbn0gcHJvamVjdGlvbiBEMyBHZW8gUHJvamVjdGlvblxuICogQHJldHVybnMge0FycmF5PGFueT59IHByb2plY3RlZCBjb29yZGluYXRlc1xuICovXG5mdW5jdGlvbiBwcm9qZWN0Q29vcmRzKGNvb3JkcywgcHJvamVjdGlvbikge1xuICAgIGlmICh0eXBlb2YgY29vcmRzWzBdICE9PSAnb2JqZWN0JykgcmV0dXJuIHByb2plY3Rpb24oY29vcmRzKTtcbiAgICByZXR1cm4gY29vcmRzLm1hcChmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgcmV0dXJuIHByb2plY3RDb29yZHMoY29vcmQsIHByb2plY3Rpb24pO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFVuLVByb2plY3QgY29vcmRpbmF0ZXMgdG8gcHJvamVjdGlvblxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGNvb3JkcyB0byB1bi1wcm9qZWN0XG4gKiBAcGFyYW0ge0dlb1Byb2plY3Rpb259IHByb2plY3Rpb24gRDMgR2VvIFByb2plY3Rpb25cbiAqIEByZXR1cm5zIHtBcnJheTxhbnk+fSB1bi1wcm9qZWN0ZWQgY29vcmRpbmF0ZXNcbiAqL1xuZnVuY3Rpb24gdW5wcm9qZWN0Q29vcmRzKGNvb3JkcywgcHJvamVjdGlvbikge1xuICAgIGlmICh0eXBlb2YgY29vcmRzWzBdICE9PSAnb2JqZWN0JykgcmV0dXJuIHByb2plY3Rpb24uaW52ZXJ0KGNvb3Jkcyk7XG4gICAgcmV0dXJuIGNvb3Jkcy5tYXAoZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgIHJldHVybiB1bnByb2plY3RDb29yZHMoY29vcmQsIHByb2plY3Rpb24pO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIERlZmluZSBUcmFuc3ZlcnNlIE1lcmNhdG9yIHByb2plY3Rpb25cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPGFueT59IGdlb2pzb24gQmFzZSBwcm9qZWN0aW9uIG9uIGNlbnRlciBvZiBHZW9KU09OXG4gKiBAcmV0dXJucyB7R2VvUHJvamVjdGlvbn0gRDMgR2VvIFRyYW5zdmVyc2UgTWVyY2F0b3IgUHJvamVjdGlvblxuICovXG5mdW5jdGlvbiBkZWZpbmVQcm9qZWN0aW9uKGdlb2pzb24pIHtcbiAgICB2YXIgY29vcmRzID0gY2VudGVyKGdlb2pzb24pLmdlb21ldHJ5LmNvb3JkaW5hdGVzLnJldmVyc2UoKTtcbiAgICB2YXIgcm90YXRlID0gY29vcmRzLm1hcChmdW5jdGlvbiAoY29vcmQpIHsgcmV0dXJuIC1jb29yZDsgfSk7XG4gICAgdmFyIHByb2plY3Rpb24gPSBkMy5nZW9UcmFuc3ZlcnNlTWVyY2F0b3IoKVxuICAgICAgICAuY2VudGVyKGNvb3JkcylcbiAgICAgICAgLnJvdGF0ZShyb3RhdGUpXG4gICAgICAgIC5zY2FsZSg2MzczMDAwKTtcblxuICAgIHJldHVybiBwcm9qZWN0aW9uO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvYnVmZmVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0FyZWF9IGZyb20gXCIuL3NyYy9hcmVhXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQm91bmRzfSBmcm9tIFwiLi9zcmMvYm91bmRzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ2VudHJvaWR9IGZyb20gXCIuL3NyYy9jZW50cm9pZFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0NpcmNsZX0gZnJvbSBcIi4vc3JjL2NpcmNsZVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0NsaXBFeHRlbnR9IGZyb20gXCIuL3NyYy9jbGlwL2V4dGVudFwiOyAvLyBERVBSRUNBVEVEISBVc2UgZDMuZ2VvSWRlbnRpdHkoKS5jbGlwRXh0ZW50KOKApikuXG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ29udGFpbnN9IGZyb20gXCIuL3NyYy9jb250YWluc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0Rpc3RhbmNlfSBmcm9tIFwiLi9zcmMvZGlzdGFuY2VcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9HcmF0aWN1bGUsIGdyYXRpY3VsZTEwIGFzIGdlb0dyYXRpY3VsZTEwfSBmcm9tIFwiLi9zcmMvZ3JhdGljdWxlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvSW50ZXJwb2xhdGV9IGZyb20gXCIuL3NyYy9pbnRlcnBvbGF0ZVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0xlbmd0aH0gZnJvbSBcIi4vc3JjL2xlbmd0aFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb1BhdGh9IGZyb20gXCIuL3NyYy9wYXRoL2luZGV4XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQWxiZXJzfSBmcm9tIFwiLi9zcmMvcHJvamVjdGlvbi9hbGJlcnNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9BbGJlcnNVc2F9IGZyb20gXCIuL3NyYy9wcm9qZWN0aW9uL2FsYmVyc1VzYVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0F6aW11dGhhbEVxdWFsQXJlYSwgYXppbXV0aGFsRXF1YWxBcmVhUmF3IGFzIGdlb0F6aW11dGhhbEVxdWFsQXJlYVJhd30gZnJvbSBcIi4vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsRXF1YWxBcmVhXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQsIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3IGFzIGdlb0F6aW11dGhhbEVxdWlkaXN0YW50UmF3fSBmcm9tIFwiLi9zcmMvcHJvamVjdGlvbi9hemltdXRoYWxFcXVpZGlzdGFudFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0NvbmljQ29uZm9ybWFsLCBjb25pY0NvbmZvcm1hbFJhdyBhcyBnZW9Db25pY0NvbmZvcm1hbFJhd30gZnJvbSBcIi4vc3JjL3Byb2plY3Rpb24vY29uaWNDb25mb3JtYWxcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9Db25pY0VxdWFsQXJlYSwgY29uaWNFcXVhbEFyZWFSYXcgYXMgZ2VvQ29uaWNFcXVhbEFyZWFSYXd9IGZyb20gXCIuL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1YWxBcmVhXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ29uaWNFcXVpZGlzdGFudCwgY29uaWNFcXVpZGlzdGFudFJhdyBhcyBnZW9Db25pY0VxdWlkaXN0YW50UmF3fSBmcm9tIFwiLi9zcmMvcHJvamVjdGlvbi9jb25pY0VxdWlkaXN0YW50XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvRXF1aXJlY3Rhbmd1bGFyLCBlcXVpcmVjdGFuZ3VsYXJSYXcgYXMgZ2VvRXF1aXJlY3Rhbmd1bGFyUmF3fSBmcm9tIFwiLi9zcmMvcHJvamVjdGlvbi9lcXVpcmVjdGFuZ3VsYXJcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9Hbm9tb25pYywgZ25vbW9uaWNSYXcgYXMgZ2VvR25vbW9uaWNSYXd9IGZyb20gXCIuL3NyYy9wcm9qZWN0aW9uL2dub21vbmljXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvSWRlbnRpdHl9IGZyb20gXCIuL3NyYy9wcm9qZWN0aW9uL2lkZW50aXR5XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvUHJvamVjdGlvbiwgcHJvamVjdGlvbk11dGF0b3IgYXMgZ2VvUHJvamVjdGlvbk11dGF0b3J9IGZyb20gXCIuL3NyYy9wcm9qZWN0aW9uL2luZGV4XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvTWVyY2F0b3IsIG1lcmNhdG9yUmF3IGFzIGdlb01lcmNhdG9yUmF3fSBmcm9tIFwiLi9zcmMvcHJvamVjdGlvbi9tZXJjYXRvclwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb09ydGhvZ3JhcGhpYywgb3J0aG9ncmFwaGljUmF3IGFzIGdlb09ydGhvZ3JhcGhpY1Jhd30gZnJvbSBcIi4vc3JjL3Byb2plY3Rpb24vb3J0aG9ncmFwaGljXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvU3RlcmVvZ3JhcGhpYywgc3RlcmVvZ3JhcGhpY1JhdyBhcyBnZW9TdGVyZW9ncmFwaGljUmF3fSBmcm9tIFwiLi9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yLCB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcgYXMgZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yUmF3fSBmcm9tIFwiLi9zcmMvcHJvamVjdGlvbi90cmFuc3ZlcnNlTWVyY2F0b3JcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9Sb3RhdGlvbn0gZnJvbSBcIi4vc3JjL3JvdGF0aW9uXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvU3RyZWFtfSBmcm9tIFwiLi9zcmMvc3RyZWFtXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvVHJhbnNmb3JtfSBmcm9tIFwiLi9zcmMvdHJhbnNmb3JtXCI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YXJlYVN0cmVhbSwgYXJlYVJpbmdTdW19IGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7YWJzLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG52YXIgbGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSwgLy8gYm91bmRzXG4gICAgbGFtYmRhMiwgLy8gcHJldmlvdXMgbGFtYmRhLWNvb3JkaW5hdGVcbiAgICBsYW1iZGEwMCwgcGhpMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgcDAsIC8vIHByZXZpb3VzIDNEIHBvaW50XG4gICAgZGVsdGFTdW0gPSBhZGRlcigpLFxuICAgIHJhbmdlcyxcbiAgICByYW5nZTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc1JpbmdFbmQ7XG4gICAgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICBpZiAoYXJlYVJpbmdTdW0gPCAwKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24pIHBoaTEgPSA5MDtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uKSBwaGkwID0gLTkwO1xuICAgIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludChsYW1iZGEsIHBoaSkge1xuICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbn1cblxuZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gIGlmIChwMCkge1xuICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyAqIHNpZ24sXG4gICAgICAgIHBoaWksXG4gICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA+IHBoaTEpIHBoaTEgPSBwaGlpO1xuICAgIH0gZWxzZSBpZiAobGFtYmRhaSA9IChsYW1iZGFpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgIH1cbiAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCkge1xuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMCkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIH1cbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVTdGFydCgpIHtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lRW5kKCkge1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gIHAwID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGlmIChwMCkge1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIH1cbiAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIGxpbmVQb2ludChsYW1iZGEsIHBoaSk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5saW5lU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGFyZWFTdHJlYW0ubGluZUVuZCgpO1xuICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24pIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApO1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgcDAgPSBudWxsO1xufVxuXG4vLyBGaW5kcyB0aGUgbGVmdC1yaWdodCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsb25naXR1ZGVzLlxuLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbi8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXG5mdW5jdGlvbiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSB7XG4gIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbnRhaW5zKHJhbmdlLCB4KSB7XG4gIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwID0gcGhpMCA9IEluZmluaXR5KTtcbiAgcmFuZ2VzID0gW107XG4gIHN0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gIC8vIEZpcnN0LCBzb3J0IHJhbmdlcyBieSB0aGVpciBtaW5pbXVtIGxvbmdpdHVkZXMuXG4gIGlmIChuID0gcmFuZ2VzLmxlbmd0aCkge1xuICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cbiAgICBmb3IgKGkgPSAxLCBhID0gcmFuZ2VzWzBdLCBtZXJnZWQgPSBbYV07IGkgPCBuOyArK2kpIHtcbiAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XG4gICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXG4gICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgIGZvciAoZGVsdGFNYXggPSAtSW5maW5pdHksIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl07IGkgPD0gbjsgYSA9IGIsICsraSkge1xuICAgICAgYiA9IG1lcmdlZFtpXTtcbiAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJhbmdlcyA9IHJhbmdlID0gbnVsbDtcblxuICByZXR1cm4gbGFtYmRhMCA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgID8gW1tOYU4sIE5hTl0sIFtOYU4sIE5hTl1dXG4gICAgICA6IFtbbGFtYmRhMCwgcGhpMF0sIFtsYW1iZGExLCBwaGkxXV07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2JvdW5kcy5qc1xuLy8gbW9kdWxlIGlkID0gMTQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgZXBzaWxvbiwgZXBzaWxvbjIsIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcFwiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW1cIjtcblxudmFyIFcwLCBXMSxcbiAgICBYMCwgWTAsIFowLFxuICAgIFgxLCBZMSwgWjEsXG4gICAgWDIsIFkyLCBaMixcbiAgICBsYW1iZGEwMCwgcGhpMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgeDAsIHkwLCB6MDsgLy8gcHJldmlvdXMgcG9pbnRcblxudmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AsXG4gIHBvaW50OiBjZW50cm9pZFBvaW50LFxuICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBjZW50cm9pZExpbmVFbmQsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgfVxufTtcblxuLy8gQXJpdGhtZXRpYyBtZWFuIG9mIENhcnRlc2lhbiB2ZWN0b3JzLlxuZnVuY3Rpb24gY2VudHJvaWRQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbihjb3NQaGkgKiBjb3MobGFtYmRhKSwgY29zUGhpICogc2luKGxhbWJkYSksIHNpbihwaGkpKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludENhcnRlc2lhbih4LCB5LCB6KSB7XG4gICsrVzA7XG4gIFgwICs9ICh4IC0gWDApIC8gVzA7XG4gIFkwICs9ICh5IC0gWTApIC8gVzA7XG4gIFowICs9ICh6IC0gWjApIC8gVzA7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIHgwID0gY29zUGhpICogY29zKGxhbWJkYSk7XG4gIHkwID0gY29zUGhpICogc2luKGxhbWJkYSk7XG4gIHowID0gc2luKHBoaSk7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnQ7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgeCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpLFxuICAgICAgeSA9IGNvc1BoaSAqIHNpbihsYW1iZGEpLFxuICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgdyA9IGF0YW4yKHNxcnQoKHcgPSB5MCAqIHogLSB6MCAqIHkpICogdyArICh3ID0gejAgKiB4IC0geDAgKiB6KSAqIHcgKyAodyA9IHgwICogeSAtIHkwICogeCkgKiB3KSwgeDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6KTtcbiAgVzEgKz0gdztcbiAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kKCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG59XG5cbi8vIFNlZSBKLiBFLiBCcm9jaywgVGhlIEluZXJ0aWEgVGVuc29yIGZvciBhIFNwaGVyaWNhbCBUcmlhbmdsZSxcbi8vIEouIEFwcGxpZWQgTWVjaGFuaWNzIDQyLCAyMzkgKDE5NzUpLlxuZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICBjZW50cm9pZFJpbmdQb2ludChsYW1iZGEwMCwgcGhpMDApO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnQ7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKTtcbiAgeDAgPSBjb3NQaGkgKiBjb3MobGFtYmRhKTtcbiAgeTAgPSBjb3NQaGkgKiBzaW4obGFtYmRhKTtcbiAgejAgPSBzaW4ocGhpKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICB4ID0gY29zUGhpICogY29zKGxhbWJkYSksXG4gICAgICB5ID0gY29zUGhpICogc2luKGxhbWJkYSksXG4gICAgICB6ID0gc2luKHBoaSksXG4gICAgICBjeCA9IHkwICogeiAtIHowICogeSxcbiAgICAgIGN5ID0gejAgKiB4IC0geDAgKiB6LFxuICAgICAgY3ogPSB4MCAqIHkgLSB5MCAqIHgsXG4gICAgICBtID0gc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLFxuICAgICAgdyA9IGFzaW4obSksIC8vIGxpbmUgd2VpZ2h0ID0gYW5nbGVcbiAgICAgIHYgPSBtICYmIC13IC8gbTsgLy8gYXJlYSB3ZWlnaHQgbXVsdGlwbGllclxuICBYMiArPSB2ICogY3g7XG4gIFkyICs9IHYgKiBjeTtcbiAgWjIgKz0gdiAqIGN6O1xuICBXMSArPSB3O1xuICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QpIHtcbiAgVzAgPSBXMSA9XG4gIFgwID0gWTAgPSBaMCA9XG4gIFgxID0gWTEgPSBaMSA9XG4gIFgyID0gWTIgPSBaMiA9IDA7XG4gIHN0cmVhbShvYmplY3QsIGNlbnRyb2lkU3RyZWFtKTtcblxuICB2YXIgeCA9IFgyLFxuICAgICAgeSA9IFkyLFxuICAgICAgeiA9IFoyLFxuICAgICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblxuICAvLyBJZiB0aGUgYXJlYS13ZWlnaHRlZCBjY2VudHJvaWQgaXMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbGVuZ3RoLXdlaWdodGVkIGNjZW50cm9pZC5cbiAgaWYgKG0gPCBlcHNpbG9uMikge1xuICAgIHggPSBYMSwgeSA9IFkxLCB6ID0gWjE7XG4gICAgLy8gSWYgdGhlIGZlYXR1cmUgaGFzIHplcm8gbGVuZ3RoLCBmYWxsIGJhY2sgdG8gYXJpdGhtZXRpYyBtZWFuIG9mIHBvaW50IHZlY3RvcnMuXG4gICAgaWYgKFcxIDwgZXBzaWxvbikgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcbiAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIC8vIElmIHRoZSBmZWF0dXJlIHN0aWxsIGhhcyBhbiB1bmRlZmluZWQgY2NlbnRyb2lkLCB0aGVuIHJldHVybi5cbiAgICBpZiAobSA8IGVwc2lsb24yKSByZXR1cm4gW05hTiwgTmFOXTtcbiAgfVxuXG4gIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzLCBhc2luKHogLyBzcXJ0KG0pKSAqIGRlZ3JlZXNdO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jZW50cm9pZC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jb25zdGFudC5qc1xuLy8gbW9kdWxlIGlkID0gMTUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xuICBpZiAodDEgPCAxKSBiWzBdID0gYXggKyB0MSAqIGR4LCBiWzFdID0gYXkgKyB0MSAqIGR5O1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9saW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHtwYWlyfSBmcm9tIFwiLi9wYWlyc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMwLCB2YWx1ZXMxLCByZWR1Y2UpIHtcbiAgdmFyIG4wID0gdmFsdWVzMC5sZW5ndGgsXG4gICAgICBuMSA9IHZhbHVlczEubGVuZ3RoLFxuICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4wICogbjEpLFxuICAgICAgaTAsXG4gICAgICBpMSxcbiAgICAgIGksXG4gICAgICB2YWx1ZTA7XG5cbiAgaWYgKHJlZHVjZSA9PSBudWxsKSByZWR1Y2UgPSBwYWlyO1xuXG4gIGZvciAoaTAgPSBpID0gMDsgaTAgPCBuMDsgKytpMCkge1xuICAgIGZvciAodmFsdWUwID0gdmFsdWVzMFtpMF0sIGkxID0gMDsgaTEgPCBuMTsgKytpMSwgKytpKSB7XG4gICAgICB2YWx1ZXNbaV0gPSByZWR1Y2UodmFsdWUwLCB2YWx1ZXMxW2kxXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qc1xuLy8gbW9kdWxlIGlkID0gMTUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Rlc2NlbmRpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGJpc2VjdCBmcm9tIFwiLi9iaXNlY3RcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGV4dGVudCBmcm9tIFwiLi9leHRlbnRcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuaW1wb3J0IHJhbmdlIGZyb20gXCIuL3JhbmdlXCI7XG5pbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiLi90aWNrc1wiO1xuaW1wb3J0IHN0dXJnZXMgZnJvbSBcIi4vdGhyZXNob2xkL3N0dXJnZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgZG9tYWluID0gZXh0ZW50LFxuICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIH1cblxuICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICB4MSA9IHh6WzFdLFxuICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHR6ID0gdGlja1N0ZXAoeDAsIHgxLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKE1hdGguY2VpbCh4MCAvIHR6KSAqIHR6LCBNYXRoLmZsb29yKHgxIC8gdHopICogdHosIHR6KTsgLy8gZXhjbHVzaXZlXG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSB0aHJlc2hvbGRzIG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICB2YXIgbSA9IHR6Lmxlbmd0aDtcbiAgICB3aGlsZSAodHpbMF0gPD0geDApIHR6LnNoaWZ0KCksIC0tbTtcbiAgICB3aGlsZSAodHpbbSAtIDFdID4geDEpIHR6LnBvcCgpLCAtLW07XG5cbiAgICB2YXIgYmlucyA9IG5ldyBBcnJheShtICsgMSksXG4gICAgICAgIGJpbjtcblxuICAgIC8vIEluaXRpYWxpemUgYmlucy5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgYmluID0gYmluc1tpXSA9IFtdO1xuICAgICAgYmluLngwID0gaSA+IDAgPyB0eltpIC0gMV0gOiB4MDtcbiAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcbiAgICB9XG5cbiAgICAvLyBBc3NpZ24gZGF0YSB0byBiaW5zIGJ5IHZhbHVlLCBpZ25vcmluZyBhbnkgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHggPSB2YWx1ZXNbaV07XG4gICAgICBpZiAoeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgIGJpbnNbYmlzZWN0KHR6LCB4LCAwLCBtKV0ucHVzaChkYXRhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmlucztcbiAgfVxuXG4gIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB2YWx1ZTtcbiAgfTtcblxuICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW19bMF0sIF9bMV1dKSwgaGlzdG9ncmFtKSA6IGRvbWFpbjtcbiAgfTtcblxuICBoaXN0b2dyYW0udGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIHJldHVybiBoaXN0b2dyYW07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvaGlzdG9ncmFtLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY29uc3RhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2lkZW50aXR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHttYXB9IGZyb20gXCIuLi9hcnJheVwiO1xuaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBtaW4sIG1heCkge1xuICB2YWx1ZXMgPSBtYXAuY2FsbCh2YWx1ZXMsIG51bWJlcikuc29ydChhc2NlbmRpbmcpO1xuICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDIgKiAocXVhbnRpbGUodmFsdWVzLCAwLjc1KSAtIHF1YW50aWxlKHZhbHVlcywgMC4yNSkpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RocmVzaG9sZC9mcmVlZG1hbkRpYWNvbmlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGRldmlhdGlvbiBmcm9tIFwiLi4vZGV2aWF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgzLjUgKiBkZXZpYXRpb24odmFsdWVzKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc2NvdHQuanNcbi8vIG1vZHVsZSBpZCA9IDE1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qc1xuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gbixcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHN1bSArPSB2YWx1ZTtcbiAgICAgIGVsc2UgLS1tO1xuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHN1bSArPSB2YWx1ZTtcbiAgICAgIGVsc2UgLS1tO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtKSByZXR1cm4gc3VtIC8gbTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWFuLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5pbXBvcnQgcXVhbnRpbGUgZnJvbSBcIi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbnVtYmVycyA9IFtdO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcXVhbnRpbGUobnVtYmVycy5zb3J0KGFzY2VuZGluZyksIDAuNSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHZhciBuID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgIG0sXG4gICAgICBpID0gLTEsXG4gICAgICBqID0gMCxcbiAgICAgIG1lcmdlZCxcbiAgICAgIGFycmF5O1xuXG4gIHdoaWxlICgrK2kgPCBuKSBqICs9IGFycmF5c1tpXS5sZW5ndGg7XG4gIG1lcmdlZCA9IG5ldyBBcnJheShqKTtcblxuICB3aGlsZSAoLS1uID49IDApIHtcbiAgICBhcnJheSA9IGFycmF5c1tuXTtcbiAgICBtID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlICgtLW0gPj0gMCkge1xuICAgICAgbWVyZ2VkWy0tal0gPSBhcnJheVttXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lcmdlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgdmFyIGkgPSBpbmRleGVzLmxlbmd0aCwgcGVybXV0ZXMgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHBlcm11dGVzW2ldID0gYXJyYXlbaW5kZXhlc1tpXV07XG4gIHJldHVybiBwZXJtdXRlcztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9wZXJtdXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBjb21wYXJlKSB7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICB4aSxcbiAgICAgIHhqID0gdmFsdWVzW2pdO1xuXG4gIGlmIChjb21wYXJlID09IG51bGwpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBpZiAoY29tcGFyZSh4aSA9IHZhbHVlc1tpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHtcbiAgICAgIHhqID0geGksIGogPSBpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3NjYW4uanNcbi8vIG1vZHVsZSBpZCA9IDE2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgaTAsIGkxKSB7XG4gIHZhciBtID0gKGkxID09IG51bGwgPyBhcnJheS5sZW5ndGggOiBpMSkgLSAoaTAgPSBpMCA9PSBudWxsID8gMCA6ICtpMCksXG4gICAgICB0LFxuICAgICAgaTtcblxuICB3aGlsZSAobSkge1xuICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICB0ID0gYXJyYXlbbSArIGkwXTtcbiAgICBhcnJheVttICsgaTBdID0gYXJyYXlbaSArIGkwXTtcbiAgICBhcnJheVtpICsgaTBdID0gdDtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zaHVmZmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZXNbaV0pIHN1bSArPSB2YWx1ZTsgLy8gTm90ZTogemVybyBhbmQgbnVsbCBhcmUgZXF1aXZhbGVudC5cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSBzdW0gKz0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1bTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zdW0uanNcbi8vIG1vZHVsZSBpZCA9IDE2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgdHJhbnNwb3NlIGZyb20gXCIuL3RyYW5zcG9zZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRyYW5zcG9zZShhcmd1bWVudHMpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ppcC5qc1xuLy8gbW9kdWxlIGlkID0gMTY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7ZGVmYXVsdCBhcyBwb2x5Z29uQ29udGFpbnN9IGZyb20gXCIuL3BvbHlnb25Db250YWluc1wiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIGRpc3RhbmNlfSBmcm9tIFwiLi9kaXN0YW5jZVwiO1xuaW1wb3J0IHtlcHNpbG9uLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBjb250YWluc09iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNHZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHBvaW50KTtcbiAgfSxcbiAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgY29udGFpbnNHZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9pbnQob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zUG9pbnQoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0xpbmUoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cnksIHBvaW50KSB7XG4gIHJldHVybiBnZW9tZXRyeSAmJiBjb250YWluc0dlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKVxuICAgICAgPyBjb250YWluc0dlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgcG9pbnQpXG4gICAgICA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb250YWluc1BvaW50KGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICByZXR1cm4gZGlzdGFuY2UoY29vcmRpbmF0ZXMsIHBvaW50KSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNMaW5lKGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICB2YXIgYWIgPSBkaXN0YW5jZShjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0pLFxuICAgICAgYW8gPSBkaXN0YW5jZShjb29yZGluYXRlc1swXSwgcG9pbnQpLFxuICAgICAgb2IgPSBkaXN0YW5jZShwb2ludCwgY29vcmRpbmF0ZXNbMV0pO1xuICByZXR1cm4gYW8gKyBvYiA8PSBhYiArIGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zUG9seWdvbihjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgcmV0dXJuICEhcG9seWdvbkNvbnRhaW5zKGNvb3JkaW5hdGVzLm1hcChyaW5nUmFkaWFucyksIHBvaW50UmFkaWFucyhwb2ludCkpO1xufVxuXG5mdW5jdGlvbiByaW5nUmFkaWFucyhyaW5nKSB7XG4gIHJldHVybiByaW5nID0gcmluZy5tYXAocG9pbnRSYWRpYW5zKSwgcmluZy5wb3AoKSwgcmluZztcbn1cblxuZnVuY3Rpb24gcG9pbnRSYWRpYW5zKHBvaW50KSB7XG4gIHJldHVybiBbcG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnNdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gIHJldHVybiAob2JqZWN0ICYmIGNvbnRhaW5zT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSlcbiAgICAgID8gY29udGFpbnNPYmplY3RUeXBlW29iamVjdC50eXBlXVxuICAgICAgOiBjb250YWluc0dlb21ldHJ5KShvYmplY3QsIHBvaW50KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29udGFpbnMuanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7YWJzLCBjZWlsLCBlcHNpbG9ufSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIGdyYXRpY3VsZVgoeTAsIHkxLCBkeSkge1xuICB2YXIgeSA9IHJhbmdlKHkwLCB5MSAtIGVwc2lsb24sIGR5KS5jb25jYXQoeTEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4geS5tYXAoZnVuY3Rpb24oeSkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcbn1cblxuZnVuY3Rpb24gZ3JhdGljdWxlWSh4MCwgeDEsIGR4KSB7XG4gIHZhciB4ID0gcmFuZ2UoeDAsIHgxIC0gZXBzaWxvbiwgZHgpLmNvbmNhdCh4MSk7XG4gIHJldHVybiBmdW5jdGlvbih5KSB7IHJldHVybiB4Lm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gIHZhciB4MSwgeDAsIFgxLCBYMCxcbiAgICAgIHkxLCB5MCwgWTEsIFkwLFxuICAgICAgZHggPSAxMCwgZHkgPSBkeCwgRFggPSA5MCwgRFkgPSAzNjAsXG4gICAgICB4LCB5LCBYLCBZLFxuICAgICAgcHJlY2lzaW9uID0gMi41O1xuXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICByZXR1cm4ge3R5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBsaW5lcygpfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVzKCkge1xuICAgIHJldHVybiByYW5nZShjZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpXG4gICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSlcbiAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKHgwIC8gZHgpICogZHgsIHgxLCBkeCkuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFicyh4ICUgRFgpID4gZXBzaWxvbjsgfSkubWFwKHgpKVxuICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoZnVuY3Rpb24oeSkgeyByZXR1cm4gYWJzKHkgJSBEWSkgPiBlcHNpbG9uOyB9KS5tYXAoeSkpO1xuICB9XG5cbiAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxpbmVzKCkubWFwKGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7IHJldHVybiB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307IH0pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5vdXRsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgY29vcmRpbmF0ZXM6IFtcbiAgICAgICAgWChYMCkuY29uY2F0KFxuICAgICAgICBZKFkxKS5zbGljZSgxKSxcbiAgICAgICAgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLFxuICAgICAgICBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpXG4gICAgICBdXG4gICAgfTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNaW5vcigpO1xuICAgIHJldHVybiBncmF0aWN1bGUuZXh0ZW50TWFqb3IoXykuZXh0ZW50TWlub3IoXyk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbWDAsIFkwXSwgW1gxLCBZMV1dO1xuICAgIFgwID0gK19bMF1bMF0sIFgxID0gK19bMV1bMF07XG4gICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcbiAgICBpZiAoWDAgPiBYMSkgXyA9IFgwLCBYMCA9IFgxLCBYMSA9IF87XG4gICAgaWYgKFkwID4gWTEpIF8gPSBZMCwgWTAgPSBZMSwgWTEgPSBfO1xuICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XG4gICAgeTAgPSArX1swXVsxXSwgeTEgPSArX1sxXVsxXTtcbiAgICBpZiAoeDAgPiB4MSkgXyA9IHgwLCB4MCA9IHgxLCB4MSA9IF87XG4gICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xuICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNaW5vcigpO1xuICAgIHJldHVybiBncmF0aWN1bGUuc3RlcE1ham9yKF8pLnN0ZXBNaW5vcihfKTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtEWCwgRFldO1xuICAgIERYID0gK19bMF0sIERZID0gK19bMV07XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIGR4ID0gK19bMF0sIGR5ID0gK19bMV07XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICBncmF0aWN1bGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcbiAgICBwcmVjaXNpb24gPSArXztcbiAgICB4ID0gZ3JhdGljdWxlWCh5MCwgeTEsIDkwKTtcbiAgICB5ID0gZ3JhdGljdWxlWSh4MCwgeDEsIHByZWNpc2lvbik7XG4gICAgWCA9IGdyYXRpY3VsZVgoWTAsIFkxLCA5MCk7XG4gICAgWSA9IGdyYXRpY3VsZVkoWDAsIFgxLCBwcmVjaXNpb24pO1xuICAgIHJldHVybiBncmF0aWN1bGU7XG4gIH07XG5cbiAgcmV0dXJuIGdyYXRpY3VsZVxuICAgICAgLmV4dGVudE1ham9yKFtbLTE4MCwgLTkwICsgZXBzaWxvbl0sIFsxODAsIDkwIC0gZXBzaWxvbl1dKVxuICAgICAgLmV4dGVudE1pbm9yKFtbLTE4MCwgLTgwIC0gZXBzaWxvbl0sIFsxODAsIDgwICsgZXBzaWxvbl1dKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXRpY3VsZTEwKCkge1xuICByZXR1cm4gZ3JhdGljdWxlKCkoKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvZ3JhdGljdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBkZWdyZWVzLCBoYXZlcnNpbiwgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICB5MCA9IGFbMV0gKiByYWRpYW5zLFxuICAgICAgeDEgPSBiWzBdICogcmFkaWFucyxcbiAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICBjeTAgPSBjb3MoeTApLFxuICAgICAgc3kwID0gc2luKHkwKSxcbiAgICAgIGN5MSA9IGNvcyh5MSksXG4gICAgICBzeTEgPSBzaW4oeTEpLFxuICAgICAga3gwID0gY3kwICogY29zKHgwKSxcbiAgICAgIGt5MCA9IGN5MCAqIHNpbih4MCksXG4gICAgICBreDEgPSBjeTEgKiBjb3MoeDEpLFxuICAgICAga3kxID0gY3kxICogc2luKHgxKSxcbiAgICAgIGQgPSAyICogYXNpbihzcXJ0KGhhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogaGF2ZXJzaW4oeDEgLSB4MCkpKSxcbiAgICAgIGsgPSBzaW4oZCk7XG5cbiAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgQiA9IHNpbih0ICo9IGQpIC8gayxcbiAgICAgICAgQSA9IHNpbihkIC0gdCkgLyBrLFxuICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgIHkgPSBBICoga3kwICsgQiAqIGt5MSxcbiAgICAgICAgeiA9IEEgKiBzeTAgKyBCICogc3kxO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5LCB4KSAqIGRlZ3JlZXMsXG4gICAgICBhdGFuMih6LCBzcXJ0KHggKiB4ICsgeSAqIHkpKSAqIGRlZ3JlZXNcbiAgICBdO1xuICB9IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFt4MCAqIGRlZ3JlZXMsIHkwICogZGVncmVlc107XG4gIH07XG5cbiAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXG4gIHJldHVybiBpbnRlcnBvbGF0ZTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvaW50ZXJwb2xhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5XCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuLi9zdHJlYW1cIjtcbmltcG9ydCBwYXRoQXJlYSBmcm9tIFwiLi9hcmVhXCI7XG5pbXBvcnQgcGF0aEJvdW5kcyBmcm9tIFwiLi9ib3VuZHNcIjtcbmltcG9ydCBwYXRoQ2VudHJvaWQgZnJvbSBcIi4vY2VudHJvaWRcIjtcbmltcG9ydCBQYXRoQ29udGV4dCBmcm9tIFwiLi9jb250ZXh0XCI7XG5pbXBvcnQgcGF0aE1lYXN1cmUgZnJvbSBcIi4vbWVhc3VyZVwiO1xuaW1wb3J0IFBhdGhTdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb2plY3Rpb24sIGNvbnRleHQpIHtcbiAgdmFyIHBvaW50UmFkaXVzID0gNC41LFxuICAgICAgcHJvamVjdGlvblN0cmVhbSxcbiAgICAgIGNvbnRleHRTdHJlYW07XG5cbiAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK3BvaW50UmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjb250ZXh0U3RyZWFtKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICB9XG5cbiAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQXJlYSkpO1xuICAgIHJldHVybiBwYXRoQXJlYS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLm1lYXN1cmUgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhNZWFzdXJlKSk7XG4gICAgcmV0dXJuIHBhdGhNZWFzdXJlLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQm91bmRzKSk7XG4gICAgcmV0dXJuIHBhdGhCb3VuZHMucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aENlbnRyb2lkKSk7XG4gICAgcmV0dXJuIHBhdGhDZW50cm9pZC5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdGlvblN0cmVhbSA9IF8gPT0gbnVsbCA/IChwcm9qZWN0aW9uID0gbnVsbCwgaWRlbnRpdHkpIDogKHByb2plY3Rpb24gPSBfKS5zdHJlYW0sIHBhdGgpIDogcHJvamVjdGlvbjtcbiAgfTtcblxuICBwYXRoLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICBjb250ZXh0U3RyZWFtID0gXyA9PSBudWxsID8gKGNvbnRleHQgPSBudWxsLCBuZXcgUGF0aFN0cmluZykgOiBuZXcgUGF0aENvbnRleHQoY29udGV4dCA9IF8pO1xuICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cyhwb2ludFJhZGl1cyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgcGF0aC5wb2ludFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwb2ludFJhZGl1cztcbiAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgcmV0dXJuIHBhdGgucHJvamVjdGlvbihwcm9qZWN0aW9uKS5jb250ZXh0KGNvbnRleHQpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuLi9hZGRlclwiO1xuaW1wb3J0IHthYnN9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG52YXIgYXJlYVN1bSA9IGFkZGVyKCksXG4gICAgYXJlYVJpbmdTdW0gPSBhZGRlcigpLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBhcmVhU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhU3RyZWFtLnBvaW50ID0gbm9vcDtcbiAgICBhcmVhU3VtLmFkZChhYnMoYXJlYVJpbmdTdW0pKTtcbiAgICBhcmVhUmluZ1N1bS5yZXNldCgpO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhID0gYXJlYVN1bSAvIDI7XG4gICAgYXJlYVN1bS5yZXNldCgpO1xuICAgIHJldHVybiBhcmVhO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0KCkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KHgsIHkpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludCh4LCB5KSB7XG4gIGFyZWFSaW5nU3VtLmFkZCh5MCAqIHggLSB4MCAqIHkpO1xuICB4MCA9IHgsIHkwID0geTtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludCh4MDAsIHkwMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFyZWFTdHJlYW07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvYXJlYS5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGhcIjtcblxuLy8gVE9ETyBFbmZvcmNlIHBvc2l0aXZlIGFyZWEgZm9yIGV4dGVyaW9yLCBuZWdhdGl2ZSBhcmVhIGZvciBpbnRlcmlvcj9cblxudmFyIFgwID0gMCxcbiAgICBZMCA9IDAsXG4gICAgWjAgPSAwLFxuICAgIFgxID0gMCxcbiAgICBZMSA9IDAsXG4gICAgWjEgPSAwLFxuICAgIFgyID0gMCxcbiAgICBZMiA9IDAsXG4gICAgWjIgPSAwLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQsXG4gIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2VudHJvaWQgPSBaMiA/IFtYMiAvIFoyLCBZMiAvIFoyXVxuICAgICAgICA6IFoxID8gW1gxIC8gWjEsIFkxIC8gWjFdXG4gICAgICAgIDogWjAgPyBbWDAgLyBaMCwgWTAgLyBaMF1cbiAgICAgICAgOiBbTmFOLCBOYU5dO1xuICAgIFgwID0gWTAgPSBaMCA9XG4gICAgWDEgPSBZMSA9IFoxID1cbiAgICBYMiA9IFkyID0gWjIgPSAwO1xuICAgIHJldHVybiBjZW50cm9pZDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludCh4LCB5KSB7XG4gIFgwICs9IHg7XG4gIFkwICs9IHk7XG4gICsrWjA7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdExpbmU7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRMaW5lO1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludExpbmUoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gIFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gIFoxICs9IHo7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0UmluZztcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICBjZW50cm9pZFBvaW50UmluZyh4MDAsIHkwMCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRSaW5nO1xuICBjZW50cm9pZFBvaW50KHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludFJpbmcoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsXG4gICAgICBkeSA9IHkgLSB5MCxcbiAgICAgIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICBYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICBZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICBaMSArPSB6O1xuXG4gIHogPSB5MCAqIHggLSB4MCAqIHk7XG4gIFgyICs9IHogKiAoeDAgKyB4KTtcbiAgWTIgKz0geiAqICh5MCArIHkpO1xuICBaMiArPSB6ICogMztcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNlbnRyb2lkU3RyZWFtO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2NlbnRyb2lkLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHt0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5QYXRoQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzID0gXywgdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyB0aGlzLl9yYWRpdXMsIHkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBub29wXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2NvbnRleHQuanNcbi8vIG1vZHVsZSBpZCA9IDE3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4uL2FkZGVyXCI7XG5pbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG52YXIgbGVuZ3RoU3VtID0gYWRkZXIoKSxcbiAgICBsZW5ndGhSaW5nLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBsZW5ndGhTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChsZW5ndGhSaW5nKSBsZW5ndGhQb2ludCh4MDAsIHkwMCk7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbm9vcDtcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhSaW5nID0gdHJ1ZTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IG51bGw7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9ICtsZW5ndGhTdW07XG4gICAgbGVuZ3RoU3VtLnJlc2V0KCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnRGaXJzdCh4LCB5KSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xuICB4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnQoeCwgeSkge1xuICB4MCAtPSB4LCB5MCAtPSB5O1xuICBsZW5ndGhTdW0uYWRkKHNxcnQoeDAgKiB4MCArIHkwICogeTApKTtcbiAgeDAgPSB4LCB5MCA9IHk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxlbmd0aFN0cmVhbTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9tZWFzdXJlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0aFN0cmluZygpIHtcbiAgdGhpcy5fc3RyaW5nID0gW107XG59XG5cblBhdGhTdHJpbmcucHJvdG90eXBlID0ge1xuICBfcmFkaXVzOiA0LjUsXG4gIF9jaXJjbGU6IGNpcmNsZSg0LjUpLFxuICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgIGlmICgoXyA9ICtfKSAhPT0gdGhpcy5fcmFkaXVzKSB0aGlzLl9yYWRpdXMgPSBfLCB0aGlzLl9jaXJjbGUgPSBudWxsO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuX3N0cmluZy5wdXNoKFwiWlwiKTtcbiAgICB0aGlzLl9wb2ludCA9IE5hTjtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX2NpcmNsZSA9PSBudWxsKSB0aGlzLl9jaXJjbGUgPSBjaXJjbGUodGhpcy5fcmFkaXVzKTtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCB0aGlzLl9jaXJjbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3N0cmluZy5sZW5ndGgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIHRoaXMuX3N0cmluZyA9IFtdO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjaXJjbGUocmFkaXVzKSB7XG4gIHJldHVybiBcIm0wLFwiICsgcmFkaXVzXG4gICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKiByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAyICogcmFkaXVzXG4gICAgICArIFwielwiO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL3N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBjbGlwIGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge2FicywgYXRhbiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsaXAoXG4gIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgY2xpcEFudGltZXJpZGlhbkxpbmUsXG4gIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSxcbiAgWy1waSwgLWhhbGZQaV1cbik7XG5cbi8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXM6IDAgLSB0aGVyZSB3ZXJlXG4vLyBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vIGludGVyc2VjdGlvbnM7IDIgLSB0aGVyZSB3ZXJlXG4vLyBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIHNob3VsZCBiZSByZWpvaW5lZC5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5MaW5lKHN0cmVhbSkge1xuICB2YXIgbGFtYmRhMCA9IE5hTixcbiAgICAgIHBoaTAgPSBOYU4sXG4gICAgICBzaWduMCA9IE5hTixcbiAgICAgIGNsZWFuOyAvLyBubyBpbnRlcnNlY3Rpb25zXG5cbiAgcmV0dXJuIHtcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgY2xlYW4gPSAxO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYTEsIHBoaTEpIHtcbiAgICAgIHZhciBzaWduMSA9IGxhbWJkYTEgPiAwID8gcGkgOiAtcGksXG4gICAgICAgICAgZGVsdGEgPSBhYnMobGFtYmRhMSAtIGxhbWJkYTApO1xuICAgICAgaWYgKGFicyhkZWx0YSAtIHBpKSA8IGVwc2lsb24pIHsgLy8gbGluZSBjcm9zc2VzIGEgcG9sZVxuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCwgcGhpMCA9IChwaGkwICsgcGhpMSkgLyAyID4gMCA/IGhhbGZQaSA6IC1oYWxmUGkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGExLCBwaGkwKTtcbiAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgfSBlbHNlIGlmIChzaWduMCAhPT0gc2lnbjEgJiYgZGVsdGEgPj0gcGkpIHsgLy8gbGluZSBjcm9zc2VzIGFudGltZXJpZGlhblxuICAgICAgICBpZiAoYWJzKGxhbWJkYTAgLSBzaWduMCkgPCBlcHNpbG9uKSBsYW1iZGEwIC09IHNpZ24wICogZXBzaWxvbjsgLy8gaGFuZGxlIGRlZ2VuZXJhY2llc1xuICAgICAgICBpZiAoYWJzKGxhbWJkYTEgLSBzaWduMSkgPCBlcHNpbG9uKSBsYW1iZGExIC09IHNpZ24xICogZXBzaWxvbjtcbiAgICAgICAgcGhpMCA9IGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgfVxuICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAgPSBsYW1iZGExLCBwaGkwID0gcGhpMSk7XG4gICAgICBzaWduMCA9IHNpZ24xO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgbGFtYmRhMCA9IHBoaTAgPSBOYU47XG4gICAgfSxcbiAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gMiAtIGNsZWFuOyAvLyBpZiBpbnRlcnNlY3Rpb25zLCByZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSkge1xuICB2YXIgY29zUGhpMCxcbiAgICAgIGNvc1BoaTEsXG4gICAgICBzaW5MYW1iZGEwTGFtYmRhMSA9IHNpbihsYW1iZGEwIC0gbGFtYmRhMSk7XG4gIHJldHVybiBhYnMoc2luTGFtYmRhMExhbWJkYTEpID4gZXBzaWxvblxuICAgICAgPyBhdGFuKChzaW4ocGhpMCkgKiAoY29zUGhpMSA9IGNvcyhwaGkxKSkgKiBzaW4obGFtYmRhMSlcbiAgICAgICAgICAtIHNpbihwaGkxKSAqIChjb3NQaGkwID0gY29zKHBoaTApKSAqIHNpbihsYW1iZGEwKSlcbiAgICAgICAgICAvIChjb3NQaGkwICogY29zUGhpMSAqIHNpbkxhbWJkYTBMYW1iZGExKSlcbiAgICAgIDogKHBoaTAgKyBwaGkxKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgdmFyIHBoaTtcbiAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGhhbGZQaTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGksIDApO1xuICAgIHN0cmVhbS5wb2ludChwaSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIDApO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGxhbWJkYSA9IGZyb21bMF0gPCB0b1swXSA/IHBpIDogLXBpO1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGxhbWJkYSAvIDI7XG4gICAgc3RyZWFtLnBvaW50KC1sYW1iZGEsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2FudGltZXJpZGlhbi5qc1xuLy8gbW9kdWxlIGlkID0gMTc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5BZGRJblBsYWNlLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuRG90LCBjYXJ0ZXNpYW5TY2FsZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi4vY2FydGVzaWFuXCI7XG5pbXBvcnQge2NpcmNsZVN0cmVhbX0gZnJvbSBcIi4uL2NpcmNsZVwiO1xuaW1wb3J0IHthYnMsIGNvcywgZXBzaWxvbiwgcGksIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgcG9pbnRFcXVhbCBmcm9tIFwiLi4vcG9pbnRFcXVhbFwiO1xuaW1wb3J0IGNsaXAgZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmFkaXVzLCBkZWx0YSkge1xuICB2YXIgY3IgPSBjb3MocmFkaXVzKSxcbiAgICAgIHNtYWxsUmFkaXVzID0gY3IgPiAwLFxuICAgICAgbm90SGVtaXNwaGVyZSA9IGFicyhjcikgPiBlcHNpbG9uOyAvLyBUT0RPIG9wdGltaXNlIGZvciB0aGlzIGNvbW1vbiBjYXNlXG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCBmcm9tLCB0byk7XG4gIH1cblxuICBmdW5jdGlvbiB2aXNpYmxlKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIGNvcyhsYW1iZGEpICogY29zKHBoaSkgPiBjcjtcbiAgfVxuXG4gIC8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXMgdXNlZCBmb3IgcG9seWdvblxuICAvLyBjbGlwcGluZzogMCAtIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBub1xuICAvLyBpbnRlcnNlY3Rpb25zIDIgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgLy8gc2hvdWxkIGJlIHJlam9pbmVkLlxuICBmdW5jdGlvbiBjbGlwTGluZShzdHJlYW0pIHtcbiAgICB2YXIgcG9pbnQwLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICBjMCwgLy8gY29kZSBmb3IgcHJldmlvdXMgcG9pbnRcbiAgICAgICAgdjAsIC8vIHZpc2liaWxpdHkgb2YgcHJldmlvdXMgcG9pbnRcbiAgICAgICAgdjAwLCAvLyB2aXNpYmlsaXR5IG9mIGZpcnN0IHBvaW50XG4gICAgICAgIGNsZWFuOyAvLyBubyBpbnRlcnNlY3Rpb25zXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHYwMCA9IHYwID0gZmFsc2U7XG4gICAgICAgIGNsZWFuID0gMTtcbiAgICAgIH0sXG4gICAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IFtsYW1iZGEsIHBoaV0sXG4gICAgICAgICAgICBwb2ludDIsXG4gICAgICAgICAgICB2ID0gdmlzaWJsZShsYW1iZGEsIHBoaSksXG4gICAgICAgICAgICBjID0gc21hbGxSYWRpdXNcbiAgICAgICAgICAgICAgPyB2ID8gMCA6IGNvZGUobGFtYmRhLCBwaGkpXG4gICAgICAgICAgICAgIDogdiA/IGNvZGUobGFtYmRhICsgKGxhbWJkYSA8IDAgPyBwaSA6IC1waSksIHBoaSkgOiAwO1xuICAgICAgICBpZiAoIXBvaW50MCAmJiAodjAwID0gdjAgPSB2KSkgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAvLyBIYW5kbGUgZGVnZW5lcmFjaWVzLlxuICAgICAgICAvLyBUT0RPIGlnbm9yZSBpZiBub3QgY2xpcHBpbmcgcG9seWdvbnMuXG4gICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgaWYgKCFwb2ludDIgfHwgcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MikgfHwgcG9pbnRFcXVhbChwb2ludDEsIHBvaW50MikpIHtcbiAgICAgICAgICAgIHBvaW50MVswXSArPSBlcHNpbG9uO1xuICAgICAgICAgICAgcG9pbnQxWzFdICs9IGVwc2lsb247XG4gICAgICAgICAgICB2ID0gdmlzaWJsZShwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgLy8gb3V0c2lkZSBnb2luZyBpblxuICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluc2lkZSBnb2luZyBvdXRcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICB9IGVsc2UgaWYgKG5vdEhlbWlzcGhlcmUgJiYgcG9pbnQwICYmIHNtYWxsUmFkaXVzIF4gdikge1xuICAgICAgICAgIHZhciB0O1xuICAgICAgICAgIC8vIElmIHRoZSBjb2RlcyBmb3IgdHdvIHBvaW50cyBhcmUgZGlmZmVyZW50LCBvciBhcmUgYm90aCB6ZXJvLFxuICAgICAgICAgIC8vIGFuZCB0aGVyZSB0aGlzIHNlZ21lbnQgaW50ZXJzZWN0cyB3aXRoIHRoZSBzbWFsbCBjaXJjbGUuXG4gICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAoc21hbGxSYWRpdXMpIHtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2ICYmICghcG9pbnQwIHx8ICFwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh2MCkgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICAvLyBSZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgaWYgdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIGFuZCB0aGUgZmlyc3RcbiAgICAgIC8vIGFuZCBsYXN0IHBvaW50cyB3ZXJlIHZpc2libGUuXG4gICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGVhbiB8ICgodjAwICYmIHYwKSA8PCAxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gSW50ZXJzZWN0cyB0aGUgZ3JlYXQgY2lyY2xlIGJldHdlZW4gYSBhbmQgYiB3aXRoIHRoZSBjbGlwIGNpcmNsZS5cbiAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIHR3bykge1xuICAgIHZhciBwYSA9IGNhcnRlc2lhbihhKSxcbiAgICAgICAgcGIgPSBjYXJ0ZXNpYW4oYik7XG5cbiAgICAvLyBXZSBoYXZlIHR3byBwbGFuZXMsIG4xLnAgPSBkMSBhbmQgbjIucCA9IGQyLlxuICAgIC8vIEZpbmQgaW50ZXJzZWN0aW9uIGxpbmUgcCh0KSA9IGMxIG4xICsgYzIgbjIgKyB0IChuMSDiqK8gbjIpLlxuICAgIHZhciBuMSA9IFsxLCAwLCAwXSwgLy8gbm9ybWFsXG4gICAgICAgIG4yID0gY2FydGVzaWFuQ3Jvc3MocGEsIHBiKSxcbiAgICAgICAgbjJuMiA9IGNhcnRlc2lhbkRvdChuMiwgbjIpLFxuICAgICAgICBuMW4yID0gbjJbMF0sIC8vIGNhcnRlc2lhbkRvdChuMSwgbjIpLFxuICAgICAgICBkZXRlcm1pbmFudCA9IG4ybjIgLSBuMW4yICogbjFuMjtcblxuICAgIC8vIFR3byBwb2xhciBwb2ludHMuXG4gICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcblxuICAgIHZhciBjMSA9ICBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIG4xeG4yID0gY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSxcbiAgICAgICAgQSA9IGNhcnRlc2lhblNjYWxlKG4xLCBjMSksXG4gICAgICAgIEIgPSBjYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgIGNhcnRlc2lhbkFkZEluUGxhY2UoQSwgQik7XG5cbiAgICAvLyBTb2x2ZSB8cCh0KXxeMiA9IDEuXG4gICAgdmFyIHUgPSBuMXhuMixcbiAgICAgICAgdyA9IGNhcnRlc2lhbkRvdChBLCB1KSxcbiAgICAgICAgdXUgPSBjYXJ0ZXNpYW5Eb3QodSwgdSksXG4gICAgICAgIHQyID0gdyAqIHcgLSB1dSAqIChjYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcblxuICAgIGlmICh0MiA8IDApIHJldHVybjtcblxuICAgIHZhciB0ID0gc3FydCh0MiksXG4gICAgICAgIHEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHEsIEEpO1xuICAgIHEgPSBzcGhlcmljYWwocSk7XG5cbiAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG5cbiAgICAvLyBUd28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICB2YXIgbGFtYmRhMCA9IGFbMF0sXG4gICAgICAgIGxhbWJkYTEgPSBiWzBdLFxuICAgICAgICBwaGkwID0gYVsxXSxcbiAgICAgICAgcGhpMSA9IGJbMV0sXG4gICAgICAgIHo7XG5cbiAgICBpZiAobGFtYmRhMSA8IGxhbWJkYTApIHogPSBsYW1iZGEwLCBsYW1iZGEwID0gbGFtYmRhMSwgbGFtYmRhMSA9IHo7XG5cbiAgICB2YXIgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgcG9sYXIgPSBhYnMoZGVsdGEgLSBwaSkgPCBlcHNpbG9uLFxuICAgICAgICBtZXJpZGlhbiA9IHBvbGFyIHx8IGRlbHRhIDwgZXBzaWxvbjtcblxuICAgIGlmICghcG9sYXIgJiYgcGhpMSA8IHBoaTApIHogPSBwaGkwLCBwaGkwID0gcGhpMSwgcGhpMSA9IHo7XG5cbiAgICAvLyBDaGVjayB0aGF0IHRoZSBmaXJzdCBwb2ludCBpcyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgaWYgKG1lcmlkaWFuXG4gICAgICAgID8gcG9sYXJcbiAgICAgICAgICA/IHBoaTAgKyBwaGkxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSBsYW1iZGEwKSA8IGVwc2lsb24gPyBwaGkwIDogcGhpMSlcbiAgICAgICAgICA6IHBoaTAgPD0gcVsxXSAmJiBxWzFdIDw9IHBoaTFcbiAgICAgICAgOiBkZWx0YSA+IHBpIF4gKGxhbWJkYTAgPD0gcVswXSAmJiBxWzBdIDw9IGxhbWJkYTEpKSB7XG4gICAgICB2YXIgcTEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgKyB0KSAvIHV1KTtcbiAgICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocTEsIEEpO1xuICAgICAgcmV0dXJuIFtxLCBzcGhlcmljYWwocTEpXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmF0ZXMgYSA0LWJpdCB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBsb2NhdGlvbiBvZiBhIHBvaW50IHJlbGF0aXZlIHRvXG4gIC8vIHRoZSBzbWFsbCBjaXJjbGUncyBib3VuZGluZyBib3guXG4gIGZ1bmN0aW9uIGNvZGUobGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgciA9IHNtYWxsUmFkaXVzID8gcmFkaXVzIDogcGkgLSByYWRpdXMsXG4gICAgICAgIGNvZGUgPSAwO1xuICAgIGlmIChsYW1iZGEgPCAtcikgY29kZSB8PSAxOyAvLyBsZWZ0XG4gICAgZWxzZSBpZiAobGFtYmRhID4gcikgY29kZSB8PSAyOyAvLyByaWdodFxuICAgIGlmIChwaGkgPCAtcikgY29kZSB8PSA0OyAvLyBiZWxvd1xuICAgIGVsc2UgaWYgKHBoaSA+IHIpIGNvZGUgfD0gODsgLy8gYWJvdmVcbiAgICByZXR1cm4gY29kZTtcbiAgfVxuXG4gIHJldHVybiBjbGlwKHZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc21hbGxSYWRpdXMgPyBbMCwgLXJhZGl1c10gOiBbLXBpLCByYWRpdXMgLSBwaV0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2NpcmNsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7Y2FydGVzaWFufSBmcm9tIFwiLi4vY2FydGVzaWFuXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgcmFkaWFucywgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1cIjtcblxudmFyIG1heERlcHRoID0gMTYsIC8vIG1heGltdW0gZGVwdGggb2Ygc3ViZGl2aXNpb25cbiAgICBjb3NNaW5EaXN0YW5jZSA9IGNvcygzMCAqIHJhZGlhbnMpOyAvLyBjb3MobWluaW11bSBhbmd1bGFyIGRpc3RhbmNlKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9qZWN0LCBkZWx0YTIpIHtcbiAgcmV0dXJuICtkZWx0YTIgPyByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIDogcmVzYW1wbGVOb25lKHByb2plY3QpO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZU5vbmUocHJvamVjdCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikge1xuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgdmFyIGR4ID0geDEgLSB4MCxcbiAgICAgICAgZHkgPSB5MSAtIHkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGlmIChkMiA+IDQgKiBkZWx0YTIgJiYgZGVwdGgtLSkge1xuICAgICAgdmFyIGEgPSBhMCArIGExLFxuICAgICAgICAgIGIgPSBiMCArIGIxLFxuICAgICAgICAgIGMgPSBjMCArIGMxLFxuICAgICAgICAgIG0gPSBzcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYyksXG4gICAgICAgICAgcGhpMiA9IGFzaW4oYyAvPSBtKSxcbiAgICAgICAgICBsYW1iZGEyID0gYWJzKGFicyhjKSAtIDEpIDwgZXBzaWxvbiB8fCBhYnMobGFtYmRhMCAtIGxhbWJkYTEpIDwgZXBzaWxvbiA/IChsYW1iZGEwICsgbGFtYmRhMSkgLyAyIDogYXRhbjIoYiwgYSksXG4gICAgICAgICAgcCA9IHByb2plY3QobGFtYmRhMiwgcGhpMiksXG4gICAgICAgICAgeDIgPSBwWzBdLFxuICAgICAgICAgIHkyID0gcFsxXSxcbiAgICAgICAgICBkeDIgPSB4MiAtIHgwLFxuICAgICAgICAgIGR5MiA9IHkyIC0geTAsXG4gICAgICAgICAgZHogPSBkeSAqIGR4MiAtIGR4ICogZHkyO1xuICAgICAgaWYgKGR6ICogZHogLyBkMiA+IGRlbHRhMiAvLyBwZXJwZW5kaWN1bGFyIHByb2plY3RlZCBkaXN0YW5jZVxuICAgICAgICAgIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIDAuNSkgPiAwLjMgLy8gbWlkcG9pbnQgY2xvc2UgdG8gYW4gZW5kXG4gICAgICAgICAgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHsgLy8gYW5ndWxhciBkaXN0YW5jZVxuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgbGFtYmRhMiwgYSAvPSBtLCBiIC89IG0sIGMsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCBsYW1iZGEyLCBhLCBiLCBjLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGxhbWJkYTAwLCB4MDAsIHkwMCwgYTAwLCBiMDAsIGMwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgbGFtYmRhMCwgeDAsIHkwLCBhMCwgYjAsIGMwOyAvLyBwcmV2aW91cyBwb2ludFxuXG4gICAgdmFyIHJlc2FtcGxlU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25TdGFydCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7IH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25FbmQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gbGluZVN0YXJ0OyB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHgwID0gTmFOO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgYyA9IGNhcnRlc2lhbihbbGFtYmRhLCBwaGldKSwgcCA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MCA9IHBbMF0sIHkwID0gcFsxXSwgbGFtYmRhMCA9IGxhbWJkYSwgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgbGluZVN0YXJ0KCk7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgbGFtYmRhMDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICBsaW5lRW5kKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc2FtcGxlU3RyZWFtO1xuICB9O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL3Jlc2FtcGxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHthc2luLCBjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGN5bGluZHJpY2FsRXF1YWxBcmVhUmF3KHBoaTApIHtcbiAgdmFyIGNvc1BoaTAgPSBjb3MocGhpMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhICogY29zUGhpMCwgc2luKHBoaSkgLyBjb3NQaGkwXTtcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbeCAvIGNvc1BoaTAsIGFzaW4oeSAqIGNvc1BoaTApXTtcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qc1xuLy8gbW9kdWxlIGlkID0gMTgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7ZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBhbGJlcnMgZnJvbSBcIi4vYWxiZXJzXCI7XG5pbXBvcnQgY29uaWNFcXVhbEFyZWEgZnJvbSBcIi4vY29uaWNFcXVhbEFyZWFcIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplfSBmcm9tIFwiLi9maXRcIjtcblxuLy8gVGhlIHByb2plY3Rpb25zIG11c3QgaGF2ZSBtdXR1YWxseSBleGNsdXNpdmUgY2xpcCByZWdpb25zIG9uIHRoZSBzcGhlcmUsXG4vLyBhcyB0aGlzIHdpbGwgYXZvaWQgZW1pdHRpbmcgaW50ZXJsZWF2aW5nIGxpbmVzIGFuZCBwb2x5Z29ucy5cbmZ1bmN0aW9uIG11bHRpcGxleChzdHJlYW1zKSB7XG4gIHZhciBuID0gc3RyZWFtcy5sZW5ndGg7XG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9pbnQoeCwgeSk7IH0sXG4gICAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0uc3BoZXJlKCk7IH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ubGluZVN0YXJ0KCk7IH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVFbmQoKTsgfSxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvbkVuZCgpOyB9XG4gIH07XG59XG5cbi8vIEEgY29tcG9zaXRlIHByb2plY3Rpb24gZm9yIHRoZSBVbml0ZWQgU3RhdGVzLCBjb25maWd1cmVkIGJ5IGRlZmF1bHQgZm9yXG4vLyA5NjDDlzUwMC4gVGhlIHByb2plY3Rpb24gYWxzbyB3b3JrcyBxdWl0ZSB3ZWxsIGF0IDk2MMOXNjAwIGlmIHlvdSBjaGFuZ2UgdGhlXG4vLyBzY2FsZSB0byAxMjg1IGFuZCBhZGp1c3QgdGhlIHRyYW5zbGF0ZSBhY2NvcmRpbmdseS4gVGhlIHNldCBvZiBzdGFuZGFyZFxuLy8gcGFyYWxsZWxzIGZvciBlYWNoIHJlZ2lvbiBjb21lcyBmcm9tIFVTR1MsIHdoaWNoIGlzIHB1Ymxpc2hlZCBoZXJlOlxuLy8gaHR0cDovL2Vnc2MudXNncy5nb3YvaXNiL3B1YnMvTWFwUHJvamVjdGlvbnMvcHJvamVjdGlvbnMuaHRtbCNhbGJlcnNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbSxcbiAgICAgIGxvd2VyNDggPSBhbGJlcnMoKSwgbG93ZXI0OFBvaW50LFxuICAgICAgYWxhc2thID0gY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWzE1NCwgMF0pLmNlbnRlcihbLTIsIDU4LjVdKS5wYXJhbGxlbHMoWzU1LCA2NV0pLCBhbGFza2FQb2ludCwgLy8gRVBTRzozMzM4XG4gICAgICBoYXdhaWkgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU3LCAwXSkuY2VudGVyKFstMywgMTkuOV0pLnBhcmFsbGVscyhbOCwgMThdKSwgaGF3YWlpUG9pbnQsIC8vIEVTUkk6MTAyMDA3XG4gICAgICBwb2ludCwgcG9pbnRTdHJlYW0gPSB7cG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHsgcG9pbnQgPSBbeCwgeV07IH19O1xuXG4gIGZ1bmN0aW9uIGFsYmVyc1VzYShjb29yZGluYXRlcykge1xuICAgIHZhciB4ID0gY29vcmRpbmF0ZXNbMF0sIHkgPSBjb29yZGluYXRlc1sxXTtcbiAgICByZXR1cm4gcG9pbnQgPSBudWxsLFxuICAgICAgICAobG93ZXI0OFBvaW50LnBvaW50KHgsIHkpLCBwb2ludClcbiAgICAgICAgfHwgKGFsYXNrYVBvaW50LnBvaW50KHgsIHkpLCBwb2ludClcbiAgICAgICAgfHwgKGhhd2FpaVBvaW50LnBvaW50KHgsIHkpLCBwb2ludCk7XG4gIH1cblxuICBhbGJlcnNVc2EuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSxcbiAgICAgICAgdCA9IGxvd2VyNDgudHJhbnNsYXRlKCksXG4gICAgICAgIHggPSAoY29vcmRpbmF0ZXNbMF0gLSB0WzBdKSAvIGssXG4gICAgICAgIHkgPSAoY29vcmRpbmF0ZXNbMV0gLSB0WzFdKSAvIGs7XG4gICAgcmV0dXJuICh5ID49IDAuMTIwICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjQyNSAmJiB4IDwgLTAuMjE0ID8gYWxhc2thXG4gICAgICAgIDogeSA+PSAwLjE2NiAmJiB5IDwgMC4yMzQgJiYgeCA+PSAtMC4yMTQgJiYgeCA8IC0wLjExNSA/IGhhd2FpaVxuICAgICAgICA6IGxvd2VyNDgpLmludmVydChjb29yZGluYXRlcyk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IG11bHRpcGxleChbbG93ZXI0OC5zdHJlYW0oY2FjaGVTdHJlYW0gPSBzdHJlYW0pLCBhbGFza2Euc3RyZWFtKHN0cmVhbSksIGhhd2FpaS5zdHJlYW0oc3RyZWFtKV0pO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5wcmVjaXNpb24oKTtcbiAgICBsb3dlcjQ4LnByZWNpc2lvbihfKSwgYWxhc2thLnByZWNpc2lvbihfKSwgaGF3YWlpLnByZWNpc2lvbihfKTtcbiAgICByZXR1cm4gcmVzZXQoKTtcbiAgfTtcblxuICBhbGJlcnNVc2Euc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5zY2FsZSgpO1xuICAgIGxvd2VyNDguc2NhbGUoXyksIGFsYXNrYS5zY2FsZShfICogMC4zNSksIGhhd2FpaS5zY2FsZShfKTtcbiAgICByZXR1cm4gYWxiZXJzVXNhLnRyYW5zbGF0ZShsb3dlcjQ4LnRyYW5zbGF0ZSgpKTtcbiAgfTtcblxuICBhbGJlcnNVc2EudHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgudHJhbnNsYXRlKCk7XG4gICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHggPSArX1swXSwgeSA9ICtfWzFdO1xuXG4gICAgbG93ZXI0OFBvaW50ID0gbG93ZXI0OFxuICAgICAgICAudHJhbnNsYXRlKF8pXG4gICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuNDU1ICogaywgeSAtIDAuMjM4ICoga10sIFt4ICsgMC40NTUgKiBrLCB5ICsgMC4yMzggKiBrXV0pXG4gICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgYWxhc2thUG9pbnQgPSBhbGFza2FcbiAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMzA3ICogaywgeSArIDAuMjAxICoga10pXG4gICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuNDI1ICogayArIGVwc2lsb24sIHkgKyAwLjEyMCAqIGsgKyBlcHNpbG9uXSwgW3ggLSAwLjIxNCAqIGsgLSBlcHNpbG9uLCB5ICsgMC4yMzQgKiBrIC0gZXBzaWxvbl1dKVxuICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgIGhhd2FpaVBvaW50ID0gaGF3YWlpXG4gICAgICAgIC50cmFuc2xhdGUoW3ggLSAwLjIwNSAqIGssIHkgKyAwLjIxMiAqIGtdKVxuICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjIxNCAqIGsgKyBlcHNpbG9uLCB5ICsgMC4xNjYgKiBrICsgZXBzaWxvbl0sIFt4IC0gMC4xMTUgKiBrIC0gZXBzaWxvbiwgeSArIDAuMjM0ICogayAtIGVwc2lsb25dXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICByZXR1cm4gcmVzZXQoKTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0RXh0ZW50ID0gZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0RXh0ZW50KGFsYmVyc1VzYSwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRTaXplID0gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFNpemUoYWxiZXJzVXNhLCBzaXplLCBvYmplY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBhbGJlcnNVc2E7XG4gIH1cblxuICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVyc1VzYS5qc1xuLy8gbW9kdWxlIGlkID0gMTgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7YXNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsUmF3LCBhemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IHZhciBhemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oY3hjeSkge1xuICByZXR1cm4gc3FydCgyIC8gKDEgKyBjeGN5KSk7XG59KTtcblxuYXppbXV0aGFsRXF1YWxBcmVhUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXNpbih6IC8gMik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxMjQuNzUpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWFsQXJlYS5qc1xuLy8gbW9kdWxlIGlkID0gMTgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7YWNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxSYXcsIGF6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgdmFyIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uKGMpIHtcbiAgcmV0dXJuIChjID0gYWNvcyhjKSkgJiYgYyAvIHNpbihjKTtcbn0pO1xuXG5hemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gejtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcpXG4gICAgICAuc2NhbGUoNzkuNDE4OClcbiAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsRXF1aWRpc3RhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2FicywgYXRhbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBsb2csIHBvdywgc2lnbiwgc2luLCBzcXJ0LCB0YW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7bWVyY2F0b3JSYXd9IGZyb20gXCIuL21lcmNhdG9yXCI7XG5cbmZ1bmN0aW9uIHRhbnkoeSkge1xuICByZXR1cm4gdGFuKChoYWxmUGkgKyB5KSAvIDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiBsb2coY3kwIC8gY29zKHkxKSkgLyBsb2codGFueSh5MSkgLyB0YW55KHkwKSksXG4gICAgICBmID0gY3kwICogcG93KHRhbnkoeTApLCBuKSAvIG47XG5cbiAgaWYgKCFuKSByZXR1cm4gbWVyY2F0b3JSYXc7XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgaWYgKGYgPiAwKSB7IGlmICh5IDwgLWhhbGZQaSArIGVwc2lsb24pIHkgPSAtaGFsZlBpICsgZXBzaWxvbjsgfVxuICAgIGVsc2UgeyBpZiAoeSA+IGhhbGZQaSAtIGVwc2lsb24pIHkgPSBoYWxmUGkgLSBlcHNpbG9uOyB9XG4gICAgdmFyIHIgPSBmIC8gcG93KHRhbnkoeSksIG4pO1xuICAgIHJldHVybiBbciAqIHNpbihuICogeCksIGYgLSByICogY29zKG4gKiB4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgZnkgPSBmIC0geSwgciA9IHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZnkgKiBmeSk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMoZnkpKSAvIG4gKiBzaWduKGZ5KSwgMiAqIGF0YW4ocG93KGYgLyByLCAxIC8gbikpIC0gaGFsZlBpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNDb25mb3JtYWxSYXcpXG4gICAgICAuc2NhbGUoMTA5LjUpXG4gICAgICAucGFyYWxsZWxzKFszMCwgMzBdKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pY0NvbmZvcm1hbC5qc1xuLy8gbW9kdWxlIGlkID0gMTg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBzaWduLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7ZXF1aXJlY3Rhbmd1bGFyUmF3fSBmcm9tIFwiLi9lcXVpcmVjdGFuZ3VsYXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiAoY3kwIC0gY29zKHkxKSkgLyAoeTEgLSB5MCksXG4gICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5LCBueCA9IG4gKiB4O1xuICAgIHJldHVybiBbZ3kgKiBzaW4obngpLCBnIC0gZ3kgKiBjb3MobngpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5O1xuICAgIHJldHVybiBbYXRhbjIoeCwgYWJzKGd5KSkgLyBuICogc2lnbihneSksIGcgLSBzaWduKG4pICogc3FydCh4ICogeCArIGd5ICogZ3kpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSgxMzEuMTU0KVxuICAgICAgLmNlbnRlcihbMCwgMTMuOTM4OV0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1aWRpc3RhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2F0YW4sIGNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdub21vbmljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zKHkpLCBrID0gY29zKHgpICogY3k7XG4gIHJldHVybiBbY3kgKiBzaW4oeCkgLyBrLCBzaW4oeSkgLyBrXTtcbn1cblxuZ25vbW9uaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGF0YW4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXG4gICAgICAuc2NhbGUoMTQ0LjA0OSlcbiAgICAgIC5jbGlwQW5nbGUoNjApO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2dub21vbmljLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHtjbGlwRXh0ZW50fSBmcm9tIFwiLi4vY2xpcC9leHRlbnRcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHlcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1cIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplfSBmcm9tIFwiLi9maXRcIjtcblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGUoa3gsIGt5LCB0eCwgdHkpIHtcbiAgcmV0dXJuIGt4ID09PSAxICYmIGt5ID09PSAxICYmIHR4ID09PSAwICYmIHR5ID09PSAwID8gaWRlbnRpdHkgOiB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiBreCArIHR4LCB5ICoga3kgKyB0eSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrID0gMSwgdHggPSAwLCB0eSA9IDAsIHN4ID0gMSwgc3kgPSAxLCB0cmFuc2Zvcm0gPSBpZGVudGl0eSwgLy8gc2NhbGUsIHRyYW5zbGF0ZSBhbmQgcmVmbGVjdFxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxLCBjbGlwID0gaWRlbnRpdHksIC8vIGNsaXAgZXh0ZW50XG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgcHJvamVjdGlvbjtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBwcm9qZWN0aW9uID0ge1xuICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm0oY2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpO1xuICAgIH0sXG4gICAgY2xpcEV4dGVudDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpcCA9IF8gPT0gbnVsbCA/ICh4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIGlkZW50aXR5KSA6IGNsaXBFeHRlbnQoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSksIHJlc2V0KCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9LFxuICAgIHNjYWxlOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0gPSBzY2FsZVRyYW5zbGF0ZSgoayA9ICtfKSAqIHN4LCBrICogc3ksIHR4LCB0eSksIHJlc2V0KCkpIDogaztcbiAgICB9LFxuICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNmb3JtID0gc2NhbGVUcmFuc2xhdGUoayAqIHN4LCBrICogc3ksIHR4ID0gK19bMF0sIHR5ID0gK19bMV0pLCByZXNldCgpKSA6IFt0eCwgdHldO1xuICAgIH0sXG4gICAgcmVmbGVjdFg6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSA9IHNjYWxlVHJhbnNsYXRlKGsgKiAoc3ggPSBfID8gLTEgOiAxKSwgayAqIHN5LCB0eCwgdHkpLCByZXNldCgpKSA6IHN4IDwgMDtcbiAgICB9LFxuICAgIHJlZmxlY3RZOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0gPSBzY2FsZVRyYW5zbGF0ZShrICogc3gsIGsgKiAoc3kgPSBfID8gLTEgOiAxKSwgdHgsIHR5KSwgcmVzZXQoKSkgOiBzeSA8IDA7XG4gICAgfSxcbiAgICBmaXRFeHRlbnQ6IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KTtcbiAgICB9LFxuICAgIGZpdFNpemU6IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KTtcbiAgICB9XG4gIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vaWRlbnRpdHkuanNcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQge2FzaW4sIGNvcywgZXBzaWxvbiwgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHJldHVybiBbY29zKHkpICogc2luKHgpLCBzaW4oeSldO1xufVxuXG5vcnRob2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGFzaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24ob3J0aG9ncmFwaGljUmF3KVxuICAgICAgLnNjYWxlKDI0OS41KVxuICAgICAgLmNsaXBBbmdsZSg5MCArIGVwc2lsb24pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL29ydGhvZ3JhcGhpYy5qc1xuLy8gbW9kdWxlIGlkID0gMTg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RlcmVvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHZhciBjeSA9IGNvcyh5KSwgayA9IDEgKyBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5zdGVyZW9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXRhbih6KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNTApXG4gICAgICAuY2xpcEFuZ2xlKDE0Mik7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vc3RlcmVvZ3JhcGhpYy5qc1xuLy8gbW9kdWxlIGlkID0gMTg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgdGFufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHttZXJjYXRvclByb2plY3Rpb259IGZyb20gXCIuL21lcmNhdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpLCAtbGFtYmRhXTtcbn1cblxudHJhbnN2ZXJzZU1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsteSwgMiAqIGF0YW4oZXhwKHgpKSAtIGhhbGZQaV07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG0gPSBtZXJjYXRvclByb2plY3Rpb24odHJhbnN2ZXJzZU1lcmNhdG9yUmF3KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgcm90YXRlID0gbS5yb3RhdGU7XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjZW50ZXIoWy1fWzFdLCBfWzBdXSkgOiAoXyA9IGNlbnRlcigpLCBbX1sxXSwgLV9bMF1dKTtcbiAgfTtcblxuICBtLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJvdGF0ZShbX1swXSwgX1sxXSwgXy5sZW5ndGggPiAyID8gX1syXSArIDkwIDogOTBdKSA6IChfID0gcm90YXRlKCksIFtfWzBdLCBfWzFdLCBfWzJdIC0gOTBdKTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRlKFswLCAwLCA5MF0pXG4gICAgICAuc2NhbGUoMTU5LjE1NSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHBvaW50ID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLnBvaW50O1xudmFyIGNvbnZleCA9IHJlcXVpcmUoJ0B0dXJmL2NvbnZleCcpO1xudmFyIGV4cGxvZGUgPSByZXF1aXJlKCdAdHVyZi9leHBsb2RlJyk7XG52YXIgY2VudHJvaWQgPSByZXF1aXJlKCdAdHVyZi9jZW50cm9pZCcpO1xudmFyIGdldENvb3JkID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50JykuZ2V0Q29vcmQ7XG52YXIgY29vcmRFYWNoID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpLmNvb3JkRWFjaDtcblxuLyoqXG4gKiBUYWtlcyBhbnkge0BsaW5rIEZlYXR1cmV9IG9yIGEge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBhbmQgcmV0dXJucyBpdHMgW2NlbnRlciBvZiBtYXNzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50ZXJfb2ZfbWFzcykgdXNpbmcgdGhpcyBmb3JtdWxhOiBbQ2VudHJvaWQgb2YgUG9seWdvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2VudHJvaWQjQ2VudHJvaWRfb2ZfcG9seWdvbikuXG4gKlxuICogQG5hbWUgY2VudGVyT2ZNYXNzXG4gKiBAcGFyYW0ge0dlb0pTT059IGdlb2pzb24gR2VvSlNPTiB0byBiZSBjZW50ZXJlZFxuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBhbiBPYmplY3QgdGhhdCBpcyB1c2VkIGFzIHRoZSB7QGxpbmsgRmVhdHVyZX0ncyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxQb2ludD59IHRoZSBjZW50ZXIgb2YgbWFzc1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5wb2x5Z29uKFtbWy04MSwgNDFdLCBbLTg4LCAzNl0sIFstODQsIDMxXSwgWy04MCwgMzNdLCBbLTc3LCAzOV0sIFstODEsIDQxXV1dKTtcbiAqXG4gKiB2YXIgY2VudGVyID0gdHVyZi5jZW50ZXJPZk1hc3MocG9seWdvbik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvbHlnb24sIGNlbnRlcl1cbiAqL1xuZnVuY3Rpb24gY2VudGVyT2ZNYXNzKGdlb2pzb24sIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgdHlwZSA9IChnZW9qc29uLmdlb21ldHJ5KSA/IGdlb2pzb24uZ2VvbWV0cnkudHlwZSA6IGdlb2pzb24udHlwZTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgcmV0dXJuIHBvaW50KGdldENvb3JkKGdlb2pzb24pLCBwcm9wZXJ0aWVzKTtcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgdmFyIGNvb3JkcyA9IFtdO1xuICAgICAgICBjb29yZEVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgICAgICBjb29yZHMucHVzaChjb29yZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZpcnN0LCB3ZSBuZXV0cmFsaXplIHRoZSBmZWF0dXJlIChzZXQgaXQgYXJvdW5kIGNvb3JkaW5hdGVzIFswLDBdKSB0byBwcmV2ZW50IHJvdW5kaW5nIGVycm9yc1xuICAgICAgICAvLyBXZSB0YWtlIGFueSBwb2ludCB0byB0cmFuc2xhdGUgYWxsIHRoZSBwb2ludHMgYXJvdW5kIDBcbiAgICAgICAgdmFyIGNlbnRyZSA9IGNlbnRyb2lkKGdlb2pzb24sIHByb3BlcnRpZXMpO1xuICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSBjZW50cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgIHZhciBzeCA9IDA7XG4gICAgICAgIHZhciBzeSA9IDA7XG4gICAgICAgIHZhciBzQXJlYSA9IDA7XG4gICAgICAgIHZhciBpLCBwaSwgcGosIHhpLCB4aiwgeWksIHlqLCBhO1xuXG4gICAgICAgIHZhciBuZXV0cmFsaXplZFBvaW50cyA9IGNvb3Jkcy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHBvaW50WzBdIC0gdHJhbnNsYXRpb25bMF0sXG4gICAgICAgICAgICAgICAgcG9pbnRbMV0gLSB0cmFuc2xhdGlvblsxXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIC8vIHBpIGlzIHRoZSBjdXJyZW50IHBvaW50XG4gICAgICAgICAgICBwaSA9IG5ldXRyYWxpemVkUG9pbnRzW2ldO1xuICAgICAgICAgICAgeGkgPSBwaVswXTtcbiAgICAgICAgICAgIHlpID0gcGlbMV07XG5cbiAgICAgICAgICAgIC8vIHBqIGlzIHRoZSBuZXh0IHBvaW50IChwaSsxKVxuICAgICAgICAgICAgcGogPSBuZXV0cmFsaXplZFBvaW50c1tpICsgMV07XG4gICAgICAgICAgICB4aiA9IHBqWzBdO1xuICAgICAgICAgICAgeWogPSBwalsxXTtcblxuICAgICAgICAgICAgLy8gYSBpcyB0aGUgY29tbW9uIGZhY3RvciB0byBjb21wdXRlIHRoZSBzaWduZWQgYXJlYSBhbmQgdGhlIGZpbmFsIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICBhID0geGkgKiB5aiAtIHhqICogeWk7XG5cbiAgICAgICAgICAgIC8vIHNBcmVhIGlzIHRoZSBzdW0gdXNlZCB0byBjb21wdXRlIHRoZSBzaWduZWQgYXJlYVxuICAgICAgICAgICAgc0FyZWEgKz0gYTtcblxuICAgICAgICAgICAgLy8gc3ggYW5kIHN5IGFyZSB0aGUgc3VtcyB1c2VkIHRvIGNvbXB1dGUgdGhlIGZpbmFsIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICBzeCArPSAoeGkgKyB4aikgKiBhO1xuICAgICAgICAgICAgc3kgKz0gKHlpICsgeWopICogYTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNoYXBlIGhhcyBubyBhcmVhOiBmYWxsYmFjayBvbiB0dXJmLmNlbnRyb2lkXG4gICAgICAgIGlmIChzQXJlYSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNlbnRyZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIHNpZ25lZCBhcmVhLCBhbmQgZmFjdG9yaXplIDEvNkFcbiAgICAgICAgICAgIHZhciBhcmVhID0gc0FyZWEgKiAwLjU7XG4gICAgICAgICAgICB2YXIgYXJlYUZhY3RvciA9IDEgLyAoNiAqIGFyZWEpO1xuXG4gICAgICAgICAgICAvLyBDb21wdXRlIHRoZSBmaW5hbCBjb29yZGluYXRlcywgYWRkaW5nIGJhY2sgdGhlIHZhbHVlcyB0aGF0IGhhdmUgYmVlbiBuZXV0cmFsaXplZFxuICAgICAgICAgICAgcmV0dXJuIHBvaW50KFtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblswXSArIGFyZWFGYWN0b3IgKiBzeCxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblsxXSArIGFyZWFGYWN0b3IgKiBzeVxuICAgICAgICAgICAgXSwgcHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgICAvLyBOb3QgYSBwb2x5Z29uOiBDb21wdXRlIHRoZSBjb252ZXggaHVsbCBhbmQgd29yayB3aXRoIHRoYXRcbiAgICAgICAgdmFyIGh1bGwgPSBjb252ZXgoZXhwbG9kZShnZW9qc29uKSk7XG5cbiAgICAgICAgaWYgKGh1bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjZW50ZXJPZk1hc3MoaHVsbCwgcHJvcGVydGllcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBIdWxsIGlzIGVtcHR5OiBmYWxsYmFjayBvbiB0aGUgY2VudHJvaWRcbiAgICAgICAgICAgIHJldHVybiBjZW50cm9pZChnZW9qc29uLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjZW50ZXJPZk1hc3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9jZW50ZXItb2YtbWFzcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpO1xuXG4vKipcbiAqIENvbWJpbmVzIGEge0BsaW5rIEZlYXR1cmVDb2xsZWN0aW9ufSBvZiB7QGxpbmsgUG9pbnR9LCB7QGxpbmsgTGluZVN0cmluZ30sIG9yIHtAbGluayBQb2x5Z29ufSBmZWF0dXJlc1xuICogaW50byB7QGxpbmsgTXVsdGlQb2ludH0sIHtAbGluayBNdWx0aUxpbmVTdHJpbmd9LCBvciB7QGxpbmsgTXVsdGlQb2x5Z29ufSBmZWF0dXJlcy5cbiAqXG4gKiBAbmFtZSBjb21iaW5lXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPFBvaW50fExpbmVTdHJpbmd8UG9seWdvbj59IGZjIGEgRmVhdHVyZUNvbGxlY3Rpb24gb2YgYW55IHR5cGVcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxNdWx0aVBvaW50fE11bHRpTGluZVN0cmluZ3xNdWx0aVBvbHlnb24+fSBhIEZlYXR1cmVDb2xsZWN0aW9uIG9mIGNvcnJlc3BvbmRpbmcgdHlwZSB0byBpbnB1dFxuICogQGV4YW1wbGVcbiAqIHZhciBmYyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICB0dXJmLnBvaW50KFsxOS4wMjY0MzIsIDQ3LjQ5MTM0XSksXG4gKiAgIHR1cmYucG9pbnQoWzE5LjA3NDQ5NywgNDcuNTA5NTQ4XSlcbiAqIF0pO1xuICpcbiAqIHZhciBjb21iaW5lZCA9IHR1cmYuY29tYmluZShmYyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2NvbWJpbmVkXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmYykge1xuICAgIHZhciBncm91cHMgPSB7XG4gICAgICAgIE11bHRpUG9pbnQ6IHtjb29yZGluYXRlczogW10sIHByb3BlcnRpZXM6IFtdfSxcbiAgICAgICAgTXVsdGlMaW5lU3RyaW5nOiB7Y29vcmRpbmF0ZXM6IFtdLCBwcm9wZXJ0aWVzOiBbXX0sXG4gICAgICAgIE11bHRpUG9seWdvbjoge2Nvb3JkaW5hdGVzOiBbXSwgcHJvcGVydGllczogW119XG4gICAgfTtcblxuICAgIHZhciBtdWx0aU1hcHBpbmcgPSBPYmplY3Qua2V5cyhncm91cHMpLnJlZHVjZShmdW5jdGlvbiAobWVtbywgaXRlbSkge1xuICAgICAgICBtZW1vW2l0ZW0ucmVwbGFjZSgnTXVsdGknLCAnJyldID0gaXRlbTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pO1xuXG4gICAgZnVuY3Rpb24gYWRkVG9Hcm91cChmZWF0dXJlLCBrZXksIG11bHRpKSB7XG4gICAgICAgIGlmICghbXVsdGkpIHtcbiAgICAgICAgICAgIGdyb3Vwc1trZXldLmNvb3JkaW5hdGVzLnB1c2goZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncm91cHNba2V5XS5jb29yZGluYXRlcyA9IGdyb3Vwc1trZXldLmNvb3JkaW5hdGVzLmNvbmNhdChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgfVxuICAgICAgICBncm91cHNba2V5XS5wcm9wZXJ0aWVzLnB1c2goZmVhdHVyZS5wcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICBtZXRhLmZlYXR1cmVFYWNoKGZjLCBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICBpZiAoIWZlYXR1cmUuZ2VvbWV0cnkpIHJldHVybjtcbiAgICAgICAgaWYgKGdyb3Vwc1tmZWF0dXJlLmdlb21ldHJ5LnR5cGVdKSB7XG4gICAgICAgICAgICBhZGRUb0dyb3VwKGZlYXR1cmUsIGZlYXR1cmUuZ2VvbWV0cnkudHlwZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobXVsdGlNYXBwaW5nW2ZlYXR1cmUuZ2VvbWV0cnkudHlwZV0pIHtcbiAgICAgICAgICAgIGFkZFRvR3JvdXAoZmVhdHVyZSwgbXVsdGlNYXBwaW5nW2ZlYXR1cmUuZ2VvbWV0cnkudHlwZV0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IE9iamVjdC5rZXlzKGdyb3VwcylcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBncm91cHNba2V5XS5jb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnNvcnQoKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWRQcm9wZXJ0aWVzOiBncm91cHNba2V5XS5wcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlczogZ3JvdXBzW2tleV0uY29vcmRpbmF0ZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvY29tYmluZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBwb2x5Z29uID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLnBvbHlnb247XG52YXIgZWFyY3V0ID0gcmVxdWlyZSgnZWFyY3V0Jyk7XG5cblxuLyoqXG4gKiBUZXNzZWxhdGVzIGEge0BsaW5rIEZlYXR1cmU8UG9seWdvbj59IGludG8gYSB7QGxpbmsgRmVhdHVyZUNvbGxlY3Rpb248UG9seWdvbj59IG9mIHRyaWFuZ2xlc1xuICogdXNpbmcgW2VhcmN1dF0oaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9lYXJjdXQpLlxuICpcbiAqIEBuYW1lIHRlc3NlbGF0ZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb24+fSBwb2x5IHRoZSBwb2x5Z29uIHRvIHRlc3NlbGF0ZVxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBhIGdlb21ldHJ5Y29sbGVjdGlvbiBmZWF0dXJlXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvbHkgPSB0dXJmLnBvbHlnb24oW1tbMTEsIDBdLCBbMjIsIDRdLCBbMzEsIDBdLCBbMzEsIDExXSwgWzIxLCAxNV0sIFsxMSwgMTFdLCBbMTEsIDBdXV0pO1xuICogdmFyIHRyaWFuZ2xlcyA9IHR1cmYudGVzc2VsYXRlKHBvbHkpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5LCB0cmlhbmdsZXNdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvbHkpIHtcbiAgICBpZiAoIXBvbHkuZ2VvbWV0cnkgfHwgKHBvbHkuZ2VvbWV0cnkudHlwZSAhPT0gJ1BvbHlnb24nICYmIHBvbHkuZ2VvbWV0cnkudHlwZSAhPT0gJ011bHRpUG9seWdvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW5wdXQgbXVzdCBiZSBhIFBvbHlnb24gb3IgTXVsdGlQb2x5Z29uJyk7XG4gICAgfVxuXG4gICAgdmFyIGZjID0ge3R5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsIGZlYXR1cmVzOiBbXX07XG5cbiAgICBpZiAocG9seS5nZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgZmMuZmVhdHVyZXMgPSBwcm9jZXNzUG9seWdvbihwb2x5Lmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwb2x5Lmdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2goZnVuY3Rpb24gKGNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICBmYy5mZWF0dXJlcyA9IGZjLmZlYXR1cmVzLmNvbmNhdChwcm9jZXNzUG9seWdvbihjb29yZGluYXRlcykpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmM7XG59O1xuXG5mdW5jdGlvbiBwcm9jZXNzUG9seWdvbihjb29yZGluYXRlcykge1xuICAgIHZhciBkYXRhID0gZmxhdHRlbkNvb3Jkcyhjb29yZGluYXRlcyk7XG4gICAgdmFyIGRpbSA9IDI7XG4gICAgdmFyIHJlc3VsdCA9IGVhcmN1dChkYXRhLnZlcnRpY2VzLCBkYXRhLmhvbGVzLCBkaW0pO1xuXG4gICAgdmFyIGZlYXR1cmVzID0gW107XG4gICAgdmFyIHZlcnRpY2VzID0gW107XG5cbiAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAodmVydCwgaSkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHRbaV07XG4gICAgICAgIHZlcnRpY2VzLnB1c2goW2RhdGEudmVydGljZXNbaW5kZXggKiBkaW1dLCBkYXRhLnZlcnRpY2VzW2luZGV4ICogZGltICsgMV1dKTtcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIGNvb3JkcyA9IHZlcnRpY2VzLnNsaWNlKGksIGkgKyAzKTtcbiAgICAgICAgY29vcmRzLnB1c2godmVydGljZXNbaV0pO1xuICAgICAgICBmZWF0dXJlcy5wdXNoKHBvbHlnb24oW2Nvb3Jkc10pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmVhdHVyZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Db29yZHMoZGF0YSkge1xuICAgIHZhciBkaW0gPSBkYXRhWzBdWzBdLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0ge3ZlcnRpY2VzOiBbXSwgaG9sZXM6IFtdLCBkaW1lbnNpb25zOiBkaW19LFxuICAgICAgICBob2xlSW5kZXggPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkaW07IGQrKykgcmVzdWx0LnZlcnRpY2VzLnB1c2goZGF0YVtpXVtqXVtkXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBob2xlSW5kZXggKz0gZGF0YVtpIC0gMV0ubGVuZ3RoO1xuICAgICAgICAgICAgcmVzdWx0LmhvbGVzLnB1c2goaG9sZUluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi90ZXNzZWxhdGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZWFyY3V0O1xuXG5mdW5jdGlvbiBlYXJjdXQoZGF0YSwgaG9sZUluZGljZXMsIGRpbSkge1xuXG4gICAgZGltID0gZGltIHx8IDI7XG5cbiAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGgsXG4gICAgICAgIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoLFxuICAgICAgICBvdXRlck5vZGUgPSBsaW5rZWRMaXN0KGRhdGEsIDAsIG91dGVyTGVuLCBkaW0sIHRydWUpLFxuICAgICAgICB0cmlhbmdsZXMgPSBbXTtcblxuICAgIGlmICghb3V0ZXJOb2RlKSByZXR1cm4gdHJpYW5nbGVzO1xuXG4gICAgdmFyIG1pblgsIG1pblksIG1heFgsIG1heFksIHgsIHksIHNpemU7XG5cbiAgICBpZiAoaGFzSG9sZXMpIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSk7XG5cbiAgICAvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcbiAgICBpZiAoZGF0YS5sZW5ndGggPiA4MCAqIGRpbSkge1xuICAgICAgICBtaW5YID0gbWF4WCA9IGRhdGFbMF07XG4gICAgICAgIG1pblkgPSBtYXhZID0gZGF0YVsxXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltKSB7XG4gICAgICAgICAgICB4ID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHkgPSBkYXRhW2kgKyAxXTtcbiAgICAgICAgICAgIGlmICh4IDwgbWluWCkgbWluWCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIG1pblkgPSB5O1xuICAgICAgICAgICAgaWYgKHggPiBtYXhYKSBtYXhYID0geDtcbiAgICAgICAgICAgIGlmICh5ID4gbWF4WSkgbWF4WSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtaW5YLCBtaW5ZIGFuZCBzaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxuICAgICAgICBzaXplID0gTWF0aC5tYXgobWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcbiAgICB9XG5cbiAgICBlYXJjdXRMaW5rZWQob3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgc2l6ZSk7XG5cbiAgICByZXR1cm4gdHJpYW5nbGVzO1xufVxuXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcbmZ1bmN0aW9uIGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UpIHtcbiAgICB2YXIgaSwgbGFzdDtcblxuICAgIGlmIChjbG9ja3dpc2UgPT09IChzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkgPiAwKSkge1xuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBkaW0pIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSBlbmQgLSBkaW07IGkgPj0gc3RhcnQ7IGkgLT0gZGltKSBsYXN0ID0gaW5zZXJ0Tm9kZShpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGFzdCk7XG4gICAgfVxuXG4gICAgaWYgKGxhc3QgJiYgZXF1YWxzKGxhc3QsIGxhc3QubmV4dCkpIHtcbiAgICAgICAgcmVtb3ZlTm9kZShsYXN0KTtcbiAgICAgICAgbGFzdCA9IGxhc3QubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbGFzdDtcbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcbmZ1bmN0aW9uIGZpbHRlclBvaW50cyhzdGFydCwgZW5kKSB7XG4gICAgaWYgKCFzdGFydCkgcmV0dXJuIHN0YXJ0O1xuICAgIGlmICghZW5kKSBlbmQgPSBzdGFydDtcblxuICAgIHZhciBwID0gc3RhcnQsXG4gICAgICAgIGFnYWluO1xuICAgIGRvIHtcbiAgICAgICAgYWdhaW4gPSBmYWxzZTtcblxuICAgICAgICBpZiAoIXAuc3RlaW5lciAmJiAoZXF1YWxzKHAsIHAubmV4dCkgfHwgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPT09IDApKSB7XG4gICAgICAgICAgICByZW1vdmVOb2RlKHApO1xuICAgICAgICAgICAgcCA9IGVuZCA9IHAucHJldjtcbiAgICAgICAgICAgIGlmIChwID09PSBwLm5leHQpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgYWdhaW4gPSB0cnVlO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwID0gcC5uZXh0O1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoYWdhaW4gfHwgcCAhPT0gZW5kKTtcblxuICAgIHJldHVybiBlbmQ7XG59XG5cbi8vIG1haW4gZWFyIHNsaWNpbmcgbG9vcCB3aGljaCB0cmlhbmd1bGF0ZXMgYSBwb2x5Z29uIChnaXZlbiBhcyBhIGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIHNpemUsIHBhc3MpIHtcbiAgICBpZiAoIWVhcikgcmV0dXJuO1xuXG4gICAgLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuICAgIGlmICghcGFzcyAmJiBzaXplKSBpbmRleEN1cnZlKGVhciwgbWluWCwgbWluWSwgc2l6ZSk7XG5cbiAgICB2YXIgc3RvcCA9IGVhcixcbiAgICAgICAgcHJldiwgbmV4dDtcblxuICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuICAgIHdoaWxlIChlYXIucHJldiAhPT0gZWFyLm5leHQpIHtcbiAgICAgICAgcHJldiA9IGVhci5wcmV2O1xuICAgICAgICBuZXh0ID0gZWFyLm5leHQ7XG5cbiAgICAgICAgaWYgKHNpemUgPyBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIHNpemUpIDogaXNFYXIoZWFyKSkge1xuICAgICAgICAgICAgLy8gY3V0IG9mZiB0aGUgdHJpYW5nbGVcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKHByZXYuaSAvIGRpbSk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChlYXIuaSAvIGRpbSk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChuZXh0LmkgLyBkaW0pO1xuXG4gICAgICAgICAgICByZW1vdmVOb2RlKGVhcik7XG5cbiAgICAgICAgICAgIC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRpY2UgbGVhZHMgdG8gbGVzcyBzbGl2ZXIgdHJpYW5nbGVzXG4gICAgICAgICAgICBlYXIgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICBzdG9wID0gbmV4dC5uZXh0O1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVhciA9IG5leHQ7XG5cbiAgICAgICAgLy8gaWYgd2UgbG9vcGVkIHRocm91Z2ggdGhlIHdob2xlIHJlbWFpbmluZyBwb2x5Z29uIGFuZCBjYW4ndCBmaW5kIGFueSBtb3JlIGVhcnNcbiAgICAgICAgaWYgKGVhciA9PT0gc3RvcCkge1xuICAgICAgICAgICAgLy8gdHJ5IGZpbHRlcmluZyBwb2ludHMgYW5kIHNsaWNpbmcgYWdhaW5cbiAgICAgICAgICAgIGlmICghcGFzcykge1xuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChmaWx0ZXJQb2ludHMoZWFyKSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIHNpemUsIDEpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGlzIGRpZG4ndCB3b3JrLCB0cnkgY3VyaW5nIGFsbCBzbWFsbCBzZWxmLWludGVyc2VjdGlvbnMgbG9jYWxseVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXNzID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZWFyID0gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyhlYXIsIHRyaWFuZ2xlcywgZGltKTtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgc2l6ZSwgMik7XG5cbiAgICAgICAgICAgIC8vIGFzIGEgbGFzdCByZXNvcnQsIHRyeSBzcGxpdHRpbmcgdGhlIHJlbWFpbmluZyBwb2x5Z29uIGludG8gdHdvXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBzcGxpdEVhcmN1dChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBzaXplKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2Rlc1xuZnVuY3Rpb24gaXNFYXIoZWFyKSB7XG4gICAgdmFyIGEgPSBlYXIucHJldixcbiAgICAgICAgYiA9IGVhcixcbiAgICAgICAgYyA9IGVhci5uZXh0O1xuXG4gICAgaWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG4gICAgLy8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXJcbiAgICB2YXIgcCA9IGVhci5uZXh0Lm5leHQ7XG5cbiAgICB3aGlsZSAocCAhPT0gZWFyLnByZXYpIHtcbiAgICAgICAgaWYgKHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSkgJiZcbiAgICAgICAgICAgIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBzaXplKSB7XG4gICAgdmFyIGEgPSBlYXIucHJldixcbiAgICAgICAgYiA9IGVhcixcbiAgICAgICAgYyA9IGVhci5uZXh0O1xuXG4gICAgaWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG4gICAgLy8gdHJpYW5nbGUgYmJveDsgbWluICYgbWF4IGFyZSBjYWxjdWxhdGVkIGxpa2UgdGhpcyBmb3Igc3BlZWRcbiAgICB2YXIgbWluVFggPSBhLnggPCBiLnggPyAoYS54IDwgYy54ID8gYS54IDogYy54KSA6IChiLnggPCBjLnggPyBiLnggOiBjLngpLFxuICAgICAgICBtaW5UWSA9IGEueSA8IGIueSA/IChhLnkgPCBjLnkgPyBhLnkgOiBjLnkpIDogKGIueSA8IGMueSA/IGIueSA6IGMueSksXG4gICAgICAgIG1heFRYID0gYS54ID4gYi54ID8gKGEueCA+IGMueCA/IGEueCA6IGMueCkgOiAoYi54ID4gYy54ID8gYi54IDogYy54KSxcbiAgICAgICAgbWF4VFkgPSBhLnkgPiBiLnkgPyAoYS55ID4gYy55ID8gYS55IDogYy55KSA6IChiLnkgPiBjLnkgPyBiLnkgOiBjLnkpO1xuXG4gICAgLy8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDtcbiAgICB2YXIgbWluWiA9IHpPcmRlcihtaW5UWCwgbWluVFksIG1pblgsIG1pblksIHNpemUpLFxuICAgICAgICBtYXhaID0gek9yZGVyKG1heFRYLCBtYXhUWSwgbWluWCwgbWluWSwgc2l6ZSk7XG5cbiAgICAvLyBmaXJzdCBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBpbiBpbmNyZWFzaW5nIHotb3JkZXJcbiAgICB2YXIgcCA9IGVhci5uZXh0WjtcblxuICAgIHdoaWxlIChwICYmIHAueiA8PSBtYXhaKSB7XG4gICAgICAgIGlmIChwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55KSAmJlxuICAgICAgICAgICAgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5uZXh0WjtcbiAgICB9XG5cbiAgICAvLyB0aGVuIGxvb2sgZm9yIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcbiAgICBwID0gZWFyLnByZXZaO1xuXG4gICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblopIHtcbiAgICAgICAgaWYgKHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkpICYmXG4gICAgICAgICAgICBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHAgPSBwLnByZXZaO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyhzdGFydCwgdHJpYW5nbGVzLCBkaW0pIHtcbiAgICB2YXIgcCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIGEgPSBwLnByZXYsXG4gICAgICAgICAgICBiID0gcC5uZXh0Lm5leHQ7XG5cbiAgICAgICAgaWYgKCFlcXVhbHMoYSwgYikgJiYgaW50ZXJzZWN0cyhhLCBwLCBwLm5leHQsIGIpICYmIGxvY2FsbHlJbnNpZGUoYSwgYikgJiYgbG9jYWxseUluc2lkZShiLCBhKSkge1xuXG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChhLmkgLyBkaW0pO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocC5pIC8gZGltKTtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGIuaSAvIGRpbSk7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSB0d28gbm9kZXMgaW52b2x2ZWRcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7XG4gICAgICAgICAgICByZW1vdmVOb2RlKHAubmV4dCk7XG5cbiAgICAgICAgICAgIHAgPSBzdGFydCA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICByZXR1cm4gcDtcbn1cblxuLy8gdHJ5IHNwbGl0dGluZyBwb2x5Z29uIGludG8gdHdvIGFuZCB0cmlhbmd1bGF0ZSB0aGVtIGluZGVwZW5kZW50bHlcbmZ1bmN0aW9uIHNwbGl0RWFyY3V0KHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgc2l6ZSkge1xuICAgIC8vIGxvb2sgZm9yIGEgdmFsaWQgZGlhZ29uYWwgdGhhdCBkaXZpZGVzIHRoZSBwb2x5Z29uIGludG8gdHdvXG4gICAgdmFyIGEgPSBzdGFydDtcbiAgICBkbyB7XG4gICAgICAgIHZhciBiID0gYS5uZXh0Lm5leHQ7XG4gICAgICAgIHdoaWxlIChiICE9PSBhLnByZXYpIHtcbiAgICAgICAgICAgIGlmIChhLmkgIT09IGIuaSAmJiBpc1ZhbGlkRGlhZ29uYWwoYSwgYikpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGxpdCB0aGUgcG9seWdvbiBpbiB0d28gYnkgdGhlIGRpYWdvbmFsXG4gICAgICAgICAgICAgICAgdmFyIGMgPSBzcGxpdFBvbHlnb24oYSwgYik7XG5cbiAgICAgICAgICAgICAgICAvLyBmaWx0ZXIgY29saW5lYXIgcG9pbnRzIGFyb3VuZCB0aGUgY3V0c1xuICAgICAgICAgICAgICAgIGEgPSBmaWx0ZXJQb2ludHMoYSwgYS5uZXh0KTtcbiAgICAgICAgICAgICAgICBjID0gZmlsdGVyUG9pbnRzKGMsIGMubmV4dCk7XG5cbiAgICAgICAgICAgICAgICAvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChhLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGMsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBzaXplKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiID0gYi5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGEgPSBhLm5leHQ7XG4gICAgfSB3aGlsZSAoYSAhPT0gc3RhcnQpO1xufVxuXG4vLyBsaW5rIGV2ZXJ5IGhvbGUgaW50byB0aGUgb3V0ZXIgbG9vcCwgcHJvZHVjaW5nIGEgc2luZ2xlLXJpbmcgcG9seWdvbiB3aXRob3V0IGhvbGVzXG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlcyhkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0pIHtcbiAgICB2YXIgcXVldWUgPSBbXSxcbiAgICAgICAgaSwgbGVuLCBzdGFydCwgZW5kLCBsaXN0O1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3RhcnQgPSBob2xlSW5kaWNlc1tpXSAqIGRpbTtcbiAgICAgICAgZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1tpICsgMV0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgbGlzdCA9IGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBmYWxzZSk7XG4gICAgICAgIGlmIChsaXN0ID09PSBsaXN0Lm5leHQpIGxpc3Quc3RlaW5lciA9IHRydWU7XG4gICAgICAgIHF1ZXVlLnB1c2goZ2V0TGVmdG1vc3QobGlzdCkpO1xuICAgIH1cblxuICAgIHF1ZXVlLnNvcnQoY29tcGFyZVgpO1xuXG4gICAgLy8gcHJvY2VzcyBob2xlcyBmcm9tIGxlZnQgdG8gcmlnaHRcbiAgICBmb3IgKGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxpbWluYXRlSG9sZShxdWV1ZVtpXSwgb3V0ZXJOb2RlKTtcbiAgICAgICAgb3V0ZXJOb2RlID0gZmlsdGVyUG9pbnRzKG91dGVyTm9kZSwgb3V0ZXJOb2RlLm5leHQpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRlck5vZGU7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVYKGEsIGIpIHtcbiAgICByZXR1cm4gYS54IC0gYi54O1xufVxuXG4vLyBmaW5kIGEgYnJpZGdlIGJldHdlZW4gdmVydGljZXMgdGhhdCBjb25uZWN0cyBob2xlIHdpdGggYW4gb3V0ZXIgcmluZyBhbmQgYW5kIGxpbmsgaXRcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGUoaG9sZSwgb3V0ZXJOb2RlKSB7XG4gICAgb3V0ZXJOb2RlID0gZmluZEhvbGVCcmlkZ2UoaG9sZSwgb3V0ZXJOb2RlKTtcbiAgICBpZiAob3V0ZXJOb2RlKSB7XG4gICAgICAgIHZhciBiID0gc3BsaXRQb2x5Z29uKG91dGVyTm9kZSwgaG9sZSk7XG4gICAgICAgIGZpbHRlclBvaW50cyhiLCBiLm5leHQpO1xuICAgIH1cbn1cblxuLy8gRGF2aWQgRWJlcmx5J3MgYWxnb3JpdGhtIGZvciBmaW5kaW5nIGEgYnJpZGdlIGJldHdlZW4gaG9sZSBhbmQgb3V0ZXIgcG9seWdvblxuZnVuY3Rpb24gZmluZEhvbGVCcmlkZ2UoaG9sZSwgb3V0ZXJOb2RlKSB7XG4gICAgdmFyIHAgPSBvdXRlck5vZGUsXG4gICAgICAgIGh4ID0gaG9sZS54LFxuICAgICAgICBoeSA9IGhvbGUueSxcbiAgICAgICAgcXggPSAtSW5maW5pdHksXG4gICAgICAgIG07XG5cbiAgICAvLyBmaW5kIGEgc2VnbWVudCBpbnRlcnNlY3RlZCBieSBhIHJheSBmcm9tIHRoZSBob2xlJ3MgbGVmdG1vc3QgcG9pbnQgdG8gdGhlIGxlZnQ7XG4gICAgLy8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxuICAgIGRvIHtcbiAgICAgICAgaWYgKGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSkge1xuICAgICAgICAgICAgdmFyIHggPSBwLnggKyAoaHkgLSBwLnkpICogKHAubmV4dC54IC0gcC54KSAvIChwLm5leHQueSAtIHAueSk7XG4gICAgICAgICAgICBpZiAoeCA8PSBoeCAmJiB4ID4gcXgpIHtcbiAgICAgICAgICAgICAgICBxeCA9IHg7XG4gICAgICAgICAgICAgICAgaWYgKHggPT09IGh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoeSA9PT0gcC55KSByZXR1cm4gcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGh5ID09PSBwLm5leHQueSkgcmV0dXJuIHAubmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbSA9IHAueCA8IHAubmV4dC54ID8gcCA6IHAubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IG91dGVyTm9kZSk7XG5cbiAgICBpZiAoIW0pIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGh4ID09PSBxeCkgcmV0dXJuIG0ucHJldjsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbG93ZXIgZW5kcG9pbnRcblxuICAgIC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIG9mIGhvbGUgcG9pbnQsIHNlZ21lbnQgaW50ZXJzZWN0aW9uIGFuZCBlbmRwb2ludDtcbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gcG9pbnRzIGZvdW5kLCB3ZSBoYXZlIGEgdmFsaWQgY29ubmVjdGlvbjtcbiAgICAvLyBvdGhlcndpc2UgY2hvb3NlIHRoZSBwb2ludCBvZiB0aGUgbWluaW11bSBhbmdsZSB3aXRoIHRoZSByYXkgYXMgY29ubmVjdGlvbiBwb2ludFxuXG4gICAgdmFyIHN0b3AgPSBtLFxuICAgICAgICBteCA9IG0ueCxcbiAgICAgICAgbXkgPSBtLnksXG4gICAgICAgIHRhbk1pbiA9IEluZmluaXR5LFxuICAgICAgICB0YW47XG5cbiAgICBwID0gbS5uZXh0O1xuXG4gICAgd2hpbGUgKHAgIT09IHN0b3ApIHtcbiAgICAgICAgaWYgKGh4ID49IHAueCAmJiBwLnggPj0gbXggJiZcbiAgICAgICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoaHkgPCBteSA/IGh4IDogcXgsIGh5LCBteCwgbXksIGh5IDwgbXkgPyBxeCA6IGh4LCBoeSwgcC54LCBwLnkpKSB7XG5cbiAgICAgICAgICAgIHRhbiA9IE1hdGguYWJzKGh5IC0gcC55KSAvIChoeCAtIHAueCk7IC8vIHRhbmdlbnRpYWxcblxuICAgICAgICAgICAgaWYgKCh0YW4gPCB0YW5NaW4gfHwgKHRhbiA9PT0gdGFuTWluICYmIHAueCA+IG0ueCkpICYmIGxvY2FsbHlJbnNpZGUocCwgaG9sZSkpIHtcbiAgICAgICAgICAgICAgICBtID0gcDtcbiAgICAgICAgICAgICAgICB0YW5NaW4gPSB0YW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBtO1xufVxuXG4vLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5mdW5jdGlvbiBpbmRleEN1cnZlKHN0YXJ0LCBtaW5YLCBtaW5ZLCBzaXplKSB7XG4gICAgdmFyIHAgPSBzdGFydDtcbiAgICBkbyB7XG4gICAgICAgIGlmIChwLnogPT09IG51bGwpIHAueiA9IHpPcmRlcihwLngsIHAueSwgbWluWCwgbWluWSwgc2l6ZSk7XG4gICAgICAgIHAucHJldlogPSBwLnByZXY7XG4gICAgICAgIHAubmV4dFogPSBwLm5leHQ7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpO1xuXG4gICAgcC5wcmV2Wi5uZXh0WiA9IG51bGw7XG4gICAgcC5wcmV2WiA9IG51bGw7XG5cbiAgICBzb3J0TGlua2VkKHApO1xufVxuXG4vLyBTaW1vbiBUYXRoYW0ncyBsaW5rZWQgbGlzdCBtZXJnZSBzb3J0IGFsZ29yaXRobVxuLy8gaHR0cDovL3d3dy5jaGlhcmsuZ3JlZW5lbmQub3JnLnVrL35zZ3RhdGhhbS9hbGdvcml0aG1zL2xpc3Rzb3J0Lmh0bWxcbmZ1bmN0aW9uIHNvcnRMaW5rZWQobGlzdCkge1xuICAgIHZhciBpLCBwLCBxLCBlLCB0YWlsLCBudW1NZXJnZXMsIHBTaXplLCBxU2l6ZSxcbiAgICAgICAgaW5TaXplID0gMTtcblxuICAgIGRvIHtcbiAgICAgICAgcCA9IGxpc3Q7XG4gICAgICAgIGxpc3QgPSBudWxsO1xuICAgICAgICB0YWlsID0gbnVsbDtcbiAgICAgICAgbnVtTWVyZ2VzID0gMDtcblxuICAgICAgICB3aGlsZSAocCkge1xuICAgICAgICAgICAgbnVtTWVyZ2VzKys7XG4gICAgICAgICAgICBxID0gcDtcbiAgICAgICAgICAgIHBTaXplID0gMDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpblNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgIHBTaXplKys7XG4gICAgICAgICAgICAgICAgcSA9IHEubmV4dFo7XG4gICAgICAgICAgICAgICAgaWYgKCFxKSBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcVNpemUgPSBpblNpemU7XG5cbiAgICAgICAgICAgIHdoaWxlIChwU2l6ZSA+IDAgfHwgKHFTaXplID4gMCAmJiBxKSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBTaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBxO1xuICAgICAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcVNpemUtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHFTaXplID09PSAwIHx8ICFxKSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBwO1xuICAgICAgICAgICAgICAgICAgICBwID0gcC5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcFNpemUtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHAueiA8PSBxLnopIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHA7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLm5leHRaO1xuICAgICAgICAgICAgICAgICAgICBwU2l6ZS0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBxO1xuICAgICAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcVNpemUtLTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGFpbCkgdGFpbC5uZXh0WiA9IGU7XG4gICAgICAgICAgICAgICAgZWxzZSBsaXN0ID0gZTtcblxuICAgICAgICAgICAgICAgIGUucHJldlogPSB0YWlsO1xuICAgICAgICAgICAgICAgIHRhaWwgPSBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwID0gcTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhaWwubmV4dFogPSBudWxsO1xuICAgICAgICBpblNpemUgKj0gMjtcblxuICAgIH0gd2hpbGUgKG51bU1lcmdlcyA+IDEpO1xuXG4gICAgcmV0dXJuIGxpc3Q7XG59XG5cbi8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIHNpemUgb2YgdGhlIGRhdGEgYm91bmRpbmcgYm94XG5mdW5jdGlvbiB6T3JkZXIoeCwgeSwgbWluWCwgbWluWSwgc2l6ZSkge1xuICAgIC8vIGNvb3JkcyBhcmUgdHJhbnNmb3JtZWQgaW50byBub24tbmVnYXRpdmUgMTUtYml0IGludGVnZXIgcmFuZ2VcbiAgICB4ID0gMzI3NjcgKiAoeCAtIG1pblgpIC8gc2l6ZTtcbiAgICB5ID0gMzI3NjcgKiAoeSAtIG1pblkpIC8gc2l6ZTtcblxuICAgIHggPSAoeCB8ICh4IDw8IDgpKSAmIDB4MDBGRjAwRkY7XG4gICAgeCA9ICh4IHwgKHggPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgICB4ID0gKHggfCAoeCA8PCAyKSkgJiAweDMzMzMzMzMzO1xuICAgIHggPSAoeCB8ICh4IDw8IDEpKSAmIDB4NTU1NTU1NTU7XG5cbiAgICB5ID0gKHkgfCAoeSA8PCA4KSkgJiAweDAwRkYwMEZGO1xuICAgIHkgPSAoeSB8ICh5IDw8IDQpKSAmIDB4MEYwRjBGMEY7XG4gICAgeSA9ICh5IHwgKHkgPDwgMikpICYgMHgzMzMzMzMzMztcbiAgICB5ID0gKHkgfCAoeSA8PCAxKSkgJiAweDU1NTU1NTU1O1xuXG4gICAgcmV0dXJuIHggfCAoeSA8PCAxKTtcbn1cblxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xuZnVuY3Rpb24gZ2V0TGVmdG1vc3Qoc3RhcnQpIHtcbiAgICB2YXIgcCA9IHN0YXJ0LFxuICAgICAgICBsZWZ0bW9zdCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAueCA8IGxlZnRtb3N0LngpIGxlZnRtb3N0ID0gcDtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICByZXR1cm4gbGVmdG1vc3Q7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcbmZ1bmN0aW9uIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBweCwgcHkpIHtcbiAgICByZXR1cm4gKGN4IC0gcHgpICogKGF5IC0gcHkpIC0gKGF4IC0gcHgpICogKGN5IC0gcHkpID49IDAgJiZcbiAgICAgICAgICAgKGF4IC0gcHgpICogKGJ5IC0gcHkpIC0gKGJ4IC0gcHgpICogKGF5IC0gcHkpID49IDAgJiZcbiAgICAgICAgICAgKGJ4IC0gcHgpICogKGN5IC0gcHkpIC0gKGN4IC0gcHgpICogKGJ5IC0gcHkpID49IDA7XG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKGEsIGIpIHtcbiAgICByZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICFpbnRlcnNlY3RzUG9seWdvbihhLCBiKSAmJlxuICAgICAgICAgICBsb2NhbGx5SW5zaWRlKGEsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYSkgJiYgbWlkZGxlSW5zaWRlKGEsIGIpO1xufVxuXG4vLyBzaWduZWQgYXJlYSBvZiBhIHRyaWFuZ2xlXG5mdW5jdGlvbiBhcmVhKHAsIHEsIHIpIHtcbiAgICByZXR1cm4gKHEueSAtIHAueSkgKiAoci54IC0gcS54KSAtIChxLnggLSBwLngpICogKHIueSAtIHEueSk7XG59XG5cbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXG5mdW5jdGlvbiBlcXVhbHMocDEsIHAyKSB7XG4gICAgcmV0dXJuIHAxLnggPT09IHAyLnggJiYgcDEueSA9PT0gcDIueTtcbn1cblxuLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxuZnVuY3Rpb24gaW50ZXJzZWN0cyhwMSwgcTEsIHAyLCBxMikge1xuICAgIGlmICgoZXF1YWxzKHAxLCBxMSkgJiYgZXF1YWxzKHAyLCBxMikpIHx8XG4gICAgICAgIChlcXVhbHMocDEsIHEyKSAmJiBlcXVhbHMocDIsIHExKSkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBhcmVhKHAxLCBxMSwgcDIpID4gMCAhPT0gYXJlYShwMSwgcTEsIHEyKSA+IDAgJiZcbiAgICAgICAgICAgYXJlYShwMiwgcTIsIHAxKSA+IDAgIT09IGFyZWEocDIsIHEyLCBxMSkgPiAwO1xufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaW50ZXJzZWN0cyBhbnkgcG9seWdvbiBzZWdtZW50c1xuZnVuY3Rpb24gaW50ZXJzZWN0c1BvbHlnb24oYSwgYikge1xuICAgIHZhciBwID0gYTtcbiAgICBkbyB7XG4gICAgICAgIGlmIChwLmkgIT09IGEuaSAmJiBwLm5leHQuaSAhPT0gYS5pICYmIHAuaSAhPT0gYi5pICYmIHAubmV4dC5pICE9PSBiLmkgJiZcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3RzKHAsIHAubmV4dCwgYSwgYikpIHJldHVybiB0cnVlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IGEpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoYSwgYikge1xuICAgIHJldHVybiBhcmVhKGEucHJldiwgYSwgYS5uZXh0KSA8IDAgP1xuICAgICAgICBhcmVhKGEsIGIsIGEubmV4dCkgPj0gMCAmJiBhcmVhKGEsIGEucHJldiwgYikgPj0gMCA6XG4gICAgICAgIGFyZWEoYSwgYiwgYS5wcmV2KSA8IDAgfHwgYXJlYShhLCBhLm5leHQsIGIpIDwgMDtcbn1cblxuLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoYSwgYikge1xuICAgIHZhciBwID0gYSxcbiAgICAgICAgaW5zaWRlID0gZmFsc2UsXG4gICAgICAgIHB4ID0gKGEueCArIGIueCkgLyAyLFxuICAgICAgICBweSA9IChhLnkgKyBiLnkpIC8gMjtcbiAgICBkbyB7XG4gICAgICAgIGlmICgoKHAueSA+IHB5KSAhPT0gKHAubmV4dC55ID4gcHkpKSAmJiAocHggPCAocC5uZXh0LnggLSBwLngpICogKHB5IC0gcC55KSAvIChwLm5leHQueSAtIHAueSkgKyBwLngpKVxuICAgICAgICAgICAgaW5zaWRlID0gIWluc2lkZTtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBhKTtcblxuICAgIHJldHVybiBpbnNpZGU7XG59XG5cbi8vIGxpbmsgdHdvIHBvbHlnb24gdmVydGljZXMgd2l0aCBhIGJyaWRnZTsgaWYgdGhlIHZlcnRpY2VzIGJlbG9uZyB0byB0aGUgc2FtZSByaW5nLCBpdCBzcGxpdHMgcG9seWdvbiBpbnRvIHR3bztcbi8vIGlmIG9uZSBiZWxvbmdzIHRvIHRoZSBvdXRlciByaW5nIGFuZCBhbm90aGVyIHRvIGEgaG9sZSwgaXQgbWVyZ2VzIGl0IGludG8gYSBzaW5nbGUgcmluZ1xuZnVuY3Rpb24gc3BsaXRQb2x5Z29uKGEsIGIpIHtcbiAgICB2YXIgYTIgPSBuZXcgTm9kZShhLmksIGEueCwgYS55KSxcbiAgICAgICAgYjIgPSBuZXcgTm9kZShiLmksIGIueCwgYi55KSxcbiAgICAgICAgYW4gPSBhLm5leHQsXG4gICAgICAgIGJwID0gYi5wcmV2O1xuXG4gICAgYS5uZXh0ID0gYjtcbiAgICBiLnByZXYgPSBhO1xuXG4gICAgYTIubmV4dCA9IGFuO1xuICAgIGFuLnByZXYgPSBhMjtcblxuICAgIGIyLm5leHQgPSBhMjtcbiAgICBhMi5wcmV2ID0gYjI7XG5cbiAgICBicC5uZXh0ID0gYjI7XG4gICAgYjIucHJldiA9IGJwO1xuXG4gICAgcmV0dXJuIGIyO1xufVxuXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZShpLCB4LCB5LCBsYXN0KSB7XG4gICAgdmFyIHAgPSBuZXcgTm9kZShpLCB4LCB5KTtcblxuICAgIGlmICghbGFzdCkge1xuICAgICAgICBwLnByZXYgPSBwO1xuICAgICAgICBwLm5leHQgPSBwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcC5uZXh0ID0gbGFzdC5uZXh0O1xuICAgICAgICBwLnByZXYgPSBsYXN0O1xuICAgICAgICBsYXN0Lm5leHQucHJldiA9IHA7XG4gICAgICAgIGxhc3QubmV4dCA9IHA7XG4gICAgfVxuICAgIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKHApIHtcbiAgICBwLm5leHQucHJldiA9IHAucHJldjtcbiAgICBwLnByZXYubmV4dCA9IHAubmV4dDtcblxuICAgIGlmIChwLnByZXZaKSBwLnByZXZaLm5leHRaID0gcC5uZXh0WjtcbiAgICBpZiAocC5uZXh0WikgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XG59XG5cbmZ1bmN0aW9uIE5vZGUoaSwgeCwgeSkge1xuICAgIC8vIHZlcnRpY2UgaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcbiAgICB0aGlzLmkgPSBpO1xuXG4gICAgLy8gdmVydGV4IGNvb3JkaW5hdGVzXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgLy8gcHJldmlvdXMgYW5kIG5leHQgdmVydGljZSBub2RlcyBpbiBhIHBvbHlnb24gcmluZ1xuICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcblxuICAgIC8vIHotb3JkZXIgY3VydmUgdmFsdWVcbiAgICB0aGlzLnogPSBudWxsO1xuXG4gICAgLy8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxuICAgIHRoaXMucHJldlogPSBudWxsO1xuICAgIHRoaXMubmV4dFogPSBudWxsO1xuXG4gICAgLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcbiAgICB0aGlzLnN0ZWluZXIgPSBmYWxzZTtcbn1cblxuLy8gcmV0dXJuIGEgcGVyY2VudGFnZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHBvbHlnb24gYXJlYSBhbmQgaXRzIHRyaWFuZ3VsYXRpb24gYXJlYTtcbi8vIHVzZWQgdG8gdmVyaWZ5IGNvcnJlY3RuZXNzIG9mIHRyaWFuZ3VsYXRpb25cbmVhcmN1dC5kZXZpYXRpb24gPSBmdW5jdGlvbiAoZGF0YSwgaG9sZUluZGljZXMsIGRpbSwgdHJpYW5nbGVzKSB7XG4gICAgdmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoO1xuICAgIHZhciBvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbMF0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcblxuICAgIHZhciBwb2x5Z29uQXJlYSA9IE1hdGguYWJzKHNpZ25lZEFyZWEoZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSkpO1xuICAgIGlmIChoYXNIb2xlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGhvbGVJbmRpY2VzW2ldICogZGltO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBwb2x5Z29uQXJlYSAtPSBNYXRoLmFicyhzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRyaWFuZ2xlc0FyZWEgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIGEgPSB0cmlhbmdsZXNbaV0gKiBkaW07XG4gICAgICAgIHZhciBiID0gdHJpYW5nbGVzW2kgKyAxXSAqIGRpbTtcbiAgICAgICAgdmFyIGMgPSB0cmlhbmdsZXNbaSArIDJdICogZGltO1xuICAgICAgICB0cmlhbmdsZXNBcmVhICs9IE1hdGguYWJzKFxuICAgICAgICAgICAgKGRhdGFbYV0gLSBkYXRhW2NdKSAqIChkYXRhW2IgKyAxXSAtIGRhdGFbYSArIDFdKSAtXG4gICAgICAgICAgICAoZGF0YVthXSAtIGRhdGFbYl0pICogKGRhdGFbYyArIDFdIC0gZGF0YVthICsgMV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9seWdvbkFyZWEgPT09IDAgJiYgdHJpYW5nbGVzQXJlYSA9PT0gMCA/IDAgOlxuICAgICAgICBNYXRoLmFicygodHJpYW5nbGVzQXJlYSAtIHBvbHlnb25BcmVhKSAvIHBvbHlnb25BcmVhKTtcbn07XG5cbmZ1bmN0aW9uIHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSB7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSkge1xuICAgICAgICBzdW0gKz0gKGRhdGFbal0gLSBkYXRhW2ldKSAqIChkYXRhW2kgKyAxXSArIGRhdGFbaiArIDFdKTtcbiAgICAgICAgaiA9IGk7XG4gICAgfVxuICAgIHJldHVybiBzdW07XG59XG5cbi8vIHR1cm4gYSBwb2x5Z29uIGluIGEgbXVsdGktZGltZW5zaW9uYWwgYXJyYXkgZm9ybSAoZS5nLiBhcyBpbiBHZW9KU09OKSBpbnRvIGEgZm9ybSBFYXJjdXQgYWNjZXB0c1xuZWFyY3V0LmZsYXR0ZW4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBkaW0gPSBkYXRhWzBdWzBdLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0ge3ZlcnRpY2VzOiBbXSwgaG9sZXM6IFtdLCBkaW1lbnNpb25zOiBkaW19LFxuICAgICAgICBob2xlSW5kZXggPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkaW07IGQrKykgcmVzdWx0LnZlcnRpY2VzLnB1c2goZGF0YVtpXVtqXVtkXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBob2xlSW5kZXggKz0gZGF0YVtpIC0gMV0ubGVuZ3RoO1xuICAgICAgICAgICAgcmVzdWx0LmhvbGVzLnB1c2goaG9sZUluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2VhcmN1dC9zcmMvZWFyY3V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZGVwZW5kIG9uIGpzdHMgZm9yIG5vdyBodHRwOi8vYmpvcm5oYXJydGVsbC5naXRodWIuaW8vanN0cy9cbnZhciBqc3RzID0gcmVxdWlyZSgnanN0cycpO1xuXG4vKipcbiAqIFRha2VzIHR3byB7QGxpbmsgUG9seWdvbnxwb2x5Z29uc30gYW5kIGZpbmRzIHRoZWlyIGludGVyc2VjdGlvbi4gSWYgdGhleSBzaGFyZSBhIGJvcmRlciwgcmV0dXJucyB0aGUgYm9yZGVyOyBpZiB0aGV5IGRvbid0IGludGVyc2VjdCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKlxuICogQG5hbWUgaW50ZXJzZWN0XG4gKiBAcGFyYW0ge0ZlYXR1cmU8UG9seWdvbj59IHBvbHkxIHRoZSBmaXJzdCBwb2x5Z29uXG4gKiBAcGFyYW0ge0ZlYXR1cmU8UG9seWdvbj59IHBvbHkyIHRoZSBzZWNvbmQgcG9seWdvblxuICogQHJldHVybnMge0ZlYXR1cmV8dW5kZWZpbmVkfSByZXR1cm5zIGEgZmVhdHVyZSByZXByZXNlbnRpbmcgdGhlIHBvaW50KHMpIHRoZXkgc2hhcmUgKGluIGNhc2Ugb2YgYSB7QGxpbmsgUG9pbnR9ICBvciB7QGxpbmsgTXVsdGlQb2ludH0pLCB0aGUgYm9yZGVycyB0aGV5IHNoYXJlIChpbiBjYXNlIG9mIGEge0BsaW5rIExpbmVTdHJpbmd9IG9yIGEge0BsaW5rIE11bHRpTGluZVN0cmluZ30pLCB0aGUgYXJlYSB0aGV5IHNoYXJlIChpbiBjYXNlIG9mIHtAbGluayBQb2x5Z29ufSBvciB7QGxpbmsgTXVsdGlQb2x5Z29ufSkuIElmIHRoZXkgZG8gbm90IHNoYXJlIGFueSBwb2ludCwgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seTEgPSB0dXJmLnBvbHlnb24oW1tcbiAqICAgWy0xMjIuODAxNzQyLCA0NS40ODU2NV0sXG4gKiAgIFstMTIyLjgwMTc0MiwgNDUuNjA0OTFdLFxuICogICBbLTEyMi41ODQ3NjIsIDQ1LjYwNDkxXSxcbiAqICAgWy0xMjIuNTg0NzYyLCA0NS40ODU2NV0sXG4gKiAgIFstMTIyLjgwMTc0MiwgNDUuNDg1NjVdXG4gKiBdXSk7XG4gKlxuICogdmFyIHBvbHkyID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgIFstMTIyLjUyMDIxNywgNDUuNTM1NjkzXSxcbiAqICAgWy0xMjIuNjQwMzgsIDQ1LjU1Mzk2N10sXG4gKiAgIFstMTIyLjcyMDAzMSwgNDUuNTI2NTU0XSxcbiAqICAgWy0xMjIuNjY5OTA2LCA0NS41MDczMDldLFxuICogICBbLTEyMi43MjM0NjQsIDQ1LjQ0NjY0M10sXG4gKiAgIFstMTIyLjUzMjU3NywgNDUuNDA4NTc0XSxcbiAqICAgWy0xMjIuNDg3MjU4LCA0NS40Nzc0NjZdLFxuICogICBbLTEyMi41MjAyMTcsIDQ1LjUzNTY5M11cbiAqIF1dKTtcbiAqXG4gKiB2YXIgaW50ZXJzZWN0aW9uID0gdHVyZi5pbnRlcnNlY3QocG9seTEsIHBvbHkyKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9seTEsIHBvbHkyLCBpbnRlcnNlY3Rpb25dO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb2x5MSwgcG9seTIpIHtcbiAgICB2YXIgZ2VvbTEsIGdlb20yO1xuICAgIGlmIChwb2x5MS50eXBlID09PSAnRmVhdHVyZScpIGdlb20xID0gcG9seTEuZ2VvbWV0cnk7XG4gICAgZWxzZSBnZW9tMSA9IHBvbHkxO1xuICAgIGlmIChwb2x5Mi50eXBlID09PSAnRmVhdHVyZScpIGdlb20yID0gcG9seTIuZ2VvbWV0cnk7XG4gICAgZWxzZSBnZW9tMiA9IHBvbHkyO1xuICAgIHZhciByZWFkZXIgPSBuZXcganN0cy5pby5HZW9KU09OUmVhZGVyKCk7XG4gICAgdmFyIGEgPSByZWFkZXIucmVhZChKU09OLnN0cmluZ2lmeShnZW9tMSkpO1xuICAgIHZhciBiID0gcmVhZGVyLnJlYWQoSlNPTi5zdHJpbmdpZnkoZ2VvbTIpKTtcbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYS5pbnRlcnNlY3Rpb24oYik7XG5cbiAgICBpZiAoaW50ZXJzZWN0aW9uLmlzRW1wdHkoKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciB3cml0ZXIgPSBuZXcganN0cy5pby5HZW9KU09OV3JpdGVyKCk7XG5cbiAgICB2YXIgZ2VvanNvbkdlb21ldHJ5ID0gd3JpdGVyLndyaXRlKGludGVyc2VjdGlvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgZ2VvbWV0cnk6IGdlb2pzb25HZW9tZXRyeVxuICAgIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvaW50ZXJzZWN0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRpc3RhbmNlID0gcmVxdWlyZSgnQHR1cmYvZGlzdGFuY2UnKTtcblxuLyoqXG4gKiBUYWtlcyBhIHJlZmVyZW5jZSB7QGxpbmsgUG9pbnR8cG9pbnR9IGFuZCBhIEZlYXR1cmVDb2xsZWN0aW9uIG9mIEZlYXR1cmVzXG4gKiB3aXRoIFBvaW50IGdlb21ldHJpZXMgYW5kIHJldHVybnMgdGhlXG4gKiBwb2ludCBmcm9tIHRoZSBGZWF0dXJlQ29sbGVjdGlvbiBjbG9zZXN0IHRvIHRoZSByZWZlcmVuY2UuIFRoaXMgY2FsY3VsYXRpb25cbiAqIGlzIGdlb2Rlc2ljLlxuICpcbiAqIEBuYW1lIG5lYXJlc3RcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPn0gdGFyZ2V0UG9pbnQgdGhlIHJlZmVyZW5jZSBwb2ludFxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IHBvaW50cyBhZ2FpbnN0IGlucHV0IHBvaW50IHNldFxuICogQHJldHVybnMge0ZlYXR1cmU8UG9pbnQ+fSB0aGUgY2xvc2VzdCBwb2ludCBpbiB0aGUgc2V0IHRvIHRoZSByZWZlcmVuY2UgcG9pbnRcbiAqIEBleGFtcGxlXG4gKiB2YXIgdGFyZ2V0UG9pbnQgPSB0dXJmLnBvaW50KFsyOC45NjU3OTcsIDQxLjAxMDA4Nl0sIHtcIm1hcmtlci1jb2xvclwiOiBcIiMwRjBcIn0pO1xuICogdmFyIHBvaW50cyA9IHR1cmYuZmVhdHVyZUNvbGxlY3Rpb24oW1xuICogICAgIHR1cmYucG9pbnQoWzI4Ljk3Mzg2NSwgNDEuMDExMTIyXSksXG4gKiAgICAgdHVyZi5wb2ludChbMjguOTQ4NDU5LCA0MS4wMjQyMDRdKSxcbiAqICAgICB0dXJmLnBvaW50KFsyOC45Mzg2NzQsIDQxLjAxMzMyNF0pXG4gKiBdKTtcbiAqXG4gKiB2YXIgbmVhcmVzdCA9IHR1cmYubmVhcmVzdCh0YXJnZXRQb2ludCwgcG9pbnRzKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbdGFyZ2V0UG9pbnQsIHBvaW50cywgbmVhcmVzdF07XG4gKiBuZWFyZXN0LnByb3BlcnRpZXNbJ21hcmtlci1jb2xvciddID0gJyNGMDAnO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXRQb2ludCwgcG9pbnRzKSB7XG4gICAgdmFyIG5lYXJlc3RQb2ludCwgbWluRGlzdCA9IEluZmluaXR5O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkaXN0YW5jZVRvUG9pbnQgPSBkaXN0YW5jZSh0YXJnZXRQb2ludCwgcG9pbnRzLmZlYXR1cmVzW2ldLCAnbWlsZXMnKTtcbiAgICAgICAgaWYgKGRpc3RhbmNlVG9Qb2ludCA8IG1pbkRpc3QpIHtcbiAgICAgICAgICAgIG5lYXJlc3RQb2ludCA9IHBvaW50cy5mZWF0dXJlc1tpXTtcbiAgICAgICAgICAgIG1pbkRpc3QgPSBkaXN0YW5jZVRvUG9pbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5lYXJlc3RQb2ludDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9uZWFyZXN0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpO1xudmFyIGdldENvb3JkID0gaW52YXJpYW50LmdldENvb3JkO1xudmFyIGdldEdlb20gPSBpbnZhcmlhbnQuZ2V0R2VvbTtcblxuLyoqXG4gKiBUYWtlcyBhIHRyaWFuZ3VsYXIgcGxhbmUgYXMgYSB7QGxpbmsgUG9seWdvbn1cbiAqIGFuZCBhIHtAbGluayBQb2ludH0gd2l0aGluIHRoYXQgdHJpYW5nbGUgYW5kIHJldHVybnMgdGhlIHotdmFsdWVcbiAqIGF0IHRoYXQgcG9pbnQuIFRoZSBQb2x5Z29uIHNob3VsZCBoYXZlIHByb3BlcnRpZXMgYGFgLCBgYmAsIGFuZCBgY2BcbiAqIHRoYXQgZGVmaW5lIHRoZSB2YWx1ZXMgYXQgaXRzIHRocmVlIGNvcm5lcnMuIEFsdGVybmF0aXZlbHksIHRoZSB6LXZhbHVlc1xuICogb2YgZWFjaCB0cmlhbmdsZSBwb2ludCBjYW4gYmUgcHJvdmlkZWQgYnkgdGhlaXIgcmVzcGVjdGl2ZSAzcmQgY29vcmRpbmF0ZVxuICogaWYgdGhlaXIgdmFsdWVzIGFyZSBub3QgcHJvdmlkZWQgYXMgcHJvcGVydGllcy5cbiAqXG4gKiBAbmFtZSBwbGFuZXBvaW50XG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8UG9pbnQ+fEFycmF5PG51bWJlcj59IHBvaW50IHRoZSBQb2ludCBmb3Igd2hpY2ggYSB6LXZhbHVlIHdpbGwgYmUgY2FsY3VsYXRlZFxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvbHlnb24+fSB0cmlhbmdsZSBhIFBvbHlnb24gZmVhdHVyZSB3aXRoIHRocmVlIHZlcnRpY2VzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgei12YWx1ZSBmb3IgYGludGVycG9sYXRlZFBvaW50YFxuICogQGV4YW1wbGVcbiAqIHZhciBwb2ludCA9IHR1cmYucG9pbnQoWy03NS4zMjIxLCAzOS41MjldKTtcbiAqIC8vIFwiYVwiLCBcImJcIiwgYW5kIFwiY1wiIHZhbHVlcyByZXByZXNlbnQgdGhlIHZhbHVlcyBvZiB0aGUgY29vcmRpbmF0ZXMgaW4gb3JkZXIuXG4gKiB2YXIgdHJpYW5nbGUgPSB0dXJmLnBvbHlnb24oW1tcbiAqICAgWy03NS4xMjIxLCAzOS41N10sXG4gKiAgIFstNzUuNTgsIDM5LjE4XSxcbiAqICAgWy03NS45NywgMzkuODZdLFxuICogICBbLTc1LjEyMjEsIDM5LjU3XVxuICogXV0sIHtcbiAqICAgXCJhXCI6IDExLFxuICogICBcImJcIjogMTIyLFxuICogICBcImNcIjogNDRcbiAqIH0pO1xuICpcbiAqIHZhciB6VmFsdWUgPSB0dXJmLnBsYW5lcG9pbnQocG9pbnQsIHRyaWFuZ2xlKTtcbiAqIHBvaW50LnByb3BlcnRpZXMuelZhbHVlID0gelZhbHVlO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFt0cmlhbmdsZSwgcG9pbnRdO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb2ludCwgdHJpYW5nbGUpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5wdXRcbiAgICB2YXIgY29vcmQgPSBnZXRDb29yZChwb2ludCk7XG4gICAgdmFyIGdlb20gPSBnZXRHZW9tKHRyaWFuZ2xlKTtcbiAgICB2YXIgY29vcmRzID0gZ2VvbS5jb29yZGluYXRlcztcbiAgICB2YXIgb3V0ZXIgPSBjb29yZHNbMF07XG4gICAgaWYgKG91dGVyLmxlbmd0aCA8IDQpIHRocm93IG5ldyBFcnJvcignT3V0ZXJSaW5nIG9mIGEgUG9seWdvbiBtdXN0IGhhdmUgNCBvciBtb3JlIFBvc2l0aW9ucy4nKTtcbiAgICB2YXIgcHJvcGVydGllcyA9IHRyaWFuZ2xlLnByb3BlcnRpZXMgfHwge307XG4gICAgdmFyIGEgPSBwcm9wZXJ0aWVzLmE7XG4gICAgdmFyIGIgPSBwcm9wZXJ0aWVzLmI7XG4gICAgdmFyIGMgPSBwcm9wZXJ0aWVzLmM7XG5cbiAgICAvLyBQbGFuZXBvaW50XG4gICAgdmFyIHggPSBjb29yZFswXTtcbiAgICB2YXIgeSA9IGNvb3JkWzFdO1xuICAgIHZhciB4MSA9IG91dGVyWzBdWzBdO1xuICAgIHZhciB5MSA9IG91dGVyWzBdWzFdO1xuICAgIHZhciB6MSA9IChhICE9PSB1bmRlZmluZWQgPyBhIDogb3V0ZXJbMF1bMl0pO1xuICAgIHZhciB4MiA9IG91dGVyWzFdWzBdO1xuICAgIHZhciB5MiA9IG91dGVyWzFdWzFdO1xuICAgIHZhciB6MiA9IChiICE9PSB1bmRlZmluZWQgPyBiIDogb3V0ZXJbMV1bMl0pO1xuICAgIHZhciB4MyA9IG91dGVyWzJdWzBdO1xuICAgIHZhciB5MyA9IG91dGVyWzJdWzFdO1xuICAgIHZhciB6MyA9IChjICE9PSB1bmRlZmluZWQgPyBjIDogb3V0ZXJbMl1bMl0pO1xuICAgIHZhciB6ID0gKHozICogKHggLSB4MSkgKiAoeSAtIHkyKSArIHoxICogKHggLSB4MikgKiAoeSAtIHkzKSArIHoyICogKHggLSB4MykgKiAoeSAtIHkxKSAtXG4gICAgICAgICAgICAgejIgKiAoeCAtIHgxKSAqICh5IC0geTMpIC0gejMgKiAoeCAtIHgyKSAqICh5IC0geTEpIC0gejEgKiAoeCAtIHgzKSAqICh5IC0geTIpKSAvXG4gICAgICAgICAgICgoeCAtIHgxKSAqICh5IC0geTIpICsgKHggLSB4MikgKiAoeSAtIHkzKSArICh4IC0geDMpICogKHkgLSB5MSkgLVxuICAgICAgICAgICAgKHggLSB4MSkgKiAoeSAtIHkzKSAtICh4IC0geDIpICogKHkgLSB5MSkgLSAoeCAtIHgzKSAqICh5IC0geTIpKTtcblxuICAgIHJldHVybiB6O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3BsYW5lcG9pbnQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcmFuZG9tID0gcmVxdWlyZSgnZ2VvanNvbi1yYW5kb20nKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgcmFuZG9tIHtAbGluayBHZW9KU09OfSBkYXRhLCBpbmNsdWRpbmcge0BsaW5rIFBvaW50fFBvaW50c30gYW5kIHtAbGluayBQb2x5Z29ufFBvbHlnb25zfSwgZm9yIHRlc3RpbmdcbiAqIGFuZCBleHBlcmltZW50YXRpb24uXG4gKlxuICogQG5hbWUgcmFuZG9tXG4gKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9J3BvaW50J10gdHlwZSBvZiBmZWF0dXJlcyBkZXNpcmVkOiAncG9pbnRzJyBvciAncG9seWdvbnMnXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvdW50PTFdIGhvdyBtYW55IGdlb21ldHJpZXMgc2hvdWxkIGJlIGdlbmVyYXRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIG9wdGlvbnMgcmVsZXZhbnQgdG8gdGhlIGZlYXR1cmUgZGVzaXJlZC4gQ2FuIGluY2x1ZGU6XG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IG9wdGlvbnMuYmJveCBhIGJvdW5kaW5nIGJveCBpbnNpZGUgb2Ygd2hpY2ggZ2VvbWV0cmllc1xuICogYXJlIHBsYWNlZC4gSW4gdGhlIGNhc2Ugb2Yge0BsaW5rIFBvaW50fSBmZWF0dXJlcywgdGhleSBhcmUgZ3VhcmFudGVlZCB0byBiZSB3aXRoaW4gdGhpcyBib3VuZHMsXG4gKiB3aGlsZSB7QGxpbmsgUG9seWdvbn0gZmVhdHVyZXMgaGF2ZSB0aGVpciBjZW50cm9pZCB3aXRoaW4gdGhlIGJvdW5kcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5udW1fdmVydGljZXM9MTBdIG9wdGlvbnMudmVydGljZXMgdGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBhZGRlZFxuICogdG8gcG9seWdvbiBmZWF0dXJlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhfcmFkaWFsX2xlbmd0aD0xMF0gdGhlIHRvdGFsIG51bWJlciBvZiBkZWNpbWFsXG4gKiBkZWdyZWVzIGxvbmdpdHVkZSBvciBsYXRpdHVkZSB0aGF0IGEgcG9seWdvbiBjYW4gZXh0ZW50IG91dHdhcmRzIHRvXG4gKiBmcm9tIGl0cyBjZW50ZXIuXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb259IGdlbmVyYXRlZCByYW5kb20gZmVhdHVyZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9pbnRzID0gdHVyZi5yYW5kb20oJ3BvaW50cycsIDEwMCwge1xuICogICBiYm94OiBbLTcwLCA0MCwgLTYwLCA2MF1cbiAqIH0pO1xuICpcbiAqIHZhciBwb2x5Z29ucyA9IHR1cmYucmFuZG9tKCdwb2x5Z29ucycsIDQsIHtcbiAqICAgYmJveDogWy03MCwgNDAsIC02MCwgNjBdXG4gKiB9KTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9pbnRzLCBwb2x5Z29uc11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodHlwZSwgY291bnQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb3VudCA9IGNvdW50IHx8IDE7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAncG9pbnQnOlxuICAgIGNhc2UgJ3BvaW50cyc6XG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiByYW5kb20ucG9pbnQoY291bnQsIG9wdGlvbnMuYmJveCk7XG4gICAgY2FzZSAncG9seWdvbic6XG4gICAgY2FzZSAncG9seWdvbnMnOlxuICAgICAgICByZXR1cm4gcmFuZG9tLnBvbHlnb24oXG4gICAgICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5udW1fdmVydGljZXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5tYXhfcmFkaWFsX2xlbmd0aCxcbiAgICAgICAgICAgICAgICBvcHRpb25zLmJib3gpO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlIGdpdmVuOiB2YWxpZCBvcHRpb25zIGFyZSBwb2ludHMgYW5kIHBvbHlnb25zJyk7XG4gICAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3JhbmRvbS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsIC5wb2ludCgpIG9yIC5wb2x5Z29uKCkgaW5zdGVhZCcpO1xufTtcblxuZnVuY3Rpb24gcG9zaXRpb24oYmJveCkge1xuICAgIGlmIChiYm94KSByZXR1cm4gY29vcmRJbkJCQk9YKGJib3gpO1xuICAgIGVsc2UgcmV0dXJuIFtsb24oKSwgbGF0KCldO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cy5wb2ludCA9IGZ1bmN0aW9uKGNvdW50LCBiYm94KSB7XG4gICAgdmFyIGZlYXR1cmVzID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKGJib3ggPyBwb2ludChwb3NpdGlvbihiYm94KSkgOiBwb2ludCgpKSk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uKGZlYXR1cmVzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnBvbHlnb24gPSBmdW5jdGlvbihjb3VudCwgbnVtX3ZlcnRpY2VzLCBtYXhfcmFkaWFsX2xlbmd0aCwgYmJveCkge1xuICAgIGlmICh0eXBlb2YgbnVtX3ZlcnRpY2VzICE9PSAnbnVtYmVyJykgbnVtX3ZlcnRpY2VzID0gMTA7XG4gICAgaWYgKHR5cGVvZiBtYXhfcmFkaWFsX2xlbmd0aCAhPT0gJ251bWJlcicpIG1heF9yYWRpYWxfbGVuZ3RoID0gMTA7XG4gICAgdmFyIGZlYXR1cmVzID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gW10sXG4gICAgICAgICAgICBjaXJjbGVfb2Zmc2V0cyA9IEFycmF5LmFwcGx5KG51bGwsXG4gICAgICAgICAgICAgICAgbmV3IEFycmF5KG51bV92ZXJ0aWNlcyArIDEpKS5tYXAoTWF0aC5yYW5kb20pO1xuXG4gICAgICAgIGNpcmNsZV9vZmZzZXRzLmZvckVhY2goc3VtT2Zmc2V0cyk7XG4gICAgICAgIGNpcmNsZV9vZmZzZXRzLmZvckVhY2goc2NhbGVPZmZzZXRzKTtcbiAgICAgICAgdmVydGljZXNbdmVydGljZXMubGVuZ3RoIC0gMV0gPSB2ZXJ0aWNlc1swXTsgLy8gY2xvc2UgdGhlIHJpbmdcblxuICAgICAgICAvLyBjZW50ZXIgdGhlIHBvbHlnb24gYXJvdW5kIHNvbWV0aGluZ1xuICAgICAgICB2ZXJ0aWNlcyA9IHZlcnRpY2VzLm1hcCh2ZXJ0ZXhUb0Nvb3JkaW5hdGUocG9zaXRpb24oYmJveCkpKTtcbiAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKHBvbHlnb24oW3ZlcnRpY2VzXSkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdW1PZmZzZXRzKGN1ciwgaW5kZXgsIGFycikge1xuICAgICAgICBhcnJbaW5kZXhdID0gKGluZGV4ID4gMCkgPyBjdXIgKyBhcnJbaW5kZXggLSAxXSA6IGN1cjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FsZU9mZnNldHMoY3VyLCBpbmRleCkge1xuICAgICAgICBjdXIgPSBjdXIgKiAyICogTWF0aC5QSSAvIGNpcmNsZV9vZmZzZXRzW2NpcmNsZV9vZmZzZXRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgcmFkaWFsX3NjYWxlciA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIHZlcnRpY2VzLnB1c2goW1xuICAgICAgICAgICAgcmFkaWFsX3NjYWxlciAqIG1heF9yYWRpYWxfbGVuZ3RoICogTWF0aC5zaW4oY3VyKSxcbiAgICAgICAgICAgIHJhZGlhbF9zY2FsZXIgKiBtYXhfcmFkaWFsX2xlbmd0aCAqIE1hdGguY29zKGN1cilcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbGxlY3Rpb24oZmVhdHVyZXMpO1xufTtcblxuXG5mdW5jdGlvbiB2ZXJ0ZXhUb0Nvb3JkaW5hdGUoaHViKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGN1ciwgaW5kZXgpIHsgcmV0dXJuIFtjdXJbMF0gKyBodWJbMF0sIGN1clsxXSArIGh1YlsxXV07IH07XG59XG5cbmZ1bmN0aW9uIHJuZCgpIHsgcmV0dXJuIE1hdGgucmFuZG9tKCkgLSAwLjU7IH1cbmZ1bmN0aW9uIGxvbigpIHsgcmV0dXJuIHJuZCgpICogMzYwOyB9XG5mdW5jdGlvbiBsYXQoKSB7IHJldHVybiBybmQoKSAqIDE4MDsgfVxuXG5mdW5jdGlvbiBwb2ludChjb29yZGluYXRlcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlcyB8fCBbbG9uKCksIGxhdCgpXVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNvb3JkSW5CQkJPWChiYm94KSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgKE1hdGgucmFuZG9tKCkgKiAoYmJveFsyXSAtIGJib3hbMF0pKSArIGJib3hbMF0sXG4gICAgICAgIChNYXRoLnJhbmRvbSgpICogKGJib3hbM10gLSBiYm94WzFdKSkgKyBiYm94WzFdXTtcbn1cblxuZnVuY3Rpb24gcG9pbnRJbkJCQk9YKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbbG9uKCksIGxhdCgpXVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHBvbHlnb24oY29vcmRpbmF0ZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnUG9seWdvbicsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGZlYXR1cmUoZ2VvbSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICAgICAgZ2VvbWV0cnk6IGdlb20sXG4gICAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvbihmKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IGZcbiAgICB9O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2VvanNvbi1yYW5kb20vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcG9pbnQgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykucG9pbnQ7XG5cbi8qKlxuICogVGFrZXMgYSB7QGxpbmsgTGluZVN0cmluZ3xsaW5lc3RyaW5nfSwge0BsaW5rIE11bHRpTGluZVN0cmluZ3xtdWx0aS1saW5lc3RyaW5nfSwge0BsaW5rIE11bHRpUG9seWdvbnxtdWx0aS1wb2x5Z29ufSwgb3Ige0BsaW5rIFBvbHlnb258cG9seWdvbn0gYW5kIHJldHVybnMge0BsaW5rIFBvaW50fHBvaW50c30gYXQgYWxsIHNlbGYtaW50ZXJzZWN0aW9ucy5cbiAqXG4gKiBAbmFtZSBraW5rc1xuICogQHBhcmFtIHtGZWF0dXJlPExpbmVTdHJpbmd8TXVsdGlMaW5lU3RyaW5nfE11bHRpUG9seWdvbnxQb2x5Z29uPn0gZmVhdHVyZUluIGlucHV0IGZlYXR1cmVcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IHNlbGYtaW50ZXJzZWN0aW9uc1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5ID0gdHVyZi5wb2x5Z29uKFtbXG4gKiAgIFstMTIuMDM0ODM1LCA4LjkwMTE4M10sXG4gKiAgIFstMTIuMDYwNDEzLCA4Ljg5OTgyNl0sXG4gKiAgIFstMTIuMDM2MzgsIDguODczMTk5XSxcbiAqICAgWy0xMi4wNTkzODMsIDguODcxNDE4XSxcbiAqICAgWy0xMi4wMzQ4MzUsIDguOTAxMTgzXVxuICogXV0pO1xuICpcbiAqIHZhciBraW5rcyA9IHR1cmYua2lua3MocG9seSk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvbHksIGtpbmtzXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmZWF0dXJlSW4pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXM7XG4gICAgdmFyIGZlYXR1cmU7XG4gICAgdmFyIHJlc3VsdHMgPSB7XG4gICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgIGZlYXR1cmVzOiBbXVxuICAgIH07XG4gICAgaWYgKGZlYXR1cmVJbi50eXBlID09PSAnRmVhdHVyZScpIHtcbiAgICAgICAgZmVhdHVyZSA9IGZlYXR1cmVJbi5nZW9tZXRyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmZWF0dXJlID0gZmVhdHVyZUluO1xuICAgIH1cbiAgICBpZiAoZmVhdHVyZS50eXBlID09PSAnTGluZVN0cmluZycpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMgPSBbZmVhdHVyZS5jb29yZGluYXRlc107XG4gICAgfSBlbHNlIGlmIChmZWF0dXJlLnR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzID0gZmVhdHVyZS5jb29yZGluYXRlcztcbiAgICB9IGVsc2UgaWYgKGZlYXR1cmUudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMgPSBbXS5jb25jYXQuYXBwbHkoW10sIGZlYXR1cmUuY29vcmRpbmF0ZXMpO1xuICAgIH0gZWxzZSBpZiAoZmVhdHVyZS50eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMgPSBmZWF0dXJlLmNvb3JkaW5hdGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgbXVzdCBiZSBhIExpbmVTdHJpbmcsIE11bHRpTGluZVN0cmluZywgJyArXG4gICAgICAgICAgICAnUG9seWdvbiwgb3IgTXVsdGlQb2x5Z29uIEZlYXR1cmUgb3IgR2VvbWV0cnknKTtcbiAgICB9XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2VnbWVudDEpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2VnbWVudDIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudDEubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBzZWdtZW50Mi5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgY2hlY2sgYWRqYWNlbnQgc2lkZXMgb2YgYSBnaXZlbiBzZWdtZW50LCBzaW5jZSBvZiBjb3Vyc2UgdGhleSBpbnRlcnNlY3QgaW4gYSB2ZXJ0ZXguXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50MSA9PT0gc2VnbWVudDIgJiYgKE1hdGguYWJzKGkgLSBrKSA9PT0gMSB8fCBNYXRoLmFicyhpIC0gaykgPT09IHNlZ21lbnQxLmxlbmd0aCAtIDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBsaW5lSW50ZXJzZWN0cyhzZWdtZW50MVtpXVswXSwgc2VnbWVudDFbaV1bMV0sIHNlZ21lbnQxW2kgKyAxXVswXSwgc2VnbWVudDFbaSArIDFdWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudDJba11bMF0sIHNlZ21lbnQyW2tdWzFdLCBzZWdtZW50MltrICsgMV1bMF0sIHNlZ21lbnQyW2sgKyAxXVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuZmVhdHVyZXMucHVzaChwb2ludChbaW50ZXJzZWN0aW9uWzBdLCBpbnRlcnNlY3Rpb25bMV1dKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xufTtcblxuXG4vLyBtb2RpZmllZCBmcm9tIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvanVzdGluX2Nfcm91bmRzL0dkMlMyL2xpZ2h0L1xuZnVuY3Rpb24gbGluZUludGVyc2VjdHMobGluZTFTdGFydFgsIGxpbmUxU3RhcnRZLCBsaW5lMUVuZFgsIGxpbmUxRW5kWSwgbGluZTJTdGFydFgsIGxpbmUyU3RhcnRZLCBsaW5lMkVuZFgsIGxpbmUyRW5kWSkge1xuICAgIC8vIGlmIHRoZSBsaW5lcyBpbnRlcnNlY3QsIHRoZSByZXN1bHQgY29udGFpbnMgdGhlIHggYW5kIHkgb2YgdGhlIGludGVyc2VjdGlvbiAodHJlYXRpbmcgdGhlIGxpbmVzIGFzIGluZmluaXRlKSBhbmQgYm9vbGVhbnMgZm9yIHdoZXRoZXIgbGluZSBzZWdtZW50IDEgb3IgbGluZSBzZWdtZW50IDIgY29udGFpbiB0aGUgcG9pbnRcbiAgICB2YXIgZGVub21pbmF0b3IsIGEsIGIsIG51bWVyYXRvcjEsIG51bWVyYXRvcjIsXG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHg6IG51bGwsXG4gICAgICAgICAgICB5OiBudWxsLFxuICAgICAgICAgICAgb25MaW5lMTogZmFsc2UsXG4gICAgICAgICAgICBvbkxpbmUyOiBmYWxzZVxuICAgICAgICB9O1xuICAgIGRlbm9taW5hdG9yID0gKChsaW5lMkVuZFkgLSBsaW5lMlN0YXJ0WSkgKiAobGluZTFFbmRYIC0gbGluZTFTdGFydFgpKSAtICgobGluZTJFbmRYIC0gbGluZTJTdGFydFgpICogKGxpbmUxRW5kWSAtIGxpbmUxU3RhcnRZKSk7XG4gICAgaWYgKGRlbm9taW5hdG9yID09PSAwKSB7XG4gICAgICAgIGlmIChyZXN1bHQueCAhPT0gbnVsbCAmJiByZXN1bHQueSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhID0gbGluZTFTdGFydFkgLSBsaW5lMlN0YXJ0WTtcbiAgICBiID0gbGluZTFTdGFydFggLSBsaW5lMlN0YXJ0WDtcbiAgICBudW1lcmF0b3IxID0gKChsaW5lMkVuZFggLSBsaW5lMlN0YXJ0WCkgKiBhKSAtICgobGluZTJFbmRZIC0gbGluZTJTdGFydFkpICogYik7XG4gICAgbnVtZXJhdG9yMiA9ICgobGluZTFFbmRYIC0gbGluZTFTdGFydFgpICogYSkgLSAoKGxpbmUxRW5kWSAtIGxpbmUxU3RhcnRZKSAqIGIpO1xuICAgIGEgPSBudW1lcmF0b3IxIC8gZGVub21pbmF0b3I7XG4gICAgYiA9IG51bWVyYXRvcjIgLyBkZW5vbWluYXRvcjtcblxuICAgIC8vIGlmIHdlIGNhc3QgdGhlc2UgbGluZXMgaW5maW5pdGVseSBpbiBib3RoIGRpcmVjdGlvbnMsIHRoZXkgaW50ZXJzZWN0IGhlcmU6XG4gICAgcmVzdWx0LnggPSBsaW5lMVN0YXJ0WCArIChhICogKGxpbmUxRW5kWCAtIGxpbmUxU3RhcnRYKSk7XG4gICAgcmVzdWx0LnkgPSBsaW5lMVN0YXJ0WSArIChhICogKGxpbmUxRW5kWSAtIGxpbmUxU3RhcnRZKSk7XG5cbiAgICAvLyBpZiBsaW5lMSBpcyBhIHNlZ21lbnQgYW5kIGxpbmUyIGlzIGluZmluaXRlLCB0aGV5IGludGVyc2VjdCBpZjpcbiAgICBpZiAoYSA+PSAwICYmIGEgPD0gMSkge1xuICAgICAgICByZXN1bHQub25MaW5lMSA9IHRydWU7XG4gICAgfVxuICAgIC8vIGlmIGxpbmUyIGlzIGEgc2VnbWVudCBhbmQgbGluZTEgaXMgaW5maW5pdGUsIHRoZXkgaW50ZXJzZWN0IGlmOlxuICAgIGlmIChiID49IDAgJiYgYiA8PSAxKSB7XG4gICAgICAgIHJlc3VsdC5vbkxpbmUyID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gaWYgbGluZTEgYW5kIGxpbmUyIGFyZSBzZWdtZW50cywgdGhleSBpbnRlcnNlY3QgaWYgYm90aCBvZiB0aGUgYWJvdmUgYXJlIHRydWVcbiAgICBpZiAocmVzdWx0Lm9uTGluZTEgJiYgcmVzdWx0Lm9uTGluZTIpIHtcbiAgICAgICAgcmV0dXJuIFtyZXN1bHQueCwgcmVzdWx0LnldO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9raW5rcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKS5mZWF0dXJlQ29sbGVjdGlvbjtcbnZhciBjZW50cm9pZCA9IHJlcXVpcmUoJ0B0dXJmL2NlbnRlcicpO1xudmFyIGRpc3RhbmNlID0gcmVxdWlyZSgnQHR1cmYvZGlzdGFuY2UnKTtcbnZhciBpbnNpZGUgPSByZXF1aXJlKCdAdHVyZi9pbnNpZGUnKTtcbnZhciBleHBsb2RlID0gcmVxdWlyZSgnQHR1cmYvZXhwbG9kZScpO1xuXG4vKipcbiAqIFRha2VzIGEgZmVhdHVyZSBhbmQgcmV0dXJucyBhIHtAbGluayBQb2ludH0gZ3VhcmFudGVlZCB0byBiZSBvbiB0aGUgc3VyZmFjZSBvZiB0aGUgZmVhdHVyZS5cbiAqXG4gKiAqIEdpdmVuIGEge0BsaW5rIFBvbHlnb259LCB0aGUgcG9pbnQgd2lsbCBiZSBpbiB0aGUgYXJlYSBvZiB0aGUgcG9seWdvblxuICogKiBHaXZlbiBhIHtAbGluayBMaW5lU3RyaW5nfSwgdGhlIHBvaW50IHdpbGwgYmUgYWxvbmcgdGhlIHN0cmluZ1xuICogKiBHaXZlbiBhIHtAbGluayBQb2ludH0sIHRoZSBwb2ludCB3aWxsIHRoZSBzYW1lIGFzIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7KEZlYXR1cmV8RmVhdHVyZUNvbGxlY3Rpb24pfSBmYyBhbnkgZmVhdHVyZSBvciBzZXQgb2YgZmVhdHVyZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlfSBhIHBvaW50IG9uIHRoZSBzdXJmYWNlIG9mIGBpbnB1dGBcbiAqIEBleGFtcGxlXG4gKiAvLyBjcmVhdGUgYSByYW5kb20gcG9seWdvblxuICogdmFyIHBvbHlnb24gPSB0dXJmLnJhbmRvbSgncG9seWdvbicpO1xuICpcbiAqIHZhciBwb2ludE9uUG9seWdvbiA9IHR1cmYucG9pbnRPblN1cmZhY2UocG9seWdvbik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvbHlnb24sIHBvaW50T25Qb2x5Z29uXTtcbiAqL1xuZnVuY3Rpb24gcG9pbnRPblN1cmZhY2UoZmMpIHtcbiAgICAvLyBub3JtYWxpemVcbiAgICBpZiAoZmMudHlwZSAhPT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xuICAgICAgICBpZiAoZmMudHlwZSAhPT0gJ0ZlYXR1cmUnKSB7XG4gICAgICAgICAgICBmYyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IGZjLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZjID0gZmVhdHVyZUNvbGxlY3Rpb24oW2ZjXSk7XG4gICAgfVxuXG4gICAgLy9nZXQgY2VudHJvaWRcbiAgICB2YXIgY2VudCA9IGNlbnRyb2lkKGZjKTtcblxuICAgIC8vIGNoZWNrIHRvIHNlZSBpZiBjZW50cm9pZCBpcyBvbiBzdXJmYWNlXG4gICAgdmFyIG9uU3VyZmFjZSA9IGZhbHNlO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoIW9uU3VyZmFjZSAmJiBpIDwgZmMuZmVhdHVyZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBnZW9tID0gZmMuZmVhdHVyZXNbaV0uZ2VvbWV0cnk7XG4gICAgICAgIHZhciB4LCB5LCB4MSwgeTEsIHgyLCB5MiwgaztcbiAgICAgICAgdmFyIG9uTGluZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZ2VvbS50eXBlID09PSAnUG9pbnQnKSB7XG4gICAgICAgICAgICBpZiAoY2VudC5nZW9tZXRyeS5jb29yZGluYXRlc1swXSA9PT0gZ2VvbS5jb29yZGluYXRlc1swXSAmJlxuICAgICAgICBjZW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdID09PSBnZW9tLmNvb3JkaW5hdGVzWzFdKSB7XG4gICAgICAgICAgICAgICAgb25TdXJmYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChnZW9tLnR5cGUgPT09ICdNdWx0aVBvaW50Jykge1xuICAgICAgICAgICAgdmFyIG9uTXVsdGlQb2ludCA9IGZhbHNlO1xuICAgICAgICAgICAgayA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoIW9uTXVsdGlQb2ludCAmJiBrIDwgZ2VvbS5jb29yZGluYXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2VudC5nZW9tZXRyeS5jb29yZGluYXRlc1swXSA9PT0gZ2VvbS5jb29yZGluYXRlc1trXVswXSAmJlxuICAgICAgICAgIGNlbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0gPT09IGdlb20uY29vcmRpbmF0ZXNba11bMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb25TdXJmYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgb25NdWx0aVBvaW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGdlb20udHlwZSA9PT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAgICAgICBrID0gMDtcbiAgICAgICAgICAgIHdoaWxlICghb25MaW5lICYmIGsgPCBnZW9tLmNvb3JkaW5hdGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB4ID0gY2VudC5nZW9tZXRyeS5jb29yZGluYXRlc1swXTtcbiAgICAgICAgICAgICAgICB5ID0gY2VudC5nZW9tZXRyeS5jb29yZGluYXRlc1sxXTtcbiAgICAgICAgICAgICAgICB4MSA9IGdlb20uY29vcmRpbmF0ZXNba11bMF07XG4gICAgICAgICAgICAgICAgeTEgPSBnZW9tLmNvb3JkaW5hdGVzW2tdWzFdO1xuICAgICAgICAgICAgICAgIHgyID0gZ2VvbS5jb29yZGluYXRlc1trICsgMV1bMF07XG4gICAgICAgICAgICAgICAgeTIgPSBnZW9tLmNvb3JkaW5hdGVzW2sgKyAxXVsxXTtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnRPblNlZ21lbnQoeCwgeSwgeDEsIHkxLCB4MiwgeTIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9uU3VyZmFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChnZW9tLnR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgaiA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaiA8IGdlb20uY29vcmRpbmF0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgb25MaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgayA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmUgPSBnZW9tLmNvb3JkaW5hdGVzW2pdO1xuICAgICAgICAgICAgICAgIHdoaWxlICghb25MaW5lICYmIGsgPCBsaW5lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGNlbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjZW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdO1xuICAgICAgICAgICAgICAgICAgICB4MSA9IGxpbmVba11bMF07XG4gICAgICAgICAgICAgICAgICAgIHkxID0gbGluZVtrXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgeDIgPSBsaW5lW2sgKyAxXVswXTtcbiAgICAgICAgICAgICAgICAgICAgeTIgPSBsaW5lW2sgKyAxXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50T25TZWdtZW50KHgsIHksIHgxLCB5MSwgeDIsIHkyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25MaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VyZmFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZ2VvbS50eXBlID09PSAnUG9seWdvbicgfHwgZ2VvbS50eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgICAgICAgdmFyIGYgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBnZW9tLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGluc2lkZShjZW50LCBmKSkge1xuICAgICAgICAgICAgICAgIG9uU3VyZmFjZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAob25TdXJmYWNlKSB7XG4gICAgICAgIHJldHVybiBjZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2ZXJ0aWNlcyA9IGZlYXR1cmVDb2xsZWN0aW9uKFtdKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZjLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2ZXJ0aWNlcy5mZWF0dXJlcyA9IHZlcnRpY2VzLmZlYXR1cmVzLmNvbmNhdChleHBsb2RlKGZjLmZlYXR1cmVzW2ldKS5mZWF0dXJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNsb3Nlc3RWZXJ0ZXg7XG4gICAgICAgIHZhciBjbG9zZXN0RGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRpY2VzLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGlzdCA9IGRpc3RhbmNlKGNlbnQsIHZlcnRpY2VzLmZlYXR1cmVzW2ldLCAnbWlsZXMnKTtcbiAgICAgICAgICAgIGlmIChkaXN0IDwgY2xvc2VzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VzdERpc3RhbmNlID0gZGlzdDtcbiAgICAgICAgICAgICAgICBjbG9zZXN0VmVydGV4ID0gdmVydGljZXMuZmVhdHVyZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb3Nlc3RWZXJ0ZXg7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb2ludE9uU2VnbWVudCh4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIHZhciBhYiA9IE1hdGguc3FydCgoeDIgLSB4MSkgKiAoeDIgLSB4MSkgKyAoeTIgLSB5MSkgKiAoeTIgLSB5MSkpO1xuICAgIHZhciBhcCA9IE1hdGguc3FydCgoeCAtIHgxKSAqICh4IC0geDEpICsgKHkgLSB5MSkgKiAoeSAtIHkxKSk7XG4gICAgdmFyIHBiID0gTWF0aC5zcXJ0KCh4MiAtIHgpICogKHgyIC0geCkgKyAoeTIgLSB5KSAqICh5MiAtIHkpKTtcbiAgICBpZiAoYWIgPT09IGFwICsgcGIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBvaW50T25TdXJmYWNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvcG9pbnQtb24tc3VyZmFjZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZWFzdXJlRGlzdGFuY2UgPSByZXF1aXJlKCdAdHVyZi9kaXN0YW5jZScpO1xudmFyIHBvaW50ID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLnBvaW50O1xudmFyIGJlYXJpbmcgPSByZXF1aXJlKCdAdHVyZi9iZWFyaW5nJyk7XG52YXIgZGVzdGluYXRpb24gPSByZXF1aXJlKCdAdHVyZi9kZXN0aW5hdGlvbicpO1xuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIExpbmVTdHJpbmd8bGluZX0gYW5kIHJldHVybnMgYSB7QGxpbmsgUG9pbnR8cG9pbnR9IGF0IGEgc3BlY2lmaWVkIGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lLlxuICpcbiAqIEBuYW1lIGFsb25nXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IGxpbmUgaW5wdXQgbGluZVxuICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9pbnQ+fSBQb2ludCBgZGlzdGFuY2VgIGB1bml0c2AgYWxvbmcgdGhlIGxpbmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhbWy04MywgMzBdLCBbLTg0LCAzNl0sIFstNzgsIDQxXV0pO1xuICpcbiAqIHZhciBhbG9uZyA9IHR1cmYuYWxvbmcobGluZSwgMjAwLCAnbWlsZXMnKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbYWxvbmcsIGxpbmVdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpbmUsIGRpc3RhbmNlLCB1bml0cykge1xuICAgIHZhciBjb29yZHM7XG4gICAgaWYgKGxpbmUudHlwZSA9PT0gJ0ZlYXR1cmUnKSBjb29yZHMgPSBsaW5lLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgIGVsc2UgaWYgKGxpbmUudHlwZSA9PT0gJ0xpbmVTdHJpbmcnKSBjb29yZHMgPSBsaW5lLmNvb3JkaW5hdGVzO1xuICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdpbnB1dCBtdXN0IGJlIGEgTGluZVN0cmluZyBGZWF0dXJlIG9yIEdlb21ldHJ5Jyk7XG5cbiAgICB2YXIgdHJhdmVsbGVkID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZGlzdGFuY2UgPj0gdHJhdmVsbGVkICYmIGkgPT09IGNvb3Jkcy5sZW5ndGggLSAxKSBicmVhaztcbiAgICAgICAgZWxzZSBpZiAodHJhdmVsbGVkID49IGRpc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgb3ZlcnNob3QgPSBkaXN0YW5jZSAtIHRyYXZlbGxlZDtcbiAgICAgICAgICAgIGlmICghb3ZlcnNob3QpIHJldHVybiBwb2ludChjb29yZHNbaV0pO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGJlYXJpbmcoY29vcmRzW2ldLCBjb29yZHNbaSAtIDFdKSAtIDE4MDtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gZGVzdGluYXRpb24oY29vcmRzW2ldLCBvdmVyc2hvdCwgZGlyZWN0aW9uLCB1bml0cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVycG9sYXRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYXZlbGxlZCArPSBtZWFzdXJlRGlzdGFuY2UoY29vcmRzW2ldLCBjb29yZHNbaSArIDFdLCB1bml0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvaW50KGNvb3Jkc1tjb29yZHMubGVuZ3RoIC0gMV0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2Fsb25nL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGxpbmVzdHJpbmcgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykubGluZVN0cmluZztcbnZhciBwb2ludE9uTGluZSA9IHJlcXVpcmUoJ0B0dXJmL3BvaW50LW9uLWxpbmUnKTtcblxuLyoqXG4gKiBUYWtlcyBhIHtAbGluayBMaW5lU3RyaW5nfGxpbmV9LCBhIHN0YXJ0IHtAbGluayBQb2ludH0sIGFuZCBhIHN0b3AgcG9pbnRcbiAqIGFuZCByZXR1cm5zIGEgc3Vic2VjdGlvbiBvZiB0aGUgbGluZSBpbi1iZXR3ZWVuIHRob3NlIHBvaW50cy5cbiAqIFRoZSBzdGFydCAmIHN0b3AgcG9pbnRzIGRvbid0IG5lZWQgdG8gZmFsbCBleGFjdGx5IG9uIHRoZSBsaW5lLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgZXh0cmFjdGluZyBvbmx5IHRoZSBwYXJ0IG9mIGEgcm91dGUgYmV0d2VlbiB3YXlwb2ludHMuXG4gKlxuICogQG5hbWUgbGluZVNsaWNlXG4gKiBAcGFyYW0ge0ZlYXR1cmU8UG9pbnQ+fSBzdGFydFB0IHN0YXJ0aW5nIHBvaW50XG4gKiBAcGFyYW0ge0ZlYXR1cmU8UG9pbnQ+fSBzdG9wUHQgc3RvcHBpbmcgcG9pbnRcbiAqIEBwYXJhbSB7RmVhdHVyZTxMaW5lU3RyaW5nPnxMaW5lU3RyaW5nfSBsaW5lIGxpbmUgdG8gc2xpY2VcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBzbGljZWQgbGluZVxuICogQGV4YW1wbGVcbiAqIHZhciBsaW5lID0gdHVyZi5saW5lU3RyaW5nKFtcbiAqICAgICBbLTc3LjAzMTY2OSwgMzguODc4NjA1XSxcbiAqICAgICBbLTc3LjAyOTYwOSwgMzguODgxOTQ2XSxcbiAqICAgICBbLTc3LjAyMDMzOSwgMzguODg0MDg0XSxcbiAqICAgICBbLTc3LjAyNTY2MSwgMzguODg1ODIxXSxcbiAqICAgICBbLTc3LjAyMTg4NCwgMzguODg5NTYzXSxcbiAqICAgICBbLTc3LjAxOTgyNCwgMzguODkyMzY4XVxuICogXSk7XG4gKiB2YXIgc3RhcnQgPSB0dXJmLnBvaW50KFstNzcuMDI5NjA5LCAzOC44ODE5NDZdKTtcbiAqIHZhciBzdG9wID0gdHVyZi5wb2ludChbLTc3LjAyMTg4NCwgMzguODg5NTYzXSk7XG4gKlxuICogdmFyIHNsaWNlZCA9IHR1cmYubGluZVNsaWNlKHN0YXJ0LCBzdG9wLCBsaW5lKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbc3RhcnQsIHN0b3AsIGxpbmVdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbGluZVNsaWNlKHN0YXJ0UHQsIHN0b3BQdCwgbGluZSkge1xuICAgIHZhciBjb29yZHM7XG4gICAgaWYgKGxpbmUudHlwZSA9PT0gJ0ZlYXR1cmUnKSB7XG4gICAgICAgIGNvb3JkcyA9IGxpbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgfSBlbHNlIGlmIChsaW5lLnR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICBjb29yZHMgPSBsaW5lLmNvb3JkaW5hdGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW5wdXQgbXVzdCBiZSBhIExpbmVTdHJpbmcgRmVhdHVyZSBvciBHZW9tZXRyeScpO1xuICAgIH1cblxuICAgIHZhciBzdGFydFZlcnRleCA9IHBvaW50T25MaW5lKGxpbmUsIHN0YXJ0UHQpO1xuICAgIHZhciBzdG9wVmVydGV4ID0gcG9pbnRPbkxpbmUobGluZSwgc3RvcFB0KTtcbiAgICB2YXIgZW5kcztcbiAgICBpZiAoc3RhcnRWZXJ0ZXgucHJvcGVydGllcy5pbmRleCA8PSBzdG9wVmVydGV4LnByb3BlcnRpZXMuaW5kZXgpIHtcbiAgICAgICAgZW5kcyA9IFtzdGFydFZlcnRleCwgc3RvcFZlcnRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZW5kcyA9IFtzdG9wVmVydGV4LCBzdGFydFZlcnRleF07XG4gICAgfVxuICAgIHZhciBjbGlwQ29vcmRzID0gW2VuZHNbMF0uZ2VvbWV0cnkuY29vcmRpbmF0ZXNdO1xuICAgIGZvciAodmFyIGkgPSBlbmRzWzBdLnByb3BlcnRpZXMuaW5kZXggKyAxOyBpIDwgZW5kc1sxXS5wcm9wZXJ0aWVzLmluZGV4ICsgMTsgaSsrKSB7XG4gICAgICAgIGNsaXBDb29yZHMucHVzaChjb29yZHNbaV0pO1xuICAgIH1cbiAgICBjbGlwQ29vcmRzLnB1c2goZW5kc1sxXS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgcmV0dXJuIGxpbmVzdHJpbmcoY2xpcENvb3JkcywgbGluZS5wcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9saW5lLXNsaWNlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRpc3RhbmNlID0gcmVxdWlyZSgnQHR1cmYvZGlzdGFuY2UnKTtcbnZhciB0dXJmQkJveCA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGluc2lkZSA9IHJlcXVpcmUoJ0B0dXJmL2luc2lkZScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpO1xudmFyIGdldEdlb21UeXBlID0gaW52YXJpYW50LmdldEdlb21UeXBlO1xudmFyIHBvaW50ID0gaGVscGVycy5wb2ludDtcbnZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IGhlbHBlcnMuZmVhdHVyZUNvbGxlY3Rpb247XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBQb2ludH0gZ3JpZCBmcm9tIGEgYm91bmRpbmcgYm94LCB7QGxpbmsgRmVhdHVyZUNvbGxlY3Rpb259IG9yIHtAbGluayBGZWF0dXJlfS5cbiAqXG4gKiBAbmFtZSBwb2ludEdyaWRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlPGFueT59IGJib3ggZXh0ZW50IGluIFttaW5YLCBtaW5ZLCBtYXhYLCBtYXhZXSBvcmRlclxuICogQHBhcmFtIHtudW1iZXJ9IGNlbGxTaWRlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSB1c2VkIGluIGNhbGN1bGF0aW5nIGNlbGxTaWRlLCBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NlbnRlcmVkPXRydWVdIGFkanVzdCBwb2ludHMgcG9zaXRpb24gdG8gY2VudGVyIHRoZSBncmlkIGludG8gYmJveC4gKipUaGlzIHBhcmFtZXRlciBpcyBnb2luZyB0byBiZSByZW1vdmVkKiogaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZSwgaGF2aW5nIHRoZSBvdXRwdXQgYWx3YXlzIGNlbnRlcmVkIGludG8gYmJveC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Jib3hJc01hc2s9ZmFsc2VdIGlmIHRydWUsIGFuZCBiYm94IGlzIGEgUG9seWdvbiBvciBNdWx0aVBvbHlnb24sIHRoZSBncmlkIFBvaW50IHdpbGwgYmUgY3JlYXRlZFxuICogb25seSBpZiBpbnNpZGUgdGhlIGJib3ggUG9seWdvbihzKVxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvaW50Pn0gZ3JpZCBvZiBwb2ludHNcbiAqIEBleGFtcGxlXG4gKiB2YXIgZXh0ZW50ID0gWy03MC44MjMzNjQsIC0zMy41NTM5ODQsIC03MC40NzMxNzUsIC0zMy4zMDI5ODZdO1xuICogdmFyIGNlbGxTaWRlID0gMztcbiAqIHZhciB1bml0cyA9ICdtaWxlcyc7XG4gKlxuICogdmFyIGdyaWQgPSB0dXJmLnBvaW50R3JpZChleHRlbnQsIGNlbGxTaWRlLCB1bml0cyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2dyaWRdO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiYm94LCBjZWxsU2lkZSwgdW5pdHMsIGNlbnRlcmVkLCBiYm94SXNNYXNrKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcblxuICAgIHZhciBiYm94TWFzayA9IGJib3g7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghYmJveCkgdGhyb3cgbmV3IEVycm9yKCdiYm94IGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGJib3gpKSBiYm94ID0gdHVyZkJCb3goYmJveCk7IC8vIENvbnZlcnQgR2VvSlNPTiB0byBiYm94XG4gICAgaWYgKGJib3gubGVuZ3RoICE9PSA0KSB0aHJvdyBuZXcgRXJyb3IoJ2Jib3ggbXVzdCBjb250YWluIDQgbnVtYmVycycpO1xuXG4gICAgdmFyIHdlc3QgPSBiYm94WzBdO1xuICAgIHZhciBzb3V0aCA9IGJib3hbMV07XG4gICAgdmFyIGVhc3QgPSBiYm94WzJdO1xuICAgIHZhciBub3J0aCA9IGJib3hbM107XG5cbiAgICB2YXIgeEZyYWN0aW9uID0gY2VsbFNpZGUgLyAoZGlzdGFuY2UocG9pbnQoW3dlc3QsIHNvdXRoXSksIHBvaW50KFtlYXN0LCBzb3V0aF0pLCB1bml0cykpO1xuICAgIHZhciBjZWxsV2lkdGggPSB4RnJhY3Rpb24gKiAoZWFzdCAtIHdlc3QpO1xuICAgIHZhciB5RnJhY3Rpb24gPSBjZWxsU2lkZSAvIChkaXN0YW5jZShwb2ludChbd2VzdCwgc291dGhdKSwgcG9pbnQoW3dlc3QsIG5vcnRoXSksIHVuaXRzKSk7XG4gICAgdmFyIGNlbGxIZWlnaHQgPSB5RnJhY3Rpb24gKiAobm9ydGggLSBzb3V0aCk7XG5cbiAgICBpZiAoY2VudGVyZWQgIT09IGZhbHNlKSB7XG4gICAgICAgIHZhciBiYm94SG9yaXpvbnRhbFNpZGUgPSAoZWFzdCAtIHdlc3QpO1xuICAgICAgICB2YXIgYmJveFZlcnRpY2FsU2lkZSA9IChub3J0aCAtIHNvdXRoKTtcbiAgICAgICAgdmFyIGNvbHVtbnMgPSBNYXRoLmZsb29yKGJib3hIb3Jpem9udGFsU2lkZSAvIGNlbGxXaWR0aCk7XG4gICAgICAgIHZhciByb3dzID0gTWF0aC5mbG9vcihiYm94VmVydGljYWxTaWRlIC8gY2VsbEhlaWdodCk7XG4gICAgICAgIC8vIGFkanVzdCBvcmlnaW4gb2YgdGhlIGdyaWRcbiAgICAgICAgdmFyIGRlbHRhWCA9IChiYm94SG9yaXpvbnRhbFNpZGUgLSBjb2x1bW5zICogY2VsbFdpZHRoKSAvIDI7XG4gICAgICAgIHZhciBkZWx0YVkgPSAoYmJveFZlcnRpY2FsU2lkZSAtIHJvd3MgKiBjZWxsSGVpZ2h0KSAvIDI7XG4gICAgfVxuXG4gICAgdmFyIGlzUG9seSA9ICFBcnJheS5pc0FycmF5KGJib3hNYXNrKSAmJiAoZ2V0R2VvbVR5cGUoYmJveE1hc2spID09PSAnUG9seWdvbicgfHwgZ2V0R2VvbVR5cGUoYmJveE1hc2spID09PSAnTXVsdGlQb2x5Z29uJyk7XG5cbiAgICB2YXIgY3VycmVudFggPSB3ZXN0O1xuICAgIGlmIChjZW50ZXJlZCAhPT0gZmFsc2UpIGN1cnJlbnRYICs9IGRlbHRhWDtcbiAgICB3aGlsZSAoY3VycmVudFggPD0gZWFzdCkge1xuICAgICAgICB2YXIgY3VycmVudFkgPSBzb3V0aDtcbiAgICAgICAgaWYgKGNlbnRlcmVkICE9PSBmYWxzZSkgY3VycmVudFkgKz0gZGVsdGFZO1xuICAgICAgICB3aGlsZSAoY3VycmVudFkgPD0gbm9ydGgpIHtcbiAgICAgICAgICAgIHZhciBwdCA9IHBvaW50KFtjdXJyZW50WCwgY3VycmVudFldKTtcbiAgICAgICAgICAgIGlmIChiYm94SXNNYXNrID09PSB0cnVlICYmIGlzUG9seSkge1xuICAgICAgICAgICAgICAgIGlmIChpbnNpZGUocHQsIGJib3hNYXNrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRZICs9IGNlbGxIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFggKz0gY2VsbFdpZHRoO1xuICAgIH1cblxuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihyZXN1bHRzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9wb2ludC1ncmlkL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRpc3RhbmNlID0gcmVxdWlyZSgnQHR1cmYvZGlzdGFuY2UnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIHBvbHlnb24gPSBoZWxwZXJzLnBvbHlnb247XG52YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSBoZWxwZXJzLmZlYXR1cmVDb2xsZWN0aW9uO1xuXG4vKipcbiAqIFRha2VzIGEgYm91bmRpbmcgYm94IGFuZCBhIGNlbGwgZGVwdGggYW5kIHJldHVybnMgYSBzZXQgb2YgdHJpYW5ndWxhciB7QGxpbmsgUG9seWdvbnxwb2x5Z29uc30gaW4gYSBncmlkLlxuICpcbiAqIEBuYW1lIHRyaWFuZ2xlR3JpZFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBiYm94IGV4dGVudCBpbiBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0gb3JkZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBjZWxsU2l6ZSBkaW1lbnNpb24gb2YgZWFjaCBjZWxsXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIHVzZWQgaW4gY2FsY3VsYXRpbmcgY2VsbFNpemUsIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBncmlkIG9mIHBvbHlnb25zXG4gKiBAZXhhbXBsZVxuICogdmFyIGJib3ggPSBbLTk1LCAzMCAsLTg1LCA0MF07XG4gKiB2YXIgY2VsbFNpemUgPSA1MDtcbiAqIHZhciB1bml0cyA9ICdtaWxlcyc7XG4gKlxuICogdmFyIHRyaWFuZ2xlR3JpZCA9IHR1cmYudHJpYW5nbGVHcmlkKGJib3gsIGNlbGxTaXplLCB1bml0cyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3RyaWFuZ2xlR3JpZF07XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJib3gsIGNlbGxTaXplLCB1bml0cykge1xuICAgIHZhciBmYyA9IGZlYXR1cmVDb2xsZWN0aW9uKFtdKTtcbiAgICB2YXIgeEZyYWN0aW9uID0gY2VsbFNpemUgLyAoZGlzdGFuY2UoW2Jib3hbMF0sIGJib3hbMV1dLCBbYmJveFsyXSwgYmJveFsxXV0sIHVuaXRzKSk7XG4gICAgdmFyIGNlbGxXaWR0aCA9IHhGcmFjdGlvbiAqIChiYm94WzJdIC0gYmJveFswXSk7XG4gICAgdmFyIHlGcmFjdGlvbiA9IGNlbGxTaXplIC8gKGRpc3RhbmNlKFtiYm94WzBdLCBiYm94WzFdXSwgW2Jib3hbMF0sIGJib3hbM11dLCB1bml0cykpO1xuICAgIHZhciBjZWxsSGVpZ2h0ID0geUZyYWN0aW9uICogKGJib3hbM10gLSBiYm94WzFdKTtcblxuICAgIHZhciB4aSA9IDA7XG4gICAgdmFyIGN1cnJlbnRYID0gYmJveFswXTtcbiAgICB3aGlsZSAoY3VycmVudFggPD0gYmJveFsyXSkge1xuICAgICAgICB2YXIgeWkgPSAwO1xuICAgICAgICB2YXIgY3VycmVudFkgPSBiYm94WzFdO1xuICAgICAgICB3aGlsZSAoY3VycmVudFkgPD0gYmJveFszXSkge1xuICAgICAgICAgICAgaWYgKHhpICUgMiA9PT0gMCAmJiB5aSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmYy5mZWF0dXJlcy5wdXNoKHBvbHlnb24oW1tcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYLCBjdXJyZW50WV0sXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFkgKyBjZWxsSGVpZ2h0XSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WV0sXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFldXG4gICAgICAgICAgICAgICAgXV0pLCBwb2x5Z29uKFtbXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFkgKyBjZWxsSGVpZ2h0XSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WSArIGNlbGxIZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFggKyBjZWxsV2lkdGgsIGN1cnJlbnRZXSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYLCBjdXJyZW50WSArIGNlbGxIZWlnaHRdXG4gICAgICAgICAgICAgICAgXV0pKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeGkgJSAyID09PSAwICYmIHlpICUgMiA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGZjLmZlYXR1cmVzLnB1c2gocG9seWdvbihbW1xuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZXSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WSArIGNlbGxIZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFggKyBjZWxsV2lkdGgsIGN1cnJlbnRZXSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYLCBjdXJyZW50WV1cbiAgICAgICAgICAgICAgICBdXSksIHBvbHlnb24oW1tcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYLCBjdXJyZW50WV0sXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFkgKyBjZWxsSGVpZ2h0XSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WSArIGNlbGxIZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZXVxuICAgICAgICAgICAgICAgIF1dKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHlpICUgMiA9PT0gMCAmJiB4aSAlIDIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBmYy5mZWF0dXJlcy5wdXNoKHBvbHlnb24oW1tcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYLCBjdXJyZW50WV0sXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFkgKyBjZWxsSGVpZ2h0XSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WSArIGNlbGxIZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZXVxuICAgICAgICAgICAgICAgIF1dKSwgcG9seWdvbihbW1xuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZXSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WSArIGNlbGxIZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFggKyBjZWxsV2lkdGgsIGN1cnJlbnRZXSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYLCBjdXJyZW50WV1cbiAgICAgICAgICAgICAgICBdXSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh5aSAlIDIgPT09IDEgJiYgeGkgJSAyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZmMuZmVhdHVyZXMucHVzaChwb2x5Z29uKFtbXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFldLFxuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZICsgY2VsbEhlaWdodF0sXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCArIGNlbGxXaWR0aCwgY3VycmVudFldLFxuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZXVxuICAgICAgICAgICAgICAgIF1dKSwgcG9seWdvbihbW1xuICAgICAgICAgICAgICAgICAgICBbY3VycmVudFgsIGN1cnJlbnRZICsgY2VsbEhlaWdodF0sXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCArIGNlbGxXaWR0aCwgY3VycmVudFkgKyBjZWxsSGVpZ2h0XSxcbiAgICAgICAgICAgICAgICAgICAgW2N1cnJlbnRYICsgY2VsbFdpZHRoLCBjdXJyZW50WV0sXG4gICAgICAgICAgICAgICAgICAgIFtjdXJyZW50WCwgY3VycmVudFkgKyBjZWxsSGVpZ2h0XVxuICAgICAgICAgICAgICAgIF1dKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50WSArPSBjZWxsSGVpZ2h0O1xuICAgICAgICAgICAgeWkrKztcbiAgICAgICAgfVxuICAgICAgICB4aSsrO1xuICAgICAgICBjdXJyZW50WCArPSBjZWxsV2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBmYztcbn07XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3RyaWFuZ2xlLWdyaWQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZGlzdGFuY2UgPSByZXF1aXJlKCdAdHVyZi9kaXN0YW5jZScpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyk7XG52YXIgcG9pbnQgPSBoZWxwZXJzLnBvaW50O1xudmFyIHBvbHlnb24gPSBoZWxwZXJzLnBvbHlnb247XG52YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSBoZWxwZXJzLmZlYXR1cmVDb2xsZWN0aW9uO1xuXG4vLyBQcmVjb21wdXRlIGNvc2luZXMgYW5kIHNpbmVzIG9mIGFuZ2xlcyB1c2VkIGluIGhleGFnb24gY3JlYXRpb25cbi8vIGZvciBwZXJmb3JtYW5jZSBnYWluXG52YXIgY29zaW5lcyA9IFtdO1xudmFyIHNpbmVzID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgIHZhciBhbmdsZSA9IDIgKiBNYXRoLlBJIC8gNiAqIGk7XG4gICAgY29zaW5lcy5wdXNoKE1hdGguY29zKGFuZ2xlKSk7XG4gICAgc2luZXMucHVzaChNYXRoLnNpbihhbmdsZSkpO1xufVxuXG4vKipcbiAqIFRha2VzIGEgYm91bmRpbmcgYm94IGFuZCB0aGUgZGlhbWV0ZXIgb2YgdGhlIGNlbGwgYW5kIHJldHVybnMgYSB7QGxpbmsgRmVhdHVyZUNvbGxlY3Rpb259IG9mIGZsYXQtdG9wcGVkXG4gKiBoZXhhZ29ucyBvciB0cmlhbmdsZXMgKHtAbGluayBQb2x5Z29ufSBmZWF0dXJlcykgYWxpZ25lZCBpbiBhbiBcIm9kZC1xXCIgdmVydGljYWwgZ3JpZCBhc1xuICogZGVzY3JpYmVkIGluIFtIZXhhZ29uYWwgR3JpZHNdKGh0dHA6Ly93d3cucmVkYmxvYmdhbWVzLmNvbS9ncmlkcy9oZXhhZ29ucy8pLlxuICpcbiAqIEBuYW1lIGhleEdyaWRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYmJveCBleHRlbnQgaW4gW21pblgsIG1pblksIG1heFgsIG1heFldIG9yZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gY2VsbERpYW1ldGVyIGRpYW1ldGVyIG9mIHRoZSBjaXJjdW1jaXJjbGUgb2YgdGhlIGhleGFnb25zLCBpbiBzcGVjaWZpZWQgdW5pdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHM9a2lsb21ldGVyc10gdXNlZCBpbiBjYWxjdWxhdGluZyBjZWxsIHNpemUsIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHBhcmFtIHtib29sZWFufSBbdHJpYW5nbGVzPWZhbHNlXSB3aGV0aGVyIHRvIHJldHVybiBhcyB0cmlhbmdsZXMgaW5zdGVhZCBvZiBoZXhhZ29uc1xuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBhIGhleGFnb25hbCBncmlkXG4gKiBAZXhhbXBsZVxuICogdmFyIGJib3ggPSBbLTk2LDMxLC04NCw0MF07XG4gKiB2YXIgY2VsbERpYW1ldGVyID0gNTA7XG4gKiB2YXIgdW5pdHMgPSAnbWlsZXMnO1xuICpcbiAqIHZhciBoZXhncmlkID0gdHVyZi5oZXhHcmlkKGJib3gsIGNlbGxEaWFtZXRlciwgdW5pdHMpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtoZXhncmlkXTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoZXhHcmlkKGJib3gsIGNlbGxEaWFtZXRlciwgdW5pdHMsIHRyaWFuZ2xlcykge1xuICAgIHZhciB3ZXN0ID0gYmJveFswXTtcbiAgICB2YXIgc291dGggPSBiYm94WzFdO1xuICAgIHZhciBlYXN0ID0gYmJveFsyXTtcbiAgICB2YXIgbm9ydGggPSBiYm94WzNdO1xuICAgIHZhciBjZW50ZXJZID0gKHNvdXRoICsgbm9ydGgpIC8gMjtcbiAgICB2YXIgY2VudGVyWCA9ICh3ZXN0ICsgZWFzdCkgLyAyO1xuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1R1cmZqcy90dXJmL2lzc3Vlcy83NThcbiAgICB2YXIgeEZyYWN0aW9uID0gY2VsbERpYW1ldGVyIC8gKGRpc3RhbmNlKHBvaW50KFt3ZXN0LCBjZW50ZXJZXSksIHBvaW50KFtlYXN0LCBjZW50ZXJZXSksIHVuaXRzKSk7XG4gICAgdmFyIGNlbGxXaWR0aCA9IHhGcmFjdGlvbiAqIChlYXN0IC0gd2VzdCk7XG4gICAgdmFyIHlGcmFjdGlvbiA9IGNlbGxEaWFtZXRlciAvIChkaXN0YW5jZShwb2ludChbY2VudGVyWCwgc291dGhdKSwgcG9pbnQoW2NlbnRlclgsIG5vcnRoXSksIHVuaXRzKSk7XG4gICAgdmFyIGNlbGxIZWlnaHQgPSB5RnJhY3Rpb24gKiAobm9ydGggLSBzb3V0aCk7XG4gICAgdmFyIHJhZGl1cyA9IGNlbGxXaWR0aCAvIDI7XG5cbiAgICB2YXIgaGV4X3dpZHRoID0gcmFkaXVzICogMjtcbiAgICB2YXIgaGV4X2hlaWdodCA9IE1hdGguc3FydCgzKSAvIDIgKiBjZWxsSGVpZ2h0O1xuXG4gICAgdmFyIGJveF93aWR0aCA9IGVhc3QgLSB3ZXN0O1xuICAgIHZhciBib3hfaGVpZ2h0ID0gbm9ydGggLSBzb3V0aDtcblxuICAgIHZhciB4X2ludGVydmFsID0gMyAvIDQgKiBoZXhfd2lkdGg7XG4gICAgdmFyIHlfaW50ZXJ2YWwgPSBoZXhfaGVpZ2h0O1xuXG4gICAgdmFyIHhfc3BhbiA9IGJveF93aWR0aCAvIChoZXhfd2lkdGggLSByYWRpdXMgLyAyKTtcbiAgICB2YXIgeF9jb3VudCA9IE1hdGguY2VpbCh4X3NwYW4pO1xuICAgIGlmIChNYXRoLnJvdW5kKHhfc3BhbikgPT09IHhfY291bnQpIHtcbiAgICAgICAgeF9jb3VudCsrO1xuICAgIH1cblxuICAgIHZhciB4X2FkanVzdCA9ICgoeF9jb3VudCAqIHhfaW50ZXJ2YWwgLSByYWRpdXMgLyAyKSAtIGJveF93aWR0aCkgLyAyIC0gcmFkaXVzIC8gMjtcblxuICAgIHZhciB5X2NvdW50ID0gTWF0aC5jZWlsKGJveF9oZWlnaHQgLyBoZXhfaGVpZ2h0KTtcblxuICAgIHZhciB5X2FkanVzdCA9IChib3hfaGVpZ2h0IC0geV9jb3VudCAqIGhleF9oZWlnaHQpIC8gMjtcblxuICAgIHZhciBoYXNPZmZzZXRZID0geV9jb3VudCAqIGhleF9oZWlnaHQgLSBib3hfaGVpZ2h0ID4gaGV4X2hlaWdodCAvIDI7XG4gICAgaWYgKGhhc09mZnNldFkpIHtcbiAgICAgICAgeV9hZGp1c3QgLT0gaGV4X2hlaWdodCAvIDQ7XG4gICAgfVxuXG4gICAgdmFyIGZjID0gZmVhdHVyZUNvbGxlY3Rpb24oW10pO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgeF9jb3VudDsgeCsrKSB7XG4gICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDw9IHlfY291bnQ7IHkrKykge1xuXG4gICAgICAgICAgICB2YXIgaXNPZGQgPSB4ICUgMiA9PT0gMTtcbiAgICAgICAgICAgIGlmICh5ID09PSAwICYmIGlzT2RkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh5ID09PSAwICYmIGhhc09mZnNldFkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNlbnRlcl94ID0geCAqIHhfaW50ZXJ2YWwgKyB3ZXN0IC0geF9hZGp1c3Q7XG4gICAgICAgICAgICB2YXIgY2VudGVyX3kgPSB5ICogeV9pbnRlcnZhbCArIHNvdXRoICsgeV9hZGp1c3Q7XG5cbiAgICAgICAgICAgIGlmIChpc09kZCkge1xuICAgICAgICAgICAgICAgIGNlbnRlcl95IC09IGhleF9oZWlnaHQgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyaWFuZ2xlcykge1xuICAgICAgICAgICAgICAgIGZjLmZlYXR1cmVzLnB1c2guYXBwbHkoZmMuZmVhdHVyZXMsIGhleFRyaWFuZ2xlcyhbY2VudGVyX3gsIGNlbnRlcl95XSwgY2VsbFdpZHRoIC8gMiwgY2VsbEhlaWdodCAvIDIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmMuZmVhdHVyZXMucHVzaChoZXhhZ29uKFtjZW50ZXJfeCwgY2VudGVyX3ldLCBjZWxsV2lkdGggLyAyLCBjZWxsSGVpZ2h0IC8gMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZjO1xufTtcblxuLy9DZW50ZXIgc2hvdWxkIGJlIFt4LCB5XVxuZnVuY3Rpb24gaGV4YWdvbihjZW50ZXIsIHJ4LCByeSkge1xuICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgIHZhciB4ID0gY2VudGVyWzBdICsgcnggKiBjb3NpbmVzW2ldO1xuICAgICAgICB2YXIgeSA9IGNlbnRlclsxXSArIHJ5ICogc2luZXNbaV07XG4gICAgICAgIHZlcnRpY2VzLnB1c2goW3gsIHldKTtcbiAgICB9XG4gICAgLy9maXJzdCBhbmQgbGFzdCB2ZXJ0ZXggbXVzdCBiZSB0aGUgc2FtZVxuICAgIHZlcnRpY2VzLnB1c2godmVydGljZXNbMF0pO1xuICAgIHJldHVybiBwb2x5Z29uKFt2ZXJ0aWNlc10pO1xufVxuXG4vL0NlbnRlciBzaG91bGQgYmUgW3gsIHldXG5mdW5jdGlvbiBoZXhUcmlhbmdsZXMoY2VudGVyLCByeCwgcnkpIHtcbiAgICB2YXIgdHJpYW5nbGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gW107XG4gICAgICAgIHZlcnRpY2VzLnB1c2goY2VudGVyKTtcbiAgICAgICAgdmVydGljZXMucHVzaChbXG4gICAgICAgICAgICBjZW50ZXJbMF0gKyByeCAqIGNvc2luZXNbaV0sXG4gICAgICAgICAgICBjZW50ZXJbMV0gKyByeSAqIHNpbmVzW2ldXG4gICAgICAgIF0pO1xuICAgICAgICB2ZXJ0aWNlcy5wdXNoKFtcbiAgICAgICAgICAgIGNlbnRlclswXSArIHJ4ICogY29zaW5lc1soaSArIDEpICUgNl0sXG4gICAgICAgICAgICBjZW50ZXJbMV0gKyByeSAqIHNpbmVzWyhpICsgMSkgJSA2XVxuICAgICAgICBdKTtcbiAgICAgICAgdmVydGljZXMucHVzaChjZW50ZXIpO1xuICAgICAgICB0cmlhbmdsZXMucHVzaChwb2x5Z29uKFt2ZXJ0aWNlc10pKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2hleC1ncmlkL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJib3ggPSByZXF1aXJlKCdAdHVyZi9iYm94Jyk7XG52YXIgZGlzdGFuY2UgPSByZXF1aXJlKCdAdHVyZi9kaXN0YW5jZScpO1xudmFyIGNlbnRyb2lkID0gcmVxdWlyZSgnQHR1cmYvY2VudHJvaWQnKTtcbnZhciBzcXVhcmVHcmlkID0gcmVxdWlyZSgnQHR1cmYvc3F1YXJlLWdyaWQnKTtcblxuLyoqXG4gKlxuICogVGFrZXMgYSBGZWF0dXJlQ29sbGVjdGlvbiBvZiBwb2ludHMgd2l0aCBrbm93biB2YWx1ZSwgYSBwb3dlciBwYXJhbWV0ZXIsIGEgY2VsbCBkZXB0aCwgYSB1bml0IG9mIG1lYXN1cmVtZW50XG4gKiBhbmQgcmV0dXJucyBhIEZlYXR1cmVDb2xsZWN0aW9uIG9mIHBvbHlnb25zIGluIGEgc3F1YXJlLWdyaWQgd2l0aCBhbiBpbnRlcnBvbGF0ZWQgdmFsdWUgcHJvcGVydHkgXCJJRFdcIiBmb3IgZWFjaCBncmlkIGNlbGwuXG4gKiBJdCBmaW5kcyBhcHBsaWNhdGlvbiB3aGVuIGluIG5lZWQgb2YgY3JlYXRpbmcgYSBjb250aW51b3VzIHN1cmZhY2UgKGkuZS4gcmFpbmZhbGwsIHRlbXBlcmF0dXJlLCBjaGVtaWNhbCBkaXNwZXJzaW9uIHN1cmZhY2UuLi4pXG4gKiBmcm9tIGEgc2V0IG9mIHNwYXRpYWxseSBzY2F0dGVyZWQgcG9pbnRzLlxuICpcbiAqIEBuYW1lIGlkd1xuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IGNvbnRyb2xQb2ludHMgU2FtcGxlZCBwb2ludHMgd2l0aCBrbm93biB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlRmllbGQgR2VvSlNPTiBmaWVsZCBjb250YWluaW5nIHRoZSBrbm93biB2YWx1ZSB0byBpbnRlcnBvbGF0ZSBvblxuICogQHBhcmFtIHtudW1iZXJ9IHdlaWdodCBFeHBvbmVudCByZWd1bGF0aW5nIHRoZSBkaXN0YW5jZS1kZWNheSB3ZWlnaHRpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBjZWxsV2lkdGggVGhlIGRpc3RhbmNlIGFjcm9zcyBlYWNoIGNlbGxcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHM9a2lsb21ldGVyc10gdXNlZCBpbiBjYWxjdWxhdGluZyBjZWxsU2l6ZSwgY2FuIGJlIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBvciBraWxvbWV0ZXJzXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248UG9seWdvbj59IGdyaWQgQSBncmlkIG9mIHBvbHlnb25zIHdpdGggYSBwcm9wZXJ0eSBmaWVsZCBuYW1lZCBhcyBgdmFsdWVGaWVsZGBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udHJvbFBvaW50cywgdmFsdWVGaWVsZCwgd2VpZ2h0LCBjZWxsV2lkdGgsIHVuaXRzKSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghdmFsdWVGaWVsZCkgdGhyb3cgbmV3IEVycm9yKCd2YWx1ZUZpZWxkIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKHdlaWdodCA9PT0gdW5kZWZpbmVkIHx8IHdlaWdodCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCd3ZWlnaHQgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoY2VsbFdpZHRoID09PSB1bmRlZmluZWQgfHwgY2VsbFdpZHRoID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ2NlbGxXaWR0aCBpcyByZXF1aXJlZCcpO1xuXG4gICAgLy8gY2hlY2sgaWYgZmllbGQgY29udGFpbmluZyBkYXRhIGV4aXN0cy5cbiAgICB2YXIgZmlsdGVyZWQgPSBjb250cm9sUG9pbnRzLmZlYXR1cmVzLmZpbHRlcihmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gZmVhdHVyZS5wcm9wZXJ0aWVzICYmXG4gICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkodmFsdWVGaWVsZCk7XG4gICAgfSk7XG4gICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdTcGVjaWZpZWQgRGF0YSBGaWVsZCBpcyBNaXNzaW5nJyk7XG5cbiAgICAvLyBjcmVhdGUgYSBzYW1wbGUgc3F1YXJlIGdyaWRcbiAgICAvLyBjb21wYXJlZCB0byBhIHBvaW50IGdyaWQgaGVscHMgdmlzdWFsaXppbmcgdGhlIG91dHB1dCAobGlrZSBhIHJhc3Rlci4uKVxuICAgIHZhciBzYW1wbGluZ0dyaWQgPSBzcXVhcmVHcmlkKGJib3goY29udHJvbFBvaW50cyksIGNlbGxXaWR0aCwgdW5pdHMpO1xuICAgIHZhciBOID0gc2FtcGxpbmdHcmlkLmZlYXR1cmVzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgICB2YXIgencgPSAwO1xuICAgICAgICB2YXIgc3cgPSAwO1xuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGZyb20gZWFjaCBjb250cm9sIHBvaW50IHRvIGNlbGwncyBjZW50cm9pZFxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvbnRyb2xQb2ludHMuZmVhdHVyZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBkID0gZGlzdGFuY2UoY2VudHJvaWQoc2FtcGxpbmdHcmlkLmZlYXR1cmVzW2ldKSwgY29udHJvbFBvaW50cy5mZWF0dXJlc1tqXSwgdW5pdHMpO1xuICAgICAgICAgICAgaWYgKGQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB6dyA9IGNvbnRyb2xQb2ludHMuZmVhdHVyZXNbal0ucHJvcGVydGllc1t2YWx1ZUZpZWxkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB3ID0gMS4wIC8gTWF0aC5wb3coZCwgd2VpZ2h0KTtcbiAgICAgICAgICAgIHN3ICs9IHc7XG4gICAgICAgICAgICB6dyArPSB3ICogY29udHJvbFBvaW50cy5mZWF0dXJlc1tqXS5wcm9wZXJ0aWVzW3ZhbHVlRmllbGRdO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdyaXRlIElEVyB2YWx1ZSBmb3IgZWFjaCBncmlkIGNlbGxcbiAgICAgICAgc2FtcGxpbmdHcmlkLmZlYXR1cmVzW2ldLnByb3BlcnRpZXNbdmFsdWVGaWVsZF0gPSB6dyAvIHN3O1xuICAgIH1cbiAgICByZXR1cm4gc2FtcGxpbmdHcmlkO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2lkdy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciByYnVzaCA9IHJlcXVpcmUoJ3JidXNoJyk7XG52YXIgdW5pb24gPSByZXF1aXJlKCdAdHVyZi91bmlvbicpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyk7XG52YXIgdHVyZkJCb3ggPSByZXF1aXJlKCdAdHVyZi9iYm94Jyk7XG52YXIgZmxhdHRlbkVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuZmxhdHRlbkVhY2g7XG5cbi8qKlxuICogVGFrZXMgYW55IHR5cGUgb2Yge0BsaW5rIFBvbHlnb258cG9seWdvbn0gYW5kIGFuIG9wdGlvbmFsIG1hc2sgYW5kIHJldHVybnMgYSB7QGxpbmsgUG9seWdvbnxwb2x5Z29ufSBleHRlcmlvciByaW5nIHdpdGggaG9sZXMuXG4gKlxuICogQG5hbWUgbWFza1xuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxGZWF0dXJlPFBvbHlnb258TXVsdGlQb2x5Z29uPn0gcG9seWdvbiBHZW9KU09OIFBvbHlnb24gdXNlZCBhcyBpbnRlcmlvciByaW5ncyBvciBob2xlcy5cbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29uPn0gW21hc2tdIEdlb0pTT04gUG9seWdvbiB1c2VkIGFzIHRoZSBleHRlcmlvciByaW5nIChpZiB1bmRlZmluZWQsIHRoZSB3b3JsZCBleHRlbnQgaXMgdXNlZClcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fSBNYXNrZWQgUG9seWdvbiAoZXh0ZXJpb3IgcmluZyB3aXRoIGhvbGVzKS5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1sxMTIsIC0yMV0sIFsxMTYsIC0zNl0sIFsxNDYsIC0zOV0sIFsxNTMsIC0yNF0sIFsxMzMsIC0xMF0sIFsxMTIsIC0yMV1dXSk7XG4gKiB2YXIgbWFzayA9IHR1cmYucG9seWdvbihbW1s5MCwgLTU1XSwgWzE3MCwgLTU1XSwgWzE3MCwgMTBdLCBbOTAsIDEwXSwgWzkwLCAtNTVdXV0pO1xuICpcbiAqIHZhciBtYXNrZWQgPSB0dXJmLm1hc2socG9seWdvbiwgbWFzayk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW21hc2tlZF1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9seWdvbiwgbWFzaykge1xuICAgIC8vIERlZmluZSBtYXNrXG4gICAgdmFyIG1hc2tQb2x5Z29uID0gY3JlYXRlTWFzayhtYXNrKTtcblxuICAgIC8vIERlZmluZSBwb2x5Z29uXG4gICAgdmFyIHNlcGFyYXRlZCA9IHNlcGFyYXRlUG9seWdvbnMocG9seWdvbik7XG4gICAgdmFyIHBvbHlnb25PdXRlcnMgPSBzZXBhcmF0ZWRbMF07XG4gICAgdmFyIHBvbHlnb25Jbm5lcnMgPSBzZXBhcmF0ZWRbMV07XG5cbiAgICAvLyBVbmlvbiBPdXRlcnMgJiBJbm5lcnNcbiAgICBwb2x5Z29uT3V0ZXJzID0gdW5pb25Qb2x5Z29ucyhwb2x5Z29uT3V0ZXJzKTtcbiAgICBwb2x5Z29uSW5uZXJzID0gdW5pb25Qb2x5Z29ucyhwb2x5Z29uSW5uZXJzKTtcblxuICAgIC8vIENyZWF0ZSBtYXNrZWQgYXJlYVxuICAgIHZhciBtYXNrZWQgPSBidWlsZE1hc2sobWFza1BvbHlnb24sIHBvbHlnb25PdXRlcnMsIHBvbHlnb25Jbm5lcnMpO1xuICAgIHJldHVybiBtYXNrZWQ7XG59O1xuXG4vKipcbiAqIEJ1aWxkIE1hc2tcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvbHlnb24+fSBtYXNrUG9seWdvbiBNYXNrIE91dGVyXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBwb2x5Z29uT3V0ZXJzIFBvbHlnb24gT3V0ZXJzXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBwb2x5Z29uSW5uZXJzIFBvbHlnb24gSW5uZXJzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxQb2x5Z29uPn0gRmVhdHVyZSBQb2x5Z29uXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTWFzayhtYXNrUG9seWdvbiwgcG9seWdvbk91dGVycywgcG9seWdvbklubmVycykge1xuICAgIHZhciBjb29yZGluYXRlcyA9IFtdO1xuICAgIGNvb3JkaW5hdGVzLnB1c2gobWFza1BvbHlnb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pO1xuXG4gICAgZmxhdHRlbkVhY2gocG9seWdvbk91dGVycywgZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgY29vcmRpbmF0ZXMucHVzaChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdKTtcbiAgICB9KTtcblxuICAgIGZsYXR0ZW5FYWNoKHBvbHlnb25Jbm5lcnMsIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzLnB1c2goZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGhlbHBlcnMucG9seWdvbihjb29yZGluYXRlcyk7XG59XG5cbi8qKlxuICogU2VwYXJhdGUgUG9seWdvbnMgdG8gaW5uZXJzICYgb3V0ZXJzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IHBvbHlnb24gR2VvSlNPTiBGZWF0dXJlXG4gKiBAcmV0dXJucyB7QXJyYXk8RmVhdHVyZUNvbGxlY3Rpb248UG9seWdvbj4sIEZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+Pn0gT3V0ZXIgJiBJbm5lciBsaW5lc1xuICovXG5mdW5jdGlvbiBzZXBhcmF0ZVBvbHlnb25zKHBvbHlnb24pIHtcbiAgICB2YXIgb3V0ZXJzID0gW107XG4gICAgdmFyIGlubmVycyA9IFtdO1xuICAgIGZsYXR0ZW5FYWNoKHBvbHlnb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIHZhciBjb29yZGluYXRlcyA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgIHZhciBmZWF0dXJlT3V0ZXIgPSBjb29yZGluYXRlc1swXTtcbiAgICAgICAgdmFyIGZlYXR1cmVJbm5lciA9IGNvb3JkaW5hdGVzLnNsaWNlKDEpO1xuICAgICAgICBvdXRlcnMucHVzaChoZWxwZXJzLnBvbHlnb24oW2ZlYXR1cmVPdXRlcl0pKTtcbiAgICAgICAgZmVhdHVyZUlubmVyLmZvckVhY2goZnVuY3Rpb24gKGlubmVyKSB7XG4gICAgICAgICAgICBpbm5lcnMucHVzaChoZWxwZXJzLnBvbHlnb24oW2lubmVyXSkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2hlbHBlcnMuZmVhdHVyZUNvbGxlY3Rpb24ob3V0ZXJzKSwgaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbihpbm5lcnMpXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgTWFzayBDb29yZGluYXRlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ZlYXR1cmU8UG9seWdvbj59IFttYXNrXSBkZWZhdWx0IHRvIHdvcmxkIGlmIHVuZGVmaW5lZFxuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbj59IG1hc2sgY29vcmRpbmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVNYXNrKG1hc2spIHtcbiAgICB2YXIgd29ybGQgPSBbW1sxODAsIDkwXSwgWy0xODAsIDkwXSwgWy0xODAsIC05MF0sIFsxODAsIC05MF0sIFsxODAsIDkwXV1dO1xuICAgIHZhciBjb29yZGluYXRlcyA9IG1hc2sgJiYgbWFzay5nZW9tZXRyeS5jb29yZGluYXRlcyB8fCB3b3JsZDtcbiAgICByZXR1cm4gaGVscGVycy5wb2x5Z29uKGNvb3JkaW5hdGVzKTtcbn1cblxuLyoqXG4gKiBVbmlvbiBQb2x5Z29uc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBwb2x5Z29ucyBjb2xsZWN0aW9uIG9mIHBvbHlnb25zXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248UG9seWdvbj59IHBvbHlnb25zIG9ubHkgYXBwbHkgdW5pb24gaWYgdGhleSBjb2xsaWRlXG4gKi9cbmZ1bmN0aW9uIHVuaW9uUG9seWdvbnMocG9seWdvbnMpIHtcbiAgICBpZiAocG9seWdvbnMuZmVhdHVyZXMubGVuZ3RoIDw9IDEpIHJldHVybiBwb2x5Z29ucztcblxuICAgIHZhciB0cmVlID0gY3JlYXRlSW5kZXgocG9seWdvbnMpO1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIHJlbW92ZWQgPSB7fTtcblxuICAgIGZsYXR0ZW5FYWNoKHBvbHlnb25zLCBmdW5jdGlvbiAoY3VycmVudEZlYXR1cmUsIGN1cnJlbnRJbmRleCkge1xuICAgICAgICAvLyBFeGNsdWRlIGFueSByZW1vdmVkIGZlYXR1cmVzXG4gICAgICAgIGlmIChyZW1vdmVkW2N1cnJlbnRJbmRleF0pIHJldHVybiB0cnVlO1xuXG4gICAgICAgIC8vIERvbid0IHNlYXJjaCBmb3IgaXRzZWxmXG4gICAgICAgIHRyZWUucmVtb3ZlKHtpbmRleDogY3VycmVudEluZGV4fSwgZmlsdGVyQnlJbmRleCk7XG4gICAgICAgIHJlbW92ZWRbY3VycmVudEluZGV4XSA9IHRydWU7XG5cbiAgICAgICAgLy8gS2VlcCBhcHBseWluZyB0aGUgdW5pb24gb3BlcmF0aW9uIHVudGlsIG5vIG1vcmUgb3ZlcmxhcHBpbmcgZmVhdHVyZXNcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBiYm94ID0gdHVyZkJCb3goY3VycmVudEZlYXR1cmUpO1xuICAgICAgICAgICAgdmFyIHNlYXJjaCA9IHRyZWUuc2VhcmNoKHtcbiAgICAgICAgICAgICAgICBtaW5YOiBiYm94WzBdLFxuICAgICAgICAgICAgICAgIG1pblk6IGJib3hbMV0sXG4gICAgICAgICAgICAgICAgbWF4WDogYmJveFsyXSxcbiAgICAgICAgICAgICAgICBtYXhZOiBiYm94WzNdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzZWFyY2gubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBwb2x5cyA9IHNlYXJjaC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFtpdGVtLmluZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRyZWUucmVtb3ZlKHtpbmRleDogaXRlbS5pbmRleH0sIGZpbHRlckJ5SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5nZW9qc29uO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHBvbHlzLnB1c2goY3VycmVudEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRGZWF0dXJlID0gdW5pb24uYXBwbHkodGhpcywgcG9seXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRG9uZVxuICAgICAgICAgICAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMucHVzaChjdXJyZW50RmVhdHVyZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbihyZXN1bHRzKTtcbn1cblxuLyoqXG4gKiBGaWx0ZXIgYnkgSW5kZXggLSBSQnVzaCBoZWxwZXIgZnVuY3Rpb25cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGEgcmVtb3ZlIGl0ZW1cbiAqIEBwYXJhbSB7T2JqZWN0fSBiIHNlYXJjaCBpdGVtXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBtYXRjaGVzXG4gKi9cbmZ1bmN0aW9uIGZpbHRlckJ5SW5kZXgoYSwgYikge1xuICAgIHJldHVybiBhLmluZGV4ID09PSBiLmluZGV4O1xufVxuXG4vKipcbiAqIENyZWF0ZSBSQnVzaCBUcmVlIEluZGV4XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248YW55Pn0gZmVhdHVyZXMgR2VvSlNPTiBGZWF0dXJlQ29sbGVjdGlvblxuICogQHJldHVybnMge1JCdXNofSBSQnVzaCBUcmVlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluZGV4KGZlYXR1cmVzKSB7XG4gICAgdmFyIHRyZWUgPSByYnVzaCgpO1xuICAgIHZhciBsb2FkID0gW107XG4gICAgZmxhdHRlbkVhY2goZmVhdHVyZXMsIGZ1bmN0aW9uIChmZWF0dXJlLCBpbmRleCkge1xuICAgICAgICB2YXIgYmJveCA9IHR1cmZCQm94KGZlYXR1cmUpO1xuICAgICAgICBsb2FkLnB1c2goe1xuICAgICAgICAgICAgbWluWDogYmJveFswXSxcbiAgICAgICAgICAgIG1pblk6IGJib3hbMV0sXG4gICAgICAgICAgICBtYXhYOiBiYm94WzJdLFxuICAgICAgICAgICAgbWF4WTogYmJveFszXSxcbiAgICAgICAgICAgIGdlb2pzb246IGZlYXR1cmUsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdHJlZS5sb2FkKGxvYWQpO1xuICAgIHJldHVybiB0cmVlO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvbWFzay9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBsaW5lU2xpY2VBbG9uZyA9IHJlcXVpcmUoJ0B0dXJmL2xpbmUtc2xpY2UtYWxvbmcnKTtcbnZhciBsaW5lRGlzdGFuY2UgPSByZXF1aXJlKCdAdHVyZi9saW5lLWRpc3RhbmNlJyk7XG52YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykuZmVhdHVyZUNvbGxlY3Rpb247XG52YXIgZmxhdHRlbkVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuZmxhdHRlbkVhY2g7XG5cbi8qKlxuICogRGl2aWRlcyBhIHtAbGluayBMaW5lU3RyaW5nfSBpbnRvIGNodW5rcyBvZiBhIHNwZWNpZmllZCBsZW5ndGguXG4gKiBJZiB0aGUgbGluZSBpcyBzaG9ydGVyIHRoYW4gdGhlIHNlZ21lbnQgbGVuZ3RoIHRoZW4gdGhlIG9yaWdpbmFsIGxpbmUgaXMgcmV0dXJuZWQuXG4gKlxuICogQG5hbWUgbGluZUNodW5rXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEdlb21ldHJ5fEZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmc+fSBnZW9qc29uIHRoZSBsaW5lcyB0byBzcGxpdFxuICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnRMZW5ndGggaG93IGxvbmcgdG8gbWFrZSBlYWNoIHNlZ21lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfVt1bml0cz0na2lsb21ldGVycyddIHVuaXRzIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHBhcmFtIHtib29sZWFufVtyZXZlcnNlPWZhbHNlXSByZXZlcnNlcyBjb29yZGluYXRlcyB0byBzdGFydCB0aGUgZmlyc3QgY2h1bmtlZCBzZWdtZW50IGF0IHRoZSBlbmRcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxMaW5lU3RyaW5nPn0gY29sbGVjdGlvbiBvZiBsaW5lIHNlZ21lbnRzXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1stOTUsIDQwXSwgWy05MywgNDVdLCBbLTg1LCA1MF1dKTtcbiAqXG4gKiB2YXIgY2h1bmsgPSB0dXJmLmxpbmVDaHVuayhsaW5lLCAxNSwgJ21pbGVzJyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2NodW5rXTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbiwgc2VnbWVudExlbmd0aCwgdW5pdHMsIHJldmVyc2UpIHtcbiAgICBpZiAoIWdlb2pzb24pIHRocm93IG5ldyBFcnJvcignZ2VvanNvbiBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChzZWdtZW50TGVuZ3RoIDw9IDApIHRocm93IG5ldyBFcnJvcignc2VnbWVudExlbmd0aCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcblxuICAgIC8vIEZsYXR0ZW4gZWFjaCBmZWF0dXJlIHRvIHNpbXBsZSBMaW5lU3RyaW5nXG4gICAgZmxhdHRlbkVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgLy8gcmV2ZXJzZXMgY29vcmRpbmF0ZXMgdG8gc3RhcnQgdGhlIGZpcnN0IGNodW5rZWQgc2VnbWVudCBhdCB0aGUgZW5kXG4gICAgICAgIGlmIChyZXZlcnNlKSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5yZXZlcnNlKCk7XG5cbiAgICAgICAgc2xpY2VMaW5lU2VnbWVudHMoZmVhdHVyZSwgc2VnbWVudExlbmd0aCwgdW5pdHMsIGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goc2VnbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihyZXN1bHRzKTtcbn07XG5cbi8qKlxuICogU2xpY2UgTGluZSBTZWdtZW50c1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IGxpbmUgR2VvSlNPTiBMaW5lU3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gc2VnbWVudExlbmd0aCBob3cgbG9uZyB0byBtYWtlIGVhY2ggc2VnbWVudFxuICogQHBhcmFtIHtzdHJpbmd9W3VuaXRzPSdraWxvbWV0ZXJzJ10gdW5pdHMgY2FuIGJlIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBvciBraWxvbWV0ZXJzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBpdGVyYXRlIG92ZXIgc2xpY2VkIGxpbmUgc2VnbWVudHNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBzbGljZUxpbmVTZWdtZW50cyhsaW5lLCBzZWdtZW50TGVuZ3RoLCB1bml0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgbGluZUxlbmd0aCA9IGxpbmVEaXN0YW5jZShsaW5lLCB1bml0cyk7XG5cbiAgICAvLyBJZiB0aGUgbGluZSBpcyBzaG9ydGVyIHRoYW4gdGhlIHNlZ21lbnQgbGVuZ3RoIHRoZW4gdGhlIG9yZ2luYWwgbGluZSBpcyByZXR1cm5lZC5cbiAgICBpZiAobGluZUxlbmd0aCA8PSBzZWdtZW50TGVuZ3RoKSByZXR1cm4gY2FsbGJhY2sobGluZSk7XG5cbiAgICB2YXIgbnVtYmVyT2ZTZWdtZW50cyA9IE1hdGguZmxvb3IobGluZUxlbmd0aCAvIHNlZ21lbnRMZW5ndGgpICsgMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mU2VnbWVudHM7IGkrKykge1xuICAgICAgICB2YXIgb3V0bGluZSA9IGxpbmVTbGljZUFsb25nKGxpbmUsIHNlZ21lbnRMZW5ndGggKiBpLCBzZWdtZW50TGVuZ3RoICogKGkgKyAxKSwgdW5pdHMpO1xuICAgICAgICBjYWxsYmFjayhvdXRsaW5lLCBpKTtcbiAgICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9saW5lLWNodW5rL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHNpbXBsZXBvbHlnb24gPSByZXF1aXJlKCdzaW1wbGVwb2x5Z29uJyk7XG52YXIgZmxhdHRlbiA9IHJlcXVpcmUoJ0B0dXJmL2ZsYXR0ZW4nKTtcbnZhciBmZWF0dXJlRWFjaCA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5mZWF0dXJlRWFjaDtcbnZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKS5mZWF0dXJlQ29sbGVjdGlvbjtcblxuLyoqXG4gKiBUYWtlcyBhIGtpbmtlZCBwb2x5Z29uIGFuZCByZXR1cm5zIGEgZmVhdHVyZSBjb2xsZWN0aW9uIG9mIHBvbHlnb25zIHRoYXQgaGF2ZSBubyBraW5rcy5cbiAqIFVzZXMgW3NpbXBsZXBvbHlnb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9tY2xhZXlzYi9zaW1wbGVwb2x5Z29uKSBpbnRlcm5hbGx5LlxuICpcbiAqIEBuYW1lIHVua2lua1BvbHlnb25cbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IGdlb2pzb24gR2VvSlNPTiBQb2x5Z29uIG9yIE11bHRpUG9seWdvblxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBVbmtpbmtlZCBwb2x5Z29uc1xuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5ID0gdHVyZi5wb2x5Z29uKFtbWzAsIDBdLCBbMiwgMF0sIFswLCAyXSwgWzIsIDJdLCBbMCwgMF1dXSk7XG4gKlxuICogdmFyIHJlc3VsdCA9IHR1cmYudW5raW5rUG9seWdvbihwb2x5KTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9seSwgcmVzdWx0XVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBmZWF0dXJlQ29sbGVjdGlvbihbXSk7XG5cbiAgICAvLyBIYW5kbGVzIEZlYXR1cmVDb2xsZWN0aW9uICYgRmVhdHVyZVxuICAgIGZlYXR1cmVFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG5cbiAgICAgICAgLy8gSGFuZGxlIE11bHRpUG9seWdvbnMgYXMgRmVhdHVyZSBvciBGZWF0dXJlQ29sbGVjdGlvblxuICAgICAgICBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnTXVsdGlQb2x5Z29uJykgeyBmZWF0dXJlID0gZmxhdHRlbihmZWF0dXJlKTsgfVxuXG4gICAgICAgIC8vIFN0b3JlIHNpbXBsZSBwb2x5Z29ucyBpbiByZXN1bHRzXG4gICAgICAgIGZlYXR1cmVFYWNoKGZlYXR1cmUsIGZ1bmN0aW9uIChwb2x5Z29uKSB7XG4gICAgICAgICAgICB2YXIgc2ltcGxlID0gc2ltcGxlcG9seWdvbihwb2x5Z29uKTtcblxuICAgICAgICAgICAgZmVhdHVyZUVhY2goc2ltcGxlLCBmdW5jdGlvbiAocG9seSkge1xuICAgICAgICAgICAgICAgIHBvbHkucHJvcGVydGllcyA9IChwb2x5Z29uLnByb3BlcnRpZXMpID8gcG9seWdvbi5wcm9wZXJ0aWVzIDoge307XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5mZWF0dXJlcy5wdXNoKHBvbHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL3Vua2luay1wb2x5Z29uL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzZWN0cyA9IHJlcXVpcmUoJ2dlb2pzb24tcG9seWdvbi1zZWxmLWludGVyc2VjdGlvbnMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGluc2lkZSA9IHJlcXVpcmUoJ0B0dXJmL2luc2lkZScpO1xudmFyIGFyZWEgPSByZXF1aXJlKCdAdHVyZi9hcmVhJyk7XG52YXIgcmJ1c2ggPSByZXF1aXJlKCdyYnVzaCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc2ltcGxlcG9seWdvbicpO1xudmFyIGRlYnVnQWxsID0gcmVxdWlyZSgnZGVidWcnKSgnc2ltcGxlcG9seWdvbjphbGwnKTtcblxuLyoqXG4qIFRha2VzIGEgY29tcGxleCAoaS5lLiBzZWxmLWludGVyc2VjdGluZykgZ2VvanNvbiBwb2x5Z29uLCBhbmQgYnJlYWtzIGl0IGRvd24gaW50byBpdHMgY29tcG9zaXRlIHNpbXBsZSwgbm9uLXNlbGYtaW50ZXJzZWN0aW5nIG9uZS1yaW5nIHBvbHlnb25zLlxuKlxuKiBAbW9kdWxlIHNpbXBsZXBvbHlnb25cbiogQHBhcmFtIHtGZWF0dXJlfSBmZWF0dXJlIElucHV0IHBvbHlnb24uIFRoaXMgcG9seWdvbiBtYXkgYmUgdW5jb25mb3JtIHRoZSB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2ltcGxlX0ZlYXR1cmVzfFNpbXBsZSBGZWF0dXJlcyBzdGFuZGFyZH0gaW4gdGhlIHNlbnNlIHRoYXQgaXQncyBpbm5lciBhbmQgb3V0ZXIgcmluZ3MgbWF5IGNyb3NzLWludGVyc2VjdCBvciBzZWxmLWludGVyc2VjdCwgdGhhdCB0aGUgb3V0ZXIgcmluZyBtdXN0IG5vdCBjb250YWluIHRoZSBvcHRpb25hbCBpbm5lciByaW5ncyBhbmQgdGhhdCB0aGUgd2luZGluZyBudW1iZXIgbXVzdCBub3QgYmUgcG9zaXRpdmUgZm9yIHRoZSBvdXRlciBhbmQgbmVnYXRpdmUgZm9yIHRoZSBpbm5lciByaW5ncy5cbiogQHJldHVybiB7RmVhdHVyZUNvbGxlY3Rpb259IEZlYXR1cmUgY29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBzaW1wbGUsIG5vbi1zZWxmLWludGVyc2VjdGluZyBvbmUtcmluZyBwb2x5Z29uIGZlYXR1cmVzIHRoYXQgdGhlIGNvbXBsZXggcG9seWdvbiBpcyBjb21wb3NlZCBvZi4gVGhlc2Ugc2ltcGxlIHBvbHlnb25zIGhhdmUgcHJvcGVydGllcyBzdWNoIGFzIHRoZWlyIHBhcmVudCBwb2x5Z29uLCB3aW5kaW5nIG51bWJlciBhbmQgbmV0IHdpbmRpbmcgbnVtYmVyLlxuKlxuKiBAZXhhbXBsZVxuKiB2YXIgcG9seSA9IHtcbiogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4qICAgXCJnZW9tZXRyeVwiOiB7XG4qICAgICBcInR5cGVcIjogXCJQb2x5Z29uXCIsXG4qICAgICBcImNvb3JkaW5hdGVzXCI6IFtbWzAsMF0sWzIsMF0sWzAsMl0sWzIsMl0sWzAsMF1dXVxuKiAgIH1cbiogfTtcbipcbiogdmFyIHJlc3VsdCA9IHNpbXBsZXBvbHlnb24ocG9seSk7XG4qXG4qIC8vID1yZXN1bHRcbiogLy8gd2hpY2ggd2lsbCBiZSBhIGZlYXR1cmVDb2xsZWN0aW9uIG9mIHR3byBwb2x5Z29ucywgb25lIHdpdGggY29vcmRpbmF0ZXMgW1tbMCwwXSxbMiwwXSxbMSwxXSxbMCwwXV1dLCBwYXJlbnQgLTEsIHdpbmRpbmcgMSBhbmQgbmV0IHdpbmRpbmcgMSwgYW5kIG9uZSB3aXRoIGNvb3JkaW5hdGVzIFtbWzEsMV0sWzAsMl0sWzIsMl0sWzEsMV1dXSwgcGFyZW50IC0xLCB3aW5kaW5nIC0xIGFuZCBuZXQgd2luZGluZyAtMVxuKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIC8vIENoZWNrIGlucHV0XG4gIGlmIChmZWF0dXJlLnR5cGUgIT0gXCJGZWF0dXJlXCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBpbnB1dCBtdXN0IGEgZ2VvanNvbiBvYmplY3Qgb2YgdHlwZSBGZWF0dXJlXCIpO1xuICBpZiAoKGZlYXR1cmUuZ2VvbWV0cnkgPT09IHVuZGVmaW5lZCkgfHwgKGZlYXR1cmUuZ2VvbWV0cnkgPT0gbnVsbCkpIHRocm93IG5ldyBFcnJvcihcIlRoZSBpbnB1dCBtdXN0IGEgZ2VvanNvbiBvYmplY3Qgd2l0aCBhIG5vbi1lbXB0eSBnZW9tZXRyeVwiKTtcbiAgaWYgKGZlYXR1cmUuZ2VvbWV0cnkudHlwZSAhPSBcIlBvbHlnb25cIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGlucHV0IG11c3QgYmUgYSBnZW9qc29uIFBvbHlnb25cIik7XG5cbiAgLy8gUHJvY2VzcyBpbnB1dFxuICB2YXIgbnVtUmluZ3MgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgdmFyIHZlcnRpY2VzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtUmluZ3M7IGkrKykge1xuICAgIHZhciByaW5nID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tpXTtcbiAgICBpZiAoIWVxdWFsQXJyYXlzKHJpbmdbMF0scmluZ1tyaW5nLmxlbmd0aC0xXSkpIHtcbiAgICAgIHJpbmcucHVzaChyaW5nWzBdKSAvLyBDbG9zZSBpbnB1dCByaW5nIGlmIGl0IGlzIG5vdFxuICAgIH1cbiAgICB2ZXJ0aWNlcy5wdXNoLmFwcGx5KHZlcnRpY2VzLHJpbmcuc2xpY2UoMCxyaW5nLmxlbmd0aC0xKSk7XG4gIH1cbiAgaWYgKCFpc1VuaXF1ZSh2ZXJ0aWNlcykpIHRocm93IG5ldyBFcnJvcihcIlRoZSBpbnB1dCBwb2x5Z29uIG1heSBub3QgaGF2ZSBkdXBsaWNhdGUgdmVydGljZXMgKGV4Y2VwdCBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IHZlcnRleCBvZiBlYWNoIHJpbmcpXCIpO1xuICB2YXIgbnVtdmVydGljZXMgPSB2ZXJ0aWNlcy5sZW5ndGg7IC8vIG51bWJlciBvZiBpbnB1dCByaW5nIHZlcnRpY2VzLCB3aXRoIHRoZSBsYXN0IGNsb3NpbmcgdmVydGljZXMgbm90IGNvdW50ZWRcbiAgZGVidWcoXCJQcm9jZXNzaW5nIGlucHV0XCIpO1xuXG4gIC8vIENvbXB1dGUgc2VsZi1pbnRlcnNlY3Rpb25zXG4gIHZhciBzZWxmSXNlY3RzRGF0YSA9IGlzZWN0cyhmZWF0dXJlLCBmdW5jdGlvbiBmaWx0ZXJGbihpc2VjdCwgcmluZzAsIGVkZ2UwLCBzdGFydDAsIGVuZDAsIGZyYWMwLCByaW5nMSwgZWRnZTEsIHN0YXJ0MSwgZW5kMSwgZnJhYzEsIHVuaXF1ZSl7XG4gICAgcmV0dXJuIFtpc2VjdCwgcmluZzAsIGVkZ2UwLCBzdGFydDAsIGVuZDAsIGZyYWMwLCByaW5nMSwgZWRnZTEsIHN0YXJ0MSwgZW5kMSwgZnJhYzEsIHVuaXF1ZV07XG4gIH0pO1xuICB2YXIgbnVtU2VsZklzZWN0ID0gc2VsZklzZWN0c0RhdGEubGVuZ3RoO1xuICBkZWJ1ZyhcIkNvbXB1dGluZyBzZWxmLWludGVyc2VjdGlvbnNcIik7XG5cbiAgLy8gSWYgbm8gc2VsZi1pbnRlcnNlY3Rpb25zIGFyZSBmb3VuZCwgdGhlIGlucHV0IHJpbmdzIGFyZSB0aGUgb3V0cHV0IHJpbmdzLiBIZW5jZSwgd2UgbXVzdCBvbmx5IGNvbXB1dGUgdGhlaXIgd2luZGluZyBudW1iZXJzLCBuZXQgd2luZGluZyBudW1iZXJzIGFuZCAoc2luY2Ugb2hlcnMgcmluZ3MgY291bGQgbGllIG91dHNpZGUgdGhlIGZpcnN0IHJpbmcpIHBhcmVudHMuXG4gIGlmIChudW1TZWxmSXNlY3QgPT0gMCkge1xuICAgIHZhciBvdXRwdXRGZWF0dXJlQXJyYXkgPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbnVtUmluZ3M7IGkrKykge1xuICAgICAgb3V0cHV0RmVhdHVyZUFycmF5LnB1c2goaGVscGVycy5wb2x5Z29uKFtmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldXSx7cGFyZW50OiAtMSwgd2luZGluZzogd2luZGluZ09mUmluZyhmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldKX0pKTtcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IGhlbHBlcnMuZmVhdHVyZUNvbGxlY3Rpb24ob3V0cHV0RmVhdHVyZUFycmF5KVxuICAgIGRldGVybWluZVBhcmVudHMoKTtcbiAgICBzZXROZXRXaW5kaW5nKCk7XG4gICAgZGVidWdBbGwoXCJObyBzZWxmLWludGVyc2VjdGlvbnMgZm91bmQuIElucHV0IHJpbmdzIGFyZSBvdXRwdXQgcmluZ3MuIENvbXB1dGVkIHdpbmRpbmcgbnVtYmVycywgbmV0IHdpbmRpbmcgbnVtYmVycyBhbmQgcGFyZW50c1wiKTtcbiAgICBkZWJ1ZyhcIkZpbmlzaGluZyB3aXRob3V0IHNlbGYtaW50ZXJzZWN0aW9uc1wiKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgLy8gSWYgc2VsZi1pbnRlcnNlY3Rpb25zIGFyZSBmb3VuZCwgd2Ugd2lsbCBjb21wdXRlIHRoZSBvdXRwdXQgcmluZ3Mgd2l0aCB0aGUgaGVscCBvZiB0d28gaW50ZXJtZWRpYXRlIHZhcmlhYmxlc1xuICAvLyBGaXJzdCwgd2UgYnVpbGQgdGhlIHBzZXVkbyB2ZXJ0ZXggbGlzdCBhbmQgaW50ZXJzZWN0aW9uIGxpc3RcbiAgLy8gVGhlIFBzZXVkbyB2ZXJ0ZXggbGlzdCBpcyBhbiBhcnJheSB3aXRoIGZvciBlYWNoIHJpbmcgYW4gYXJyYXkgd2l0aCBmb3IgZWFjaCBlZGdlIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBzZXVkby12ZXJ0aWNlcyAoYXMgbWFkZSBieSB0aGVpciBjb25zdHJ1Y3RvcikgdGhhdCBoYXZlIHRoaXMgcmluZyBhbmQgZWRnZSBhcyByaW5nQW5kRWRnZUluLCBzb3J0ZWQgZm9yIGVhY2ggZWRnZSBieSB0aGVpciBmcmFjdGlvbmFsIGRpc3RhbmNlIG9uIHRoaXMgZWRnZS4gSXQncyBsZW5ndGggaGVuY2UgZXF1YWxzIG51bVJpbmdzLlxuICB2YXIgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2UgPSBbXTtcbiAgLy8gVGhlIGludGVyc2VjdGlvbiBsaXN0IGlzIGFuIGFycmF5IGNvbnRhaW5pbmcgaW50ZXJzZWN0aW9ucyAoYXMgbWFkZSBieSB0aGVpciBjb25zdHJ1Y3RvcikuIEZpcnN0IGFsbCBudW12ZXJ0aWNlcyByaW5nLXZlcnRleC1pbnRlcnNlY3Rpb25zLCB0aGVuIGFsbCBzZWxmLWludGVyc2VjdGlvbnMgKGludHJhLSBhbmQgaW50ZXItcmluZykuIFRoZSBvcmRlciBvZiB0aGUgbGF0dGVyIGlzIG5vdCBpbXBvcnRhbnQgYnV0IGlzIHBlcm1hbmVudCBvbmNlIGdpdmVuLlxuICB2YXIgaXNlY3RMaXN0ID0gW107XG4gIC8vIEFkZGluZyByaW5nLXBzZXVkby12ZXJ0aWNlcyB0byBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZSBhbmQgcmluZy12ZXJ0ZXgtaW50ZXJzZWN0aW9ucyB0byBpc2VjdExpc3RcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1SaW5nczsgaSsrKSB7XG4gICAgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2UucHVzaChbXSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldLmxlbmd0aC0xOyBqKyspIHtcbiAgICAgIC8vIEVhY2ggZWRnZSB3aWxsIGZlYXR1cmUgb25lIHJpbmctcHNldWRvLXZlcnRleCBpbiBpdHMgYXJyYXksIG9uIHRoZSBsYXN0IHBvc2l0aW9uLiBpLmUuIGVkZ2UgaiBmZWF0dXJlcyB0aGUgcmluZy1wc2V1ZG8tdmVydGV4IG9mIHRoZSByaW5nIHZlcnRleCBqKzEsIHdoaWNoIGhhcyByaW5nQW5kRWRnZUluID0gW2ksal0sIG9uIHRoZSBsYXN0IHBvc2l0aW9uLlxuICAgICAgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2VbaV0ucHVzaChbbmV3IFBzZXVkb1Z0eChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldWyhqKzEpLm1vZHVsbyhmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldLmxlbmd0aC0xKV0sIDEsIFtpLCBqXSwgW2ksIChqKzEpLm1vZHVsbyhmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldLmxlbmd0aC0xKV0sIHVuZGVmaW5lZCldKTtcbiAgICAgIC8vIFRoZSBmaXJzdCBudW12ZXJ0aWNlcyBlbGVtZW50cyBpbiBpc2VjdExpc3QgY29ycmVzcG9uZCB0byB0aGUgcmluZy12ZXJ0ZXgtaW50ZXJzZWN0aW9uc1xuICAgICAgaXNlY3RMaXN0LnB1c2gobmV3IElzZWN0KGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbaV1bal0sIFtpLCAoai0xKS5tb2R1bG8oZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tpXS5sZW5ndGgtMSldLCBbaSwgal0sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmYWxzZSwgdHJ1ZSkpO1xuICAgIH1cbiAgfVxuICAvLyBBZGRpbmcgaW50ZXJzZWN0aW9uLXBzZXVkby12ZXJ0aWNlcyB0byBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZSBhbmQgc2VsZi1pbnRlcnNlY3Rpb25zIHRvIGlzZWN0TGlzdFxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVNlbGZJc2VjdDsgaSsrKSB7XG4gICAgLy8gQWRkaW5nIGludGVyc2VjdGlvbi1wc2V1ZG8tdmVydGljZXMgbWFkZSB1c2luZyBzZWxmSXNlY3RzRGF0YSB0byBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZSdzIGFycmF5IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGluY29tbWluZyByaW5nIGFuZCBlZGdlXG4gICAgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2Vbc2VsZklzZWN0c0RhdGFbaV1bMV1dW3NlbGZJc2VjdHNEYXRhW2ldWzJdXS5wdXNoKG5ldyBQc2V1ZG9WdHgoc2VsZklzZWN0c0RhdGFbaV1bMF0sIHNlbGZJc2VjdHNEYXRhW2ldWzVdLCBbc2VsZklzZWN0c0RhdGFbaV1bMV0sIHNlbGZJc2VjdHNEYXRhW2ldWzJdXSwgW3NlbGZJc2VjdHNEYXRhW2ldWzZdLCBzZWxmSXNlY3RzRGF0YVtpXVs3XV0sIHVuZGVmaW5lZCkpO1xuICAgIC8vIHNlbGZJc2VjdHNEYXRhIGNvbnRhaW5zIGRvdWJsZSBtZW50aW9ucyBvZiBlYWNoIGludGVyc2VjdGlvbiwgYnV0IHdlIG9ubHkgd2FudCB0byBhZGQgdGhlbSBvbmNlIHRvIGlzZWN0TGlzdFxuICAgIGlmIChzZWxmSXNlY3RzRGF0YVtpXVsxMV0pIGlzZWN0TGlzdC5wdXNoKG5ldyBJc2VjdChzZWxmSXNlY3RzRGF0YVtpXVswXSwgW3NlbGZJc2VjdHNEYXRhW2ldWzFdLCBzZWxmSXNlY3RzRGF0YVtpXVsyXV0sIFtzZWxmSXNlY3RzRGF0YVtpXVs2XSwgc2VsZklzZWN0c0RhdGFbaV1bN11dLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSwgdHJ1ZSkpO1xuICB9XG4gIHZhciBudW1Jc2VjdCA9IGlzZWN0TGlzdC5sZW5ndGg7XG4gIC8vIFNvcnQgZWRnZSBhcnJheXMgb2YgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2UgYnkgdGhlIGZyYWN0aW9uYWwgZGlzdGFuY2UgJ3BhcmFtJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2VbaV1bal0uc29ydChmdW5jdGlvbihhLCBiKXsgcmV0dXJuIChhLnBhcmFtIDwgYi5wYXJhbSkgPyAtMSA6IDEgOyB9ICk7XG4gICAgfVxuICB9XG4gIGRlYnVnKFwiU2V0dGluZyB1cCBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZSBhbmQgaXNlY3RMaXN0XCIpO1xuXG4gIC8vIE1ha2UgYSBzcGF0aWFsIGluZGV4IG9mIGludGVyc2VjdGlvbnMsIGluIHByZXBlcmF0aW9uIGZvciB0aGUgZm9sbG93aW5nIHR3byBzdGVwc1xuICBhbGxJc2VjdHNBc0lzZWN0UmJ1c2hUcmVlSXRlbSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUlzZWN0OyBpKyspIHtcbiAgICBhbGxJc2VjdHNBc0lzZWN0UmJ1c2hUcmVlSXRlbS5wdXNoKHttaW5YOiBpc2VjdExpc3RbaV0uY29vcmRbMF0sIG1pblk6IGlzZWN0TGlzdFtpXS5jb29yZFsxXSwgbWF4WDogaXNlY3RMaXN0W2ldLmNvb3JkWzBdLCBtYXhZOiBpc2VjdExpc3RbaV0uY29vcmRbMV0sIGluZGV4OiBpfSk7IC8vIGNvdWxkIHBhc3MgaXNlY3Q6IGlzZWN0TGlzdFtpXSwgYnV0IG5vdCBuZWNlc3NhcnlcbiAgfVxuICB2YXIgaXNlY3RSYnVzaFRyZWUgPSByYnVzaCgpO1xuICBpc2VjdFJidXNoVHJlZS5sb2FkKGFsbElzZWN0c0FzSXNlY3RSYnVzaFRyZWVJdGVtKTtcblxuICAvLyBOb3cgd2Ugd2lsbCB0ZWFjaCBlYWNoIGludGVyc2VjdGlvbiBpbiBpc2VjdExpc3Qgd2hpY2ggaXMgdGhlIG5leHQgaW50ZXJzZWN0aW9uIGFsb25nIGJvdGggaXQncyBbcmluZywgZWRnZV0ncywgaW4gdHdvIHN0ZXBzLlxuICAvLyBGaXJzdCwgd2UgZmluZCB0aGUgbmV4dCBpbnRlcnNlY3Rpb24gZm9yIGVhY2ggcHNldWRvLXZlcnRleCBpbiBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZTpcbiAgLy8gRm9yIGVhY2ggcHNldWRvdmVydGV4IGluIHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlICgzIGxvb3BzKSBsb29rIGF0IHRoZSBuZXh0IHBzZXVkb3ZlcnRleCBvbiB0aGF0IGVkZ2UgYW5kIGZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgaW50ZXJzZWN0aW9uIGJ5IGNvbXBhcmluZyBjb29yZGluYXRlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlLmxlbmd0aDsgaSsrKXtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlW2ldLmxlbmd0aDsgaisrKXtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2VbaV1bal0ubGVuZ3RoOyBrKyspe1xuICAgICAgICB2YXIgY29vcmRUb0ZpbmQ7XG4gICAgICAgIGlmIChrID09IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlW2ldW2pdLmxlbmd0aC0xKSB7IC8vIElmIGl0J3MgdGhlIGxhc3QgcHNldWRvVmVydGV4IG9uIHRoYXQgZWRnZSwgdGhlbiB0aGUgbmV4dCBwc2V1ZG9WZXJ0ZXggaXMgdGhlIGZpcnN0IG9uZSBvbiB0aGUgbmV4dCBlZGdlIG9mIHRoYXQgcmluZy5cbiAgICAgICAgICBjb29yZFRvRmluZCA9IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlW2ldWyhqKzEpLm1vZHVsbyhmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldLmxlbmd0aC0xKV1bMF0uY29vcmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29vcmRUb0ZpbmQgPSBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZVtpXVtqXVtrKzFdLmNvb3JkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBJc2VjdFJidXNoVHJlZUl0ZW1Gb3VuZCA9IGlzZWN0UmJ1c2hUcmVlLnNlYXJjaCh7bWluWDogY29vcmRUb0ZpbmRbMF0sIG1pblk6IGNvb3JkVG9GaW5kWzFdLCBtYXhYOiBjb29yZFRvRmluZFswXSwgbWF4WTogY29vcmRUb0ZpbmRbMV19KVswXTsgLy8gV2UgY2FuIHRha2UgWzBdIG9mIHRoZSByZXN1bHQsIGJlY2F1c2UgdGhlcmUgaXMgb25seSBvbmUgaXNlY3QgY29ycmVwb25kaW5nIHRvIGEgcHNldWRvLXZlcnRleFxuICAgICAgICBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZVtpXVtqXVtrXS5ueHRJc2VjdEFsb25nRWRnZUluID0gSXNlY3RSYnVzaFRyZWVJdGVtRm91bmQuaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRlYnVnKFwiQ29tcHV0aW5nIG5leHRJc2VjdCBmb3IgcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2VcIik7XG5cbiAgLy8gU2Vjb25kLCB3ZSBwb3J0IHRoaXMga25vd2xlZGdlIG9mIHRoZSBuZXh0IGludGVyc2VjdGlvbiBvdmVyIHRvIHRoZSBpbnRlcnNlY3Rpb25zIGluIGlzZWN0TGlzdCwgYnkgZmluZGluZyB0aGUgaW50ZXJzZWN0aW9uIGNvcnJlc3BvbmRpbmcgdG8gZWFjaCBwc2V1ZG8tdmVydGV4IGFuZCBjb3B5aW5nIHRoZSBwc2V1ZG8tdmVydGV4JyBrbm93bmxlZGdlIG9mIHRoZSBuZXh0LWludGVyc2VjdGlvbiBvdmVyIHRvIHRoZSBpbnRlcnNlY3Rpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZS5sZW5ndGg7IGkrKyl7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZVtpXS5sZW5ndGg7IGorKyl7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlW2ldW2pdLmxlbmd0aDsgaysrKXtcbiAgICAgICAgdmFyIGNvb3JkVG9GaW5kID0gcHNldWRvVnR4TGlzdEJ5UmluZ0FuZEVkZ2VbaV1bal1ba10uY29vcmQ7XG4gICAgICAgIHZhciBJc2VjdFJidXNoVHJlZUl0ZW1Gb3VuZCA9IGlzZWN0UmJ1c2hUcmVlLnNlYXJjaCh7bWluWDogY29vcmRUb0ZpbmRbMF0sIG1pblk6IGNvb3JkVG9GaW5kWzFdLCBtYXhYOiBjb29yZFRvRmluZFswXSwgbWF4WTogY29vcmRUb0ZpbmRbMV19KVswXTsgLy8gV2UgY2FuIHRha2UgWzBdIG9mIHRoZSByZXN1bHQsIGJlY2F1c2UgdGhlcmUgaXMgb25seSBvbmUgaXNlY3QgY29ycmVwb25kaW5nIHRvIGEgcHNldWRvLXZlcnRleFxuICAgICAgICB2YXIgbCA9IElzZWN0UmJ1c2hUcmVlSXRlbUZvdW5kLmluZGV4O1xuICAgICAgICBpZiAobCA8IG51bXZlcnRpY2VzKSB7IC8vIFNwZWNpYWwgdHJlYXRtZW50IGF0IHJpbmctdmVydGljZXM6IHdlIGNvcnJlY3QgdGhlIG1pc25hbWluZyB0aGF0IGhhcHBlbmVkIGluIHRoZSBwcmV2aW91cyBibG9jaywgc2luY2UgcmluZ0FuZEVkZ2VPdXQgPSByaW5nQW5kRWRnZTIgZm9yIHJpbmcgdmVydGljZXMuXG4gICAgICAgICAgICBpc2VjdExpc3RbbF0ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMiA9IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlW2ldW2pdW2tdLm54dElzZWN0QWxvbmdFZGdlSW47XG4gICAgICAgIH0gZWxzZSB7IC8vIFBvcnQgdGhlIGtub3dsZWRnZSBvZiB0aGUgbmV4dCBpbnRlcnNlY3Rpb24gZnJvbSB0aGUgcHNldWRvLXZlcnRpY2VzIHRvIHRoZSBpbnRlcnNlY3Rpb25zLCBkZXBlbmRpbmcgb24gaG93IHRoZSBlZGdlcyBhcmUgbGFiZWxlZCBpbiB0aGUgcHNldWRvLXZlcnRleCBhbmQgaW50ZXJzZWN0aW9uLlxuICAgICAgICAgIGlmIChlcXVhbEFycmF5cyhpc2VjdExpc3RbbF0ucmluZ0FuZEVkZ2UxLCBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZVtpXVtqXVtrXS5yaW5nQW5kRWRnZUluKSkge1xuICAgICAgICAgICAgaXNlY3RMaXN0W2xdLm54dElzZWN0QWxvbmdSaW5nQW5kRWRnZTEgPSBwc2V1ZG9WdHhMaXN0QnlSaW5nQW5kRWRnZVtpXVtqXVtrXS5ueHRJc2VjdEFsb25nRWRnZUluO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc2VjdExpc3RbbF0ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMiA9IHBzZXVkb1Z0eExpc3RCeVJpbmdBbmRFZGdlW2ldW2pdW2tdLm54dElzZWN0QWxvbmdFZGdlSW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFRoaXMgZXhwbGFpbnMgd2h5LCBldmVudGhvdWdoIHdoZW4gd2Ugd2lsbCB3YWxrIGF3YXkgZnJvbSBhbiBpbnRlcnNlY3Rpb24sIHdlIHdpbGwgd2FsayB3YXkgZnJvbSB0aGUgY29ycmVzcG9uZGluZyBwc2V1ZG8tdmVydGV4IGFsb25nIGVkZ2VPdXQsIHBzZXVkby12ZXJ0aWNlcyBoYXZlIHRoZSBwcm9wZXJ0eSAnbnh0SXNlY3RBbG9uZ0VkZ2VJbicgaW4gc3RlYWQgb2Ygc29tZSBwcm9wZXJ5ICdueHRQc2V1ZG9WdHhBbG9uZ0VkZ2VPdXQnLiBUaGlzIGlzIGJlY2F1c2UgdGhpcyBwcm9wZXJ0eSAod2hpY2ggaXMgZWFzeSB0byBmaW5kIG91dCkgaXMgdXNlZCBpbiB0aGUgYWJvdmUgZm9yIG54dElzZWN0QWxvbmdSaW5nQW5kRWRnZTEgYW5kIG54dElzZWN0QWxvbmdSaW5nQW5kRWRnZTIhXG4gIGRlYnVnKFwiUG9ydGluZyBuZXh0SXNlY3QgdG8gaXNlY3RMaXN0XCIpO1xuXG4gIC8vIEJlZm9yZSB3ZSBzdGFydCB3YWxraW5nIG92ZXIgdGhlIGludGVyc2VjdGlvbnMgdG8gYnVpbGQgdGhlIG91dHB1dCByaW5ncywgd2UgcHJlcGFyZSBhIHF1ZXVlIHRoYXQgc3RvcmVzIGluZm9ybWF0aW9uIG9uIGludGVyc2VjdGlvbnMgd2Ugc3RpbGwgaGF2ZSB0byBkZWFsIHdpdGgsIGFuZCBwdXQgYXQgbGVhc3Qgb25lIGludGVyc2VjdGlvbiBpbiBpdC5cbiAgLy8gVGhpcyBxdWV1ZSB3aWxsIGNvbnRhaW4gaW5mb3JtYXRpb24gb24gaW50ZXJzZWN0aW9ucyB3aGVyZSB3ZSBjYW4gc3RhcnQgd2Fsa2luZyBmcm9tIG9uY2UgdGhlIGN1cnJlbnQgd2FsayBpcyBmaW5pc2hlZCwgYW5kIGl0cyBwYXJlbnQgb3V0cHV0IHJpbmcgKHRoZSBzbWFsbGVzdCBvdXRwdXQgcmluZyBpdCBsaWVzIHdpdGhpbiwgLTEgaWYgbm8gcGFyZW50IG9yIHBhcmVudCB1bmtub3duIHlldCkgYW5kIGl0cyB3aW5kaW5nIG51bWJlciAod2hpY2ggd2UgY2FuIGFscmVhZHkgZGV0ZXJtaW5lKS5cbiAgdmFyIHF1ZXVlID0gW11cbiAgLy8gRm9yIGVhY2ggb3V0cHV0IHJpbmcsIGFkZCB0aGUgcmluZy12ZXJ0ZXgtaW50ZXJzZWN0aW9uIHdpdGggdGhlIHNtYWxsZXMgeC12YWx1ZSAoaS5lLiB0aGUgbGVmdC1tb3N0KSBhcyBhIHN0YXJ0IGludGVyc2VjdGlvbi4gQnkgY2hvb3Npbmcgc3VjaCBhbiBleHRyZW1hbCBpbnRlcnNlY3Rpb25zLCB3ZSBhcmUgc3VyZSB0byBzdGFydCBhdCBhbiBpbnRlcnNlY3Rpb24gdGhhdCBpcyBhIGNvbnZleCB2ZXJ0ZXggb2YgaXRzIG91dHB1dCByaW5nLiBCeSBhZGRpbmcgdGhlbSBhbGwgdG8gdGhlIHF1ZXVlLCB3ZSBhcmUgc3VyZSB0aGF0IG5vIHJpbmdzIHdpbGwgYmUgZm9yZ290dGVuLiBJZiBkdWUgdG8gcmluZy1pbnRlcnNlY3Rpb25zIHN1Y2ggYW4gaW50ZXJzZWN0aW9uIHdpbGwgYmUgZW5jb3VudGVyZWQgd2hpbGUgd2Fsa2luZywgaXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIHF1ZXVlLlxuICB2YXIgaSA9IDA7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgbnVtUmluZ3M7IGorKykge1xuICAgIHZhciBsZWZ0SXNlY3QgPSBpO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tqXS5sZW5ndGgtMTsgaysrKSB7XG4gICAgICBpZiAoaXNlY3RMaXN0W2ldLmNvb3JkWzBdIDwgaXNlY3RMaXN0W2xlZnRJc2VjdF0uY29vcmRbMF0pIHtcbiAgICAgICAgbGVmdElzZWN0ID0gaTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgLy8gQ29tcHV0ZSB3aW5kaW5nIGF0IHRoaXMgbGVmdC1tb3N0IHJpbmctdmVydGV4LWludGVyc2VjdGlvbi4gV2UgdGh1cyB0aGlzIGJ5IHVzaW5nIG91ciBrbm93bGVkZ2UgdGhhdCB0aGlzIGV4dHJlbWFsIHZlcnRleCBtdXN0IGJlIGEgY29udmV4IHZlcnRleC5cbiAgICAvLyBXZSBmaXJzdCBmaW5kIHRoZSBpbnRlcnNlY3Rpb24gYmVmb3JlIGFuZCBhZnRlciBpdCwgYW5kIHRoZW4gdXNlIHRoZW0gdG8gZGV0ZXJtaW5lIHRoZSB3aW5kaW5nIG51bWJlciBvZiB0aGUgY29ycmVzcG9uZGluZyBvdXRwdXQgcmluZywgc2luY2Ugd2Uga25vdyB0aGF0IGFuIGV4dHJlbWFsIHZlcnRleCBvZiBhIHNpbXBsZSwgbm9uLXNlbGYtaW50ZXJzZWN0aW5nIHJpbmcgaXMgYWx3YXlzIGNvbnZleCwgc28gdGhlIG9ubHkgcmVhc29uIGl0IHdvdWxkIG5vdCBiZSBpcyBiZWNhdXNlIHRoZSB3aW5kaW5nIG51bWJlciB3ZSB1c2UgdG8gY29tcHV0ZSBpdCBpcyB3cm9uZ1xuICAgIHZhciBpc2VjdEFmdGVyTGVmdElzZWN0ID0gaXNlY3RMaXN0W2xlZnRJc2VjdF0ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGlzZWN0TGlzdC5sZW5ndGg7IGsrKykge1xuICAgICAgaWYgKChpc2VjdExpc3Rba10ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMSA9PSBsZWZ0SXNlY3QpIHx8IChpc2VjdExpc3Rba10ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMiA9PSBsZWZ0SXNlY3QpKSB7XG4gICAgICAgIHZhciBpc2VjdEJlZm9yZUxlZnRJc2VjdCA9IGs7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHZhciB3aW5kaW5nQXRJc2VjdCA9IGlzQ29udmV4KFtpc2VjdExpc3RbaXNlY3RCZWZvcmVMZWZ0SXNlY3RdLmNvb3JkLGlzZWN0TGlzdFtsZWZ0SXNlY3RdLmNvb3JkLGlzZWN0TGlzdFtpc2VjdEFmdGVyTGVmdElzZWN0XS5jb29yZF0sdHJ1ZSkgPyAxIDogLTE7XG5cbiAgICBxdWV1ZS5wdXNoKHtpc2VjdDogbGVmdElzZWN0LCBwYXJlbnQ6IC0xLCB3aW5kaW5nOiB3aW5kaW5nQXRJc2VjdH0pXG4gIH1cbiAgLy8gU29ydCB0aGUgcXVldWUgYnkgdGhlIHNhbWUgY3JpdGVyaW9uIHVzZWQgdG8gZmluZCB0aGUgbGVmdElzZWN0OiB0aGUgbGVmdC1tb3N0IGxlZnRJc2VjdCBtdXN0IGJlIGxhc3QgaW4gdGhlIHF1ZXVlLCBzdWNoIHRoYXQgaXQgd2lsbCBiZSBwb3BwZWQgZmlyc3QsIHN1Y2ggdGhhdCB3ZSB3aWxsIHdvcmsgZnJvbSBvdXQgdG8gaW4gcmVnYXJkaW5nIGlucHV0IHJpbmdzLiBUaGlzIGFzc3VtdGlvbiBpcyB1c2VkIHdoZW4gcHJlZGljdGluZyB0aGUgd2luZGluZyBudW1iZXIgYW5kIHBhcmVudCBvZiBhIG5ldyBxdWV1ZSBtZW1iZXIuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24oYSwgYil7IHJldHVybiAoaXNlY3RMaXN0W2EuaXNlY3RdLmNvb3JkID4gaXNlY3RMaXN0W2IuaXNlY3RdLmNvb3JkKSA/IC0xIDogMSB9KTtcbiAgZGVidWdBbGwoXCJJbml0aWFsIHN0YXRlIG9mIHRoZSBxdWV1ZTogXCIgKyBKU09OLnN0cmluZ2lmeShxdWV1ZSkpO1xuICBkZWJ1ZyhcIlNldHRpbmcgdXAgcXVldWVcIik7XG5cbiAgLy8gSW5pdGlhbGlzZSBvdXRwdXRcbiAgdmFyIG91dHB1dEZlYXR1cmVBcnJheSA9IFtdO1xuXG4gIC8vIFdoaWxlIHRoZSBxdWV1ZSBpcyBub3QgZW1wdHksIHRha2UgdGhlIGxhc3Qgb2JqZWN0IChpLmUuIGl0cyBpbnRlcnNlY3Rpb24pIG91dCBhbmQgc3RhcnQgbWFraW5nIGFuIG91dHB1dCByaW5nIGJ5IHdhbGtpbmcgaW4gdGhlIGRpcmVjdGlvbiB0aGF0IGhhcyBub3QgYmVlbiB3YWxrZWQgYXdheSBvdmVyIHlldC5cbiAgd2hpbGUgKHF1ZXVlLmxlbmd0aD4wKSB7XG4gICAgLy8gR2V0IHRoZSBsYXN0IG9iamVjdCBvdXQgb2YgdGhlIHF1ZXVlXG4gICAgdmFyIHBvcHBlZCA9IHF1ZXVlLnBvcCgpO1xuICAgIHZhciBzdGFydElzZWN0ID0gcG9wcGVkLmlzZWN0O1xuICAgIHZhciBjdXJyZW50T3V0cHV0UmluZ1BhcmVudCA9IHBvcHBlZC5wYXJlbnQ7XG4gICAgdmFyIGN1cnJlbnRPdXRwdXRSaW5nV2luZGluZyA9IHBvcHBlZC53aW5kaW5nO1xuICAgIC8vIE1ha2UgbmV3IG91dHB1dCByaW5nIGFuZCBhZGQgdmVydGV4IGZyb20gc3RhcnRpbmcgaW50ZXJzZWN0aW9uXG4gICAgdmFyIGN1cnJlbnRPdXRwdXRSaW5nID0gb3V0cHV0RmVhdHVyZUFycmF5Lmxlbmd0aDtcbiAgICB2YXIgY3VycmVudE91dHB1dFJpbmdDb29yZHMgPSBbaXNlY3RMaXN0W3N0YXJ0SXNlY3RdLmNvb3JkXTtcbiAgICBkZWJ1Z0FsbChcIiMgU3RhcnRpbmcgb3V0cHV0IHJpbmcgbnVtYmVyIFwiICsgb3V0cHV0RmVhdHVyZUFycmF5Lmxlbmd0aCArIFwiIHdpdGggd2luZGluZyBcIiArIGN1cnJlbnRPdXRwdXRSaW5nV2luZGluZyArIFwiIGZyb20gaW50ZXJzZWN0aW9uIFwiICsgc3RhcnRJc2VjdCk7XG4gICAgaWYgKHN0YXJ0SXNlY3QgPCBudW12ZXJ0aWNlcykgZGVidWdBbGwoXCJUaGlzIGlzIGEgcmluZy12ZXJ0ZXgtaW50ZXJzZWN0aW9ucywgd2hpY2ggbWVhbnMgdGhpcyBvdXRwdXQgcmluZyBkb2VzIG5vdCB0b3VjaCBleGlzdGluZyBvdXRwdXQgcmluZ3NcIik7XG4gICAgLy8gU2V0IHVwIHRoZSB2YXJpYWJsZXMgdXNlZCB3aGlsZSB3YWxraW5nIG92ZXIgaW50ZXJzZWN0aW9uczogJ2N1cnJlbnRJc2VjdCcsICdueHRJc2VjdCcgYW5kICd3YWxraW5nUmluZ0FuZEVkZ2UnXG4gICAgdmFyIGN1cnJlbnRJc2VjdCA9IHN0YXJ0SXNlY3Q7XG4gICAgaWYgKGlzZWN0TGlzdFtzdGFydElzZWN0XS5yaW5nQW5kRWRnZTFXYWxrYWJsZSkge1xuICAgICAgdmFyIHdhbGtpbmdSaW5nQW5kRWRnZSA9IGlzZWN0TGlzdFtzdGFydElzZWN0XS5yaW5nQW5kRWRnZTE7XG4gICAgICB2YXIgbnh0SXNlY3QgPSBpc2VjdExpc3Rbc3RhcnRJc2VjdF0ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHdhbGtpbmdSaW5nQW5kRWRnZSA9IGlzZWN0TGlzdFtzdGFydElzZWN0XS5yaW5nQW5kRWRnZTI7XG4gICAgICB2YXIgbnh0SXNlY3QgPSBpc2VjdExpc3Rbc3RhcnRJc2VjdF0ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMjtcbiAgICB9XG4gICAgLy8gV2hpbGUgd2UgaGF2ZSBub3QgYXJyaXZlZCBiYWNrIGF0IHRoZSBzYW1lIGludGVyc2VjdGlvbiwga2VlcCB3YWxraW5nXG4gICAgd2hpbGUgKCFlcXVhbEFycmF5cyhpc2VjdExpc3Rbc3RhcnRJc2VjdF0uY29vcmQsaXNlY3RMaXN0W254dElzZWN0XS5jb29yZCkpe1xuICAgICAgZGVidWdBbGwoXCJXYWxraW5nIGZyb20gaW50ZXJzZWN0aW9uIFwiICsgY3VycmVudElzZWN0ICsgXCIgdG8gXCIgKyBueHRJc2VjdCArIFwiIG92ZXIgcmluZyBcIiArIHdhbGtpbmdSaW5nQW5kRWRnZVswXSArIFwiIGFuZCBlZGdlIFwiICsgd2Fsa2luZ1JpbmdBbmRFZGdlWzFdKTtcbiAgICAgIGN1cnJlbnRPdXRwdXRSaW5nQ29vcmRzLnB1c2goaXNlY3RMaXN0W254dElzZWN0XS5jb29yZCk7XG4gICAgICBkZWJ1Z0FsbChcIkFkZGluZyBpbnRlcnNlY3Rpb24gXCIgKyBueHRJc2VjdCArIFwiIHRvIGN1cnJlbnQgb3V0cHV0IHJpbmdcIik7XG4gICAgICAvLyBJZiB0aGUgbmV4dCBpbnRlcnNlY3Rpb24gaXMgcXVldWVkLCB3ZSBjYW4gcmVtb3ZlIGl0LCBiZWNhdXNlIHdlIHdpbGwgZ28gdGhlcmUgbm93LlxuICAgICAgdmFyIG54dElzZWN0SW5RdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykgeyBpZiAocXVldWVbaV0uaXNlY3QgPT0gbnh0SXNlY3QpIHtueHRJc2VjdEluUXVldWUgPSBpOyBicmVhazsgfSB9XG4gICAgICBpZiAobnh0SXNlY3RJblF1ZXVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWJ1Z0FsbChcIlJlbW92aW5nIGludGVyc2VjdGlvbiBcIiArIG54dElzZWN0ICsgXCIgZnJvbSBxdWV1ZVwiKTtcbiAgICAgICAgcXVldWUuc3BsaWNlKG54dElzZWN0SW5RdWV1ZSwxKTtcbiAgICAgIH1cbiAgICAgIC8vIEFycml2aW5nIGF0IHRoaXMgbmV3IGludGVyc2VjdGlvbiwgd2Uga25vdyB3aGljaCB3aWxsIGJlIG91ciBuZXh0IHdhbGtpbmcgcmluZyBhbmQgZWRnZSAoaWYgd2UgY2FtZSBmcm9tIDEgd2Ugd2lsbCB3YWxrIGF3YXkgZnJvbSAyIGFuZCB2aWNlIHZlcnNhKSxcbiAgICAgIC8vIFNvIHdlIGNhbiBzZXQgaXQgYXMgb3VyIG5ldyB3YWxraW5nIHJpbmcgYW5kIGludGVyc2VjdGlvbiBhbmQgcmVtZW1iZXIgdGhhdCB3ZSAod2lsbCkgaGF2ZSB3YWxrZWQgb3ZlciBpdFxuICAgICAgLy8gSWYgd2UgaGF2ZSBuZXZlciB3YWxrZWQgYXdheSBmcm9tIHRoaXMgbmV3IGludGVyc2VjdGlvbiBhbG9uZyB0aGUgb3RoZXIgcmluZyBhbmQgZWRnZSB0aGVuIHdlIHdpbGwgc29vbiBkbywgYWRkIHRoZSBpbnRlcnNlY3Rpb24gKGFuZCB0aGUgcGFyZW50IHdhbmQgd2luZGluZyBudW1iZXIpIHRvIHRoZSBxdWV1ZVxuICAgICAgLy8gKFdlIGNhbiBwcmVkaWN0IHRoZSB3aW5kaW5nIG51bWJlciBhbmQgcGFyZW50IGFzIGZvbGxvd3M6IGlmIHRoZSBlZGdlIGlzIGNvbnZleCwgdGhlIG90aGVyIG91dHB1dCByaW5nIHN0YXJ0ZWQgZnJvbSB0aGVyZSB3aWxsIGhhdmUgdGhlIGFsdGVybmF0ZSB3aW5kaW5nIGFuZCBsaWUgb3V0c2lkZSBvZiB0aGUgY3VycmVudCBvbmUsIGFuZCB0aHVzIGhhdmUgdGhlIHNhbWUgcGFyZW50IHJpbmcgYXMgdGhlIGN1cnJlbnQgcmluZy4gT3RoZXJ3aXNlLCBpdCB3aWxsIGhhdmUgdGhlIHNhbWUgd2luZGluZyBudW1iZXIgYW5kIGxpZSBpbnNpZGUgb2YgdGhlIGN1cnJlbnQgcmluZy4gV2UgYXJlLCBob3dldmVyLCBvbmx5IHN1cmUgb2YgdGhpcyBvZiBhbiBvdXRwdXQgcmluZyBzdGFydGVkIGZyb20gdGhlcmUgZG9lcyBub3QgZW5jbG9zZSB0aGUgY3VycmVudCByaW5nLiBUaGlzIGlzIHdoeSB0aGUgaW5pdGlhbCBxdWV1ZSdzIGludGVyc2VjdGlvbnMgbXVzdCBiZSBzb3J0ZWQgc3VjaCB0aGF0IG91dGVyIG9uZXMgY29tZSBvdXQgZmlyc3QuKVxuICAgICAgLy8gV2UgdGhlbiB1cGRhdGUgdGhlIG90aGVyIHR3byB3YWxraW5nIHZhcmlhYmxlcy5cbiAgICAgIGlmIChlcXVhbEFycmF5cyh3YWxraW5nUmluZ0FuZEVkZ2UsaXNlY3RMaXN0W254dElzZWN0XS5yaW5nQW5kRWRnZTEpKSB7XG4gICAgICAgIHdhbGtpbmdSaW5nQW5kRWRnZSA9IGlzZWN0TGlzdFtueHRJc2VjdF0ucmluZ0FuZEVkZ2UyO1xuICAgICAgICBpc2VjdExpc3Rbbnh0SXNlY3RdLnJpbmdBbmRFZGdlMldhbGthYmxlID0gZmFsc2U7XG4gICAgICAgIGlmIChpc2VjdExpc3Rbbnh0SXNlY3RdLnJpbmdBbmRFZGdlMVdhbGthYmxlKSB7XG4gICAgICAgICAgZGVidWdBbGwoXCJBZGRpbmcgaW50ZXJzZWN0aW9uIFwiICsgbnh0SXNlY3QgKyBcIiB0byBxdWV1ZVwiKTtcbiAgICAgICAgICB2YXIgcHVzaGluZyA9IHtpc2VjdDogbnh0SXNlY3R9O1xuICAgICAgICAgIGlmIChpc0NvbnZleChbaXNlY3RMaXN0W2N1cnJlbnRJc2VjdF0uY29vcmQsIGlzZWN0TGlzdFtueHRJc2VjdF0uY29vcmQsIGlzZWN0TGlzdFtpc2VjdExpc3Rbbnh0SXNlY3RdLm54dElzZWN0QWxvbmdSaW5nQW5kRWRnZTJdLmNvb3JkXSxjdXJyZW50T3V0cHV0UmluZ1dpbmRpbmcgPT0gMSkpIHtcbiAgICAgICAgICAgIHB1c2hpbmcucGFyZW50ID0gY3VycmVudE91dHB1dFJpbmdQYXJlbnQ7XG4gICAgICAgICAgICBwdXNoaW5nLndpbmRpbmcgPSAtY3VycmVudE91dHB1dFJpbmdXaW5kaW5nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdXNoaW5nLnBhcmVudCA9IGN1cnJlbnRPdXRwdXRSaW5nO1xuICAgICAgICAgICAgcHVzaGluZy53aW5kaW5nID0gY3VycmVudE91dHB1dFJpbmdXaW5kaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxdWV1ZS5wdXNoKHB1c2hpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRJc2VjdCA9IG54dElzZWN0O1xuICAgICAgICBueHRJc2VjdCA9IGlzZWN0TGlzdFtueHRJc2VjdF0ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhbGtpbmdSaW5nQW5kRWRnZSA9IGlzZWN0TGlzdFtueHRJc2VjdF0ucmluZ0FuZEVkZ2UxO1xuICAgICAgICBpc2VjdExpc3Rbbnh0SXNlY3RdLnJpbmdBbmRFZGdlMVdhbGthYmxlID0gZmFsc2U7XG4gICAgICAgIGlmIChpc2VjdExpc3Rbbnh0SXNlY3RdLnJpbmdBbmRFZGdlMldhbGthYmxlKSB7XG4gICAgICAgICAgZGVidWdBbGwoXCJBZGRpbmcgaW50ZXJzZWN0aW9uIFwiICsgbnh0SXNlY3QgKyBcIiB0byBxdWV1ZVwiKTtcbiAgICAgICAgICB2YXIgcHVzaGluZyA9IHtpc2VjdDogbnh0SXNlY3R9O1xuICAgICAgICAgIGlmIChpc0NvbnZleChbaXNlY3RMaXN0W2N1cnJlbnRJc2VjdF0uY29vcmQsIGlzZWN0TGlzdFtueHRJc2VjdF0uY29vcmQsIGlzZWN0TGlzdFtpc2VjdExpc3Rbbnh0SXNlY3RdLm54dElzZWN0QWxvbmdSaW5nQW5kRWRnZTFdLmNvb3JkXSxjdXJyZW50T3V0cHV0UmluZ1dpbmRpbmcgPT0gMSkpIHtcbiAgICAgICAgICAgIHB1c2hpbmcucGFyZW50ID0gY3VycmVudE91dHB1dFJpbmdQYXJlbnQ7XG4gICAgICAgICAgICBwdXNoaW5nLndpbmRpbmcgPSAtY3VycmVudE91dHB1dFJpbmdXaW5kaW5nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdXNoaW5nLnBhcmVudCA9IGN1cnJlbnRPdXRwdXRSaW5nO1xuICAgICAgICAgICAgcHVzaGluZy53aW5kaW5nID0gY3VycmVudE91dHB1dFJpbmdXaW5kaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxdWV1ZS5wdXNoKHB1c2hpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRJc2VjdCA9IG54dElzZWN0O1xuICAgICAgICBueHRJc2VjdCA9IGlzZWN0TGlzdFtueHRJc2VjdF0ubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMTtcbiAgICAgIH1cbiAgICAgIGRlYnVnQWxsKFwiQ3VycmVudCBzdGF0ZSBvZiB0aGUgcXVldWU6IFwiICsgSlNPTi5zdHJpbmdpZnkocXVldWUpKTtcbiAgICB9XG4gICAgZGVidWdBbGwoXCJXYWxraW5nIGZyb20gaW50ZXJzZWN0aW9uIFwiICsgY3VycmVudElzZWN0ICsgXCIgdG8gXCIgKyBueHRJc2VjdCArIFwiIG92ZXIgcmluZyBcIiArIHdhbGtpbmdSaW5nQW5kRWRnZVswXSArIFwiIGFuZCBlZGdlIFwiICsgd2Fsa2luZ1JpbmdBbmRFZGdlWzFdICsgXCIgYW5kIGNsb3NpbmcgcmluZ1wiKTtcbiAgICAvLyBDbG9zZSBvdXRwdXQgcmluZ1xuICAgIGN1cnJlbnRPdXRwdXRSaW5nQ29vcmRzLnB1c2goaXNlY3RMaXN0W254dElzZWN0XS5jb29yZCk7XG4gICAgLy8gUHVzaCBvdXRwdXQgcmluZyB0byBvdXRwdXRcbiAgICBvdXRwdXRGZWF0dXJlQXJyYXkucHVzaChoZWxwZXJzLnBvbHlnb24oW2N1cnJlbnRPdXRwdXRSaW5nQ29vcmRzXSx7aW5kZXg6IGN1cnJlbnRPdXRwdXRSaW5nLCBwYXJlbnQ6IGN1cnJlbnRPdXRwdXRSaW5nUGFyZW50LCB3aW5kaW5nOiBjdXJyZW50T3V0cHV0UmluZ1dpbmRpbmcsIG5ldFdpbmRpbmc6IHVuZGVmaW5lZH0pKTtcbiAgfVxuXG4gIHZhciBvdXRwdXQgPSBoZWxwZXJzLmZlYXR1cmVDb2xsZWN0aW9uKG91dHB1dEZlYXR1cmVBcnJheSk7XG4gIGRlYnVnKFwiV2Fsa2luZ1wiKTtcblxuICBkZXRlcm1pbmVQYXJlbnRzKCk7XG4gIGRlYnVnKFwiRGV0ZXJtaW5pbmcgcGFyZW50c1wiKTtcblxuICBzZXROZXRXaW5kaW5nKCk7XG4gIGRlYnVnKFwiU2V0dGluZyB3aW5kaW5nIG51bWJlclwiKTtcblxuICAvLyBUaGVzZSBmdW5jdGlvbnMgYXJlIGFsc28gdXNlZCBpZiBubyBpbnRlcnNlY3Rpb25zIGFyZSBmb3VuZFxuICBmdW5jdGlvbiBkZXRlcm1pbmVQYXJlbnRzKCkge1xuICAgIHZhciBmZWF0dXJlc1dpdGhvdXRQYXJlbnQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dHB1dC5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVidWdBbGwoXCJPdXRwdXQgcmluZyBcIiArIGkgKyBcIiBoYXMgcGFyZW50IFwiICsgb3V0cHV0LmZlYXR1cmVzW2ldLnByb3BlcnRpZXMucGFyZW50KTtcbiAgICAgIGlmIChvdXRwdXQuZmVhdHVyZXNbaV0ucHJvcGVydGllcy5wYXJlbnQgPT0gLTEpIGZlYXR1cmVzV2l0aG91dFBhcmVudC5wdXNoKGkpO1xuICAgIH1cbiAgICBkZWJ1Z0FsbChcIlRoZSBmb2xsb3dpbmcgb3V0cHV0IHJpbmcocykgaGF2ZSBubyBwYXJlbnQ6IFwiICsgZmVhdHVyZXNXaXRob3V0UGFyZW50KTtcbiAgICBpZiAoZmVhdHVyZXNXaXRob3V0UGFyZW50Lmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXNXaXRob3V0UGFyZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSAtMTtcbiAgICAgICAgdmFyIHBhcmVudEFyZWEgPSBJbmZpbml0eTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvdXRwdXQuZmVhdHVyZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBpZiAoZmVhdHVyZXNXaXRob3V0UGFyZW50W2ldID09IGopIGNvbnRpbnVlXG4gICAgICAgICAgaWYgKGluc2lkZShoZWxwZXJzLnBvaW50KG91dHB1dC5mZWF0dXJlc1tmZWF0dXJlc1dpdGhvdXRQYXJlbnRbaV1dLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdWzBdKSwgb3V0cHV0LmZlYXR1cmVzW2pdLCB0cnVlKSkge1xuICAgICAgICAgICAgaWYgKGFyZWEob3V0cHV0LmZlYXR1cmVzW2pdKSA8IHBhcmVudEFyZWEpIHtcbiAgICAgICAgICAgICAgcGFyZW50ID0gajtcbiAgICAgICAgICAgICAgZGVidWdBbGwoXCJSaW5nIFwiK2ZlYXR1cmVzV2l0aG91dFBhcmVudFtpXStcIiBsaWVzIGluc2lkZSBvdXRwdXQgcmluZyBcIitqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0LmZlYXR1cmVzW2ZlYXR1cmVzV2l0aG91dFBhcmVudFtpXV0ucHJvcGVydGllcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIGRlYnVnQWxsKFwiUmluZyBcIitmZWF0dXJlc1dpdGhvdXRQYXJlbnRbaV0rXCIgaXMgYXNzaWduZWQgcGFyZW50IFwiK3BhcmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0TmV0V2luZGluZygpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dHB1dC5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG91dHB1dC5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzLnBhcmVudCA9PSAtMSkge1xuICAgICAgICB2YXIgbmV0V2luZGluZyA9IG91dHB1dC5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzLndpbmRpbmdcbiAgICAgICAgb3V0cHV0LmZlYXR1cmVzW2ldLnByb3BlcnRpZXMubmV0V2luZGluZyA9IG5ldFdpbmRpbmc7XG4gICAgICAgIHNldE5ldFdpbmRpbmdPZkNoaWxkcmVuKGksbmV0V2luZGluZylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXROZXRXaW5kaW5nT2ZDaGlsZHJlbihwYXJlbnQsUGFyZW50TmV0V2luZGluZyl7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRwdXQuZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvdXRwdXQuZmVhdHVyZXNbaV0ucHJvcGVydGllcy5wYXJlbnQgPT0gcGFyZW50KXtcbiAgICAgICAgdmFyIG5ldFdpbmRpbmcgPSBQYXJlbnROZXRXaW5kaW5nICsgb3V0cHV0LmZlYXR1cmVzW2ldLnByb3BlcnRpZXMud2luZGluZ1xuICAgICAgICBvdXRwdXQuZmVhdHVyZXNbaV0ucHJvcGVydGllcy5uZXRXaW5kaW5nID0gbmV0V2luZGluZztcbiAgICAgICAgc2V0TmV0V2luZGluZ09mQ2hpbGRyZW4oaSxuZXRXaW5kaW5nKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlYnVnQWxsKFwiIyBUb3RhbCBvZiBcIiArIG91dHB1dC5mZWF0dXJlcy5sZW5ndGggKyBcIiByaW5nc1wiKTtcblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cblxuLy8gQ29uc3RydWN0b3IgZm9yIChyaW5nLSBvciBpbnRlcnNlY3Rpb24tKSBwc2V1ZG8tdmVydGljZXMuXG52YXIgUHNldWRvVnR4ID0gZnVuY3Rpb24gKGNvb3JkLCBwYXJhbSwgcmluZ0FuZEVkZ2VJbiwgcmluZ0FuZEVkZ2VPdXQsIG54dElzZWN0QWxvbmdFZGdlSW4pIHtcbiAgdGhpcy5jb29yZCA9IGNvb3JkOyAvLyBbeCx5XSBvZiB0aGlzIHBzZXVkby12ZXJ0ZXhcbiAgdGhpcy5wYXJhbSA9IHBhcmFtOyAvLyBmcmFjdGlvbmFsIGRpc3RhbmNlIG9mIHRoaXMgaW50ZXJzZWN0aW9uIG9uIGluY29tbWluZyBlZGdlXG4gIHRoaXMucmluZ0FuZEVkZ2VJbiA9IHJpbmdBbmRFZGdlSW47IC8vIFtyaW5nIGluZGV4LCBlZGdlIGluZGV4XSBvZiBpbmNvbW1pbmcgZWRnZVxuICB0aGlzLnJpbmdBbmRFZGdlT3V0ID0gcmluZ0FuZEVkZ2VPdXQ7IC8vIFtyaW5nIGluZGV4LCBlZGdlIGluZGV4XSBvZiBvdXRnb2luZyBlZGdlXG4gIHRoaXMubnh0SXNlY3RBbG9uZ0VkZ2VJbiA9IG54dElzZWN0QWxvbmdFZGdlSW47IC8vIFRoZSBuZXh0IGludGVyc2VjdGlvbiB3aGVuIGZvbGxvd2luZyB0aGUgaW5jb21taW5nIGVkZ2UgKHNvIG5vdCB3aGVuIGZvbGxvd2luZyByaW5nQW5kRWRnZU91dCEpXG59XG5cbi8vIENvbnN0cnVjdG9yIGZvciBhbiBpbnRlcnNlY3Rpb24uIFRoZXJlIGFyZSB0d28gaW50ZXJzZWN0aW9uLXBzZXVkby12ZXJ0aWNlcyBwZXIgc2VsZi1pbnRlcnNlY3Rpb24gYW5kIG9uZSByaW5nLXBzZXVkby12ZXJ0ZXggcGVyIHJpbmctdmVydGV4LWludGVyc2VjdGlvbi4gVGhlaXIgbGFiZWxzIDEgYW5kIDIgYXJlIG5vdCBhc3NpZ25lZCBhIHBhcnRpY3VsYXIgbWVhbmluZyBidXQgYXJlIHBlcm1hbmVudCBvbmNlIGdpdmVuLlxudmFyIElzZWN0ID0gZnVuY3Rpb24gKGNvb3JkLCByaW5nQW5kRWRnZTEsIHJpbmdBbmRFZGdlMiwgbnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMSwgbnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMiwgcmluZ0FuZEVkZ2UxV2Fsa2FibGUsIHJpbmdBbmRFZGdlMldhbGthYmxlKSB7XG4gIHRoaXMuY29vcmQgPSBjb29yZDsgLy8gW3gseV0gb2YgdGhpcyBpbnRlcnNlY3Rpb25cbiAgdGhpcy5yaW5nQW5kRWRnZTEgPSByaW5nQW5kRWRnZTE7IC8vIGZpcnN0IGVkZ2Ugb2YgdGhpcyBpbnRlcnNlY3Rpb25cbiAgdGhpcy5yaW5nQW5kRWRnZTIgPSByaW5nQW5kRWRnZTI7IC8vIHNlY29uZCBlZGdlIG9mIHRoaXMgaW50ZXJzZWN0aW9uXG4gIHRoaXMubnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMSA9IG54dElzZWN0QWxvbmdSaW5nQW5kRWRnZTE7IC8vIHRoZSBuZXh0IGludGVyc2VjdGlvbiB3aGVuIGZvbGxvd2luZyByaW5nQW5kRWRnZTFcbiAgdGhpcy5ueHRJc2VjdEFsb25nUmluZ0FuZEVkZ2UyID0gbnh0SXNlY3RBbG9uZ1JpbmdBbmRFZGdlMjsgLy8gdGhlIG5leHQgaW50ZXJzZWN0aW9uIHdoZW4gZm9sbG93aW5nIHJpbmdBbmRFZGdlMlxuICB0aGlzLnJpbmdBbmRFZGdlMVdhbGthYmxlID0gcmluZ0FuZEVkZ2UxV2Fsa2FibGU7IC8vIE1heSB3ZSAoc3RpbGwpIHdhbGsgYXdheSBmcm9tIHRoaXMgaW50ZXJzZWN0aW9uIG92ZXIgcmluZ0FuZEVkZ2UxP1xuICB0aGlzLnJpbmdBbmRFZGdlMldhbGthYmxlID0gcmluZ0FuZEVkZ2UyV2Fsa2FibGU7IC8vIE1heSB3ZSAoc3RpbGwpIHdhbGsgYXdheSBmcm9tIHRoaXMgaW50ZXJzZWN0aW9uIG92ZXIgcmluZ0FuZEVkZ2UyP1xufVxuXG4vLyBGdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgdGhyZWUgY29uc2VjdXRpdmUgcG9pbnRzIG9mIGEgc2ltcGxlLCBub24tc2VsZi1pbnRlcnNlY3RpbmcgcmluZyBtYWtlIHVwIGEgY29udmV4IHZlcnRleCwgYXNzdW1pbmcgdGhlIHJpbmcgaXMgcmlnaHQtIG9yIGxlZnRoYW5kZWRcbmZ1bmN0aW9uIGlzQ29udmV4KHB0cywgcmlnaHRoYW5kZWQpe1xuICAvLyAncHRzJyBpcyBhbiBbeCx5XSBwYWlyXG4gIC8vICdyaWdodGhhbmRlZCcgaXMgYSBib29sZWFuXG4gIGlmICh0eXBlb2YocmlnaHRoYW5kZWQpID09PSAndW5kZWZpbmVkJykgcmlnaHRoYW5kZWQgPSB0cnVlO1xuICBpZiAocHRzLmxlbmd0aCAhPSAzKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGZ1bmN0aW9uIHJlcXVpcmVzIGFuIGFycmF5IG9mIHRocmVlIHBvaW50cyBbeCx5XVwiKTtcbiAgdmFyIGQgPSAocHRzWzFdWzBdIC0gcHRzWzBdWzBdKSAqIChwdHNbMl1bMV0gLSBwdHNbMF1bMV0pIC0gKHB0c1sxXVsxXSAtIHB0c1swXVsxXSkgKiAocHRzWzJdWzBdIC0gcHRzWzBdWzBdKTtcbiAgcmV0dXJuIChkID49IDApID09IHJpZ2h0aGFuZGVkO1xufVxuXG4vLyBGdW5jdGlvbiB0byBjb21wdXRlIHdpbmRpbmcgb2Ygc2ltcGxlLCBub24tc2VsZi1pbnRlcnNlY3RpbmcgcmluZ1xuZnVuY3Rpb24gd2luZGluZ09mUmluZyhyaW5nKXtcbiAgLy8gJ3JpbmcnIGlzIGFuIGFycmF5IG9mIFt4LHldIHBhaXJzIHdpdGggdGhlIGxhc3QgZXF1YWwgdG8gdGhlIGZpcnN0XG4gIC8vIENvbXB1dGUgdGhlIHdpbmRpbmcgbnVtYmVyIGJhc2VkIG9uIHRoZSB2ZXJ0ZXggd2l0aCB0aGUgc21hbGxlc3QgeC12YWx1ZSwgaXQgcHJlY2Vzc29yIGFuZCBzdWNjZXNzb3IuIEFuIGV4dHJlbWFsIHZlcnRleCBvZiBhIHNpbXBsZSwgbm9uLXNlbGYtaW50ZXJzZWN0aW5nIHJpbmcgaXMgYWx3YXlzIGNvbnZleCwgc28gdGhlIG9ubHkgcmVhc29uIGl0IGlzIG5vdCBpcyBiZWNhdXNlIHRoZSB3aW5kaW5nIG51bWJlciB3ZSB1c2UgdG8gY29tcHV0ZSBpdCBpcyB3cm9uZ1xuICB2YXIgbGVmdFZ0eCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZy5sZW5ndGgtMTsgaSsrKSB7IGlmIChyaW5nW2ldWzBdIDwgcmluZ1tsZWZ0VnR4XVswXSkgbGVmdFZ0eCA9IGk7IH1cbiAgaWYgKGlzQ29udmV4KFtyaW5nWyhsZWZ0VnR4LTEpLm1vZHVsbyhyaW5nLmxlbmd0aC0xKV0scmluZ1tsZWZ0VnR4XSxyaW5nWyhsZWZ0VnR4KzEpLm1vZHVsbyhyaW5nLmxlbmd0aC0xKV1dLHRydWUpKSB7XG4gICAgdmFyIHdpbmRpbmcgPSAxO1xuICB9IGVsc2Uge1xuICAgIHZhciB3aW5kaW5nID0gLTE7XG4gIH1cbiAgcmV0dXJuIHdpbmRpbmdcbn1cblxuLy8gRnVuY3Rpb24gdG8gY29tcGFyZSBBcnJheXMgb2YgbnVtYmVycy4gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc4Mzc0NTYvaG93LXRvLWNvbXBhcmUtYXJyYXlzLWluLWphdmFzY3JpcHRcbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5MSwgYXJyYXkyKSB7XG4gIC8vIGlmIHRoZSBvdGhlciBhcnJheSBpcyBhIGZhbHN5IHZhbHVlLCByZXR1cm5cbiAgaWYgKCFhcnJheTEgfHwgIWFycmF5MilcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBjb21wYXJlIGxlbmd0aHMgLSBjYW4gc2F2ZSBhIGxvdCBvZiB0aW1lXG4gIGlmIChhcnJheTEubGVuZ3RoICE9IGFycmF5Mi5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGw9YXJyYXkxLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBuZXN0ZWQgYXJyYXlzXG4gICAgICBpZiAoYXJyYXkxW2ldIGluc3RhbmNlb2YgQXJyYXkgJiYgYXJyYXkyW2ldIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAvLyByZWN1cnNlIGludG8gdGhlIG5lc3RlZCBhcnJheXNcbiAgICAgICAgICBpZiAoIWVxdWFsQXJyYXlzKGFycmF5MVtpXSxhcnJheTJbaV0pKVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhcnJheTFbaV0gIT0gYXJyYXkyW2ldKSB7XG4gICAgICAgICAgLy8gV2FybmluZyAtIHR3byBkaWZmZXJlbnQgb2JqZWN0IGluc3RhbmNlcyB3aWxsIG5ldmVyIGJlIGVxdWFsOiB7eDoyMH0gIT0ge3g6MjB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBGaXggSmF2YXNjcmlwdCBtb2R1bG8gZm9yIG5lZ2F0aXZlIG51bWJlci4gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ0Njc1MzkvamF2YXNjcmlwdC1tb2R1bG8tbm90LWJlaGF2aW5nXG5OdW1iZXIucHJvdG90eXBlLm1vZHVsbyA9IGZ1bmN0aW9uKG4pIHtcbiAgcmV0dXJuICgodGhpcyAlIG4pICsgbikgJSBuO1xufVxuXG4vLyBGdW5jdGlvbiB0byBnZXQgYXJyYXkgd2l0aCBvbmx5IHVuaXF1ZSBlbGVtZW50cy4gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5NjA0NzMvdW5pcXVlLXZhbHVlcy1pbi1hbi1hcnJheVxuZnVuY3Rpb24gZ2V0VW5pcXVlKGFycmF5KSB7XG4gdmFyIHUgPSB7fSwgYSA9IFtdO1xuIGZvcih2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpe1xuICAgIGlmKHUuaGFzT3duUHJvcGVydHkoYXJyYXlbaV0pKSB7XG4gICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGEucHVzaChhcnJheVtpXSk7XG4gICAgdVthcnJheVtpXV0gPSAxO1xuIH1cbiByZXR1cm4gYTtcbn1cblxuLy8gRnVuY3Rpb24gdG8gY2hlY2sgaWYgYXJyYXkgaXMgdW5pcXVlIChpLmUuIGFsbCB1bmlxdWUgZWxlbWVudHMsIGkuZS4gbm8gZHVwbGljYXRlIGVsZW1lbnRzKVxuZnVuY3Rpb24gaXNVbmlxdWUoYXJyYXkpIHtcbiB2YXIgdSA9IHt9LCBhID0gW107XG4gdmFyIGlzVW5pcXVlID0gMTtcbiBmb3IodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgKytpKXtcbiAgICBpZih1Lmhhc093blByb3BlcnR5KGFycmF5W2ldKSkge1xuICAgICAgaXNVbmlxdWUgPSAwO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHVbYXJyYXlbaV1dID0gMTtcbiB9XG4gcmV0dXJuIGlzVW5pcXVlO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2ltcGxlcG9seWdvbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEZpbmQgc2VsZi1pbnRlcnNlY3Rpb25zIGluIGdlb2pzb24gcG9seWdvbiAocG9zc2libHkgd2l0aCBpbnRlcmlvciByaW5ncylcbnZhciByYnVzaCA9IHJlcXVpcmUoJ3JidXNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZmVhdHVyZSwgZmlsdGVyRm4sIHVzZVNwYXRpYWxJbmRleCkge1xuICBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlICE9IFwiUG9seWdvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgaW5wdXQgZmVhdHVyZSBtdXN0IGJlIGEgUG9seWdvblwiKTtcbiAgaWYgKHVzZVNwYXRpYWxJbmRleCA9PSB1bmRlZmluZWQpIHVzZVNwYXRpYWxJbmRleCA9IDE7XG5cbiAgdmFyIGNvb3JkID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcztcblxuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBzZWVuID0ge307XG5cbiAgaWYgKHVzZVNwYXRpYWxJbmRleCkge1xuICAgIHZhciBhbGxFZGdlc0FzUmJ1c2hUcmVlSXRlbXMgPSBbXTtcbiAgICBmb3IgKHZhciByaW5nMCA9IDA7IHJpbmcwIDwgY29vcmQubGVuZ3RoOyByaW5nMCsrKSB7XG4gICAgICBmb3IgKHZhciBlZGdlMCA9IDA7IGVkZ2UwIDwgY29vcmRbcmluZzBdLmxlbmd0aC0xOyBlZGdlMCsrKSB7XG4gICAgICAgIGFsbEVkZ2VzQXNSYnVzaFRyZWVJdGVtcy5wdXNoKHJidXNoVHJlZUl0ZW0ocmluZzAsIGVkZ2UwKSlcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHRyZWUgPSByYnVzaCgpO1xuICAgIHRyZWUubG9hZChhbGxFZGdlc0FzUmJ1c2hUcmVlSXRlbXMpO1xuICB9XG5cbiAgZm9yICh2YXIgcmluZzAgPSAwOyByaW5nMCA8IGNvb3JkLmxlbmd0aDsgcmluZzArKykge1xuICAgIGZvciAodmFyIGVkZ2UwID0gMDsgZWRnZTAgPCBjb29yZFtyaW5nMF0ubGVuZ3RoLTE7IGVkZ2UwKyspIHtcbiAgICAgIGlmICh1c2VTcGF0aWFsSW5kZXgpIHtcbiAgICAgICAgdmFyIGJib3hPdmVybGFwcyA9IHRyZWUuc2VhcmNoKHJidXNoVHJlZUl0ZW0ocmluZzAsIGVkZ2UwKSk7XG4gICAgICAgIGJib3hPdmVybGFwcy5mb3JFYWNoKGZ1bmN0aW9uKGJib3hJc2VjdCkge1xuICAgICAgICAgIHZhciByaW5nMSA9IGJib3hJc2VjdC5yaW5nO1xuICAgICAgICAgIHZhciBlZGdlMSA9IGJib3hJc2VjdC5lZGdlO1xuICAgICAgICAgIGlmSXNlY3RBZGRUb091dHB1dChyaW5nMCwgZWRnZTAsIHJpbmcxLCBlZGdlMSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZvciAodmFyIHJpbmcxID0gMDsgcmluZzEgPCBjb29yZC5sZW5ndGg7IHJpbmcxKyspIHtcbiAgICAgICAgICBmb3IgKHZhciBlZGdlMSA9IDAgOyBlZGdlMSA8IGNvb3JkW3JpbmcxXS5sZW5ndGgtMTsgZWRnZTErKykge1xuICAgICAgICAgICAgLy8gVE9ETzogc3BlZWR1cCBwb3NzaWJsZSBpZiBvbmx5IGludGVyZXN0ZWQgaW4gdW5pcXVlOiBzdGFydCBsYXN0IHR3byBsb29wcyBhdCByaW5nMCBhbmQgZWRnZTArMVxuICAgICAgICAgICAgaWZJc2VjdEFkZFRvT3V0cHV0KHJpbmcwLCBlZGdlMCwgcmluZzEsIGVkZ2UxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIWZpbHRlckZuKSBvdXRwdXQgPSB7dHlwZTogXCJGZWF0dXJlXCIsIGdlb21ldHJ5OiB7dHlwZTogXCJNdWx0aVBvaW50XCIsIGNvb3JkaW5hdGVzOiBvdXRwdXR9fTtcbiAgcmV0dXJuIG91dHB1dDtcblxuICAvLyBGdW5jdGlvbiB0byBjaGVjayBpZiB0d28gZWRnZXMgaW50ZXJzZWN0IGFuZCBhZGQgdGhlIGludGVyc2VjdGlvbiB0byB0aGUgb3V0cHV0XG4gIGZ1bmN0aW9uIGlmSXNlY3RBZGRUb091dHB1dChyaW5nMCwgZWRnZTAsIHJpbmcxLCBlZGdlMSkge1xuICAgIHZhciBzdGFydDAgPSBjb29yZFtyaW5nMF1bZWRnZTBdO1xuICAgIHZhciBlbmQwID0gY29vcmRbcmluZzBdW2VkZ2UwKzFdO1xuICAgIHZhciBzdGFydDEgPSBjb29yZFtyaW5nMV1bZWRnZTFdO1xuICAgIHZhciBlbmQxID0gY29vcmRbcmluZzFdW2VkZ2UxKzFdO1xuXG4gICAgdmFyIGlzZWN0ID0gaW50ZXJzZWN0KHN0YXJ0MCwgZW5kMCwgc3RhcnQxLCBlbmQxKTtcblxuICAgIGlmIChpc2VjdCA9PSBudWxsKSByZXR1cm47IC8vIGRpc2NhcmQgcGFyYWxsZWxzIGFuZCBjb2luY2lkZW5jZVxuICAgIGZyYWMwLCBmcmFjMTtcbiAgICBpZiAoZW5kMFswXSAhPSBzdGFydDBbMF0pIHtcbiAgICAgIHZhciBmcmFjMCA9IChpc2VjdFswXS1zdGFydDBbMF0pLyhlbmQwWzBdLXN0YXJ0MFswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBmcmFjMCA9IChpc2VjdFsxXS1zdGFydDBbMV0pLyhlbmQwWzFdLXN0YXJ0MFsxXSk7XG4gICAgfTtcbiAgICBpZiAoZW5kMVswXSAhPSBzdGFydDFbMF0pIHtcbiAgICAgIHZhciBmcmFjMSA9IChpc2VjdFswXS1zdGFydDFbMF0pLyhlbmQxWzBdLXN0YXJ0MVswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBmcmFjMSA9IChpc2VjdFsxXS1zdGFydDFbMV0pLyhlbmQxWzFdLXN0YXJ0MVsxXSk7XG4gICAgfTtcbiAgICBpZiAoZnJhYzAgPj0gMSB8fCBmcmFjMCA8PSAwIHx8IGZyYWMxID49IDEgfHwgZnJhYzEgPD0gMCkgcmV0dXJuOyAvLyByZXF1aXJlIHNlZ21lbnQgaW50ZXJzZWN0aW9uXG5cbiAgICB2YXIga2V5ID0gaXNlY3Q7XG4gICAgdmFyIHVuaXF1ZSA9ICFzZWVuW2tleV07XG4gICAgaWYgKHVuaXF1ZSkge1xuICAgICAgc2VlbltrZXldID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZmlsdGVyRm4pIHtcbiAgICAgIG91dHB1dC5wdXNoKGZpbHRlckZuKGlzZWN0LCByaW5nMCwgZWRnZTAsIHN0YXJ0MCwgZW5kMCwgZnJhYzAsIHJpbmcxLCBlZGdlMSwgc3RhcnQxLCBlbmQxLCBmcmFjMSwgdW5pcXVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKGlzZWN0KTtcbiAgICB9XG4gIH1cblxuICAvLyBGdW5jdGlvbiB0byByZXR1cm4gYSByYnVzaCB0cmVlIGl0ZW0gZ2l2ZW4gYW4gcmluZyBhbmQgZWRnZSBudW1iZXJcbiAgZnVuY3Rpb24gcmJ1c2hUcmVlSXRlbShyaW5nLCBlZGdlKSB7XG5cbiAgICB2YXIgc3RhcnQgPSBjb29yZFtyaW5nXVtlZGdlXTtcbiAgICB2YXIgZW5kID0gY29vcmRbcmluZ11bZWRnZSsxXTtcblxuICAgIGlmIChzdGFydFswXSA8IGVuZFswXSkge1xuICAgICAgdmFyIG1pblggPSBzdGFydFswXSwgbWF4WCA9IGVuZFswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1pblggPSBlbmRbMF0sIG1heFggPSBzdGFydFswXTtcbiAgICB9O1xuICAgIGlmIChzdGFydFsxXSA8IGVuZFsxXSkge1xuICAgICAgdmFyIG1pblkgPSBzdGFydFsxXSwgbWF4WSA9IGVuZFsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1pblkgPSBlbmRbMV0sIG1heFkgPSBzdGFydFsxXTtcbiAgICB9XG4gICAgcmV0dXJuIHttaW5YOiBtaW5YLCBtaW5ZOiBtaW5ZLCBtYXhYOiBtYXhYLCBtYXhZOiBtYXhZLCByaW5nOiByaW5nLCBlZGdlOiBlZGdlfTtcbiAgfVxuXG59XG5cbi8vIEZ1bmN0aW9uIHRvIGNvbXB1dGUgd2hlcmUgdHdvIGxpbmVzIChub3Qgc2VnbWVudHMpIGludGVyc2VjdC4gRnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lJUUyJTgwJTkzbGluZV9pbnRlcnNlY3Rpb25cbmZ1bmN0aW9uIGludGVyc2VjdChzdGFydDAsIGVuZDAsIHN0YXJ0MSwgZW5kMSkge1xuICBpZiAoZXF1YWxBcnJheXMoc3RhcnQwLHN0YXJ0MSkgfHwgZXF1YWxBcnJheXMoc3RhcnQwLGVuZDEpIHx8IGVxdWFsQXJyYXlzKGVuZDAsc3RhcnQxKSB8fCBlcXVhbEFycmF5cyhlbmQxLHN0YXJ0MSkpIHJldHVybiBudWxsO1xuICB2YXIgeDAgPSBzdGFydDBbMF0sXG4gICAgICB5MCA9IHN0YXJ0MFsxXSxcbiAgICAgIHgxID0gZW5kMFswXSxcbiAgICAgIHkxID0gZW5kMFsxXSxcbiAgICAgIHgyID0gc3RhcnQxWzBdLFxuICAgICAgeTIgPSBzdGFydDFbMV0sXG4gICAgICB4MyA9IGVuZDFbMF0sXG4gICAgICB5MyA9IGVuZDFbMV07XG4gIHZhciBkZW5vbSA9ICh4MCAtIHgxKSAqICh5MiAtIHkzKSAtICh5MCAtIHkxKSAqICh4MiAtIHgzKTtcbiAgaWYgKGRlbm9tID09IDApIHJldHVybiBudWxsO1xuICB2YXIgeDQgPSAoKHgwICogeTEgLSB5MCAqIHgxKSAqICh4MiAtIHgzKSAtICh4MCAtIHgxKSAqICh4MiAqIHkzIC0geTIgKiB4MykpIC8gZGVub207XG4gIHZhciB5NCA9ICgoeDAgKiB5MSAtIHkwICogeDEpICogKHkyIC0geTMpIC0gKHkwIC0geTEpICogKHgyICogeTMgLSB5MiAqIHgzKSkgLyBkZW5vbTtcbiAgcmV0dXJuIFt4NCwgeTRdO1xufVxuXG4vLyBGdW5jdGlvbiB0byBjb21wYXJlIEFycmF5cyBvZiBudW1iZXJzLiBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzgzNzQ1Ni9ob3ctdG8tY29tcGFyZS1hcnJheXMtaW4tamF2YXNjcmlwdFxuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXkxLCBhcnJheTIpIHtcbiAgLy8gaWYgdGhlIG90aGVyIGFycmF5IGlzIGEgZmFsc3kgdmFsdWUsIHJldHVyblxuICBpZiAoIWFycmF5MSB8fCAhYXJyYXkyKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIGNvbXBhcmUgbGVuZ3RocyAtIGNhbiBzYXZlIGEgbG90IG9mIHRpbWVcbiAgaWYgKGFycmF5MS5sZW5ndGggIT0gYXJyYXkyLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMCwgbD1hcnJheTEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIG5lc3RlZCBhcnJheXNcbiAgICAgIGlmIChhcnJheTFbaV0gaW5zdGFuY2VvZiBBcnJheSAmJiBhcnJheTJbaV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIC8vIHJlY3Vyc2UgaW50byB0aGUgbmVzdGVkIGFycmF5c1xuICAgICAgICAgIGlmICghZXF1YWxBcnJheXMoYXJyYXkxW2ldLGFycmF5MltpXSkpXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFycmF5MVtpXSAhPSBhcnJheTJbaV0pIHtcbiAgICAgICAgICAvLyBXYXJuaW5nIC0gdHdvIGRpZmZlcmVudCBvYmplY3QgaW5zdGFuY2VzIHdpbGwgbmV2ZXIgYmUgZXF1YWw6IHt4OjIwfSAhPSB7eDoyMH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9nZW9qc29uLXBvbHlnb24tc2VsZi1pbnRlcnNlY3Rpb25zL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBXcmFwcyBhIEdlb0pTT04ge0BsaW5rIEdlb21ldHJ5fSBpbiBhIEdlb0pTT04ge0BsaW5rIEZlYXR1cmV9LlxuICpcbiAqIEBuYW1lIGZlYXR1cmVcbiAqIEBwYXJhbSB7R2VvbWV0cnl9IGdlb21ldHJ5IGlucHV0IGdlb21ldHJ5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb259IGEgRmVhdHVyZUNvbGxlY3Rpb24gb2YgaW5wdXQgZmVhdHVyZXNcbiAqIEBleGFtcGxlXG4gKiB2YXIgZ2VvbWV0cnkgPSB7XG4gKiAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgIFwiY29vcmRpbmF0ZXNcIjogW1xuICogICAgICAgIDY3LjUsXG4gKiAgICAgICAgMzIuODQyNjczNjMxOTU0MzFcbiAqICAgICAgXVxuICogICAgfVxuICpcbiAqIHZhciBmZWF0dXJlID0gdHVyZi5mZWF0dXJlKGdlb21ldHJ5KTtcbiAqXG4gKiAvLz1mZWF0dXJlXG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmUoZ2VvbWV0cnksIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWdlb21ldHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlb21ldHJ5IHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnlcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMuZmVhdHVyZSA9IGZlYXR1cmU7XG5cbi8qKlxuICogVGFrZXMgY29vcmRpbmF0ZXMgYW5kIHByb3BlcnRpZXMgKG9wdGlvbmFsKSBhbmQgcmV0dXJucyBhIG5ldyB7QGxpbmsgUG9pbnR9IGZlYXR1cmUuXG4gKlxuICogQG5hbWUgcG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXMgbG9uZ2l0dWRlLCBsYXRpdHVkZSBwb3NpdGlvbiAoZWFjaCBpbiBkZWNpbWFsIGRlZ3JlZXMpXG4gKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXMgYW4gT2JqZWN0IHRoYXQgaXMgdXNlZCBhcyB0aGUge0BsaW5rIEZlYXR1cmV9J3NcbiAqIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvaW50Pn0gYSBQb2ludCBmZWF0dXJlXG4gKiBAZXhhbXBsZVxuICogdmFyIHB0MSA9IHR1cmYucG9pbnQoWy03NS4zNDMsIDM5Ljk4NF0pO1xuICpcbiAqIC8vPXB0MVxuICovXG5tb2R1bGUuZXhwb3J0cy5wb2ludCA9IGZ1bmN0aW9uIChjb29yZGluYXRlcywgcHJvcGVydGllcykge1xuICAgIGlmICghY29vcmRpbmF0ZXMpIHRocm93IG5ldyBFcnJvcignTm8gY29vcmRpbmF0ZXMgcGFzc2VkJyk7XG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ0Nvb3JkaW5hdGVzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoIDwgMikgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBtdXN0IGJlIGF0IGxlYXN0IDIgbnVtYmVycyBsb25nJyk7XG4gICAgaWYgKHR5cGVvZiBjb29yZGluYXRlc1swXSAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGNvb3JkaW5hdGVzWzFdICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBtdXN0IG51bWJlcnMnKTtcblxuICAgIHJldHVybiBmZWF0dXJlKHtcbiAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG4vKipcbiAqIFRha2VzIGFuIGFycmF5IG9mIExpbmVhclJpbmdzIGFuZCBvcHRpb25hbGx5IGFuIHtAbGluayBPYmplY3R9IHdpdGggcHJvcGVydGllcyBhbmQgcmV0dXJucyBhIHtAbGluayBQb2x5Z29ufSBmZWF0dXJlLlxuICpcbiAqIEBuYW1lIHBvbHlnb25cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBMaW5lYXJSaW5nc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGEgcHJvcGVydGllcyBvYmplY3RcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fSBhIFBvbHlnb24gZmVhdHVyZVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIGEgTGluZWFyUmluZyBvZiB0aGUgcG9seWdvbiBoYXMgdG9vIGZldyBwb3NpdGlvbnNcbiAqIG9yIGlmIGEgTGluZWFyUmluZyBvZiB0aGUgUG9seWdvbiBkb2VzIG5vdCBoYXZlIG1hdGNoaW5nIFBvc2l0aW9ucyBhdCB0aGVcbiAqIGJlZ2lubmluZyAmIGVuZC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1xuICogIFstMi4yNzU1NDMsIDUzLjQ2NDU0N10sXG4gKiAgWy0yLjI3NTU0MywgNTMuNDg5MjcxXSxcbiAqICBbLTIuMjE1MTE4LCA1My40ODkyNzFdLFxuICogIFstMi4yMTUxMTgsIDUzLjQ2NDU0N10sXG4gKiAgWy0yLjI3NTU0MywgNTMuNDY0NTQ3XVxuICogXV0sIHsgbmFtZTogJ3BvbHkxJywgcG9wdWxhdGlvbjogNDAwfSk7XG4gKlxuICogLy89cG9seWdvblxuICovXG5tb2R1bGUuZXhwb3J0cy5wb2x5Z29uID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCFjb29yZGluYXRlcykgdGhyb3cgbmV3IEVycm9yKCdObyBjb29yZGluYXRlcyBwYXNzZWQnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJpbmcgPSBjb29yZGluYXRlc1tpXTtcbiAgICAgICAgaWYgKHJpbmcubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFYWNoIExpbmVhclJpbmcgb2YgYSBQb2x5Z29uIG11c3QgaGF2ZSA0IG9yIG1vcmUgUG9zaXRpb25zLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmluZ1tyaW5nLmxlbmd0aCAtIDFdLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAocmluZ1tyaW5nLmxlbmd0aCAtIDFdW2pdICE9PSByaW5nWzBdW2pdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhbmQgbGFzdCBQb3NpdGlvbiBhcmUgbm90IGVxdWl2YWxlbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgTGluZVN0cmluZ30gYmFzZWQgb24gYVxuICogY29vcmRpbmF0ZSBhcnJheS4gUHJvcGVydGllcyBjYW4gYmUgYWRkZWQgb3B0aW9uYWxseS5cbiAqXG4gKiBAbmFtZSBsaW5lU3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBQb3NpdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllcyBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gYSBMaW5lU3RyaW5nIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmVzdHJpbmcxID0gdHVyZi5saW5lU3RyaW5nKFtcbiAqICAgWy0yMS45NjQ0MTYsIDY0LjE0ODIwM10sXG4gKiAgIFstMjEuOTU2MTc2LCA2NC4xNDEzMTZdLFxuICogICBbLTIxLjkzOTAxLCA2NC4xMzU5MjRdLFxuICogICBbLTIxLjkyNzMzNywgNjQuMTM2NjczXVxuICogXSk7XG4gKiB2YXIgbGluZXN0cmluZzIgPSB0dXJmLmxpbmVTdHJpbmcoW1xuICogICBbLTIxLjkyOTA1NCwgNjQuMTI3OTg1XSxcbiAqICAgWy0yMS45MTI5MTgsIDY0LjEzNDcyNl0sXG4gKiAgIFstMjEuOTE2MDA3LCA2NC4xNDEwMTZdLFxuICogICBbLTIxLjkzMDA4NCwgNjQuMTQ0NDZdXG4gKiBdLCB7bmFtZTogJ2xpbmUgMScsIGRpc3RhbmNlOiAxNDV9KTtcbiAqXG4gKiAvLz1saW5lc3RyaW5nMVxuICpcbiAqIC8vPWxpbmVzdHJpbmcyXG4gKi9cbm1vZHVsZS5leHBvcnRzLmxpbmVTdHJpbmcgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvb3JkaW5hdGVzIHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnTGluZVN0cmluZycsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgIH0sIHByb3BlcnRpZXMpO1xufTtcblxuLyoqXG4gKiBUYWtlcyBvbmUgb3IgbW9yZSB7QGxpbmsgRmVhdHVyZXxGZWF0dXJlc30gYW5kIGNyZWF0ZXMgYSB7QGxpbmsgRmVhdHVyZUNvbGxlY3Rpb259LlxuICpcbiAqIEBuYW1lIGZlYXR1cmVDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0ZlYXR1cmVbXX0gZmVhdHVyZXMgaW5wdXQgZmVhdHVyZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbn0gYSBGZWF0dXJlQ29sbGVjdGlvbiBvZiBpbnB1dCBmZWF0dXJlc1xuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IFtcbiAqICB0dXJmLnBvaW50KFstNzUuMzQzLCAzOS45ODRdLCB7bmFtZTogJ0xvY2F0aW9uIEEnfSksXG4gKiAgdHVyZi5wb2ludChbLTc1LjgzMywgMzkuMjg0XSwge25hbWU6ICdMb2NhdGlvbiBCJ30pLFxuICogIHR1cmYucG9pbnQoWy03NS41MzQsIDM5LjEyM10sIHtuYW1lOiAnTG9jYXRpb24gQyd9KVxuICogXTtcbiAqXG4gKiB2YXIgZmMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKGZlYXR1cmVzKTtcbiAqXG4gKiAvLz1mY1xuICovXG5tb2R1bGUuZXhwb3J0cy5mZWF0dXJlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIChmZWF0dXJlcykge1xuICAgIGlmICghZmVhdHVyZXMpIHRocm93IG5ldyBFcnJvcignTm8gZmVhdHVyZXMgcGFzc2VkJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgICBmZWF0dXJlczogZmVhdHVyZXNcbiAgICB9O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEZlYXR1cmU8TXVsdGlMaW5lU3RyaW5nPn0gYmFzZWQgb24gYVxuICogY29vcmRpbmF0ZSBhcnJheS4gUHJvcGVydGllcyBjYW4gYmUgYWRkZWQgb3B0aW9uYWxseS5cbiAqXG4gKiBAbmFtZSBtdWx0aUxpbmVTdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8QXJyYXk8bnVtYmVyPj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBMaW5lU3RyaW5nc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPE11bHRpTGluZVN0cmluZz59IGEgTXVsdGlMaW5lU3RyaW5nIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpTGluZSA9IHR1cmYubXVsdGlMaW5lU3RyaW5nKFtbWzAsMF0sWzEwLDEwXV1dKTtcbiAqXG4gKiAvLz1tdWx0aUxpbmVcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzLm11bHRpTGluZVN0cmluZyA9IGZ1bmN0aW9uIChjb29yZGluYXRlcywgcHJvcGVydGllcykge1xuICAgIGlmICghY29vcmRpbmF0ZXMpIHRocm93IG5ldyBFcnJvcignTm8gY29vcmRpbmF0ZXMgcGFzc2VkJyk7XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdNdWx0aUxpbmVTdHJpbmcnLFxuICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICB9LCBwcm9wZXJ0aWVzKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBGZWF0dXJlPE11bHRpUG9pbnQ+fSBiYXNlZCBvbiBhXG4gKiBjb29yZGluYXRlIGFycmF5LiBQcm9wZXJ0aWVzIGNhbiBiZSBhZGRlZCBvcHRpb25hbGx5LlxuICpcbiAqIEBuYW1lIG11bHRpUG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkaW5hdGVzIGFuIGFycmF5IG9mIFBvc2l0aW9uc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPE11bHRpUG9pbnQ+fSBhIE11bHRpUG9pbnQgZmVhdHVyZVxuICogQHRocm93cyB7RXJyb3J9IGlmIG5vIGNvb3JkaW5hdGVzIGFyZSBwYXNzZWRcbiAqIEBleGFtcGxlXG4gKiB2YXIgbXVsdGlQdCA9IHR1cmYubXVsdGlQb2ludChbWzAsMF0sWzEwLDEwXV0pO1xuICpcbiAqIC8vPW11bHRpUHRcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzLm11bHRpUG9pbnQgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvb3JkaW5hdGVzIHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnTXVsdGlQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgIH0sIHByb3BlcnRpZXMpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgRmVhdHVyZTxNdWx0aVBvbHlnb24+fSBiYXNlZCBvbiBhXG4gKiBjb29yZGluYXRlIGFycmF5LiBQcm9wZXJ0aWVzIGNhbiBiZSBhZGRlZCBvcHRpb25hbGx5LlxuICpcbiAqIEBuYW1lIG11bHRpUG9seWdvblxuICogQHBhcmFtIHtBcnJheTxBcnJheTxBcnJheTxBcnJheTxudW1iZXI+Pj4+fSBjb29yZGluYXRlcyBhbiBhcnJheSBvZiBQb2x5Z29uc1xuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIGFuIE9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgdG8gYWRkIGFzIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPE11bHRpUG9seWdvbj59IGEgbXVsdGlwb2x5Z29uIGZlYXR1cmVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBjb29yZGluYXRlcyBhcmUgcGFzc2VkXG4gKiBAZXhhbXBsZVxuICogdmFyIG11bHRpUG9seSA9IHR1cmYubXVsdGlQb2x5Z29uKFtbW1swLDBdLFswLDEwXSxbMTAsMTBdLFsxMCwwXSxbMCwwXV1dXSk7XG4gKlxuICogLy89bXVsdGlQb2x5XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5tdWx0aVBvbHlnb24gPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvb3JkaW5hdGVzIHBhc3NlZCcpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnTXVsdGlQb2x5Z29uJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgRmVhdHVyZTxHZW9tZXRyeUNvbGxlY3Rpb24+fSBiYXNlZCBvbiBhXG4gKiBjb29yZGluYXRlIGFycmF5LiBQcm9wZXJ0aWVzIGNhbiBiZSBhZGRlZCBvcHRpb25hbGx5LlxuICpcbiAqIEBuYW1lIGdlb21ldHJ5Q29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheTx7R2VvbWV0cnl9Pn0gZ2VvbWV0cmllcyBhbiBhcnJheSBvZiBHZW9KU09OIEdlb21ldHJpZXNcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllcyBhbiBPYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIGFkZCBhcyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxHZW9tZXRyeUNvbGxlY3Rpb24+fSBhIEdlb0pTT04gR2VvbWV0cnlDb2xsZWN0aW9uIEZlYXR1cmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgcHQgPSB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzEwMCwgMF1cbiAqICAgICB9O1xuICogdmFyIGxpbmUgPSB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiTGluZVN0cmluZ1wiLFxuICogICAgIFwiY29vcmRpbmF0ZXNcIjogWyBbMTAxLCAwXSwgWzEwMiwgMV0gXVxuICogICB9O1xuICogdmFyIGNvbGxlY3Rpb24gPSB0dXJmLmdlb21ldHJ5Q29sbGVjdGlvbihbcHQsIGxpbmVdKTtcbiAqXG4gKiAvLz1jb2xsZWN0aW9uXG4gKi9cbm1vZHVsZS5leHBvcnRzLmdlb21ldHJ5Q29sbGVjdGlvbiA9IGZ1bmN0aW9uIChnZW9tZXRyaWVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCFnZW9tZXRyaWVzKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlb21ldHJpZXMgcGFzc2VkJyk7XG5cbiAgICByZXR1cm4gZmVhdHVyZSh7XG4gICAgICAgIHR5cGU6ICdHZW9tZXRyeUNvbGxlY3Rpb24nLFxuICAgICAgICBnZW9tZXRyaWVzOiBnZW9tZXRyaWVzXG4gICAgfSwgcHJvcGVydGllcyk7XG59O1xuXG52YXIgZmFjdG9ycyA9IHtcbiAgICBtaWxlczogMzk2MCxcbiAgICBuYXV0aWNhbG1pbGVzOiAzNDQxLjE0NSxcbiAgICBkZWdyZWVzOiA1Ny4yOTU3Nzk1LFxuICAgIHJhZGlhbnM6IDEsXG4gICAgaW5jaGVzOiAyNTA5MDU2MDAsXG4gICAgeWFyZHM6IDY5Njk2MDAsXG4gICAgbWV0ZXJzOiA2MzczMDAwLFxuICAgIG1ldHJlczogNjM3MzAwMCxcbiAgICBraWxvbWV0ZXJzOiA2MzczLFxuICAgIGtpbG9tZXRyZXM6IDYzNzMsXG4gICAgZmVldDogMjA5MDg3OTIuNjVcbn07XG5cbi8qXG4gKiBDb252ZXJ0IGEgZGlzdGFuY2UgbWVhc3VyZW1lbnQgZnJvbSByYWRpYW5zIHRvIGEgbW9yZSBmcmllbmRseSB1bml0LlxuICpcbiAqIEBuYW1lIHJhZGlhbnNUb0Rpc3RhbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgaW4gcmFkaWFucyBhY3Jvc3MgdGhlIHNwaGVyZVxuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnNcbiAqIGluY2hlcywgeWFyZHMsIG1ldHJlcywgbWV0ZXJzLCBraWxvbWV0cmVzLCBraWxvbWV0ZXJzLlxuICogQHJldHVybnMge251bWJlcn0gZGlzdGFuY2VcbiAqL1xubW9kdWxlLmV4cG9ydHMucmFkaWFuc1RvRGlzdGFuY2UgPSBmdW5jdGlvbiAocmFkaWFucywgdW5pdHMpIHtcbiAgICB2YXIgZmFjdG9yID0gZmFjdG9yc1t1bml0cyB8fCAna2lsb21ldGVycyddO1xuICAgIGlmIChmYWN0b3IgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQnKTtcblxuICAgIHJldHVybiByYWRpYW5zICogZmFjdG9yO1xufTtcblxuLypcbiAqIENvbnZlcnQgYSBkaXN0YW5jZSBtZWFzdXJlbWVudCBmcm9tIGEgcmVhbC13b3JsZCB1bml0IGludG8gcmFkaWFuc1xuICpcbiAqIEBuYW1lIGRpc3RhbmNlVG9SYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgaW4gcmVhbCB1bml0c1xuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnNcbiAqIGluY2hlcywgeWFyZHMsIG1ldHJlcywgbWV0ZXJzLCBraWxvbWV0cmVzLCBraWxvbWV0ZXJzLlxuICogQHJldHVybnMge251bWJlcn0gcmFkaWFuc1xuICovXG5tb2R1bGUuZXhwb3J0cy5kaXN0YW5jZVRvUmFkaWFucyA9IGZ1bmN0aW9uIChkaXN0YW5jZSwgdW5pdHMpIHtcbiAgICB2YXIgZmFjdG9yID0gZmFjdG9yc1t1bml0cyB8fCAna2lsb21ldGVycyddO1xuICAgIGlmIChmYWN0b3IgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQnKTtcblxuICAgIHJldHVybiBkaXN0YW5jZSAvIGZhY3Rvcjtcbn07XG5cbi8qXG4gKiBDb252ZXJ0IGEgZGlzdGFuY2UgbWVhc3VyZW1lbnQgZnJvbSBhIHJlYWwtd29ybGQgdW5pdCBpbnRvIGRlZ3JlZXNcbiAqXG4gKiBAbmFtZSBkaXN0YW5jZVRvUmFkaWFuc1xuICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIGluIHJlYWwgdW5pdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHM9a2lsb21ldGVyc10gY2FuIGJlIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBvciBraWxvbWV0ZXJzXG4gKiBpbmNoZXMsIHlhcmRzLCBtZXRyZXMsIG1ldGVycywga2lsb21ldHJlcywga2lsb21ldGVycy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRlZ3JlZXNcbiAqL1xubW9kdWxlLmV4cG9ydHMuZGlzdGFuY2VUb0RlZ3JlZXMgPSBmdW5jdGlvbiAoZGlzdGFuY2UsIHVuaXRzKSB7XG4gICAgdmFyIGZhY3RvciA9IGZhY3RvcnNbdW5pdHMgfHwgJ2tpbG9tZXRlcnMnXTtcbiAgICBpZiAoZmFjdG9yID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bml0Jyk7XG5cbiAgICByZXR1cm4gKGRpc3RhbmNlIC8gZmFjdG9yKSAqIDU3LjI5NTg7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2ltcGxlcG9seWdvbi9ub2RlX21vZHVsZXMvQHR1cmYvaGVscGVycy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhcmVhID0gcmVxdWlyZSgnQG1hcGJveC9nZW9qc29uLWFyZWEnKS5nZW9tZXRyeTtcbnZhciBnZW9tUmVkdWNlID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpLmdlb21SZWR1Y2U7XG5cbi8qKlxuICogVGFrZXMgb25lIG9yIG1vcmUgZmVhdHVyZXMgYW5kIHJldHVybnMgdGhlaXIgYXJlYSBpbiBzcXVhcmUgbWV0ZXJzLlxuICpcbiAqIEBuYW1lIGFyZWFcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258RmVhdHVyZTxhbnk+fSBnZW9qc29uIGlucHV0IEdlb0pTT04gZmVhdHVyZShzKVxuICogQHJldHVybnMge251bWJlcn0gYXJlYSBpbiBzcXVhcmUgbWV0ZXJzXG4gKiBAYWRkVG9NYXAgcG9seWdvblxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5Z29uID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICogICAgIFwiY29vcmRpbmF0ZXNcIjogW1xuICogICAgICAgW1xuICogICAgICAgICBbMTI1LCAtMTVdLFxuICogICAgICAgICBbMTEzLCAtMjJdLFxuICogICAgICAgICBbMTE3LCAtMzddLFxuICogICAgICAgICBbMTMwLCAtMzNdLFxuICogICAgICAgICBbMTQ4LCAtMzldLFxuICogICAgICAgICBbMTU0LCAtMjddLFxuICogICAgICAgICBbMTQ0LCAtMTVdLFxuICogICAgICAgICBbMTI1LCAtMTVdXG4gKiAgICAgICBdXG4gKiAgICAgXVxuICogICB9XG4gKiB9XG4gKiB2YXIgYXJlYSA9IHR1cmYuYXJlYShwb2x5Z29uKTtcbiAqIC8vPWFyZWEgPT4gc3F1YXJlIG1ldGVyc1xuICogLy89cG9seWdvblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uKSB7XG4gICAgcmV0dXJuIGdlb21SZWR1Y2UoZ2VvanNvbiwgZnVuY3Rpb24gKHZhbHVlLCBnZW9tZXRyeSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgKyBhcmVhKGdlb21ldHJ5KTtcbiAgICB9LCAwKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zaW1wbGVwb2x5Z29uL25vZGVfbW9kdWxlcy9AdHVyZi9hcmVhL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDYWxsYmFjayBmb3IgY29vcmRFYWNoXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYWxsYmFjayBjb29yZEVhY2hDYWxsYmFja1xuICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXJdfSBjdXJyZW50Q29vcmRzIFRoZSBjdXJyZW50IGNvb3JkaW5hdGVzIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZVxuICogYXJyYXkuU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICovXG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGNvb3JkaW5hdGVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5mb3JFYWNoKClcbiAqXG4gKiBAbmFtZSBjb29yZEVhY2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKGN1cnJlbnRDb29yZHMsIGN1cnJlbnRJbmRleClcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2V4Y2x1ZGVXcmFwQ29vcmQ9ZmFsc2VdIHdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGVcbiAqIHRoZSBmaW5hbCBjb29yZGluYXRlIG9mIExpbmVhclJpbmdzIHRoYXQgd3JhcHMgdGhlIHJpbmcgaW4gaXRzIGl0ZXJhdGlvbi5cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsyNiwgMzddXG4gKiAgICAgICB9XG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHR1cmYuY29vcmRFYWNoKGZlYXR1cmVzLCBmdW5jdGlvbiAoY3VycmVudENvb3JkcywgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRDb29yZHNcbiAqICAgLy89Y3VycmVudEluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gY29vcmRFYWNoKGxheWVyLCBjYWxsYmFjaywgZXhjbHVkZVdyYXBDb29yZCkge1xuICAgIHZhciBpLCBqLCBrLCBnLCBsLCBnZW9tZXRyeSwgc3RvcEcsIGNvb3JkcyxcbiAgICAgICAgZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24sXG4gICAgICAgIHdyYXBTaHJpbmsgPSAwLFxuICAgICAgICBjdXJyZW50SW5kZXggPSAwLFxuICAgICAgICBpc0dlb21ldHJ5Q29sbGVjdGlvbixcbiAgICAgICAgaXNGZWF0dXJlQ29sbGVjdGlvbiA9IGxheWVyLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgIGlzRmVhdHVyZSA9IGxheWVyLnR5cGUgPT09ICdGZWF0dXJlJyxcbiAgICAgICAgc3RvcCA9IGlzRmVhdHVyZUNvbGxlY3Rpb24gPyBsYXllci5mZWF0dXJlcy5sZW5ndGggOiAxO1xuXG4gIC8vIFRoaXMgbG9naWMgbWF5IGxvb2sgYSBsaXR0bGUgd2VpcmQuIFRoZSByZWFzb24gd2h5IGl0IGlzIHRoYXQgd2F5XG4gIC8vIGlzIGJlY2F1c2UgaXQncyB0cnlpbmcgdG8gYmUgZmFzdC4gR2VvSlNPTiBzdXBwb3J0cyBtdWx0aXBsZSBraW5kc1xuICAvLyBvZiBvYmplY3RzIGF0IGl0cyByb290OiBGZWF0dXJlQ29sbGVjdGlvbiwgRmVhdHVyZXMsIEdlb21ldHJpZXMuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSByZXNwb25zaWJpbGl0eSBvZiBoYW5kbGluZyBhbGwgb2YgdGhlbSwgYW5kIHRoYXRcbiAgLy8gbWVhbnMgdGhhdCBzb21lIG9mIHRoZSBgZm9yYCBsb29wcyB5b3Ugc2VlIGJlbG93IGFjdHVhbGx5IGp1c3QgZG9uJ3QgYXBwbHlcbiAgLy8gdG8gY2VydGFpbiBpbnB1dHMuIEZvciBpbnN0YW5jZSwgaWYgeW91IGdpdmUgdGhpcyBqdXN0IGFcbiAgLy8gUG9pbnQgZ2VvbWV0cnksIHRoZW4gYm90aCBsb29wcyBhcmUgc2hvcnQtY2lyY3VpdGVkIGFuZCBhbGwgd2UgZG9cbiAgLy8gaXMgZ3JhZHVhbGx5IHJlbmFtZSB0aGUgaW5wdXQgdW50aWwgaXQncyBjYWxsZWQgJ2dlb21ldHJ5Jy5cbiAgLy9cbiAgLy8gVGhpcyBhbHNvIGFpbXMgdG8gYWxsb2NhdGUgYXMgZmV3IHJlc291cmNlcyBhcyBwb3NzaWJsZToganVzdCBhXG4gIC8vIGZldyBudW1iZXJzIGFuZCBib29sZWFucywgcmF0aGVyIHRoYW4gYW55IHRlbXBvcmFyeSBhcnJheXMgYXMgd291bGRcbiAgLy8gYmUgcmVxdWlyZWQgd2l0aCB0aGUgbm9ybWFsaXphdGlvbiBhcHByb2FjaC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RvcDsgaSsrKSB7XG5cbiAgICAgICAgZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24gPSAoaXNGZWF0dXJlQ29sbGVjdGlvbiA/IGxheWVyLmZlYXR1cmVzW2ldLmdlb21ldHJ5IDpcbiAgICAgICAgKGlzRmVhdHVyZSA/IGxheWVyLmdlb21ldHJ5IDogbGF5ZXIpKTtcbiAgICAgICAgaXNHZW9tZXRyeUNvbGxlY3Rpb24gPSBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi50eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJztcbiAgICAgICAgc3RvcEcgPSBpc0dlb21ldHJ5Q29sbGVjdGlvbiA/IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uLmdlb21ldHJpZXMubGVuZ3RoIDogMTtcblxuICAgICAgICBmb3IgKGcgPSAwOyBnIDwgc3RvcEc7IGcrKykge1xuICAgICAgICAgICAgZ2VvbWV0cnkgPSBpc0dlb21ldHJ5Q29sbGVjdGlvbiA/XG4gICAgICAgICAgICBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzW2ddIDogZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb247XG4gICAgICAgICAgICBjb29yZHMgPSBnZW9tZXRyeS5jb29yZGluYXRlcztcblxuICAgICAgICAgICAgd3JhcFNocmluayA9IChleGNsdWRlV3JhcENvb3JkICYmXG4gICAgICAgICAgICAgICAgKGdlb21ldHJ5LnR5cGUgPT09ICdQb2x5Z29uJyB8fCBnZW9tZXRyeS50eXBlID09PSAnTXVsdGlQb2x5Z29uJykpID9cbiAgICAgICAgICAgICAgICAxIDogMDtcblxuICAgICAgICAgICAgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdQb2ludCcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjb29yZHMsIGN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICAgICAgY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdMaW5lU3RyaW5nJyB8fCBnZW9tZXRyeS50eXBlID09PSAnTXVsdGlQb2ludCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29vcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvb3Jkc1tqXSwgY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicgfHwgZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29vcmRzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY29vcmRzW2pdLmxlbmd0aCAtIHdyYXBTaHJpbms7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY29vcmRzW2pdW2tdLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29vcmRzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY29vcmRzW2pdLmxlbmd0aDsgaysrKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsID0gMDsgbCA8IGNvb3Jkc1tqXVtrXS5sZW5ndGggLSB3cmFwU2hyaW5rOyBsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjb29yZHNbal1ba11bbF0sIGN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkRWFjaChnZW9tZXRyeS5nZW9tZXRyaWVzW2pdLCBjYWxsYmFjaywgZXhjbHVkZVdyYXBDb29yZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBHZW9tZXRyeSBUeXBlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cy5jb29yZEVhY2ggPSBjb29yZEVhY2g7XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIGNvb3JkUmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhbGxiYWNrIGNvb3JkUmVkdWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gcHJldmlvdXNWYWx1ZSBUaGUgYWNjdW11bGF0ZWQgdmFsdWUgcHJldmlvdXNseSByZXR1cm5lZCBpbiB0aGUgbGFzdCBpbnZvY2F0aW9uXG4gKiBvZiB0aGUgY2FsbGJhY2ssIG9yIGluaXRpYWxWYWx1ZSwgaWYgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlcl19IGN1cnJlbnRDb29yZHMgVGhlIGN1cnJlbnQgY29vcmRpbmF0ZSBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBjb29yZGluYXRlcyBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkucmVkdWNlKClcbiAqXG4gKiBAbmFtZSBjb29yZFJlZHVjZVxuICogQHBhcmFtIHtPYmplY3R9IGxheWVyIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudENvb3JkcywgY3VycmVudEluZGV4KVxuICogQHBhcmFtIHsqfSBbaW5pdGlhbFZhbHVlXSBWYWx1ZSB0byB1c2UgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmaXJzdCBjYWxsIG9mIHRoZSBjYWxsYmFjay5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2V4Y2x1ZGVXcmFwQ29vcmQ9ZmFsc2VdIHdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGVcbiAqIHRoZSBmaW5hbCBjb29yZGluYXRlIG9mIExpbmVhclJpbmdzIHRoYXQgd3JhcHMgdGhlIHJpbmcgaW4gaXRzIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhhdCByZXN1bHRzIGZyb20gdGhlIHJlZHVjdGlvbi5cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsyNiwgMzddXG4gKiAgICAgICB9XG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHR1cmYuY29vcmRSZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50Q29vcmRzLCBjdXJyZW50SW5kZXgpIHtcbiAqICAgLy89cHJldmlvdXNWYWx1ZVxuICogICAvLz1jdXJyZW50Q29vcmRzXG4gKiAgIC8vPWN1cnJlbnRJbmRleFxuICogICByZXR1cm4gY3VycmVudENvb3JkcztcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBjb29yZFJlZHVjZShsYXllciwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSwgZXhjbHVkZVdyYXBDb29yZCkge1xuICAgIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIGNvb3JkRWFjaChsYXllciwgZnVuY3Rpb24gKGN1cnJlbnRDb29yZHMsIGN1cnJlbnRJbmRleCkge1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSAwICYmIGluaXRpYWxWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY3VycmVudENvb3JkcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjYWxsYmFjayhwcmV2aW91c1ZhbHVlLCBjdXJyZW50Q29vcmRzLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgfSwgZXhjbHVkZVdyYXBDb29yZCk7XG4gICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cy5jb29yZFJlZHVjZSA9IGNvb3JkUmVkdWNlO1xuXG4vKipcbiAqIENhbGxiYWNrIGZvciBwcm9wRWFjaFxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2FsbGJhY2sgcHJvcEVhY2hDYWxsYmFja1xuICogQHBhcmFtIHsqfSBjdXJyZW50UHJvcGVydGllcyBUaGUgY3VycmVudCBwcm9wZXJ0aWVzIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZVxuICogYXJyYXkuU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICovXG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIHByb3BlcnRpZXMgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LmZvckVhY2goKVxuICpcbiAqIEBuYW1lIHByb3BFYWNoXG4gKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChjdXJyZW50UHJvcGVydGllcywgY3VycmVudEluZGV4KVxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHtcbiAqICAgXCJ0eXBlXCI6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIixcbiAqICAgXCJmZWF0dXJlc1wiOiBbXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcImZvb1wiOiBcImJhclwifSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsyNiwgMzddXG4gKiAgICAgICB9XG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge1wiaGVsbG9cIjogXCJ3b3JsZFwifSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFszNiwgNTNdXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICBdXG4gKiB9O1xuICogdHVyZi5wcm9wRWFjaChmZWF0dXJlcywgZnVuY3Rpb24gKGN1cnJlbnRQcm9wZXJ0aWVzLCBjdXJyZW50SW5kZXgpIHtcbiAqICAgLy89Y3VycmVudFByb3BlcnRpZXNcbiAqICAgLy89Y3VycmVudEluZGV4XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gcHJvcEVhY2gobGF5ZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGk7XG4gICAgc3dpdGNoIChsYXllci50eXBlKSB7XG4gICAgY2FzZSAnRmVhdHVyZUNvbGxlY3Rpb24nOlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXIuZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGxheWVyLmZlYXR1cmVzW2ldLnByb3BlcnRpZXMsIGkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ZlYXR1cmUnOlxuICAgICAgICBjYWxsYmFjayhsYXllci5wcm9wZXJ0aWVzLCAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMucHJvcEVhY2ggPSBwcm9wRWFjaDtcblxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBwcm9wUmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhbGxiYWNrIHByb3BSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7Kn0gY3VycmVudFByb3BlcnRpZXMgVGhlIGN1cnJlbnQgcHJvcGVydGllcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBlbGVtZW50IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGVcbiAqIGFycmF5LlN0YXJ0cyBhdCBpbmRleCAwLCBpZiBhbiBpbml0aWFsVmFsdWUgaXMgcHJvdmlkZWQsIGFuZCBhdCBpbmRleCAxIG90aGVyd2lzZS5cbiAqL1xuXG4vKipcbiAqIFJlZHVjZSBwcm9wZXJ0aWVzIGluIGFueSBHZW9KU09OIG9iamVjdCBpbnRvIGEgc2luZ2xlIHZhbHVlLFxuICogc2ltaWxhciB0byBob3cgQXJyYXkucmVkdWNlIHdvcmtzLiBIb3dldmVyLCBpbiB0aGlzIGNhc2Ugd2UgbGF6aWx5IHJ1blxuICogdGhlIHJlZHVjdGlvbiwgc28gYW4gYXJyYXkgb2YgYWxsIHByb3BlcnRpZXMgaXMgdW5uZWNlc3NhcnkuXG4gKlxuICogQG5hbWUgcHJvcFJlZHVjZVxuICogQHBhcmFtIHtPYmplY3R9IGxheWVyIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAocHJldmlvdXNWYWx1ZSwgY3VycmVudFByb3BlcnRpZXMsIGN1cnJlbnRJbmRleClcbiAqIEBwYXJhbSB7Kn0gW2luaXRpYWxWYWx1ZV0gVmFsdWUgdG8gdXNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZmlyc3QgY2FsbCBvZiB0aGUgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgcmVzdWx0cyBmcm9tIHRoZSByZWR1Y3Rpb24uXG4gKiBAZXhhbXBsZVxuICogdmFyIGZlYXR1cmVzID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICogICBcImZlYXR1cmVzXCI6IFtcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge1wiZm9vXCI6IFwiYmFyXCJ9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzI2LCAzN11cbiAqICAgICAgIH1cbiAqICAgICB9LFxuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XCJoZWxsb1wiOiBcIndvcmxkXCJ9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzM2LCA1M11cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIF1cbiAqIH07XG4gKiB0dXJmLnByb3BSZWR1Y2UoZmVhdHVyZXMsIGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50UHJvcGVydGllcywgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudFByb3BlcnRpZXNcbiAqICAgLy89Y3VycmVudEluZGV4XG4gKiAgIHJldHVybiBjdXJyZW50UHJvcGVydGllc1xuICogfSk7XG4gKi9cbmZ1bmN0aW9uIHByb3BSZWR1Y2UobGF5ZXIsIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBwcm9wRWFjaChsYXllciwgZnVuY3Rpb24gKGN1cnJlbnRQcm9wZXJ0aWVzLCBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRQcm9wZXJ0aWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGNhbGxiYWNrKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRQcm9wZXJ0aWVzLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cy5wcm9wUmVkdWNlID0gcHJvcFJlZHVjZTtcblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmVhdHVyZUVhY2hcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhbGxiYWNrIGZlYXR1cmVFYWNoQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RmVhdHVyZTxhbnk+fSBjdXJyZW50RmVhdHVyZSBUaGUgY3VycmVudCBmZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZVxuICogYXJyYXkuU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICovXG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGZlYXR1cmVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0b1xuICogQXJyYXkuZm9yRWFjaC5cbiAqXG4gKiBAbmFtZSBmZWF0dXJlRWFjaFxuICogQHBhcmFtIHtPYmplY3R9IGxheWVyIGFueSBHZW9KU09OIG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYSBtZXRob2QgdGhhdCB0YWtlcyAoY3VycmVudEZlYXR1cmUsIGN1cnJlbnRJbmRleClcbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsyNiwgMzddXG4gKiAgICAgICB9XG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHR1cmYuZmVhdHVyZUVhY2goZmVhdHVyZXMsIGZ1bmN0aW9uIChjdXJyZW50RmVhdHVyZSwgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRGZWF0dXJlXG4gKiAgIC8vPWN1cnJlbnRJbmRleFxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmVFYWNoKGxheWVyLCBjYWxsYmFjaykge1xuICAgIGlmIChsYXllci50eXBlID09PSAnRmVhdHVyZScpIHtcbiAgICAgICAgY2FsbGJhY2sobGF5ZXIsIDApO1xuICAgIH0gZWxzZSBpZiAobGF5ZXIudHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxheWVyLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhsYXllci5mZWF0dXJlc1tpXSwgaSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cy5mZWF0dXJlRWFjaCA9IGZlYXR1cmVFYWNoO1xuXG4vKipcbiAqIENhbGxiYWNrIGZvciBmZWF0dXJlUmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhbGxiYWNrIGZlYXR1cmVSZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7RmVhdHVyZTxhbnk+fSBjdXJyZW50RmVhdHVyZSBUaGUgY3VycmVudCBGZWF0dXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZVxuICogYXJyYXkuU3RhcnRzIGF0IGluZGV4IDAsIGlmIGFuIGluaXRpYWxWYWx1ZSBpcyBwcm92aWRlZCwgYW5kIGF0IGluZGV4IDEgb3RoZXJ3aXNlLlxuICovXG5cbi8qKlxuICogUmVkdWNlIGZlYXR1cmVzIGluIGFueSBHZW9KU09OIG9iamVjdCwgc2ltaWxhciB0byBBcnJheS5yZWR1Y2UoKS5cbiAqXG4gKiBAbmFtZSBmZWF0dXJlUmVkdWNlXG4gKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgYW55IEdlb0pTT04gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBhIG1ldGhvZCB0aGF0IHRha2VzIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50RmVhdHVyZSwgY3VycmVudEluZGV4KVxuICogQHBhcmFtIHsqfSBbaW5pdGlhbFZhbHVlXSBWYWx1ZSB0byB1c2UgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmaXJzdCBjYWxsIG9mIHRoZSBjYWxsYmFjay5cbiAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhhdCByZXN1bHRzIGZyb20gdGhlIHJlZHVjdGlvbi5cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XCJmb29cIjogXCJiYXJcIn0sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMjYsIDM3XVxuICogICAgICAgfVxuICogICAgIH0sXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcImhlbGxvXCI6IFwid29ybGRcIn0sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHR1cmYuZmVhdHVyZVJlZHVjZShmZWF0dXJlcywgZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRGZWF0dXJlLCBjdXJyZW50SW5kZXgpIHtcbiAqICAgLy89cHJldmlvdXNWYWx1ZVxuICogICAvLz1jdXJyZW50RmVhdHVyZVxuICogICAvLz1jdXJyZW50SW5kZXhcbiAqICAgcmV0dXJuIGN1cnJlbnRGZWF0dXJlXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZVJlZHVjZShsYXllciwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIGZlYXR1cmVFYWNoKGxheWVyLCBmdW5jdGlvbiAoY3VycmVudEZlYXR1cmUsIGN1cnJlbnRJbmRleCkge1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSAwICYmIGluaXRpYWxWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY3VycmVudEZlYXR1cmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY2FsbGJhY2socHJldmlvdXNWYWx1ZSwgY3VycmVudEZlYXR1cmUsIGN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbn1cbm1vZHVsZS5leHBvcnRzLmZlYXR1cmVSZWR1Y2UgPSBmZWF0dXJlUmVkdWNlO1xuXG4vKipcbiAqIEdldCBhbGwgY29vcmRpbmF0ZXMgZnJvbSBhbnkgR2VvSlNPTiBvYmplY3QuXG4gKlxuICogQG5hbWUgY29vcmRBbGxcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZSBwb3NpdGlvbiBhcnJheVxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHtcbiAqICAgXCJ0eXBlXCI6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIixcbiAqICAgXCJmZWF0dXJlc1wiOiBbXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzI2LCAzN11cbiAqICAgICAgIH1cbiAqICAgICB9LFxuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFszNiwgNTNdXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICBdXG4gKiB9O1xuICogdmFyIGNvb3JkcyA9IHR1cmYuY29vcmRBbGwoZmVhdHVyZXMpO1xuICogLy89Y29vcmRzXG4gKi9cbmZ1bmN0aW9uIGNvb3JkQWxsKGxheWVyKSB7XG4gICAgdmFyIGNvb3JkcyA9IFtdO1xuICAgIGNvb3JkRWFjaChsYXllciwgZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgIGNvb3Jkcy5wdXNoKGNvb3JkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY29vcmRzO1xufVxubW9kdWxlLmV4cG9ydHMuY29vcmRBbGwgPSBjb29yZEFsbDtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBnZW9tZXRyeSBpbiBhbnkgR2VvSlNPTiBvYmplY3QsIHNpbWlsYXIgdG8gQXJyYXkuZm9yRWFjaCgpXG4gKlxuICogQG5hbWUgZ2VvbUVhY2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKGN1cnJlbnRHZW9tZXRyeSwgY3VycmVudEluZGV4KVxuICogQGV4YW1wbGVcbiAqIHZhciBmZWF0dXJlcyA9IHtcbiAqICAgXCJ0eXBlXCI6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIixcbiAqICAgXCJmZWF0dXJlc1wiOiBbXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWzI2LCAzN11cbiAqICAgICAgIH1cbiAqICAgICB9LFxuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFszNiwgNTNdXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICBdXG4gKiB9O1xuICogdHVyZi5nZW9tRWFjaChmZWF0dXJlcywgZnVuY3Rpb24gKGN1cnJlbnRHZW9tZXRyeSwgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPWN1cnJlbnRHZW9tZXRyeVxuICogICAvLz1jdXJyZW50SW5kZXhcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBnZW9tRWFjaChsYXllciwgY2FsbGJhY2spIHtcbiAgICB2YXIgaSwgaiwgZywgZ2VvbWV0cnksIHN0b3BHLFxuICAgICAgICBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbixcbiAgICAgICAgaXNHZW9tZXRyeUNvbGxlY3Rpb24sXG4gICAgICAgIGN1cnJlbnRJbmRleCA9IDAsXG4gICAgICAgIGlzRmVhdHVyZUNvbGxlY3Rpb24gPSBsYXllci50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgICBpc0ZlYXR1cmUgPSBsYXllci50eXBlID09PSAnRmVhdHVyZScsXG4gICAgICAgIHN0b3AgPSBpc0ZlYXR1cmVDb2xsZWN0aW9uID8gbGF5ZXIuZmVhdHVyZXMubGVuZ3RoIDogMTtcblxuICAvLyBUaGlzIGxvZ2ljIG1heSBsb29rIGEgbGl0dGxlIHdlaXJkLiBUaGUgcmVhc29uIHdoeSBpdCBpcyB0aGF0IHdheVxuICAvLyBpcyBiZWNhdXNlIGl0J3MgdHJ5aW5nIHRvIGJlIGZhc3QuIEdlb0pTT04gc3VwcG9ydHMgbXVsdGlwbGUga2luZHNcbiAgLy8gb2Ygb2JqZWN0cyBhdCBpdHMgcm9vdDogRmVhdHVyZUNvbGxlY3Rpb24sIEZlYXR1cmVzLCBHZW9tZXRyaWVzLlxuICAvLyBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgaGFuZGxpbmcgYWxsIG9mIHRoZW0sIGFuZCB0aGF0XG4gIC8vIG1lYW5zIHRoYXQgc29tZSBvZiB0aGUgYGZvcmAgbG9vcHMgeW91IHNlZSBiZWxvdyBhY3R1YWxseSBqdXN0IGRvbid0IGFwcGx5XG4gIC8vIHRvIGNlcnRhaW4gaW5wdXRzLiBGb3IgaW5zdGFuY2UsIGlmIHlvdSBnaXZlIHRoaXMganVzdCBhXG4gIC8vIFBvaW50IGdlb21ldHJ5LCB0aGVuIGJvdGggbG9vcHMgYXJlIHNob3J0LWNpcmN1aXRlZCBhbmQgYWxsIHdlIGRvXG4gIC8vIGlzIGdyYWR1YWxseSByZW5hbWUgdGhlIGlucHV0IHVudGlsIGl0J3MgY2FsbGVkICdnZW9tZXRyeScuXG4gIC8vXG4gIC8vIFRoaXMgYWxzbyBhaW1zIHRvIGFsbG9jYXRlIGFzIGZldyByZXNvdXJjZXMgYXMgcG9zc2libGU6IGp1c3QgYVxuICAvLyBmZXcgbnVtYmVycyBhbmQgYm9vbGVhbnMsIHJhdGhlciB0aGFuIGFueSB0ZW1wb3JhcnkgYXJyYXlzIGFzIHdvdWxkXG4gIC8vIGJlIHJlcXVpcmVkIHdpdGggdGhlIG5vcm1hbGl6YXRpb24gYXBwcm9hY2guXG4gICAgZm9yIChpID0gMDsgaSA8IHN0b3A7IGkrKykge1xuXG4gICAgICAgIGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uID0gKGlzRmVhdHVyZUNvbGxlY3Rpb24gPyBsYXllci5mZWF0dXJlc1tpXS5nZW9tZXRyeSA6XG4gICAgICAgIChpc0ZlYXR1cmUgPyBsYXllci5nZW9tZXRyeSA6IGxheWVyKSk7XG4gICAgICAgIGlzR2VvbWV0cnlDb2xsZWN0aW9uID0gZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24udHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbic7XG4gICAgICAgIHN0b3BHID0gaXNHZW9tZXRyeUNvbGxlY3Rpb24gPyBnZW9tZXRyeU1heWJlQ29sbGVjdGlvbi5nZW9tZXRyaWVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgZm9yIChnID0gMDsgZyA8IHN0b3BHOyBnKyspIHtcbiAgICAgICAgICAgIGdlb21ldHJ5ID0gaXNHZW9tZXRyeUNvbGxlY3Rpb24gP1xuICAgICAgICAgICAgZ2VvbWV0cnlNYXliZUNvbGxlY3Rpb24uZ2VvbWV0cmllc1tnXSA6IGdlb21ldHJ5TWF5YmVDb2xsZWN0aW9uO1xuXG4gICAgICAgICAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ1BvaW50JyB8fFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnR5cGUgPT09ICdMaW5lU3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnR5cGUgPT09ICdNdWx0aVBvaW50JyB8fFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnR5cGUgPT09ICdQb2x5Z29uJyB8fFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnIHx8XG4gICAgICAgICAgICAgICAgZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhnZW9tZXRyeSwgY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZ2VvbWV0cnkuZ2VvbWV0cmllcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhnZW9tZXRyeS5nZW9tZXRyaWVzW2pdLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBHZW9tZXRyeSBUeXBlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cy5nZW9tRWFjaCA9IGdlb21FYWNoO1xuXG4vKipcbiAqIENhbGxiYWNrIGZvciBnZW9tUmVkdWNlXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIHZhbHVlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMgZGVwZW5kXG4gKiBvbiB3aGV0aGVyIHRoZSByZWR1Y2UgbWV0aG9kIGhhcyBhbiBpbml0aWFsVmFsdWUgYXJndW1lbnQuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkIHRvIHRoZSByZWR1Y2UgbWV0aG9kOlxuICogIC0gVGhlIHByZXZpb3VzVmFsdWUgYXJndW1lbnQgaXMgaW5pdGlhbFZhbHVlLlxuICogIC0gVGhlIGN1cnJlbnRWYWx1ZSBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogSWYgYW4gaW5pdGlhbFZhbHVlIGlzIG5vdCBwcm92aWRlZDpcbiAqICAtIFRoZSBwcmV2aW91c1ZhbHVlIGFyZ3VtZW50IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqICAtIFRoZSBjdXJyZW50VmFsdWUgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhbGxiYWNrIGdlb21SZWR1Y2VDYWxsYmFja1xuICogQHBhcmFtIHsqfSBwcmV2aW91c1ZhbHVlIFRoZSBhY2N1bXVsYXRlZCB2YWx1ZSBwcmV2aW91c2x5IHJldHVybmVkIGluIHRoZSBsYXN0IGludm9jYXRpb25cbiAqIG9mIHRoZSBjYWxsYmFjaywgb3IgaW5pdGlhbFZhbHVlLCBpZiBzdXBwbGllZC5cbiAqIEBwYXJhbSB7Kn0gY3VycmVudEdlb21ldHJ5IFRoZSBjdXJyZW50IEZlYXR1cmUgYmVpbmcgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBiZWluZyBwcm9jZXNzZWQgaW4gdGhlXG4gKiBhcnJheS5TdGFydHMgYXQgaW5kZXggMCwgaWYgYW4gaW5pdGlhbFZhbHVlIGlzIHByb3ZpZGVkLCBhbmQgYXQgaW5kZXggMSBvdGhlcndpc2UuXG4gKi9cblxuLyoqXG4gKiBSZWR1Y2UgZ2VvbWV0cnkgaW4gYW55IEdlb0pTT04gb2JqZWN0LCBzaW1pbGFyIHRvIEFycmF5LnJlZHVjZSgpLlxuICpcbiAqIEBuYW1lIGdlb21SZWR1Y2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciBhbnkgR2VvSlNPTiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGEgbWV0aG9kIHRoYXQgdGFrZXMgKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRHZW9tZXRyeSwgY3VycmVudEluZGV4KVxuICogQHBhcmFtIHsqfSBbaW5pdGlhbFZhbHVlXSBWYWx1ZSB0byB1c2UgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBmaXJzdCBjYWxsIG9mIHRoZSBjYWxsYmFjay5cbiAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhhdCByZXN1bHRzIGZyb20gdGhlIHJlZHVjdGlvbi5cbiAqIEBleGFtcGxlXG4gKiB2YXIgZmVhdHVyZXMgPSB7XG4gKiAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgIFwiZmVhdHVyZXNcIjogW1xuICogICAgIHtcbiAqICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XCJmb29cIjogXCJiYXJcIn0sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMjYsIDM3XVxuICogICAgICAgfVxuICogICAgIH0sXG4gKiAgICAge1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcImhlbGxvXCI6IFwid29ybGRcIn0sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbMzYsIDUzXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgXVxuICogfTtcbiAqIHR1cmYuZ2VvbVJlZHVjZShmZWF0dXJlcywgZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRHZW9tZXRyeSwgY3VycmVudEluZGV4KSB7XG4gKiAgIC8vPXByZXZpb3VzVmFsdWVcbiAqICAgLy89Y3VycmVudEdlb21ldHJ5XG4gKiAgIC8vPWN1cnJlbnRJbmRleFxuICogICByZXR1cm4gY3VycmVudEdlb21ldHJ5XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZ2VvbVJlZHVjZShsYXllciwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBwcmV2aW91c1ZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIGdlb21FYWNoKGxheWVyLCBmdW5jdGlvbiAoY3VycmVudEdlb21ldHJ5LCBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCAmJiBpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRHZW9tZXRyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjYWxsYmFjayhwcmV2aW91c1ZhbHVlLCBjdXJyZW50R2VvbWV0cnksIGN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbn1cbm1vZHVsZS5leHBvcnRzLmdlb21SZWR1Y2UgPSBnZW9tUmVkdWNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2ltcGxlcG9seWdvbi9ub2RlX21vZHVsZXMvQHR1cmYvbWV0YS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFByZXZpb3VzIGxvZyB0aW1lc3RhbXAuXG4gKi9cblxudmFyIHByZXZUaW1lO1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICByZXR1cm4gZGVidWc7XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanNcbi8vIG1vZHVsZSBpZCA9IDIxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhcmMgPSByZXF1aXJlKCcuL2FyYycpO1xudmFyIGdldENvb3JkID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50JykuZ2V0Q29vcmQ7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGdyZWF0IGNpcmNsZXMgcm91dGVzIGFzIHtAbGluayBMaW5lU3RyaW5nfVxuICpcbiAqIEBuYW1lIGdyZWF0Q2lyY2xlXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8UG9pbnQ+fEFycmF5PG51bWJlcj59IHN0YXJ0IHNvdXJjZSBwb2ludCBmZWF0dXJlXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8UG9pbnQ+fEFycmF5PG51bWJlcj59IGVuZCBkZXN0aW5hdGlvbiBwb2ludCBmZWF0dXJlXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIGxpbmUgZmVhdHVyZSBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge251bWJlcn0gW25wb2ludHM9MTAwXSBudW1iZXIgb2YgcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0xMF0gb2Zmc2V0IGNvbnRyb2xzIHRoZSBsaWtlbHlob29kIHRoYXQgbGluZXMgd2lsbFxuICogYmUgc3BsaXQgd2hpY2ggY3Jvc3MgdGhlIGRhdGVsaW5lLiBUaGUgaGlnaGVyIHRoZSBudW1iZXIgdGhlIG1vcmUgbGlrZWx5LlxuICogQHJldHVybnMge0ZlYXR1cmU8TGluZVN0cmluZz59IGdyZWF0IGNpcmNsZSBsaW5lIGZlYXR1cmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgc3RhcnQgPSB0dXJmLnBvaW50KFstMTIyLCA0OF0pO1xuICogdmFyIGVuZCA9IHR1cmYucG9pbnQoWy03NywgMzldKTtcbiAqXG4gKiB2YXIgZ3JlYXRDaXJjbGUgPSB0dXJmLmdyZWF0Q2lyY2xlKHN0YXJ0LCBlbmQsIHsnbmFtZSc6ICdTZWF0dGxlIHRvIERDJ30pO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtzdGFydCwgZW5kLCBncmVhdENpcmNsZV1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgcHJvcGVydGllcywgbnBvaW50cywgb2Zmc2V0KSB7XG4gICAgc3RhcnQgPSBnZXRDb29yZChzdGFydCk7XG4gICAgZW5kID0gZ2V0Q29vcmQoZW5kKTtcbiAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCB7fTtcbiAgICBucG9pbnRzID0gbnBvaW50cyB8fCAxMDA7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDEwO1xuXG4gICAgdmFyIGdlbmVyYXRvciA9IG5ldyBhcmMuR3JlYXRDaXJjbGUoe3g6IHN0YXJ0WzBdLCB5OiBzdGFydFsxXX0sIHt4OiBlbmRbMF0sIHk6IGVuZFsxXX0sIHByb3BlcnRpZXMpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgdmFyIGxpbmUgPSBnZW5lcmF0b3IuQXJjKG5wb2ludHMsIHtvZmZzZXQ6IG9mZnNldH0pO1xuICAgIC8qIGVzbGludC1lbmFibGUgKi9cblxuICAgIHJldHVybiBsaW5lLmpzb24oKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9ncmVhdC1jaXJjbGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBEMlIgPSBNYXRoLlBJIC8gMTgwO1xudmFyIFIyRCA9IDE4MCAvIE1hdGguUEk7XG5cbnZhciBDb29yZCA9IGZ1bmN0aW9uIChsb24sIGxhdCkge1xuICAgIHRoaXMubG9uID0gbG9uO1xuICAgIHRoaXMubGF0ID0gbGF0O1xuICAgIHRoaXMueCA9IEQyUiAqIGxvbjtcbiAgICB0aGlzLnkgPSBEMlIgKiBsYXQ7XG59O1xuXG5Db29yZC5wcm90b3R5cGUudmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMubG9uKS5zbGljZSgwLCA0KSArICcsJyArIFN0cmluZyh0aGlzLmxhdCkuc2xpY2UoMCwgNCk7XG59O1xuXG5Db29yZC5wcm90b3R5cGUuYW50aXBvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFudGlfbGF0ID0gLTEgKiB0aGlzLmxhdDtcbiAgICB2YXIgYW50aV9sb24gPSAodGhpcy5sb24gPCAwKSA/IDE4MCArIHRoaXMubG9uIDogKDE4MCAtIHRoaXMubG9uKSAqIC0xO1xuICAgIHJldHVybiBuZXcgQ29vcmQoYW50aV9sb24sIGFudGlfbGF0KTtcbn07XG5cbnZhciBMaW5lU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29vcmRzID0gW107XG4gICAgdGhpcy5sZW5ndGggPSAwO1xufTtcblxuTGluZVN0cmluZy5wcm90b3R5cGUubW92ZV90byA9IGZ1bmN0aW9uIChjb29yZCkge1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5jb29yZHMucHVzaChjb29yZCk7XG59O1xuXG52YXIgQXJjID0gZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHRoaXMuZ2VvbWV0cmllcyA9IFtdO1xufTtcblxuQXJjLnByb3RvdHlwZS5qc29uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmdlb21ldHJpZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIHsnZ2VvbWV0cnknOiB7J3R5cGUnOiAnTGluZVN0cmluZycsICdjb29yZGluYXRlcyc6IG51bGx9LFxuICAgICAgICAgICAgICAgICd0eXBlJzogJ0ZlYXR1cmUnLCAncHJvcGVydGllcyc6IHRoaXMucHJvcGVydGllc1xuICAgICAgICAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2VvbWV0cmllcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHsnZ2VvbWV0cnknOiB7J3R5cGUnOiAnTGluZVN0cmluZycsICdjb29yZGluYXRlcyc6IHRoaXMuZ2VvbWV0cmllc1swXS5jb29yZHN9LFxuICAgICAgICAgICAgICAgICd0eXBlJzogJ0ZlYXR1cmUnLCAncHJvcGVydGllcyc6IHRoaXMucHJvcGVydGllc1xuICAgICAgICAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbXVsdGlsaW5lID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5nZW9tZXRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBtdWx0aWxpbmUucHVzaCh0aGlzLmdlb21ldHJpZXNbaV0uY29vcmRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geydnZW9tZXRyeSc6IHsndHlwZSc6ICdNdWx0aUxpbmVTdHJpbmcnLCAnY29vcmRpbmF0ZXMnOiBtdWx0aWxpbmV9LFxuICAgICAgICAgICAgICAgICd0eXBlJzogJ0ZlYXR1cmUnLCAncHJvcGVydGllcyc6IHRoaXMucHJvcGVydGllc1xuICAgICAgICAgICAgICAgfTtcbiAgICB9XG59O1xuXG4vLyBUT0RPIC0gb3V0cHV0IHByb3BlciBtdWx0aWxpbmVzdHJpbmdcbkFyYy5wcm90b3R5cGUud2t0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3a3Rfc3RyaW5nID0gJyc7XG4gICAgdmFyIHdrdCA9ICdMSU5FU1RSSU5HKCc7XG4gICAgdmFyIGNvbGxlY3QgPSBmdW5jdGlvbiAoYykgeyB3a3QgKz0gY1swXSArICcgJyArIGNbMV0gKyAnLCc7IH07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdlb21ldHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuZ2VvbWV0cmllc1tpXS5jb29yZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0xJTkVTVFJJTkcoZW1wdHkpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb29yZHMgPSB0aGlzLmdlb21ldHJpZXNbaV0uY29vcmRzO1xuICAgICAgICAgICAgY29vcmRzLmZvckVhY2goY29sbGVjdCk7XG4gICAgICAgICAgICB3a3Rfc3RyaW5nICs9IHdrdC5zdWJzdHJpbmcoMCwgd2t0Lmxlbmd0aCAtIDEpICsgJyknO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB3a3Rfc3RyaW5nO1xufTtcblxuLypcbiAqIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3JlYXQtY2lyY2xlX2Rpc3RhbmNlXG4gKlxuICovXG52YXIgR3JlYXRDaXJjbGUgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgcHJvcGVydGllcykge1xuICAgIGlmICghc3RhcnQgfHwgc3RhcnQueCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0LnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dyZWF0Q2lyY2xlIGNvbnN0cnVjdG9yIGV4cGVjdHMgdHdvIGFyZ3M6IHN0YXJ0IGFuZCBlbmQgb2JqZWN0cyB3aXRoIHggYW5kIHkgcHJvcGVydGllcycpO1xuICAgIH1cbiAgICBpZiAoIWVuZCB8fCBlbmQueCA9PT0gdW5kZWZpbmVkIHx8IGVuZC55ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHcmVhdENpcmNsZSBjb25zdHJ1Y3RvciBleHBlY3RzIHR3byBhcmdzOiBzdGFydCBhbmQgZW5kIG9iamVjdHMgd2l0aCB4IGFuZCB5IHByb3BlcnRpZXMnKTtcbiAgICB9XG4gICAgdGhpcy5zdGFydCA9IG5ldyBDb29yZChzdGFydC54LCBzdGFydC55KTtcbiAgICB0aGlzLmVuZCA9IG5ldyBDb29yZChlbmQueCwgZW5kLnkpO1xuICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwge307XG5cbiAgICB2YXIgdyA9IHRoaXMuc3RhcnQueCAtIHRoaXMuZW5kLng7XG4gICAgdmFyIGggPSB0aGlzLnN0YXJ0LnkgLSB0aGlzLmVuZC55O1xuICAgIHZhciB6ID0gTWF0aC5wb3coTWF0aC5zaW4oaCAvIDIuMCksIDIpICtcbiAgICAgICAgICAgICAgICBNYXRoLmNvcyh0aGlzLnN0YXJ0LnkpICpcbiAgICAgICAgICAgICAgICAgICBNYXRoLmNvcyh0aGlzLmVuZC55KSAqXG4gICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhNYXRoLnNpbih3IC8gMi4wKSwgMik7XG4gICAgdGhpcy5nID0gMi4wICogTWF0aC5hc2luKE1hdGguc3FydCh6KSk7XG5cbiAgICBpZiAodGhpcy5nID09PSBNYXRoLlBJKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaXQgYXBwZWFycyAnICsgc3RhcnQudmlldygpICsgJyBhbmQgJyArIGVuZC52aWV3KCkgKyAnIGFyZSBcXCdhbnRpcG9kYWxcXCcsIGUuZyBkaWFtZXRyaWNhbGx5IG9wcG9zaXRlLCB0aHVzIHRoZXJlIGlzIG5vIHNpbmdsZSByb3V0ZSBidXQgcmF0aGVyIGluZmluaXRlJyk7XG4gICAgfSBlbHNlIGlmIChpc05hTih0aGlzLmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGNhbGN1bGF0ZSBncmVhdCBjaXJjbGUgYmV0d2VlbiAnICsgc3RhcnQgKyAnIGFuZCAnICsgZW5kKTtcbiAgICB9XG59O1xuXG4vKlxuICogaHR0cDovL3dpbGxpYW1zLmJlc3QudndoLm5ldC9hdmZvcm0uaHRtI0ludGVybWVkaWF0ZVxuICovXG5HcmVhdENpcmNsZS5wcm90b3R5cGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAoZikge1xuICAgIHZhciBBID0gTWF0aC5zaW4oKDEgLSBmKSAqIHRoaXMuZykgLyBNYXRoLnNpbih0aGlzLmcpO1xuICAgIHZhciBCID0gTWF0aC5zaW4oZiAqIHRoaXMuZykgLyBNYXRoLnNpbih0aGlzLmcpO1xuICAgIHZhciB4ID0gQSAqIE1hdGguY29zKHRoaXMuc3RhcnQueSkgKiBNYXRoLmNvcyh0aGlzLnN0YXJ0LngpICsgQiAqIE1hdGguY29zKHRoaXMuZW5kLnkpICogTWF0aC5jb3ModGhpcy5lbmQueCk7XG4gICAgdmFyIHkgPSBBICogTWF0aC5jb3ModGhpcy5zdGFydC55KSAqIE1hdGguc2luKHRoaXMuc3RhcnQueCkgKyBCICogTWF0aC5jb3ModGhpcy5lbmQueSkgKiBNYXRoLnNpbih0aGlzLmVuZC54KTtcbiAgICB2YXIgeiA9IEEgKiBNYXRoLnNpbih0aGlzLnN0YXJ0LnkpICsgQiAqIE1hdGguc2luKHRoaXMuZW5kLnkpO1xuICAgIHZhciBsYXQgPSBSMkQgKiBNYXRoLmF0YW4yKHosIE1hdGguc3FydChNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpKSk7XG4gICAgdmFyIGxvbiA9IFIyRCAqIE1hdGguYXRhbjIoeSwgeCk7XG4gICAgcmV0dXJuIFtsb24sIGxhdF07XG59O1xuXG5cblxuLypcbiAqIEdlbmVyYXRlIHBvaW50cyBhbG9uZyB0aGUgZ3JlYXQgY2lyY2xlXG4gKi9cbkdyZWF0Q2lyY2xlLnByb3RvdHlwZS5BcmMgPSBmdW5jdGlvbiAobnBvaW50cywgb3B0aW9ucykge1xuICAgIHZhciBmaXJzdF9wYXNzID0gW107XG4gICAgaWYgKCFucG9pbnRzIHx8IG5wb2ludHMgPD0gMikge1xuICAgICAgICBmaXJzdF9wYXNzLnB1c2goW3RoaXMuc3RhcnQubG9uLCB0aGlzLnN0YXJ0LmxhdF0pO1xuICAgICAgICBmaXJzdF9wYXNzLnB1c2goW3RoaXMuZW5kLmxvbiwgdGhpcy5lbmQubGF0XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRlbHRhID0gMS4wIC8gKG5wb2ludHMgLSAxKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBucG9pbnRzOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBzdGVwID0gZGVsdGEgKiBpO1xuICAgICAgICAgICAgdmFyIHBhaXIgPSB0aGlzLmludGVycG9sYXRlKHN0ZXApO1xuICAgICAgICAgICAgZmlyc3RfcGFzcy5wdXNoKHBhaXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qIHBhcnRpYWwgcG9ydCBvZiBkYXRlbGluZSBoYW5kbGluZyBmcm9tOlxuICAgICAgZ2RhbC9vZ3Ivb2dyZ2VvbWV0cnlmYWN0b3J5LmNwcFxuXG4gICAgICBUT0RPIC0gZG9lcyBub3QgaGFuZGxlIGFsbCB3cmFwcGluZyBzY2VuYXJpb3MgeWV0XG4gICAgKi9cbiAgICB2YXIgYkhhc0JpZ0RpZmYgPSBmYWxzZTtcbiAgICB2YXIgZGZNYXhTbWFsbERpZmZMb25nID0gMDtcbiAgICAvLyBmcm9tIGh0dHA6Ly93d3cuZ2RhbC5vcmcvb2dyMm9nci5odG1sXG4gICAgLy8gLWRhdGVsaW5lb2Zmc2V0OlxuICAgIC8vIChzdGFydGluZyB3aXRoIEdEQUwgMS4xMCkgb2Zmc2V0IGZyb20gZGF0ZWxpbmUgaW4gZGVncmVlcyAoZGVmYXVsdCBsb25nLiA9ICsvLSAxMGRlZywgZ2VvbWV0cmllcyB3aXRoaW4gMTcwZGVnIHRvIC0xNzBkZWcgd2lsbCBiZSBzcGxpdGVkKVxuICAgIHZhciBkZkRhdGVMaW5lT2Zmc2V0ID0gb3B0aW9ucyAmJiBvcHRpb25zLm9mZnNldCA/IG9wdGlvbnMub2Zmc2V0IDogMTA7XG4gICAgdmFyIGRmTGVmdEJvcmRlclggPSAxODAgLSBkZkRhdGVMaW5lT2Zmc2V0O1xuICAgIHZhciBkZlJpZ2h0Qm9yZGVyWCA9IC0xODAgKyBkZkRhdGVMaW5lT2Zmc2V0O1xuICAgIHZhciBkZkRpZmZTcGFjZSA9IDM2MCAtIGRmRGF0ZUxpbmVPZmZzZXQ7XG5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vT1NHZW8vZ2RhbC9ibG9iLzdiZmI5YzQ1MmE1OWFhYzk1OGJmZjBjODM4NmI4OTFlZGY4MTU0Y2EvZ2RhbC9vZ3Ivb2dyZ2VvbWV0cnlmYWN0b3J5LmNwcCNMMjM0MlxuICAgIGZvciAodmFyIGogPSAxOyBqIDwgZmlyc3RfcGFzcy5sZW5ndGg7ICsraikge1xuICAgICAgICB2YXIgZGZQcmV2WCA9IGZpcnN0X3Bhc3NbaiAtIDFdWzBdO1xuICAgICAgICB2YXIgZGZYID0gZmlyc3RfcGFzc1tqXVswXTtcbiAgICAgICAgdmFyIGRmRGlmZkxvbmcgPSBNYXRoLmFicyhkZlggLSBkZlByZXZYKTtcbiAgICAgICAgaWYgKGRmRGlmZkxvbmcgPiBkZkRpZmZTcGFjZSAmJlxuICAgICAgICAgICAgKChkZlggPiBkZkxlZnRCb3JkZXJYICYmIGRmUHJldlggPCBkZlJpZ2h0Qm9yZGVyWCkgfHwgKGRmUHJldlggPiBkZkxlZnRCb3JkZXJYICYmIGRmWCA8IGRmUmlnaHRCb3JkZXJYKSkpIHtcbiAgICAgICAgICAgIGJIYXNCaWdEaWZmID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChkZkRpZmZMb25nID4gZGZNYXhTbWFsbERpZmZMb25nKSB7XG4gICAgICAgICAgICBkZk1heFNtYWxsRGlmZkxvbmcgPSBkZkRpZmZMb25nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBvTXVsdGkgPSBbXTtcbiAgICBpZiAoYkhhc0JpZ0RpZmYgJiYgZGZNYXhTbWFsbERpZmZMb25nIDwgZGZEYXRlTGluZU9mZnNldCkge1xuICAgICAgICB2YXIgcG9OZXdMUyA9IFtdO1xuICAgICAgICBwb011bHRpLnB1c2gocG9OZXdMUyk7XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZmlyc3RfcGFzcy5sZW5ndGg7ICsraykge1xuICAgICAgICAgICAgdmFyIGRmWDAgPSBwYXJzZUZsb2F0KGZpcnN0X3Bhc3Nba11bMF0pO1xuICAgICAgICAgICAgaWYgKGsgPiAwICYmICBNYXRoLmFicyhkZlgwIC0gZmlyc3RfcGFzc1trIC0gMV1bMF0pID4gZGZEaWZmU3BhY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGZYMSA9IHBhcnNlRmxvYXQoZmlyc3RfcGFzc1trIC0gMV1bMF0pO1xuICAgICAgICAgICAgICAgIHZhciBkZlkxID0gcGFyc2VGbG9hdChmaXJzdF9wYXNzW2sgLSAxXVsxXSk7XG4gICAgICAgICAgICAgICAgdmFyIGRmWDIgPSBwYXJzZUZsb2F0KGZpcnN0X3Bhc3Nba11bMF0pO1xuICAgICAgICAgICAgICAgIHZhciBkZlkyID0gcGFyc2VGbG9hdChmaXJzdF9wYXNzW2tdWzFdKTtcbiAgICAgICAgICAgICAgICBpZiAoZGZYMSA+IC0xODAgJiYgZGZYMSA8IGRmUmlnaHRCb3JkZXJYICYmIGRmWDIgPT09IDE4MCAmJlxuICAgICAgICAgICAgICAgICAgICBrICsgMSA8IGZpcnN0X3Bhc3MubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgZmlyc3RfcGFzc1trIC0gMV1bMF0gPiAtMTgwICYmIGZpcnN0X3Bhc3NbayAtIDFdWzBdIDwgZGZSaWdodEJvcmRlclgpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9OZXdMUy5wdXNoKFstMTgwLCBmaXJzdF9wYXNzW2tdWzFdXSk7XG4gICAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgICAgcG9OZXdMUy5wdXNoKFtmaXJzdF9wYXNzW2tdWzBdLCBmaXJzdF9wYXNzW2tdWzFdXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGZYMSA+IGRmTGVmdEJvcmRlclggJiYgZGZYMSA8IDE4MCAmJiBkZlgyID09PSAtMTgwICYmXG4gICAgICAgICAgICAgICAgICAgICBrICsgMSA8IGZpcnN0X3Bhc3MubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICBmaXJzdF9wYXNzW2sgLSAxXVswXSA+IGRmTGVmdEJvcmRlclggJiYgZmlyc3RfcGFzc1trIC0gMV1bMF0gPCAxODApIHtcbiAgICAgICAgICAgICAgICAgICAgcG9OZXdMUy5wdXNoKFsxODAsIGZpcnN0X3Bhc3Nba11bMV1dKTtcbiAgICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgICBwb05ld0xTLnB1c2goW2ZpcnN0X3Bhc3Nba11bMF0sIGZpcnN0X3Bhc3Nba11bMV1dKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGRmWDEgPCBkZlJpZ2h0Qm9yZGVyWCAmJiBkZlgyID4gZGZMZWZ0Qm9yZGVyWCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzd2FwIGRmWDEsIGRmWDJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcFggPSBkZlgxO1xuICAgICAgICAgICAgICAgICAgICBkZlgxID0gZGZYMjtcbiAgICAgICAgICAgICAgICAgICAgZGZYMiA9IHRtcFg7XG4gICAgICAgICAgICAgICAgICAgIC8vIHN3YXAgZGZZMSwgZGZZMlxuICAgICAgICAgICAgICAgICAgICB2YXIgdG1wWSA9IGRmWTE7XG4gICAgICAgICAgICAgICAgICAgIGRmWTEgPSBkZlkyO1xuICAgICAgICAgICAgICAgICAgICBkZlkyID0gdG1wWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRmWDEgPiBkZkxlZnRCb3JkZXJYICYmIGRmWDIgPCBkZlJpZ2h0Qm9yZGVyWCkge1xuICAgICAgICAgICAgICAgICAgICBkZlgyICs9IDM2MDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRmWDEgPD0gMTgwICYmIGRmWDIgPj0gMTgwICYmIGRmWDEgPCBkZlgyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZlJhdGlvID0gKDE4MCAtIGRmWDEpIC8gKGRmWDIgLSBkZlgxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRmWSA9IGRmUmF0aW8gKiBkZlkyICsgKDEgLSBkZlJhdGlvKSAqIGRmWTE7XG4gICAgICAgICAgICAgICAgICAgIHBvTmV3TFMucHVzaChbZmlyc3RfcGFzc1trIC0gMV1bMF0gPiBkZkxlZnRCb3JkZXJYID8gMTgwIDogLTE4MCwgZGZZXSk7XG4gICAgICAgICAgICAgICAgICAgIHBvTmV3TFMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgcG9OZXdMUy5wdXNoKFtmaXJzdF9wYXNzW2sgLSAxXVswXSA+IGRmTGVmdEJvcmRlclggPyAtMTgwIDogMTgwLCBkZlldKTtcbiAgICAgICAgICAgICAgICAgICAgcG9NdWx0aS5wdXNoKHBvTmV3TFMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvTmV3TFMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgcG9NdWx0aS5wdXNoKHBvTmV3TFMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb05ld0xTLnB1c2goW2RmWDAsIGZpcnN0X3Bhc3Nba11bMV1dKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9OZXdMUy5wdXNoKFtmaXJzdF9wYXNzW2tdWzBdLCBmaXJzdF9wYXNzW2tdWzFdXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhZGQgbm9ybWFsbHlcbiAgICAgICAgdmFyIHBvTmV3TFMwID0gW107XG4gICAgICAgIHBvTXVsdGkucHVzaChwb05ld0xTMCk7XG4gICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgZmlyc3RfcGFzcy5sZW5ndGg7ICsrbCkge1xuICAgICAgICAgICAgcG9OZXdMUzAucHVzaChbZmlyc3RfcGFzc1tsXVswXSwgZmlyc3RfcGFzc1tsXVsxXV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFyYyA9IG5ldyBBcmModGhpcy5wcm9wZXJ0aWVzKTtcbiAgICBmb3IgKHZhciBtID0gMDsgbSA8IHBvTXVsdGkubGVuZ3RoOyArK20pIHtcbiAgICAgICAgdmFyIGxpbmUgPSBuZXcgTGluZVN0cmluZygpO1xuICAgICAgICBhcmMuZ2VvbWV0cmllcy5wdXNoKGxpbmUpO1xuICAgICAgICB2YXIgcG9pbnRzID0gcG9NdWx0aVttXTtcbiAgICAgICAgZm9yICh2YXIgajAgPSAwOyBqMCA8IHBvaW50cy5sZW5ndGg7ICsrajApIHtcbiAgICAgICAgICAgIGxpbmUubW92ZV90byhwb2ludHNbajBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJjO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQ29vcmQ6IENvb3JkLFxuICAgIEFyYzogQXJjLFxuICAgIEdyZWF0Q2lyY2xlOiBHcmVhdENpcmNsZVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2dyZWF0LWNpcmNsZS9hcmMuanNcbi8vIG1vZHVsZSBpZCA9IDIxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKTtcbnZhciByYnVzaCA9IHJlcXVpcmUoJ2dlb2pzb24tcmJ1c2gnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGZsYXR0ZW4gPSByZXF1aXJlKCdAdHVyZi9mbGF0dGVuJyk7XG52YXIgdHJ1bmNhdGUgPSByZXF1aXJlKCdAdHVyZi90cnVuY2F0ZScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpO1xudmFyIGxpbmVTZWdtZW50ID0gcmVxdWlyZSgnQHR1cmYvbGluZS1zZWdtZW50Jyk7XG52YXIgcG9pbnRPbkxpbmUgPSByZXF1aXJlKCdAdHVyZi9wb2ludC1vbi1saW5lJyk7XG52YXIgbGluZUludGVyc2VjdCA9IHJlcXVpcmUoJ0B0dXJmL2xpbmUtaW50ZXJzZWN0Jyk7XG52YXIgZ2V0Q29vcmRzID0gaW52YXJpYW50LmdldENvb3JkcztcbnZhciBsaW5lU3RyaW5nID0gaGVscGVycy5saW5lU3RyaW5nO1xudmFyIGdldEdlb21UeXBlID0gaW52YXJpYW50LmdldEdlb21UeXBlO1xudmFyIGZlYXR1cmVFYWNoID0gbWV0YS5mZWF0dXJlRWFjaDtcbnZhciBmZWF0dXJlUmVkdWNlID0gbWV0YS5mZWF0dXJlUmVkdWNlO1xudmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbjtcblxuLyoqXG4gKiBTcGxpdCBhIExpbmVTdHJpbmcgYnkgYW5vdGhlciBHZW9KU09OIEZlYXR1cmUuXG4gKlxuICogQG5hbWUgbGluZVNwbGl0XG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IGxpbmUgTGluZVN0cmluZyBGZWF0dXJlIHRvIHNwbGl0XG4gKiBAcGFyYW0ge0ZlYXR1cmV9IHNwbGl0dGVyIEZlYXR1cmUgdXNlZCB0byBzcGxpdCBsaW5lXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248TGluZVN0cmluZz59IFNwbGl0IExpbmVTdHJpbmdzXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1sxMjAsIC0yNV0sIFsxNDUsIC0yNV1dKTtcbiAqIHZhciBzcGxpdHRlciA9IHR1cmYubGluZVN0cmluZyhbWzEzMCwgLTE1XSwgWzEzMCwgLTM1XV0pO1xuICpcbiAqIHZhciBzcGxpdCA9IHR1cmYubGluZVNwbGl0KGxpbmUsIHNwbGl0dGVyKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbbGluZSwgc3BsaXR0ZXJdXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpbmUsIHNwbGl0dGVyKSB7XG4gICAgaWYgKCFsaW5lKSB0aHJvdyBuZXcgRXJyb3IoJ2xpbmUgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIXNwbGl0dGVyKSB0aHJvdyBuZXcgRXJyb3IoJ3NwbGl0dGVyIGlzIHJlcXVpcmVkJyk7XG5cbiAgICB2YXIgbGluZVR5cGUgPSBnZXRHZW9tVHlwZShsaW5lKTtcbiAgICB2YXIgc3BsaXR0ZXJUeXBlID0gZ2V0R2VvbVR5cGUoc3BsaXR0ZXIpO1xuXG4gICAgaWYgKGxpbmVUeXBlICE9PSAnTGluZVN0cmluZycpIHRocm93IG5ldyBFcnJvcignbGluZSBtdXN0IGJlIExpbmVTdHJpbmcnKTtcbiAgICBpZiAoc3BsaXR0ZXJUeXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ3NwbGl0dGVyIGNhbm5vdCBiZSBhIEZlYXR1cmVDb2xsZWN0aW9uJyk7XG4gICAgaWYgKHNwbGl0dGVyVHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbicpIHRocm93IG5ldyBFcnJvcignc3BsaXR0ZXIgY2Fubm90IGJlIGEgR2VvbWV0cnlDb2xsZWN0aW9uJyk7XG5cbiAgICAvLyByZW1vdmUgZXhjZXNzaXZlIGRlY2ltYWxzIGZyb20gc3BsaXR0ZXJcbiAgICAvLyB0byBhdm9pZCBwb3NzaWJsZSBhcHByb3hpbWF0aW9uIGlzc3VlcyBpbiByYnVzaFxuICAgIHZhciB0cnVuY2F0ZWRTcGxpdHRlciA9IHRydW5jYXRlKHNwbGl0dGVyLCA3KTtcblxuICAgIHN3aXRjaCAoc3BsaXR0ZXJUeXBlKSB7XG4gICAgY2FzZSAnUG9pbnQnOlxuICAgICAgICByZXR1cm4gc3BsaXRMaW5lV2l0aFBvaW50KGxpbmUsIHRydW5jYXRlZFNwbGl0dGVyKTtcbiAgICBjYXNlICdNdWx0aVBvaW50JzpcbiAgICAgICAgcmV0dXJuIHNwbGl0TGluZVdpdGhQb2ludHMobGluZSwgZmxhdHRlbih0cnVuY2F0ZWRTcGxpdHRlcikpO1xuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6XG4gICAgY2FzZSAnUG9seWdvbic6XG4gICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgcmV0dXJuIHNwbGl0TGluZVdpdGhQb2ludHMobGluZSwgbGluZUludGVyc2VjdChsaW5lLCB0cnVuY2F0ZWRTcGxpdHRlcikpO1xuICAgIH1cbn07XG5cbi8qKlxuICogU3BsaXQgTGluZVN0cmluZyB3aXRoIE11bHRpUG9pbnRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBsaW5lIExpbmVTdHJpbmdcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBzcGxpdHRlciBQb2ludFxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPExpbmVTdHJpbmc+fSBzcGxpdCBMaW5lU3RyaW5nc1xuICovXG5mdW5jdGlvbiBzcGxpdExpbmVXaXRoUG9pbnRzKGxpbmUsIHNwbGl0dGVyKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgdHJlZSA9IHJidXNoKCk7XG5cbiAgICBmZWF0dXJlRWFjaChzcGxpdHRlciwgZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIC8vIEFkZCBpbmRleC9pZCB0byBmZWF0dXJlcyAobmVlZGVkIGZvciBmaWx0ZXIpXG4gICAgICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGZlYXR1cmUuaWQgPSBpbmRleDtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZpcnN0IFBvaW50IC0gZG9lc24ndCBuZWVkIHRvIGhhbmRsZSBhbnkgcHJldmlvdXMgbGluZSByZXN1bHRzXG4gICAgICAgIGlmICghcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSBzcGxpdExpbmVXaXRoUG9pbnQobGluZSwgcG9pbnQpLmZlYXR1cmVzO1xuICAgICAgICAgICAgdHJlZS5sb2FkKGZlYXR1cmVDb2xsZWN0aW9uKHJlc3VsdHMpKTtcbiAgICAgICAgLy8gU3BsaXQgd2l0aCByZW1haW5pbmcgcG9pbnRzIC0gbGluZXMgbWlnaHQgbmVlZGVkIHRvIGJlIHNwbGl0IG11bHRpcGxlIHRpbWVzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaW5kIGFsbCBsaW5lcyB0aGF0IGFyZSB3aXRoaW4gdGhlIHNwbGl0dGVyJ3MgYmJveFxuICAgICAgICAgICAgdmFyIHNlYXJjaCA9IHRyZWUuc2VhcmNoKHBvaW50KTtcblxuICAgICAgICAgICAgLy8gUkJ1c2ggbWlnaHQgcmV0dXJuIG11bHRpcGxlIGxpbmVzIC0gb25seSBwcm9jZXNzIHRoZSBjbG9zZXN0IGxpbmUgdG8gc3BsaXR0ZXJcbiAgICAgICAgICAgIHZhciBjbG9zZXN0TGluZSA9IGZpbmRDbG9zZXN0RmVhdHVyZShwb2ludCwgc2VhcmNoKTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGNsb3Nlc3QgbGluZSBmcm9tIHJlc3VsdHMgc2luY2UgdGhpcyB3aWxsIGJlIHNwbGl0IGludG8gdHdvIGxpbmVzXG4gICAgICAgICAgICAvLyBUaGlzIHJlbW92ZXMgYW55IGR1cGxpY2F0ZXMgaW5zaWRlIHRoZSByZXN1bHRzICYgaW5kZXhcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAoZmVhdHVyZSkgeyByZXR1cm4gZmVhdHVyZS5pZCAhPT0gY2xvc2VzdExpbmUuaWQ7IH0pO1xuICAgICAgICAgICAgdHJlZS5yZW1vdmUoY2xvc2VzdExpbmUpO1xuXG4gICAgICAgICAgICAvLyBBcHBlbmQgdGhlIHR3byBuZXdseSBzcGxpdCBsaW5lcyBpbnRvIHRoZSByZXN1bHRzXG4gICAgICAgICAgICBmZWF0dXJlRWFjaChzcGxpdExpbmVXaXRoUG9pbnQoY2xvc2VzdExpbmUsIHBvaW50KSwgZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobGluZSk7XG4gICAgICAgICAgICAgICAgdHJlZS5pbnNlcnQobGluZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihyZXN1bHRzKTtcbn1cblxuLyoqXG4gKiBTcGxpdCBMaW5lU3RyaW5nIHdpdGggUG9pbnRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBsaW5lIExpbmVTdHJpbmdcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2ludD59IHNwbGl0dGVyIFBvaW50XG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248TGluZVN0cmluZz59IHNwbGl0IExpbmVTdHJpbmdzXG4gKi9cbmZ1bmN0aW9uIHNwbGl0TGluZVdpdGhQb2ludChsaW5lLCBzcGxpdHRlcikge1xuICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICAvLyBoYW5kbGUgZW5kcG9pbnRzXG4gICAgdmFyIHN0YXJ0UG9pbnQgPSBnZXRDb29yZHMobGluZSlbMF07XG4gICAgdmFyIGVuZFBvaW50ID0gZ2V0Q29vcmRzKGxpbmUpW2xpbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKHBvaW50c0VxdWFscyhzdGFydFBvaW50LCBnZXRDb29yZHMoc3BsaXR0ZXIpKSB8fFxuICAgICAgICBwb2ludHNFcXVhbHMoZW5kUG9pbnQsIGdldENvb3JkcyhzcGxpdHRlcikpKSByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24oW2xpbmVdKTtcblxuICAgIC8vIENyZWF0ZSBzcGF0aWFsIGluZGV4XG4gICAgdmFyIHRyZWUgPSByYnVzaCgpO1xuICAgIHZhciBzZWdtZW50cyA9IGxpbmVTZWdtZW50KGxpbmUpO1xuICAgIHRyZWUubG9hZChzZWdtZW50cyk7XG5cbiAgICAvLyBGaW5kIGFsbCBzZWdtZW50cyB0aGF0IGFyZSB3aXRoaW4gYmJveCBvZiBzcGxpdHRlclxuICAgIHZhciBzZWFyY2ggPSB0cmVlLnNlYXJjaChzcGxpdHRlcik7XG5cbiAgICAvLyBSZXR1cm4gaXRzZWxmIGlmIHBvaW50IGlzIG5vdCB3aXRoaW4gc3BhdGlhbCBpbmRleFxuICAgIGlmICghc2VhcmNoLmZlYXR1cmVzLmxlbmd0aCkgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uKFtsaW5lXSk7XG5cbiAgICAvLyBSQnVzaCBtaWdodCByZXR1cm4gbXVsdGlwbGUgbGluZXMgLSBvbmx5IHByb2Nlc3MgdGhlIGNsb3Nlc3QgbGluZSB0byBzcGxpdHRlclxuICAgIHZhciBjbG9zZXN0U2VnbWVudCA9IGZpbmRDbG9zZXN0RmVhdHVyZShzcGxpdHRlciwgc2VhcmNoKTtcblxuICAgIC8vIEluaXRpYWwgdmFsdWUgaXMgdGhlIGZpcnN0IHBvaW50IG9mIHRoZSBmaXJzdCBzZWdtZW50cyAoYmVnaW5uaW5nIG9mIGxpbmUpXG4gICAgdmFyIGluaXRpYWxWYWx1ZSA9IFtzdGFydFBvaW50XTtcbiAgICB2YXIgbGFzdENvb3JkcyA9IGZlYXR1cmVSZWR1Y2Uoc2VnbWVudHMsIGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRDb29yZHMgPSBnZXRDb29yZHMoY3VycmVudClbMV07XG4gICAgICAgIHZhciBzcGxpdHRlckNvb3JkcyA9IGdldENvb3JkcyhzcGxpdHRlcik7XG5cbiAgICAgICAgLy8gTG9jYXRpb24gd2hlcmUgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggbGluZVxuICAgICAgICBpZiAoaW5kZXggPT09IGNsb3Nlc3RTZWdtZW50LmlkKSB7XG4gICAgICAgICAgICBwcmV2aW91cy5wdXNoKHNwbGl0dGVyQ29vcmRzKTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChsaW5lU3RyaW5nKHByZXZpb3VzKSk7XG4gICAgICAgICAgICAvLyBEb24ndCBkdXBsaWNhdGUgc3BsaXR0ZXIgY29vcmRpbmF0ZSAoSXNzdWUgIzY4OClcbiAgICAgICAgICAgIGlmIChwb2ludHNFcXVhbHMoc3BsaXR0ZXJDb29yZHMsIGN1cnJlbnRDb29yZHMpKSByZXR1cm4gW3NwbGl0dGVyQ29vcmRzXTtcbiAgICAgICAgICAgIHJldHVybiBbc3BsaXR0ZXJDb29yZHMsIGN1cnJlbnRDb29yZHNdO1xuXG4gICAgICAgIC8vIEtlZXAgaXRlcmF0aW5nIG92ZXIgY29vcmRzIHVudGlsIGZpbmlzaGVkIG9yIGludGVyc2VjdGlvbiBpcyBmb3VuZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldmlvdXMucHVzaChjdXJyZW50Q29vcmRzKTtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91cztcbiAgICAgICAgfVxuICAgIH0sIGluaXRpYWxWYWx1ZSk7XG4gICAgLy8gQXBwZW5kIGxhc3QgbGluZSB0byBmaW5hbCBzcGxpdCByZXN1bHRzXG4gICAgaWYgKGxhc3RDb29yZHMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXN1bHRzLnB1c2gobGluZVN0cmluZyhsYXN0Q29vcmRzKSk7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihyZXN1bHRzKTtcbn1cblxuXG4vKipcbiAqIEZpbmQgQ2xvc2VzdCBGZWF0dXJlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2ludD59IHBvaW50IEZlYXR1cmUgbXVzdCBiZSBjbG9zZXN0IHRvIHRoaXMgcG9pbnRcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248TGluZVN0cmluZz59IGxpbmVzIENvbGxlY3Rpb24gb2YgRmVhdHVyZXNcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmc+fSBjbG9zZXN0IExpbmVTdHJpbmdcbiAqL1xuZnVuY3Rpb24gZmluZENsb3Nlc3RGZWF0dXJlKHBvaW50LCBsaW5lcykge1xuICAgIGlmICghbGluZXMuZmVhdHVyZXMpIHRocm93IG5ldyBFcnJvcignPGxpbmVzPiBtdXN0IGNvbnRhaW4gZmVhdHVyZXMnKTtcbiAgICAvLyBGaWx0ZXIgdG8gb25lIHNlZ21lbnQgdGhhdCBpcyB0aGUgY2xvc2VzdCB0byB0aGUgbGluZVxuICAgIGlmIChsaW5lcy5mZWF0dXJlcy5sZW5ndGggPT09IDEpIHJldHVybiBsaW5lcy5mZWF0dXJlc1swXTtcblxuICAgIHZhciBjbG9zZXN0RmVhdHVyZTtcbiAgICB2YXIgY2xvc2VzdERpc3RhbmNlID0gSW5maW5pdHk7XG4gICAgZmVhdHVyZUVhY2gobGluZXMsIGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgICAgIHZhciBwdCA9IHBvaW50T25MaW5lKHNlZ21lbnQsIHBvaW50KTtcbiAgICAgICAgdmFyIGRpc3QgPSBwdC5wcm9wZXJ0aWVzLmRpc3Q7XG4gICAgICAgIGlmIChkaXN0IDwgY2xvc2VzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICBjbG9zZXN0RmVhdHVyZSA9IHNlZ21lbnQ7XG4gICAgICAgICAgICBjbG9zZXN0RGlzdGFuY2UgPSBkaXN0O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsb3Nlc3RGZWF0dXJlO1xufVxuXG4vKipcbiAqIENvbXBhcmVzIHR3byBwb2ludHMgYW5kIHJldHVybnMgaWYgdGhleSBhcmUgZXF1YWxzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcHQxIHBvaW50XG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHB0MiBwb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhleSBhcmUgZXF1YWxzXG4gKi9cbmZ1bmN0aW9uIHBvaW50c0VxdWFscyhwdDEsIHB0Mikge1xuICAgIHJldHVybiBwdDFbMF0gPT09IHB0MlswXSAmJiBwdDFbMV0gPT09IHB0MlsxXTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2xpbmUtc3BsaXQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmJveCA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gnKTtcbnZhciBnZXRDb29yZHMgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKS5nZXRDb29yZHM7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBwb2x5Z29uID0gaGVscGVycy5wb2x5Z29uO1xudmFyIG11bHRpUG9seWdvbiA9IGhlbHBlcnMubXVsdGlQb2x5Z29uO1xudmFyIGxpbmVTdHJpbmcgPSBoZWxwZXJzLmxpbmVTdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgKE11bHRpKUxpbmVTdHJpbmcocykgdG8gUG9seWdvbihzKS5cbiAqXG4gKiBAbmFtZSBsaW5lU3RyaW5nVG9Qb2x5Z29uXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmc+fSBsaW5lcyBGZWF0dXJlcyB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIHRyYW5zbGF0ZXMgR2VvSlNPTiBwcm9wZXJ0aWVzIHRvIEZlYXR1cmVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2F1dG9Db21wbGV0ZT10cnVlXSBhdXRvIGNvbXBsZXRlIGxpbmVzdHJpbmdzIChtYXRjaGVzIGZpcnN0ICYgbGFzdCBjb29yZGluYXRlcylcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29yZGVyQ29vcmRzPXRydWVdIHNvcnRzIGxpbmVzdHJpbmdzIHRvIHBsYWNlIG91dGVyIHJpbmcgYXQgdGhlIGZpcnN0IHBvc2l0aW9uIG9mIHRoZSBjb29yZGluYXRlc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbnxNdWx0aVBvbHlnb24+fSBjb252ZXJ0ZWQgdG8gUG9seWdvbnNcbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhbWzEyNSwgLTMwXSwgWzE0NSwgLTMwXSwgWzE0NSwgLTIwXSwgWzEyNSwgLTIwXSwgWzEyNSwgLTMwXV0pO1xuICpcbiAqIHZhciBwb2x5Z29uID0gdHVyZi5saW5lU3RyaW5nVG9Qb2x5Z29uKGxpbmUpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtwb2x5Z29uXTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGluZXMsIHByb3BlcnRpZXMsIGF1dG9Db21wbGV0ZSwgb3JkZXJDb29yZHMpIHtcbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKCFsaW5lcykgdGhyb3cgbmV3IEVycm9yKCdsaW5lcyBpcyByZXF1aXJlZCcpO1xuXG4gICAgLy8gZGVmYXVsdCBwYXJhbXNcbiAgICBhdXRvQ29tcGxldGUgPSAoYXV0b0NvbXBsZXRlICE9PSB1bmRlZmluZWQpID8gYXV0b0NvbXBsZXRlIDogdHJ1ZTtcbiAgICBvcmRlckNvb3JkcyA9IChvcmRlckNvb3JkcyAhPT0gdW5kZWZpbmVkKSA/IG9yZGVyQ29vcmRzIDogdHJ1ZTtcbiAgICB2YXIgdHlwZSA9IGdlb21UeXBlKGxpbmVzKTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0ZlYXR1cmVDb2xsZWN0aW9uJzpcbiAgICBjYXNlICdHZW9tZXRyeUNvbGxlY3Rpb24nOlxuICAgICAgICB2YXIgY29vcmRzID0gW107XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IChsaW5lcy5mZWF0dXJlcykgPyBsaW5lcy5mZWF0dXJlcyA6IGxpbmVzLmdlb21ldHJpZXM7XG4gICAgICAgIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgIGNvb3Jkcy5wdXNoKGdldENvb3JkcyhsaW5lU3RyaW5nVG9Qb2x5Z29uKGxpbmUsIHt9LCBhdXRvQ29tcGxldGUsIG9yZGVyQ29vcmRzKSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG11bHRpUG9seWdvbihjb29yZHMsIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgICByZXR1cm4gbGluZVN0cmluZ1RvUG9seWdvbihsaW5lcywgcHJvcGVydGllcywgYXV0b0NvbXBsZXRlLCBvcmRlckNvb3Jkcyk7XG59O1xuXG4vKipcbiAqIExpbmVTdHJpbmcgdG8gUG9seWdvblxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmc+fSBsaW5lIGxpbmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gdHJhbnNsYXRlcyBHZW9KU09OIHByb3BlcnRpZXMgdG8gRmVhdHVyZVxuICogQHBhcmFtIHtib29sZWFufSBbYXV0b0NvbXBsZXRlPXRydWVdIGF1dG8gY29tcGxldGUgbGluZXN0cmluZ3NcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29yZGVyQ29vcmRzPXRydWVdIHNvcnRzIGxpbmVzdHJpbmdzIHRvIHBsYWNlIG91dGVyIHJpbmcgYXQgdGhlIGZpcnN0IHBvc2l0aW9uIG9mIHRoZSBjb29yZGluYXRlc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbj59IGxpbmUgY29udmVydGVkIHRvIFBvbHlnb25cbiAqL1xuZnVuY3Rpb24gbGluZVN0cmluZ1RvUG9seWdvbihsaW5lLCBwcm9wZXJ0aWVzLCBhdXRvQ29tcGxldGUsIG9yZGVyQ29vcmRzKSB7XG4gICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwgbGluZS5wcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBjb29yZHMgPSBnZXRDb29yZHMobGluZSk7XG4gICAgdmFyIHR5cGUgPSBnZW9tVHlwZShsaW5lKTtcblxuICAgIGlmICghY29vcmRzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdsaW5lIG11c3QgY29udGFpbiBjb29yZGluYXRlcycpO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnTGluZVN0cmluZyc6XG4gICAgICAgIGlmIChhdXRvQ29tcGxldGUpIGNvb3JkcyA9IGF1dG9Db21wbGV0ZUNvb3Jkcyhjb29yZHMpO1xuICAgICAgICByZXR1cm4gcG9seWdvbihbY29vcmRzXSwgcHJvcGVydGllcyk7XG4gICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcbiAgICAgICAgdmFyIG11bHRpQ29vcmRzID0gW107XG4gICAgICAgIHZhciBsYXJnZXN0QXJlYSA9IDA7XG5cbiAgICAgICAgY29vcmRzLmZvckVhY2goZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgICAgICBpZiAoYXV0b0NvbXBsZXRlKSBjb29yZCA9IGF1dG9Db21wbGV0ZUNvb3Jkcyhjb29yZCk7XG5cbiAgICAgICAgICAgIC8vIExhcmdlc3QgTGluZVN0cmluZyB0byBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IHBvc2l0aW9uIG9mIHRoZSBjb29yZGluYXRlcyBhcnJheVxuICAgICAgICAgICAgaWYgKG9yZGVyQ29vcmRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZWEgPSBjYWxjdWxhdGVBcmVhKGJib3gobGluZVN0cmluZyhjb29yZCkpKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJlYSA+IGxhcmdlc3RBcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHRpQ29vcmRzLnVuc2hpZnQoY29vcmQpO1xuICAgICAgICAgICAgICAgICAgICBsYXJnZXN0QXJlYSA9IGFyZWE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIG11bHRpQ29vcmRzLnB1c2goY29vcmQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtdWx0aUNvb3Jkcy5wdXNoKGNvb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwb2x5Z29uKG11bHRpQ29vcmRzLCBwcm9wZXJ0aWVzKTtcbiAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dlb21ldHJ5IHR5cGUgJyArIHR5cGUgKyAnIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlb21UeXBlKGZlYXR1cmUpIHtcbiAgICByZXR1cm4gKGZlYXR1cmUuZ2VvbWV0cnkpID8gZmVhdHVyZS5nZW9tZXRyeS50eXBlIDogZmVhdHVyZS50eXBlO1xufVxuXG4vKipcbiAqIEF1dG8gQ29tcGxldGUgQ29vcmRzIC0gbWF0Y2hlcyBmaXJzdCAmIGxhc3QgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRzIENvb3JkaW5hdGVzXG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGF1dG8gY29tcGxldGVkIGNvb3JkaW5hdGVzXG4gKi9cbmZ1bmN0aW9uIGF1dG9Db21wbGV0ZUNvb3Jkcyhjb29yZHMpIHtcbiAgICB2YXIgZmlyc3QgPSBjb29yZHNbMF07XG4gICAgdmFyIHgxID0gZmlyc3RbMF07XG4gICAgdmFyIHkxID0gZmlyc3RbMV07XG4gICAgdmFyIGxhc3QgPSBjb29yZHNbY29vcmRzLmxlbmd0aCAtIDFdO1xuICAgIHZhciB4MiA9IGxhc3RbMF07XG4gICAgdmFyIHkyID0gbGFzdFsxXTtcbiAgICBpZiAoeDEgIT09IHgyIHx8IHkxICE9PSB5Mikge1xuICAgICAgICBjb29yZHMucHVzaChmaXJzdCk7XG4gICAgfVxuICAgIHJldHVybiBjb29yZHM7XG59XG5cbi8qKlxuICogYXJlYSAtIHF1aWNrIGFwcHJveGltYXRlIGFyZWEgY2FsY3VsYXRpb24gKHVzZWQgdG8gc29ydClcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXX0gYmJveCBCQm94IFt3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGhdXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB2ZXJ5IHF1aWNrIGFyZWEgY2FsY3VsYXRpb25cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQXJlYShiYm94KSB7XG4gICAgdmFyIHdlc3QgPSBiYm94WzBdO1xuICAgIHZhciBzb3V0aCA9IGJib3hbMV07XG4gICAgdmFyIGVhc3QgPSBiYm94WzJdO1xuICAgIHZhciBub3J0aCA9IGJib3hbM107XG4gICAgcmV0dXJuIE1hdGguYWJzKHdlc3QgLSBlYXN0KSAqIE1hdGguYWJzKHNvdXRoIC0gbm9ydGgpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvbGluZXN0cmluZy10by1wb2x5Z29uL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGhlbHBlcnMgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyk7XG52YXIgbGluZWNsaXAgPSByZXF1aXJlKCdsaW5lY2xpcCcpO1xudmFyIGdldENvb3JkcyA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpLmdldENvb3JkcztcbnZhciBsaW5lU3RyaW5nID0gaGVscGVycy5saW5lU3RyaW5nO1xudmFyIG11bHRpTGluZVN0cmluZyA9IGhlbHBlcnMubXVsdGlMaW5lU3RyaW5nO1xudmFyIHBvbHlnb24gPSBoZWxwZXJzLnBvbHlnb247XG52YXIgbXVsdGlQb2x5Z29uID0gaGVscGVycy5tdWx0aVBvbHlnb247XG5cbi8qKlxuICogVGFrZXMgYSB7QGxpbmsgRmVhdHVyZX0gYW5kIGEgYmJveCBhbmQgY2xpcHMgdGhlIGZlYXR1cmUgdG8gdGhlIGJib3ggdXNpbmcgW2xpbmVjbGlwXShodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L2xpbmVjbGlwKS5cbiAqIE1heSByZXN1bHQgaW4gZGVnZW5lcmF0ZSBlZGdlcyB3aGVuIGNsaXBwaW5nIFBvbHlnb25zLlxuICpcbiAqIEBuYW1lIGJib3hDbGlwXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmd8UG9seWdvbnxNdWx0aVBvbHlnb24+fSBmZWF0dXJlIGZlYXR1cmUgdG8gY2xpcCB0byB0aGUgYmJveFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBiYm94IGV4dGVudCBpbiBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0gb3JkZXJcbiAqIEByZXR1cm5zIHtGZWF0dXJlPExpbmVTdHJpbmd8TXVsdGlMaW5lU3RyaW5nfFBvbHlnb258TXVsdGlQb2x5Z29uPn0gY2xpcHBlZCBGZWF0dXJlXG4gKiBAZXhhbXBsZVxuICogdmFyIGJib3ggPSBbMCwgMCwgMTAsIDEwXTtcbiAqIHZhciBwb2x5ID0gdHVyZi5wb2x5Z29uKFtbWzIsIDJdLCBbOCwgNF0sIFsxMiwgOF0sIFszLCA3XSwgWzIsIDJdXV0pO1xuICpcbiAqIHZhciBjbGlwcGVkID0gdHVyZi5iYm94Q2xpcChwb2x5LCBiYm94KTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbYmJveCwgcG9seSwgY2xpcHBlZF1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZmVhdHVyZSwgYmJveCkge1xuICAgIHZhciBnZW9tID0gZ2V0R2VvbShmZWF0dXJlKTtcbiAgICB2YXIgY29vcmRzID0gZ2V0Q29vcmRzKGZlYXR1cmUpO1xuICAgIHZhciBwcm9wZXJ0aWVzID0gZmVhdHVyZS5wcm9wZXJ0aWVzO1xuXG4gICAgc3dpdGNoIChnZW9tKSB7XG4gICAgY2FzZSAnTGluZVN0cmluZyc6XG4gICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcbiAgICAgICAgdmFyIGxpbmVzID0gW107XG4gICAgICAgIGlmIChnZW9tID09PSAnTGluZVN0cmluZycpIGNvb3JkcyA9IFtjb29yZHNdO1xuICAgICAgICBjb29yZHMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICAgICAgbGluZWNsaXAobGluZSwgYmJveCwgbGluZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGxpbmVTdHJpbmcobGluZXNbMF0sIHByb3BlcnRpZXMpO1xuICAgICAgICByZXR1cm4gbXVsdGlMaW5lU3RyaW5nKGxpbmVzLCBwcm9wZXJ0aWVzKTtcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgcmV0dXJuIHBvbHlnb24oY2xpcFBvbHlnb24oY29vcmRzLCBiYm94KSwgcHJvcGVydGllcyk7XG4gICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgcmV0dXJuIG11bHRpUG9seWdvbihjb29yZHMubWFwKGZ1bmN0aW9uIChwb2x5Z29uKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpcFBvbHlnb24ocG9seWdvbiwgYmJveCk7XG4gICAgICAgIH0pLCBwcm9wZXJ0aWVzKTtcbiAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dlb21ldHJ5ICcgKyBnZW9tICsgJyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gY2xpcFBvbHlnb24ocmluZ3MsIGJib3gpIHtcbiAgICB2YXIgb3V0UmluZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjbGlwcGVkID0gbGluZWNsaXAucG9seWdvbihyaW5nc1tpXSwgYmJveCk7XG4gICAgICAgIGlmIChjbGlwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChjbGlwcGVkWzBdWzBdICE9PSBjbGlwcGVkW2NsaXBwZWQubGVuZ3RoIC0gMV1bMF0gfHwgY2xpcHBlZFswXVsxXSAhPT0gY2xpcHBlZFtjbGlwcGVkLmxlbmd0aCAtIDFdWzFdKSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlZC5wdXNoKGNsaXBwZWRbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0UmluZ3MucHVzaChjbGlwcGVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0UmluZ3M7XG59XG5cbmZ1bmN0aW9uIGdldEdlb20oZmVhdHVyZSkge1xuICAgIHJldHVybiAoZmVhdHVyZS5nZW9tZXRyeSkgPyBmZWF0dXJlLmdlb21ldHJ5LnR5cGUgOiBmZWF0dXJlLnR5cGU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9iYm94LWNsaXAvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbGluZWNsaXA7XG5cbmxpbmVjbGlwLnBvbHlsaW5lID0gbGluZWNsaXA7XG5saW5lY2xpcC5wb2x5Z29uID0gcG9seWdvbmNsaXA7XG5cblxuLy8gQ29oZW4tU3V0aGVybGFuZCBsaW5lIGNsaXBwaWduIGFsZ29yaXRobSwgYWRhcHRlZCB0byBlZmZpY2llbnRseVxuLy8gaGFuZGxlIHBvbHlsaW5lcyByYXRoZXIgdGhhbiBqdXN0IHNlZ21lbnRzXG5cbmZ1bmN0aW9uIGxpbmVjbGlwKHBvaW50cywgYmJveCwgcmVzdWx0KSB7XG5cbiAgICB2YXIgbGVuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgY29kZUEgPSBiaXRDb2RlKHBvaW50c1swXSwgYmJveCksXG4gICAgICAgIHBhcnQgPSBbXSxcbiAgICAgICAgaSwgYSwgYiwgY29kZUIsIGxhc3RDb2RlO1xuXG4gICAgaWYgKCFyZXN1bHQpIHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGEgPSBwb2ludHNbaSAtIDFdO1xuICAgICAgICBiID0gcG9pbnRzW2ldO1xuICAgICAgICBjb2RlQiA9IGxhc3RDb2RlID0gYml0Q29kZShiLCBiYm94KTtcblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuXG4gICAgICAgICAgICBpZiAoIShjb2RlQSB8IGNvZGVCKSkgeyAvLyBhY2NlcHRcbiAgICAgICAgICAgICAgICBwYXJ0LnB1c2goYSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29kZUIgIT09IGxhc3RDb2RlKSB7IC8vIHNlZ21lbnQgd2VudCBvdXRzaWRlXG4gICAgICAgICAgICAgICAgICAgIHBhcnQucHVzaChiKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IGxlbiAtIDEpIHsgLy8gc3RhcnQgYSBuZXcgbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wdXNoKGIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlQSAmIGNvZGVCKSB7IC8vIHRyaXZpYWwgcmVqZWN0XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZUEpIHsgLy8gYSBvdXRzaWRlLCBpbnRlcnNlY3Qgd2l0aCBjbGlwIGVkZ2VcbiAgICAgICAgICAgICAgICBhID0gaW50ZXJzZWN0KGEsIGIsIGNvZGVBLCBiYm94KTtcbiAgICAgICAgICAgICAgICBjb2RlQSA9IGJpdENvZGUoYSwgYmJveCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGIgb3V0c2lkZVxuICAgICAgICAgICAgICAgIGIgPSBpbnRlcnNlY3QoYSwgYiwgY29kZUIsIGJib3gpO1xuICAgICAgICAgICAgICAgIGNvZGVCID0gYml0Q29kZShiLCBiYm94KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvZGVBID0gbGFzdENvZGU7XG4gICAgfVxuXG4gICAgaWYgKHBhcnQubGVuZ3RoKSByZXN1bHQucHVzaChwYXJ0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIFN1dGhlcmxhbmQtSG9kZ2VtYW4gcG9seWdvbiBjbGlwcGluZyBhbGdvcml0aG1cblxuZnVuY3Rpb24gcG9seWdvbmNsaXAocG9pbnRzLCBiYm94KSB7XG5cbiAgICB2YXIgcmVzdWx0LCBlZGdlLCBwcmV2LCBwcmV2SW5zaWRlLCBpLCBwLCBpbnNpZGU7XG5cbiAgICAvLyBjbGlwIGFnYWluc3QgZWFjaCBzaWRlIG9mIHRoZSBjbGlwIHJlY3RhbmdsZVxuICAgIGZvciAoZWRnZSA9IDE7IGVkZ2UgPD0gODsgZWRnZSAqPSAyKSB7XG4gICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICBwcmV2ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgcHJldkluc2lkZSA9ICEoYml0Q29kZShwcmV2LCBiYm94KSAmIGVkZ2UpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHAgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBpbnNpZGUgPSAhKGJpdENvZGUocCwgYmJveCkgJiBlZGdlKTtcblxuICAgICAgICAgICAgLy8gaWYgc2VnbWVudCBnb2VzIHRocm91Z2ggdGhlIGNsaXAgd2luZG93LCBhZGQgYW4gaW50ZXJzZWN0aW9uXG4gICAgICAgICAgICBpZiAoaW5zaWRlICE9PSBwcmV2SW5zaWRlKSByZXN1bHQucHVzaChpbnRlcnNlY3QocHJldiwgcCwgZWRnZSwgYmJveCkpO1xuXG4gICAgICAgICAgICBpZiAoaW5zaWRlKSByZXN1bHQucHVzaChwKTsgLy8gYWRkIGEgcG9pbnQgaWYgaXQncyBpbnNpZGVcblxuICAgICAgICAgICAgcHJldiA9IHA7XG4gICAgICAgICAgICBwcmV2SW5zaWRlID0gaW5zaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9pbnRzID0gcmVzdWx0O1xuXG4gICAgICAgIGlmICghcG9pbnRzLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gaW50ZXJzZWN0IGEgc2VnbWVudCBhZ2FpbnN0IG9uZSBvZiB0aGUgNCBsaW5lcyB0aGF0IG1ha2UgdXAgdGhlIGJib3hcblxuZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIGVkZ2UsIGJib3gpIHtcbiAgICByZXR1cm4gZWRnZSAmIDggPyBbYVswXSArIChiWzBdIC0gYVswXSkgKiAoYmJveFszXSAtIGFbMV0pIC8gKGJbMV0gLSBhWzFdKSwgYmJveFszXV0gOiAvLyB0b3BcbiAgICAgICAgICAgZWRnZSAmIDQgPyBbYVswXSArIChiWzBdIC0gYVswXSkgKiAoYmJveFsxXSAtIGFbMV0pIC8gKGJbMV0gLSBhWzFdKSwgYmJveFsxXV0gOiAvLyBib3R0b21cbiAgICAgICAgICAgZWRnZSAmIDIgPyBbYmJveFsyXSwgYVsxXSArIChiWzFdIC0gYVsxXSkgKiAoYmJveFsyXSAtIGFbMF0pIC8gKGJbMF0gLSBhWzBdKV0gOiAvLyByaWdodFxuICAgICAgICAgICBlZGdlICYgMSA/IFtiYm94WzBdLCBhWzFdICsgKGJbMV0gLSBhWzFdKSAqIChiYm94WzBdIC0gYVswXSkgLyAoYlswXSAtIGFbMF0pXSA6IC8vIGxlZnRcbiAgICAgICAgICAgbnVsbDtcbn1cblxuLy8gYml0IGNvZGUgcmVmbGVjdHMgdGhlIHBvaW50IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBiYm94OlxuXG4vLyAgICAgICAgIGxlZnQgIG1pZCAgcmlnaHRcbi8vICAgIHRvcCAgMTAwMSAgMTAwMCAgMTAxMFxuLy8gICAgbWlkICAwMDAxICAwMDAwICAwMDEwXG4vLyBib3R0b20gIDAxMDEgIDAxMDAgIDAxMTBcblxuZnVuY3Rpb24gYml0Q29kZShwLCBiYm94KSB7XG4gICAgdmFyIGNvZGUgPSAwO1xuXG4gICAgaWYgKHBbMF0gPCBiYm94WzBdKSBjb2RlIHw9IDE7IC8vIGxlZnRcbiAgICBlbHNlIGlmIChwWzBdID4gYmJveFsyXSkgY29kZSB8PSAyOyAvLyByaWdodFxuXG4gICAgaWYgKHBbMV0gPCBiYm94WzFdKSBjb2RlIHw9IDQ7IC8vIGJvdHRvbVxuICAgIGVsc2UgaWYgKHBbMV0gPiBiYm94WzNdKSBjb2RlIHw9IDg7IC8vIHRvcFxuXG4gICAgcmV0dXJuIGNvZGU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9saW5lY2xpcC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBsaW5lU2VnbWVudCA9IHJlcXVpcmUoJ0B0dXJmL2xpbmUtc2VnbWVudCcpO1xudmFyIGdldENvb3JkcyA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpLmdldENvb3JkcztcbnZhciByYnVzaCA9IHJlcXVpcmUoJ2dlb2pzb24tcmJ1c2gnKTtcbnZhciBlcXVhbCA9IHJlcXVpcmUoJ2RlZXAtZXF1YWwnKTtcbnZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKS5mZWF0dXJlQ29sbGVjdGlvbjtcbnZhciBmZWF0dXJlRWFjaCA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5mZWF0dXJlRWFjaDtcblxuLyoqXG4gKiBUYWtlcyBhbnkgTGluZVN0cmluZyBvciBQb2x5Z29uIGFuZCByZXR1cm5zIHRoZSBvdmVybGFwcGluZyBsaW5lcyBiZXR3ZWVuIGJvdGggZmVhdHVyZXMuXG4gKlxuICogQG5hbWUgbGluZU92ZXJsYXBcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nfE11bHRpTGluZVN0cmluZ3xQb2x5Z29ufE11bHRpUG9seWdvbj59IGxpbmUxIGFueSBMaW5lU3RyaW5nIG9yIFBvbHlnb25cbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nfE11bHRpTGluZVN0cmluZ3xQb2x5Z29ufE11bHRpUG9seWdvbj59IGxpbmUyIGFueSBMaW5lU3RyaW5nIG9yIFBvbHlnb25cbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxMaW5lU3RyaW5nPn0gbGluZXMocykgdGhhdCBhcmUgb3ZlcmxhcHBpbmcgYmV0d2VlbiBib3RoIGZlYXR1cmVzXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUxID0gdHVyZi5saW5lU3RyaW5nKFtbMTE1LCAtMzVdLCBbMTI1LCAtMzBdLCBbMTM1LCAtMzBdLCBbMTQ1LCAtMzVdXSk7XG4gKiB2YXIgbGluZTIgPSB0dXJmLmxpbmVTdHJpbmcoW1sxMTUsIC0yNV0sIFsxMjUsIC0zMF0sIFsxMzUsIC0zMF0sIFsxNDUsIC0yNV1dKTtcbiAqXG4gKiB2YXIgb3ZlcmxhcHBpbmcgPSB0dXJmLmxpbmVPdmVybGFwKGxpbmUxLCBsaW5lMik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2xpbmUxLCBsaW5lMiwgb3ZlcmxhcHBpbmddXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpbmUxLCBsaW5lMikge1xuICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICAvLyBDcmVhdGUgU3BhdGlhbCBJbmRleFxuICAgIHZhciB0cmVlID0gcmJ1c2goKTtcbiAgICB0cmVlLmxvYWQobGluZVNlZ21lbnQobGluZTEpKTtcbiAgICB2YXIgb3ZlcmxhcHM7XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgbGluZSBzZWdtZW50c1xuICAgIGZlYXR1cmVFYWNoKGxpbmVTZWdtZW50KGxpbmUyKSwgZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgdmFyIGRvZXNPdmVybGFwcyA9IGZhbHNlO1xuICAgICAgICBmZWF0dXJlRWFjaCh0cmVlLnNlYXJjaChzZWdtZW50KSwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoZG9lc092ZXJsYXBzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb29yZHMxID0gZ2V0Q29vcmRzKHNlZ21lbnQpLnNvcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgY29vcmRzMiA9IGdldENvb3JkcyhtYXRjaCkuc29ydCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2VnbWVudCBvdmVybGFwcyBmZWF0dXJlXG4gICAgICAgICAgICAgICAgaWYgKGVxdWFsKGNvb3JkczEsIGNvb3JkczIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvZXNPdmVybGFwcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIE92ZXJsYXBzIGFscmVhZHkgZXhpc3RzIC0gb25seSBhcHBlbmQgbGFzdCBjb29yZGluYXRlIG9mIHNlZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJsYXBzKSBvdmVybGFwcyA9IGNvbmNhdFNlZ21lbnQob3ZlcmxhcHMsIHNlZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIG92ZXJsYXBzID0gc2VnbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBTZWdtZW50IGRvZXNuJ3Qgb3ZlcmxhcCAtIGFkZCBvdmVybGFwcyB0byByZXN1bHRzICYgcmVzZXRcbiAgICAgICAgaWYgKGRvZXNPdmVybGFwcyA9PT0gZmFsc2UgJiYgb3ZlcmxhcHMpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChvdmVybGFwcyk7XG4gICAgICAgICAgICBvdmVybGFwcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFkZCBsYXN0IHNlZ21lbnQgaWYgZXhpc3RzXG4gICAgaWYgKG92ZXJsYXBzKSByZXN1bHRzLnB1c2gob3ZlcmxhcHMpO1xuXG4gICAgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uKHJlc3VsdHMpO1xufTtcblxuXG4vKipcbiAqIENvbmNhdCBTZWdtZW50XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gbGluZSBMaW5lU3RyaW5nXG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IHNlZ21lbnQgMi12ZXJ0ZXggTGluZVN0cmluZ1xuICogQHJldHVybnMge0ZlYXR1cmU8TGluZVN0cmluZz59IGNvbmNhdCBsaW5lc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdFNlZ21lbnQobGluZSwgc2VnbWVudCkge1xuICAgIHZhciBjb29yZHMgPSBnZXRDb29yZHMoc2VnbWVudCk7XG4gICAgdmFyIGxpbmVDb29yZHMgPSBnZXRDb29yZHMobGluZSk7XG4gICAgdmFyIHN0YXJ0ID0gbGluZUNvb3Jkc1swXTtcbiAgICB2YXIgZW5kID0gbGluZUNvb3Jkc1tsaW5lQ29vcmRzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGVxdWFsKGNvb3Jkc1swXSwgc3RhcnQpKSB7XG4gICAgICAgIGxpbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMudW5zaGlmdChjb29yZHNbMV0pO1xuICAgIH0gZWxzZSBpZiAoZXF1YWwoY29vcmRzWzBdLCBlbmQpKSB7XG4gICAgICAgIGxpbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMucHVzaChjb29yZHNbMV0pO1xuICAgIH0gZWxzZSBpZiAoZXF1YWwoY29vcmRzWzFdLCBzdGFydCkpIHtcbiAgICAgICAgbGluZS5nZW9tZXRyeS5jb29yZGluYXRlcy51bnNoaWZ0KGNvb3Jkc1swXSk7XG4gICAgfSBlbHNlIGlmIChlcXVhbChjb29yZHNbMV0sIGVuZCkpIHtcbiAgICAgICAgbGluZS5nZW9tZXRyeS5jb29yZGluYXRlcy5wdXNoKGNvb3Jkc1swXSk7XG4gICAgfVxuICAgIHJldHVybiBsaW5lO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvbGluZS1vdmVybGFwL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nXG4gID8gT2JqZWN0LmtleXMgOiBzaGltO1xuXG5leHBvcnRzLnNoaW0gPSBzaGltO1xuZnVuY3Rpb24gc2hpbSAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvbGliL2tleXMuanNcbi8vIG1vZHVsZSBpZCA9IDIyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50cylcbn0pKCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPyBzdXBwb3J0ZWQgOiB1bnN1cHBvcnRlZDtcblxuZXhwb3J0cy5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQ7XG5mdW5jdGlvbiBzdXBwb3J0ZWQob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbmV4cG9ydHMudW5zdXBwb3J0ZWQgPSB1bnN1cHBvcnRlZDtcbmZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XG4gIHJldHVybiBvYmplY3QgJiZcbiAgICB0eXBlb2Ygb2JqZWN0ID09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnY2FsbGVlJykgJiZcbiAgICAhT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgJ2NhbGxlZScpIHx8XG4gICAgZmFsc2U7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9saWIvaXNfYXJndW1lbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGNpcmNsZSA9IHJlcXVpcmUoJ0B0dXJmL2NpcmNsZScpO1xudmFyIGNvb3JkRWFjaCA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5jb29yZEVhY2g7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBnZXRDb29yZHMgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKS5nZXRDb29yZHM7XG52YXIgcG9seWdvbiA9IGhlbHBlcnMucG9seWdvbjtcbnZhciBsaW5lQXJjID0gcmVxdWlyZSgnQHR1cmYvbGluZS1hcmMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2lyY3VsYXIgc2VjdG9yIG9mIGEgY2lyY2xlIG9mIGdpdmVuIHJhZGl1cyBhbmQgY2VudGVyIHtAbGluayBQb2ludH0sXG4gKiBiZXR3ZWVuIChjbG9ja3dpc2UpIGJlYXJpbmcxIGFuZCBiZWFyaW5nMjsgMCBiZWFyaW5nIGlzIE5vcnRoIG9mIGNlbnRlciBwb2ludCwgcG9zaXRpdmUgY2xvY2t3aXNlLlxuICpcbiAqIEBuYW1lIHNlY3RvclxuICogQHBhcmFtIHtGZWF0dXJlPFBvaW50Pn0gY2VudGVyIGNlbnRlciBwb2ludFxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyByYWRpdXMgb2YgdGhlIGNpcmNsZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlYXJpbmcxIGFuZ2xlLCBpbiBkZWNpbWFsIGRlZ3JlZXMsIG9mIHRoZSBmaXJzdCByYWRpdXMgb2YgdGhlIHNlY3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGJlYXJpbmcyIGFuZ2xlLCBpbiBkZWNpbWFsIGRlZ3JlZXMsIG9mIHRoZSBzZWNvbmQgcmFkaXVzIG9mIHRoZSBzZWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcHM9NjRdIG51bWJlciBvZiBzdGVwc1xuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBtaWxlcywga2lsb21ldGVycywgZGVncmVlcywgb3IgcmFkaWFuc1xuICogQHJldHVybnMge0ZlYXR1cmU8UG9seWdvbj59IHNlY3RvciBwb2x5Z29uXG4gKiBAZXhhbXBsZVxuICogdmFyIGNlbnRlciA9IHR1cmYucG9pbnQoWy03NSwgNDBdKTtcbiAqIHZhciByYWRpdXMgPSA1O1xuICogdmFyIGJlYXJpbmcxID0gMjU7XG4gKiB2YXIgYmVhcmluZzIgPSA0NTtcbiAqXG4gKiB2YXIgc2VjdG9yID0gdHVyZi5zZWN0b3IoY2VudGVyLCByYWRpdXMsIGJlYXJpbmcxLCBiZWFyaW5nMik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2NlbnRlciwgc2VjdG9yXTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2VudGVyLCByYWRpdXMsIGJlYXJpbmcxLCBiZWFyaW5nMiwgc3RlcHMsIHVuaXRzKSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghY2VudGVyKSB0aHJvdyBuZXcgRXJyb3IoJ2NlbnRlciBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChiZWFyaW5nMSA9PT0gdW5kZWZpbmVkIHx8IGJlYXJpbmcxID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ2JlYXJpbmcxIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKGJlYXJpbmcyID09PSB1bmRlZmluZWQgfHwgYmVhcmluZzIgPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignYmVhcmluZzIgaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoIXJhZGl1cykgdGhyb3cgbmV3IEVycm9yKCdyYWRpdXMgaXMgcmVxdWlyZWQnKTtcblxuICAgIC8vIGRlZmF1bHQgcGFyYW1zXG4gICAgc3RlcHMgPSBzdGVwcyB8fCA2NDtcblxuICAgIGlmIChjb252ZXJ0QW5nbGVUbzM2MChiZWFyaW5nMSkgPT09IGNvbnZlcnRBbmdsZVRvMzYwKGJlYXJpbmcyKSkge1xuICAgICAgICByZXR1cm4gY2lyY2xlKGNlbnRlciwgcmFkaXVzLCBzdGVwcywgdW5pdHMpO1xuICAgIH1cbiAgICB2YXIgY29vcmRzID0gZ2V0Q29vcmRzKGNlbnRlcik7XG4gICAgdmFyIGFyYyA9IGxpbmVBcmMoY2VudGVyLCByYWRpdXMsIGJlYXJpbmcxLCBiZWFyaW5nMiwgc3RlcHMsIHVuaXRzKTtcbiAgICB2YXIgc2xpY2VDb29yZHMgPSBbW2Nvb3Jkc11dO1xuICAgIGNvb3JkRWFjaChhcmMsIGZ1bmN0aW9uIChjdXJyZW50Q29vcmRzKSB7XG4gICAgICAgIHNsaWNlQ29vcmRzWzBdLnB1c2goY3VycmVudENvb3Jkcyk7XG4gICAgfSk7XG4gICAgc2xpY2VDb29yZHNbMF0ucHVzaChjb29yZHMpO1xuXG4gICAgcmV0dXJuIHBvbHlnb24oc2xpY2VDb29yZHMpO1xufTtcblxuLyoqXG4gKiBUYWtlcyBhbnkgYW5nbGUgaW4gZGVncmVlc1xuICogYW5kIHJldHVybnMgYSB2YWxpZCBhbmdsZSBiZXR3ZWVuIDAtMzYwIGRlZ3JlZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGFsZmEgYW5nbGUgYmV0d2VlbiAtMTgwLTE4MCBkZWdyZWVzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbmdsZSBiZXR3ZWVuIDAtMzYwIGRlZ3JlZXNcbiAqL1xuZnVuY3Rpb24gY29udmVydEFuZ2xlVG8zNjAoYWxmYSkge1xuICAgIHZhciBiZXRhID0gYWxmYSAlIDM2MDtcbiAgICBpZiAoYmV0YSA8IDApIHtcbiAgICAgICAgYmV0YSArPSAzNjA7XG4gICAgfVxuICAgIHJldHVybiBiZXRhO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvc2VjdG9yL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuLyogTGF0aXR1ZGUvbG9uZ2l0dWRlIHNwaGVyaWNhbCBnZW9kZXN5IHRvb2xzICAgICAgICAgICAgICAgICAgICAgICAgIChjKSBDaHJpcyBWZW5lc3MgMjAwMi0yMDE2ICAqL1xuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1JVCBMaWNlbmNlICAqL1xuLyogd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2dlb2Rlc3kvZG9jcy9tb2R1bGUtbGF0bG9uLXNwaGVyaWNhbC5odG1sICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuXG4ndXNlIHN0cmljdCc7XG5pZiAodHlwZW9mIG1vZHVsZSE9J3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHZhciBEbXMgPSByZXF1aXJlKCcuL2RtcycpOyAvLyDiiaEgaW1wb3J0IERtcyBmcm9tICdkbXMuanMnXG5cblxuLyoqXG4gKiBMaWJyYXJ5IG9mIGdlb2Rlc3kgZnVuY3Rpb25zIGZvciBvcGVyYXRpb25zIG9uIGEgc3BoZXJpY2FsIGVhcnRoIG1vZGVsLlxuICpcbiAqIEBtb2R1bGUgICBsYXRsb24tc3BoZXJpY2FsXG4gKiBAcmVxdWlyZXMgZG1zXG4gKi9cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBMYXRMb24gcG9pbnQgb24gdGhlIGVhcnRoJ3Mgc3VyZmFjZSBhdCB0aGUgc3BlY2lmaWVkIGxhdGl0dWRlIC8gbG9uZ2l0dWRlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGxhdCAtIExhdGl0dWRlIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gbG9uIC0gTG9uZ2l0dWRlIGluIGRlZ3JlZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUyLjIwNSwgMC4xMTkpO1xuICovXG5mdW5jdGlvbiBMYXRMb24obGF0LCBsb24pIHtcbiAgICAvLyBhbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgJ25ldydcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTGF0TG9uKSkgcmV0dXJuIG5ldyBMYXRMb24obGF0LCBsb24pO1xuXG4gICAgdGhpcy5sYXQgPSBOdW1iZXIobGF0KTtcbiAgICB0aGlzLmxvbiA9IE51bWJlcihsb24pO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlzdGFuY2UgZnJvbSDigJh0aGlz4oCZIHBvaW50IHRvIGRlc3RpbmF0aW9uIHBvaW50ICh1c2luZyBoYXZlcnNpbmUgZm9ybXVsYSkuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBMYXRpdHVkZS9sb25naXR1ZGUgb2YgZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBbcmFkaXVzPTYzNzFlM10gLSAoTWVhbikgcmFkaXVzIG9mIGVhcnRoIChkZWZhdWx0cyB0byByYWRpdXMgaW4gbWV0cmVzKS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IERpc3RhbmNlIGJldHdlZW4gdGhpcyBwb2ludCBhbmQgZGVzdGluYXRpb24gcG9pbnQsIGluIHNhbWUgdW5pdHMgYXMgcmFkaXVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgdmFyIHAxID0gbmV3IExhdExvbig1Mi4yMDUsIDAuMTE5KTtcbiAqICAgICB2YXIgcDIgPSBuZXcgTGF0TG9uKDQ4Ljg1NywgMi4zNTEpO1xuICogICAgIHZhciBkID0gcDEuZGlzdGFuY2VUbyhwMik7IC8vIDQwNC4zIGttXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuZGlzdGFuY2VUbyA9IGZ1bmN0aW9uKHBvaW50LCByYWRpdXMpIHtcbiAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BvaW50IGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG4gICAgcmFkaXVzID0gKHJhZGl1cyA9PT0gdW5kZWZpbmVkKSA/IDYzNzFlMyA6IE51bWJlcihyYWRpdXMpO1xuXG4gICAgdmFyIFIgPSByYWRpdXM7XG4gICAgdmFyIM+GMSA9IHRoaXMubGF0LnRvUmFkaWFucygpLCAgzrsxID0gdGhpcy5sb24udG9SYWRpYW5zKCk7XG4gICAgdmFyIM+GMiA9IHBvaW50LmxhdC50b1JhZGlhbnMoKSwgzrsyID0gcG9pbnQubG9uLnRvUmFkaWFucygpO1xuICAgIHZhciDOlM+GID0gz4YyIC0gz4YxO1xuICAgIHZhciDOlM67ID0gzrsyIC0gzrsxO1xuXG4gICAgdmFyIGEgPSBNYXRoLnNpbijOlM+GLzIpICogTWF0aC5zaW4ozpTPhi8yKVxuICAgICAgICAgICsgTWF0aC5jb3Moz4YxKSAqIE1hdGguY29zKM+GMilcbiAgICAgICAgICAqIE1hdGguc2luKM6UzrsvMikgKiBNYXRoLnNpbijOlM67LzIpO1xuICAgIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMS1hKSk7XG4gICAgdmFyIGQgPSBSICogYztcblxuICAgIHJldHVybiBkO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIChpbml0aWFsKSBiZWFyaW5nIGZyb20g4oCYdGhpc+KAmSBwb2ludCB0byBkZXN0aW5hdGlvbiBwb2ludC5cbiAqXG4gKiBAcGFyYW0gICB7TGF0TG9ufSBwb2ludCAtIExhdGl0dWRlL2xvbmdpdHVkZSBvZiBkZXN0aW5hdGlvbiBwb2ludC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IEluaXRpYWwgYmVhcmluZyBpbiBkZWdyZWVzIGZyb20gbm9ydGguXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUyLjIwNSwgMC4xMTkpO1xuICogICAgIHZhciBwMiA9IG5ldyBMYXRMb24oNDguODU3LCAyLjM1MSk7XG4gKiAgICAgdmFyIGIxID0gcDEuYmVhcmluZ1RvKHAyKTsgLy8gMTU2LjLCsFxuICovXG5MYXRMb24ucHJvdG90eXBlLmJlYXJpbmdUbyA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgaWYgKCEocG9pbnQgaW5zdGFuY2VvZiBMYXRMb24pKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdwb2ludCBpcyBub3QgTGF0TG9uIG9iamVjdCcpO1xuXG4gICAgdmFyIM+GMSA9IHRoaXMubGF0LnRvUmFkaWFucygpLCDPhjIgPSBwb2ludC5sYXQudG9SYWRpYW5zKCk7XG4gICAgdmFyIM6UzrsgPSAocG9pbnQubG9uLXRoaXMubG9uKS50b1JhZGlhbnMoKTtcblxuICAgIC8vIHNlZSBodHRwOi8vbWF0aGZvcnVtLm9yZy9saWJyYXJ5L2RybWF0aC92aWV3LzU1NDE3Lmh0bWxcbiAgICB2YXIgeSA9IE1hdGguc2luKM6UzrspICogTWF0aC5jb3Moz4YyKTtcbiAgICB2YXIgeCA9IE1hdGguY29zKM+GMSkqTWF0aC5zaW4oz4YyKSAtXG4gICAgICAgICAgICBNYXRoLnNpbijPhjEpKk1hdGguY29zKM+GMikqTWF0aC5jb3MozpTOuyk7XG4gICAgdmFyIM64ID0gTWF0aC5hdGFuMih5LCB4KTtcblxuICAgIHJldHVybiAozrgudG9EZWdyZWVzKCkrMzYwKSAlIDM2MDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGZpbmFsIGJlYXJpbmcgYXJyaXZpbmcgYXQgZGVzdGluYXRpb24gZGVzdGluYXRpb24gcG9pbnQgZnJvbSDigJh0aGlz4oCZIHBvaW50OyB0aGUgZmluYWwgYmVhcmluZ1xuICogd2lsbCBkaWZmZXIgZnJvbSB0aGUgaW5pdGlhbCBiZWFyaW5nIGJ5IHZhcnlpbmcgZGVncmVlcyBhY2NvcmRpbmcgdG8gZGlzdGFuY2UgYW5kIGxhdGl0dWRlLlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb259IHBvaW50IC0gTGF0aXR1ZGUvbG9uZ2l0dWRlIG9mIGRlc3RpbmF0aW9uIHBvaW50LlxuICogQHJldHVybnMge251bWJlcn0gRmluYWwgYmVhcmluZyBpbiBkZWdyZWVzIGZyb20gbm9ydGguXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUyLjIwNSwgMC4xMTkpO1xuICogICAgIHZhciBwMiA9IG5ldyBMYXRMb24oNDguODU3LCAyLjM1MSk7XG4gKiAgICAgdmFyIGIyID0gcDEuZmluYWxCZWFyaW5nVG8ocDIpOyAvLyAxNTcuOcKwXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuZmluYWxCZWFyaW5nVG8gPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGlmICghKHBvaW50IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9pbnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcblxuICAgIC8vIGdldCBpbml0aWFsIGJlYXJpbmcgZnJvbSBkZXN0aW5hdGlvbiBwb2ludCB0byB0aGlzIHBvaW50ICYgcmV2ZXJzZSBpdCBieSBhZGRpbmcgMTgwwrBcbiAgICByZXR1cm4gKCBwb2ludC5iZWFyaW5nVG8odGhpcykrMTgwICkgJSAzNjA7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWlkcG9pbnQgYmV0d2VlbiDigJh0aGlz4oCZIHBvaW50IGFuZCB0aGUgc3VwcGxpZWQgcG9pbnQuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBMYXRpdHVkZS9sb25naXR1ZGUgb2YgZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcmV0dXJucyB7TGF0TG9ufSBNaWRwb2ludCBiZXR3ZWVuIHRoaXMgcG9pbnQgYW5kIHRoZSBzdXBwbGllZCBwb2ludC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIHZhciBwMSA9IG5ldyBMYXRMb24oNTIuMjA1LCAwLjExOSk7XG4gKiAgICAgdmFyIHAyID0gbmV3IExhdExvbig0OC44NTcsIDIuMzUxKTtcbiAqICAgICB2YXIgcE1pZCA9IHAxLm1pZHBvaW50VG8ocDIpOyAvLyA1MC41MzYzwrBOLCAwMDEuMjc0NsKwRVxuICovXG5MYXRMb24ucHJvdG90eXBlLm1pZHBvaW50VG8gPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGlmICghKHBvaW50IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9pbnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcblxuICAgIC8vIM+GbSA9IGF0YW4yKCBzaW7PhjEgKyBzaW7PhjIsIOKImiggKGNvc8+GMSArIGNvc8+GMuKLhWNvc86UzrspIOKLhSAoY29zz4YxICsgY29zz4Yy4ouFY29zzpTOuykgKSArIGNvc8Kyz4Yy4ouFc2luwrLOlM67IClcbiAgICAvLyDOu20gPSDOuzEgKyBhdGFuMihjb3PPhjLii4VzaW7OlM67LCBjb3PPhjEgKyBjb3PPhjLii4Vjb3POlM67KVxuICAgIC8vIHNlZSBodHRwOi8vbWF0aGZvcnVtLm9yZy9saWJyYXJ5L2RybWF0aC92aWV3LzUxODIyLmh0bWwgZm9yIGRlcml2YXRpb25cblxuICAgIHZhciDPhjEgPSB0aGlzLmxhdC50b1JhZGlhbnMoKSwgzrsxID0gdGhpcy5sb24udG9SYWRpYW5zKCk7XG4gICAgdmFyIM+GMiA9IHBvaW50LmxhdC50b1JhZGlhbnMoKTtcbiAgICB2YXIgzpTOuyA9IChwb2ludC5sb24tdGhpcy5sb24pLnRvUmFkaWFucygpO1xuXG4gICAgdmFyIEJ4ID0gTWF0aC5jb3Moz4YyKSAqIE1hdGguY29zKM6UzrspO1xuICAgIHZhciBCeSA9IE1hdGguY29zKM+GMikgKiBNYXRoLnNpbijOlM67KTtcblxuICAgIHZhciB4ID0gTWF0aC5zcXJ0KChNYXRoLmNvcyjPhjEpICsgQngpICogKE1hdGguY29zKM+GMSkgKyBCeCkgKyBCeSAqIEJ5KTtcbiAgICB2YXIgeSA9IE1hdGguc2luKM+GMSkgKyBNYXRoLnNpbijPhjIpO1xuICAgIHZhciDPhjMgPSBNYXRoLmF0YW4yKHksIHgpO1xuXG4gICAgdmFyIM67MyA9IM67MSArIE1hdGguYXRhbjIoQnksIE1hdGguY29zKM+GMSkgKyBCeCk7XG5cbiAgICByZXR1cm4gbmV3IExhdExvbijPhjMudG9EZWdyZWVzKCksICjOuzMudG9EZWdyZWVzKCkrNTQwKSUzNjAtMTgwKTsgLy8gbm9ybWFsaXNlIHRvIOKIkjE4MC4uKzE4MMKwXG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcG9pbnQgYXQgZ2l2ZW4gZnJhY3Rpb24gYmV0d2VlbiDigJh0aGlz4oCZIHBvaW50IGFuZCBzcGVjaWZpZWQgcG9pbnQuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBMYXRpdHVkZS9sb25naXR1ZGUgb2YgZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBmcmFjdGlvbiAtIEZyYWN0aW9uIGJldHdlZW4gdGhlIHR3byBwb2ludHMgKDAgPSB0aGlzIHBvaW50LCAxID0gc3BlY2lmaWVkIHBvaW50KS5cbiAqIEByZXR1cm5zIHtMYXRMb259IEludGVybWVkaWF0ZSBwb2ludCBiZXR3ZWVuIHRoaXMgcG9pbnQgYW5kIGRlc3RpbmF0aW9uIHBvaW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIGxldCBwMSA9IG5ldyBMYXRMb24oNTIuMjA1LCAwLjExOSk7XG4gKiAgIGxldCBwMiA9IG5ldyBMYXRMb24oNDguODU3LCAyLjM1MSk7XG4gKiAgIGxldCBwTWlkID0gcDEuaW50ZXJtZWRpYXRlUG9pbnRUbyhwMiwgMC4yNSk7IC8vIDUxLjM3MjHCsE4sIDAwMC43MDczwrBFXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuaW50ZXJtZWRpYXRlUG9pbnRUbyA9IGZ1bmN0aW9uKHBvaW50LCBmcmFjdGlvbikge1xuICAgIGlmICghKHBvaW50IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9pbnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcblxuICAgIHZhciDPhjEgPSB0aGlzLmxhdC50b1JhZGlhbnMoKSwgzrsxID0gdGhpcy5sb24udG9SYWRpYW5zKCk7XG4gICAgdmFyIM+GMiA9IHBvaW50LmxhdC50b1JhZGlhbnMoKSwgzrsyID0gcG9pbnQubG9uLnRvUmFkaWFucygpO1xuICAgIHZhciBzaW7PhjEgPSBNYXRoLnNpbijPhjEpLCBjb3PPhjEgPSBNYXRoLmNvcyjPhjEpLCBzaW7OuzEgPSBNYXRoLnNpbijOuzEpLCBjb3POuzEgPSBNYXRoLmNvcyjOuzEpO1xuICAgIHZhciBzaW7PhjIgPSBNYXRoLnNpbijPhjIpLCBjb3PPhjIgPSBNYXRoLmNvcyjPhjIpLCBzaW7OuzIgPSBNYXRoLnNpbijOuzIpLCBjb3POuzIgPSBNYXRoLmNvcyjOuzIpO1xuXG4gICAgLy8gZGlzdGFuY2UgYmV0d2VlbiBwb2ludHNcbiAgICB2YXIgzpTPhiA9IM+GMiAtIM+GMTtcbiAgICB2YXIgzpTOuyA9IM67MiAtIM67MTtcbiAgICB2YXIgYSA9IE1hdGguc2luKM6Uz4YvMikgKiBNYXRoLnNpbijOlM+GLzIpXG4gICAgICAgICsgTWF0aC5jb3Moz4YxKSAqIE1hdGguY29zKM+GMikgKiBNYXRoLnNpbijOlM67LzIpICogTWF0aC5zaW4ozpTOuy8yKTtcbiAgICB2YXIgzrQgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxLWEpKTtcblxuICAgIHZhciBBID0gTWF0aC5zaW4oKDEtZnJhY3Rpb24pKs60KSAvIE1hdGguc2luKM60KTtcbiAgICB2YXIgQiA9IE1hdGguc2luKGZyYWN0aW9uKs60KSAvIE1hdGguc2luKM60KTtcblxuICAgIHZhciB4ID0gQSAqIGNvc8+GMSAqIGNvc867MSArIEIgKiBjb3PPhjIgKiBjb3POuzI7XG4gICAgdmFyIHkgPSBBICogY29zz4YxICogc2luzrsxICsgQiAqIGNvc8+GMiAqIHNpbs67MjtcbiAgICB2YXIgeiA9IEEgKiBzaW7PhjEgKyBCICogc2luz4YyO1xuXG4gICAgdmFyIM+GMyA9IE1hdGguYXRhbjIoeiwgTWF0aC5zcXJ0KHgqeCArIHkqeSkpO1xuICAgIHZhciDOuzMgPSBNYXRoLmF0YW4yKHksIHgpO1xuXG4gICAgcmV0dXJuIG5ldyBMYXRMb24oz4YzLnRvRGVncmVlcygpLCAozrszLnRvRGVncmVlcygpKzU0MCklMzYwLTE4MCk7IC8vIG5vcm1hbGlzZSBsb24gdG8g4oiSMTgwLi4rMTgwwrBcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBwb2ludCBmcm9tIOKAmHRoaXPigJkgcG9pbnQgaGF2aW5nIHRyYXZlbGxlZCB0aGUgZ2l2ZW4gZGlzdGFuY2Ugb24gdGhlXG4gKiBnaXZlbiBpbml0aWFsIGJlYXJpbmcgKGJlYXJpbmcgbm9ybWFsbHkgdmFyaWVzIGFyb3VuZCBwYXRoIGZvbGxvd2VkKS5cbiAqXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBkaXN0YW5jZSAtIERpc3RhbmNlIHRyYXZlbGxlZCwgaW4gc2FtZSB1bml0cyBhcyBlYXJ0aCByYWRpdXMgKGRlZmF1bHQ6IG1ldHJlcykuXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBiZWFyaW5nIC0gSW5pdGlhbCBiZWFyaW5nIGluIGRlZ3JlZXMgZnJvbSBub3J0aC5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtyYWRpdXM9NjM3MWUzXSAtIChNZWFuKSByYWRpdXMgb2YgZWFydGggKGRlZmF1bHRzIHRvIHJhZGl1cyBpbiBtZXRyZXMpLlxuICogQHJldHVybnMge0xhdExvbn0gRGVzdGluYXRpb24gcG9pbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUxLjQ3NzgsIC0wLjAwMTUpO1xuICogICAgIHZhciBwMiA9IHAxLmRlc3RpbmF0aW9uUG9pbnQoNzc5NCwgMzAwLjcpOyAvLyA1MS41MTM1wrBOLCAwMDAuMDk4M8KwV1xuICovXG5MYXRMb24ucHJvdG90eXBlLmRlc3RpbmF0aW9uUG9pbnQgPSBmdW5jdGlvbihkaXN0YW5jZSwgYmVhcmluZywgcmFkaXVzKSB7XG4gICAgcmFkaXVzID0gKHJhZGl1cyA9PT0gdW5kZWZpbmVkKSA/IDYzNzFlMyA6IE51bWJlcihyYWRpdXMpO1xuXG4gICAgLy8gc2luz4YyID0gc2luz4Yx4ouFY29zzrQgKyBjb3PPhjHii4VzaW7OtOKLhWNvc864XG4gICAgLy8gdGFuzpTOuyA9IHNpbs644ouFc2luzrTii4Vjb3PPhjEgLyBjb3POtOKIknNpbs+GMeKLhXNpbs+GMlxuICAgIC8vIHNlZSBodHRwOi8vd2lsbGlhbXMuYmVzdC52d2gubmV0L2F2Zm9ybS5odG0jTExcblxuICAgIHZhciDOtCA9IE51bWJlcihkaXN0YW5jZSkgLyByYWRpdXM7IC8vIGFuZ3VsYXIgZGlzdGFuY2UgaW4gcmFkaWFuc1xuICAgIHZhciDOuCA9IE51bWJlcihiZWFyaW5nKS50b1JhZGlhbnMoKTtcblxuICAgIHZhciDPhjEgPSB0aGlzLmxhdC50b1JhZGlhbnMoKTtcbiAgICB2YXIgzrsxID0gdGhpcy5sb24udG9SYWRpYW5zKCk7XG5cbiAgICB2YXIgc2luz4YxID0gTWF0aC5zaW4oz4YxKSwgY29zz4YxID0gTWF0aC5jb3Moz4YxKTtcbiAgICB2YXIgc2luzrQgPSBNYXRoLnNpbijOtCksIGNvc860ID0gTWF0aC5jb3MozrQpO1xuICAgIHZhciBzaW7OuCA9IE1hdGguc2luKM64KSwgY29zzrggPSBNYXRoLmNvcyjOuCk7XG5cbiAgICB2YXIgc2luz4YyID0gc2luz4YxKmNvc860ICsgY29zz4YxKnNpbs60KmNvc864O1xuICAgIHZhciDPhjIgPSBNYXRoLmFzaW4oc2luz4YyKTtcbiAgICB2YXIgeSA9IHNpbs64ICogc2luzrQgKiBjb3PPhjE7XG4gICAgdmFyIHggPSBjb3POtCAtIHNpbs+GMSAqIHNpbs+GMjtcbiAgICB2YXIgzrsyID0gzrsxICsgTWF0aC5hdGFuMih5LCB4KTtcblxuICAgIHJldHVybiBuZXcgTGF0TG9uKM+GMi50b0RlZ3JlZXMoKSwgKM67Mi50b0RlZ3JlZXMoKSs1NDApJTM2MC0xODApOyAvLyBub3JtYWxpc2UgdG8g4oiSMTgwLi4rMTgwwrBcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb2ludCBvZiBpbnRlcnNlY3Rpb24gb2YgdHdvIHBhdGhzIGRlZmluZWQgYnkgcG9pbnQgYW5kIGJlYXJpbmcuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcDEgLSBGaXJzdCBwb2ludC5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGJybmcxIC0gSW5pdGlhbCBiZWFyaW5nIGZyb20gZmlyc3QgcG9pbnQuXG4gKiBAcGFyYW0gICB7TGF0TG9ufSBwMiAtIFNlY29uZCBwb2ludC5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGJybmcyIC0gSW5pdGlhbCBiZWFyaW5nIGZyb20gc2Vjb25kIHBvaW50LlxuICogQHJldHVybnMge0xhdExvbnxudWxsfSBEZXN0aW5hdGlvbiBwb2ludCAobnVsbCBpZiBubyB1bmlxdWUgaW50ZXJzZWN0aW9uIGRlZmluZWQpLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgdmFyIHAxID0gTGF0TG9uKDUxLjg4NTMsIDAuMjU0NSksIGJybmcxID0gMTA4LjU0NztcbiAqICAgICB2YXIgcDIgPSBMYXRMb24oNDkuMDAzNCwgMi41NzM1KSwgYnJuZzIgPSAgMzIuNDM1O1xuICogICAgIHZhciBwSW50ID0gTGF0TG9uLmludGVyc2VjdGlvbihwMSwgYnJuZzEsIHAyLCBicm5nMik7IC8vIDUwLjkwNzjCsE4sIDAwNC41MDg0wrBFXG4gKi9cbkxhdExvbi5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihwMSwgYnJuZzEsIHAyLCBicm5nMikge1xuICAgIGlmICghKHAxIGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncDEgaXMgbm90IExhdExvbiBvYmplY3QnKTtcbiAgICBpZiAoIShwMiBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3AyIGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG5cbiAgICAvLyBzZWUgaHR0cDovL3dpbGxpYW1zLmJlc3QudndoLm5ldC9hdmZvcm0uaHRtI0ludGVyc2VjdGlvblxuXG4gICAgdmFyIM+GMSA9IHAxLmxhdC50b1JhZGlhbnMoKSwgzrsxID0gcDEubG9uLnRvUmFkaWFucygpO1xuICAgIHZhciDPhjIgPSBwMi5sYXQudG9SYWRpYW5zKCksIM67MiA9IHAyLmxvbi50b1JhZGlhbnMoKTtcbiAgICB2YXIgzrgxMyA9IE51bWJlcihicm5nMSkudG9SYWRpYW5zKCksIM64MjMgPSBOdW1iZXIoYnJuZzIpLnRvUmFkaWFucygpO1xuICAgIHZhciDOlM+GID0gz4YyLc+GMSwgzpTOuyA9IM67Mi3OuzE7XG5cbiAgICB2YXIgzrQxMiA9IDIqTWF0aC5hc2luKCBNYXRoLnNxcnQoIE1hdGguc2luKM6Uz4YvMikqTWF0aC5zaW4ozpTPhi8yKVxuICAgICAgICArIE1hdGguY29zKM+GMSkqTWF0aC5jb3Moz4YyKSpNYXRoLnNpbijOlM67LzIpKk1hdGguc2luKM6UzrsvMikgKSApO1xuICAgIGlmICjOtDEyID09IDApIHJldHVybiBudWxsO1xuXG4gICAgLy8gaW5pdGlhbC9maW5hbCBiZWFyaW5ncyBiZXR3ZWVuIHBvaW50c1xuICAgIHZhciDOuGEgPSBNYXRoLmFjb3MoICggTWF0aC5zaW4oz4YyKSAtIE1hdGguc2luKM+GMSkqTWF0aC5jb3MozrQxMikgKSAvICggTWF0aC5zaW4ozrQxMikqTWF0aC5jb3Moz4YxKSApICk7XG4gICAgaWYgKGlzTmFOKM64YSkpIM64YSA9IDA7IC8vIHByb3RlY3QgYWdhaW5zdCByb3VuZGluZ1xuICAgIHZhciDOuGIgPSBNYXRoLmFjb3MoICggTWF0aC5zaW4oz4YxKSAtIE1hdGguc2luKM+GMikqTWF0aC5jb3MozrQxMikgKSAvICggTWF0aC5zaW4ozrQxMikqTWF0aC5jb3Moz4YyKSApICk7XG5cbiAgICB2YXIgzrgxMiA9IE1hdGguc2luKM67Mi3OuzEpPjAgPyDOuGEgOiAyKk1hdGguUEktzrhhO1xuICAgIHZhciDOuDIxID0gTWF0aC5zaW4ozrsyLc67MSk+MCA/IDIqTWF0aC5QSS3OuGIgOiDOuGI7XG5cbiAgICB2YXIgzrExID0gKM64MTMgLSDOuDEyICsgTWF0aC5QSSkgJSAoMipNYXRoLlBJKSAtIE1hdGguUEk7IC8vIGFuZ2xlIDItMS0zXG4gICAgdmFyIM6xMiA9ICjOuDIxIC0gzrgyMyArIE1hdGguUEkpICUgKDIqTWF0aC5QSSkgLSBNYXRoLlBJOyAvLyBhbmdsZSAxLTItM1xuXG4gICAgaWYgKE1hdGguc2luKM6xMSk9PTAgJiYgTWF0aC5zaW4ozrEyKT09MCkgcmV0dXJuIG51bGw7IC8vIGluZmluaXRlIGludGVyc2VjdGlvbnNcbiAgICBpZiAoTWF0aC5zaW4ozrExKSpNYXRoLnNpbijOsTIpIDwgMCkgcmV0dXJuIG51bGw7ICAgICAgLy8gYW1iaWd1b3VzIGludGVyc2VjdGlvblxuXG4gICAgLy/OsTEgPSBNYXRoLmFicyjOsTEpO1xuICAgIC8vzrEyID0gTWF0aC5hYnMozrEyKTtcbiAgICAvLyAuLi4gRWQgV2lsbGlhbXMgdGFrZXMgYWJzIG9mIM6xMS/OsTIsIGJ1dCBzZWVtcyB0byBicmVhayBjYWxjdWxhdGlvbj9cblxuICAgIHZhciDOsTMgPSBNYXRoLmFjb3MoIC1NYXRoLmNvcyjOsTEpKk1hdGguY29zKM6xMikgKyBNYXRoLnNpbijOsTEpKk1hdGguc2luKM6xMikqTWF0aC5jb3MozrQxMikgKTtcbiAgICB2YXIgzrQxMyA9IE1hdGguYXRhbjIoIE1hdGguc2luKM60MTIpKk1hdGguc2luKM6xMSkqTWF0aC5zaW4ozrEyKSwgTWF0aC5jb3MozrEyKStNYXRoLmNvcyjOsTEpKk1hdGguY29zKM6xMykgKTtcbiAgICB2YXIgz4YzID0gTWF0aC5hc2luKCBNYXRoLnNpbijPhjEpKk1hdGguY29zKM60MTMpICsgTWF0aC5jb3Moz4YxKSpNYXRoLnNpbijOtDEzKSpNYXRoLmNvcyjOuDEzKSApO1xuICAgIHZhciDOlM67MTMgPSBNYXRoLmF0YW4yKCBNYXRoLnNpbijOuDEzKSpNYXRoLnNpbijOtDEzKSpNYXRoLmNvcyjPhjEpLCBNYXRoLmNvcyjOtDEzKS1NYXRoLnNpbijPhjEpKk1hdGguc2luKM+GMykgKTtcbiAgICB2YXIgzrszID0gzrsxICsgzpTOuzEzO1xuXG4gICAgcmV0dXJuIG5ldyBMYXRMb24oz4YzLnRvRGVncmVlcygpLCAozrszLnRvRGVncmVlcygpKzU0MCklMzYwLTE4MCk7IC8vIG5vcm1hbGlzZSB0byDiiJIxODAuLisxODDCsFxufTtcblxuXG4vKipcbiAqIFJldHVybnMgKHNpZ25lZCkgZGlzdGFuY2UgZnJvbSDigJh0aGlz4oCZIHBvaW50IHRvIGdyZWF0IGNpcmNsZSBkZWZpbmVkIGJ5IHN0YXJ0LXBvaW50IGFuZCBlbmQtcG9pbnQuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcGF0aFN0YXJ0IC0gU3RhcnQgcG9pbnQgb2YgZ3JlYXQgY2lyY2xlIHBhdGguXG4gKiBAcGFyYW0gICB7TGF0TG9ufSBwYXRoRW5kIC0gRW5kIHBvaW50IG9mIGdyZWF0IGNpcmNsZSBwYXRoLlxuICogQHBhcmFtICAge251bWJlcn0gW3JhZGl1cz02MzcxZTNdIC0gKE1lYW4pIHJhZGl1cyBvZiBlYXJ0aCAoZGVmYXVsdHMgdG8gcmFkaXVzIGluIG1ldHJlcykuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBEaXN0YW5jZSB0byBncmVhdCBjaXJjbGUgKC12ZSBpZiB0byBsZWZ0LCArdmUgaWYgdG8gcmlnaHQgb2YgcGF0aCkuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHBDdXJyZW50ID0gbmV3IExhdExvbig1My4yNjExLCAtMC43OTcyKTtcbiAqICAgdmFyIHAxID0gbmV3IExhdExvbig1My4zMjA2LCAtMS43Mjk3KTtcbiAqICAgdmFyIHAyID0gbmV3IExhdExvbig1My4xODg3LCAgMC4xMzM0KTtcbiAqICAgdmFyIGQgPSBwQ3VycmVudC5jcm9zc1RyYWNrRGlzdGFuY2VUbyhwMSwgcDIpOyAgLy8gLTMwNy41IG1cbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5jcm9zc1RyYWNrRGlzdGFuY2VUbyA9IGZ1bmN0aW9uKHBhdGhTdGFydCwgcGF0aEVuZCwgcmFkaXVzKSB7XG4gICAgaWYgKCEocGF0aFN0YXJ0IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0aFN0YXJ0IGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG4gICAgaWYgKCEocGF0aEVuZCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdGhFbmQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcbiAgICByYWRpdXMgPSAocmFkaXVzID09PSB1bmRlZmluZWQpID8gNjM3MWUzIDogTnVtYmVyKHJhZGl1cyk7XG5cbiAgICB2YXIgzrQxMyA9IHBhdGhTdGFydC5kaXN0YW5jZVRvKHRoaXMsIHJhZGl1cykvcmFkaXVzO1xuICAgIHZhciDOuDEzID0gcGF0aFN0YXJ0LmJlYXJpbmdUbyh0aGlzKS50b1JhZGlhbnMoKTtcbiAgICB2YXIgzrgxMiA9IHBhdGhTdGFydC5iZWFyaW5nVG8ocGF0aEVuZCkudG9SYWRpYW5zKCk7XG5cbiAgICB2YXIgZHh0ID0gTWF0aC5hc2luKCBNYXRoLnNpbijOtDEzKSAqIE1hdGguc2luKM64MTMtzrgxMikgKSAqIHJhZGl1cztcblxuICAgIHJldHVybiBkeHQ7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBtYXhpbXVtIGxhdGl0dWRlIHJlYWNoZWQgd2hlbiB0cmF2ZWxsaW5nIG9uIGEgZ3JlYXQgY2lyY2xlIG9uIGdpdmVuIGJlYXJpbmcgZnJvbSB0aGlzXG4gKiBwb2ludCAoJ0NsYWlyYXV0J3MgZm9ybXVsYScpLiBOZWdhdGUgdGhlIHJlc3VsdCBmb3IgdGhlIG1pbmltdW0gbGF0aXR1ZGUgKGluIHRoZSBTb3V0aGVyblxuICogaGVtaXNwaGVyZSkuXG4gKlxuICogVGhlIG1heGltdW0gbGF0aXR1ZGUgaXMgaW5kZXBlbmRlbnQgb2YgbG9uZ2l0dWRlOyBpdCB3aWxsIGJlIHRoZSBzYW1lIGZvciBhbGwgcG9pbnRzIG9uIGEgZ2l2ZW5cbiAqIGxhdGl0dWRlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWFyaW5nIC0gSW5pdGlhbCBiZWFyaW5nLlxuICogQHBhcmFtIHtudW1iZXJ9IGxhdGl0dWRlIC0gU3RhcnRpbmcgbGF0aXR1ZGUuXG4gKi9cbkxhdExvbi5wcm90b3R5cGUubWF4TGF0aXR1ZGUgPSBmdW5jdGlvbihiZWFyaW5nKSB7XG4gICAgdmFyIM64ID0gTnVtYmVyKGJlYXJpbmcpLnRvUmFkaWFucygpO1xuXG4gICAgdmFyIM+GID0gdGhpcy5sYXQudG9SYWRpYW5zKCk7XG5cbiAgICB2YXIgz4ZNYXggPSBNYXRoLmFjb3MoTWF0aC5hYnMoTWF0aC5zaW4ozrgpKk1hdGguY29zKM+GKSkpO1xuXG4gICAgcmV0dXJuIM+GTWF4LnRvRGVncmVlcygpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhaXIgb2YgbWVyaWRpYW5zIGF0IHdoaWNoIGEgZ3JlYXQgY2lyY2xlIGRlZmluZWQgYnkgdHdvIHBvaW50cyBjcm9zc2VzIHRoZSBnaXZlblxuICogbGF0aXR1ZGUuIElmIHRoZSBncmVhdCBjaXJjbGUgZG9lc24ndCByZWFjaCB0aGUgZ2l2ZW4gbGF0aXR1ZGUsIG51bGwgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtMYXRMb259IHBvaW50MSAtIEZpcnN0IHBvaW50IGRlZmluaW5nIGdyZWF0IGNpcmNsZS5cbiAqIEBwYXJhbSB7TGF0TG9ufSBwb2ludDIgLSBTZWNvbmQgcG9pbnQgZGVmaW5pbmcgZ3JlYXQgY2lyY2xlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxhdGl0dWRlIC0gTGF0aXR1ZGUgY3Jvc3NpbmdzIGFyZSB0byBiZSBkZXRlcm1pbmVkIGZvci5cbiAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gT2JqZWN0IGNvbnRhaW5pbmcgeyBsb24xLCBsb24yIH0gb3IgbnVsbCBpZiBnaXZlbiBsYXRpdHVkZSBub3QgcmVhY2hlZC5cbiAqL1xuTGF0TG9uLmNyb3NzaW5nUGFyYWxsZWxzID0gZnVuY3Rpb24ocG9pbnQxLCBwb2ludDIsIGxhdGl0dWRlKSB7XG4gICAgdmFyIM+GID0gTnVtYmVyKGxhdGl0dWRlKS50b1JhZGlhbnMoKTtcblxuICAgIHZhciDPhjEgPSBwb2ludDEubGF0LnRvUmFkaWFucygpO1xuICAgIHZhciDOuzEgPSBwb2ludDEubG9uLnRvUmFkaWFucygpO1xuICAgIHZhciDPhjIgPSBwb2ludDIubGF0LnRvUmFkaWFucygpO1xuICAgIHZhciDOuzIgPSBwb2ludDIubG9uLnRvUmFkaWFucygpO1xuXG4gICAgdmFyIM6UzrsgPSDOuzIgLSDOuzE7XG5cbiAgICB2YXIgeCA9IE1hdGguc2luKM+GMSkgKiBNYXRoLmNvcyjPhjIpICogTWF0aC5jb3Moz4YpICogTWF0aC5zaW4ozpTOuyk7XG4gICAgdmFyIHkgPSBNYXRoLnNpbijPhjEpICogTWF0aC5jb3Moz4YyKSAqIE1hdGguY29zKM+GKSAqIE1hdGguY29zKM6UzrspIC0gTWF0aC5jb3Moz4YxKSAqIE1hdGguc2luKM+GMikgKiBNYXRoLmNvcyjPhik7XG4gICAgdmFyIHogPSBNYXRoLmNvcyjPhjEpICogTWF0aC5jb3Moz4YyKSAqIE1hdGguc2luKM+GKSAqIE1hdGguc2luKM6UzrspO1xuXG4gICAgaWYgKHoqeiA+IHgqeCArIHkqeSkgcmV0dXJuIG51bGw7IC8vIGdyZWF0IGNpcmNsZSBkb2Vzbid0IHJlYWNoIGxhdGl0dWRlXG5cbiAgICB2YXIgzrttID0gTWF0aC5hdGFuMigteSwgeCk7ICAgICAgICAgICAgICAgICAgLy8gbG9uZ2l0dWRlIGF0IG1heCBsYXRpdHVkZVxuICAgIHZhciDOlM67aSA9IE1hdGguYWNvcyh6IC8gTWF0aC5zcXJ0KHgqeCt5KnkpKTsgLy8gzpTOuyBmcm9tIM67bSB0byBpbnRlcnNlY3Rpb24gcG9pbnRzXG5cbiAgICB2YXIgzrtpMSA9IM67MSArIM67bSAtIM6UzrtpO1xuICAgIHZhciDOu2kyID0gzrsxICsgzrttICsgzpTOu2k7XG5cbiAgICByZXR1cm4geyBsb24xOiAozrtpMS50b0RlZ3JlZXMoKSs1NDApJTM2MC0xODAsIGxvbjI6ICjOu2kyLnRvRGVncmVlcygpKzU0MCklMzYwLTE4MCB9OyAvLyBub3JtYWxpc2UgdG8g4oiSMTgwLi4rMTgwwrBcbn07XG5cblxuLyogUmh1bWIgLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGRpc3RhbmNlIHRyYXZlbGxpbmcgZnJvbSDigJh0aGlz4oCZIHBvaW50IHRvIGRlc3RpbmF0aW9uIHBvaW50IGFsb25nIGEgcmh1bWIgbGluZS5cbiAqXG4gKiBAcGFyYW0gICB7TGF0TG9ufSBwb2ludCAtIExhdGl0dWRlL2xvbmdpdHVkZSBvZiBkZXN0aW5hdGlvbiBwb2ludC5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtyYWRpdXM9NjM3MWUzXSAtIChNZWFuKSByYWRpdXMgb2YgZWFydGggKGRlZmF1bHRzIHRvIHJhZGl1cyBpbiBtZXRyZXMpLlxuICogQHJldHVybnMge251bWJlcn0gRGlzdGFuY2UgaW4ga20gYmV0d2VlbiB0aGlzIHBvaW50IGFuZCBkZXN0aW5hdGlvbiBwb2ludCAoc2FtZSB1bml0cyBhcyByYWRpdXMpLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgdmFyIHAxID0gbmV3IExhdExvbig1MS4xMjcsIDEuMzM4KTtcbiAqICAgICB2YXIgcDIgPSBuZXcgTGF0TG9uKDUwLjk2NCwgMS44NTMpO1xuICogICAgIHZhciBkID0gcDEuZGlzdGFuY2VUbyhwMik7IC8vIDQwLjMxIGttXG4gKi9cbkxhdExvbi5wcm90b3R5cGUucmh1bWJEaXN0YW5jZVRvID0gZnVuY3Rpb24ocG9pbnQsIHJhZGl1cykge1xuICAgIGlmICghKHBvaW50IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9pbnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcbiAgICByYWRpdXMgPSAocmFkaXVzID09PSB1bmRlZmluZWQpID8gNjM3MWUzIDogTnVtYmVyKHJhZGl1cyk7XG5cbiAgICAvLyBzZWUgaHR0cDovL3dpbGxpYW1zLmJlc3QudndoLm5ldC9hdmZvcm0uaHRtI1JodW1iXG5cbiAgICB2YXIgUiA9IHJhZGl1cztcbiAgICB2YXIgz4YxID0gdGhpcy5sYXQudG9SYWRpYW5zKCksIM+GMiA9IHBvaW50LmxhdC50b1JhZGlhbnMoKTtcbiAgICB2YXIgzpTPhiA9IM+GMiAtIM+GMTtcbiAgICB2YXIgzpTOuyA9IE1hdGguYWJzKHBvaW50Lmxvbi10aGlzLmxvbikudG9SYWRpYW5zKCk7XG4gICAgLy8gaWYgZExvbiBvdmVyIDE4MMKwIHRha2Ugc2hvcnRlciByaHVtYiBsaW5lIGFjcm9zcyB0aGUgYW50aS1tZXJpZGlhbjpcbiAgICBpZiAoTWF0aC5hYnMozpTOuykgPiBNYXRoLlBJKSDOlM67ID0gzpTOuz4wID8gLSgyKk1hdGguUEktzpTOuykgOiAoMipNYXRoLlBJK86UzrspO1xuXG4gICAgLy8gb24gTWVyY2F0b3IgcHJvamVjdGlvbiwgbG9uZ2l0dWRlIGRpc3RhbmNlcyBzaHJpbmsgYnkgbGF0aXR1ZGU7IHEgaXMgdGhlICdzdHJldGNoIGZhY3RvcidcbiAgICAvLyBxIGJlY29tZXMgaWxsLWNvbmRpdGlvbmVkIGFsb25nIEUtVyBsaW5lICgwLzApOyB1c2UgZW1waXJpY2FsIHRvbGVyYW5jZSB0byBhdm9pZCBpdFxuICAgIHZhciDOlM+IID0gTWF0aC5sb2coTWF0aC50YW4oz4YyLzIrTWF0aC5QSS80KS9NYXRoLnRhbijPhjEvMitNYXRoLlBJLzQpKTtcbiAgICB2YXIgcSA9IE1hdGguYWJzKM6Uz4gpID4gMTBlLTEyID8gzpTPhi/OlM+IIDogTWF0aC5jb3Moz4YxKTtcblxuICAgIC8vIGRpc3RhbmNlIGlzIHB5dGhhZ29yYXMgb24gJ3N0cmV0Y2hlZCcgTWVyY2F0b3IgcHJvamVjdGlvblxuICAgIHZhciDOtCA9IE1hdGguc3FydCjOlM+GKs6Uz4YgKyBxKnEqzpTOuyrOlM67KTsgLy8gYW5ndWxhciBkaXN0YW5jZSBpbiByYWRpYW5zXG4gICAgdmFyIGRpc3QgPSDOtCAqIFI7XG5cbiAgICByZXR1cm4gZGlzdDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiZWFyaW5nIGZyb20g4oCYdGhpc+KAmSBwb2ludCB0byBkZXN0aW5hdGlvbiBwb2ludCBhbG9uZyBhIHJodW1iIGxpbmUuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBMYXRpdHVkZS9sb25naXR1ZGUgb2YgZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCZWFyaW5nIGluIGRlZ3JlZXMgZnJvbSBub3J0aC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIHZhciBwMSA9IG5ldyBMYXRMb24oNTEuMTI3LCAxLjMzOCk7XG4gKiAgICAgdmFyIHAyID0gbmV3IExhdExvbig1MC45NjQsIDEuODUzKTtcbiAqICAgICB2YXIgZCA9IHAxLnJodW1iQmVhcmluZ1RvKHAyKTsgLy8gMTE2LjcgbVxuICovXG5MYXRMb24ucHJvdG90eXBlLnJodW1iQmVhcmluZ1RvID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BvaW50IGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG5cbiAgICB2YXIgz4YxID0gdGhpcy5sYXQudG9SYWRpYW5zKCksIM+GMiA9IHBvaW50LmxhdC50b1JhZGlhbnMoKTtcbiAgICB2YXIgzpTOuyA9IChwb2ludC5sb24tdGhpcy5sb24pLnRvUmFkaWFucygpO1xuICAgIC8vIGlmIGRMb24gb3ZlciAxODDCsCB0YWtlIHNob3J0ZXIgcmh1bWIgbGluZSBhY3Jvc3MgdGhlIGFudGktbWVyaWRpYW46XG4gICAgaWYgKE1hdGguYWJzKM6UzrspID4gTWF0aC5QSSkgzpTOuyA9IM6Uzrs+MCA/IC0oMipNYXRoLlBJLc6UzrspIDogKDIqTWF0aC5QSSvOlM67KTtcblxuICAgIHZhciDOlM+IID0gTWF0aC5sb2coTWF0aC50YW4oz4YyLzIrTWF0aC5QSS80KS9NYXRoLnRhbijPhjEvMitNYXRoLlBJLzQpKTtcblxuICAgIHZhciDOuCA9IE1hdGguYXRhbjIozpTOuywgzpTPiCk7XG5cbiAgICByZXR1cm4gKM64LnRvRGVncmVlcygpKzM2MCkgJSAzNjA7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGVzdGluYXRpb24gcG9pbnQgaGF2aW5nIHRyYXZlbGxlZCBhbG9uZyBhIHJodW1iIGxpbmUgZnJvbSDigJh0aGlz4oCZIHBvaW50IHRoZSBnaXZlblxuICogZGlzdGFuY2Ugb24gdGhlICBnaXZlbiBiZWFyaW5nLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGRpc3RhbmNlIC0gRGlzdGFuY2UgdHJhdmVsbGVkLCBpbiBzYW1lIHVuaXRzIGFzIGVhcnRoIHJhZGl1cyAoZGVmYXVsdDogbWV0cmVzKS5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGJlYXJpbmcgLSBCZWFyaW5nIGluIGRlZ3JlZXMgZnJvbSBub3J0aC5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtyYWRpdXM9NjM3MWUzXSAtIChNZWFuKSByYWRpdXMgb2YgZWFydGggKGRlZmF1bHRzIHRvIHJhZGl1cyBpbiBtZXRyZXMpLlxuICogQHJldHVybnMge0xhdExvbn0gRGVzdGluYXRpb24gcG9pbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUxLjEyNywgMS4zMzgpO1xuICogICAgIHZhciBwMiA9IHAxLnJodW1iRGVzdGluYXRpb25Qb2ludCg0MDMwMCwgMTE2LjcpOyAvLyA1MC45NjQywrBOLCAwMDEuODUzMMKwRVxuICovXG5MYXRMb24ucHJvdG90eXBlLnJodW1iRGVzdGluYXRpb25Qb2ludCA9IGZ1bmN0aW9uKGRpc3RhbmNlLCBiZWFyaW5nLCByYWRpdXMpIHtcbiAgICByYWRpdXMgPSAocmFkaXVzID09PSB1bmRlZmluZWQpID8gNjM3MWUzIDogTnVtYmVyKHJhZGl1cyk7XG5cbiAgICB2YXIgzrQgPSBOdW1iZXIoZGlzdGFuY2UpIC8gcmFkaXVzOyAvLyBhbmd1bGFyIGRpc3RhbmNlIGluIHJhZGlhbnNcbiAgICB2YXIgz4YxID0gdGhpcy5sYXQudG9SYWRpYW5zKCksIM67MSA9IHRoaXMubG9uLnRvUmFkaWFucygpO1xuICAgIHZhciDOuCA9IE51bWJlcihiZWFyaW5nKS50b1JhZGlhbnMoKTtcblxuICAgIHZhciDOlM+GID0gzrQgKiBNYXRoLmNvcyjOuCk7XG4gICAgdmFyIM+GMiA9IM+GMSArIM6Uz4Y7XG5cbiAgICAvLyBjaGVjayBmb3Igc29tZSBkYWZ0IGJ1Z2dlciBnb2luZyBwYXN0IHRoZSBwb2xlLCBub3JtYWxpc2UgbGF0aXR1ZGUgaWYgc29cbiAgICBpZiAoTWF0aC5hYnMoz4YyKSA+IE1hdGguUEkvMikgz4YyID0gz4YyPjAgPyBNYXRoLlBJLc+GMiA6IC1NYXRoLlBJLc+GMjtcblxuICAgIHZhciDOlM+IID0gTWF0aC5sb2coTWF0aC50YW4oz4YyLzIrTWF0aC5QSS80KS9NYXRoLnRhbijPhjEvMitNYXRoLlBJLzQpKTtcbiAgICB2YXIgcSA9IE1hdGguYWJzKM6Uz4gpID4gMTBlLTEyID8gzpTPhiAvIM6Uz4ggOiBNYXRoLmNvcyjPhjEpOyAvLyBFLVcgY291cnNlIGJlY29tZXMgaWxsLWNvbmRpdGlvbmVkIHdpdGggMC8wXG5cbiAgICB2YXIgzpTOuyA9IM60Kk1hdGguc2luKM64KS9xO1xuICAgIHZhciDOuzIgPSDOuzEgKyDOlM67O1xuXG4gICAgcmV0dXJuIG5ldyBMYXRMb24oz4YyLnRvRGVncmVlcygpLCAozrsyLnRvRGVncmVlcygpKzU0MCkgJSAzNjAgLSAxODApOyAvLyBub3JtYWxpc2UgdG8g4oiSMTgwLi4rMTgwwrBcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb3hvZHJvbWljIG1pZHBvaW50IChhbG9uZyBhIHJodW1iIGxpbmUpIGJldHdlZW4g4oCYdGhpc+KAmSBwb2ludCBhbmQgc2Vjb25kIHBvaW50LlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb259IHBvaW50IC0gTGF0aXR1ZGUvbG9uZ2l0dWRlIG9mIHNlY29uZCBwb2ludC5cbiAqIEByZXR1cm5zIHtMYXRMb259IE1pZHBvaW50IGJldHdlZW4gdGhpcyBwb2ludCBhbmQgc2Vjb25kIHBvaW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgdmFyIHAxID0gbmV3IExhdExvbig1MS4xMjcsIDEuMzM4KTtcbiAqICAgICB2YXIgcDIgPSBuZXcgTGF0TG9uKDUwLjk2NCwgMS44NTMpO1xuICogICAgIHZhciBwTWlkID0gcDEucmh1bWJNaWRwb2ludFRvKHAyKTsgLy8gNTEuMDQ1NcKwTiwgMDAxLjU5NTfCsEVcbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5yaHVtYk1pZHBvaW50VG8gPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGlmICghKHBvaW50IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9pbnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcblxuICAgIC8vIGh0dHA6Ly9tYXRoZm9ydW0ub3JnL2tiL21lc3NhZ2UuanNwYT9tZXNzYWdlSUQ9MTQ4ODM3XG5cbiAgICB2YXIgz4YxID0gdGhpcy5sYXQudG9SYWRpYW5zKCksIM67MSA9IHRoaXMubG9uLnRvUmFkaWFucygpO1xuICAgIHZhciDPhjIgPSBwb2ludC5sYXQudG9SYWRpYW5zKCksIM67MiA9IHBvaW50Lmxvbi50b1JhZGlhbnMoKTtcblxuICAgIGlmIChNYXRoLmFicyjOuzItzrsxKSA+IE1hdGguUEkpIM67MSArPSAyKk1hdGguUEk7IC8vIGNyb3NzaW5nIGFudGktbWVyaWRpYW5cblxuICAgIHZhciDPhjMgPSAoz4YxK8+GMikvMjtcbiAgICB2YXIgZjEgPSBNYXRoLnRhbihNYXRoLlBJLzQgKyDPhjEvMik7XG4gICAgdmFyIGYyID0gTWF0aC50YW4oTWF0aC5QSS80ICsgz4YyLzIpO1xuICAgIHZhciBmMyA9IE1hdGgudGFuKE1hdGguUEkvNCArIM+GMy8yKTtcbiAgICB2YXIgzrszID0gKCAozrsyLc67MSkqTWF0aC5sb2coZjMpICsgzrsxKk1hdGgubG9nKGYyKSAtIM67MipNYXRoLmxvZyhmMSkgKSAvIE1hdGgubG9nKGYyL2YxKTtcblxuICAgIGlmICghaXNGaW5pdGUozrszKSkgzrszID0gKM67MSvOuzIpLzI7IC8vIHBhcmFsbGVsIG9mIGxhdGl0dWRlXG5cbiAgICB2YXIgcCA9IExhdExvbijPhjMudG9EZWdyZWVzKCksICjOuzMudG9EZWdyZWVzKCkrNTQwKSUzNjAtMTgwKTsgLy8gbm9ybWFsaXNlIHRvIOKIkjE4MC4uKzE4MMKwXG5cbiAgICByZXR1cm4gcDtcbn07XG5cblxuLyogQXJlYSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAqL1xuXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYXJlYSBvZiBhIHNwaGVyaWNhbCBwb2x5Z29uIHdoZXJlIHRoZSBzaWRlcyBvZiB0aGUgcG9seWdvbiBhcmUgZ3JlYXQgY2lyY2xlXG4gKiBhcmNzIGpvaW5pbmcgdGhlIHZlcnRpY2VzLlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb25bXX0gcG9seWdvbiAtIEFycmF5IG9mIHBvaW50cyBkZWZpbmluZyB2ZXJ0aWNlcyBvZiB0aGUgcG9seWdvblxuICogQHBhcmFtICAge251bWJlcn0gW3JhZGl1cz02MzcxZTNdIC0gKE1lYW4pIHJhZGl1cyBvZiBlYXJ0aCAoZGVmYXVsdHMgdG8gcmFkaXVzIGluIG1ldHJlcykuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYXJlYSBvZiB0aGUgcG9seWdvbiwgaW4gdGhlIHNhbWUgdW5pdHMgYXMgcmFkaXVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBwb2x5Z29uID0gW25ldyBMYXRMb24oMCwwKSwgbmV3IExhdExvbigxLDApLCBuZXcgTGF0TG9uKDAsMSldO1xuICogICB2YXIgYXJlYSA9IExhdExvbi5hcmVhT2YocG9seWdvbik7IC8vIDYuMThlOSBtwrJcbiAqL1xuTGF0TG9uLmFyZWFPZiA9IGZ1bmN0aW9uKHBvbHlnb24sIHJhZGl1cykge1xuICAgIC8vIHVzZXMgbWV0aG9kIGR1ZSB0byBLYXJuZXk6IG9zZ2VvLW9yZy4xNTYwLng2Lm5hYmJsZS5jb20vQXJlYS1vZi1hLXNwaGVyaWNhbC1wb2x5Z29uLXRkMzg0MTYyNS5odG1sO1xuICAgIC8vIGZvciBlYWNoIGVkZ2Ugb2YgdGhlIHBvbHlnb24sIHRhbihFLzIpID0gdGFuKM6UzrsvMinCtyh0YW4oz4YxLzIpICsgdGFuKM+GMi8yKSkgLyAoMSArIHRhbijPhjEvMinCt3RhbijPhjIvMikpXG4gICAgLy8gd2hlcmUgRSBpcyB0aGUgc3BoZXJpY2FsIGV4Y2VzcyBvZiB0aGUgdHJhcGV6aXVtIG9idGFpbmVkIGJ5IGV4dGVuZGluZyB0aGUgZWRnZSB0byB0aGUgZXF1YXRvclxuXG4gICAgdmFyIFIgPSAocmFkaXVzID09PSB1bmRlZmluZWQpID8gNjM3MWUzIDogTnVtYmVyKHJhZGl1cyk7XG5cbiAgICAvLyBjbG9zZSBwb2x5Z29uIHNvIHRoYXQgbGFzdCBwb2ludCBlcXVhbHMgZmlyc3QgcG9pbnRcbiAgICB2YXIgY2xvc2VkID0gcG9seWdvblswXS5lcXVhbHMocG9seWdvbltwb2x5Z29uLmxlbmd0aC0xXSk7XG4gICAgaWYgKCFjbG9zZWQpIHBvbHlnb24ucHVzaChwb2x5Z29uWzBdKTtcblxuICAgIHZhciBuVmVydGljZXMgPSBwb2x5Z29uLmxlbmd0aCAtIDE7XG5cbiAgICB2YXIgUyA9IDA7IC8vIHNwaGVyaWNhbCBleGNlc3MgaW4gc3RlcmFkaWFuc1xuICAgIGZvciAodmFyIHY9MDsgdjxuVmVydGljZXM7IHYrKykge1xuICAgICAgICB2YXIgz4YxID0gcG9seWdvblt2XS5sYXQudG9SYWRpYW5zKCk7XG4gICAgICAgIHZhciDPhjIgPSBwb2x5Z29uW3YrMV0ubGF0LnRvUmFkaWFucygpO1xuICAgICAgICB2YXIgzpTOuyA9IChwb2x5Z29uW3YrMV0ubG9uIC0gcG9seWdvblt2XS5sb24pLnRvUmFkaWFucygpO1xuICAgICAgICB2YXIgRSA9IDIgKiBNYXRoLmF0YW4yKE1hdGgudGFuKM6UzrsvMikgKiAoTWF0aC50YW4oz4YxLzIpK01hdGgudGFuKM+GMi8yKSksIDEgKyBNYXRoLnRhbijPhjEvMikqTWF0aC50YW4oz4YyLzIpKTtcbiAgICAgICAgUyArPSBFO1xuICAgIH1cblxuICAgIGlmIChpc1BvbGVFbmNsb3NlZEJ5KHBvbHlnb24pKSBTID0gTWF0aC5hYnMoUykgLSAyKk1hdGguUEk7XG5cbiAgICB2YXIgQSA9IE1hdGguYWJzKFMgKiBSKlIpOyAvLyBhcmVhIGluIHVuaXRzIG9mIFJcblxuICAgIGlmICghY2xvc2VkKSBwb2x5Z29uLnBvcCgpOyAvLyByZXN0b3JlIHBvbHlnb24gdG8gcHJpc3RpbmUgY29uZGl0aW9uXG5cbiAgICByZXR1cm4gQTtcblxuICAgIC8vIHJldHVybnMgd2hldGhlciBwb2x5Z29uIGVuY2xvc2VzIHBvbGU6IHN1bSBvZiBjb3Vyc2UgZGVsdGFzIGFyb3VuZCBwb2xlIGlzIDDCsCByYXRoZXIgdGhhblxuICAgIC8vIG5vcm1hbCDCsTM2MMKwOiBibG9nLmVsZW1lbnQ4NC5jb20vZGV0ZXJtaW5pbmctaWYtYS1zcGhlcmljYWwtcG9seWdvbi1jb250YWlucy1hLXBvbGUuaHRtbFxuICAgIGZ1bmN0aW9uIGlzUG9sZUVuY2xvc2VkQnkocG9seWdvbikge1xuICAgICAgICAvLyBUT0RPOiBhbnkgYmV0dGVyIHRlc3QgdGhhbiB0aGlzP1xuICAgICAgICB2YXIgzqPOlCA9IDA7XG4gICAgICAgIHZhciBwcmV2QnJuZyA9IHBvbHlnb25bMF0uYmVhcmluZ1RvKHBvbHlnb25bMV0pO1xuICAgICAgICBmb3IgKHZhciB2PTA7IHY8cG9seWdvbi5sZW5ndGgtMTsgdisrKSB7XG4gICAgICAgICAgICB2YXIgaW5pdEJybmcgPSBwb2x5Z29uW3ZdLmJlYXJpbmdUbyhwb2x5Z29uW3YrMV0pO1xuICAgICAgICAgICAgdmFyIGZpbmFsQnJuZyA9IHBvbHlnb25bdl0uZmluYWxCZWFyaW5nVG8ocG9seWdvblt2KzFdKTtcbiAgICAgICAgICAgIM6jzpQgKz0gKGluaXRCcm5nIC0gcHJldkJybmcgKyA1NDApICUgMzYwIC0gMTgwO1xuICAgICAgICAgICAgzqPOlCArPSAoZmluYWxCcm5nIC0gaW5pdEJybmcgKyA1NDApICUgMzYwIC0gMTgwO1xuICAgICAgICAgICAgcHJldkJybmcgPSBmaW5hbEJybmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluaXRCcm5nID0gcG9seWdvblswXS5iZWFyaW5nVG8ocG9seWdvblsxXSk7XG4gICAgICAgIM6jzpQgKz0gKGluaXRCcm5nIC0gcHJldkJybmcgKyA1NDApICUgMzYwIC0gMTgwO1xuICAgICAgICAvLyBUT0RPOiBmaXggKGludGVybWl0dGFudCkgZWRnZSBjcm9zc2luZyBwb2xlIC0gZWcgKDg1LDkwKSwgKDg1LDApLCAoODUsLTkwKVxuICAgICAgICB2YXIgZW5jbG9zZWQgPSBNYXRoLmFicyjOo86UKSA8IDkwOyAvLyAwwrAtaXNoXG4gICAgICAgIHJldHVybiBlbmNsb3NlZDtcbiAgICB9XG59O1xuXG5cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuXG4vKipcbiAqIENoZWNrcyBpZiBhbm90aGVyIHBvaW50IGlzIGVxdWFsIHRvIOKAmHRoaXPigJkgcG9pbnQuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBQb2ludCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0IHRoaXMgcG9pbnQuXG4gKiBAcmV0dXJucyB7Ym9vbH0gICBUcnVlIGlmIHBvaW50cyBhcmUgaWRlbnRpY2FsLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBwMSA9IG5ldyBMYXRMb24oNTIuMjA1LCAwLjExOSk7XG4gKiAgIHZhciBwMiA9IG5ldyBMYXRMb24oNTIuMjA1LCAwLjExOSk7XG4gKiAgIHZhciBlcXVhbCA9IHAxLmVxdWFscyhwMik7IC8vIHRydWVcbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGlmICghKHBvaW50IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9pbnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcblxuICAgIGlmICh0aGlzLmxhdCAhPSBwb2ludC5sYXQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5sb24gIT0gcG9pbnQubG9uKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIOKAmHRoaXPigJkgcG9pbnQsIGZvcm1hdHRlZCBhcyBkZWdyZWVzLCBkZWdyZWVzK21pbnV0ZXMsIG9yXG4gKiBkZWdyZWVzK21pbnV0ZXMrc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBbZm9ybWF0PWRtc10gLSBGb3JtYXQgcG9pbnQgYXMgJ2QnLCAnZG0nLCAnZG1zJy5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IFtkcD0wfDJ8NF0gLSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gdXNlIC0gZGVmYXVsdCAwIGZvciBkbXMsIDIgZm9yIGRtLCA0IGZvciBkLlxuICogQHJldHVybnMge3N0cmluZ30gQ29tbWEtc2VwYXJhdGVkIGxhdGl0dWRlL2xvbmdpdHVkZS5cbiAqL1xuTGF0TG9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKGZvcm1hdCwgZHApIHtcbiAgICByZXR1cm4gRG1zLnRvTGF0KHRoaXMubGF0LCBmb3JtYXQsIGRwKSArICcsICcgKyBEbXMudG9Mb24odGhpcy5sb24sIGZvcm1hdCwgZHApO1xufTtcblxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5cbi8qKiBFeHRlbmQgTnVtYmVyIG9iamVjdCB3aXRoIG1ldGhvZCB0byBjb252ZXJ0IG51bWVyaWMgZGVncmVlcyB0byByYWRpYW5zICovXG5pZiAoTnVtYmVyLnByb3RvdHlwZS50b1JhZGlhbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIE51bWJlci5wcm90b3R5cGUudG9SYWRpYW5zID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzICogTWF0aC5QSSAvIDE4MDsgfTtcbn1cblxuLyoqIEV4dGVuZCBOdW1iZXIgb2JqZWN0IHdpdGggbWV0aG9kIHRvIGNvbnZlcnQgcmFkaWFucyB0byBudW1lcmljIChzaWduZWQpIGRlZ3JlZXMgKi9cbmlmIChOdW1iZXIucHJvdG90eXBlLnRvRGVncmVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgTnVtYmVyLnByb3RvdHlwZS50b0RlZ3JlZXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgKiAxODAgLyBNYXRoLlBJOyB9O1xufVxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBMYXRMb247IC8vIOKJoSBleHBvcnQgZGVmYXVsdCBMYXRMb25cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dlb2Rlc3kvbGF0bG9uLXNwaGVyaWNhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cbi8qIFZpbmNlbnR5IERpcmVjdCBhbmQgSW52ZXJzZSBTb2x1dGlvbiBvZiBHZW9kZXNpY3Mgb24gdGhlIEVsbGlwc29pZCAoYykgQ2hyaXMgVmVuZXNzIDIwMDItMjAxNiAgKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNSVQgTGljZW5jZSAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLXZpbmNlbnR5Lmh0bWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9nZW9kZXN5L2RvY3MvbW9kdWxlLWxhdGxvbi12aW5jZW50eS5odG1sICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuaWYgKHR5cGVvZiBtb2R1bGUhPSd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB2YXIgTGF0TG9uID0gcmVxdWlyZSgnLi9sYXRsb24tZWxsaXBzb2lkYWwuanMnKTsgLy8g4omhIGltcG9ydCBMYXRMb24gZnJvbSAnbGF0bG9uLWVsbGlwc29pZGFsLmpzJ1xuXG5cbi8qKlxuICogRGlyZWN0IGFuZCBpbnZlcnNlIHNvbHV0aW9ucyBvZiBnZW9kZXNpY3Mgb24gdGhlIGVsbGlwc29pZCB1c2luZyBWaW5jZW50eSBmb3JtdWxhZS5cbiAqXG4gKiBGcm9tOiBUIFZpbmNlbnR5LCBcIkRpcmVjdCBhbmQgSW52ZXJzZSBTb2x1dGlvbnMgb2YgR2VvZGVzaWNzIG9uIHRoZSBFbGxpcHNvaWQgd2l0aCBhcHBsaWNhdGlvbiBvZlxuICogICAgICAgbmVzdGVkIGVxdWF0aW9uc1wiLCBTdXJ2ZXkgUmV2aWV3LCB2b2wgWFhJSUkgbm8gMTc2LCAxOTc1LlxuICogICAgICAgd3d3Lm5ncy5ub2FhLmdvdi9QVUJTX0xJQi9pbnZlcnNlLnBkZi5cbiAqXG4gKiBAbW9kdWxlICBsYXRsb24tdmluY2VudHlcbiAqIEBleHRlbmRzIGxhdGxvbi1lbGxpcHNvaWRhbFxuICovXG4vKiogQGNsYXNzIExhdExvbiAqL1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiDigJh0aGlz4oCZIHBvaW50IGFuZCBkZXN0aW5hdGlvbiBwb2ludCBhbG9uZyBhIGdlb2Rlc2ljLCB1c2luZyBWaW5jZW50eVxuICogaW52ZXJzZSBzb2x1dGlvbi5cbiAqXG4gKiBOb3RlOiB0aGUgZGF0dW0gdXNlZCBpcyBvZiDigJh0aGlz4oCZIHBvaW50OyBkaXN0YW5jZSBpcyBvbiB0aGUgc3VyZmFjZSBvZiB0aGUgZWxsaXBzb2lkIChoZWlnaHQgaXNcbiAqIGlnbm9yZWQpLlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb259IHBvaW50IC0gTGF0aXR1ZGUvbG9uZ2l0dWRlIG9mIGRlc3RpbmF0aW9uIHBvaW50LlxuICogQHJldHVybnMgKE51bWJlcn0gRGlzdGFuY2UgaW4gbWV0cmVzIGJldHdlZW4gcG9pbnRzIG9yIE5hTiBpZiBmYWlsZWQgdG8gY29udmVyZ2UuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHAxID0gbmV3IExhdExvbig1MC4wNjYzMiwgLTUuNzE0NzUpO1xuICogICB2YXIgcDIgPSBuZXcgTGF0TG9uKDU4LjY0NDAyLCAtMy4wNzAwOSk7XG4gKiAgIHZhciBkID0gcDEuZGlzdGFuY2VUbyhwMik7IC8vIDk2OSw5NTQuMTY2IG1cbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5kaXN0YW5jZVRvID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BvaW50IGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnZlcnNlKHBvaW50KS5kaXN0YW5jZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBOYU47IC8vIGZhaWxlZCB0byBjb252ZXJnZVxuICAgIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbml0aWFsIGJlYXJpbmcgKGZvcndhcmQgYXppbXV0aCkgdG8gdHJhdmVsIGFsb25nIGEgZ2VvZGVzaWMgZnJvbSDigJh0aGlz4oCZIHBvaW50IHRvIHRoZVxuICogc3BlY2lmaWVkIHBvaW50LCB1c2luZyBWaW5jZW50eSBpbnZlcnNlIHNvbHV0aW9uLlxuICpcbiAqIE5vdGU6IHRoZSBkYXR1bSB1c2VkIGlzIG9mIOKAmHRoaXPigJkgcG9pbnQuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBMYXRpdHVkZS9sb25naXR1ZGUgb2YgZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAgaW5pdGlhbCBCZWFyaW5nIGluIGRlZ3JlZXMgZnJvbSBub3J0aCAoMMKwLi4zNjDCsCkgb3IgTmFOIGlmIGZhaWxlZCB0byBjb252ZXJnZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUwLjA2NjMyLCAtNS43MTQ3NSk7XG4gKiAgIHZhciBwMiA9IG5ldyBMYXRMb24oNTguNjQ0MDIsIC0zLjA3MDA5KTtcbiAqICAgdmFyIGIxID0gcDEuaW5pdGlhbEJlYXJpbmdUbyhwMik7IC8vIDkuMTQxOcKwXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuaW5pdGlhbEJlYXJpbmdUbyA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgaWYgKCEocG9pbnQgaW5zdGFuY2VvZiBMYXRMb24pKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdwb2ludCBpcyBub3QgTGF0TG9uIG9iamVjdCcpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW52ZXJzZShwb2ludCkuaW5pdGlhbEJlYXJpbmc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gTmFOOyAvLyBmYWlsZWQgdG8gY29udmVyZ2VcbiAgICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmluYWwgYmVhcmluZyAocmV2ZXJzZSBhemltdXRoKSBoYXZpbmcgdHJhdmVsbGVkIGFsb25nIGEgZ2VvZGVzaWMgZnJvbSDigJh0aGlz4oCZIHBvaW50XG4gKiB0byB0aGUgc3BlY2lmaWVkIHBvaW50LCB1c2luZyBWaW5jZW50eSBpbnZlcnNlIHNvbHV0aW9uLlxuICpcbiAqIE5vdGU6IHRoZSBkYXR1bSB1c2VkIGlzIG9mIOKAmHRoaXPigJkgcG9pbnQuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBMYXRpdHVkZS9sb25naXR1ZGUgb2YgZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAgSW5pdGlhbCBiZWFyaW5nIGluIGRlZ3JlZXMgZnJvbSBub3J0aCAoMMKwLi4zNjDCsCkgb3IgTmFOIGlmIGZhaWxlZCB0byBjb252ZXJnZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUwLjA2NjMyLCAtNS43MTQ3NSk7XG4gKiAgIHZhciBwMiA9IG5ldyBMYXRMb24oNTguNjQ0MDIsIC0zLjA3MDA5KTtcbiAqICAgdmFyIGIyID0gcDEuZmluYWxCZWFyaW5nVG8ocDIpOyAvLyAxMS4yOTcywrBcbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5maW5hbEJlYXJpbmdUbyA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgaWYgKCEocG9pbnQgaW5zdGFuY2VvZiBMYXRMb24pKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdwb2ludCBpcyBub3QgTGF0TG9uIG9iamVjdCcpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW52ZXJzZShwb2ludCkuZmluYWxCZWFyaW5nO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIE5hTjsgLy8gZmFpbGVkIHRvIGNvbnZlcmdlXG4gICAgfVxufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIHBvaW50IGhhdmluZyB0cmF2ZWxsZWQgdGhlIGdpdmVuIGRpc3RhbmNlIGFsb25nIGEgZ2VvZGVzaWMgZ2l2ZW4gYnlcbiAqIGluaXRpYWwgYmVhcmluZyBmcm9tIOKAmHRoaXPigJkgcG9pbnQsIHVzaW5nIFZpbmNlbnR5IGRpcmVjdCBzb2x1dGlvbi5cbiAqXG4gKiBOb3RlOiB0aGUgZGF0dW0gdXNlZCBpcyBvZiDigJh0aGlz4oCZIHBvaW50OyBkaXN0YW5jZSBpcyBvbiB0aGUgc3VyZmFjZSBvZiB0aGUgZWxsaXBzb2lkIChoZWlnaHQgaXNcbiAqIGlnbm9yZWQpLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGRpc3RhbmNlIC0gRGlzdGFuY2UgdHJhdmVsbGVkIGFsb25nIHRoZSBnZW9kZXNpYyBpbiBtZXRyZXMuXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBpbml0aWFsQmVhcmluZyAtIEluaXRpYWwgYmVhcmluZyBpbiBkZWdyZWVzIGZyb20gbm9ydGguXG4gKiBAcmV0dXJucyB7TGF0TG9ufSBEZXN0aW5hdGlvbiBwb2ludC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKC0zNy45NTEwMywgMTQ0LjQyNDg3KTtcbiAqICAgdmFyIHAyID0gcDEuZGVzdGluYXRpb25Qb2ludCg1NDk3Mi4yNzEsIDMwNi44NjgxNik7IC8vIDM3LjY1MjjCsFMsIDE0My45MjY1wrBFXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuZGVzdGluYXRpb25Qb2ludCA9IGZ1bmN0aW9uKGRpc3RhbmNlLCBpbml0aWFsQmVhcmluZykge1xuICAgIHJldHVybiB0aGlzLmRpcmVjdChOdW1iZXIoZGlzdGFuY2UpLCBOdW1iZXIoaW5pdGlhbEJlYXJpbmcpKS5wb2ludDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaW5hbCBiZWFyaW5nIChyZXZlcnNlIGF6aW11dGgpIGhhdmluZyB0cmF2ZWxsZWQgYWxvbmcgYSBnZW9kZXNpYyBnaXZlbiBieSBpbml0aWFsXG4gKiBiZWFyaW5nIGZvciBhIGdpdmVuIGRpc3RhbmNlIGZyb20g4oCYdGhpc+KAmSBwb2ludCwgdXNpbmcgVmluY2VudHkgZGlyZWN0IHNvbHV0aW9uLlxuICpcbiAqIE5vdGU6IHRoZSBkYXR1bSB1c2VkIGlzIG9mIOKAmHRoaXPigJkgcG9pbnQ7IGRpc3RhbmNlIGlzIG9uIHRoZSBzdXJmYWNlIG9mIHRoZSBlbGxpcHNvaWQgKGhlaWdodCBpc1xuICogaWdub3JlZCkuXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gZGlzdGFuY2UgLSBEaXN0YW5jZSB0cmF2ZWxsZWQgYWxvbmcgdGhlIGdlb2Rlc2ljIGluIG1ldHJlcy5cbiAqIEBwYXJhbSAgIHtMYXRMb259IGluaXRpYWxCZWFyaW5nIC0gSW5pdGlhbCBiZWFyaW5nIGluIGRlZ3JlZXMgZnJvbSBub3J0aC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IEZpbmFsIGJlYXJpbmcgaW4gZGVncmVlcyBmcm9tIG5vcnRoICgwwrAuLjM2MMKwKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKC0zNy45NTEwMywgMTQ0LjQyNDg3KTtcbiAqICAgdmFyIGIyID0gcDEuZmluYWxCZWFyaW5nT24oMzA2Ljg2ODE2LCA1NDk3Mi4yNzEpOyAvLyAzMDcuMTczNsKwXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuZmluYWxCZWFyaW5nT24gPSBmdW5jdGlvbihkaXN0YW5jZSwgaW5pdGlhbEJlYXJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kaXJlY3QoTnVtYmVyKGRpc3RhbmNlKSwgTnVtYmVyKGluaXRpYWxCZWFyaW5nKSkuZmluYWxCZWFyaW5nO1xufTtcblxuXG4vKipcbiAqIFZpbmNlbnR5IGRpcmVjdCBjYWxjdWxhdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge251bWJlcn0gZGlzdGFuY2UgLSBEaXN0YW5jZSBhbG9uZyBiZWFyaW5nIGluIG1ldHJlcy5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGluaXRpYWxCZWFyaW5nIC0gSW5pdGlhbCBiZWFyaW5nIGluIGRlZ3JlZXMgZnJvbSBub3J0aC5cbiAqIEByZXR1cm5zIChPYmplY3R9IE9iamVjdCBpbmNsdWRpbmcgcG9pbnQgKGRlc3RpbmF0aW9uIHBvaW50KSwgZmluYWxCZWFyaW5nLlxuICogQHRocm93cyAge0Vycm9yfSAgSWYgZm9ybXVsYSBmYWlsZWQgdG8gY29udmVyZ2UuXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuZGlyZWN0ID0gZnVuY3Rpb24oZGlzdGFuY2UsIGluaXRpYWxCZWFyaW5nKSB7XG4gICAgdmFyIM+GMSA9IHRoaXMubGF0LnRvUmFkaWFucygpLCDOuzEgPSB0aGlzLmxvbi50b1JhZGlhbnMoKTtcbiAgICB2YXIgzrExID0gaW5pdGlhbEJlYXJpbmcudG9SYWRpYW5zKCk7XG4gICAgdmFyIHMgPSBkaXN0YW5jZTtcblxuICAgIHZhciBhID0gdGhpcy5kYXR1bS5lbGxpcHNvaWQuYSwgYiA9IHRoaXMuZGF0dW0uZWxsaXBzb2lkLmIsIGYgPSB0aGlzLmRhdHVtLmVsbGlwc29pZC5mO1xuXG4gICAgdmFyIHNpbs6xMSA9IE1hdGguc2luKM6xMSk7XG4gICAgdmFyIGNvc86xMSA9IE1hdGguY29zKM6xMSk7XG5cbiAgICB2YXIgdGFuVTEgPSAoMS1mKSAqIE1hdGgudGFuKM+GMSksIGNvc1UxID0gMSAvIE1hdGguc3FydCgoMSArIHRhblUxKnRhblUxKSksIHNpblUxID0gdGFuVTEgKiBjb3NVMTtcbiAgICB2YXIgz4MxID0gTWF0aC5hdGFuMih0YW5VMSwgY29zzrExKTtcbiAgICB2YXIgc2luzrEgPSBjb3NVMSAqIHNpbs6xMTtcbiAgICB2YXIgY29zU3HOsSA9IDEgLSBzaW7OsSpzaW7OsTtcbiAgICB2YXIgdVNxID0gY29zU3HOsSAqIChhKmEgLSBiKmIpIC8gKGIqYik7XG4gICAgdmFyIEEgPSAxICsgdVNxLzE2Mzg0Kig0MDk2K3VTcSooLTc2OCt1U3EqKDMyMC0xNzUqdVNxKSkpO1xuICAgIHZhciBCID0gdVNxLzEwMjQgKiAoMjU2K3VTcSooLTEyOCt1U3EqKDc0LTQ3KnVTcSkpKTtcblxuICAgIHZhciBjb3Myz4NNLCBzaW7PgywgY29zz4MsIM6Uz4M7XG5cbiAgICB2YXIgz4MgPSBzIC8gKGIqQSksIM+DyrksIGl0ZXJhdGlvbnMgPSAwO1xuICAgIGRvIHtcbiAgICAgICAgY29zMs+DTSA9IE1hdGguY29zKDIqz4MxICsgz4MpO1xuICAgICAgICBzaW7PgyA9IE1hdGguc2luKM+DKTtcbiAgICAgICAgY29zz4MgPSBNYXRoLmNvcyjPgyk7XG4gICAgICAgIM6Uz4MgPSBCKnNpbs+DKihjb3Myz4NNK0IvNCooY29zz4MqKC0xKzIqY29zMs+DTSpjb3Myz4NNKS1cbiAgICAgICAgICAgIEIvNipjb3Myz4NNKigtMys0KnNpbs+DKnNpbs+DKSooLTMrNCpjb3Myz4NNKmNvczLPg00pKSk7XG4gICAgICAgIM+DyrkgPSDPgztcbiAgICAgICAgz4MgPSBzIC8gKGIqQSkgKyDOlM+DO1xuICAgIH0gd2hpbGUgKE1hdGguYWJzKM+DLc+DyrkpID4gMWUtMTIgJiYgKytpdGVyYXRpb25zPDIwMCk7XG4gICAgaWYgKGl0ZXJhdGlvbnM+PTIwMCkgdGhyb3cgbmV3IEVycm9yKCdGb3JtdWxhIGZhaWxlZCB0byBjb252ZXJnZScpOyAvLyBub3QgcG9zc2libGU/XG5cbiAgICB2YXIgeCA9IHNpblUxKnNpbs+DIC0gY29zVTEqY29zz4MqY29zzrExO1xuICAgIHZhciDPhjIgPSBNYXRoLmF0YW4yKHNpblUxKmNvc8+DICsgY29zVTEqc2luz4MqY29zzrExLCAoMS1mKSpNYXRoLnNxcnQoc2luzrEqc2luzrEgKyB4KngpKTtcbiAgICB2YXIgzrsgPSBNYXRoLmF0YW4yKHNpbs+DKnNpbs6xMSwgY29zVTEqY29zz4MgLSBzaW5VMSpzaW7Pgypjb3POsTEpO1xuICAgIHZhciBDID0gZi8xNipjb3NTcc6xKig0K2YqKDQtMypjb3NTcc6xKSk7XG4gICAgdmFyIEwgPSDOuyAtICgxLUMpICogZiAqIHNpbs6xICpcbiAgICAgICAgKM+DICsgQypzaW7PgyooY29zMs+DTStDKmNvc8+DKigtMSsyKmNvczLPg00qY29zMs+DTSkpKTtcbiAgICB2YXIgzrsyID0gKM67MStMKzMqTWF0aC5QSSklKDIqTWF0aC5QSSkgLSBNYXRoLlBJOyAgLy8gbm9ybWFsaXNlIHRvIC0xODAuLisxODBcblxuICAgIHZhciDOsTIgPSBNYXRoLmF0YW4yKHNpbs6xLCAteCk7XG4gICAgzrEyID0gKM6xMiArIDIqTWF0aC5QSSkgJSAoMipNYXRoLlBJKTsgLy8gbm9ybWFsaXNlIHRvIDAuLjM2MFxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6ICAgICAgICBuZXcgTGF0TG9uKM+GMi50b0RlZ3JlZXMoKSwgzrsyLnRvRGVncmVlcygpLCB0aGlzLmRhdHVtKSxcbiAgICAgICAgZmluYWxCZWFyaW5nOiDOsTIudG9EZWdyZWVzKCksXG4gICAgfTtcbn07XG5cblxuLyoqXG4gKiBWaW5jZW50eSBpbnZlcnNlIGNhbGN1bGF0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7TGF0TG9ufSBwb2ludCAtIExhdGl0dWRlL2xvbmdpdHVkZSBvZiBkZXN0aW5hdGlvbiBwb2ludC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IE9iamVjdCBpbmNsdWRpbmcgZGlzdGFuY2UsIGluaXRpYWxCZWFyaW5nLCBmaW5hbEJlYXJpbmcuXG4gKiBAdGhyb3dzICB7RXJyb3J9ICBJZiBmb3JtdWxhIGZhaWxlZCB0byBjb252ZXJnZS5cbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5pbnZlcnNlID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICB2YXIgcDEgPSB0aGlzLCBwMiA9IHBvaW50O1xuICAgIHZhciDPhjEgPSBwMS5sYXQudG9SYWRpYW5zKCksIM67MSA9IHAxLmxvbi50b1JhZGlhbnMoKTtcbiAgICB2YXIgz4YyID0gcDIubGF0LnRvUmFkaWFucygpLCDOuzIgPSBwMi5sb24udG9SYWRpYW5zKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuZGF0dW0uZWxsaXBzb2lkLmEsIGIgPSB0aGlzLmRhdHVtLmVsbGlwc29pZC5iLCBmID0gdGhpcy5kYXR1bS5lbGxpcHNvaWQuZjtcblxuICAgIHZhciBMID0gzrsyIC0gzrsxO1xuICAgIHZhciB0YW5VMSA9ICgxLWYpICogTWF0aC50YW4oz4YxKSwgY29zVTEgPSAxIC8gTWF0aC5zcXJ0KCgxICsgdGFuVTEqdGFuVTEpKSwgc2luVTEgPSB0YW5VMSAqIGNvc1UxO1xuICAgIHZhciB0YW5VMiA9ICgxLWYpICogTWF0aC50YW4oz4YyKSwgY29zVTIgPSAxIC8gTWF0aC5zcXJ0KCgxICsgdGFuVTIqdGFuVTIpKSwgc2luVTIgPSB0YW5VMiAqIGNvc1UyO1xuXG4gICAgdmFyIHNpbs67LCBjb3POuywgc2luU3HPgywgc2luz4MsIGNvc8+DLCDPgywgc2luzrEsIGNvc1NxzrEsIGNvczLPg00sIEM7XG5cbiAgICB2YXIgzrsgPSBMLCDOu8q5LCBpdGVyYXRpb25zID0gMDtcbiAgICBkbyB7XG4gICAgICAgIHNpbs67ID0gTWF0aC5zaW4ozrspO1xuICAgICAgICBjb3POuyA9IE1hdGguY29zKM67KTtcbiAgICAgICAgc2luU3HPgyA9IChjb3NVMipzaW7OuykgKiAoY29zVTIqc2luzrspICsgKGNvc1UxKnNpblUyLXNpblUxKmNvc1UyKmNvc867KSAqIChjb3NVMSpzaW5VMi1zaW5VMSpjb3NVMipjb3POuyk7XG4gICAgICAgIHNpbs+DID0gTWF0aC5zcXJ0KHNpblNxz4MpO1xuICAgICAgICBpZiAoc2luz4MgPT0gMCkgcmV0dXJuIDA7ICAvLyBjby1pbmNpZGVudCBwb2ludHNcbiAgICAgICAgY29zz4MgPSBzaW5VMSpzaW5VMiArIGNvc1UxKmNvc1UyKmNvc867O1xuICAgICAgICDPgyA9IE1hdGguYXRhbjIoc2luz4MsIGNvc8+DKTtcbiAgICAgICAgc2luzrEgPSBjb3NVMSAqIGNvc1UyICogc2luzrsgLyBzaW7PgztcbiAgICAgICAgY29zU3HOsSA9IDEgLSBzaW7OsSpzaW7OsTtcbiAgICAgICAgY29zMs+DTSA9IGNvc8+DIC0gMipzaW5VMSpzaW5VMi9jb3NTcc6xO1xuICAgICAgICBpZiAoaXNOYU4oY29zMs+DTSkpIGNvczLPg00gPSAwOyAgLy8gZXF1YXRvcmlhbCBsaW5lOiBjb3NTcc6xPTAgKMKnNilcbiAgICAgICAgQyA9IGYvMTYqY29zU3HOsSooNCtmKig0LTMqY29zU3HOsSkpO1xuICAgICAgICDOu8q5ID0gzrs7XG4gICAgICAgIM67ID0gTCArICgxLUMpICogZiAqIHNpbs6xICogKM+DICsgQypzaW7PgyooY29zMs+DTStDKmNvc8+DKigtMSsyKmNvczLPg00qY29zMs+DTSkpKTtcbiAgICB9IHdoaWxlIChNYXRoLmFicyjOuy3Ou8q5KSA+IDFlLTEyICYmICsraXRlcmF0aW9uczwyMDApO1xuICAgIGlmIChpdGVyYXRpb25zPj0yMDApIHRocm93IG5ldyBFcnJvcignRm9ybXVsYSBmYWlsZWQgdG8gY29udmVyZ2UnKTtcblxuICAgIHZhciB1U3EgPSBjb3NTcc6xICogKGEqYSAtIGIqYikgLyAoYipiKTtcbiAgICB2YXIgQSA9IDEgKyB1U3EvMTYzODQqKDQwOTYrdVNxKigtNzY4K3VTcSooMzIwLTE3NSp1U3EpKSk7XG4gICAgdmFyIEIgPSB1U3EvMTAyNCAqICgyNTYrdVNxKigtMTI4K3VTcSooNzQtNDcqdVNxKSkpO1xuICAgIHZhciDOlM+DID0gQipzaW7PgyooY29zMs+DTStCLzQqKGNvc8+DKigtMSsyKmNvczLPg00qY29zMs+DTSktXG4gICAgICAgIEIvNipjb3Myz4NNKigtMys0KnNpbs+DKnNpbs+DKSooLTMrNCpjb3Myz4NNKmNvczLPg00pKSk7XG5cbiAgICB2YXIgcyA9IGIqQSooz4MtzpTPgyk7XG5cbiAgICB2YXIgzrExID0gTWF0aC5hdGFuMihjb3NVMipzaW7OuywgIGNvc1UxKnNpblUyLXNpblUxKmNvc1UyKmNvc867KTtcbiAgICB2YXIgzrEyID0gTWF0aC5hdGFuMihjb3NVMSpzaW7OuywgLXNpblUxKmNvc1UyK2Nvc1UxKnNpblUyKmNvc867KTtcblxuICAgIM6xMSA9ICjOsTEgKyAyKk1hdGguUEkpICUgKDIqTWF0aC5QSSk7IC8vIG5vcm1hbGlzZSB0byAwLi4zNjBcbiAgICDOsTIgPSAozrEyICsgMipNYXRoLlBJKSAlICgyKk1hdGguUEkpOyAvLyBub3JtYWxpc2UgdG8gMC4uMzYwXG5cbiAgICBzID0gTnVtYmVyKHMudG9GaXhlZCgzKSk7IC8vIHJvdW5kIHRvIDFtbSBwcmVjaXNpb25cbiAgICByZXR1cm4geyBkaXN0YW5jZTogcywgaW5pdGlhbEJlYXJpbmc6IM6xMS50b0RlZ3JlZXMoKSwgZmluYWxCZWFyaW5nOiDOsTIudG9EZWdyZWVzKCkgfTtcbn07XG5cblxuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuXG4vKiogRXh0ZW5kIE51bWJlciBvYmplY3Qgd2l0aCBtZXRob2QgdG8gY29udmVydCBudW1lcmljIGRlZ3JlZXMgdG8gcmFkaWFucyAqL1xuaWYgKE51bWJlci5wcm90b3R5cGUudG9SYWRpYW5zID09PSB1bmRlZmluZWQpIHtcbiAgICBOdW1iZXIucHJvdG90eXBlLnRvUmFkaWFucyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyAqIE1hdGguUEkgLyAxODA7IH07XG59XG5cbi8qKiBFeHRlbmQgTnVtYmVyIG9iamVjdCB3aXRoIG1ldGhvZCB0byBjb252ZXJ0IHJhZGlhbnMgdG8gbnVtZXJpYyAoc2lnbmVkKSBkZWdyZWVzICovXG5pZiAoTnVtYmVyLnByb3RvdHlwZS50b0RlZ3JlZXMgPT09IHVuZGVmaW5lZCkge1xuICAgIE51bWJlci5wcm90b3R5cGUudG9EZWdyZWVzID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzICogMTgwIC8gTWF0aC5QSTsgfTtcbn1cblxuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gTGF0TG9uOyAvLyDiiaEgZXhwb3J0IGRlZmF1bHQgTGF0TG9uXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9nZW9kZXN5L2xhdGxvbi12aW5jZW50eS5qc1xuLy8gbW9kdWxlIGlkID0gMjI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cbi8qICBWZWN0b3ItYmFzZWQgc3BoZXJpY2FsIGdlb2RldGljIChsYXRpdHVkZS9sb25naXR1ZGUpIGZ1bmN0aW9ucyAgICAoYykgQ2hyaXMgVmVuZXNzIDIwMTEtMjAxNiAgKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNSVQgTGljZW5jZSAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLXZlY3RvcnMuaHRtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9nZW9kZXN5L2RvY3MvbW9kdWxlLWxhdGxvbi1udmVjdG9yLXNwaGVyaWNhbC5odG1sICAgICAgICAgICAgICAgKi9cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuaWYgKHR5cGVvZiBtb2R1bGUhPSd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB2YXIgVmVjdG9yM2QgPSByZXF1aXJlKCcuL3ZlY3RvcjNkLmpzJyk7IC8vIOKJoSBpbXBvcnQgVmVjdG9yM2QgZnJvbSAndmVjdG9yM2QuanMnXG5pZiAodHlwZW9mIG1vZHVsZSE9J3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHZhciBEbXMgPSByZXF1aXJlKCcuL2Rtcy5qcycpOyAgICAgICAgICAgLy8g4omhIGltcG9ydCBEbXMgZnJvbSAnZG1zLmpzJ1xuXG5cbi8qKlxuICogVG9vbHMgZm9yIHdvcmtpbmcgd2l0aCBwb2ludHMgYW5kIHBhdGhzIG9uIChhIHNwaGVyaWNhbCBtb2RlbCBvZikgdGhlIGVhcnRo4oCZcyBzdXJmYWNlIHVzaW5nIGFcbiAqIHZlY3Rvci1iYXNlZCBhcHByb2FjaCB1c2luZyDigJhuLXZlY3RvcnPigJkgKHJhdGhlciB0aGFuIHRoZSBtb3JlIGNvbW1vbiBzcGhlcmljYWwgdHJpZ29ub21ldHJ5O1xuICogYSB2ZWN0b3ItYmFzZWQgYXBwcm9hY2ggbWFrZXMgbWFueSBjYWxjdWxhdGlvbnMgbXVjaCBzaW1wbGVyLCBhbmQgZWFzaWVyIHRvIGZvbGxvdywgY29tcGFyZWRcbiAqIHdpdGggdHJpZ29ub21ldHJpYyBlcXVpdmFsZW50cykuXG4gKlxuICogTm90ZSBvbiBhIHNwaGVyaWNhbCBtb2RlbCBlYXJ0aCwgYW4gbi12ZWN0b3IgaXMgZXF1aXZhbGVudCB0byBhIG5vcm1hbGlzZWQgdmVyc2lvbiBvZiBhbiAoRUNFRilcbiAqIGNhcnRlc2lhbiBjb29yZGluYXRlLlxuICpcbiAqIEBtb2R1bGUgICBsYXRsb24tdmVjdG9yc1xuICogQHJlcXVpcmVzIHZlY3RvcjNkXG4gKiBAcmVxdWlyZXMgZG1zXG4gKi9cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBMYXRMb24gcG9pbnQgb24gc3BoZXJpY2FsIG1vZGVsIGVhcnRoLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGxhdCAtIExhdGl0dWRlIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gbG9uIC0gTG9uZ2l0dWRlIGluIGRlZ3JlZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHAxID0gbmV3IExhdExvbig1Mi4yMDUsIDAuMTE5KTtcbiAqL1xuZnVuY3Rpb24gTGF0TG9uKGxhdCwgbG9uKSB7XG4gICAgLy8gYWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0ICduZXcnXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIExhdExvbikpIHJldHVybiBuZXcgTGF0TG9uKGxhdCwgbG9uKTtcblxuICAgIHRoaXMubGF0ID0gTnVtYmVyKGxhdCk7XG4gICAgdGhpcy5sb24gPSBOdW1iZXIobG9uKTtcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIOKAmHRoaXPigJkgbGF0L2xvbiBwb2ludCB0byBWZWN0b3IzZCBuLXZlY3RvciAobm9ybWFsIHRvIGVhcnRoJ3Mgc3VyZmFjZSkuXG4gKlxuICogQHJldHVybnMge1ZlY3RvcjNkfSBOb3JtYWxpc2VkIG4tdmVjdG9yIHJlcHJlc2VudGluZyBsYXQvbG9uIHBvaW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBwID0gbmV3IExhdExvbig0NSwgNDUpO1xuICogICB2YXIgdiA9IHAudG9WZWN0b3IoKTsgLy8gWzAuNTAwMCwwLjUwMDAsMC43MDcxXVxuICovXG5MYXRMb24ucHJvdG90eXBlLnRvVmVjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIM+GID0gdGhpcy5sYXQudG9SYWRpYW5zKCk7XG4gICAgdmFyIM67ID0gdGhpcy5sb24udG9SYWRpYW5zKCk7XG5cbiAgICAvLyByaWdodC1oYW5kZWQgdmVjdG9yOiB4IC0+IDDCsEUsMMKwTjsgeSAtPiA5MMKwRSwwwrBOLCB6IC0+IDkwwrBOXG4gICAgdmFyIHggPSBNYXRoLmNvcyjPhikgKiBNYXRoLmNvcyjOuyk7XG4gICAgdmFyIHkgPSBNYXRoLmNvcyjPhikgKiBNYXRoLnNpbijOuyk7XG4gICAgdmFyIHogPSBNYXRoLnNpbijPhik7XG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjNkKHgsIHksIHopO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIOKAmHRoaXPigJkgKGdlb2NlbnRyaWMpIGNhcnRlc2lhbiB2ZWN0b3IgdG8gKHNwaGVyaWNhbCkgbGF0aXR1ZGUvbG9uZ2l0dWRlIHBvaW50LlxuICpcbiAqIEByZXR1cm5zICB7TGF0TG9ufSBMYXRpdHVkZS9sb25naXR1ZGUgcG9pbnQgdmVjdG9yIHBvaW50cyB0by5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgdiA9IG5ldyBWZWN0b3IzZCgwLjUwMCwgMC41MDAsIDAuNzA3KTtcbiAqICAgdmFyIHAgPSB2LnRvTGF0TG9uUygpOyAvLyA0NS4wwrBOLCA0NS4wwrBFXG4gKi9cblZlY3RvcjNkLnByb3RvdHlwZS50b0xhdExvblMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgz4YgPSBNYXRoLmF0YW4yKHRoaXMueiwgTWF0aC5zcXJ0KHRoaXMueCp0aGlzLnggKyB0aGlzLnkqdGhpcy55KSk7XG4gICAgdmFyIM67ID0gTWF0aC5hdGFuMih0aGlzLnksIHRoaXMueCk7XG5cbiAgICByZXR1cm4gbmV3IExhdExvbijPhi50b0RlZ3JlZXMoKSwgzrsudG9EZWdyZWVzKCkpO1xufTtcblxuXG4vKipcbiAqIE4tdmVjdG9yIG5vcm1hbCB0byBncmVhdCBjaXJjbGUgb2J0YWluZWQgYnkgaGVhZGluZyBvbiBnaXZlbiBiZWFyaW5nIGZyb20g4oCYdGhpc+KAmSBwb2ludC5cbiAqXG4gKiBEaXJlY3Rpb24gb2YgdmVjdG9yIGlzIHN1Y2ggdGhhdCBpbml0aWFsIGJlYXJpbmcgdmVjdG9yIGIgPSBjIMOXIHAuXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gICBiZWFyaW5nIC0gQ29tcGFzcyBiZWFyaW5nIGluIGRlZ3JlZXMuXG4gKiBAcmV0dXJucyB7VmVjdG9yM2R9IE5vcm1hbGlzZWQgdmVjdG9yIHJlcHJlc2VudGluZyBncmVhdCBjaXJjbGUuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHAxID0gbmV3IExhdExvbig1My4zMjA2LCAtMS43Mjk3KTtcbiAqICAgdmFyIGdjID0gcDEuZ3JlYXRDaXJjbGUoOTYuMCk7IC8vIFstMC43OTQsMC4xMjksMC41OTRdXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuZ3JlYXRDaXJjbGUgPSBmdW5jdGlvbihiZWFyaW5nKSB7XG4gICAgdmFyIM+GID0gdGhpcy5sYXQudG9SYWRpYW5zKCk7XG4gICAgdmFyIM67ID0gdGhpcy5sb24udG9SYWRpYW5zKCk7XG4gICAgdmFyIM64ID0gTnVtYmVyKGJlYXJpbmcpLnRvUmFkaWFucygpO1xuXG4gICAgdmFyIHggPSAgTWF0aC5zaW4ozrspICogTWF0aC5jb3MozrgpIC0gTWF0aC5zaW4oz4YpICogTWF0aC5jb3MozrspICogTWF0aC5zaW4ozrgpO1xuICAgIHZhciB5ID0gLU1hdGguY29zKM67KSAqIE1hdGguY29zKM64KSAtIE1hdGguc2luKM+GKSAqIE1hdGguc2luKM67KSAqIE1hdGguc2luKM64KTtcbiAgICB2YXIgeiA9ICBNYXRoLmNvcyjPhikgKiBNYXRoLnNpbijOuCk7XG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjNkKHgsIHksIHopO1xufTtcblxuXG4vKipcbiAqIE4tdmVjdG9yIG5vcm1hbCB0byBncmVhdCBjaXJjbGUgb2J0YWluZWQgYnkgaGVhZGluZyBvbiBnaXZlbiBiZWFyaW5nIGZyb20gcG9pbnQgZ2l2ZW4gYnkg4oCYdGhpc+KAmVxuICogbi12ZWN0b3IuXG4gKlxuICogRGlyZWN0aW9uIG9mIHZlY3RvciBpcyBzdWNoIHRoYXQgaW5pdGlhbCBiZWFyaW5nIHZlY3RvciBiID0gYyDDlyBwLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgYmVhcmluZyAtIENvbXBhc3MgYmVhcmluZyBpbiBkZWdyZWVzLlxuICogQHJldHVybnMge1ZlY3RvcjNkfSBOb3JtYWxpc2VkIHZlY3RvciByZXByZXNlbnRpbmcgZ3JlYXQgY2lyY2xlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBuMSA9IG5ldyBMYXRMb24oNTMuMzIwNiwgLTEuNzI5NykudG9OdmVjdG9yKCk7XG4gKiAgIHZhciBnYyA9IG4xLmdyZWF0Q2lyY2xlKDk2LjApOyAvLyBbLTAuNzk0LDAuMTI5LDAuNTk0XVxuICovXG5WZWN0b3IzZC5wcm90b3R5cGUuZ3JlYXRDaXJjbGUgPSBmdW5jdGlvbihiZWFyaW5nKSB7XG4gICAgdmFyIM64ID0gTnVtYmVyKGJlYXJpbmcpLnRvUmFkaWFucygpO1xuXG4gICAgdmFyIE4gPSBuZXcgVmVjdG9yM2QoMCwgMCwgMSk7XG4gICAgdmFyIGUgPSBOLmNyb3NzKHRoaXMpOyAvLyBlYXN0aW5nXG4gICAgdmFyIG4gPSB0aGlzLmNyb3NzKGUpOyAvLyBub3J0aGluZ1xuICAgIHZhciBlyrkgPSBlLnRpbWVzKE1hdGguY29zKM64KS9lLmxlbmd0aCgpKTtcbiAgICB2YXIgbsq5ID0gbi50aW1lcyhNYXRoLnNpbijOuCkvbi5sZW5ndGgoKSk7XG4gICAgdmFyIGMgPSBuyrkubWludXMoZcq5KTtcblxuICAgIHJldHVybiBjO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRpc3RhbmNlIGZyb20g4oCYdGhpc+KAmSBwb2ludCB0byB0aGUgc3BlY2lmaWVkIHBvaW50LlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb259IHBvaW50IC0gTGF0aXR1ZGUvbG9uZ2l0dWRlIG9mIGRlc3RpbmF0aW9uIHBvaW50LlxuICogQHBhcmFtICAge251bWJlcn0gW3JhZGl1cz02MzcxZTNdIC0gKE1lYW4pIHJhZGl1cyBvZiBlYXJ0aCAoZGVmYXVsdHMgdG8gcmFkaXVzIGluIG1ldHJlcykuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBEaXN0YW5jZSBiZXR3ZWVuIHRoaXMgcG9pbnQgYW5kIGRlc3RpbmF0aW9uIHBvaW50LCBpbiBzYW1lIHVuaXRzIGFzIHJhZGl1cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUyLjIwNSwgMC4xMTkpO1xuICogICB2YXIgcDIgPSBuZXcgTGF0TG9uKDQ4Ljg1NywgMi4zNTEpO1xuICogICB2YXIgZCA9IHAxLmRpc3RhbmNlVG8ocDIpOyAvLyA0MDQuMyBrbVxuICovXG5MYXRMb24ucHJvdG90eXBlLmRpc3RhbmNlVG8gPSBmdW5jdGlvbihwb2ludCwgcmFkaXVzKSB7XG4gICAgaWYgKCEocG9pbnQgaW5zdGFuY2VvZiBMYXRMb24pKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdwb2ludCBpcyBub3QgTGF0TG9uIG9iamVjdCcpO1xuICAgIHJhZGl1cyA9IChyYWRpdXMgPT09IHVuZGVmaW5lZCkgPyA2MzcxZTMgOiBOdW1iZXIocmFkaXVzKTtcblxuICAgIHZhciBwMSA9IHRoaXMudG9WZWN0b3IoKTtcbiAgICB2YXIgcDIgPSBwb2ludC50b1ZlY3RvcigpO1xuXG4gICAgdmFyIM60ID0gcDEuYW5nbGVUbyhwMik7XG4gICAgdmFyIGQgPSDOtCAqIHJhZGl1cztcblxuICAgIHJldHVybiBkO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIChpbml0aWFsKSBiZWFyaW5nIGZyb20g4oCYdGhpc+KAmSBwb2ludCB0byB0aGUgc3BlY2lmaWVkIHBvaW50LCBpbiBjb21wYXNzIGRlZ3JlZXMuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBMYXRpdHVkZS9sb25naXR1ZGUgb2YgZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBJbml0aWFsIGJlYXJpbmcgaW4gZGVncmVlcyBmcm9tIE5vcnRoICgwwrAuLjM2MMKwKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUyLjIwNSwgMC4xMTkpO1xuICogICB2YXIgcDIgPSBuZXcgTGF0TG9uKDQ4Ljg1NywgMi4zNTEpO1xuICogICB2YXIgYjEgPSBwMS5iZWFyaW5nVG8ocDIpOyAvLyAxNTYuMsKwXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuYmVhcmluZ1RvID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BvaW50IGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG5cbiAgICB2YXIgcDEgPSB0aGlzLnRvVmVjdG9yKCk7XG4gICAgdmFyIHAyID0gcG9pbnQudG9WZWN0b3IoKTtcblxuICAgIHZhciBub3J0aFBvbGUgPSBuZXcgVmVjdG9yM2QoMCwgMCwgMSk7XG5cbiAgICB2YXIgYzEgPSBwMS5jcm9zcyhwMik7ICAgICAgICAvLyBncmVhdCBjaXJjbGUgdGhyb3VnaCBwMSAmIHAyXG4gICAgdmFyIGMyID0gcDEuY3Jvc3Mobm9ydGhQb2xlKTsgLy8gZ3JlYXQgY2lyY2xlIHRocm91Z2ggcDEgJiBub3J0aCBwb2xlXG5cbiAgICAvLyBiZWFyaW5nIGlzIChzaWduZWQpIGFuZ2xlIGJldHdlZW4gYzEgJiBjMlxuICAgIHZhciBiZWFyaW5nID0gYzEuYW5nbGVUbyhjMiwgcDEpLnRvRGVncmVlcygpO1xuXG4gICAgcmV0dXJuIChiZWFyaW5nKzM2MCkgJSAzNjA7IC8vIG5vcm1hbGlzZSB0byAwLi4zNjBcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaWRwb2ludCBiZXR3ZWVuIOKAmHRoaXPigJkgcG9pbnQgYW5kIHNwZWNpZmllZCBwb2ludC5cbiAqXG4gKiBAcGFyYW0gICB7TGF0TG9ufSBwb2ludCAtIExhdGl0dWRlL2xvbmdpdHVkZSBvZiBkZXN0aW5hdGlvbiBwb2ludC5cbiAqIEByZXR1cm5zIHtMYXRMb259IE1pZHBvaW50IGJldHdlZW4gdGhpcyBwb2ludCBhbmQgZGVzdGluYXRpb24gcG9pbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHAxID0gbmV3IExhdExvbig1Mi4yMDUsIDAuMTE5KTtcbiAqICAgdmFyIHAyID0gbmV3IExhdExvbig0OC44NTcsIDIuMzUxKTtcbiAqICAgdmFyIHBNaWQgPSBwMS5taWRwb2ludFRvKHAyKTsgLy8gNTAuNTM2M8KwTiwgMDAxLjI3NDbCsEVcbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5taWRwb2ludFRvID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BvaW50IGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG5cbiAgICB2YXIgcDEgPSB0aGlzLnRvVmVjdG9yKCk7XG4gICAgdmFyIHAyID0gcG9pbnQudG9WZWN0b3IoKTtcblxuICAgIHZhciBtaWQgPSBwMS5wbHVzKHAyKS51bml0KCk7XG5cbiAgICByZXR1cm4gbWlkLnRvTGF0TG9uUygpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIHBvaW50IGZyb20g4oCYdGhpc+KAmSBwb2ludCBoYXZpbmcgdHJhdmVsbGVkIHRoZSBnaXZlbiBkaXN0YW5jZSBvbiB0aGVcbiAqIGdpdmVuIGluaXRpYWwgYmVhcmluZyAoYmVhcmluZyB3aWxsIG5vcm1hbGx5IHZhcnkgYmVmb3JlIGRlc3RpbmF0aW9uIGlzIHJlYWNoZWQpLlxuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGRpc3RhbmNlIC0gRGlzdGFuY2UgdHJhdmVsbGVkLCBpbiBzYW1lIHVuaXRzIGFzIGVhcnRoIHJhZGl1cyAoZGVmYXVsdDogbWV0cmVzKS5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGJlYXJpbmcgLSBJbml0aWFsIGJlYXJpbmcgaW4gZGVncmVlcyBmcm9tIG5vcnRoLlxuICogQHBhcmFtICAge251bWJlcn0gW3JhZGl1cz02MzcxZTNdIC0gKE1lYW4pIHJhZGl1cyBvZiBlYXJ0aCAoZGVmYXVsdHMgdG8gcmFkaXVzIGluIG1ldHJlcykuXG4gKiBAcmV0dXJucyB7TGF0TG9ufSBEZXN0aW5hdGlvbiBwb2ludC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUxLjQ3NzgsIC0wLjAwMTUpO1xuICogICB2YXIgcDIgPSBwMS5kZXN0aW5hdGlvblBvaW50KDc3OTQsIDMwMC43KTsgLy8gNTEuNTEzNcKwTiwgMDAwLjA5ODPCsFdcbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5kZXN0aW5hdGlvblBvaW50ID0gZnVuY3Rpb24oZGlzdGFuY2UsIGJlYXJpbmcsIHJhZGl1cykge1xuICAgIHJhZGl1cyA9IChyYWRpdXMgPT09IHVuZGVmaW5lZCkgPyA2MzcxZTMgOiBOdW1iZXIocmFkaXVzKTtcblxuICAgIHZhciBuMSA9IHRoaXMudG9WZWN0b3IoKTtcbiAgICB2YXIgzrQgPSBOdW1iZXIoZGlzdGFuY2UpIC8gcmFkaXVzOyAvLyBhbmd1bGFyIGRpc3RhbmNlIGluIHJhZGlhbnNcbiAgICB2YXIgzrggPSBOdW1iZXIoYmVhcmluZykudG9SYWRpYW5zKCk7XG5cbiAgICB2YXIgTiA9IG5ldyBWZWN0b3IzZCgwLCAwLCAxKTsgLy8gbm9ydGggcG9sZVxuXG4gICAgdmFyIGRlID0gTi5jcm9zcyhuMSkudW5pdCgpOyAgIC8vIGVhc3QgZGlyZWN0aW9uIHZlY3RvciBAIG4xXG4gICAgdmFyIGRuID0gbjEuY3Jvc3MoZGUpOyAgICAgICAgIC8vIG5vcnRoIGRpcmVjdGlvbiB2ZWN0b3IgQCBuMVxuXG4gICAgdmFyIGRlU2luzrggPSBkZS50aW1lcyhNYXRoLnNpbijOuCkpO1xuICAgIHZhciBkbkNvc864ID0gZG4udGltZXMoTWF0aC5jb3MozrgpKTtcblxuICAgIHZhciBkID0gZG5Db3POuC5wbHVzKGRlU2luzrgpOyAgIC8vIGRpcmVjdGlvbiB2ZWN0b3IgQCBuMSAo4omhIEPDl24xOyBDID0gZ3JlYXQgY2lyY2xlKVxuXG4gICAgdmFyIHggPSBuMS50aW1lcyhNYXRoLmNvcyjOtCkpOyAvLyBjb21wb25lbnQgb2YgbjIgcGFyYWxsZWwgdG8gbjFcbiAgICB2YXIgeSA9IGQudGltZXMoTWF0aC5zaW4ozrQpKTsgIC8vIGNvbXBvbmVudCBvZiBuMiBwZXJwZW5kaWN1bGFyIHRvIG4xXG5cbiAgICB2YXIgbjIgPSB4LnBsdXMoeSk7XG5cbiAgICByZXR1cm4gbjIudG9MYXRMb25TKCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcG9pbnQgb2YgaW50ZXJzZWN0aW9uIG9mIHR3byBwYXRocyBlYWNoIGRlZmluZWQgYnkgcG9pbnQgcGFpcnMgb3Igc3RhcnQgcG9pbnQgYW5kIGJlYXJpbmcuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gICAgICAgIHBhdGgxc3RhcnQgLSBTdGFydCBwb2ludCBvZiBmaXJzdCBwYXRoLlxuICogQHBhcmFtICAge0xhdExvbnxudW1iZXJ9IHBhdGgxYnJuZ0VuZCAtIEVuZCBwb2ludCBvZiBmaXJzdCBwYXRoIG9yIGluaXRpYWwgYmVhcmluZyBmcm9tIGZpcnN0IHN0YXJ0IHBvaW50LlxuICogQHBhcmFtICAge0xhdExvbn0gICAgICAgIHBhdGgyc3RhcnQgLSBTdGFydCBwb2ludCBvZiBzZWNvbmQgcGF0aC5cbiAqIEBwYXJhbSAgIHtMYXRMb258bnVtYmVyfSBwYXRoMmJybmdFbmQgLSBFbmQgcG9pbnQgb2Ygc2Vjb25kIHBhdGggb3IgaW5pdGlhbCBiZWFyaW5nIGZyb20gc2Vjb25kIHN0YXJ0IHBvaW50LlxuICogQHJldHVybnMge0xhdExvbn0gICAgICAgIERlc3RpbmF0aW9uIHBvaW50IChudWxsIGlmIG5vIHVuaXF1ZSBpbnRlcnNlY3Rpb24gZGVmaW5lZClcbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBMYXRMb24oNTEuODg1MywgMC4yNTQ1KSwgYnJuZzEgPSAxMDguNTU7XG4gKiAgIHZhciBwMiA9IExhdExvbig0OS4wMDM0LCAyLjU3MzUpLCBicm5nMiA9ICAzMi40NDtcbiAqICAgdmFyIHBJbnQgPSBMYXRMb24uaW50ZXJzZWN0aW9uKHAxLCBicm5nMSwgcDIsIGJybmcyKTsgLy8gNTAuOTA3NsKwTiwgMDA0LjUwODbCsEVcbiAqL1xuTGF0TG9uLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKHBhdGgxc3RhcnQsIHBhdGgxYnJuZ0VuZCwgcGF0aDJzdGFydCwgcGF0aDJicm5nRW5kKSB7XG4gICAgaWYgKCEocGF0aDFzdGFydCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdGgxc3RhcnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcbiAgICBpZiAoIShwYXRoMnN0YXJ0IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0aDJzdGFydCBpcyBub3QgTGF0TG9uIG9iamVjdCcpO1xuICAgIGlmICghKHBhdGgxYnJuZ0VuZCBpbnN0YW5jZW9mIExhdExvbikgJiYgaXNOYU4ocGF0aDFicm5nRW5kKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0aDFicm5nRW5kIGlzIG5vdCBMYXRMb24gb2JqZWN0IG9yIGJlYXJpbmcnKTtcbiAgICBpZiAoIShwYXRoMmJybmdFbmQgaW5zdGFuY2VvZiBMYXRMb24pICYmIGlzTmFOKHBhdGgyYnJuZ0VuZCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdGgyYnJuZ0VuZCBpcyBub3QgTGF0TG9uIG9iamVjdCBvciBiZWFyaW5nJyk7XG5cbiAgICAvLyBpZiBjMSAmIGMyIGFyZSBncmVhdCBjaXJjbGVzIHRocm91Z2ggc3RhcnQgYW5kIGVuZCBwb2ludHMgKG9yIGRlZmluZWQgYnkgc3RhcnQgcG9pbnQgKyBiZWFyaW5nKSxcbiAgICAvLyB0aGVuIGNhbmRpZGF0ZSBpbnRlcnNlY3Rpb25zIGFyZSBzaW1wbHkgYzEgw5cgYzIgJiBjMiDDlyBjMTsgbW9zdCBvZiB0aGUgd29yayBpcyBkZWNpZGluZyBjb3JyZWN0XG4gICAgLy8gaW50ZXJzZWN0aW9uIHBvaW50IHRvIHNlbGVjdCEgaWYgYmVhcmluZyBpcyBnaXZlbiwgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIGludGVyc2VjdGlvbiwgaWYgYm90aFxuICAgIC8vIHBhdGhzIGFyZSBkZWZpbmVkIGJ5IHN0YXJ0L2VuZCBwb2ludHMsIHRha2UgY2xvc2VyIGludGVyc2VjdGlvblxuXG4gICAgdmFyIHAxID0gcGF0aDFzdGFydC50b1ZlY3RvcigpO1xuICAgIHZhciBwMiA9IHBhdGgyc3RhcnQudG9WZWN0b3IoKTtcblxuICAgIHZhciBjMSwgYzIsIHBhdGgxZGVmLCBwYXRoMmRlZjtcbiAgICAvLyBjMSAmIGMyIGFyZSB2ZWN0b3JzIGRlZmluaW5nIGdyZWF0IGNpcmNsZXMgdGhyb3VnaCBzdGFydCAmIGVuZCBwb2ludHM7IHAgw5cgYyBnaXZlcyBpbml0aWFsIGJlYXJpbmcgdmVjdG9yXG5cbiAgICBpZiAocGF0aDFicm5nRW5kIGluc3RhbmNlb2YgTGF0TG9uKSB7IC8vIHBhdGggMSBkZWZpbmVkIGJ5IGVuZHBvaW50XG4gICAgICAgIGMxID0gcDEuY3Jvc3MocGF0aDFicm5nRW5kLnRvVmVjdG9yKCkpO1xuICAgICAgICBwYXRoMWRlZiA9ICdlbmRwb2ludCc7XG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwYXRoIDEgZGVmaW5lZCBieSBpbml0aWFsIGJlYXJpbmdcbiAgICAgICAgYzEgPSBwYXRoMXN0YXJ0LmdyZWF0Q2lyY2xlKE51bWJlcihwYXRoMWJybmdFbmQpKTtcbiAgICAgICAgcGF0aDFkZWYgPSAnYmVhcmluZyc7XG4gICAgfVxuICAgIGlmIChwYXRoMmJybmdFbmQgaW5zdGFuY2VvZiBMYXRMb24pIHsgLy8gcGF0aCAyIGRlZmluZWQgYnkgZW5kcG9pbnRcbiAgICAgICAgYzIgPSBwMi5jcm9zcyhwYXRoMmJybmdFbmQudG9WZWN0b3IoKSk7XG4gICAgICAgIHBhdGgyZGVmID0gJ2VuZHBvaW50JztcbiAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhdGggMiBkZWZpbmVkIGJ5IGluaXRpYWwgYmVhcmluZ1xuICAgICAgICBjMiA9IHBhdGgyc3RhcnQuZ3JlYXRDaXJjbGUoTnVtYmVyKHBhdGgyYnJuZ0VuZCkpO1xuICAgICAgICBwYXRoMmRlZiA9ICdiZWFyaW5nJztcbiAgICB9XG5cbiAgICAvLyB0aGVyZSBhcmUgdHdvIChhbnRpcG9kYWwpIGNhbmRpZGF0ZSBpbnRlcnNlY3Rpb24gcG9pbnRzOyB3ZSBoYXZlIHRvIGNob29zZSB3aGljaCB0byByZXR1cm5cbiAgICB2YXIgaTEgPSBjMS5jcm9zcyhjMik7XG4gICAgdmFyIGkyID0gYzIuY3Jvc3MoYzEpO1xuXG4gICAgLy8gYW0gSSBtYWtpbmcgaGVhdnkgd2VhdGhlciBvZiB0aGlzPyBpcyB0aGVyZSBhIHNpbXBsZXIgd2F5IHRvIGRvIGl0P1xuXG4gICAgLy8gc2VsZWN0aW9uIG9mIGludGVyc2VjdGlvbiBwb2ludCBkZXBlbmRzIG9uIGhvdyBwYXRocyBhcmUgZGVmaW5lZCAoYmVhcmluZ3Mgb3IgZW5kcG9pbnRzKVxuICAgIHZhciBpbnRlcnNlY3Rpb249bnVsbCwgZGlyMT1udWxsLCBkaXIyPW51bGw7XG4gICAgc3dpdGNoIChwYXRoMWRlZisnKycrcGF0aDJkZWYpIHtcbiAgICAgICAgY2FzZSAnYmVhcmluZytiZWFyaW5nJzpcbiAgICAgICAgICAgIC8vIGlmIGPDl3Dii4VpMSBpcyArdmUsIHRoZSBpbml0aWFsIGJlYXJpbmcgaXMgdG93YXJkcyBpMSwgb3RoZXJ3aXNlIHRvd2FyZHMgYW50aXBvZGFsIGkyXG4gICAgICAgICAgICBkaXIxID0gTWF0aC5zaWduKGMxLmNyb3NzKHAxKS5kb3QoaTEpKTsgLy8gYzHDl3Ax4ouFaTEgK3ZlIG1lYW5zIHAxIGJlYXJpbmcgcG9pbnRzIHRvIGkxXG4gICAgICAgICAgICBkaXIyID0gTWF0aC5zaWduKGMyLmNyb3NzKHAyKS5kb3QoaTEpKTsgLy8gYzLDl3Ay4ouFaTEgK3ZlIG1lYW5zIHAyIGJlYXJpbmcgcG9pbnRzIHRvIGkxXG5cbiAgICAgICAgICAgIHN3aXRjaCAoZGlyMStkaXIyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAgMjogLy8gZGlyMSwgZGlyMiBib3RoICt2ZSwgMSAmIDIgYm90aCBwb2ludGluZyB0byBpMVxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBpMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAtMjogLy8gZGlyMSwgZGlyMiBib3RoIC12ZSwgMSAmIDIgYm90aCBwb2ludGluZyB0byBpMlxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBpMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAgMDogLy8gZGlyMSwgZGlyMiBvcHBvc2l0ZTsgaW50ZXJzZWN0aW9uIGlzIGF0IGZ1cnRoZXItYXdheSBpbnRlcnNlY3Rpb24gcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFrZSBvcHBvc2l0ZSBpbnRlcnNlY3Rpb24gZnJvbSBtaWQtcG9pbnQgb2YgcDEgJiBwMiBbaXMgdGhpcyBhbHdheXMgdHJ1ZT9dXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbiA9IHAxLnBsdXMocDIpLmRvdChpMSkgPiAwID8gaTIgOiBpMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYmVhcmluZytlbmRwb2ludCc6IC8vIHVzZSBiZWFyaW5nIGMxIMOXIHAxXG4gICAgICAgICAgICBkaXIxID0gTWF0aC5zaWduKGMxLmNyb3NzKHAxKS5kb3QoaTEpKTsgLy8gYzHDl3Ax4ouFaTEgK3ZlIG1lYW5zIHAxIGJlYXJpbmcgcG9pbnRzIHRvIGkxXG4gICAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBkaXIxPjAgPyBpMSA6IGkyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2VuZHBvaW50K2JlYXJpbmcnOiAvLyB1c2UgYmVhcmluZyBjMiDDlyBwMlxuICAgICAgICAgICAgZGlyMiA9IE1hdGguc2lnbihjMi5jcm9zcyhwMikuZG90KGkxKSk7IC8vIGMyw5dwMuKLhWkxICt2ZSBtZWFucyBwMiBiZWFyaW5nIHBvaW50cyB0byBpMVxuICAgICAgICAgICAgaW50ZXJzZWN0aW9uID0gZGlyMj4wID8gaTEgOiBpMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdlbmRwb2ludCtlbmRwb2ludCc6IC8vIHNlbGVjdCBuZWFyZXN0IGludGVyc2VjdGlvbiB0byBtaWQtcG9pbnQgb2YgYWxsIHBvaW50c1xuICAgICAgICAgICAgdmFyIG1pZCA9IHAxLnBsdXMocDIpLnBsdXMocGF0aDFicm5nRW5kLnRvVmVjdG9yKCkpLnBsdXMocGF0aDJicm5nRW5kLnRvVmVjdG9yKCkpO1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uID0gbWlkLmRvdChpMSk+MCA/IGkxIDogaTI7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJzZWN0aW9uLnRvTGF0TG9uUygpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgKHNpZ25lZCkgZGlzdGFuY2UgZnJvbSDigJh0aGlz4oCZIHBvaW50IHRvIGdyZWF0IGNpcmNsZSBkZWZpbmVkIGJ5IHN0YXJ0LXBvaW50IGFuZCBlbmQtcG9pbnQvYmVhcmluZy5cbiAqXG4gKiBAcGFyYW0gICB7TGF0TG9ufSAgICAgICAgcGF0aFN0YXJ0IC0gU3RhcnQgcG9pbnQgb2YgZ3JlYXQgY2lyY2xlIHBhdGguXG4gKiBAcGFyYW0gICB7TGF0TG9ufG51bWJlcn0gcGF0aEJybmdFbmQgLSBFbmQgcG9pbnQgb2YgZ3JlYXQgY2lyY2xlIHBhdGggb3IgaW5pdGlhbCBiZWFyaW5nIGZyb20gZ3JlYXQgY2lyY2xlIHN0YXJ0IHBvaW50LlxuICogQHBhcmFtICAge251bWJlcn0gICAgICAgIFtyYWRpdXM9NjM3MWUzXSAtIChNZWFuKSByYWRpdXMgb2YgZWFydGggKGRlZmF1bHRzIHRvIHJhZGl1cyBpbiBtZXRyZXMpLlxuICogQHJldHVybnMge251bWJlcn0gICAgICAgIERpc3RhbmNlIHRvIGdyZWF0IGNpcmNsZSAoLXZlIGlmIHRvIGxlZnQsICt2ZSBpZiB0byByaWdodCBvZiBwYXRoKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcEN1cnJlbnQgPSBuZXcgTGF0TG9uKDUzLjI2MTEsIC0wLjc5NzIpO1xuICpcbiAqICAgdmFyIHAxID0gbmV3IExhdExvbig1My4zMjA2LCAtMS43Mjk3KSwgYnJuZyA9IDk2LjA7XG4gKiAgIHZhciBkID0gcEN1cnJlbnQuY3Jvc3NUcmFja0Rpc3RhbmNlVG8ocDEsIGJybmcpOy8vIC0zMDUuNyBtXG4gKlxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUzLjMyMDYsIC0xLjcyOTcpLCBwMiA9IG5ldyBMYXRMb24oNTMuMTg4NywgMC4xMzM0KTtcbiAqICAgdmFyIGQgPSBwQ3VycmVudC5jcm9zc1RyYWNrRGlzdGFuY2VUbyhwMSwgcDIpOyAgLy8gLTMwNy41IG1cbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5jcm9zc1RyYWNrRGlzdGFuY2VUbyA9IGZ1bmN0aW9uKHBhdGhTdGFydCwgcGF0aEJybmdFbmQsIHJhZGl1cykge1xuICAgIGlmICghKHBhdGhTdGFydCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdGhTdGFydCBpcyBub3QgTGF0TG9uIG9iamVjdCcpO1xuICAgIHZhciBSID0gKHJhZGl1cyA9PT0gdW5kZWZpbmVkKSA/IDYzNzFlMyA6IE51bWJlcihyYWRpdXMpO1xuXG4gICAgdmFyIHAgPSB0aGlzLnRvVmVjdG9yKCk7XG5cbiAgICB2YXIgZ2MgPSBwYXRoQnJuZ0VuZCBpbnN0YW5jZW9mIExhdExvbiAgICAgICAgICAgICAgICAgICAvLyAobm90ZSBKYXZhU2NyaXB0IGlzIG5vdCBnb29kIGF0IG1ldGhvZCBvdmVybG9hZGluZylcbiAgICAgICAgPyBwYXRoU3RhcnQudG9WZWN0b3IoKS5jcm9zcyhwYXRoQnJuZ0VuZC50b1ZlY3RvcigpKSAvLyBncmVhdCBjaXJjbGUgZGVmaW5lZCBieSB0d28gcG9pbnRzXG4gICAgICAgIDogcGF0aFN0YXJ0LmdyZWF0Q2lyY2xlKE51bWJlcihwYXRoQnJuZ0VuZCkpOyAgICAgICAgLy8gZ3JlYXQgY2lyY2xlIGRlZmluZWQgYnkgcG9pbnQgKyBiZWFyaW5nXG5cbiAgICB2YXIgzrEgPSBnYy5hbmdsZVRvKHApIC0gTWF0aC5QSS8yOyAvLyBhbmdsZSBiZXR3ZWVuIHBvaW50ICYgZ3JlYXQtY2lyY2xlXG5cbiAgICB2YXIgZCA9IM6xICogUjtcblxuICAgIHJldHVybiBkO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgY2xvc2VzdCBwb2ludCBvbiBncmVhdCBjaXJjbGUgc2VnbWVudCBiZXR3ZWVuIHBvaW50MSAmIHBvaW50MiB0byDigJh0aGlz4oCZIHBvaW50LlxuICpcbiAqIElmIHRoaXMgcG9pbnQgaXMg4oCYd2l0aGlu4oCZIHRoZSBleHRlbnQgb2YgdGhlIHNlZ21lbnQsIHRoZSBwb2ludCBpcyBvbiB0aGUgc2VnbWVudCBiZXR3ZWVuIHBvaW50MSAmXG4gKiBwb2ludDI7IG90aGVyd2lzZSwgaXQgaXMgdGhlIGNsb3NlciBvZiB0aGUgZW5kcG9pbnRzIGRlZmluaW5nIHRoZSBzZWdtZW50LlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb259IHBvaW50MSAtIFN0YXJ0IHBvaW50IG9mIGdyZWF0IGNpcmNsZSBzZWdtZW50LlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQyIC0gRW5kIHBvaW50IG9mIGdyZWF0IGNpcmNsZSBzZWdtZW50LlxuICogQHJldHVybnMge251bWJlcn0gcG9pbnQgb24gc2VnbWVudC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUxLjAsIDEuMCksIHAyID0gbmV3IExhdExvbig1MS4wLCAyLjApO1xuICpcbiAqICAgdmFyIHAwID0gbmV3IExhdExvbig1MS4wLCAxLjkpO1xuICogICB2YXIgcCA9IHAwLm5lYXJlc3RQb2ludE9uU2VnbWVudChwMSwgcDIpOyAvLyA1MS4wMDA0wrBOLCAwMDEuOTAwMMKwRVxuICogICB2YXIgZCA9IHAuZGlzdGFuY2VUbyhwKTsgICAgICAgICAgICAgICAgICAvLyA0Mi43MSBtXG4gKlxuICogICB2YXIgcDAgPSBuZXcgTGF0TG9uKDUxLjAsIDIuMSk7XG4gKiAgIHZhciBwID0gcDAubmVhcmVzdFBvaW50T25TZWdtZW50KHAxLCBwMik7IC8vIDUxLjAwMDDCsE4sIDAwMi4wMDAwwrBFXG4gKi9cbkxhdExvbi5wcm90b3R5cGUubmVhcmVzdFBvaW50T25TZWdtZW50ID0gZnVuY3Rpb24ocG9pbnQxLCBwb2ludDIpIHtcbiAgICB2YXIgcCA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5pc0JldHdlZW4ocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgIC8vIGNsb3NlciB0byBzZWdtZW50IHRoYW4gdG8gaXRzIGVuZHBvaW50cywgZmluZCBjbG9zZXN0IHBvaW50IG9uIHNlZ21lbnRcbiAgICAgICAgdmFyIG4wID0gdGhpcy50b1ZlY3RvcigpLCBuMSA9IHBvaW50MS50b1ZlY3RvcigpLCBuMiA9IHBvaW50Mi50b1ZlY3RvcigpO1xuICAgICAgICB2YXIgYzEgPSBuMS5jcm9zcyhuMik7IC8vIG4xw5duMiA9IHZlY3RvciByZXByZXNlbnRpbmcgZ3JlYXQgY2lyY2xlIHRocm91Z2ggcDEsIHAyXG4gICAgICAgIHZhciBjMiA9IG4wLmNyb3NzKGMxKTsgLy8gbjDDl2MxID0gdmVjdG9yIHJlcHJlc2VudGluZyBncmVhdCBjaXJjbGUgdGhyb3VnaCBwMCBub3JtYWwgdG8gYzFcbiAgICAgICAgdmFyIG4gPSBjMS5jcm9zcyhjMik7ICAvLyBjMsOXYzEgPSBuZWFyZXN0IHBvaW50IG9uIGMxIHRvIG4wXG4gICAgICAgIHAgPSBuLnRvTGF0TG9uUygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGJleW9uZCBzZWdtZW50IGV4dGVudCwgdGFrZSBjbG9zZXIgZW5kcG9pbnRcbiAgICAgICAgdmFyIGQxID0gdGhpcy5kaXN0YW5jZVRvKHBvaW50MSk7XG4gICAgICAgIHZhciBkMiA9IHRoaXMuZGlzdGFuY2VUbyhwb2ludDIpO1xuICAgICAgICBwID0gZDE8ZDIgPyBwb2ludDEgOiBwb2ludDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHA7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgcG9pbnQgaXMgYmV0d2VlbiBwb2ludCAxICYgcG9pbnQgMi5cbiAqXG4gKiBJZiB0aGlzIHBvaW50IGlzIG5vdCBvbiB0aGUgZ3JlYXQgY2lyY2xlIGRlZmluZWQgYnkgcG9pbnQxICYgcG9pbnQgMiwgcmV0dXJucyB3aGV0aGVyIHRoaXMgcG9pbnRcbiAqIGlzIHdpdGhpbiBhcmVhIGJvdW5kIGJ5IHBlcnBlbmRpY3VsYXJzIHRvIHRoZSBncmVhdCBjaXJjbGUgYXQgZWFjaCBwb2ludC5cbiAqXG4gKiBAcGFyYW0gICB7TGF0TG9ufSBwb2ludDEgLSBGaXJzdCBwb2ludCBkZWZpbmluZyBzZWdtZW50LlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQyIC0gU2Vjb25kIHBvaW50IGRlZmluaW5nIHNlZ21lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHBvaW50IGlzIHdpdGhpbiBleHRlbnQgb2Ygc2VnbWVudC5cbiAqL1xuTGF0TG9uLnByb3RvdHlwZS5pc0JldHdlZW4gPSBmdW5jdGlvbihwb2ludDEsIHBvaW50Mikge1xuICAgIHZhciBuMCA9IHRoaXMudG9WZWN0b3IoKSwgbjEgPSBwb2ludDEudG9WZWN0b3IoKSwgbjIgPSBwb2ludDIudG9WZWN0b3IoKTsgLy8gbi12ZWN0b3JzXG5cbiAgICAvLyBnZXQgdmVjdG9ycyByZXByZXNlbnRpbmcgcDAtPnAxLCBwMC0+cDIsIHAxLT5wMiwgcDItPnAxXG4gICAgdmFyIM60MTAgPSBuMC5taW51cyhuMSksIM60MTIgPSBuMi5taW51cyhuMSk7XG4gICAgdmFyIM60MjAgPSBuMC5taW51cyhuMiksIM60MjEgPSBuMS5taW51cyhuMik7XG5cbiAgICAvLyBkb3QgcHJvZHVjdCDOtDEw4ouFzrQxMiB0ZWxscyB1cyBpZiBwMCBpcyBvbiBwMiBzaWRlIG9mIHAxLCBzaW1pbGFybHkgZm9yIM60MjDii4XOtDIxXG4gICAgdmFyIGV4dGVudDEgPSDOtDEwLmRvdCjOtDEyKTtcbiAgICB2YXIgZXh0ZW50MiA9IM60MjAuZG90KM60MjEpO1xuXG4gICAgdmFyIGlzQmV0d2VlbiA9IGV4dGVudDE+PTAgJiYgZXh0ZW50Mj49MDtcblxuICAgIHJldHVybiBpc0JldHdlZW47XG59O1xuXG5cbi8qKlxuICogVGVzdHMgd2hldGhlciDigJh0aGlz4oCZIHBvaW50IGlzIGVuY2xvc2VkIGJ5IHRoZSBwb2x5Z29uIGRlZmluZWQgYnkgYSBzZXQgb2YgcG9pbnRzLlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb25bXX0gcG9seWdvbiAtIE9yZGVyZWQgYXJyYXkgb2YgcG9pbnRzIGRlZmluaW5nIHZlcnRpY2VzIG9mIHBvbHlnb24uXG4gKiBAcmV0dXJucyB7Ym9vbH0gICAgIFdoZXRoZXIgdGhpcyBwb2ludCBpcyBlbmNsb3NlZCBieSBwb2x5Z29uLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBib3VuZHMgPSBbIG5ldyBMYXRMb24oNDUsMSksIG5ldyBMYXRMb24oNDUsMiksIG5ldyBMYXRMb24oNDYsMiksIG5ldyBMYXRMb24oNDYsMSkgXTtcbiAqICAgdmFyIHAgPSBuZXcgTGF0TG9uKDQ1LjEsIDEuMSk7XG4gKiAgIHZhciBpbnNpZGUgPSBwLmVuY2xvc2VkQnkoYm91bmRzKTsgLy8gdHJ1ZVxuICovXG5MYXRMb24ucHJvdG90eXBlLmVuY2xvc2VkQnkgPSBmdW5jdGlvbihwb2x5Z29uKSB7XG4gICAgLy8gdGhpcyBtZXRob2QgdXNlcyBhbmdsZSBzdW1tYXRpb24gdGVzdDsgb24gYSBwbGFuZSwgYW5nbGVzIGZvciBhbiBlbmNsb3NlZCBwb2ludCB3aWxsIHN1bVxuICAgIC8vIHRvIDM2MMKwLCBhbmdsZXMgZm9yIGFuIGV4dGVyaW9yIHBvaW50IHdpbGwgc3VtIHRvIDDCsC4gT24gYSBzcGhlcmUsIGVuY2xvc2VkIHBvaW50IGFuZ2xlc1xuICAgIC8vIHdpbGwgc3VtIHRvIGxlc3MgdGhhbiAzNjDCsCAoZHVlIHRvIHNwaGVyaWNhbCBleGNlc3MpLCBleHRlcmlvciBwb2ludCBhbmdsZXMgd2lsbCBiZSBzbWFsbFxuICAgIC8vIGJ1dCBub24temVyby4gVE9ETzogYXJlIGFueSB3aW5kaW5nIG51bWJlciBvcHRpbWlzYXRpb25zIGFwcGxpY2FibGUgdG8gc3BoZXJpY2FsIHN1cmZhY2U/XG5cbiAgICAvLyBjbG9zZSB0aGUgcG9seWdvbiBzbyB0aGF0IHRoZSBsYXN0IHBvaW50IGVxdWFscyB0aGUgZmlyc3QgcG9pbnRcbiAgICB2YXIgY2xvc2VkID0gcG9seWdvblswXS5lcXVhbHMocG9seWdvbltwb2x5Z29uLmxlbmd0aC0xXSk7XG4gICAgaWYgKCFjbG9zZWQpIHBvbHlnb24ucHVzaChwb2x5Z29uWzBdKTtcblxuICAgIHZhciBuVmVydGljZXMgPSBwb2x5Z29uLmxlbmd0aCAtIDE7XG5cbiAgICB2YXIgcCA9IHRoaXMudG9WZWN0b3IoKTtcblxuICAgIC8vIGdldCB2ZWN0b3JzIGZyb20gcCB0byBlYWNoIHZlcnRleFxuICAgIHZhciB2ZWN0b3JUb1ZlcnRleCA9IFtdO1xuICAgIGZvciAodmFyIHY9MDsgdjxuVmVydGljZXM7IHYrKykgdmVjdG9yVG9WZXJ0ZXhbdl0gPSBwLm1pbnVzKHBvbHlnb25bdl0udG9WZWN0b3IoKSk7XG4gICAgdmVjdG9yVG9WZXJ0ZXgucHVzaCh2ZWN0b3JUb1ZlcnRleFswXSk7XG5cbiAgICAvLyBzdW0gc3VidGVuZGVkIGFuZ2xlcyBvZiBlYWNoIGVkZ2UgKHVzaW5nIHZlY3RvciBwIHRvIGRldGVybWluZSBzaWduKVxuICAgIHZhciDOo864ID0gMDtcbiAgICBmb3IgKHZhciB2PTA7IHY8blZlcnRpY2VzOyB2KyspIHtcbiAgICAgICAgzqPOuCArPSB2ZWN0b3JUb1ZlcnRleFt2XS5hbmdsZVRvKHZlY3RvclRvVmVydGV4W3YrMV0sIHApO1xuICAgIH1cblxuICAgIHZhciBlbmNsb3NlZCA9IE1hdGguYWJzKM6jzrgpID4gTWF0aC5QSTtcblxuICAgIGlmICghY2xvc2VkKSBwb2x5Z29uLnBvcCgpOyAvLyByZXN0b3JlIHBvbHlnb24gdG8gcHJpc3RpbmUgY29uZGl0aW9uXG5cbiAgICByZXR1cm4gZW5jbG9zZWQ7XG59O1xuXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYXJlYSBvZiBhIHNwaGVyaWNhbCBwb2x5Z29uIHdoZXJlIHRoZSBzaWRlcyBvZiB0aGUgcG9seWdvbiBhcmUgZ3JlYXQgY2lyY2xlXG4gKiBhcmNzIGpvaW5pbmcgdGhlIHZlcnRpY2VzLlxuICpcbiAqIEBwYXJhbSAgIHtMYXRMb25bXX0gcG9seWdvbiAtIEFycmF5IG9mIHBvaW50cyBkZWZpbmluZyB2ZXJ0aWNlcyBvZiB0aGUgcG9seWdvblxuICogQHBhcmFtICAge251bWJlcn0gW3JhZGl1cz02MzcxZTNdIC0gKE1lYW4pIHJhZGl1cyBvZiBlYXJ0aCAoZGVmYXVsdHMgdG8gcmFkaXVzIGluIG1ldHJlcykuXG4gKiBAcmV0dXJucyBUaGUgYXJlYSBvZiB0aGUgcG9seWdvbiBpbiB0aGUgc2FtZSB1bml0cyBhcyByYWRpdXMuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHBvbHlnb24gPSBbbmV3IExhdExvbigwLDApLCBuZXcgTGF0TG9uKDEsMCksIG5ldyBMYXRMb24oMCwxKV07XG4gKiAgIHZhciBhcmVhID0gTGF0TG9uLmFyZWFPZihwb2x5Z29uKTsgLy8gNi4xOGU5IG3CsiBUT0RPOiBmaXghXG4gKi9cbkxhdExvbi5hcmVhT2YgPSBmdW5jdGlvbihwb2x5Z29uLCByYWRpdXMpIHtcbiAgICAvLyB1c2VzIEdpcmFyZOKAmXMgdGhlb3JlbTogQSA9IFvOo8644bWiIOKIkiAobuKIkjIpwrfPgF3Ct1LCslxuXG4gICAgdmFyIFIgPSAocmFkaXVzID09PSB1bmRlZmluZWQpID8gNjM3MWUzIDogTnVtYmVyKHJhZGl1cyk7XG5cbiAgICAvLyBjbG9zZSB0aGUgcG9seWdvbiBzbyB0aGF0IHRoZSBsYXN0IHBvaW50IGVxdWFscyB0aGUgZmlyc3QgcG9pbnRcbiAgICBpZiAoIXBvbHlnb25bMF0uZXF1YWxzKHBvbHlnb25bcG9seWdvbi5sZW5ndGgtMV0pKSBwb2x5Z29uLnB1c2gocG9seWdvblswXSk7XG4gICAgdmFyIG4gPSBwb2x5Z29uLmxlbmd0aCAtIDE7XG4gICAgY29uc29sZS5sb2coJ24nLCBuKTtcblxuICAgIC8vIGdldCBncmVhdC1jaXJjbGUgdmVjdG9yIGZvciBlYWNoIGVkZ2VcbiAgICB2YXIgYyA9IFtdO1xuICAgIGZvciAodmFyIHY9MDsgdjxuOyB2KyspIHtcbiAgICAgICAgdmFyIGkgPSBwb2x5Z29uW3ZdLnRvVmVjdG9yKCk7XG4gICAgICAgIHZhciBqID0gcG9seWdvblt2KzFdLnRvVmVjdG9yKCk7XG4gICAgICAgIGNbdl0gPSBpLmNyb3NzKGopOyAvLyBncmVhdCBjaXJjbGUgZm9yIHNlZ21lbnQgdi4udisxXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdjJywgYy5sZW5ndGgsIGMpO1xuICAgIGMucHVzaChjWzBdKTtcblxuICAgIC8vIHN1bSBpbnRlcmlvciBhbmdsZXNcbiAgICB2YXIgzqPOuCA9IDA7XG4gICAgZm9yICh2YXIgdj0wOyB2PG47IHYrKykge1xuICAgICAgICBjb25zb2xlLmxvZyh2LCAoTWF0aC5QSS1jW3ZdLmFuZ2xlVG8oY1t2KzFdKSkudG9EZWdyZWVzKCkpO1xuICAgICAgICDOo864ICs9IE1hdGguUEkgLSBjW3ZdLmFuZ2xlVG8oY1t2KzFdKTsgLy8gVE9ETzogYWx3YXlzIM+AIC0gzrEsIG9yIHNvbWV0aW1lcyBqdXN0IM6xP1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygnzqPOuCcsIM6jzrgudG9EZWdyZWVzKCksICgobi0yKSpNYXRoLlBJKS50b0RlZ3JlZXMoKSk7XG5cbiAgICB2YXIgRSA9ICjOo864IC0gKG4tMikqTWF0aC5QSSk7IC8vIHNwaGVyaWNhbCBleGNlc3MgKGluIHN0ZXJhZGlhbnMpXG4gICAgdmFyIEEgPSBFICogUipSOyAgICAgICAgICAgICAgLy8gYXJlYSAoaW4gdW5pdHMgb2YgcmFkaXVzKVxuXG4gICAgcmV0dXJuIEE7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBwb2ludCByZXByZXNlbnRpbmcgZ2VvZ3JhcGhpYyBtZWFuIG9mIHN1cHBsaWVkIHBvaW50cy5cbiAqXG4gKiBAcGFyYW0gICB7TGF0TG9uW119IHBvaW50cyAtIEFycmF5IG9mIHBvaW50cyB0byBiZSBhdmVyYWdlZC5cbiAqIEByZXR1cm5zIHtMYXRMb259ICAgUG9pbnQgYXQgdGhlIGdlb2dyYXBoaWMgbWVhbiBvZiB0aGUgc3VwcGxpZWQgcG9pbnRzLlxuICogQHRvZG8gTm90IHlldCB0ZXN0ZWQuXG4gKi9cbkxhdExvbi5tZWFuT2YgPSBmdW5jdGlvbihwb2ludHMpIHtcbiAgICB2YXIgbSA9IG5ldyBWZWN0b3IzZCgwLCAwLCAwKTtcblxuICAgIC8vIGFkZCBhbGwgdmVjdG9yc1xuICAgIGZvciAodmFyIHA9MDsgcDxwb2ludHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgbSA9IG0ucGx1cyhwb2ludHNbcF0udG9WZWN0b3IoKSk7XG4gICAgfVxuXG4gICAgLy8gbSBpcyBub3cgZ2VvZ3JhcGhpYyBtZWFuXG4gICAgcmV0dXJuIG0udW5pdCgpLnRvTGF0TG9uUygpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhbm90aGVyIHBvaW50IGlzIGVxdWFsIHRvIOKAmHRoaXPigJkgcG9pbnQuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gcG9pbnQgLSBQb2ludCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0IHRoaXMgcG9pbnQuXG4gKiBAcmV0dXJucyB7Ym9vbH0gICAgVHJ1ZSBpZiBwb2ludHMgYXJlIGlkZW50aWNhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgcDEgPSBuZXcgTGF0TG9uKDUyLjIwNSwgMC4xMTkpO1xuICogICB2YXIgcDIgPSBuZXcgTGF0TG9uKDUyLjIwNSwgMC4xMTkpO1xuICogICB2YXIgZXF1YWwgPSBwMS5lcXVhbHMocDIpOyAvLyB0cnVlXG4gKi9cbkxhdExvbi5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIExhdExvbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BvaW50IGlzIG5vdCBMYXRMb24gb2JqZWN0Jyk7XG5cbiAgICBpZiAodGhpcy5sYXQgIT0gcG9pbnQubGF0KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMubG9uICE9IHBvaW50LmxvbikgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiDigJh0aGlz4oCZIHBvaW50LlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IFtmb3JtYXQ9ZG1zXSAtIEZvcm1hdCBwb2ludCBhcyAnZCcsICdkbScsICdkbXMnLlxuICogQHBhcmFtICAge251bWJlcn0gW2RwPTB8Mnw0XSAtIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byB1c2U6IGRlZmF1bHQgMCBmb3IgZG1zLCAyIGZvciBkbSwgNCBmb3IgZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbW1hLXNlcGFyYXRlZCBmb3JtYXR0ZWQgbGF0aXR1ZGUvbG9uZ2l0dWRlLlxuICovXG5MYXRMb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oZm9ybWF0LCBkcCkge1xuICAgIHJldHVybiBEbXMudG9MYXQodGhpcy5sYXQsIGZvcm1hdCwgZHApICsgJywgJyArIERtcy50b0xvbih0aGlzLmxvbiwgZm9ybWF0LCBkcCk7XG59O1xuXG5cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuLyoqIEV4dGVuZCBOdW1iZXIgb2JqZWN0IHdpdGggbWV0aG9kIHRvIGNvbnZlcnQgbnVtZXJpYyBkZWdyZWVzIHRvIHJhZGlhbnMgKi9cbmlmIChOdW1iZXIucHJvdG90eXBlLnRvUmFkaWFucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgTnVtYmVyLnByb3RvdHlwZS50b1JhZGlhbnMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgKiBNYXRoLlBJIC8gMTgwOyB9O1xufVxuXG4vKiogRXh0ZW5kIE51bWJlciBvYmplY3Qgd2l0aCBtZXRob2QgdG8gY29udmVydCByYWRpYW5zIHRvIG51bWVyaWMgKHNpZ25lZCkgZGVncmVlcyAqL1xuaWYgKE51bWJlci5wcm90b3R5cGUudG9EZWdyZWVzID09PSB1bmRlZmluZWQpIHtcbiAgICBOdW1iZXIucHJvdG90eXBlLnRvRGVncmVlcyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyAqIDE4MCAvIE1hdGguUEk7IH07XG59XG5cbi8qKiBQb2x5ZmlsbCBNYXRoLnNpZ24gZm9yIG9sZCBicm93c2VycyAvIElFICovXG5pZiAoTWF0aC5zaWduID09PSB1bmRlZmluZWQpIHtcbiAgICBNYXRoLnNpZ24gPSBmdW5jdGlvbih4KSB7XG4gICAgICAgIHggPSAreDsgLy8gY29udmVydCB0byBhIG51bWJlclxuICAgICAgICBpZiAoeCA9PT0gMCB8fCBpc05hTih4KSkgcmV0dXJuIHg7XG4gICAgICAgIHJldHVybiB4ID4gMCA/IDEgOiAtMTtcbiAgICB9O1xufVxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBMYXRMb24sIG1vZHVsZS5leHBvcnRzLlZlY3RvcjNkID0gVmVjdG9yM2Q7IC8vIOKJoSBleHBvcnQgeyBMYXRMb24gYXMgZGVmYXVsdCwgVmVjdG9yM2QgfVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2VvZGVzeS9sYXRsb24tdmVjdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cbi8qICBNR1JTIC8gVVRNIENvbnZlcnNpb24gRnVuY3Rpb25zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYykgQ2hyaXMgVmVuZXNzIDIwMTQtMjAxNiAgKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNSVQgTGljZW5jZSAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLXV0bS1tZ3JzLmh0bWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9nZW9kZXN5L2RvY3MvbW9kdWxlLW1ncnMuaHRtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuaWYgKHR5cGVvZiBtb2R1bGUhPSd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB2YXIgVXRtID0gcmVxdWlyZSgnLi91dG0uanMnKTsgICAgICAgICAgICAgICAgICAgLy8g4omhIGltcG9ydCBVdG0gZnJvbSAndXRtLmpzJ1xuaWYgKHR5cGVvZiBtb2R1bGUhPSd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB2YXIgTGF0TG9uID0gcmVxdWlyZSgnLi9sYXRsb24tZWxsaXBzb2lkYWwuanMnKTsgLy8g4omhIGltcG9ydCBMYXRMb24gZnJvbSAnbGF0bG9uLWVsbGlwc29pZGFsLmpzJ1xuXG5cbi8qKlxuICogQ29udmVydCBiZXR3ZWVuIFVuaXZlcnNhbCBUcmFuc3ZlcnNlIE1lcmNhdG9yIChVVE0pIGNvb3JkaW5hdGVzIGFuZCBNaWxpdGFyeSBHcmlkIFJlZmVyZW5jZVxuICogU3lzdGVtIChNR1JTL05BVE8pIGdyaWQgcmVmZXJlbmNlcy5cbiAqXG4gKiBAbW9kdWxlICAgbWdyc1xuICogQHJlcXVpcmVzIHV0bVxuICogQHJlcXVpcmVzIGxhdGxvbi1lbGxpcHNvaWRhbFxuICovXG5cbi8qIHF2IHd3dy5mZ2RjLmdvdi9zdGFuZGFyZHMvcHJvamVjdHMvRkdEQy1zdGFuZGFyZHMtcHJvamVjdHMvdXNuZy9mZ2RjX3N0ZF8wMTFfMjAwMV91c25nLnBkZiBwMTAgKi9cblxuXG4vKlxuICogTGF0aXR1ZGUgYmFuZHMgQy4uWCA4wrAgZWFjaCwgY292ZXJpbmcgODDCsFMgdG8gODTCsE5cbiAqL1xuTWdycy5sYXRCYW5kcyA9ICdDREVGR0hKS0xNTlBRUlNUVVZXWFgnOyAvLyBYIGlzIHJlcGVhdGVkIGZvciA4MC04NMKwTlxuXG5cbi8qXG4gKiAxMDBrbSBncmlkIHNxdWFyZSBjb2x1bW4gKOKAmGXigJkpIGxldHRlcnMgcmVwZWF0IGV2ZXJ5IHRoaXJkIHpvbmVcbiAqL1xuTWdycy5lMTAwa0xldHRlcnMgPSBbICdBQkNERUZHSCcsICdKS0xNTlBRUicsICdTVFVWV1hZWicgXTtcblxuXG4vKlxuICogMTAwa20gZ3JpZCBzcXVhcmUgcm93ICjigJhu4oCZKSBsZXR0ZXJzIHJlcGVhdCBldmVyeSBvdGhlciB6b25lXG4gKi9cbk1ncnMubjEwMGtMZXR0ZXJzID0gWydBQkNERUZHSEpLTE1OUFFSU1RVVicsICdGR0hKS0xNTlBRUlNUVVZBQkNERSddO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhbiBNZ3JzIGdyaWQgcmVmZXJlbmNlIG9iamVjdC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSAge251bWJlcn0gem9uZSAtIDbCsCBsb25naXR1ZGluYWwgem9uZSAoMS4uNjAgY292ZXJpbmcgMTgwwrBXLi4xODDCsEUpLlxuICogQHBhcmFtICB7c3RyaW5nfSBiYW5kIC0gOMKwIGxhdGl0dWRpbmFsIGJhbmQgKEMuLlggY292ZXJpbmcgODDCsFMuLjg0wrBOKS5cbiAqIEBwYXJhbSAge3N0cmluZ30gZTEwMGsgLSBGaXJzdCBsZXR0ZXIgKEUpIG9mIDEwMGttIGdyaWQgc3F1YXJlLlxuICogQHBhcmFtICB7c3RyaW5nfSBuMTAwayAtIFNlY29uZCBsZXR0ZXIgKE4pIG9mIDEwMGttIGdyaWQgc3F1YXJlLlxuICogQHBhcmFtICB7bnVtYmVyfSBlYXN0aW5nIC0gRWFzdGluZyBpbiBtZXRyZXMgd2l0aGluIDEwMGttIGdyaWQgc3F1YXJlLlxuICogQHBhcmFtICB7bnVtYmVyfSBub3J0aGluZyAtIE5vcnRoaW5nIGluIG1ldHJlcyB3aXRoaW4gMTAwa20gZ3JpZCBzcXVhcmUuXG4gKiBAcGFyYW0gIHtMYXRMb24uZGF0dW19IFtkYXR1bT1XR1M4NF0gLSBEYXR1bSBVVE0gY29vcmRpbmF0ZSBpcyBiYXNlZCBvbi5cbiAqIEB0aHJvd3Mge0Vycm9yfSAgSW52YWxpZCBNR1JTIGdyaWQgcmVmZXJlbmNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBtZ3JzUmVmID0gbmV3IE1ncnMoMzEsICdVJywgJ0QnLCAnUScsIDQ4MjUxLCAxMTkzMik7IC8vIDMxVSBEUSA0ODI1MSAxMTkzMlxuICovXG5mdW5jdGlvbiBNZ3JzKHpvbmUsIGJhbmQsIGUxMDBrLCBuMTAwaywgZWFzdGluZywgbm9ydGhpbmcsIGRhdHVtKSB7XG4gICAgLy8gYWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0ICduZXcnXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1ncnMpKSByZXR1cm4gbmV3IE1ncnMoem9uZSwgYmFuZCwgZTEwMGssIG4xMDBrLCBlYXN0aW5nLCBub3J0aGluZywgZGF0dW0pO1xuXG4gICAgaWYgKGRhdHVtID09PSB1bmRlZmluZWQpIGRhdHVtID0gTGF0TG9uLmRhdHVtLldHUzg0OyAvLyBkZWZhdWx0IGlmIG5vdCBzdXBwbGllZFxuXG4gICAgaWYgKCEoMTw9em9uZSAmJiB6b25lPD02MCkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBNR1JTIGdyaWQgcmVmZXJlbmNlICh6b25lIOKAmCcrem9uZSsn4oCZKScpO1xuICAgIGlmIChiYW5kLmxlbmd0aCAhPSAxKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTUdSUyBncmlkIHJlZmVyZW5jZSAoYmFuZCDigJgnK2JhbmQrJ+KAmSknKTtcbiAgICBpZiAoTWdycy5sYXRCYW5kcy5pbmRleE9mKGJhbmQpID09IC0xKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTUdSUyBncmlkIHJlZmVyZW5jZSAoYmFuZCDigJgnK2JhbmQrJ+KAmSknKTtcbiAgICBpZiAoZTEwMGsubGVuZ3RoIT0xKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTUdSUyBncmlkIHJlZmVyZW5jZSAoZTEwMGsg4oCYJytlMTAwaysn4oCZKScpO1xuICAgIGlmIChuMTAway5sZW5ndGghPTEpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBNR1JTIGdyaWQgcmVmZXJlbmNlIChuMTAwayDigJgnK24xMDBrKyfigJkpJyk7XG5cbiAgICB0aGlzLnpvbmUgPSBOdW1iZXIoem9uZSk7XG4gICAgdGhpcy5iYW5kID0gYmFuZDtcbiAgICB0aGlzLmUxMDBrID0gZTEwMGs7XG4gICAgdGhpcy5uMTAwayA9IG4xMDBrO1xuICAgIHRoaXMuZWFzdGluZyA9IE51bWJlcihlYXN0aW5nKTtcbiAgICB0aGlzLm5vcnRoaW5nID0gTnVtYmVyKG5vcnRoaW5nKTtcbiAgICB0aGlzLmRhdHVtID0gZGF0dW07XG59XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBVVE0gY29vcmRpbmF0ZSB0byBNR1JTIHJlZmVyZW5jZS5cbiAqXG4gKiBAcmV0dXJucyB7TWdyc31cbiAqIEB0aHJvd3MgIHtFcnJvcn0gSW52YWxpZCBVVE0gY29vcmRpbmF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgdXRtQ29vcmQgPSBuZXcgVXRtKDMxLCAnTicsIDQ0ODI1MSwgNTQxMTkzMik7XG4gKiAgIHZhciBtZ3JzUmVmID0gdXRtQ29vcmQudG9NZ3JzKCk7IC8vIDMxVSBEUSA0ODI1MSAxMTkzMlxuICovXG5VdG0ucHJvdG90eXBlLnRvTWdycyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChpc05hTih0aGlzLnpvbmUgKyB0aGlzLmVhc3RpbmcgKyB0aGlzLm5vcnRoaW5nKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFVUTSBjb29yZGluYXRlIOKAmCcrdGhpcy50b1N0cmluZygpKyfigJknKTtcblxuICAgIC8vIE1HUlMgem9uZSBpcyBzYW1lIGFzIFVUTSB6b25lXG4gICAgdmFyIHpvbmUgPSB0aGlzLnpvbmU7XG5cbiAgICAvLyBjb252ZXJ0IFVUTSB0byBsYXQvbG9uZyB0byBnZXQgbGF0aXR1ZGUgdG8gZGV0ZXJtaW5lIGJhbmRcbiAgICB2YXIgbGF0bG9uZyA9IHRoaXMudG9MYXRMb25FKCk7XG4gICAgLy8gZ3JpZCB6b25lcyBhcmUgOMKwIHRhbGwsIDDCsE4gaXMgMTB0aCBiYW5kXG4gICAgdmFyIGJhbmQgPSBNZ3JzLmxhdEJhbmRzLmNoYXJBdChNYXRoLmZsb29yKGxhdGxvbmcubGF0LzgrMTApKTsgLy8gbGF0aXR1ZGUgYmFuZFxuXG4gICAgLy8gY29sdW1ucyBpbiB6b25lIDEgYXJlIEEtSCwgem9uZSAyIEotUiwgem9uZSAzIFMtWiwgdGhlbiByZXBlYXRpbmcgZXZlcnkgM3JkIHpvbmVcbiAgICB2YXIgY29sID0gTWF0aC5mbG9vcih0aGlzLmVhc3RpbmcgLyAxMDBlMyk7XG4gICAgdmFyIGUxMDBrID0gTWdycy5lMTAwa0xldHRlcnNbKHpvbmUtMSklM10uY2hhckF0KGNvbC0xKTsgLy8gY29sLTEgc2luY2UgMSoxMDBlMyAtPiBBIChpbmRleCAwKSwgMioxMDBlMyAtPiBCIChpbmRleCAxKSwgZXRjLlxuXG4gICAgLy8gcm93cyBpbiBldmVuIHpvbmVzIGFyZSBBLVYsIGluIG9kZCB6b25lcyBhcmUgRi1FXG4gICAgdmFyIHJvdyA9IE1hdGguZmxvb3IodGhpcy5ub3J0aGluZyAvIDEwMGUzKSAlIDIwO1xuICAgIHZhciBuMTAwayA9IE1ncnMubjEwMGtMZXR0ZXJzWyh6b25lLTEpJTJdLmNoYXJBdChyb3cpO1xuXG4gICAgLy8gdHJ1bmNhdGUgZWFzdGluZy9ub3J0aGluZyB0byB3aXRoaW4gMTAwa20gZ3JpZCBzcXVhcmVcbiAgICB2YXIgZWFzdGluZyA9IHRoaXMuZWFzdGluZyAlIDEwMGUzO1xuICAgIHZhciBub3J0aGluZyA9IHRoaXMubm9ydGhpbmcgJSAxMDBlMztcblxuICAgIC8vIHJvdW5kIHRvIG5tIHByZWNpc2lvblxuICAgIGVhc3RpbmcgPSBOdW1iZXIoZWFzdGluZy50b0ZpeGVkKDYpKTtcbiAgICBub3J0aGluZyA9IE51bWJlcihub3J0aGluZy50b0ZpeGVkKDYpKTtcblxuICAgIHJldHVybiBuZXcgTWdycyh6b25lLCBiYW5kLCBlMTAwaywgbjEwMGssIGVhc3RpbmcsIG5vcnRoaW5nKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBNR1JTIGdyaWQgcmVmZXJlbmNlIHRvIFVUTSBjb29yZGluYXRlLlxuICpcbiAqIEByZXR1cm5zIHtVdG19XG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIHV0bUNvb3JkID0gTWdycy5wYXJzZSgnMzFVIERRIDQ0ODI1MSAxMTkzMicpLnRvVXRtKCk7IC8vIDMxIE4gNDQ4MjUxIDU0MTE5MzJcbiAqL1xuTWdycy5wcm90b3R5cGUudG9VdG0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgem9uZSA9IHRoaXMuem9uZTtcbiAgICB2YXIgYmFuZCA9IHRoaXMuYmFuZDtcbiAgICB2YXIgZTEwMGsgPSB0aGlzLmUxMDBrO1xuICAgIHZhciBuMTAwayA9IHRoaXMubjEwMGs7XG4gICAgdmFyIGVhc3RpbmcgPSB0aGlzLmVhc3Rpbmc7XG4gICAgdmFyIG5vcnRoaW5nID0gdGhpcy5ub3J0aGluZztcblxuICAgIHZhciBoZW1pc3BoZXJlID0gYmFuZD49J04nID8gJ04nIDogJ1MnO1xuXG4gICAgLy8gZ2V0IGVhc3Rpbmcgc3BlY2lmaWVkIGJ5IGUxMDBrXG4gICAgdmFyIGNvbCA9IE1ncnMuZTEwMGtMZXR0ZXJzWyh6b25lLTEpJTNdLmluZGV4T2YoZTEwMGspICsgMTsgLy8gaW5kZXgrMSBzaW5jZSBBIChpbmRleCAwKSAtPiAxKjEwMGUzLCBCIChpbmRleCAxKSAtPiAyKjEwMGUzLCBldGMuXG4gICAgdmFyIGUxMDBrTnVtID0gY29sICogMTAwZTM7IC8vIGUxMDBrIGluIG1ldHJlc1xuXG4gICAgLy8gZ2V0IG5vcnRoaW5nIHNwZWNpZmllZCBieSBuMTAwa1xuICAgIHZhciByb3cgPSBNZ3JzLm4xMDBrTGV0dGVyc1soem9uZS0xKSUyXS5pbmRleE9mKG4xMDBrKTtcbiAgICB2YXIgbjEwMGtOdW0gPSByb3cgKiAxMDBlMzsgLy8gbjEwMGsgaW4gbWV0cmVzXG5cbiAgICAvLyBnZXQgbGF0aXR1ZGUgb2YgKGJvdHRvbSBvZikgYmFuZFxuICAgIHZhciBsYXRCYW5kID0gKE1ncnMubGF0QmFuZHMuaW5kZXhPZihiYW5kKS0xMCkqODtcblxuICAgIC8vIG5vcnRoaW5nIG9mIGJvdHRvbSBvZiBiYW5kLCBleHRlbmRlZCB0byBpbmNsdWRlIGVudGlyZXR5IG9mIGJvdHRvbW1vc3QgMTAwa20gc3F1YXJlXG4gICAgLy8gKDEwMGttIHNxdWFyZSBib3VuZGFyaWVzIGFyZSBhbGlnbmVkIHdpdGggMTAwa20gVVRNIG5vcnRoaW5nIGludGVydmFscylcbiAgICB2YXIgbkJhbmQgPSBNYXRoLmZsb29yKG5ldyBMYXRMb24obGF0QmFuZCwgMCkudG9VdG0oKS5ub3J0aGluZy8xMDBlMykqMTAwZTM7XG4gICAgLy8gMTAwa20gZ3JpZCBzcXVhcmUgcm93IGxldHRlcnMgcmVwZWF0IGV2ZXJ5IDIsMDAwa20gbm9ydGg7IGFkZCBlbm91Z2ggMiwwMDBrbSBibG9ja3MgdG8gZ2V0XG4gICAgLy8gaW50byByZXF1aXJlZCBiYW5kXG4gICAgdmFyIG4yTSA9IDA7IC8vIG5vcnRoaW5nIG9mIDIsMDAwa20gYmxvY2tcbiAgICB3aGlsZSAobjJNICsgbjEwMGtOdW0gKyBub3J0aGluZyA8IG5CYW5kKSBuMk0gKz0gMjAwMGUzO1xuXG4gICAgcmV0dXJuIG5ldyBVdG0oem9uZSwgaGVtaXNwaGVyZSwgZTEwMGtOdW0rZWFzdGluZywgbjJNK24xMDBrTnVtK25vcnRoaW5nLCB0aGlzLmRhdHVtKTtcbn07XG5cblxuLyoqXG4gKiBQYXJzZXMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIE1HUlMgZ3JpZCByZWZlcmVuY2UuXG4gKlxuICogQW4gTUdSUyBncmlkIHJlZmVyZW5jZSBjb21wcmlzZXMgKHNwYWNlLXNlcGFyYXRlZClcbiAqICAtIGdyaWQgem9uZSBkZXNpZ25hdG9yIChHWkQpXG4gKiAgLSAxMDBrbSBncmlkIHNxdWFyZSBsZXR0ZXItcGFpclxuICogIC0gZWFzdGluZ1xuICogIC0gbm9ydGhpbmcuXG4gKlxuICogQHBhcmFtICAge3N0cmluZ30gbWdyc0dyaWRSZWYgLSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgTUdSUyBncmlkIHJlZmVyZW5jZS5cbiAqIEByZXR1cm5zIHtNZ3JzfSAgIE1ncnMgZ3JpZCByZWZlcmVuY2Ugb2JqZWN0LlxuICogQHRocm93cyAge0Vycm9yfSAgSW52YWxpZCBNR1JTIGdyaWQgcmVmZXJlbmNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBtZ3JzUmVmID0gTWdycy5wYXJzZSgnMzFVIERRIDQ4MjUxIDExOTMyJyk7XG4gKiAgIHZhciBtZ3JzUmVmID0gTWdycy5wYXJzZSgnMzFVRFE0ODI1MTExOTMyJyk7XG4gKiAgIC8vICBtZ3JzUmVmOiB7IHpvbmU6MzEsIGJhbmQ6J1UnLCBlMTAwazonRCcsIG4xMDBrOidRJywgZWFzdGluZzo0ODI1MSwgbm9ydGhpbmc6MTE5MzIgfVxuICovXG5NZ3JzLnBhcnNlID0gZnVuY3Rpb24obWdyc0dyaWRSZWYpIHtcbiAgICBtZ3JzR3JpZFJlZiA9IG1ncnNHcmlkUmVmLnRyaW0oKTtcblxuICAgIC8vIGNoZWNrIGZvciBtaWxpdGFyeS1zdHlsZSBncmlkIHJlZmVyZW5jZSB3aXRoIG5vIHNlcGFyYXRvcnNcbiAgICBpZiAoIW1ncnNHcmlkUmVmLm1hdGNoKC9cXHMvKSkge1xuICAgICAgICB2YXIgZW4gPSBtZ3JzR3JpZFJlZi5zbGljZSg1KTsgLy8gZ2V0IGVhc3Rpbmcvbm9ydGhpbmcgZm9sbG93aW5nIHpvbmUvYmFuZC8xMDBrc3FcbiAgICAgICAgZW4gPSBlbi5zbGljZSgwLCBlbi5sZW5ndGgvMikrJyAnK2VuLnNsaWNlKC1lbi5sZW5ndGgvMik7IC8vIHNlcGFyYXRlIGVhc3Rpbmcvbm9ydGhpbmdcbiAgICAgICAgbWdyc0dyaWRSZWYgPSBtZ3JzR3JpZFJlZi5zbGljZSgwLCAzKSsnICcrbWdyc0dyaWRSZWYuc2xpY2UoMywgNSkrJyAnK2VuOyAvLyBpbnNlcnQgc3BhY2VzXG4gICAgfVxuXG4gICAgLy8gbWF0Y2ggc2VwYXJhdGUgZWxlbWVudHMgKHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlKVxuICAgIG1ncnNHcmlkUmVmID0gbWdyc0dyaWRSZWYubWF0Y2goL1xcUysvZyk7XG5cbiAgICBpZiAobWdyc0dyaWRSZWY9PW51bGwgfHwgbWdyc0dyaWRSZWYubGVuZ3RoIT00KSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTUdSUyBncmlkIHJlZmVyZW5jZSDigJgnK21ncnNHcmlkUmVmKyfigJknKTtcblxuICAgIC8vIHNwbGl0IGd6ZCBpbnRvIHpvbmUvYmFuZFxuICAgIHZhciBnemQgPSBtZ3JzR3JpZFJlZlswXTtcbiAgICB2YXIgem9uZSA9IGd6ZC5zbGljZSgwLCAyKTtcbiAgICB2YXIgYmFuZCA9IGd6ZC5zbGljZSgyLCAzKTtcblxuICAgIC8vIHNwbGl0IDEwMGttIGxldHRlci1wYWlyIGludG8gZS9uXG4gICAgdmFyIGVuMTAwayA9IG1ncnNHcmlkUmVmWzFdO1xuICAgIHZhciBlMTAwayA9IGVuMTAway5zbGljZSgwLCAxKTtcbiAgICB2YXIgbjEwMGsgPSBlbjEwMGsuc2xpY2UoMSwgMik7XG5cbiAgICB2YXIgZSA9IG1ncnNHcmlkUmVmWzJdLCBuID0gbWdyc0dyaWRSZWZbM107XG5cbiAgICAvLyBzdGFuZGFyZGlzZSB0byAxMC1kaWdpdCByZWZzIC0gaWUgbWV0cmVzKSAoYnV0IG9ubHkgaWYgPCAxMC1kaWdpdCByZWZzLCB0byBhbGxvdyBkZWNpbWFscylcbiAgICBlID0gZS5sZW5ndGg+PTUgPyAgZSA6IChlKycwMDAwMCcpLnNsaWNlKDAsIDUpO1xuICAgIG4gPSBuLmxlbmd0aD49NSA/ICBuIDogKG4rJzAwMDAwJykuc2xpY2UoMCwgNSk7XG5cbiAgICByZXR1cm4gbmV3IE1ncnMoem9uZSwgYmFuZCwgZTEwMGssIG4xMDBrLCBlLCBuKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIE1HUlMgZ3JpZCByZWZlcmVuY2UuXG4gKlxuICogVG8gZGlzdGluZ3Vpc2ggZnJvbSBjaXZpbGlhbiBVVE0gY29vcmRpbmF0ZSByZXByZXNlbnRhdGlvbnMsIG5vIHNwYWNlIGlzIGluY2x1ZGVkIHdpdGhpbiB0aGVcbiAqIHpvbmUvYmFuZCBncmlkIHpvbmUgZGVzaWduYXRvci5cbiAqXG4gKiBDb21wb25lbnRzIGFyZSBzZXBhcmF0ZWQgYnkgc3BhY2VzOiBmb3IgYSBtaWxpdGFyeS1zdHlsZSB1bnNlcGFyYXRlZCBzdHJpbmcsIHVzZVxuICogTWdycy50b1N0cmluZygpLnJlcGxhY2UoLyAvZywgJycpO1xuICpcbiAqIE5vdGUgdGhhdCBNR1JTIGdyaWQgcmVmZXJlbmNlcyBnZXQgdHJ1bmNhdGVkLCBub3Qgcm91bmRlZCAodW5saWtlIFVUTSBjb29yZGluYXRlcykuXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gW2RpZ2l0cz0xMF0gLSBQcmVjaXNpb24gb2YgcmV0dXJuZWQgZ3JpZCByZWZlcmVuY2UgKGVnIDQgPSBrbSwgMTAgPSBtKS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoaXMgZ3JpZCByZWZlcmVuY2UgaW4gc3RhbmRhcmQgZm9ybWF0LlxuICogQHRocm93cyAge0Vycm9yfSAgSW52YWxpZCBwcmVjaXNpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIG1ncnNTdHIgPSBuZXcgTWdycygzMSwgJ1UnLCAnRCcsICdRJywgNDgyNTEsIDExOTMyKS50b1N0cmluZygpOyAvLyAnMzFVIERRIDQ4MjUxIDExOTMyJ1xuICovXG5NZ3JzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKGRpZ2l0cykge1xuICAgIGRpZ2l0cyA9IChkaWdpdHMgPT09IHVuZGVmaW5lZCkgPyAxMCA6IE51bWJlcihkaWdpdHMpO1xuICAgIGlmIChbMiw0LDYsOCwxMF0uaW5kZXhPZihkaWdpdHMpID09IC0xKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJlY2lzaW9uIOKAmCcrZGlnaXRzKyfigJknKTtcblxuICAgIHZhciB6b25lID0gdGhpcy56b25lLnBhZCgyKTsgLy8gZW5zdXJlIGxlYWRpbmcgemVyb1xuICAgIHZhciBiYW5kID0gdGhpcy5iYW5kO1xuXG4gICAgdmFyIGUxMDBrID0gdGhpcy5lMTAwaztcbiAgICB2YXIgbjEwMGsgPSB0aGlzLm4xMDBrO1xuXG4gICAgLy8gc2V0IHJlcXVpcmVkIHByZWNpc2lvblxuICAgIHZhciBlYXN0aW5nID0gTWF0aC5mbG9vcih0aGlzLmVhc3RpbmcvTWF0aC5wb3coMTAsIDUtZGlnaXRzLzIpKTtcbiAgICB2YXIgbm9ydGhpbmcgPSBNYXRoLmZsb29yKHRoaXMubm9ydGhpbmcvTWF0aC5wb3coMTAsIDUtZGlnaXRzLzIpKTtcblxuICAgIC8vIGVuc3VyZSBsZWFkaW5nIHplcm9zXG4gICAgZWFzdGluZyA9IGVhc3RpbmcucGFkKGRpZ2l0cy8yKTtcbiAgICBub3J0aGluZyA9IG5vcnRoaW5nLnBhZChkaWdpdHMvMik7XG5cbiAgICByZXR1cm4gem9uZStiYW5kICsgJyAnICsgZTEwMGsrbjEwMGsgKyAnICcgICsgZWFzdGluZyArICcgJyArIG5vcnRoaW5nO1xufTtcblxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5cbi8qKiBFeHRlbmQgTnVtYmVyIG9iamVjdCB3aXRoIG1ldGhvZCB0byBwYWQgd2l0aCBsZWFkaW5nIHplcm9zIHRvIG1ha2UgaXQgdyBjaGFycyB3aWRlXG4gKiAgKHEudi4gc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI5OTg3ODQgKi9cbmlmIChOdW1iZXIucHJvdG90eXBlLnBhZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgTnVtYmVyLnByb3RvdHlwZS5wYWQgPSBmdW5jdGlvbih3KSB7XG4gICAgICAgIHZhciBuID0gdGhpcy50b1N0cmluZygpO1xuICAgICAgICB3aGlsZSAobi5sZW5ndGggPCB3KSBuID0gJzAnICsgbjtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfTtcbn1cblxuLyogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtICAqL1xuaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gTWdyczsgLy8g4omhIGV4cG9ydCBkZWZhdWx0IE1ncnNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dlb2Rlc3kvbWdycy5qc1xuLy8gbW9kdWxlIGlkID0gMjMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cbi8qIE9yZG5hbmNlIFN1cnZleSBHcmlkIFJlZmVyZW5jZSBmdW5jdGlvbnMgICAgICAgICAgICAgICAgICAgICAgICAgICAoYykgQ2hyaXMgVmVuZXNzIDIwMDUtMjAxNiAgKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNSVQgTGljZW5jZSAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLWdyaWRyZWYuaHRtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIHd3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9nZW9kZXN5L2RvY3MvbW9kdWxlLW9zZ3JpZHJlZi5odG1sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuaWYgKHR5cGVvZiBtb2R1bGUhPSd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB2YXIgTGF0TG9uID0gcmVxdWlyZSgnLi9sYXRsb24tZWxsaXBzb2lkYWwuanMnKTsgLy8g4omhIGltcG9ydCBMYXRMb24gZnJvbSAnbGF0bG9uLWVsbGlwc29pZGFsLmpzJ1xuXG5cbi8qKlxuICogQ29udmVydCBPUyBncmlkIHJlZmVyZW5jZXMgdG8vZnJvbSBPU0dCIGxhdGl0dWRlL2xvbmdpdHVkZSBwb2ludHMuXG4gKlxuICogRm9ybXVsYXRpb24gaW1wbGVtZW50ZWQgaGVyZSBkdWUgdG8gVGhvbWFzLCBSZWRmZWFybiwgZXRjIGlzIGFzIHB1Ymxpc2hlZCBieSBPUywgYnV0IGlzIGluZmVyaW9yXG4gKiB0byBLcsO8Z2VyIGFzIHVzZWQgYnkgZS5nLiBLYXJuZXkgMjAxMS5cbiAqXG4gKiB3d3cub3JkbmFuY2VzdXJ2ZXkuY28udWsvZG9jcy9zdXBwb3J0L2d1aWRlLWNvb3JkaW5hdGUtc3lzdGVtcy1ncmVhdC1icml0YWluLnBkZi5cbiAqXG4gKiBAbW9kdWxlICAgb3NncmlkcmVmXG4gKiBAcmVxdWlyZXMgbGF0bG9uLWVsbGlwc29pZGFsXG4gKi9cbi8qXG4gKiBDb252ZXJ0ZWQgMjAxNSB0byB3b3JrIHdpdGggV0dTODQgYnkgZGVmYXVsdCwgT1NHQjM2IGFzIG9wdGlvbjtcbiAqIHd3dy5vcmRuYW5jZXN1cnZleS5jby51ay9ibG9nLzIwMTQvMTIvY29uZmlybWF0aW9uLW9uLWNoYW5nZXMtdG8tbGF0aXR1ZGUtYW5kLWxvbmdpdHVkZVxuICovXG5cblxuLyoqXG4gKiBDcmVhdGVzIGFuIE9zR3JpZFJlZiBvYmplY3QuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gZWFzdGluZyAtIEVhc3RpbmcgaW4gbWV0cmVzIGZyb20gT1MgZmFsc2Ugb3JpZ2luLlxuICogQHBhcmFtIHtudW1iZXJ9IG5vcnRoaW5nIC0gTm9ydGhpbmcgaW4gbWV0cmVzIGZyb20gT1MgZmFsc2Ugb3JpZ2luLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBncmlkID0gbmV3IE9zR3JpZFJlZig2NTE0MDksIDMxMzE3Nyk7XG4gKi9cbmZ1bmN0aW9uIE9zR3JpZFJlZihlYXN0aW5nLCBub3J0aGluZykge1xuICAgIC8vIGFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCAnbmV3J1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPc0dyaWRSZWYpKSByZXR1cm4gbmV3IE9zR3JpZFJlZihlYXN0aW5nLCBub3J0aGluZyk7XG5cbiAgICB0aGlzLmVhc3RpbmcgPSBOdW1iZXIoZWFzdGluZyk7XG4gICAgdGhpcy5ub3J0aGluZyA9IE51bWJlcihub3J0aGluZyk7XG59XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBsYXRpdHVkZS9sb25naXR1ZGUgdG8gT3JkbmFuY2UgU3VydmV5IGdyaWQgcmVmZXJlbmNlIGVhc3Rpbmcvbm9ydGhpbmcgY29vcmRpbmF0ZS5cbiAqXG4gKiBOb3RlIGZvcm11bGF0aW9uIGltcGxlbWVudGVkIGhlcmUgZHVlIHRvIFRob21hcywgUmVkZmVhcm4sIGV0YyBpcyBhcyBwdWJsaXNoZWQgYnkgT1MsIGJ1dCBpc1xuICogaW5mZXJpb3IgdG8gS3LDvGdlciBhcyB1c2VkIGJ5IGUuZy4gS2FybmV5IDIwMTEuXG4gKlxuICogQHBhcmFtICAge0xhdExvbn0gICAgcG9pbnQgLSBsYXRpdHVkZS9sb25naXR1ZGUuXG4gKiBAcmV0dXJucyB7T3NHcmlkUmVmfSBPUyBHcmlkIFJlZmVyZW5jZSBlYXN0aW5nL25vcnRoaW5nLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBwID0gbmV3IExhdExvbig1Mi42NTc5OCwgMS43MTYwNSk7XG4gKiAgIHZhciBncmlkID0gT3NHcmlkUmVmLmxhdExvblRvT3NHcmlkKHApOyAvLyBncmlkLnRvU3RyaW5nKCk6IFRHIDUxNDA5IDEzMTc3XG4gKiAgIC8vIGZvciBjb252ZXJzaW9uIG9mIChoaXN0b3JpY2FsKSBPU0dCMzYgbGF0aXR1ZGUvbG9uZ2l0dWRlIHBvaW50OlxuICogICB2YXIgcCA9IG5ldyBMYXRMb24oNTIuNjU3NTcsIDEuNzE3OTEsIExhdExvbi5kYXR1bS5PU0dCMzYpO1xuICovXG5Pc0dyaWRSZWYubGF0TG9uVG9Pc0dyaWQgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGlmICghKHBvaW50IGluc3RhbmNlb2YgTGF0TG9uKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9pbnQgaXMgbm90IExhdExvbiBvYmplY3QnKTtcblxuICAgIC8vIGlmIG5lY2Vzc2FyeSBjb252ZXJ0IHRvIE9TR0IzNiBmaXJzdFxuICAgIGlmIChwb2ludC5kYXR1bSAhPSBMYXRMb24uZGF0dW0uT1NHQjM2KSBwb2ludCA9IHBvaW50LmNvbnZlcnREYXR1bShMYXRMb24uZGF0dW0uT1NHQjM2KTtcblxuICAgIHZhciDPhiA9IHBvaW50LmxhdC50b1JhZGlhbnMoKTtcbiAgICB2YXIgzrsgPSBwb2ludC5sb24udG9SYWRpYW5zKCk7XG5cbiAgICB2YXIgYSA9IDYzNzc1NjMuMzk2LCBiID0gNjM1NjI1Ni45MDk7ICAgICAgICAgICAgICAvLyBBaXJ5IDE4MzAgbWFqb3IgJiBtaW5vciBzZW1pLWF4ZXNcbiAgICB2YXIgRjAgPSAwLjk5OTYwMTI3MTc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYXRHcmlkIHNjYWxlIGZhY3RvciBvbiBjZW50cmFsIG1lcmlkaWFuXG4gICAgdmFyIM+GMCA9ICg0OSkudG9SYWRpYW5zKCksIM67MCA9ICgtMikudG9SYWRpYW5zKCk7ICAvLyBOYXRHcmlkIHRydWUgb3JpZ2luIGlzIDQ5wrBOLDLCsFdcbiAgICB2YXIgTjAgPSAtMTAwMDAwLCBFMCA9IDQwMDAwMDsgICAgICAgICAgICAgICAgICAgICAvLyBub3J0aGluZyAmIGVhc3Rpbmcgb2YgdHJ1ZSBvcmlnaW4sIG1ldHJlc1xuICAgIHZhciBlMiA9IDEgLSAoYipiKS8oYSphKTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVjY2VudHJpY2l0eSBzcXVhcmVkXG4gICAgdmFyIG4gPSAoYS1iKS8oYStiKSwgbjIgPSBuKm4sIG4zID0gbipuKm47ICAgICAgICAgLy8gbiwgbsKyLCBuwrNcblxuICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GKSwgc2luz4YgPSBNYXRoLnNpbijPhik7XG4gICAgdmFyIM69ID0gYSpGMC9NYXRoLnNxcnQoMS1lMipzaW7PhipzaW7Phik7ICAgICAgICAgICAgLy8gbnUgPSB0cmFuc3ZlcnNlIHJhZGl1cyBvZiBjdXJ2YXR1cmVcbiAgICB2YXIgz4EgPSBhKkYwKigxLWUyKS9NYXRoLnBvdygxLWUyKnNpbs+GKnNpbs+GLCAxLjUpOyAvLyByaG8gPSBtZXJpZGlvbmFsIHJhZGl1cyBvZiBjdXJ2YXR1cmVcbiAgICB2YXIgzrcyID0gzr0vz4EtMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBldGEgPSA/XG5cbiAgICB2YXIgTWEgPSAoMSArIG4gKyAoNS80KSpuMiArICg1LzQpKm4zKSAqICjPhi3PhjApO1xuICAgIHZhciBNYiA9ICgzKm4gKyAzKm4qbiArICgyMS84KSpuMykgKiBNYXRoLnNpbijPhi3PhjApICogTWF0aC5jb3Moz4Yrz4YwKTtcbiAgICB2YXIgTWMgPSAoKDE1LzgpKm4yICsgKDE1LzgpKm4zKSAqIE1hdGguc2luKDIqKM+GLc+GMCkpICogTWF0aC5jb3MoMiooz4Yrz4YwKSk7XG4gICAgdmFyIE1kID0gKDM1LzI0KSpuMyAqIE1hdGguc2luKDMqKM+GLc+GMCkpICogTWF0aC5jb3MoMyooz4Yrz4YwKSk7XG4gICAgdmFyIE0gPSBiICogRjAgKiAoTWEgLSBNYiArIE1jIC0gTWQpOyAgICAgICAgICAgICAgLy8gbWVyaWRpb25hbCBhcmNcblxuICAgIHZhciBjb3Mzz4YgPSBjb3PPhipjb3PPhipjb3PPhjtcbiAgICB2YXIgY29zNc+GID0gY29zM8+GKmNvc8+GKmNvc8+GO1xuICAgIHZhciB0YW4yz4YgPSBNYXRoLnRhbijPhikqTWF0aC50YW4oz4YpO1xuICAgIHZhciB0YW40z4YgPSB0YW4yz4YqdGFuMs+GO1xuXG4gICAgdmFyIEkgPSBNICsgTjA7XG4gICAgdmFyIElJID0gKM69LzIpKnNpbs+GKmNvc8+GO1xuICAgIHZhciBJSUkgPSAozr0vMjQpKnNpbs+GKmNvczPPhiooNS10YW4yz4YrOSrOtzIpO1xuICAgIHZhciBJSUlBID0gKM69LzcyMCkqc2luz4YqY29zNc+GKig2MS01OCp0YW4yz4YrdGFuNM+GKTtcbiAgICB2YXIgSVYgPSDOvSpjb3PPhjtcbiAgICB2YXIgViA9ICjOvS82KSpjb3Mzz4YqKM69L8+BLXRhbjLPhik7XG4gICAgdmFyIFZJID0gKM69LzEyMCkgKiBjb3M1z4YgKiAoNSAtIDE4KnRhbjLPhiArIHRhbjTPhiArIDE0Ks63MiAtIDU4KnRhbjLPhirOtzIpO1xuXG4gICAgdmFyIM6UzrsgPSDOuy3OuzA7XG4gICAgdmFyIM6UzrsyID0gzpTOuyrOlM67LCDOlM67MyA9IM6UzrsyKs6UzrssIM6Uzrs0ID0gzpTOuzMqzpTOuywgzpTOuzUgPSDOlM67NCrOlM67LCDOlM67NiA9IM6Uzrs1Ks6Uzrs7XG5cbiAgICB2YXIgTiA9IEkgKyBJSSrOlM67MiArIElJSSrOlM67NCArIElJSUEqzpTOuzY7XG4gICAgdmFyIEUgPSBFMCArIElWKs6UzrsgKyBWKs6UzrszICsgVkkqzpTOuzU7XG5cbiAgICBOID0gTnVtYmVyKE4udG9GaXhlZCgzKSk7IC8vIHJvdW5kIHRvIG1tIHByZWNpc2lvblxuICAgIEUgPSBOdW1iZXIoRS50b0ZpeGVkKDMpKTtcblxuICAgIHJldHVybiBuZXcgT3NHcmlkUmVmKEUsIE4pOyAvLyBnZXRzIHRydW5jYXRlZCB0byBTVyBjb3JuZXIgb2YgMW0gZ3JpZCBzcXVhcmVcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBPcmRuYW5jZSBTdXJ2ZXkgZ3JpZCByZWZlcmVuY2UgZWFzdGluZy9ub3J0aGluZyBjb29yZGluYXRlIHRvIGxhdGl0dWRlL2xvbmdpdHVkZVxuICogKFNXIGNvcm5lciBvZiBncmlkIHNxdWFyZSkuXG4gKlxuICogTm90ZSBmb3JtdWxhdGlvbiBpbXBsZW1lbnRlZCBoZXJlIGR1ZSB0byBUaG9tYXMsIFJlZGZlYXJuLCBldGMgaXMgYXMgcHVibGlzaGVkIGJ5IE9TLCBidXQgaXNcbiAqIGluZmVyaW9yIHRvIEtyw7xnZXIgYXMgdXNlZCBieSBlLmcuIEthcm5leSAyMDExLlxuICpcbiAqIEBwYXJhbSAgIHtPc0dyaWRSZWZ9ICAgIGdyaWRyZWYgLSBHcmlkIHJlZiBFL04gdG8gYmUgY29udmVydGVkIHRvIGxhdC9sb25nIChTVyBjb3JuZXIgb2YgZ3JpZCBzcXVhcmUpLlxuICogQHBhcmFtICAge0xhdExvbi5kYXR1bX0gW2RhdHVtPVdHUzg0XSAtIERhdHVtIHRvIGNvbnZlcnQgZ3JpZCByZWZlcmVuY2UgaW50by5cbiAqIEByZXR1cm5zIHtMYXRMb259ICAgICAgIExhdGl0dWRlL2xvbmdpdHVkZSBvZiBzdXBwbGllZCBncmlkIHJlZmVyZW5jZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgZ3JpZHJlZiA9IG5ldyBPc0dyaWRSZWYoNjUxNDA5LjkwMywgMzEzMTc3LjI3MCk7XG4gKiAgIHZhciBwV2dzODQgPSBPc0dyaWRSZWYub3NHcmlkVG9MYXRMb24oZ3JpZHJlZik7ICAgICAgICAgICAgICAgICAgICAgLy8gNTLCsDM54oCyMjguNzIz4oCzTiwgMDAxwrA0MuKAsjU3Ljc4N+KAs0VcbiAqICAgLy8gdG8gb2J0YWluIChoaXN0b3JpY2FsKSBPU0dCMzYgbGF0aXR1ZGUvbG9uZ2l0dWRlIHBvaW50OlxuICogICB2YXIgcE9zZ2IgPSBPc0dyaWRSZWYub3NHcmlkVG9MYXRMb24oZ3JpZHJlZiwgTGF0TG9uLmRhdHVtLk9TR0IzNik7IC8vIDUywrAzOeKAsjI3LjI1M+KAs04sIDAwMcKwNDPigLIwNC41MTjigLNFXG4gKi9cbk9zR3JpZFJlZi5vc0dyaWRUb0xhdExvbiA9IGZ1bmN0aW9uKGdyaWRyZWYsIGRhdHVtKSB7XG4gICAgaWYgKCEoZ3JpZHJlZiBpbnN0YW5jZW9mIE9zR3JpZFJlZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dyaWRyZWYgaXMgbm90IE9zR3JpZFJlZiBvYmplY3QnKTtcbiAgICBpZiAoZGF0dW0gPT09IHVuZGVmaW5lZCkgZGF0dW0gPSBMYXRMb24uZGF0dW0uV0dTODQ7XG5cbiAgICB2YXIgRSA9IGdyaWRyZWYuZWFzdGluZztcbiAgICB2YXIgTiA9IGdyaWRyZWYubm9ydGhpbmc7XG5cbiAgICB2YXIgYSA9IDYzNzc1NjMuMzk2LCBiID0gNjM1NjI1Ni45MDk7ICAgICAgICAgICAgICAvLyBBaXJ5IDE4MzAgbWFqb3IgJiBtaW5vciBzZW1pLWF4ZXNcbiAgICB2YXIgRjAgPSAwLjk5OTYwMTI3MTc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYXRHcmlkIHNjYWxlIGZhY3RvciBvbiBjZW50cmFsIG1lcmlkaWFuXG4gICAgdmFyIM+GMCA9ICg0OSkudG9SYWRpYW5zKCksIM67MCA9ICgtMikudG9SYWRpYW5zKCk7ICAvLyBOYXRHcmlkIHRydWUgb3JpZ2luIGlzIDQ5wrBOLDLCsFdcbiAgICB2YXIgTjAgPSAtMTAwMDAwLCBFMCA9IDQwMDAwMDsgICAgICAgICAgICAgICAgICAgICAvLyBub3J0aGluZyAmIGVhc3Rpbmcgb2YgdHJ1ZSBvcmlnaW4sIG1ldHJlc1xuICAgIHZhciBlMiA9IDEgLSAoYipiKS8oYSphKTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVjY2VudHJpY2l0eSBzcXVhcmVkXG4gICAgdmFyIG4gPSAoYS1iKS8oYStiKSwgbjIgPSBuKm4sIG4zID0gbipuKm47ICAgICAgICAgLy8gbiwgbsKyLCBuwrNcblxuICAgIHZhciDPhj3PhjAsIE09MDtcbiAgICBkbyB7XG4gICAgICAgIM+GID0gKE4tTjAtTSkvKGEqRjApICsgz4Y7XG5cbiAgICAgICAgdmFyIE1hID0gKDEgKyBuICsgKDUvNCkqbjIgKyAoNS80KSpuMykgKiAoz4Ytz4YwKTtcbiAgICAgICAgdmFyIE1iID0gKDMqbiArIDMqbipuICsgKDIxLzgpKm4zKSAqIE1hdGguc2luKM+GLc+GMCkgKiBNYXRoLmNvcyjPhivPhjApO1xuICAgICAgICB2YXIgTWMgPSAoKDE1LzgpKm4yICsgKDE1LzgpKm4zKSAqIE1hdGguc2luKDIqKM+GLc+GMCkpICogTWF0aC5jb3MoMiooz4Yrz4YwKSk7XG4gICAgICAgIHZhciBNZCA9ICgzNS8yNCkqbjMgKiBNYXRoLnNpbigzKijPhi3PhjApKSAqIE1hdGguY29zKDMqKM+GK8+GMCkpO1xuICAgICAgICBNID0gYiAqIEYwICogKE1hIC0gTWIgKyBNYyAtIE1kKTsgICAgICAgICAgICAgIC8vIG1lcmlkaW9uYWwgYXJjXG5cbiAgICB9IHdoaWxlIChOLU4wLU0gPj0gMC4wMDAwMSk7ICAvLyBpZSB1bnRpbCA8IDAuMDFtbVxuXG4gICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YpLCBzaW7PhiA9IE1hdGguc2luKM+GKTtcbiAgICB2YXIgzr0gPSBhKkYwL01hdGguc3FydCgxLWUyKnNpbs+GKnNpbs+GKTsgICAgICAgICAgICAvLyBudSA9IHRyYW5zdmVyc2UgcmFkaXVzIG9mIGN1cnZhdHVyZVxuICAgIHZhciDPgSA9IGEqRjAqKDEtZTIpL01hdGgucG93KDEtZTIqc2luz4Yqc2luz4YsIDEuNSk7IC8vIHJobyA9IG1lcmlkaW9uYWwgcmFkaXVzIG9mIGN1cnZhdHVyZVxuICAgIHZhciDOtzIgPSDOvS/PgS0xOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV0YSA9ID9cblxuICAgIHZhciB0YW7PhiA9IE1hdGgudGFuKM+GKTtcbiAgICB2YXIgdGFuMs+GID0gdGFuz4YqdGFuz4YsIHRhbjTPhiA9IHRhbjLPhip0YW4yz4YsIHRhbjbPhiA9IHRhbjTPhip0YW4yz4Y7XG4gICAgdmFyIHNlY8+GID0gMS9jb3PPhjtcbiAgICB2YXIgzr0zID0gzr0qzr0qzr0sIM69NSA9IM69MyrOvSrOvSwgzr03ID0gzr01Ks69Ks69O1xuICAgIHZhciBWSUkgPSB0YW7Phi8oMirPgSrOvSk7XG4gICAgdmFyIFZJSUkgPSB0YW7Phi8oMjQqz4Eqzr0zKSooNSszKnRhbjLPhivOtzItOSp0YW4yz4YqzrcyKTtcbiAgICB2YXIgSVggPSB0YW7Phi8oNzIwKs+BKs69NSkqKDYxKzkwKnRhbjLPhis0NSp0YW40z4YpO1xuICAgIHZhciBYID0gc2Vjz4Yvzr07XG4gICAgdmFyIFhJID0gc2Vjz4YvKDYqzr0zKSoozr0vz4ErMip0YW4yz4YpO1xuICAgIHZhciBYSUkgPSBzZWPPhi8oMTIwKs69NSkqKDUrMjgqdGFuMs+GKzI0KnRhbjTPhik7XG4gICAgdmFyIFhJSUEgPSBzZWPPhi8oNTA0MCrOvTcpKig2MSs2NjIqdGFuMs+GKzEzMjAqdGFuNM+GKzcyMCp0YW42z4YpO1xuXG4gICAgdmFyIGRFID0gKEUtRTApLCBkRTIgPSBkRSpkRSwgZEUzID0gZEUyKmRFLCBkRTQgPSBkRTIqZEUyLCBkRTUgPSBkRTMqZEUyLCBkRTYgPSBkRTQqZEUyLCBkRTcgPSBkRTUqZEUyO1xuICAgIM+GID0gz4YgLSBWSUkqZEUyICsgVklJSSpkRTQgLSBJWCpkRTY7XG4gICAgdmFyIM67ID0gzrswICsgWCpkRSAtIFhJKmRFMyArIFhJSSpkRTUgLSBYSUlBKmRFNztcblxuICAgIHZhciBwb2ludCA9ICBuZXcgTGF0TG9uKM+GLnRvRGVncmVlcygpLCDOuy50b0RlZ3JlZXMoKSwgTGF0TG9uLmRhdHVtLk9TR0IzNik7XG4gICAgaWYgKGRhdHVtICE9IExhdExvbi5kYXR1bS5PU0dCMzYpIHBvaW50ID0gcG9pbnQuY29udmVydERhdHVtKGRhdHVtKTtcblxuICAgIHJldHVybiBwb2ludDtcbn07XG5cblxuLyoqXG4gKiBQYXJzZXMgZ3JpZCByZWZlcmVuY2UgdG8gT3NHcmlkUmVmIG9iamVjdC5cbiAqXG4gKiBBY2NlcHRzIHN0YW5kYXJkIGdyaWQgcmVmZXJlbmNlcyAoZWcgJ1NVIDM4NyAxNDgnKSwgd2l0aCBvciB3aXRob3V0IHdoaXRlc3BhY2Ugc2VwYXJhdG9ycywgZnJvbVxuICogdHdvLWRpZ2l0IHJlZmVyZW5jZXMgdXAgdG8gMTAtZGlnaXQgcmVmZXJlbmNlcyAoMW0gw5cgMW0gc3F1YXJlKSwgb3IgZnVsbHkgbnVtZXJpYyBjb21tYS1zZXBhcmF0ZWRcbiAqIHJlZmVyZW5jZXMgaW4gbWV0cmVzIChlZyAnNDM4NzAwLDExNDgwMCcpLlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgIGdyaWRyZWYgLSBTdGFuZGFyZCBmb3JtYXQgT1MgZ3JpZCByZWZlcmVuY2UuXG4gKiBAcmV0dXJucyB7T3NHcmlkUmVmfSBOdW1lcmljIHZlcnNpb24gb2YgZ3JpZCByZWZlcmVuY2UgaW4gbWV0cmVzIGZyb20gZmFsc2Ugb3JpZ2luIChTVyBjb3JuZXIgb2ZcbiAqICAgc3VwcGxpZWQgZ3JpZCBzcXVhcmUpLlxuICogQHRocm93cyBFcnJvciBvbiBJbnZhbGlkIGdyaWQgcmVmZXJlbmNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHZhciBncmlkID0gT3NHcmlkUmVmLnBhcnNlKCdURyA1MTQwOSAxMzE3NycpOyAvLyBncmlkOiB7IGVhc3Rpbmc6IDY1MTQwOSwgbm9ydGhpbmc6IDMxMzE3NyB9XG4gKi9cbk9zR3JpZFJlZi5wYXJzZSA9IGZ1bmN0aW9uKGdyaWRyZWYpIHtcbiAgICBncmlkcmVmID0gU3RyaW5nKGdyaWRyZWYpLnRyaW0oKTtcblxuICAgIC8vIGNoZWNrIGZvciBmdWxseSBudW1lcmljIGNvbW1hLXNlcGFyYXRlZCBncmlkcmVmIGZvcm1hdFxuICAgIHZhciBtYXRjaCA9IGdyaWRyZWYubWF0Y2goL14oXFxkKyksXFxzKihcXGQrKSQvKTtcbiAgICBpZiAobWF0Y2gpIHJldHVybiBuZXcgT3NHcmlkUmVmKG1hdGNoWzFdLCBtYXRjaFsyXSk7XG5cbiAgICAvLyB2YWxpZGF0ZSBmb3JtYXRcbiAgICBtYXRjaCA9IGdyaWRyZWYubWF0Y2goL15bQS1aXXsyfVxccypbMC05XStcXHMqWzAtOV0rJC9pKTtcbiAgICBpZiAoIW1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JpZCByZWZlcmVuY2UnKTtcblxuICAgIC8vIGdldCBudW1lcmljIHZhbHVlcyBvZiBsZXR0ZXIgcmVmZXJlbmNlcywgbWFwcGluZyBBLT4wLCBCLT4xLCBDLT4yLCBldGM6XG4gICAgdmFyIGwxID0gZ3JpZHJlZi50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCkgLSAnQScuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgbDIgPSBncmlkcmVmLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgxKSAtICdBJy5jaGFyQ29kZUF0KDApO1xuICAgIC8vIHNodWZmbGUgZG93biBsZXR0ZXJzIGFmdGVyICdJJyBzaW5jZSAnSScgaXMgbm90IHVzZWQgaW4gZ3JpZDpcbiAgICBpZiAobDEgPiA3KSBsMS0tO1xuICAgIGlmIChsMiA+IDcpIGwyLS07XG5cbiAgICAvLyBjb252ZXJ0IGdyaWQgbGV0dGVycyBpbnRvIDEwMGttLXNxdWFyZSBpbmRleGVzIGZyb20gZmFsc2Ugb3JpZ2luIChncmlkIHNxdWFyZSBTVik6XG4gICAgdmFyIGUxMDBrbSA9ICgobDEtMiklNSkqNSArIChsMiU1KTtcbiAgICB2YXIgbjEwMGttID0gKDE5LU1hdGguZmxvb3IobDEvNSkqNSkgLSBNYXRoLmZsb29yKGwyLzUpO1xuXG4gICAgLy8gc2tpcCBncmlkIGxldHRlcnMgdG8gZ2V0IG51bWVyaWMgKGVhc3Rpbmcvbm9ydGhpbmcpIHBhcnQgb2YgcmVmXG4gICAgdmFyIGVuID0gZ3JpZHJlZi5zbGljZSgyKS50cmltKCkuc3BsaXQoL1xccysvKTtcbiAgICAvLyBpZiBlL24gbm90IHdoaXRlc3BhY2Ugc2VwYXJhdGVkLCBzcGxpdCBoYWxmIHdheVxuICAgIGlmIChlbi5sZW5ndGggPT0gMSkgZW4gPSBbIGVuWzBdLnNsaWNlKDAsIGVuWzBdLmxlbmd0aC8yKSwgZW5bMF0uc2xpY2UoZW5bMF0ubGVuZ3RoLzIpIF07XG5cbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKGUxMDBrbTwwIHx8IGUxMDBrbT42IHx8IG4xMDBrbTwwIHx8IG4xMDBrbT4xMikgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGdyaWQgcmVmZXJlbmNlJyk7XG4gICAgaWYgKGVuLmxlbmd0aCAhPSAyKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JpZCByZWZlcmVuY2UnKTtcbiAgICBpZiAoZW5bMF0ubGVuZ3RoICE9IGVuWzFdLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGdyaWQgcmVmZXJlbmNlJyk7XG5cbiAgICAvLyBzdGFuZGFyZGlzZSB0byAxMC1kaWdpdCByZWZzIChtZXRyZXMpXG4gICAgZW5bMF0gPSAoZW5bMF0rJzAwMDAwJykuc2xpY2UoMCwgNSk7XG4gICAgZW5bMV0gPSAoZW5bMV0rJzAwMDAwJykuc2xpY2UoMCwgNSk7XG5cbiAgICB2YXIgZSA9IGUxMDBrbSArIGVuWzBdO1xuICAgIHZhciBuID0gbjEwMGttICsgZW5bMV07XG5cbiAgICByZXR1cm4gbmV3IE9zR3JpZFJlZihlLCBuKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyDigJh0aGlz4oCZIG51bWVyaWMgZ3JpZCByZWZlcmVuY2UgdG8gc3RhbmRhcmQgT1MgZ3JpZCByZWZlcmVuY2UuXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gW2RpZ2l0cz0xMF0gLSBQcmVjaXNpb24gb2YgcmV0dXJuZWQgZ3JpZCByZWZlcmVuY2UgKDEwIGRpZ2l0cyA9IG1ldHJlcykuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGlzIGdyaWQgcmVmZXJlbmNlIGluIHN0YW5kYXJkIGZvcm1hdC5cbiAqL1xuT3NHcmlkUmVmLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKGRpZ2l0cykge1xuICAgIGRpZ2l0cyA9IChkaWdpdHMgPT09IHVuZGVmaW5lZCkgPyAxMCA6IE51bWJlcihkaWdpdHMpO1xuICAgIGlmIChpc05hTihkaWdpdHMpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJlY2lzaW9uJyk7XG5cbiAgICB2YXIgZSA9IHRoaXMuZWFzdGluZztcbiAgICB2YXIgbiA9IHRoaXMubm9ydGhpbmc7XG4gICAgaWYgKGlzTmFOKGUpIHx8IGlzTmFOKG4pKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JpZCByZWZlcmVuY2UnKTtcblxuICAgIC8vIHVzZSBkaWdpdHMgPSAwIHRvIHJldHVybiBudW1lcmljIGZvcm1hdCAoaW4gbWV0cmVzKVxuICAgIGlmIChkaWdpdHMgPT0gMCkgcmV0dXJuIGUucGFkKDYpKycsJytuLnBhZCg2KTtcblxuICAgIC8vIGdldCB0aGUgMTAwa20tZ3JpZCBpbmRpY2VzXG4gICAgdmFyIGUxMDBrID0gTWF0aC5mbG9vcihlLzEwMDAwMCksIG4xMDBrID0gTWF0aC5mbG9vcihuLzEwMDAwMCk7XG5cbiAgICBpZiAoZTEwMGs8MCB8fCBlMTAwaz42IHx8IG4xMDBrPDAgfHwgbjEwMGs+MTIpIHJldHVybiAnJztcblxuICAgIC8vIHRyYW5zbGF0ZSB0aG9zZSBpbnRvIG51bWVyaWMgZXF1aXZhbGVudHMgb2YgdGhlIGdyaWQgbGV0dGVyc1xuICAgIHZhciBsMSA9ICgxOS1uMTAwaykgLSAoMTktbjEwMGspJTUgKyBNYXRoLmZsb29yKChlMTAwaysxMCkvNSk7XG4gICAgdmFyIGwyID0gKDE5LW4xMDBrKSo1JTI1ICsgZTEwMGslNTtcblxuICAgIC8vIGNvbXBlbnNhdGUgZm9yIHNraXBwZWQgJ0knIGFuZCBidWlsZCBncmlkIGxldHRlci1wYWlyc1xuICAgIGlmIChsMSA+IDcpIGwxKys7XG4gICAgaWYgKGwyID4gNykgbDIrKztcbiAgICB2YXIgbGV0UGFpciA9IFN0cmluZy5mcm9tQ2hhckNvZGUobDErJ0EnLmNoYXJDb2RlQXQoMCksIGwyKydBJy5jaGFyQ29kZUF0KDApKTtcblxuICAgIC8vIHN0cmlwIDEwMGttLWdyaWQgaW5kaWNlcyBmcm9tIGVhc3RpbmcgJiBub3J0aGluZywgYW5kIHJlZHVjZSBwcmVjaXNpb25cbiAgICBlID0gTWF0aC5mbG9vcigoZSUxMDAwMDApL01hdGgucG93KDEwLCA1LWRpZ2l0cy8yKSk7XG4gICAgbiA9IE1hdGguZmxvb3IoKG4lMTAwMDAwKS9NYXRoLnBvdygxMCwgNS1kaWdpdHMvMikpO1xuXG4gICAgdmFyIGdyaWRSZWYgPSBsZXRQYWlyICsgJyAnICsgZS5wYWQoZGlnaXRzLzIpICsgJyAnICsgbi5wYWQoZGlnaXRzLzIpO1xuXG4gICAgcmV0dXJuIGdyaWRSZWY7XG59O1xuXG5cbi8qIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAgKi9cblxuLyoqIFBvbHlmaWxsIFN0cmluZy50cmltIGZvciBvbGQgYnJvd3NlcnNcbiAqICAocS52LiBibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9mYXN0ZXItdHJpbS1qYXZhc2NyaXB0KSAqL1xuaWYgKFN0cmluZy5wcm90b3R5cGUudHJpbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXlxcc1xccyovLCAnJykucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfTtcbn1cblxuLyoqIEV4dGVuZCBOdW1iZXIgb2JqZWN0IHdpdGggbWV0aG9kIHRvIHBhZCB3aXRoIGxlYWRpbmcgemVyb3MgdG8gbWFrZSBpdCB3IGNoYXJzIHdpZGVcbiAqICAocS52LiBzdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjk5ODc4NCAqL1xuaWYgKE51bWJlci5wcm90b3R5cGUucGFkID09PSB1bmRlZmluZWQpIHtcbiAgICBOdW1iZXIucHJvdG90eXBlLnBhZCA9IGZ1bmN0aW9uKHcpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLnRvU3RyaW5nKCk7XG4gICAgICAgIHdoaWxlIChuLmxlbmd0aCA8IHcpIG4gPSAnMCcgKyBuO1xuICAgICAgICByZXR1cm4gbjtcbiAgICB9O1xufVxuXG4vKiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gICovXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBPc0dyaWRSZWY7IC8vIOKJoSBleHBvcnQgZGVmYXVsdCBPc0dyaWRSZWZcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dlb2Rlc3kvb3NncmlkcmVmLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldENvb3JkcyA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpLmdldENvb3JkcztcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gaGVscGVycy5mZWF0dXJlQ29sbGVjdGlvbjtcblxuLyoqXG4gKiBGaW5kcyB0aGUgdGFuZ2VudHMgb2YgYSB7QGxpbmsgUG9seWdvbnwoTXVsdGkpUG9seWdvbn0gZnJvbSBhIHtAbGluayBQb2ludH0uXG4gKlxuICogQG5hbWUgcG9seWdvblRhbmdlbnRzXG4gKiBAcGFyYW0ge0ZlYXR1cmU8UG9pbnQ+fSBwb2ludCB0byBjYWxjdWxhdGUgdGhlIHRhbmdlbnQgcG9pbnRzIGZyb21cbiAqIEBwYXJhbSB7RmVhdHVyZTxQb2x5Z29ufE11bHRpUG9seWdvbj59IHBvbHlnb24gdG8gZ2V0IHRhbmdlbnRzIGZyb21cbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IEZlYXR1cmUgQ29sbGVjdGlvbiBjb250YWluaW5nIHRoZSB0d28gdGFuZ2VudCBwb2ludHNcbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1sxMSwgMF0sIFsyMiwgNF0sIFszMSwgMF0sIFszMSwgMTFdLCBbMjEsIDE1XSwgWzExLCAxMV0sIFsxMSwgMF1dXSk7XG4gKiB2YXIgcG9pbnQgPSB0dXJmLnBvaW50KFs2MSwgNV0pO1xuICpcbiAqIHZhciB0YW5nZW50cyA9IHR1cmYucG9seWdvblRhbmdlbnRzKHBvaW50LCBwb2x5Z29uKVxuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFt0YW5nZW50cywgcG9pbnQsIHBvbHlnb25dO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb2ludCwgcG9seWdvbikge1xuICAgIHZhciBlcHJldjtcbiAgICB2YXIgZW5leHQ7XG4gICAgdmFyIHJ0YW47XG4gICAgdmFyIGx0YW47XG4gICAgdmFyIHBvaW50Q29vcmRzID0gZ2V0Q29vcmRzKHBvaW50KTtcbiAgICB2YXIgcG9seUNvb3JkcyA9IGdldENvb3Jkcyhwb2x5Z29uKTtcblxuICAgIHZhciB0eXBlID0gZ2V0R2VvbVR5cGUocG9seWdvbik7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnUG9seWdvbic6XG4gICAgICAgIHJ0YW4gPSAwO1xuICAgICAgICBsdGFuID0gMDtcbiAgICAgICAgZXByZXYgPSBpc0xlZnQocG9seUNvb3Jkc1swXVswXSwgcG9seUNvb3Jkc1swXVsxXSwgcG9pbnRDb29yZHMpO1xuICAgICAgICB2YXIgb3V0ID0gcHJvY2Vzc1BvbHlnb24ocG9seUNvb3Jkc1swXSwgcG9pbnRDb29yZHMsIGVwcmV2LCBlbmV4dCwgcnRhbiwgbHRhbik7XG4gICAgICAgIHJ0YW4gPSBvdXRbMF07XG4gICAgICAgIGx0YW4gPSBvdXRbMV07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ011bHRpUG9seWdvbic6XG4gICAgICAgIHJ0YW4gPSAwO1xuICAgICAgICBsdGFuID0gMDtcbiAgICAgICAgZXByZXYgPSBpc0xlZnQocG9seUNvb3Jkc1swXVswXVswXSwgcG9seUNvb3Jkc1swXVswXVsxXSwgcG9pbnRDb29yZHMpO1xuICAgICAgICBwb2x5Q29vcmRzLmZvckVhY2goZnVuY3Rpb24gKHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBvdXQgPSBwcm9jZXNzUG9seWdvbihyaW5nWzBdLCBwb2ludENvb3JkcywgZXByZXYsIGVuZXh0LCBydGFuLCBsdGFuKTtcbiAgICAgICAgICAgIHJ0YW4gPSBvdXRbMF07XG4gICAgICAgICAgICBsdGFuID0gb3V0WzFdO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihbaGVscGVycy5wb2ludChydGFuKSwgaGVscGVycy5wb2ludChsdGFuKV0pO1xufTtcblxuZnVuY3Rpb24gcHJvY2Vzc1BvbHlnb24ocG9seWdvbkNvb3JkcywgcHRDb29yZHMsIGVwcmV2LCBlbmV4dCwgcnRhbiwgbHRhbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9seWdvbkNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudENvb3JkcyA9IHBvbHlnb25Db29yZHNbaV07XG4gICAgICAgIHZhciBuZXh0Q29vcmRQYWlyID0gcG9seWdvbkNvb3Jkc1tpICsgMV07XG4gICAgICAgIGlmIChpID09PSBwb2x5Z29uQ29vcmRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIG5leHRDb29yZFBhaXIgPSBwb2x5Z29uQ29vcmRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVuZXh0ID0gaXNMZWZ0KGN1cnJlbnRDb29yZHMsIG5leHRDb29yZFBhaXIsIHB0Q29vcmRzKTtcbiAgICAgICAgaWYgKGVwcmV2IDw9IDAgJiYgZW5leHQgPiAwKSB7XG4gICAgICAgICAgICBpZiAoIWlzQmVsb3cocHRDb29yZHMsIGN1cnJlbnRDb29yZHMsIHJ0YW4pKSB7XG4gICAgICAgICAgICAgICAgcnRhbiA9IGN1cnJlbnRDb29yZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVwcmV2ID4gMCAmJiBlbmV4dCA8PSAwKSB7XG4gICAgICAgICAgICBpZiAoIWlzQWJvdmUocHRDb29yZHMsIGN1cnJlbnRDb29yZHMsIGx0YW4pKSB7XG4gICAgICAgICAgICAgICAgbHRhbiA9IGN1cnJlbnRDb29yZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXByZXYgPSBlbmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIFtydGFuLCBsdGFuXTtcbn1cblxuZnVuY3Rpb24gaXNBYm92ZShwb2ludDEsIHBvaW50MiwgcG9pbnQzKSB7XG4gICAgcmV0dXJuIGlzTGVmdChwb2ludDEsIHBvaW50MiwgcG9pbnQzKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBpc0JlbG93KHBvaW50MSwgcG9pbnQyLCBwb2ludDMpIHtcbiAgICByZXR1cm4gaXNMZWZ0KHBvaW50MSwgcG9pbnQyLCBwb2ludDMpIDw9IDA7XG59XG5cbmZ1bmN0aW9uIGlzTGVmdChwb2ludDEsIHBvaW50MiwgcG9pbnQzKSB7XG4gICAgcmV0dXJuIChwb2ludDJbMF0gLSBwb2ludDFbMF0pICogKHBvaW50M1sxXSAtIHBvaW50MVsxXSkgLSAocG9pbnQzWzBdIC0gcG9pbnQxWzBdKSAqIChwb2ludDJbMV0gLSBwb2ludDFbMV0pO1xufVxuXG4vLyB3aWxsIGJlIGluY2x1ZGVkIGluIEB0dXJmL2ludmFyaWFudFxuZnVuY3Rpb24gZ2V0R2VvbVR5cGUoZ2VvanNvbikge1xuICAgIHJldHVybiAoZ2VvanNvbi5nZW9tZXRyeSkgPyBnZW9qc29uLmdlb21ldHJ5LnR5cGUgOiBnZW9qc29uLnR5cGU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9wb2x5Z29uLXRhbmdlbnRzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGEgPSByZXF1aXJlKCdAdHVyZi9tZXRhJyk7XG52YXIgZ2V0Q29vcmRzID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50JykuZ2V0Q29vcmRzO1xudmFyIGlzQ2xvY2tXaXNlID0gcmVxdWlyZSgndHVyZi1pcy1jbG9ja3dpc2UnKTtcbnZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKS5mZWF0dXJlQ29sbGVjdGlvbjtcbnZhciBnZW9tRWFjaCA9IG1ldGEuZ2VvbUVhY2g7XG52YXIgZmVhdHVyZUVhY2ggPSBtZXRhLmZlYXR1cmVFYWNoO1xuXG4vKipcbiAqIFJld2luZCB7QGxpbmsgTGluZVN0cmluZ3woTXVsdGkpTGluZVN0cmluZ30gb3Ige0BsaW5rIFBvbHlnb258KE11bHRpKVBvbHlnb259IG91dGVyIHJpbmcgY291bnRlcmNsb2Nrd2lzZSBhbmQgaW5uZXIgcmluZ3MgY2xvY2t3aXNlIChVc2VzIHtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Nob2VsYWNlX2Zvcm11bGF8U2hvZWxhY2UgRm9ybXVsYX0pLlxuICpcbiAqIEBuYW1lIHJld2luZFxuICogQHBhcmFtIHtGZWF0dXJlQ29sbGVjdGlvbnxHZW9tZXRyeXxGZWF0dXJlPFBvbHlnb258TXVsdGlQb2x5Z29ufExpbmVTdHJpbmd8TXVsdGlMaW5lU3RyaW5nPn0gZ2VvanNvbiBpbnB1dCBHZW9KU09OIFBvbHlnb25cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JldmVyc2U9ZmFsc2VdIGVuYWJsZSByZXZlcnNlIHdpbmRpbmdcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW211dGF0ZT1mYWxzZV0gYWxsb3dzIEdlb0pTT04gaW5wdXQgdG8gYmUgbXV0YXRlZCAoc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaWYgdHJ1ZSlcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbnxHZW9tZXRyeXxGZWF0dXJlPFBvbHlnb258TXVsdGlQb2x5Z29ufExpbmVTdHJpbmd8TXVsdGlMaW5lU3RyaW5nPn0gcmV3aW5kIFBvbHlnb25cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHR1cmYucG9seWdvbihbW1sxMjEsIC0yOV0sIFsxMzgsIC0yOV0sIFsxMzgsIC0xOF0sIFsxMjEsIC0xOF0sIFsxMjEsIC0yOV1dXSk7XG4gKlxuICogdmFyIHJld2luZCA9IHR1cmYucmV3aW5kKHBvbHlnb24pO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtyZXdpbmRdO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uLCByZXZlcnNlLCBtdXRhdGUpIHtcbiAgICAvLyBkZWZhdWx0IHBhcmFtc1xuICAgIHJldmVyc2UgPSAocmV2ZXJzZSAhPT0gdW5kZWZpbmVkKSA/IHJldmVyc2UgOiBmYWxzZTtcbiAgICBtdXRhdGUgPSAobXV0YXRlICE9PSB1bmRlZmluZWQpID8gbXV0YXRlIDogZmFsc2U7XG5cbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJzxnZW9qc29uPiBpcyByZXF1aXJlZCcpO1xuICAgIGlmICh0eXBlb2YgcmV2ZXJzZSAhPT0gJ2Jvb2xlYW4nKSB0aHJvdyBuZXcgRXJyb3IoJzxyZXZlcnNlPiBtdXN0IGJlIGEgYm9vbGVhbicpO1xuICAgIGlmICh0eXBlb2YgbXV0YXRlICE9PSAnYm9vbGVhbicpIHRocm93IG5ldyBFcnJvcignPG11dGF0ZT4gbXVzdCBiZSBhIGJvb2xlYW4nKTtcblxuICAgIC8vIHByZXZlbnQgaW5wdXQgbXV0YXRpb25cbiAgICBpZiAobXV0YXRlID09PSBmYWxzZSB8fCBtdXRhdGUgPT09IHVuZGVmaW5lZCkgZ2VvanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZ2VvanNvbikpO1xuXG4gICAgLy8gU3VwcG9ydCBGZWF0dXJlIENvbGxlY3Rpb24gb3IgR2VvbWV0cnkgQ29sbGVjdGlvblxuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgc3dpdGNoIChnZW9qc29uLnR5cGUpIHtcbiAgICBjYXNlICdHZW9tZXRyeUNvbGxlY3Rpb24nOlxuICAgICAgICBnZW9tRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHJld2luZChnZW9tZXRyeSwgcmV2ZXJzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ2VvanNvbjtcbiAgICBjYXNlICdGZWF0dXJlQ29sbGVjdGlvbic6XG4gICAgICAgIGZlYXR1cmVFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBmZWF0dXJlRWFjaChyZXdpbmQoZmVhdHVyZSwgcmV2ZXJzZSksIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVDb2xsZWN0aW9uKHJlc3VsdHMpO1xuICAgIH1cbiAgICAvLyBTdXBwb3J0IEZlYXR1cmUgb3IgR2VvbWV0cnkgT2JqZWN0c1xuICAgIHJldHVybiByZXdpbmQoZ2VvanNvbiwgcmV2ZXJzZSk7XG59O1xuXG4vKipcbiAqIFJld2luZFxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBHZW9tZXRyeSBvciBGZWF0dXJlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtyZXZlcnNlPWZhbHNlXSBlbmFibGUgcmV2ZXJzZSB3aW5kaW5nXG4gKiBAcmV0dXJucyB7R2VvbWV0cnl8RmVhdHVyZTxhbnk+fSByZXdpbmQgR2VvbWV0cnkgb3IgRmVhdHVyZVxuICovXG5mdW5jdGlvbiByZXdpbmQoZ2VvanNvbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0eXBlID0gKGdlb2pzb24udHlwZSA9PT0gJ0ZlYXR1cmUnKSA/IGdlb2pzb24uZ2VvbWV0cnkudHlwZSA6IGdlb2pzb24udHlwZTtcblxuICAgIC8vIFN1cHBvcnQgYWxsIEdlb0pTT04gR2VvbWV0cnkgT2JqZWN0c1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6XG4gICAgICAgIGdlb21FYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xuICAgICAgICAgICAgcmV3aW5kKGdlb21ldHJ5LCByZXZlcnNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBnZW9qc29uO1xuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICByZXdpbmRMaW5lU3RyaW5nKGdldENvb3JkcyhnZW9qc29uKSwgcmV2ZXJzZSk7XG4gICAgICAgIHJldHVybiBnZW9qc29uO1xuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICByZXdpbmRQb2x5Z29uKGdldENvb3JkcyhnZW9qc29uKSwgcmV2ZXJzZSk7XG4gICAgICAgIHJldHVybiBnZW9qc29uO1xuICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6XG4gICAgICAgIGdldENvb3JkcyhnZW9qc29uKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lQ29vcmRzKSB7XG4gICAgICAgICAgICByZXdpbmRMaW5lU3RyaW5nKGxpbmVDb29yZHMsIHJldmVyc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgZ2V0Q29vcmRzKGdlb2pzb24pLmZvckVhY2goZnVuY3Rpb24gKGxpbmVDb29yZHMpIHtcbiAgICAgICAgICAgIHJld2luZFBvbHlnb24obGluZUNvb3JkcywgcmV2ZXJzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ2VvanNvbjtcbiAgICBjYXNlICdQb2ludCc6XG4gICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICAgIHJldHVybiBnZW9qc29uO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXdpbmQgTGluZVN0cmluZyAtIG91dGVyIHJpbmcgY2xvY2t3aXNlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkcyBHZW9KU09OIExpbmVTdHJpbmcgZ2VvbWV0cnkgY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JldmVyc2U9ZmFsc2VdIGVuYWJsZSByZXZlcnNlIHdpbmRpbmdcbiAqIEByZXR1cm5zIHt2b2lkfSBtdXRhdGVzIGNvb3JkaW5hdGVzXG4gKi9cbmZ1bmN0aW9uIHJld2luZExpbmVTdHJpbmcoY29vcmRzLCByZXZlcnNlKSB7XG4gICAgaWYgKGlzQ2xvY2tXaXNlKGNvb3JkcykgPT09IHJldmVyc2UpIGNvb3Jkcy5yZXZlcnNlKCk7XG59XG5cbi8qKlxuICogUmV3aW5kIFBvbHlnb24gLSBvdXRlciByaW5nIGNvdW50ZXJjbG9ja3dpc2UgYW5kIGlubmVyIHJpbmdzIGNsb2Nrd2lzZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxBcnJheTxudW1iZXI+Pj59IGNvb3JkcyBHZW9KU09OIFBvbHlnb24gZ2VvbWV0cnkgY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JldmVyc2U9ZmFsc2VdIGVuYWJsZSByZXZlcnNlIHdpbmRpbmdcbiAqIEByZXR1cm5zIHt2b2lkfSBtdXRhdGVzIGNvb3JkaW5hdGVzXG4gKi9cbmZ1bmN0aW9uIHJld2luZFBvbHlnb24oY29vcmRzLCByZXZlcnNlKSB7XG4gICAgLy8gb3V0ZXIgcmluZ1xuICAgIGlmIChpc0Nsb2NrV2lzZShjb29yZHNbMF0pICE9PSByZXZlcnNlKSB7XG4gICAgICAgIGNvb3Jkc1swXS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIC8vIGlubmVyIHJpbmdzXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzQ2xvY2tXaXNlKGNvb3Jkc1tpXSkgPT09IHJldmVyc2UpIHtcbiAgICAgICAgICAgIGNvb3Jkc1tpXS5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9yZXdpbmQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmJveCA9IHJlcXVpcmUoJ0B0dXJmL2Jib3gnKTtcbnZhciBhcmVhID0gcmVxdWlyZSgnQHR1cmYvYXJlYScpO1xudmFyIGluc2lkZSA9IHJlcXVpcmUoJ0B0dXJmL2luc2lkZScpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyk7XG52YXIgZXhwbG9kZSA9IHJlcXVpcmUoJ0B0dXJmL2V4cGxvZGUnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKTtcbnZhciBncmlkVG9NYXRyaXggPSByZXF1aXJlKCdncmlkLXRvLW1hdHJpeCcpO1xudmFyIG1hcmNoaW5nc3F1YXJlcyA9IHJlcXVpcmUoJ21hcmNoaW5nc3F1YXJlcycpO1xudmFyIHBvbHlnb24gPSBoZWxwZXJzLnBvbHlnb247XG52YXIgbXVsdGlQb2x5Z29uID0gaGVscGVycy5tdWx0aVBvbHlnb247XG52YXIgY29sbGVjdGlvbk9mID0gaW52YXJpYW50LmNvbGxlY3Rpb25PZjtcbnZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IGhlbHBlcnMuZmVhdHVyZUNvbGxlY3Rpb247XG5cbi8qKlxuICogVGFrZXMgYSBncmlkIHtAbGluayBGZWF0dXJlQ29sbGVjdGlvbn0gb2Yge0BsaW5rIFBvaW50fSBmZWF0dXJlcyB3aXRoIHotdmFsdWVzIGFuZCBhbiBhcnJheSBvZlxuICogdmFsdWUgYnJlYWtzIGFuZCBnZW5lcmF0ZXMgZmlsbGVkIGNvbnRvdXIgaXNvYmFuZHMuXG4gKlxuICogQG5hbWUgaXNvYmFuZHNcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBwb2ludEdyaWQgaW5wdXQgcG9pbnRzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGJyZWFrcyB3aGVyZSB0byBkcmF3IGNvbnRvdXJzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3pQcm9wZXJ0eT0nZWxldmF0aW9uJ10gdGhlIHByb3BlcnR5IG5hbWUgaW4gYHBvaW50c2AgZnJvbSB3aGljaCB6LXZhbHVlcyB3aWxsIGJlIHB1bGxlZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBvcHRpb25zIG9uIG91dHB1dFxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBbb3B0aW9ucy5pc29iYW5kUHJvcGVydGllcz1bXV0gR2VvSlNPTiBwcm9wZXJ0aWVzIHBhc3NlZCwgaW4gb3JkZXIsIHRvIHRoZSBjb3JyZXNwb25kZW50IGlzb2JhbmQgKG9yZGVyIGRlZmluZWQgYnkgYnJlYWtzKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmNvbW1vblByb3BlcnRpZXM9e31dIEdlb0pTT04gcHJvcGVydGllcyBwYXNzZWQgdG8gQUxMIGlzb2JhbmRzXG4gKiBAcmV0dXJucyB7RmVhdHVyZUNvbGxlY3Rpb248TXVsdGlQb2x5Z29uPn0gYSBGZWF0dXJlQ29sbGVjdGlvbiBvZiB7QGxpbmsgTXVsdGlQb2x5Z29ufSBmZWF0dXJlcyByZXByZXNlbnRpbmcgaXNvYmFuZHNcbiAqIEBleGFtcGxlXG4gKiAvLyBjcmVhdGUgYSBncmlkIG9mIHBvaW50cyB3aXRoIHJhbmRvbSB6LXZhbHVlcyBpbiB0aGVpciBwcm9wZXJ0aWVzXG4gKiB2YXIgZXh0ZW50ID0gWy03MC44MjMzNjQsIC0zMy41NTM5ODQsIC02OS44MjMzNjQsIC0zMi41NTM5ODRdO1xuICogdmFyIGNlbGxXaWR0aCA9IDU7XG4gKiB2YXIgdW5pdHMgPSAnbWlsZXMnO1xuICogdmFyIHBvaW50R3JpZCA9IHR1cmYucG9pbnRHcmlkKGV4dGVudCwgY2VsbFdpZHRoLCB1bml0cyk7XG4gKiBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50R3JpZC5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICogICAgIHBvaW50R3JpZC5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzLmVsZXZhdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAxMDtcbiAqIH1cbiAqIHZhciBicmVha3MgPSBbMCwgNSwgOC41XTtcbiAqXG4gKiB2YXIgaXNvYmFuZHMgPSB0dXJmLmlzb2JhbmRzKHBvaW50R3JpZCwgYnJlYWtzKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbaXNvYmFuZHNdO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb2ludEdyaWQsIGJyZWFrcywgelByb3BlcnR5LCBvcHRpb25zKSB7XG4gICAgLy8gSW5wdXQgdmFsaWRhdGlvblxuICAgIHZhciBpc09iamVjdCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gKCEhaW5wdXQpICYmIChpbnB1dC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbGxlY3Rpb25PZihwb2ludEdyaWQsICdQb2ludCcsICdJbnB1dCBtdXN0IGNvbnRhaW4gUG9pbnRzJyk7XG4gICAgaWYgKCFicmVha3MgfHwgIUFycmF5LmlzQXJyYXkoYnJlYWtzKSkgdGhyb3cgbmV3IEVycm9yKCdicmVha3MgaXMgcmVxdWlyZWQnKTtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAob3B0aW9ucy5jb21tb25Qcm9wZXJ0aWVzICYmICFpc09iamVjdChvcHRpb25zLmNvbW1vblByb3BlcnRpZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY29tbW9uUHJvcGVydGllcyBpcyBub3QgYW4gT2JqZWN0Jyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmlzb2JhbmRQcm9wZXJ0aWVzICYmICFBcnJheS5pc0FycmF5KG9wdGlvbnMuaXNvYmFuZFByb3BlcnRpZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaXNvYmFuZFByb3BlcnRpZXMgaXMgbm90IGFuIEFycmF5Jyk7XG4gICAgfVxuICAgIGlmICh6UHJvcGVydHkgJiYgdHlwZW9mIHpQcm9wZXJ0eSAhPT0gJ3N0cmluZycpIHsgdGhyb3cgbmV3IEVycm9yKCd6UHJvcGVydHkgaXMgbm90IGEgc3RyaW5nJyk7IH1cblxuICAgIHpQcm9wZXJ0eSA9IHpQcm9wZXJ0eSB8fCAnZWxldmF0aW9uJztcbiAgICB2YXIgY29tbW9uUHJvcGVydGllcyA9IG9wdGlvbnMuY29tbW9uUHJvcGVydGllcyB8fCB7fTtcbiAgICB2YXIgaXNvYmFuZFByb3BlcnRpZXMgPSBvcHRpb25zLmlzb2JhbmRQcm9wZXJ0aWVzIHx8IFtdO1xuXG4gICAgLy8gSXNvYmFuZCBtZXRob2RzXG4gICAgdmFyIG1hdHJpeCA9IGdyaWRUb01hdHJpeChwb2ludEdyaWQsIHpQcm9wZXJ0eSwgdHJ1ZSk7XG4gICAgdmFyIGNvbnRvdXJzID0gY3JlYXRlQ29udG91ckxpbmVzKG1hdHJpeCwgYnJlYWtzLCB6UHJvcGVydHkpO1xuICAgIGNvbnRvdXJzID0gcmVzY2FsZUNvbnRvdXJzKGNvbnRvdXJzLCBtYXRyaXgsIHBvaW50R3JpZCk7XG5cbiAgICB2YXIgbXVsdGlwb2x5Z29ucyA9IGNvbnRvdXJzLm1hcChmdW5jdGlvbiAoY29udG91ciwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzb2JhbmRQcm9wZXJ0aWVzW2luZGV4XSAmJiAhaXNPYmplY3QoaXNvYmFuZFByb3BlcnRpZXNbaW5kZXhdKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFYWNoIG1hcHBlZFByb3BlcnR5IGlzIHJlcXVpcmVkIHRvIGJlIGFuIE9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbGxlY3QgYWxsIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIGNvbnRvdXJQcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgY29tbW9uUHJvcGVydGllcyxcbiAgICAgICAgICAgIGlzb2JhbmRQcm9wZXJ0aWVzW2luZGV4XVxuICAgICAgICApO1xuICAgICAgICBjb250b3VyUHJvcGVydGllc1t6UHJvcGVydHldID0gY29udG91clt6UHJvcGVydHldO1xuICAgICAgICB2YXIgbXVsdGlQID0gbXVsdGlQb2x5Z29uKGNvbnRvdXIuZ3JvdXBlZFJpbmdzLCBjb250b3VyUHJvcGVydGllcyk7XG4gICAgICAgIHJldHVybiBtdWx0aVA7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24obXVsdGlwb2x5Z29ucyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGNvbnRvdXJzIGxpbmVzIChmZWF0dXJlc0NvbGxlY3Rpb24gb2YgcG9seWdvbiBmZWF0dXJlcykgZnJvbSB0aGUgMkQgZGF0YSBncmlkXG4gKlxuICogTWFyY2hpbmdzcXVhcmVzIHByb2Nlc3MgdGhlIGdyaWQgZGF0YSBhcyBhIDNEIHJlcHJlc2VudGF0aW9uIG9mIGEgZnVuY3Rpb24gb24gYSAyRCBwbGFuZSwgdGhlcmVmb3JlIGl0XG4gKiBhc3N1bWVzIHRoZSBwb2ludHMgKHgteSBjb29yZGluYXRlcykgYXJlIG9uZSAndW5pdCcgZGlzdGFuY2UuIFRoZSByZXN1bHQgb2YgdGhlIElzb0JhbmRzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlXG4gKiByZXNjYWxlZCwgd2l0aCB0dXJmanMsIHRvIHRoZSBvcmlnaW5hbCBhcmVhIGFuZCBwcm9wb3J0aW9ucyBvbiB0aGUgbWFwXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG1hdHJpeCBHcmlkIERhdGFcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYnJlYWtzIEJyZWFrc1xuICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wZXJ0eT0nZWxldmF0aW9uJ10gUHJvcGVydHlcbiAqIEByZXR1cm5zIHtBcnJheTxhbnk+fSBjb250b3Vyc1xuICovXG5mdW5jdGlvbiBjcmVhdGVDb250b3VyTGluZXMobWF0cml4LCBicmVha3MsIHByb3BlcnR5KSB7XG5cbiAgICB2YXIgY29udG91cnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGJyZWFrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbG93ZXJCYW5kID0gK2JyZWFrc1tpIC0gMV07IC8vIG1ha2Ugc3VyZSB0aGUgYnJlYWtzIHZhbHVlIGlzIGEgbnVtYmVyXG4gICAgICAgIHZhciB1cHBlckJhbmQgPSArYnJlYWtzW2ldO1xuXG4gICAgICAgIHZhciBpc29iYW5kc0Nvb3JkcyA9IG1hcmNoaW5nc3F1YXJlcy5pc29CYW5kcyhtYXRyaXgsIGxvd2VyQmFuZCwgdXBwZXJCYW5kIC0gbG93ZXJCYW5kKTtcbiAgICAgICAgLy8gYXMgcGVyIEdlb0pzb24gcnVsZXMgZm9yIGNyZWF0aW5nIGEgUG9seWdvbiwgbWFrZSBzdXJlIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICAgIC8vIGluIHRoZSBhcnJheSBvZiBMaW5lYXJSaW5ncyByZXByZXNlbnRzIHRoZSBleHRlcmlvciByaW5nIChpLmUuIGJpZ2dlc3QgYXJlYSksXG4gICAgICAgIC8vIGFuZCBhbnkgc3Vic2VxdWVudCBlbGVtZW50cyByZXByZXNlbnQgaW50ZXJpb3IgcmluZ3MgKGkuZS4gc21hbGxlciBhcmVhKTtcbiAgICAgICAgLy8gdGhpcyBhdm9pZHMgcmVuZGVyaW5nIGlzc3VlcyBvZiB0aGUgTXVsdGlQb2x5Z29ucyBvbiB0aGUgbWFwXG4gICAgICAgIHZhciBuZXN0ZWRSaW5ncyA9IG9yZGVyQnlBcmVhKGlzb2JhbmRzQ29vcmRzKTtcbiAgICAgICAgdmFyIGdyb3VwZWRSaW5ncyA9IGdyb3VwTmVzdGVkUmluZ3MobmVzdGVkUmluZ3MpO1xuICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgIG9ialsnZ3JvdXBlZFJpbmdzJ10gPSBncm91cGVkUmluZ3M7XG4gICAgICAgIG9ialtwcm9wZXJ0eV0gPSBsb3dlckJhbmQgKyAnLScgKyB1cHBlckJhbmQ7XG4gICAgICAgIGNvbnRvdXJzLnB1c2gob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRvdXJzO1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBpc29iYW5kcyBvZiAyRCBncmlkIHRvIHBvbHlnb25zIGZvciB0aGUgbWFwXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gY29udG91cnMgQ29udG91cnNcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG1hdHJpeCBHcmlkIERhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludHMgUG9pbnRzIGJ5IExhdGl0dWRlXG4gKiBAcmV0dXJucyB7QXJyYXk8YW55Pn0gY29udG91cnNcbiAqL1xuZnVuY3Rpb24gcmVzY2FsZUNvbnRvdXJzKGNvbnRvdXJzLCBtYXRyaXgsIHBvaW50cykge1xuXG4gICAgLy8gZ2V0IGRpbWVuc2lvbnMgKG9uIHRoZSBtYXApIG9mIHRoZSBvcmlnaW5hbCBncmlkXG4gICAgdmFyIGdyaWRCYm94ID0gYmJveChwb2ludHMpOyAvLyBbIG1pblgsIG1pblksIG1heFgsIG1heFkgXVxuICAgIHZhciBvcmlnaW5hbFdpZHRoID0gZ3JpZEJib3hbMl0gLSBncmlkQmJveFswXTtcbiAgICB2YXIgb3JpZ2luYWxIZWlndGggPSBncmlkQmJveFszXSAtIGdyaWRCYm94WzFdO1xuXG4gICAgLy8gZ2V0IG9yaWdpbiwgd2hpY2ggaXMgdGhlIGZpcnN0IHBvaW50IG9mIHRoZSBsYXN0IHJvdyBvbiB0aGUgcmVjdGFuZ3VsYXIgZGF0YSBvbiB0aGUgbWFwXG4gICAgdmFyIHgwID0gZ3JpZEJib3hbMF07XG4gICAgdmFyIHkwID0gZ3JpZEJib3hbMV07XG4gICAgLy8gZ2V0IG51bWJlciBvZiBjZWxscyBwZXIgc2lkZVxuICAgIHZhciBtYXRyaXhXaWR0aCA9IG1hdHJpeFswXS5sZW5ndGggLSAxO1xuICAgIHZhciBtYXRyaXhIZWlnaHQgPSBtYXRyaXgubGVuZ3RoIC0gMTtcbiAgICAvLyBjYWxjdWxhdGUgdGhlIHNjYWxpbmcgZmFjdG9yIGJldHdlZW4gbWF0cml4IGFuZCByZWN0YW5ndWxhciBncmlkIG9uIHRoZSBtYXBcbiAgICB2YXIgc2NhbGVYID0gb3JpZ2luYWxXaWR0aCAvIG1hdHJpeFdpZHRoO1xuICAgIHZhciBzY2FsZVkgPSBvcmlnaW5hbEhlaWd0aCAvIG1hdHJpeEhlaWdodDtcblxuICAgIHZhciByZXNpemUgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgcG9pbnRbMF0gPSBwb2ludFswXSAqIHNjYWxlWCArIHgwO1xuICAgICAgICBwb2ludFsxXSA9IHBvaW50WzFdICogc2NhbGVZICsgeTA7XG4gICAgfTtcblxuICAgIC8vIHJlc2l6ZSBhbmQgc2hpZnQgZWFjaCBwb2ludC9saW5lIG9mIHRoZSBpc29iYW5kc1xuICAgIGNvbnRvdXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRvdXIpIHtcbiAgICAgICAgY29udG91ci5ncm91cGVkUmluZ3MuZm9yRWFjaChmdW5jdGlvbiAobGluZVJpbmdTZXQpIHtcbiAgICAgICAgICAgIGxpbmVSaW5nU2V0LmZvckVhY2goZnVuY3Rpb24gKGxpbmVSaW5nKSB7XG4gICAgICAgICAgICAgICAgbGluZVJpbmcuZm9yRWFjaChyZXNpemUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBjb250b3Vycztcbn1cblxuXG4vKiAgdXRpbGl0eSBmdW5jdGlvbnMgKi9cblxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgY29vcmRpbmF0ZXMgKG9mIExpbmVhclJpbmdzKSBpbiBkZXNjZW5kaW5nIG9yZGVyIGJ5IGFyZWFcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxMaW5lU3RyaW5nPn0gcmluZ3NDb29yZHMgYXJyYXkgb2YgY2xvc2VkIExpbmVTdHJpbmdcbiAqIEByZXR1cm5zIHtBcnJheX0gYXJyYXkgb2YgdGhlIGlucHV0IExpbmVTdHJpbmcgb3JkZXJlZCBieSBhcmVhXG4gKi9cbmZ1bmN0aW9uIG9yZGVyQnlBcmVhKHJpbmdzQ29vcmRzKSB7XG4gICAgdmFyIHJpbmdzV2l0aEFyZWEgPSBbXTtcbiAgICB2YXIgYXJlYXMgPSBbXTtcbiAgICByaW5nc0Nvb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgLy8gdmFyIHBvbHkgPSBwb2x5Z29uKFtwb2ludHNdKTtcbiAgICAgICAgdmFyIHJpbmdBcmVhID0gYXJlYShwb2x5Z29uKFtjb29yZHNdKSk7XG4gICAgICAgIC8vIGNyZWF0ZSBhbiBhcnJheSBvZiBhcmVhcyB2YWx1ZVxuICAgICAgICBhcmVhcy5wdXNoKHJpbmdBcmVhKTtcbiAgICAgICAgLy8gYXNzb2NpYXRlIGVhY2ggbGluZVJpbmcgd2l0aCBpdHMgYXJlYVxuICAgICAgICByaW5nc1dpdGhBcmVhLnB1c2goe3Jpbmc6IGNvb3JkcywgYXJlYTogcmluZ0FyZWF9KTtcbiAgICB9KTtcbiAgICBhcmVhcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IC8vIGJpZ2dlciAtLT4gc21hbGxlclxuICAgICAgICByZXR1cm4gYiAtIGE7XG4gICAgfSk7XG4gICAgLy8gY3JlYXRlIGEgbmV3IGFycmF5IG9mIGxpbmVhclJpbmdzIGNvb3JkaW5hdGVzIG9yZGVyZWQgYnkgdGhlaXIgYXJlYVxuICAgIHZhciBvcmRlcmVkQnlBcmVhID0gW107XG4gICAgYXJlYXMuZm9yRWFjaChmdW5jdGlvbiAoYXJlYSkge1xuICAgICAgICBmb3IgKHZhciBsciA9IDA7IGxyIDwgcmluZ3NXaXRoQXJlYS5sZW5ndGg7IGxyKyspIHtcbiAgICAgICAgICAgIGlmIChyaW5nc1dpdGhBcmVhW2xyXS5hcmVhID09PSBhcmVhKSB7XG4gICAgICAgICAgICAgICAgb3JkZXJlZEJ5QXJlYS5wdXNoKHJpbmdzV2l0aEFyZWFbbHJdLnJpbmcpO1xuICAgICAgICAgICAgICAgIHJpbmdzV2l0aEFyZWEuc3BsaWNlKGxyLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvcmRlcmVkQnlBcmVhO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgYXJyYXlzIG9mIGNvb3JkaW5hdGVzLCBlYWNoIHJlcHJlc2VudGluZ1xuICogYSBzZXQgb2YgKGNvb3JkaW5hdGVzIG9mKSBuZXN0ZWQgTGluZWFyUmluZ3MsXG4gKiBpLmUuIHRoZSBmaXJzdCByaW5nIGNvbnRhaW5zIGFsbCB0aGUgb3RoZXJzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IG9yZGVyZWRMaW5lYXJSaW5ncyBhcnJheSBvZiBjb29yZGluYXRlcyAob2YgTGluZWFyUmluZ3MpIGluIGRlc2NlbmRpbmcgb3JkZXIgYnkgYXJlYVxuICogQHJldHVybnMge0FycmF5PEFycmF5Pn0gQXJyYXkgb2YgY29vcmRpbmF0ZXMgb2YgbmVzdGVkIExpbmVhclJpbmdzXG4gKi9cbmZ1bmN0aW9uIGdyb3VwTmVzdGVkUmluZ3Mob3JkZXJlZExpbmVhclJpbmdzKSB7XG4gICAgLy8gY3JlYXRlIGEgbGlzdCBvZiB0aGUgKGNvb3JkaW5hdGVzIG9mKSBMaW5lYXJSaW5nc1xuICAgIHZhciBsckxpc3QgPSBvcmRlcmVkTGluZWFyUmluZ3MubWFwKGZ1bmN0aW9uIChscikge1xuICAgICAgICByZXR1cm4ge2xyQ29vcmRpbmF0ZXM6IGxyLCBncm91cGVkOiBmYWxzZX07XG4gICAgfSk7XG4gICAgdmFyIGdyb3VwZWRMaW5lYXJSaW5nc0Nvb3JkcyA9IFtdO1xuICAgIHdoaWxlICghYWxsR3JvdXBlZChsckxpc3QpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbHJMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWxyTGlzdFtpXS5ncm91cGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyBncm91cCBzdGFydGluZyB3aXRoIHRoZSBsYXJnZXIgbm90IGFscmVhZHkgZ3JvdXBlZCByaW5nXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwID0gW107XG4gICAgICAgICAgICAgICAgZ3JvdXAucHVzaChsckxpc3RbaV0ubHJDb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgICAgbHJMaXN0W2ldLmdyb3VwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBvdXRlck1vc3RQb2x5ID0gcG9seWdvbihbbHJMaXN0W2ldLmxyQ29vcmRpbmF0ZXNdKTtcbiAgICAgICAgICAgICAgICAvLyBncm91cCBhbGwgdGhlIHJpbmdzIGNvbnRhaW5lZCBieSB0aGUgb3V0ZXJtb3N0IHJpbmdcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBsckxpc3QubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsckxpc3Rbal0uZ3JvdXBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxyUG9seSA9IHBvbHlnb24oW2xyTGlzdFtqXS5sckNvb3JkaW5hdGVzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbnNpZGUobHJQb2x5LCBvdXRlck1vc3RQb2x5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLnB1c2gobHJMaXN0W2pdLmxyQ29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxyTGlzdFtqXS5ncm91cGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpbnNlcnQgdGhlIG5ldyBncm91cFxuICAgICAgICAgICAgICAgIGdyb3VwZWRMaW5lYXJSaW5nc0Nvb3Jkcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBlZExpbmVhclJpbmdzQ29vcmRzO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1BvbHlnb259IHRlc3RQb2x5Z29uIHBvbHlnb24gb2YgaW50ZXJlc3RcbiAqIEBwYXJhbSB7UG9seWdvbn0gdGFyZ2V0UG9seWdvbiBwb2x5Z29uIHlvdSB3YW50IHRvIGNvbXBhcmUgd2l0aFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGVzdC1Qb2x5Z29uIGlzIGluc2lkZSB0YXJnZXQtUG9seWdvblxuICovXG5mdW5jdGlvbiBpc0luc2lkZSh0ZXN0UG9seWdvbiwgdGFyZ2V0UG9seWdvbikge1xuICAgIHZhciBwb2ludHMgPSBleHBsb2RlKHRlc3RQb2x5Z29uKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5mZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWluc2lkZShwb2ludHMuZmVhdHVyZXNbaV0sIHRhcmdldFBvbHlnb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gbGlzdCBsaXN0IG9mIG9iamVjdHMgd2hpY2ggbWlnaHQgY29udGFpbiB0aGUgJ2dyb3VwJyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGFsbCB0aGUgb2JqZWN0cyBpbiB0aGUgbGlzdCBhcmUgbWFya2VkIGFzIGdyb3VwZWRcbiAqL1xuZnVuY3Rpb24gYWxsR3JvdXBlZChsaXN0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsaXN0W2ldLmdyb3VwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9pc29iYW5kcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBlYWNoID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpLmNvb3JkRWFjaDtcblxuLyoqXG4gKiBUYWtlcyBhIHNldCBvZiBmZWF0dXJlcywgY2FsY3VsYXRlcyB0aGUgYmJveCBvZiBhbGwgaW5wdXQgZmVhdHVyZXMsIGFuZCByZXR1cm5zIGEgYm91bmRpbmcgYm94LlxuICpcbiAqIEBuYW1lIGJib3hcbiAqIEBwYXJhbSB7KEZlYXR1cmV8RmVhdHVyZUNvbGxlY3Rpb24pfSBnZW9qc29uIGlucHV0IGZlYXR1cmVzXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gYmJveCBleHRlbnQgaW4gW21pblgsIG1pblksIG1heFgsIG1heFldIG9yZGVyXG4gKiBAYWRkVG9NYXAgZmVhdHVyZXMsIGJib3hQb2x5Z29uXG4gKiBAZXhhbXBsZVxuICogdmFyIHB0MSA9IHR1cmYucG9pbnQoWzExNC4xNzUzMjksIDIyLjI1MjRdKVxuICogdmFyIHB0MiA9IHR1cmYucG9pbnQoWzExNC4xNzAwMDcsIDIyLjI2Nzk2OV0pXG4gKiB2YXIgcHQzID0gdHVyZi5wb2ludChbMTE0LjIwMDY0OSwgMjIuMjc0NjQxXSlcbiAqIHZhciBwdDQgPSB0dXJmLnBvaW50KFsxMTQuMjAwNjQ5LCAyMi4yNzQ2NDFdKVxuICogdmFyIHB0NSA9IHR1cmYucG9pbnQoWzExNC4xODY3NDQsIDIyLjI2NTc0NV0pXG4gKiB2YXIgZmVhdHVyZXMgPSB0dXJmLmZlYXR1cmVDb2xsZWN0aW9uKFtwdDEsIHB0MiwgcHQzLCBwdDQsIHB0NV0pXG4gKlxuICogdmFyIGJib3ggPSB0dXJmLmJib3goZmVhdHVyZXMpO1xuICpcbiAqIHZhciBiYm94UG9seWdvbiA9IHR1cmYuYmJveFBvbHlnb24oYmJveCk7XG4gKlxuICogLy89YmJveFxuICpcbiAqIC8vPWJib3hQb2x5Z29uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdlb2pzb24pIHtcbiAgICB2YXIgYmJveCA9IFtJbmZpbml0eSwgSW5maW5pdHksIC1JbmZpbml0eSwgLUluZmluaXR5XTtcbiAgICBlYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChjb29yZCkge1xuICAgICAgICBpZiAoYmJveFswXSA+IGNvb3JkWzBdKSBiYm94WzBdID0gY29vcmRbMF07XG4gICAgICAgIGlmIChiYm94WzFdID4gY29vcmRbMV0pIGJib3hbMV0gPSBjb29yZFsxXTtcbiAgICAgICAgaWYgKGJib3hbMl0gPCBjb29yZFswXSkgYmJveFsyXSA9IGNvb3JkWzBdO1xuICAgICAgICBpZiAoYmJveFszXSA8IGNvb3JkWzFdKSBiYm94WzNdID0gY29vcmRbMV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGJib3g7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvaXNvYmFuZHMvbm9kZV9tb2R1bGVzL0B0dXJmL2Jib3gvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYXJlYSA9IHJlcXVpcmUoJ0BtYXBib3gvZ2VvanNvbi1hcmVhJykuZ2VvbWV0cnk7XG52YXIgZ2VvbVJlZHVjZSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5nZW9tUmVkdWNlO1xuXG4vKipcbiAqIFRha2VzIG9uZSBvciBtb3JlIGZlYXR1cmVzIGFuZCByZXR1cm5zIHRoZWlyIGFyZWEgaW4gc3F1YXJlIG1ldGVycy5cbiAqXG4gKiBAbmFtZSBhcmVhXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEZlYXR1cmU8YW55Pn0gZ2VvanNvbiBpbnB1dCBHZW9KU09OIGZlYXR1cmUocylcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFyZWEgaW4gc3F1YXJlIG1ldGVyc1xuICogQGFkZFRvTWFwIHBvbHlnb25cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seWdvbiA9IHtcbiAqICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICBcInByb3BlcnRpZXNcIjoge30sXG4gKiAgIFwiZ2VvbWV0cnlcIjoge1xuICogICAgIFwidHlwZVwiOiBcIlBvbHlnb25cIixcbiAqICAgICBcImNvb3JkaW5hdGVzXCI6IFtcbiAqICAgICAgIFtcbiAqICAgICAgICAgWzEyNSwgLTE1XSxcbiAqICAgICAgICAgWzExMywgLTIyXSxcbiAqICAgICAgICAgWzExNywgLTM3XSxcbiAqICAgICAgICAgWzEzMCwgLTMzXSxcbiAqICAgICAgICAgWzE0OCwgLTM5XSxcbiAqICAgICAgICAgWzE1NCwgLTI3XSxcbiAqICAgICAgICAgWzE0NCwgLTE1XSxcbiAqICAgICAgICAgWzEyNSwgLTE1XVxuICogICAgICAgXVxuICogICAgIF1cbiAqICAgfVxuICogfVxuICogdmFyIGFyZWEgPSB0dXJmLmFyZWEocG9seWdvbik7XG4gKiAvLz1hcmVhID0+IHNxdWFyZSBtZXRlcnNcbiAqIC8vPXBvbHlnb25cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbikge1xuICAgIHJldHVybiBnZW9tUmVkdWNlKGdlb2pzb24sIGZ1bmN0aW9uICh2YWx1ZSwgZ2VvbWV0cnkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICsgYXJlYShnZW9tZXRyeSk7XG4gICAgfSwgMCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvaXNvYmFuZHMvbm9kZV9tb2R1bGVzL0B0dXJmL2FyZWEvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50Jyk7XG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXZlbiVFMiU4MCU5M29kZF9ydWxlXG4vLyBtb2RpZmllZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svcG9pbnQtaW4tcG9seWdvbi9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy8gd2hpY2ggd2FzIG1vZGlmaWVkIGZyb20gaHR0cDovL3d3dy5lY3NlLnJwaS5lZHUvSG9tZXBhZ2VzL3dyZi9SZXNlYXJjaC9TaG9ydF9Ob3Rlcy9wbnBvbHkuaHRtbFxuXG4vKipcbiAqIFRha2VzIGEge0BsaW5rIFBvaW50fSBhbmQgYSB7QGxpbmsgUG9seWdvbn0gb3Ige0BsaW5rIE11bHRpUG9seWdvbn0gYW5kIGRldGVybWluZXMgaWYgdGhlIHBvaW50IHJlc2lkZXMgaW5zaWRlIHRoZSBwb2x5Z29uLiBUaGUgcG9seWdvbiBjYW5cbiAqIGJlIGNvbnZleCBvciBjb25jYXZlLiBUaGUgZnVuY3Rpb24gYWNjb3VudHMgZm9yIGhvbGVzLlxuICpcbiAqIEBuYW1lIGluc2lkZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvaW50Pn0gcG9pbnQgaW5wdXQgcG9pbnRcbiAqIEBwYXJhbSB7RmVhdHVyZTwoUG9seWdvbnxNdWx0aVBvbHlnb24pPn0gcG9seWdvbiBpbnB1dCBwb2x5Z29uIG9yIG11bHRpcG9seWdvblxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgUG9pbnQgaXMgaW5zaWRlIHRoZSBQb2x5Z29uOyBgZmFsc2VgIGlmIHRoZSBQb2ludCBpcyBub3QgaW5zaWRlIHRoZSBQb2x5Z29uXG4gKiBAZXhhbXBsZVxuICogdmFyIHB0ID0gdHVyZi5wb2ludChbLTc3LCA0NF0pO1xuICogdmFyIHBvbHkgPSB0dXJmLnBvbHlnb24oW1tcbiAqICAgWy04MSwgNDFdLFxuICogICBbLTgxLCA0N10sXG4gKiAgIFstNzIsIDQ3XSxcbiAqICAgWy03MiwgNDFdLFxuICogICBbLTgxLCA0MV1cbiAqIF1dKTtcbiAqXG4gKiB2YXIgaXNJbnNpZGUgPSB0dXJmLmluc2lkZShwdCwgcG9seSk7XG4gKlxuICogLy89aXNJbnNpZGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocG9pbnQsIHBvbHlnb24pIHtcbiAgICB2YXIgcHQgPSBpbnZhcmlhbnQuZ2V0Q29vcmQocG9pbnQpO1xuICAgIHZhciBwb2x5cyA9IHBvbHlnb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgLy8gbm9ybWFsaXplIHRvIG11bHRpcG9seWdvblxuICAgIGlmIChwb2x5Z29uLmdlb21ldHJ5LnR5cGUgPT09ICdQb2x5Z29uJykgcG9seXMgPSBbcG9seXNdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGluc2lkZVBvbHkgPSBmYWxzZTsgaSA8IHBvbHlzLmxlbmd0aCAmJiAhaW5zaWRlUG9seTsgaSsrKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGl0IGlzIGluIHRoZSBvdXRlciByaW5nIGZpcnN0XG4gICAgICAgIGlmIChpblJpbmcocHQsIHBvbHlzW2ldWzBdKSkge1xuICAgICAgICAgICAgdmFyIGluSG9sZSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGsgPSAxO1xuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHRoZSBwb2ludCBpbiBhbnkgb2YgdGhlIGhvbGVzXG4gICAgICAgICAgICB3aGlsZSAoayA8IHBvbHlzW2ldLmxlbmd0aCAmJiAhaW5Ib2xlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluUmluZyhwdCwgcG9seXNbaV1ba10sIHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluSG9sZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW5Ib2xlKSBpbnNpZGVQb2x5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5zaWRlUG9seTtcbn07XG5cbi8vIHB0IGlzIFt4LHldIGFuZCByaW5nIGlzIFtbeCx5XSwgW3gseV0sLi5dXG5mdW5jdGlvbiBpblJpbmcocHQsIHJpbmcsIGlnbm9yZUJvdW5kYXJ5KSB7XG4gICAgdmFyIGlzSW5zaWRlID0gZmFsc2U7XG4gICAgaWYgKHJpbmdbMF1bMF0gPT09IHJpbmdbcmluZy5sZW5ndGggLSAxXVswXSAmJiByaW5nWzBdWzFdID09PSByaW5nW3JpbmcubGVuZ3RoIC0gMV1bMV0pIHJpbmcgPSByaW5nLnNsaWNlKDAsIHJpbmcubGVuZ3RoIC0gMSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IHJpbmcubGVuZ3RoIC0gMTsgaSA8IHJpbmcubGVuZ3RoOyBqID0gaSsrKSB7XG4gICAgICAgIHZhciB4aSA9IHJpbmdbaV1bMF0sIHlpID0gcmluZ1tpXVsxXTtcbiAgICAgICAgdmFyIHhqID0gcmluZ1tqXVswXSwgeWogPSByaW5nW2pdWzFdO1xuICAgICAgICB2YXIgb25Cb3VuZGFyeSA9IChwdFsxXSAqICh4aSAtIHhqKSArIHlpICogKHhqIC0gcHRbMF0pICsgeWogKiAocHRbMF0gLSB4aSkgPT09IDApICYmXG4gICAgICAgICAgICAoKHhpIC0gcHRbMF0pICogKHhqIC0gcHRbMF0pIDw9IDApICYmICgoeWkgLSBwdFsxXSkgKiAoeWogLSBwdFsxXSkgPD0gMCk7XG4gICAgICAgIGlmIChvbkJvdW5kYXJ5KSByZXR1cm4gIWlnbm9yZUJvdW5kYXJ5O1xuICAgICAgICB2YXIgaW50ZXJzZWN0ID0gKCh5aSA+IHB0WzFdKSAhPT0gKHlqID4gcHRbMV0pKSAmJlxuICAgICAgICAocHRbMF0gPCAoeGogLSB4aSkgKiAocHRbMV0gLSB5aSkgLyAoeWogLSB5aSkgKyB4aSk7XG4gICAgICAgIGlmIChpbnRlcnNlY3QpIGlzSW5zaWRlID0gIWlzSW5zaWRlO1xuICAgIH1cbiAgICByZXR1cm4gaXNJbnNpZGU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9pc29iYW5kcy9ub2RlX21vZHVsZXMvQHR1cmYvaW5zaWRlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLmZlYXR1cmVDb2xsZWN0aW9uO1xudmFyIGZlYXR1cmVFYWNoID0gcmVxdWlyZSgnQHR1cmYvbWV0YScpLmZlYXR1cmVFYWNoO1xudmFyIGNvb3JkRWFjaCA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKS5jb29yZEVhY2g7XG52YXIgcG9pbnQgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJykucG9pbnQ7XG5cbi8qKlxuICogVGFrZXMgYSBmZWF0dXJlIG9yIHNldCBvZiBmZWF0dXJlcyBhbmQgcmV0dXJucyBhbGwgcG9zaXRpb25zIGFzXG4gKiB7QGxpbmsgUG9pbnR8cG9pbnRzfS5cbiAqXG4gKiBAbmFtZSBleHBsb2RlXG4gKiBAcGFyYW0geyhGZWF0dXJlfEZlYXR1cmVDb2xsZWN0aW9uKX0gZ2VvanNvbiBpbnB1dCBmZWF0dXJlc1xuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPHBvaW50Pn0gcG9pbnRzIHJlcHJlc2VudGluZyB0aGUgZXhwbG9kZWQgaW5wdXQgZmVhdHVyZXNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBpdCBlbmNvdW50ZXJzIGFuIHVua25vd24gZ2VvbWV0cnkgdHlwZVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5ID0ge1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICogICAgIFwiY29vcmRpbmF0ZXNcIjogW1tcbiAqICAgICAgIFsxNzcuNDM0NjkyLCAtMTcuNzc1MTddLFxuICogICAgICAgWzE3Ny40MDIwNzYsIC0xNy43NzkwOTNdLFxuICogICAgICAgWzE3Ny4zODA3OSwgLTE3LjgwMzkzN10sXG4gKiAgICAgICBbMTc3LjQwMjQyLCAtMTcuODI2MTY0XSxcbiAqICAgICAgIFsxNzcuNDM4NDY4LCAtMTcuODI0ODU3XSxcbiAqICAgICAgIFsxNzcuNDU0OTQ4LCAtMTcuNzk2NzQ2XSxcbiAqICAgICAgIFsxNzcuNDM0NjkyLCAtMTcuNzc1MTddXG4gKiAgICAgXV1cbiAqICAgfVxuICogfTtcbiAqXG4gKiB2YXIgcG9pbnRzID0gdHVyZi5leHBsb2RlKHBvbHkpO1xuICpcbiAqIC8vPXBvbHlcbiAqXG4gKiAvLz1wb2ludHNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbikge1xuICAgIHZhciBwb2ludHMgPSBbXTtcbiAgICBpZiAoZ2VvanNvbi50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XG4gICAgICAgIGZlYXR1cmVFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBjb29yZEVhY2goZmVhdHVyZSwgZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQoY29vcmQsIGZlYXR1cmUucHJvcGVydGllcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvb3JkRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KGNvb3JkLCBnZW9qc29uLnByb3BlcnRpZXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbihwb2ludHMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2lzb2JhbmRzL25vZGVfbW9kdWxlcy9AdHVyZi9leHBsb2RlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGEgPSByZXF1aXJlKCdAdHVyZi9tZXRhJyk7XG52YXIgY2VudHJvaWQgPSByZXF1aXJlKCdAdHVyZi9jZW50cm9pZCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ0B0dXJmL2ludmFyaWFudCcpO1xudmFyIHJodW1iQmVhcmluZyA9IHJlcXVpcmUoJ0B0dXJmL3JodW1iLWJlYXJpbmcnKTtcbnZhciByaHVtYkRpc3RhbmNlID0gcmVxdWlyZSgnQHR1cmYvcmh1bWItZGlzdGFuY2UnKTtcbnZhciByaHVtYkRlc3RpbmF0aW9uID0gcmVxdWlyZSgnQHR1cmYvcmh1bWItZGVzdGluYXRpb24nKTtcbnZhciBjb29yZEVhY2ggPSBtZXRhLmNvb3JkRWFjaDtcbnZhciBnZXRDb29yZHMgPSBpbnZhcmlhbnQuZ2V0Q29vcmRzO1xuXG4vKipcbiAqIFJvdGF0ZXMgYW55IGdlb2pzb24gRmVhdHVyZSBvciBHZW9tZXRyeSBvZiBhIHNwZWNpZmllZCBhbmdsZSwgYXJvdW5kIGl0cyBgY2VudHJvaWRgIG9yIGEgZ2l2ZW4gYHBpdm90YCBwb2ludDtcbiAqIGFsbCByb3RhdGlvbnMgZm9sbG93IHRoZSByaWdodC1oYW5kIHJ1bGU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JpZ2h0LWhhbmRfcnVsZVxuICpcbiAqIEBuYW1lIHRyYW5zZm9ybVJvdGF0ZVxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIG9iamVjdCB0byBiZSByb3RhdGVkXG4gKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgb2Ygcm90YXRpb24gKGFsb25nIHRoZSB2ZXJ0aWNhbCBheGlzKSwgZnJvbSBOb3J0aCBpbiBkZWNpbWFsIGRlZ3JlZXMsIG5lZ2F0aXZlIGNsb2Nrd2lzZVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvaW50PnxBcnJheTxudW1iZXI+fSBbcGl2b3Q9YGNlbnRyb2lkYF0gcG9pbnQgYXJvdW5kIHdoaWNoIHRoZSByb3RhdGlvbiB3aWxsIGJlIHBlcmZvcm1lZFxuICogQHBhcmFtIHtib29sZWFufSBbbXV0YXRlPWZhbHNlXSBhbGxvd3MgR2VvSlNPTiBpbnB1dCB0byBiZSBtdXRhdGVkIChzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpZiB0cnVlKVxuICogQHJldHVybnMge0dlb0pTT059IHRoZSByb3RhdGVkIEdlb0pTT04gZmVhdHVyZVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5ID0gdHVyZi5wb2x5Z29uKFtbWzAsMjldLFszLjUsMjldLFsyLjUsMzJdLFswLDI5XV1dKTtcbiAqIHZhciByb3RhdGVkUG9seSA9IHR1cmYudHJhbnNmb3JtUm90YXRlKHBvbHksIDEwLCBbMCwgMjVdKTtcbiAqXG4gKiAvL2FkZFRvTWFwXG4gKiB2YXIgYWRkVG9NYXAgPSBbcG9seSwgcm90YXRlZFBvbHldO1xuICogcm90YXRlZFBvbHkucHJvcGVydGllcyA9IHtzdHJva2U6ICcjRjAwJywgJ3N0cm9rZS13aWR0aCc6IDR9O1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uLCBhbmdsZSwgcGl2b3QsIG11dGF0ZSkge1xuICAgIC8vIElucHV0IHZhbGlkYXRpb25cbiAgICBpZiAoIWdlb2pzb24pIHRocm93IG5ldyBFcnJvcignZ2VvanNvbiBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChhbmdsZSA9PT0gdW5kZWZpbmVkIHx8IGFuZ2xlID09PSBudWxsIHx8IGlzTmFOKGFuZ2xlKSkgdGhyb3cgbmV3IEVycm9yKCdhbmdsZSBpcyByZXF1aXJlZCcpO1xuXG4gICAgLy8gU2hvcnRjdXQgbm8tcm90YXRpb25cbiAgICBpZiAoYW5nbGUgPT09IDApIHJldHVybiBnZW9qc29uO1xuXG4gICAgLy8gVXNlIGNlbnRyb2lkIG9mIEdlb0pTT04gaWYgcGl2b3QgaXMgbm90IHByb3ZpZGVkXG4gICAgaWYgKCFwaXZvdCkgcGl2b3QgPSBjZW50cm9pZChnZW9qc29uKTtcblxuICAgIC8vIENsb25lIGdlb2pzb24gdG8gYXZvaWQgc2lkZSBlZmZlY3RzXG4gICAgaWYgKG11dGF0ZSA9PT0gZmFsc2UgfHwgbXV0YXRlID09PSB1bmRlZmluZWQpIGdlb2pzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGdlb2pzb24pKTtcblxuICAgIC8vIFJvdGF0ZSBlYWNoIGNvb3JkaW5hdGVcbiAgICBjb29yZEVhY2goZ2VvanNvbiwgZnVuY3Rpb24gKHBvaW50Q29vcmRzKSB7XG4gICAgICAgIHZhciBpbml0aWFsQW5nbGUgPSByaHVtYkJlYXJpbmcocGl2b3QsIHBvaW50Q29vcmRzKTtcbiAgICAgICAgdmFyIGZpbmFsQW5nbGUgPSBpbml0aWFsQW5nbGUgKyBhbmdsZTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gcmh1bWJEaXN0YW5jZShwaXZvdCwgcG9pbnRDb29yZHMpO1xuICAgICAgICB2YXIgbmV3Q29vcmRzID0gZ2V0Q29vcmRzKHJodW1iRGVzdGluYXRpb24ocGl2b3QsIGRpc3RhbmNlLCBmaW5hbEFuZ2xlKSk7XG4gICAgICAgIHBvaW50Q29vcmRzWzBdID0gbmV3Q29vcmRzWzBdO1xuICAgICAgICBwb2ludENvb3Jkc1sxXSA9IG5ld0Nvb3Jkc1sxXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZ2VvanNvbjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi90cmFuc2Zvcm0tcm90YXRlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGEgPSByZXF1aXJlKCdAdHVyZi9tZXRhJyk7XG52YXIgY2VudGVyID0gcmVxdWlyZSgnQHR1cmYvY2VudGVyJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBjZW50cm9pZCA9IHJlcXVpcmUoJ0B0dXJmL2NlbnRyb2lkJyk7XG52YXIgdHVyZkJCb3ggPSByZXF1aXJlKCdAdHVyZi9iYm94Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50Jyk7XG52YXIgcmh1bWJCZWFyaW5nID0gcmVxdWlyZSgnQHR1cmYvcmh1bWItYmVhcmluZycpO1xudmFyIHJodW1iRGlzdGFuY2UgPSByZXF1aXJlKCdAdHVyZi9yaHVtYi1kaXN0YW5jZScpO1xudmFyIHJodW1iRGVzdGluYXRpb24gPSByZXF1aXJlKCdAdHVyZi9yaHVtYi1kZXN0aW5hdGlvbicpO1xudmFyIHBvaW50ID0gaGVscGVycy5wb2ludDtcbnZhciBjb29yZEVhY2ggPSBtZXRhLmNvb3JkRWFjaDtcbnZhciBmZWF0dXJlRWFjaCA9IG1ldGEuZmVhdHVyZUVhY2g7XG52YXIgZ2V0Q29vcmQgPSBpbnZhcmlhbnQuZ2V0Q29vcmQ7XG52YXIgZ2V0Q29vcmRzID0gaW52YXJpYW50LmdldENvb3JkcztcblxuXG4vKipcbiAqIFNjYWxlIGEgR2VvSlNPTiBmcm9tIGEgZ2l2ZW4gcG9pbnQgYnkgYSBmYWN0b3Igb2Ygc2NhbGluZyAoZXg6IGZhY3Rvcj0yIHdvdWxkIG1ha2UgdGhlIEdlb0pTT04gMjAwJSBsYXJnZXIpLlxuICogSWYgYSBGZWF0dXJlQ29sbGVjdGlvbiBpcyBwcm92aWRlZCwgdGhlIG9yaWdpbiBwb2ludCB3aWxsIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gZWFjaCBpbmRpdmlkdWFsIEZlYXR1cmUuXG4gKlxuICogQG5hbWUgdHJhbnNmb3JtU2NhbGVcbiAqIEBwYXJhbSB7R2VvSlNPTn0gZ2VvanNvbiBHZW9KU09OIHRvIGJlIHNjYWxlZFxuICogQHBhcmFtIHtudW1iZXJ9IGZhY3RvciBvZiBzY2FsaW5nLCBwb3NpdGl2ZSBvciBuZWdhdGl2ZSB2YWx1ZXMgZ3JlYXRlciB0aGFuIDBcbiAqIEBwYXJhbSB7c3RyaW5nfEdlb21ldHJ5fEZlYXR1cmU8UG9pbnQ+fEFycmF5PG51bWJlcj59IFtvcmlnaW49XCJjZW50cm9pZFwiXSBQb2ludCBmcm9tIHdoaWNoIHRoZSBzY2FsaW5nIHdpbGwgb2NjdXIgKHN0cmluZyBvcHRpb25zOiBzdy9zZS9udy9uZS9jZW50ZXIvY2VudHJvaWQpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFttdXRhdGU9ZmFsc2VdIGFsbG93cyBHZW9KU09OIGlucHV0IHRvIGJlIG11dGF0ZWQgKHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGluY3JlYXNlIGlmIHRydWUpXG4gKiBAcmV0dXJucyB7R2VvSlNPTn0gc2NhbGVkIEdlb0pTT05cbiAqIEBleGFtcGxlXG4gKiB2YXIgcG9seSA9IHR1cmYucG9seWdvbihbW1swLDI5XSxbMy41LDI5XSxbMi41LDMyXSxbMCwyOV1dXSk7XG4gKiB2YXIgc2NhbGVkUG9seSA9IHR1cmYudHJhbnNmb3JtU2NhbGUocG9seSwgMyk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvbHksIHNjYWxlZFBvbHldO1xuICogc2NhbGVkUG9seS5wcm9wZXJ0aWVzID0ge3N0cm9rZTogJyNGMDAnLCAnc3Ryb2tlLXdpZHRoJzogNH07XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdlb2pzb24sIGZhY3Rvciwgb3JpZ2luLCBtdXRhdGUpIHtcbiAgICAvLyBJbnB1dCB2YWxpZGF0aW9uXG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb2pzb24gcmVxdWlyZWQnKTtcbiAgICBpZiAodHlwZW9mIGZhY3RvciAhPT0gJ251bWJlcicgfHwgZmFjdG9yID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgZmFjdG9yJyk7XG4gICAgdmFyIG9yaWdpbklzUG9pbnQgPSBBcnJheS5pc0FycmF5KG9yaWdpbikgfHwgdHlwZW9mIG9yaWdpbiA9PT0gJ29iamVjdCc7XG5cbiAgICAvLyBDbG9uZSBnZW9qc29uIHRvIGF2b2lkIHNpZGUgZWZmZWN0c1xuICAgIGlmIChtdXRhdGUgIT09IHRydWUpIGdlb2pzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGdlb2pzb24pKTtcblxuICAgIC8vIFNjYWxlIGVhY2ggRmVhdHVyZSBzZXBhcmF0ZWx5XG4gICAgaWYgKGdlb2pzb24udHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJyAmJiAhb3JpZ2luSXNQb2ludCkge1xuICAgICAgICBmZWF0dXJlRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoZmVhdHVyZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGdlb2pzb24uZmVhdHVyZXNbaW5kZXhdID0gc2NhbGUoZmVhdHVyZSwgZmFjdG9yLCBvcmlnaW4pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgfVxuICAgIC8vIFNjYWxlIEZlYXR1cmUvR2VvbWV0cnlcbiAgICByZXR1cm4gc2NhbGUoZ2VvanNvbiwgZmFjdG9yLCBvcmlnaW4pO1xufTtcblxuLyoqXG4gKiBTY2FsZSBGZWF0dXJlL0dlb21ldHJ5XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZXxHZW9tZXRyeX0gZ2VvanNvbiBHZW9KU09OIEZlYXR1cmUvR2VvbWV0cnlcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYWN0b3Igb2Ygc2NhbGluZywgcG9zaXRpdmUgb3IgbmVnYXRpdmUgdmFsdWVzIGdyZWF0ZXIgdGhhbiAwXG4gKiBAcGFyYW0ge3N0cmluZ3xHZW9tZXRyeXxGZWF0dXJlPFBvaW50PnxBcnJheTxudW1iZXI+fSBbb3JpZ2luPVwiY2VudHJvaWRcIl0gUG9pbnQgZnJvbSB3aGljaCB0aGUgc2NhbGluZyB3aWxsIG9jY3VyIChzdHJpbmcgb3B0aW9uczogc3cvc2UvbncvbmUvY2VudGVyL2NlbnRyb2lkKVxuICogQHJldHVybnMge0ZlYXR1cmV8R2VvbWV0cnl9IHNjYWxlZCBHZW9KU09OIEZlYXR1cmUvR2VvbWV0cnlcbiAqL1xuZnVuY3Rpb24gc2NhbGUoZ2VvanNvbiwgZmFjdG9yLCBvcmlnaW4pIHtcbiAgICAvLyBEZWZhdWx0IHBhcmFtc1xuICAgIHZhciBpc1BvaW50ID0gKGdlb2pzb24udHlwZSA9PT0gJ1BvaW50JyB8fCBnZW9qc29uLmdlb21ldHJ5ICYmIGdlb2pzb24uZ2VvbWV0cnkudHlwZSA9PT0gJ1BvaW50Jyk7XG4gICAgb3JpZ2luID0gZGVmaW5lT3JpZ2luKGdlb2pzb24sIG9yaWdpbik7XG5cbiAgICAvLyBTaG9ydGN1dCBuby1zY2FsaW5nXG4gICAgaWYgKGZhY3RvciA9PT0gMSB8fCBpc1BvaW50KSByZXR1cm4gZ2VvanNvbjtcblxuICAgIC8vIFNjYWxlIGVhY2ggY29vcmRpbmF0ZVxuICAgIGNvb3JkRWFjaChnZW9qc29uLCBmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsRGlzdGFuY2UgPSByaHVtYkRpc3RhbmNlKG9yaWdpbiwgY29vcmQpO1xuICAgICAgICB2YXIgYmVhcmluZyA9IHJodW1iQmVhcmluZyhvcmlnaW4sIGNvb3JkKTtcbiAgICAgICAgdmFyIG5ld0Rpc3RhbmNlID0gb3JpZ2luYWxEaXN0YW5jZSAqIGZhY3RvcjtcbiAgICAgICAgdmFyIG5ld0Nvb3JkID0gZ2V0Q29vcmRzKHJodW1iRGVzdGluYXRpb24ob3JpZ2luLCBuZXdEaXN0YW5jZSwgYmVhcmluZykpO1xuICAgICAgICBjb29yZFswXSA9IG5ld0Nvb3JkWzBdO1xuICAgICAgICBjb29yZFsxXSA9IG5ld0Nvb3JkWzFdO1xuICAgICAgICBpZiAoY29vcmQubGVuZ3RoID09PSAzKSBjb29yZFsyXSAqPSBmYWN0b3I7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2VvanNvbjtcbn1cblxuLyoqXG4gKiBEZWZpbmUgT3JpZ2luXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7R2VvSlNPTn0gZ2VvanNvbiBHZW9KU09OXG4gKiBAcGFyYW0ge3N0cmluZ3xHZW9tZXRyeXxGZWF0dXJlPFBvaW50PnxBcnJheTxudW1iZXI+fSBvcmlnaW4gc3cvc2UvbncvbmUvY2VudGVyL2NlbnRyb2lkXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxQb2ludD59IFBvaW50IG9yaWdpblxuICovXG5mdW5jdGlvbiBkZWZpbmVPcmlnaW4oZ2VvanNvbiwgb3JpZ2luKSB7XG4gICAgLy8gRGVmYXVsdCBwYXJhbXNcbiAgICBpZiAob3JpZ2luID09PSB1bmRlZmluZWQgfHwgb3JpZ2luID09PSBudWxsKSBvcmlnaW4gPSAnY2VudHJvaWQnO1xuXG4gICAgLy8gSW5wdXQgR2VvbWV0cnl8RmVhdHVyZTxQb2ludD58QXJyYXk8bnVtYmVyPlxuICAgIGlmIChBcnJheS5pc0FycmF5KG9yaWdpbikgfHwgdHlwZW9mIG9yaWdpbiA9PT0gJ29iamVjdCcpIHJldHVybiBnZXRDb29yZChvcmlnaW4pO1xuXG4gICAgLy8gRGVmaW5lIEJCb3hcbiAgICB2YXIgYmJveCA9IChnZW9qc29uLmJib3gpID8gZ2VvanNvbi5iYm94IDogdHVyZkJCb3goZ2VvanNvbik7XG4gICAgdmFyIHdlc3QgPSBiYm94WzBdO1xuICAgIHZhciBzb3V0aCA9IGJib3hbMV07XG4gICAgdmFyIGVhc3QgPSBiYm94WzJdO1xuICAgIHZhciBub3J0aCA9IGJib3hbM107XG5cbiAgICBzd2l0Y2ggKG9yaWdpbikge1xuICAgIGNhc2UgJ3N3JzpcbiAgICBjYXNlICdzb3V0aHdlc3QnOlxuICAgIGNhc2UgJ3dlc3Rzb3V0aCc6XG4gICAgY2FzZSAnYm90dG9tbGVmdCc6XG4gICAgICAgIHJldHVybiBwb2ludChbd2VzdCwgc291dGhdKTtcbiAgICBjYXNlICdzZSc6XG4gICAgY2FzZSAnc291dGhlYXN0JzpcbiAgICBjYXNlICdlYXN0c291dGgnOlxuICAgIGNhc2UgJ2JvdHRvbXJpZ2h0JzpcbiAgICAgICAgcmV0dXJuIHBvaW50KFtlYXN0LCBzb3V0aF0pO1xuICAgIGNhc2UgJ253JzpcbiAgICBjYXNlICdub3J0aHdlc3QnOlxuICAgIGNhc2UgJ3dlc3Rub3J0aCc6XG4gICAgY2FzZSAndG9wbGVmdCc6XG4gICAgICAgIHJldHVybiBwb2ludChbd2VzdCwgbm9ydGhdKTtcbiAgICBjYXNlICduZSc6XG4gICAgY2FzZSAnbm9ydGhlYXN0JzpcbiAgICBjYXNlICdlYXN0bm9ydGgnOlxuICAgIGNhc2UgJ3RvcHJpZ2h0JzpcbiAgICAgICAgcmV0dXJuIHBvaW50KFtlYXN0LCBub3J0aF0pO1xuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIHJldHVybiBjZW50ZXIoZ2VvanNvbik7XG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgY2FzZSBudWxsOlxuICAgIGNhc2UgJ2NlbnRyb2lkJzpcbiAgICAgICAgcmV0dXJuIGNlbnRyb2lkKGdlb2pzb24pO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBvcmlnaW4nKTtcbiAgICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi90cmFuc2Zvcm0tc2NhbGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKTtcbnZhciByaHVtYkRlc3RpbmF0aW9uID0gcmVxdWlyZSgnQHR1cmYvcmh1bWItZGVzdGluYXRpb24nKTtcbnZhciBjb29yZEVhY2ggPSBtZXRhLmNvb3JkRWFjaDtcbnZhciBnZXRDb29yZHMgPSBpbnZhcmlhbnQuZ2V0Q29vcmRzO1xuXG4vKipcbiAqIE1vdmVzIGFueSBnZW9qc29uIEZlYXR1cmUgb3IgR2VvbWV0cnkgb2YgYSBzcGVjaWZpZWQgZGlzdGFuY2UgYWxvbmcgYSBSaHVtYiBMaW5lXG4gKiBvbiB0aGUgcHJvdmlkZWQgZGlyZWN0aW9uIGFuZ2xlLlxuICpcbiAqIEBuYW1lIHRyYW5zZm9ybVRyYW5zbGF0ZVxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIG9iamVjdCB0byBiZSB0cmFuc2xhdGVkXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgbGVuZ3RoIG9mIHRoZSBtb3Rpb247IG5lZ2F0aXZlIHZhbHVlcyBkZXRlcm1pbmUgbW90aW9uIGluIG9wcG9zaXRlIGRpcmVjdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGRpcmVjdGlvbiBvZiB0aGUgbW90aW9uOyBhbmdsZSBmcm9tIE5vcnRoIGluIGRlY2ltYWwgZGVncmVlcywgcG9zaXRpdmUgY2xvY2t3aXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIGluIHdoaWNoIGBkaXN0YW5jZWAgd2lsbCBiZSBleHByZXNzOyBtaWxlcywga2lsb21ldGVycywgZGVncmVlcywgb3IgcmFkaWFuc1xuICogQHBhcmFtIHtudW1iZXJ9IFt6VHJhbnNsYXRpb249MF0gbGVuZ3RoIG9mIHRoZSB2ZXJ0aWNhbCBtb3Rpb24sIHNhbWUgdW5pdCBvZiBkaXN0YW5jZVxuICogQHBhcmFtIHtib29sZWFufSBbbXV0YXRlPWZhbHNlXSBhbGxvd3MgR2VvSlNPTiBpbnB1dCB0byBiZSBtdXRhdGVkIChzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpZiB0cnVlKVxuICogQHJldHVybnMge0dlb0pTT059IHRoZSB0cmFuc2xhdGVkIEdlb0pTT04gb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogdmFyIHBvbHkgPSB0dXJmLnBvbHlnb24oW1tbMCwyOV0sWzMuNSwyOV0sWzIuNSwzMl0sWzAsMjldXV0pO1xuICogdmFyIHRyYW5zbGF0ZWRQb2x5ID0gdHVyZi50cmFuc2Zvcm1UcmFuc2xhdGUocG9seSwgMTAwLCAzNSk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW3BvbHksIHRyYW5zbGF0ZWRQb2x5XTtcbiAqIHRyYW5zbGF0ZWRQb2x5LnByb3BlcnRpZXMgPSB7c3Ryb2tlOiAnI0YwMCcsICdzdHJva2Utd2lkdGgnOiA0fTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbiwgZGlzdGFuY2UsIGRpcmVjdGlvbiwgdW5pdHMsIHpUcmFuc2xhdGlvbiwgbXV0YXRlKSB7XG4gICAgLy8gSW5wdXQgdmFsaWRhdGlvblxuICAgIGlmICghZ2VvanNvbikgdGhyb3cgbmV3IEVycm9yKCdnZW9qc29uIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKGRpc3RhbmNlID09PSB1bmRlZmluZWQgfHwgZGlzdGFuY2UgPT09IG51bGwgfHwgaXNOYU4oZGlzdGFuY2UpKSB0aHJvdyBuZXcgRXJyb3IoJ2Rpc3RhbmNlIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKHpUcmFuc2xhdGlvbiAmJiB0eXBlb2YgelRyYW5zbGF0aW9uICE9PSAnbnVtYmVyJyAmJiBpc05hTih6VHJhbnNsYXRpb24pKSB0aHJvdyBuZXcgRXJyb3IoJ3pUcmFuc2xhdGlvbiBpcyBub3QgYSBudW1iZXInKTtcblxuICAgIC8vIFNob3J0Y3V0IG5vLW1vdGlvblxuICAgIHpUcmFuc2xhdGlvbiA9ICh6VHJhbnNsYXRpb24gIT09IHVuZGVmaW5lZCkgPyB6VHJhbnNsYXRpb24gOiAwO1xuICAgIGlmIChkaXN0YW5jZSA9PT0gMCAmJiB6VHJhbnNsYXRpb24gPT09IDApIHJldHVybiBnZW9qc29uO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gdW5kZWZpbmVkIHx8IGRpcmVjdGlvbiA9PT0gbnVsbCB8fCBpc05hTihkaXJlY3Rpb24pKSB0aHJvdyBuZXcgRXJyb3IoJ2RpcmVjdGlvbiBpcyByZXF1aXJlZCcpO1xuXG4gICAgLy8gSW52ZXJ0IHdpdGggbmVnYXRpdmUgZGlzdGFuY2VzXG4gICAgaWYgKGRpc3RhbmNlIDwgMCkge1xuICAgICAgICBkaXN0YW5jZSA9IC1kaXN0YW5jZTtcbiAgICAgICAgZGlyZWN0aW9uID0gLWRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICAvLyBDbG9uZSBnZW9qc29uIHRvIGF2b2lkIHNpZGUgZWZmZWN0c1xuICAgIGlmIChtdXRhdGUgPT09IGZhbHNlIHx8IG11dGF0ZSA9PT0gdW5kZWZpbmVkKSBnZW9qc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnZW9qc29uKSk7XG5cbiAgICAvLyBUcmFuc2xhdGUgZWFjaCBjb29yZGluYXRlXG4gICAgY29vcmRFYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChwb2ludENvb3Jkcykge1xuICAgICAgICB2YXIgbmV3Q29vcmRzID0gZ2V0Q29vcmRzKHJodW1iRGVzdGluYXRpb24ocG9pbnRDb29yZHMsIGRpc3RhbmNlLCBkaXJlY3Rpb24sIHVuaXRzKSk7XG4gICAgICAgIHBvaW50Q29vcmRzWzBdID0gbmV3Q29vcmRzWzBdO1xuICAgICAgICBwb2ludENvb3Jkc1sxXSA9IG5ld0Nvb3Jkc1sxXTtcbiAgICAgICAgaWYgKHpUcmFuc2xhdGlvbiAmJiBwb2ludENvb3Jkcy5sZW5ndGggPT09IDMpIHBvaW50Q29vcmRzWzJdICs9IHpUcmFuc2xhdGlvbjtcbiAgICB9KTtcbiAgICByZXR1cm4gZ2VvanNvbjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi90cmFuc2Zvcm0tdHJhbnNsYXRlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGEgPSByZXF1aXJlKCdAdHVyZi9tZXRhJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJ0B0dXJmL2hlbHBlcnMnKTtcbnZhciBnZXRDb29yZHMgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKS5nZXRDb29yZHM7XG52YXIgaW50ZXJzZWN0aW9uID0gcmVxdWlyZSgnLi9pbnRlcnNlY3Rpb24nKTtcbnZhciBmbGF0dGVuRWFjaCA9IG1ldGEuZmxhdHRlbkVhY2g7XG52YXIgbGluZVN0cmluZyA9IGhlbHBlcnMubGluZVN0cmluZztcbnZhciBtdWx0aUxpbmVTdHJpbmcgPSBoZWxwZXJzLm11bHRpTGluZVN0cmluZztcbnZhciBkaXN0YW5jZVRvRGVncmVlcyA9IGhlbHBlcnMuZGlzdGFuY2VUb0RlZ3JlZXM7XG5cbi8qKlxuICogVGFrZXMgYSB7QGxpbmsgTGluZVN0cmluZ3xsaW5lfSBhbmQgcmV0dXJucyBhIHtAbGluayBMaW5lU3RyaW5nfGxpbmV9IGF0IG9mZnNldCBieSB0aGUgc3BlY2lmaWVkIGRpc3RhbmNlLlxuICpcbiAqIEBuYW1lIGxpbmVPZmZzZXRcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nfE11bHRpTGluZVN0cmluZz59IGdlb2pzb24gaW5wdXQgR2VvSlNPTlxuICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIGRpc3RhbmNlIHRvIG9mZnNldCB0aGUgbGluZSAoY2FuIGJlIG9mIG5lZ2F0aXZlIHZhbHVlKVxuICogQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1raWxvbWV0ZXJzXSBjYW4gYmUgZGVncmVlcywgcmFkaWFucywgbWlsZXMsIGtpbG9tZXRlcnMsIGluY2hlcywgeWFyZHMsIG1ldGVyc1xuICogQHJldHVybnMge0ZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmc+fSBMaW5lIG9mZnNldCBmcm9tIHRoZSBpbnB1dCBsaW5lXG4gKiBAZXhhbXBsZVxuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1stODMsIDMwXSwgWy04NCwgMzZdLCBbLTc4LCA0MV1dLCB7IFwic3Ryb2tlXCI6IFwiI0YwMFwiIH0pO1xuICpcbiAqIHZhciBvZmZzZXRMaW5lID0gdHVyZi5saW5lT2Zmc2V0KGxpbmUsIDIsIFwibWlsZXNcIik7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW29mZnNldExpbmUsIGxpbmVdXG4gKiBvZmZzZXRMaW5lLnByb3BlcnRpZXMuc3Ryb2tlID0gXCIjMDBGXCJcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbiwgZGlzdGFuY2UsIHVuaXRzKSB7XG4gICAgaWYgKCFnZW9qc29uKSB0aHJvdyBuZXcgRXJyb3IoJ2dlb2pzb24gaXMgcmVxdWlyZWQnKTtcbiAgICBpZiAoZGlzdGFuY2UgPT09IHVuZGVmaW5lZCB8fCBkaXN0YW5jZSA9PT0gbnVsbCB8fCBpc05hTihkaXN0YW5jZSkpIHRocm93IG5ldyBFcnJvcignZGlzdGFuY2UgaXMgcmVxdWlyZWQnKTtcbiAgICB2YXIgdHlwZSA9IChnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlJykgPyBnZW9qc29uLmdlb21ldHJ5LnR5cGUgOiBnZW9qc29uLnR5cGU7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBnZW9qc29uLnByb3BlcnRpZXM7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIGxpbmVPZmZzZXQoZ2VvanNvbiwgZGlzdGFuY2UsIHVuaXRzKTtcbiAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxuICAgICAgICB2YXIgY29vcmRzID0gW107XG4gICAgICAgIGZsYXR0ZW5FYWNoKGdlb2pzb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBjb29yZHMucHVzaChsaW5lT2Zmc2V0KGZlYXR1cmUsIGRpc3RhbmNlLCB1bml0cykuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG11bHRpTGluZVN0cmluZyhjb29yZHMsIHByb3BlcnRpZXMpO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ2VvbWV0cnkgJyArIHR5cGUgKyAnIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIExpbmUgT2Zmc2V0XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nPn0gbGluZSBpbnB1dCBsaW5lXG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgZGlzdGFuY2UgdG8gb2Zmc2V0IHRoZSBsaW5lIChjYW4gYmUgb2YgbmVnYXRpdmUgdmFsdWUpXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VuaXRzPWtpbG9tZXRlcnNdIHVuaXRzXG4gKiBAcmV0dXJucyB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gTGluZSBvZmZzZXQgZnJvbSB0aGUgaW5wdXQgbGluZVxuICovXG5mdW5jdGlvbiBsaW5lT2Zmc2V0KGxpbmUsIGRpc3RhbmNlLCB1bml0cykge1xuICAgIHZhciBzZWdtZW50cyA9IFtdO1xuICAgIHZhciBvZmZzZXREZWdyZWVzID0gZGlzdGFuY2VUb0RlZ3JlZXMoZGlzdGFuY2UsIHVuaXRzKTtcbiAgICB2YXIgY29vcmRzID0gZ2V0Q29vcmRzKGxpbmUpO1xuICAgIHZhciBmaW5hbENvb3JkcyA9IFtdO1xuICAgIGNvb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50Q29vcmRzLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggIT09IGNvb3Jkcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB2YXIgc2VnbWVudCA9IHByb2Nlc3NTZWdtZW50KGN1cnJlbnRDb29yZHMsIGNvb3Jkc1tpbmRleCArIDFdLCBvZmZzZXREZWdyZWVzKTtcbiAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZzJDb29yZHMgPSBzZWdtZW50c1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3RzID0gaW50ZXJzZWN0aW9uKHNlZ21lbnQsIHNlZzJDb29yZHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxpbmcgZm9yIGxpbmUgc2VnbWVudHMgdGhhdCBhcmVuJ3Qgc3RyYWlnaHRcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0cyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnMkNvb3Jkc1sxXSA9IGludGVyc2VjdHM7XG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRbMF0gPSBpbnRlcnNlY3RzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZpbmFsQ29vcmRzLnB1c2goc2VnMkNvb3Jkc1swXSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBjb29yZHMubGVuZ3RoIC0gMikge1xuICAgICAgICAgICAgICAgICAgICBmaW5hbENvb3Jkcy5wdXNoKHNlZ21lbnRbMF0pO1xuICAgICAgICAgICAgICAgICAgICBmaW5hbENvb3Jkcy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEhhbmRsaW5nIGZvciBsaW5lcyB0aGF0IG9ubHkgaGF2ZSAxIHNlZ21lbnRcbiAgICAgICAgICAgIGlmIChjb29yZHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgZmluYWxDb29yZHMucHVzaChzZWdtZW50WzBdKTtcbiAgICAgICAgICAgICAgICBmaW5hbENvb3Jkcy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxpbmVTdHJpbmcoZmluYWxDb29yZHMsIGxpbmUucHJvcGVydGllcyk7XG59XG5cbi8qKlxuICogUHJvY2VzcyBTZWdtZW50XG4gKiBJbnNwaXJhdGlvbiB0YWtlbiBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjgyNTQxMi9kcmF3LWEtcGFyYWxsZWwtbGluZVxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHBvaW50MSBQb2ludCBjb29yZGluYXRlc1xuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBwb2ludDIgUG9pbnQgY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgT2Zmc2V0XG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG9mZnNldCBwb2ludHNcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1NlZ21lbnQocG9pbnQxLCBwb2ludDIsIG9mZnNldCkge1xuICAgIHZhciBMID0gTWF0aC5zcXJ0KChwb2ludDFbMF0gLSBwb2ludDJbMF0pICogKHBvaW50MVswXSAtIHBvaW50MlswXSkgKyAocG9pbnQxWzFdIC0gcG9pbnQyWzFdKSAqIChwb2ludDFbMV0gLSBwb2ludDJbMV0pKTtcblxuICAgIHZhciBvdXQxeCA9IHBvaW50MVswXSArIG9mZnNldCAqIChwb2ludDJbMV0gLSBwb2ludDFbMV0pIC8gTDtcbiAgICB2YXIgb3V0MnggPSBwb2ludDJbMF0gKyBvZmZzZXQgKiAocG9pbnQyWzFdIC0gcG9pbnQxWzFdKSAvIEw7XG4gICAgdmFyIG91dDF5ID0gcG9pbnQxWzFdICsgb2Zmc2V0ICogKHBvaW50MVswXSAtIHBvaW50MlswXSkgLyBMO1xuICAgIHZhciBvdXQyeSA9IHBvaW50MlsxXSArIG9mZnNldCAqIChwb2ludDFbMF0gLSBwb2ludDJbMF0pIC8gTDtcbiAgICByZXR1cm4gW1tvdXQxeCwgb3V0MXldLCBbb3V0MngsIG91dDJ5XV07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9saW5lLW9mZnNldC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3Jvb2sycGF3bi9ub2RlLWludGVyc2VjdGlvblxuICpcbiAqIEF1dGhvciBAcm9vazJwYXduXG4gKi9cblxuLyoqXG4gKiBBQlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBzZWdtZW50IC0gMiB2ZXJ0ZXggbGluZSBzZWdtZW50XG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gY29vcmRpbmF0ZXMgW3gsIHldXG4gKi9cbmZ1bmN0aW9uIGFiKHNlZ21lbnQpIHtcbiAgICB2YXIgc3RhcnQgPSBzZWdtZW50WzBdO1xuICAgIHZhciBlbmQgPSBzZWdtZW50WzFdO1xuICAgIHJldHVybiBbZW5kWzBdIC0gc3RhcnRbMF0sIGVuZFsxXSAtIHN0YXJ0WzFdXTtcbn1cblxuLyoqXG4gKiBDcm9zcyBQcm9kdWN0XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gdjEgY29vcmRpbmF0ZXMgW3gsIHldXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHYyIGNvb3JkaW5hdGVzIFt4LCB5XVxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IENyb3NzIFByb2R1Y3RcbiAqL1xuZnVuY3Rpb24gY3Jvc3NQcm9kdWN0KHYxLCB2Mikge1xuICAgIHJldHVybiAodjFbMF0gKiB2MlsxXSkgLSAodjJbMF0gKiB2MVsxXSk7XG59XG5cbi8qKlxuICogQWRkXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gdjEgY29vcmRpbmF0ZXMgW3gsIHldXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHYyIGNvb3JkaW5hdGVzIFt4LCB5XVxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IEFkZFxuICovXG5mdW5jdGlvbiBhZGQodjEsIHYyKSB7XG4gICAgcmV0dXJuIFt2MVswXSArIHYyWzBdLCB2MVsxXSArIHYyWzFdXTtcbn1cblxuLyoqXG4gKiBTdWJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB2MSBjb29yZGluYXRlcyBbeCwgeV1cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gdjIgY29vcmRpbmF0ZXMgW3gsIHldXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gU3ViXG4gKi9cbmZ1bmN0aW9uIHN1Yih2MSwgdjIpIHtcbiAgICByZXR1cm4gW3YxWzBdIC0gdjJbMF0sIHYxWzFdIC0gdjJbMV1dO1xufVxuXG4vKipcbiAqIHNjYWxhck11bHRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHMgc2NhbGFyXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHYgY29vcmRpbmF0ZXMgW3gsIHldXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gc2NhbGFyTXVsdFxuICovXG5mdW5jdGlvbiBzY2FsYXJNdWx0KHMsIHYpIHtcbiAgICByZXR1cm4gW3MgKiB2WzBdLCBzICogdlsxXV07XG59XG5cbi8qKlxuICogSW50ZXJzZWN0IFNlZ21lbnRzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYSBjb29yZGluYXRlcyBbeCwgeV1cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYiBjb29yZGluYXRlcyBbeCwgeV1cbiAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSBpbnRlcnNlY3Rpb25cbiAqL1xuZnVuY3Rpb24gaW50ZXJzZWN0U2VnbWVudHMoYSwgYikge1xuICAgIHZhciBwID0gYVswXTtcbiAgICB2YXIgciA9IGFiKGEpO1xuICAgIHZhciBxID0gYlswXTtcbiAgICB2YXIgcyA9IGFiKGIpO1xuXG4gICAgdmFyIGNyb3NzID0gY3Jvc3NQcm9kdWN0KHIsIHMpO1xuICAgIHZhciBxbXAgPSBzdWIocSwgcCk7XG4gICAgdmFyIG51bWVyYXRvciA9IGNyb3NzUHJvZHVjdChxbXAsIHMpO1xuICAgIHZhciB0ID0gbnVtZXJhdG9yIC8gY3Jvc3M7XG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGFkZChwLCBzY2FsYXJNdWx0KHQsIHIpKTtcbiAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xufVxuXG4vKipcbiAqIElzIFBhcmFsbGVsXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYSBjb29yZGluYXRlcyBbeCwgeV1cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYiBjb29yZGluYXRlcyBbeCwgeV1cbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGEgYW5kIGIgYXJlIHBhcmFsbGVsIChvciBjby1saW5lYXIpXG4gKi9cbmZ1bmN0aW9uIGlzUGFyYWxsZWwoYSwgYikge1xuICAgIHZhciByID0gYWIoYSk7XG4gICAgdmFyIHMgPSBhYihiKTtcbiAgICByZXR1cm4gKGNyb3NzUHJvZHVjdChyLCBzKSA9PT0gMCk7XG59XG5cbi8qKlxuICogSW50ZXJzZWN0aW9uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYSBjb29yZGluYXRlcyBbeCwgeV1cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYiBjb29yZGluYXRlcyBbeCwgeV1cbiAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fGJvb2xlYW59IHRydWUgaWYgYSBhbmQgYiBhcmUgcGFyYWxsZWwgKG9yIGNvLWxpbmVhcilcbiAqL1xuZnVuY3Rpb24gaW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICBpZiAoaXNQYXJhbGxlbChhLCBiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBpbnRlcnNlY3RTZWdtZW50cyhhLCBiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcnNlY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9saW5lLW9mZnNldC9pbnRlcnNlY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDI0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcG9seWdvbml6ZSA9IHJlcXVpcmUoJ3BvbHlnb25pemUnKTtcblxuLyoqXG4gKiBQb2x5Z29uaXplcyB7QGxpbmsgTGluZVN0cmluZ3woTXVsdGkpTGluZVN0cmluZyhzKX0gaW50byB7QGxpbmsgUG9seWdvbnN9LlxuICpcbiAqIEltcGxlbWVudGF0aW9uIG9mIEdFT1NQb2x5Z29uaXplIGZ1bmN0aW9uIChgZ2Vvczo6b3BlcmF0aW9uOjpwb2x5Z29uaXplOjpQb2x5Z29uaXplcmApLlxuICpcbiAqIFBvbHlnb25pemVzIGEgc2V0IG9mIGxpbmVzIHRoYXQgcmVwcmVzZW50cyBlZGdlcyBpbiBhIHBsYW5hciBncmFwaC4gRWRnZXMgbXVzdCBiZSBjb3JyZWN0bHlcbiAqIG5vZGVkLCBpLmUuLCB0aGV5IG11c3Qgb25seSBtZWV0IGF0IHRoZWlyIGVuZHBvaW50cy5cbiAqXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gY29ycmVjdGx5IGhhbmRsZXM6XG4gKlxuICogLSBEYW5nbGVzOiBlZGdlcyB3aGljaCBoYXZlIG9uZSBvciBib3RoIGVuZHMgd2hpY2ggYXJlIG5vdCBpbmNpZGVudCBvbiBhbm90aGVyIGVkZ2UgZW5kcG9pbnQuXG4gKiAtIEN1dCBFZGdlcyAoYnJpZGdlcyk6IGVkZ2VzIHRoYXQgYXJlIGNvbm5lY3RlZCBhdCBib3RoIGVuZHMgYnV0IHdoaWNoIGRvIG5vdCBmb3JtIHBhcnQgb2YgYSBwb2x5Z29uLlxuICpcbiAqIEBuYW1lIHBvbHlnb25pemVcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb258R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nfE11bHRpTGluZVN0cmluZz59IGdlb2pzb24gTGluZXMgaW4gb3JkZXIgdG8gcG9seWdvbml6ZVxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPFBvbHlnb24+fSBQb2x5Z29ucyBjcmVhdGVkXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgR2VvSlNPTiBpcyBpbnZhbGlkLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChnZW9qc29uKSB7XG4gICAgcmV0dXJuIHBvbHlnb25pemUoZ2VvanNvbik7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvcG9seWdvbml6ZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdyYXBoID0gcmVxdWlyZSgnLi9HcmFwaCcpLFxuICAgIEVkZ2VSaW5nID0gcmVxdWlyZSgnLi9FZGdlUmluZycpLFxuICAgIF9yZXF1aXJlID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpLFxuICAgIGZlYXR1cmVDb2xsZWN0aW9uID0gX3JlcXVpcmUuZmVhdHVyZUNvbGxlY3Rpb247XG5cbi8qKlxuICogUG9seWdvbml6ZXMge0BsaW5rIExpbmVTdHJpbmd8KE11bHRpKUxpbmVTdHJpbmcocyl9IGludG8ge0BsaW5rIFBvbHlnb25zfS5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBHRU9TUG9seWdvbml6ZSBmdW5jdGlvbiAoYGdlb3M6Om9wZXJhdGlvbjo6cG9seWdvbml6ZTo6UG9seWdvbml6ZXJgKS5cbiAqXG4gKiBQb2x5Z29uaXplcyBhIHNldCBvZiBsaW5lcyB0aGF0IHJlcHJlc2VudHMgZWRnZXMgaW4gYSBwbGFuYXIgZ3JhcGguIEVkZ2VzIG11c3QgYmUgY29ycmVjdGx5XG4gKiBub2RlZCwgaS5lLiwgdGhleSBtdXN0IG9ubHkgbWVldCBhdCB0aGVpciBlbmRwb2ludHMuXG4gKlxuICogVGhlIGltcGxlbWVudGF0aW9uIGNvcnJlY3RseSBoYW5kbGVzOlxuICpcbiAqIC0gRGFuZ2xlczogZWRnZXMgd2hpY2ggaGF2ZSBvbmUgb3IgYm90aCBlbmRzIHdoaWNoIGFyZSBub3QgaW5jaWRlbnQgb24gYW5vdGhlciBlZGdlIGVuZHBvaW50LlxuICogLSBDdXQgRWRnZXMgKGJyaWRnZXMpOiBlZGdlcyB0aGF0IGFyZSBjb25uZWN0ZWQgYXQgYm90aCBlbmRzIGJ1dCB3aGljaCBkbyBub3QgZm9ybSBwYXJ0IG9mIGEgcG9seWdvbi5cbiAqXG4gKiBAbmFtZSBwb2x5Z29uaXplXG4gKiBAcGFyYW0ge0ZlYXR1cmVDb2xsZWN0aW9ufEdlb21ldHJ5fEZlYXR1cmU8TGluZVN0cmluZ3xNdWx0aUxpbmVTdHJpbmc+fSBnZW9Kc29uIExpbmVzIGluIG9yZGVyIHRvIHBvbHlnb25pemVcbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2x5Z29uPn0gUG9seWdvbnMgY3JlYXRlZFxuICogQHRocm93cyB7RXJyb3J9IGlmIGdlb0pzb24gaXMgaW52YWxpZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwb2x5Z29uaXplKGdlb0pzb24pIHtcbiAgdmFyIGdyYXBoID0gR3JhcGguZnJvbUdlb0pzb24oZ2VvSnNvbik7XG5cbiAgLy8gMS4gUmVtb3ZlIGRhbmdsZSBub2RlXG4gIGdyYXBoLmRlbGV0ZURhbmdsZXMoKTtcblxuICAvLyAyLiBSZW1vdmUgY3V0LWVkZ2VzIChicmlkZ2UgZWRnZXMpXG4gIGdyYXBoLmRlbGV0ZUN1dEVkZ2VzKCk7XG5cbiAgLy8gMy4gR2V0IGFsbCBob2xlcyBhbmQgc2hlbGxzXG4gIHZhciBob2xlcyA9IFtdLFxuICAgICAgc2hlbGxzID0gW107XG5cbiAgZ3JhcGguZ2V0RWRnZVJpbmdzKCkuZmlsdGVyKGZ1bmN0aW9uIChlZGdlUmluZykge1xuICAgIHJldHVybiBlZGdlUmluZy5pc1ZhbGlkKCk7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGVkZ2VSaW5nKSB7XG4gICAgaWYgKGVkZ2VSaW5nLmlzSG9sZSgpKSBob2xlcy5wdXNoKGVkZ2VSaW5nKTtlbHNlIHNoZWxscy5wdXNoKGVkZ2VSaW5nKTtcbiAgfSk7XG5cbiAgLy8gNC4gQXNzaWduIEhvbGVzIHRvIFNoZWxsc1xuICBob2xlcy5mb3JFYWNoKGZ1bmN0aW9uIChob2xlKSB7XG4gICAgaWYgKEVkZ2VSaW5nLmZpbmRFZGdlUmluZ0NvbnRhaW5pbmcoaG9sZSwgc2hlbGxzKSkgc2hlbGxzLnB1c2goaG9sZSk7XG4gIH0pO1xuXG4gIC8vIDUuIEVkZ2VSaW5ncyB0byBQb2x5Z29uc1xuICByZXR1cm4gZmVhdHVyZUNvbGxlY3Rpb24oc2hlbGxzLm1hcChmdW5jdGlvbiAoc2hlbGwpIHtcbiAgICByZXR1cm4gc2hlbGwudG9Qb2x5Z29uKCk7XG4gIH0pKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcG9seWdvbml6ZS9kaXN0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpLFxuICAgIEVkZ2UgPSByZXF1aXJlKCcuL0VkZ2UnKSxcbiAgICBFZGdlUmluZyA9IHJlcXVpcmUoJy4vRWRnZVJpbmcnKSxcbiAgICBfcmVxdWlyZSA9IHJlcXVpcmUoJ0B0dXJmL21ldGEnKSxcbiAgICBmbGF0dGVuRWFjaCA9IF9yZXF1aXJlLmZsYXR0ZW5FYWNoLFxuICAgIGNvb3JkUmVkdWNlID0gX3JlcXVpcmUuY29vcmRSZWR1Y2UsXG4gICAgX3JlcXVpcmUyID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50JyksXG4gICAgZmVhdHVyZU9mID0gX3JlcXVpcmUyLmZlYXR1cmVPZjtcblxuLyoqIFZhbGlkYXRlcyB0aGUgZ2VvSnNvbi5cbiAqXG4gKiBAcGFyYW0ge0dlb2pzb259IGdlb0pzb24gLSBpbnB1dCBnZW9Kc29uLlxuICogQHRocm93cyB7RXJyb3J9IGlmIGdlb0pzb24gaXMgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVHZW9Kc29uKGdlb0pzb24pIHtcbiAgaWYgKCFnZW9Kc29uKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlb2pzb24gcGFzc2VkJyk7XG5cbiAgaWYgKGdlb0pzb24udHlwZSAhPT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJyAmJiBnZW9Kc29uLnR5cGUgIT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nICYmIGdlb0pzb24udHlwZSAhPT0gJ011bHRpTGluZVN0cmluZycgJiYgZ2VvSnNvbi50eXBlICE9PSAnTGluZVN0cmluZycgJiYgZ2VvSnNvbi50eXBlICE9PSAnRmVhdHVyZScpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCB0eXBlIFxcJycgKyBnZW9Kc29uLnR5cGUgKyAnXFwnLiBHZW9qc29uIG11c3QgYmUgRmVhdHVyZUNvbGxlY3Rpb24sIEdlb21ldHJ5Q29sbGVjdGlvbiwgTGluZVN0cmluZywgTXVsdGlMaW5lU3RyaW5nIG9yIEZlYXR1cmUnKTtcbn1cblxuLyoqIFJlcHJlc2VudHMgYSBwbGFuYXIgZ3JhcGggb2YgZWRnZXMgYW5kIG5vZGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gY29tcHV0ZSBhXG4gKiBwb2x5Z29uaXphdGlvbi5cbiAqXG4gKiBBbHRob3VnaCwgdGhpcyBjbGFzcyBpcyBpbnNwaXJlZCBieSBHRU9TJ3MgYGdlb3M6Om9wZXJhdGlvbjo6cG9seWdvbml6ZTo6UG9seWdvbml6ZUdyYXBoYCxcbiAqIGl0IGlzbid0IGEgcmV3cml0ZS4gQXMgcmVnYXJkcyBhbGdvcml0aG0sIHRoaXMgY2xhc3MgaW1wbGVtZW50cyB0aGUgc2FtZSBsb2dpYywgYnV0IGl0XG4gKiBpc24ndCBhIGphdmFzY3JpcHQgdHJhbnNjcmlwdGlvbiBvZiB0aGUgQysrIHNvdXJjZS5cbiAqXG4gKiBUaGlzIGdyYXBoIGlzIGRpcmVjdGVkIChib3RoIGRpcmVjdGlvbnMgYXJlIGNyZWF0ZWQpXG4gKi9cblxudmFyIEdyYXBoID0gZnVuY3Rpb24gKCkge1xuICBfY3JlYXRlQ2xhc3MoR3JhcGgsIFt7XG4gICAga2V5OiAnZ2V0Tm9kZScsXG5cblxuICAgIC8qKiBDcmVhdGVzIG9yIGdldCBhIE5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSBjb29yZGluYXRlcyAtIENvb3JkaW5hdGVzIG9mIHRoZSBub2RlXG4gICAgICogQHJldHVybnMge05vZGV9IC0gVGhlIGNyZWF0ZWQgb3Igc3RvcmVkIG5vZGVcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Tm9kZShjb29yZGluYXRlcykge1xuICAgICAgdmFyIGlkID0gTm9kZS5idWlsZElkKGNvb3JkaW5hdGVzKTtcbiAgICAgIHZhciBub2RlID0gdGhpcy5ub2Rlc1tpZF07XG4gICAgICBpZiAoIW5vZGUpIG5vZGUgPSB0aGlzLm5vZGVzW2lkXSA9IG5ldyBOb2RlKGNvb3JkaW5hdGVzKTtcblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqIEFkZHMgYW4gRWRnZSBhbmQgaXRzIHN5bWV0cmljYWxsLlxuICAgICAqIEVkZ2VzIGFyZSBhZGRlZCBzeW1ldHJpY2FsbHksIGkuZS46IHdlIGFsc28gYWRkIGl0cyBzeW1ldHJpY1xuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBmcm9tIC0gTm9kZSB3aGljaCBzdGFydHMgdGhlIEVkZ2VcbiAgICAgKiBAcGFyYW0ge05vZGV9IHRvIC0gTm9kZSB3aGljaCBlbmRzIHRoZSBFZGdlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZEVkZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFZGdlKGZyb20sIHRvKSB7XG4gICAgICB2YXIgZWRnZSA9IG5ldyBFZGdlKGZyb20sIHRvKSxcbiAgICAgICAgICBzeW1ldHJpY0VkZ2UgPSBlZGdlLmdldFN5bWV0cmljKCk7XG5cbiAgICAgIHRoaXMuZWRnZXMucHVzaChlZGdlKTtcbiAgICAgIHRoaXMuZWRnZXMucHVzaChzeW1ldHJpY0VkZ2UpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZnJvbUdlb0pzb24nLFxuXG4gICAgLyoqIENyZWF0ZXMgYSBncmFwaCBmcm9tIGEgR2VvSlNPTi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248TGluZVN0cmluZz59IGdlb0pzb24gLSBpdCBtdXN0IGNvbXBseSB3aXRoIHRoZSByZXN0cmljdGlvbnMgZGV0YWlsZWQgaW4gdGhlIGluZGV4XG4gICAgICogQHJldHVybnMge0dyYXBofSAtIFRoZSBuZXdseSBjcmVhdGVkIGdyYXBoXG4gICAgICogQHRocm93cyB7RXJyb3J9IGlmIGdlb0pzb24gaXMgaW52YWxpZC5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUdlb0pzb24oZ2VvSnNvbikge1xuICAgICAgdmFsaWRhdGVHZW9Kc29uKGdlb0pzb24pO1xuXG4gICAgICB2YXIgZ3JhcGggPSBuZXcgR3JhcGgoKTtcbiAgICAgIGZsYXR0ZW5FYWNoKGdlb0pzb24sIGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIGZlYXR1cmVPZihmZWF0dXJlLCAnTGluZVN0cmluZycsICdHcmFwaDo6ZnJvbUdlb0pzb24nKTtcbiAgICAgICAgLy8gV2hlbiBhIExpbmVTdHJpbmcgaWYgZm9ybWVkIGJ5IG1hbnkgc2VnbWVudHMsIHNwbGl0IHRoZW1cbiAgICAgICAgY29vcmRSZWR1Y2UoZmVhdHVyZSwgZnVuY3Rpb24gKHByZXYsIGN1cikge1xuICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBncmFwaC5nZXROb2RlKHByZXYpLFxuICAgICAgICAgICAgICAgIGVuZCA9IGdyYXBoLmdldE5vZGUoY3VyKTtcblxuICAgICAgICAgICAgZ3JhcGguYWRkRWRnZShzdGFydCwgZW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGN1cjtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGdyYXBoO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIEdyYXBoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcmFwaCk7XG5cbiAgICB0aGlzLmVkZ2VzID0gW107IC8vPCB7RWRnZVtdfSBkaXJFZGdlc1xuXG4gICAgLy8gVGhlIGtleSBpcyB0aGUgYGlkYCBvZiB0aGUgTm9kZSAoaWU6IGNvb3JkaW5hdGVzLmpvaW4oJywnKSlcbiAgICB0aGlzLm5vZGVzID0ge307XG4gIH1cblxuICAvKiogUmVtb3ZlcyBEYW5nbGUgTm9kZXMgKG5vZGVzIHdpdGggZ3JhZGUgMSkuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEdyYXBoLCBbe1xuICAgIGtleTogJ2RlbGV0ZURhbmdsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVEYW5nbGVzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgT2JqZWN0LmtleXModGhpcy5ub2RlcykubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gX3RoaXMubm9kZXNbaWRdO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3JlbW92ZUlmRGFuZ2xlKG5vZGUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqIENoZWNrIGlmIG5vZGUgaXMgZGFuZ2xlLCBpZiBzbywgcmVtb3ZlIGl0LlxuICAgICAqIEl0IGNhbGxzIGl0c2VsZiByZWN1cnNpdmVseSwgcmVtb3ZpbmcgYSBkYW5nbGluZyBub2RlIG1pZ2h0IGNhdXNlIGFub3RoZXIgZGFuZ2xpbmcgbm9kZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gTm9kZSB0byBjaGVjayBpZiBpdCdzIGEgZGFuZ2xlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZW1vdmVJZkRhbmdsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmVJZkRhbmdsZShub2RlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gQXMgZWRnZXMgYXJlIGRpcmVjdGVkIGFuZCBzeW1ldHJpY2FsLCB3ZSBjb3VudCBvbmx5IGlubmVyRWRnZXNcbiAgICAgIGlmIChub2RlLmlubmVyRWRnZXMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgdmFyIG91dGVyTm9kZXMgPSBub2RlLmdldE91dGVyRWRnZXMoKS5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gZS50bztcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVtb3ZlTm9kZShub2RlKTtcbiAgICAgICAgb3V0ZXJOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fcmVtb3ZlSWZEYW5nbGUobik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBEZWxldGUgY3V0LWVkZ2VzIChicmlkZ2UgZWRnZXMpLlxuICAgICAqXG4gICAgICogVGhlIGdyYXBoIHdpbGwgYmUgdHJhdmVyc2VkLCBhbGwgdGhlIGVkZ2VzIHdpbGwgYmUgbGFiZWxlZCBhY2NvcmRpbmcgdGhlIHJpbmdcbiAgICAgKiBpbiB3aGljaCB0aGV5IGFyZS4gKFRoZSBsYWJlbCBpcyBhIG51bWJlciBpbmNyZW1lbnRlZCBieSAxKS4gRWRnZXMgd2l0aCB0aGUgc2FtZVxuICAgICAqIGxhYmVsIGFyZSBjdXQtZWRnZXMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZUN1dEVkZ2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlQ3V0RWRnZXMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5fY29tcHV0ZU5leHRDV0VkZ2VzKCk7XG4gICAgICB0aGlzLl9maW5kTGFiZWxlZEVkZ2VSaW5ncygpO1xuXG4gICAgICAvLyBDdXQtZWRnZXMgKGJyaWRnZXMpIGFyZSBlZGdlcyB3aGVyZSBib3RoIGVkZ2VzIGhhdmUgdGhlIHNhbWUgbGFiZWxcbiAgICAgIHRoaXMuZWRnZXMuZm9yRWFjaChmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICBpZiAoZWRnZS5sYWJlbCA9PT0gZWRnZS5zeW1ldHJpYy5sYWJlbCkge1xuICAgICAgICAgIF90aGlzMy5yZW1vdmVFZGdlKGVkZ2Uuc3ltZXRyaWMpO1xuICAgICAgICAgIF90aGlzMy5yZW1vdmVFZGdlKGVkZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKiogU2V0IHRoZSBgbmV4dGAgcHJvcGVydHkgb2YgZWFjaCBFZGdlLlxuICAgICAqIFRoZSBncmFwaCB3aWxsIGJlIHRyYW5zdmVyc2VkIGluIGEgQ1cgZm9ybSwgc28sIHdlIHNldCB0aGUgbmV4dCBvZiB0aGUgc3ltZXRyaWNhbCBlZGdlIGFzIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICogT3V0ZXJFZGdlcyBhcmUgc29ydGVkIENDVy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gW25vZGVdIC0gSWYgbm8gbm9kZSBpcyBwYXNzZWQsIHRoZSBmdW5jdGlvbiBjYWxscyBpdHNlbGYgZm9yIGV2ZXJ5IG5vZGUgaW4gdGhlIEdyYXBoXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19jb21wdXRlTmV4dENXRWRnZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY29tcHV0ZU5leHRDV0VkZ2VzKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIG5vZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMubm9kZXMpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC5fY29tcHV0ZU5leHRDV0VkZ2VzKF90aGlzNC5ub2Rlc1tpZF0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuZ2V0T3V0ZXJFZGdlcygpLmZvckVhY2goZnVuY3Rpb24gKGVkZ2UsIGkpIHtcbiAgICAgICAgICBub2RlLmdldE91dGVyRWRnZSgoaSA9PT0gMCA/IG5vZGUuZ2V0T3V0ZXJFZGdlcygpLmxlbmd0aCA6IGkpIC0gMSkuc3ltZXRyaWMubmV4dCA9IGVkZ2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBDb21wdXRlcyB0aGUgbmV4dCBlZGdlIHBvaW50ZXJzIGdvaW5nIENDVyBhcm91bmQgdGhlIGdpdmVuIG5vZGUsIGZvciB0aGUgZ2l2ZW4gZWRnZXJpbmcgbGFiZWwuXG4gICAgICogVGhpcyBhbGdvcml0aG0gaGFzIHRoZSBlZmZlY3Qgb2YgY29udmVydGluZyBtYXhpbWFsIGVkZ2VyaW5ncyBpbnRvIG1pbmltYWwgZWRnZXJpbmdzXG4gICAgICpcbiAgICAgKiBYWFg6IG1ldGhvZCBsaXRlcmFsbHkgdHJhbnNjcmliZWQgZnJvbSBgZ2Vvczo6b3BlcmF0aW9uOjpwb2x5Z29uaXplOjpQb2x5Z29uaXplR3JhcGg6OmNvbXB1dGVOZXh0Q0NXRWRnZXNgLFxuICAgICAqIGNvdWxkIGJlIHdyaXR0ZW4gaW4gYSBtb3JlIGphdmFzY3JpcHQgd2F5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gTm9kZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsYWJlbCAtIFJpbmcncyBsYWJlbFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfY29tcHV0ZU5leHRDQ1dFZGdlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jb21wdXRlTmV4dENDV0VkZ2VzKG5vZGUsIGxhYmVsKSB7XG4gICAgICB2YXIgZWRnZXMgPSBub2RlLmdldE91dGVyRWRnZXMoKTtcbiAgICAgIHZhciBmaXJzdE91dERFID0gdm9pZCAwLFxuICAgICAgICAgIHByZXZJbkRFID0gdm9pZCAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gZWRnZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGRlID0gZWRnZXNbaV0sXG4gICAgICAgICAgICBzeW0gPSBkZS5zeW1ldHJpYyxcbiAgICAgICAgICAgIG91dERFID0gdm9pZCAwLFxuICAgICAgICAgICAgaW5ERSA9IHZvaWQgMDtcblxuICAgICAgICBpZiAoZGUubGFiZWwgPT09IGxhYmVsKSBvdXRERSA9IGRlO1xuXG4gICAgICAgIGlmIChzeW0ubGFiZWwgPT09IGxhYmVsKSBpbkRFID0gc3ltO1xuXG4gICAgICAgIGlmICghb3V0REUgfHwgIWluREUpIC8vIFRoaXMgZWRnZSBpcyBub3QgaW4gZWRnZXJpbmdcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBpZiAoaW5ERSkgcHJldkluREUgPSBpbkRFO1xuXG4gICAgICAgIGlmIChvdXRERSkge1xuICAgICAgICAgIGlmIChwcmV2SW5ERSkge1xuICAgICAgICAgICAgcHJldkluREUubmV4dCA9IG91dERFO1xuICAgICAgICAgICAgcHJldkluREUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFmaXJzdE91dERFKSBmaXJzdE91dERFID0gb3V0REU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZJbkRFKSBwcmV2SW5ERS5uZXh0ID0gZmlyc3RPdXRERTtcbiAgICB9XG5cbiAgICAvKiogRmluZHMgcmluZ3MgYW5kIGxhYmVscyBlZGdlcyBhY2NvcmRpbmcgdG8gd2hpY2ggcmluZ3MgYXJlLlxuICAgICAqIFRoZSBsYWJlbCBpcyBhIG51bWJlciB3aGljaCBpcyBpbmNyZWFzZWQgZm9yIGVhY2ggcmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtFZGdlW119IGVkZ2VzIHRoYXQgc3RhcnQgcmluZ3NcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2ZpbmRMYWJlbGVkRWRnZVJpbmdzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmRMYWJlbGVkRWRnZVJpbmdzKCkge1xuICAgICAgdmFyIGVkZ2VSaW5nU3RhcnRzID0gW107XG4gICAgICB2YXIgbGFiZWwgPSAwO1xuICAgICAgdGhpcy5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgIGlmIChlZGdlLmxhYmVsID49IDApIHJldHVybjtcblxuICAgICAgICBlZGdlUmluZ1N0YXJ0cy5wdXNoKGVkZ2UpO1xuXG4gICAgICAgIHZhciBlID0gZWRnZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGUubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgICBlID0gZS5uZXh0O1xuICAgICAgICB9IHdoaWxlICghZWRnZS5pc0VxdWFsKGUpKTtcblxuICAgICAgICBsYWJlbCsrO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBlZGdlUmluZ1N0YXJ0cztcbiAgICB9XG5cbiAgICAvKiogQ29tcHV0ZXMgdGhlIEVkZ2VSaW5ncyBmb3JtZWQgYnkgdGhlIGVkZ2VzIGluIHRoaXMgZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RWRnZVJpbmdbXX0gLSBBIGxpc3Qgb2YgYWxsIHRoZSBFZGdlUmluZ3MgaW4gdGhlIGdyYXBoLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRFZGdlUmluZ3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFZGdlUmluZ3MoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdGhpcy5fY29tcHV0ZU5leHRDV0VkZ2VzKCk7XG5cbiAgICAgIC8vIENsZWFyIGxhYmVsc1xuICAgICAgdGhpcy5lZGdlcy5mb3JFYWNoKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgIGVkZ2UubGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fZmluZExhYmVsZWRFZGdlUmluZ3MoKS5mb3JFYWNoKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgIC8vIGNvbnZlcnRNYXhpbWFsVG9NaW5pbWFsRWRnZVJpbmdzXG4gICAgICAgIF90aGlzNS5fZmluZEludGVyc2VjdGlvbk5vZGVzKGVkZ2UpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICBfdGhpczUuX2NvbXB1dGVOZXh0Q0NXRWRnZXMobm9kZSwgZWRnZS5sYWJlbCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBlZGdlUmluZ0xpc3QgPSBbXTtcblxuICAgICAgLy8gZmluZCBhbGwgZWRnZXJpbmdzXG4gICAgICB0aGlzLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGVkZ2UpIHtcbiAgICAgICAgaWYgKGVkZ2UucmluZykgcmV0dXJuO1xuICAgICAgICBlZGdlUmluZ0xpc3QucHVzaChfdGhpczUuX2ZpbmRFZGdlUmluZyhlZGdlKSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGVkZ2VSaW5nTGlzdDtcbiAgICB9XG5cbiAgICAvKiogRmluZCBhbGwgbm9kZXMgaW4gYSBNYXhpbWEgRWRnZVJpbmcgd2hpY2ggYXJlIHNlbGYtaW50ZXJzZWN0aW9uIG5vZGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBzdGFydEVkZ2UgLSBTdGFydCBFZGdlIG9mIHRoZSBSaW5nXG4gICAgICogQHJldHVybnMge05vZGVbXX0gLSBpbnRlcnNlY3Rpb24gbm9kZXNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2ZpbmRJbnRlcnNlY3Rpb25Ob2RlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kSW50ZXJzZWN0aW9uTm9kZXMoc3RhcnRFZGdlKSB7XG4gICAgICB2YXIgaW50ZXJzZWN0aW9uTm9kZXMgPSBbXTtcbiAgICAgIHZhciBlZGdlID0gc3RhcnRFZGdlO1xuXG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgICAgLy8gZ2V0RGVncmVlXG4gICAgICAgIHZhciBkZWdyZWUgPSAwO1xuICAgICAgICBlZGdlLmZyb20uZ2V0T3V0ZXJFZGdlcygpLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoZS5sYWJlbCA9PT0gc3RhcnRFZGdlLmxhYmVsKSArK2RlZ3JlZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRlZ3JlZSA+IDEpIGludGVyc2VjdGlvbk5vZGVzLnB1c2goZWRnZS5mcm9tKTtcblxuICAgICAgICBlZGdlID0gZWRnZS5uZXh0O1xuICAgICAgfTtcblxuICAgICAgZG8ge1xuICAgICAgICBfbG9vcCgpO1xuICAgICAgfSB3aGlsZSAoIXN0YXJ0RWRnZS5pc0VxdWFsKGVkZ2UpKTtcblxuICAgICAgcmV0dXJuIGludGVyc2VjdGlvbk5vZGVzO1xuICAgIH1cblxuICAgIC8qKiBHZXQgdGhlIGVkZ2UtcmluZyB3aGljaCBzdGFydHMgZnJvbSB0aGUgcHJvdmlkZWQgRWRnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWRnZX0gc3RhcnRFZGdlIC0gc3RhcnRpbmcgZWRnZSBvZiB0aGUgZWRnZSByaW5nXG4gICAgICogQHJldHVybnMge0VkZ2VSaW5nfSAtIEVkZ2VSaW5nIHdoaWNoIHN0YXJ0IEVkZ2UgaXMgdGhlIHByb3ZpZGVkIG9uZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2ZpbmRFZGdlUmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kRWRnZVJpbmcoc3RhcnRFZGdlKSB7XG4gICAgICB2YXIgZWRnZSA9IHN0YXJ0RWRnZTtcbiAgICAgIHZhciBlZGdlUmluZyA9IG5ldyBFZGdlUmluZygpO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGVkZ2VSaW5nLnB1c2goZWRnZSk7XG4gICAgICAgIGVkZ2UucmluZyA9IGVkZ2VSaW5nO1xuICAgICAgICBlZGdlID0gZWRnZS5uZXh0O1xuICAgICAgfSB3aGlsZSAoIXN0YXJ0RWRnZS5pc0VxdWFsKGVkZ2UpKTtcblxuICAgICAgcmV0dXJuIGVkZ2VSaW5nO1xuICAgIH1cblxuICAgIC8qKiBSZW1vdmVzIGEgbm9kZSBmcm9tIHRoZSBHcmFwaC5cbiAgICAgKlxuICAgICAqIEl0IGFsc28gcmVtb3ZlcyBlZGdlcyBhc29jaWF0ZWQgdG8gdGhhdCBub2RlXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gTm9kZSB0byBiZSByZW1vdmVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZU5vZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBub2RlLmdldE91dGVyRWRnZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczYucmVtb3ZlRWRnZShlZGdlKTtcbiAgICAgIH0pO1xuICAgICAgbm9kZS5pbm5lckVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGVkZ2UpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNi5yZW1vdmVFZGdlKGVkZ2UpO1xuICAgICAgfSk7XG4gICAgICBkZWxldGUgdGhpcy5ub2Rlc1tub2RlLmlkXTtcbiAgICB9XG5cbiAgICAvKiogUmVtb3ZlIGVkZ2UgZnJvbSB0aGUgZ3JhcGggYW5kIGRlbGV0ZXMgdGhlIGVkZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VkZ2V9IGVkZ2UgLSBFZGdlIHRvIGJlIHJlbW92ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlRWRnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUVkZ2UoZWRnZSkge1xuICAgICAgdGhpcy5lZGdlcyA9IHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiAhZS5pc0VxdWFsKGVkZ2UpO1xuICAgICAgfSk7XG4gICAgICBlZGdlLmRlbGV0ZUVkZ2UoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JhcGg7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGg7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcG9seWdvbml6ZS9kaXN0L0dyYXBoLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL3V0aWwnKSxcbiAgICBvcmllbnRhdGlvbkluZGV4ID0gX3JlcXVpcmUub3JpZW50YXRpb25JbmRleDtcblxudmFyIE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIF9jcmVhdGVDbGFzcyhOb2RlLCBudWxsLCBbe1xuICAgIGtleTogJ2J1aWxkSWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZElkKGNvb3JkaW5hdGVzKSB7XG4gICAgICByZXR1cm4gY29vcmRpbmF0ZXMuam9pbignLCcpO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIE5vZGUoY29vcmRpbmF0ZXMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZSk7XG5cbiAgICB0aGlzLmlkID0gTm9kZS5idWlsZElkKGNvb3JkaW5hdGVzKTtcbiAgICB0aGlzLmNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXM7IC8vPCB7TnVtYmVyW119XG4gICAgdGhpcy5pbm5lckVkZ2VzID0gW107IC8vPCB7RWRnZVtdfVxuXG4gICAgLy8gV2Ugd2lsIHN0b3JlIHRvIChvdXQpIGVkZ2VzIGluIGFuIENDVyBvcmRlciBhcyBnZW9zOjpwbGFuYXJncmFwaDo6RGlyZWN0ZWRFZGdlU3RhciBkb2VzXG4gICAgdGhpcy5vdXRlckVkZ2VzID0gW107IC8vPCB7RWRnZVtdfVxuICAgIHRoaXMub3V0ZXJFZGdlc1NvcnRlZCA9IGZhbHNlOyAvLzwge0Jvb2xlYW59IGZsYWcgdGhhdCBzdG9yZXMgaWYgdGhlIG91dGVyIEVkZ2VzIGhhZCBiZWVuIHNvcnRlZFxuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5vZGUsIFt7XG4gICAga2V5OiAncmVtb3ZlSW5uZXJFZGdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlSW5uZXJFZGdlKGVkZ2UpIHtcbiAgICAgIHRoaXMuaW5uZXJFZGdlcyA9IHRoaXMuaW5uZXJFZGdlcy5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUuZnJvbS5pZCAhPT0gZWRnZS5mcm9tLmlkO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlT3V0ZXJFZGdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlT3V0ZXJFZGdlKGVkZ2UpIHtcbiAgICAgIHRoaXMub3V0ZXJFZGdlcyA9IHRoaXMub3V0ZXJFZGdlcy5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUudG8uaWQgIT09IGVkZ2UudG8uaWQ7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKiogT3V0ZXIgZWRnZXMgYXJlIHN0b3JlZCBDQ1cgb3JkZXIuXG4gICAgICogQHBhcmFtIHtFZGdlfSBlZGdlIC0gRWRnZSB0byBhZGQgYXMgYW4gb3V0ZXJFZGdlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRPdXRlckVkZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRPdXRlckVkZ2UoZWRnZSkge1xuICAgICAgdGhpcy5vdXRlckVkZ2VzLnB1c2goZWRnZSk7XG4gICAgICB0aGlzLm91dGVyRWRnZXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKiogU29ydHMgb3V0ZXIgZWRnZXMgaW4gQ0NXIHdheS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzb3J0T3V0ZXJFZGdlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvcnRPdXRlckVkZ2VzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLm91dGVyRWRnZXNTb3J0ZWQpIHtcbiAgICAgICAgLy90aGlzLm91dGVyRWRnZXMuc29ydCgoYSwgYikgPT4gYS5jb21wYXJlVG8oYikpO1xuICAgICAgICAvLyBVc2luZyB0aGlzIGNvbXBhcmF0b3IgaW4gb3JkZXIgdG8gYmUgZGV0ZXJtaW5pc3RpY1xuICAgICAgICB0aGlzLm91dGVyRWRnZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHZhciBhTm9kZSA9IGEudG8sXG4gICAgICAgICAgICAgIGJOb2RlID0gYi50bztcblxuICAgICAgICAgIGlmIChhTm9kZS5jb29yZGluYXRlc1swXSAtIF90aGlzLmNvb3JkaW5hdGVzWzBdID49IDAgJiYgYk5vZGUuY29vcmRpbmF0ZXNbMF0gLSBfdGhpcy5jb29yZGluYXRlc1swXSA8IDApIHJldHVybiAxO1xuICAgICAgICAgIGlmIChhTm9kZS5jb29yZGluYXRlc1swXSAtIF90aGlzLmNvb3JkaW5hdGVzWzBdIDwgMCAmJiBiTm9kZS5jb29yZGluYXRlc1swXSAtIF90aGlzLmNvb3JkaW5hdGVzWzBdID49IDApIHJldHVybiAtMTtcblxuICAgICAgICAgIGlmIChhTm9kZS5jb29yZGluYXRlc1swXSAtIF90aGlzLmNvb3JkaW5hdGVzWzBdID09PSAwICYmIGJOb2RlLmNvb3JkaW5hdGVzWzBdIC0gX3RoaXMuY29vcmRpbmF0ZXNbMF0gPT09IDApIHtcbiAgICAgICAgICAgIGlmIChhTm9kZS5jb29yZGluYXRlc1sxXSAtIF90aGlzLmNvb3JkaW5hdGVzWzFdID49IDAgfHwgYk5vZGUuY29vcmRpbmF0ZXNbMV0gLSBfdGhpcy5jb29yZGluYXRlc1sxXSA+PSAwKSByZXR1cm4gYU5vZGUuY29vcmRpbmF0ZXNbMV0gLSBiTm9kZS5jb29yZGluYXRlc1sxXTtcbiAgICAgICAgICAgIHJldHVybiBiTm9kZS5jb29yZGluYXRlc1sxXSAtIGFOb2RlLmNvb3JkaW5hdGVzWzFdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBkZXQgPSBvcmllbnRhdGlvbkluZGV4KF90aGlzLmNvb3JkaW5hdGVzLCBhTm9kZS5jb29yZGluYXRlcywgYk5vZGUuY29vcmRpbmF0ZXMpO1xuICAgICAgICAgIGlmIChkZXQgPCAwKSByZXR1cm4gMTtcbiAgICAgICAgICBpZiAoZGV0ID4gMCkgcmV0dXJuIC0xO1xuXG4gICAgICAgICAgdmFyIGQxID0gTWF0aC5wb3coYU5vZGUuY29vcmRpbmF0ZXNbMF0gLSBfdGhpcy5jb29yZGluYXRlc1swXSwgMikgKyBNYXRoLnBvdyhhTm9kZS5jb29yZGluYXRlc1sxXSAtIF90aGlzLmNvb3JkaW5hdGVzWzFdLCAyKSxcbiAgICAgICAgICAgICAgZDIgPSBNYXRoLnBvdyhiTm9kZS5jb29yZGluYXRlc1swXSAtIF90aGlzLmNvb3JkaW5hdGVzWzBdLCAyKSArIE1hdGgucG93KGJOb2RlLmNvb3JkaW5hdGVzWzFdIC0gX3RoaXMuY29vcmRpbmF0ZXNbMV0sIDIpO1xuXG4gICAgICAgICAgcmV0dXJuIGQxIC0gZDI7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm91dGVyRWRnZXNTb3J0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBSZXRyaWV2ZXMgb3V0ZXIgZWRnZXMuXG4gICAgICogVGhleSBhcmUgc29ydGVkIGlmIHRoZXkgYXJlbid0IGluIHRoZSBDQ1cgb3JkZXIuXG4gICAgICogQHJldHVybnMge0VkZ2VbXX0gLSBMaXN0IG9mIG91dGVyIGVkZ2VzIHNvcnRlZCBpbiBhIENDVyBvcmRlci5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0T3V0ZXJFZGdlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE91dGVyRWRnZXMoKSB7XG4gICAgICB0aGlzLnNvcnRPdXRlckVkZ2VzKCk7XG4gICAgICByZXR1cm4gdGhpcy5vdXRlckVkZ2VzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE91dGVyRWRnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE91dGVyRWRnZShpKSB7XG4gICAgICB0aGlzLnNvcnRPdXRlckVkZ2VzKCk7XG4gICAgICByZXR1cm4gdGhpcy5vdXRlckVkZ2VzW2ldO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FkZElubmVyRWRnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZElubmVyRWRnZShlZGdlKSB7XG4gICAgICB0aGlzLmlubmVyRWRnZXMucHVzaChlZGdlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTm9kZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOb2RlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3BvbHlnb25pemUvZGlzdC9Ob2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdAdHVyZi9oZWxwZXJzJyksXG4gICAgbGluZVN0cmluZyA9IF9yZXF1aXJlLmxpbmVTdHJpbmcsXG4gICAgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi91dGlsJyksXG4gICAgb3JpZW50YXRpb25JbmRleCA9IF9yZXF1aXJlMi5vcmllbnRhdGlvbkluZGV4O1xuXG4vKiogVGhpcyBjbGFzcyBpcyBpbnNwaXJlZCBieSBHRU9TJ3MgZ2Vvczo6b3BlcmF0aW9uOjpwb2x5Z29uaXplOjpQb2x5Z29uaXplRGlyZWN0ZWRFZGdlXG4gKi9cblxuXG52YXIgRWRnZSA9IGZ1bmN0aW9uICgpIHtcbiAgX2NyZWF0ZUNsYXNzKEVkZ2UsIFt7XG4gICAga2V5OiAnZ2V0U3ltZXRyaWMnLFxuXG4gICAgLyoqIENyZWF0ZXMgb3IgZ2V0IHRoZSBzeW1ldHJpYyBFZGdlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0VkZ2V9IC0gU3ltZXRyaWMgRWRnZS5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3ltZXRyaWMoKSB7XG4gICAgICBpZiAoIXRoaXMuc3ltZXRyaWMpIHtcbiAgICAgICAgdGhpcy5zeW1ldHJpYyA9IG5ldyBFZGdlKHRoaXMudG8sIHRoaXMuZnJvbSk7XG4gICAgICAgIHRoaXMuc3ltZXRyaWMuc3ltZXRyaWMgPSB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zeW1ldHJpYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IGZyb20gLSBzdGFydCBub2RlIG9mIHRoZSBFZGdlXG4gICAgICogQHBhcmFtIHtOb2RlfSB0byAtIGVuZCBub2RlIG9mIHRoZSBlZGdlXG4gICAgICovXG5cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIEVkZ2UoZnJvbSwgdG8pIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWRnZSk7XG5cbiAgICB0aGlzLmZyb20gPSBmcm9tOyAvLzwgc3RhcnRcbiAgICB0aGlzLnRvID0gdG87IC8vPCBFbmRcblxuICAgIHRoaXMubmV4dCA9IHVuZGVmaW5lZDsgLy88IFRoZSBlZGdlIHRvIGJlIGNvbXB1dGVkIGFmdGVyXG4gICAgdGhpcy5sYWJlbCA9IHVuZGVmaW5lZDsgLy88IFVzZWQgaW4gb3JkZXIgdG8gZGV0ZWN0IEN1dCBFZGdlcyAoQnJpZGdlcylcbiAgICB0aGlzLnN5bWV0cmljID0gdW5kZWZpbmVkOyAvLzwgVGhlIHN5bWV0cmljIGVkZ2Ugb2YgdGhpc1xuICAgIHRoaXMucmluZyA9IHVuZGVmaW5lZDsgLy88IEVkZ2VSaW5nIGluIHdoaWNoIHRoZSBFZGdlIGlzXG5cbiAgICB0aGlzLmZyb20uYWRkT3V0ZXJFZGdlKHRoaXMpO1xuICAgIHRoaXMudG8uYWRkSW5uZXJFZGdlKHRoaXMpO1xuICB9XG5cbiAgLyoqIFJlbW92ZXMgZWRnZSBmcm9tIGZyb20gYW5kIHRvIG5vZGVzLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhFZGdlLCBbe1xuICAgIGtleTogJ2RlbGV0ZUVkZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVFZGdlKCkge1xuICAgICAgdGhpcy5mcm9tLnJlbW92ZU91dGVyRWRnZSh0aGlzKTtcbiAgICAgIHRoaXMudG8ucmVtb3ZlSW5uZXJFZGdlKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKiBDb21wYXJlcyBFZGdlIGVxdWFsbGl0eS5cbiAgICAgKiBBbiBlZGdlIGlzIGVxdWFsIHRvIGFub3RoZXIsIGlmIHRoZSBmcm9tIGFuZCB0byBub2RlcyBhcmUgdGhlIHNhbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VkZ2V9IGVkZ2UgLSBBbm90aGVyIEVkZ2VcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBUcnVlIGlmIEVkZ2VzIGFyZSBlcXVhbCwgRmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzRXF1YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VxdWFsKGVkZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmZyb20uaWQgPT09IGVkZ2UuZnJvbS5pZCAmJiB0aGlzLnRvLmlkID09PSBlZGdlLnRvLmlkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ0VkZ2UgeyAnICsgdGhpcy5mcm9tLmlkICsgJyAtPiAnICsgdGhpcy50by5pZCArICcgfSc7XG4gICAgfVxuXG4gICAgLyoqIFJldHVybnMgYSBMaW5lU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFZGdlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RmVhdHVyZTxMaW5lU3RyaW5nPn0gLSBMaW5lU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFZGdlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvTGluZVN0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvTGluZVN0cmluZygpIHtcbiAgICAgIHJldHVybiBsaW5lU3RyaW5nKFt0aGlzLmZyb20uY29vcmRpbmF0ZXMsIHRoaXMudG8uY29vcmRpbmF0ZXNdKTtcbiAgICB9XG5cbiAgICAvKiogQ29tcGFyYXRvciBvZiB0d28gZWRnZXMuXG4gICAgICogSW1wbGVtZW50YXRpb24gb2YgZ2Vvczo6cGxhbmFyZ3JhcGg6OkRpcmVjdGVkRWRnZTo6Y29tcGFyZVRvLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFZGdlfSBlZGdlIC0gQW5vdGhlciBlZGdlIHRvIGNvbXBhcmUgd2l0aCB0aGlzIG9uZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0xIGlmIHRoaXMgRWRnZSBoYXMgYSBncmVhdGVyIGFuZ2xlIHdpdGggdGhlIHBvc2l0aXZlIHgtYXhpcyB0aGFuIGIsXG4gICAgICogICAgICAgICAgMCBpZiB0aGUgRWRnZXMgYXJlIGNvbGluZWFyLFxuICAgICAqICAgICAgICAgIDEgb3RoZXJ3aXNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NvbXBhcmVUbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBhcmVUbyhlZGdlKSB7XG4gICAgICByZXR1cm4gb3JpZW50YXRpb25JbmRleChlZGdlLmZyb20uY29vcmRpbmF0ZXMsIGVkZ2UudG8uY29vcmRpbmF0ZXMsIHRoaXMudG8uY29vcmRpbmF0ZXMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFZGdlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkZ2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcG9seWdvbml6ZS9kaXN0L0VkZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDI0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaW5zaWRlID0gcmVxdWlyZSgnQHR1cmYvaW5zaWRlJyk7XG52YXIgZmxhdHRlbkVhY2ggPSByZXF1aXJlKCdAdHVyZi9tZXRhJykuZmxhdHRlbkVhY2g7XG52YXIgbGluZUludGVyc2VjdCA9IHJlcXVpcmUoJ0B0dXJmL2xpbmUtaW50ZXJzZWN0Jyk7XG52YXIgcG9seVRvTGluZXN0cmluZyA9IHJlcXVpcmUoJ0B0dXJmL3BvbHlnb24tdG8tbGluZXN0cmluZycpO1xuXG4vKipcbiAqIEJvb2xlYW4tZGlzam9pbnQgcmV0dXJucyAoVFJVRSkgaWYgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIGdlb21ldHJpZXMgaXMgYW4gZW1wdHkgc2V0LlxuICpcbiAqIEBuYW1lIGJvb2xlYW5EaXNqb2ludFxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPGFueT59IGZlYXR1cmUxIEdlb0pTT04gRmVhdHVyZSBvciBHZW9tZXRyeVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPGFueT59IGZlYXR1cmUyIEdlb0pTT04gRmVhdHVyZSBvciBHZW9tZXRyeVxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUvZmFsc2VcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBwb2ludCA9IHR1cmYucG9pbnQoWzIsIDJdKTtcbiAqIGNvbnN0IGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1sxLCAxXSwgWzEsIDJdLCBbMSwgM10sIFsxLCA0XV0pO1xuICpcbiAqIHR1cmYuYm9vbGVhbkRpc2pvaW50KGxpbmUsIHBvaW50KTtcbiAqIC8vPXRydWVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZmVhdHVyZTEsIGZlYXR1cmUyKSB7XG4gICAgdmFyIGJvb2xlYW47XG4gICAgZmxhdHRlbkVhY2goZmVhdHVyZTEsIGZ1bmN0aW9uIChmbGF0dGVuMSkge1xuICAgICAgICBmbGF0dGVuRWFjaChmZWF0dXJlMiwgZnVuY3Rpb24gKGZsYXR0ZW4yKSB7XG4gICAgICAgICAgICBpZiAoYm9vbGVhbiA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGJvb2xlYW4gPSBkaXNqb2ludChmbGF0dGVuMS5nZW9tZXRyeSwgZmxhdHRlbjIuZ2VvbWV0cnkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm9vbGVhbjtcbn07XG5cbi8qKlxuICogRGlzam9pbnQgb3BlcmF0aW9uIGZvciBzaW1wbGUgR2VvbWV0cmllcyAoUG9pbnQvTGluZVN0cmluZy9Qb2x5Z29uKVxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0dlb21ldHJ5PGFueT59IGdlb20xIEdlb0pTT04gR2VvbWV0cnlcbiAqIEBwYXJhbSB7R2VvbWV0cnk8YW55Pn0gZ2VvbTIgR2VvSlNPTiBHZW9tZXRyeVxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUvZmFsc2VcbiAqL1xuZnVuY3Rpb24gZGlzam9pbnQoZ2VvbTEsIGdlb20yKSB7XG4gICAgc3dpdGNoIChnZW9tMS50eXBlKSB7XG4gICAgY2FzZSAnUG9pbnQnOlxuICAgICAgICBzd2l0Y2ggKGdlb20yLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUG9pbnQnOlxuICAgICAgICAgICAgcmV0dXJuICFjb21wYXJlQ29vcmRzKGdlb20xLmNvb3JkaW5hdGVzLCBnZW9tMi5jb29yZGluYXRlcyk7XG4gICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuICFpc1BvaW50T25MaW5lKGdlb20yLCBnZW9tMSk7XG4gICAgICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICAgICAgcmV0dXJuICFpbnNpZGUoZ2VvbTEsIGdlb20yKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBicmVhaztcbiAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgc3dpdGNoIChnZW9tMi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgICAgIHJldHVybiAhaXNQb2ludE9uTGluZShnZW9tMSwgZ2VvbTIpO1xuICAgICAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiAhaXNMaW5lT25MaW5lKGdlb20xLCBnZW9tMik7XG4gICAgICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICAgICAgcmV0dXJuICFpc0xpbmVJblBvbHkoZ2VvbTIsIGdlb20xKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBicmVhaztcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgc3dpdGNoIChnZW9tMi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgICAgIHJldHVybiAhaW5zaWRlKGdlb20yLCBnZW9tMSk7XG4gICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuICFpc0xpbmVJblBvbHkoZ2VvbTEsIGdlb20yKTtcbiAgICAgICAgY2FzZSAnUG9seWdvbic6XG4gICAgICAgICAgICByZXR1cm4gIWlzUG9seUluUG9seShnZW9tMiwgZ2VvbTEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTkwODE1OC8xOTc5MDg1XG5mdW5jdGlvbiBpc1BvaW50T25MaW5lKGxpbmVTdHJpbmcsIHBvaW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lU3RyaW5nLmNvb3JkaW5hdGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBpZiAoaXNQb2ludE9uTGluZVNlZ21lbnQobGluZVN0cmluZy5jb29yZGluYXRlc1tpXSwgbGluZVN0cmluZy5jb29yZGluYXRlc1tpICsgMV0sIHBvaW50LmNvb3JkaW5hdGVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0xpbmVPbkxpbmUobGluZVN0cmluZzEsIGxpbmVTdHJpbmcyKSB7XG4gICAgdmFyIGRvTGluZXNJbnRlcnNlY3QgPSBsaW5lSW50ZXJzZWN0KGxpbmVTdHJpbmcxLCBsaW5lU3RyaW5nMik7XG4gICAgaWYgKGRvTGluZXNJbnRlcnNlY3QuZmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0xpbmVJblBvbHkocG9seWdvbiwgbGluZVN0cmluZykge1xuICAgIHZhciBkb0xpbmVzSW50ZXJzZWN0ID0gbGluZUludGVyc2VjdChsaW5lU3RyaW5nLCBwb2x5VG9MaW5lc3RyaW5nKHBvbHlnb24pKTtcbiAgICBpZiAoZG9MaW5lc0ludGVyc2VjdC5mZWF0dXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogSXMgUG9seWdvbiAoZ2VvbTEpIGluIFBvbHlnb24gKGdlb20yKVxuICogT25seSB0YWtlcyBpbnRvIGFjY291bnQgb3V0ZXIgcmluZ3NcbiAqIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80ODMzODIzLzE5NzkwODVcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvbHlnb24+fSBmZWF0dXJlMSBQb2x5Z29uMVxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlPFBvbHlnb24+fSBmZWF0dXJlMiBQb2x5Z29uMlxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUvZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQb2x5SW5Qb2x5KGZlYXR1cmUxLCBmZWF0dXJlMikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZTEuY29vcmRpbmF0ZXNbMF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluc2lkZShmZWF0dXJlMS5jb29yZGluYXRlc1swXVtpXSwgZmVhdHVyZTIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUG9pbnRPbkxpbmVTZWdtZW50KExpbmVTZWdtZW50U3RhcnQsIExpbmVTZWdtZW50RW5kLCBQb2ludCkge1xuICAgIHZhciBkeGMgPSBQb2ludFswXSAtIExpbmVTZWdtZW50U3RhcnRbMF07XG4gICAgdmFyIGR5YyA9IFBvaW50WzFdIC0gTGluZVNlZ21lbnRTdGFydFsxXTtcbiAgICB2YXIgZHhsID0gTGluZVNlZ21lbnRFbmRbMF0gLSBMaW5lU2VnbWVudFN0YXJ0WzBdO1xuICAgIHZhciBkeWwgPSBMaW5lU2VnbWVudEVuZFsxXSAtIExpbmVTZWdtZW50U3RhcnRbMV07XG4gICAgdmFyIGNyb3NzID0gZHhjICogZHlsIC0gZHljICogZHhsO1xuICAgIGlmIChjcm9zcyAhPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChNYXRoLmFicyhkeGwpID49IE1hdGguYWJzKGR5bCkpIHtcbiAgICAgICAgaWYgKGR4bCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBMaW5lU2VnbWVudFN0YXJ0WzBdIDw9IFBvaW50WzBdICYmIFBvaW50WzBdIDw9IExpbmVTZWdtZW50RW5kWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIExpbmVTZWdtZW50RW5kWzBdIDw9IFBvaW50WzBdICYmIFBvaW50WzBdIDw9IExpbmVTZWdtZW50U3RhcnRbMF07XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGR5bCA+IDApIHtcbiAgICAgICAgcmV0dXJuIExpbmVTZWdtZW50U3RhcnRbMV0gPD0gUG9pbnRbMV0gJiYgUG9pbnRbMV0gPD0gTGluZVNlZ21lbnRFbmRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIExpbmVTZWdtZW50RW5kWzFdIDw9IFBvaW50WzFdICYmIFBvaW50WzFdIDw9IExpbmVTZWdtZW50U3RhcnRbMV07XG4gICAgfVxufVxuXG4vKipcbiAqIGNvbXBhcmVDb29yZHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXJdfSBwYWlyMSBwb2ludCBbeCx5XVxuICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXJdfSBwYWlyMiBwb2ludCBbeCx5XVxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUvZmFsc2UgaWYgY29vcmQgcGFpcnMgbWF0Y2hcbiAqL1xuZnVuY3Rpb24gY29tcGFyZUNvb3JkcyhwYWlyMSwgcGFpcjIpIHtcbiAgICByZXR1cm4gcGFpcjFbMF0gPT09IHBhaXIyWzBdICYmIHBhaXIxWzFdID09PSBwYWlyMlsxXTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2Jvb2xlYW4tZGlzam9pbnQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaW5zaWRlID0gcmVxdWlyZSgnQHR1cmYvaW5zaWRlJyk7XG52YXIgY2FsY0Jib3ggPSByZXF1aXJlKCdAdHVyZi9iYm94Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnQHR1cmYvaW52YXJpYW50Jyk7XG52YXIgZ2V0R2VvbSA9IGludmFyaWFudC5nZXRHZW9tO1xudmFyIGdldENvb3JkcyA9IGludmFyaWFudC5nZXRDb29yZHM7XG52YXIgZ2V0R2VvbVR5cGUgPSBpbnZhcmlhbnQuZ2V0R2VvbVR5cGU7XG5cbi8qKlxuICogQm9vbGVhbi1jb250YWlucyByZXR1cm5zIFRydWUgaWYgdGhlIHNlY29uZCBnZW9tZXRyeSBpcyBjb21wbGV0ZWx5IGNvbnRhaW5lZCBieSB0aGUgZmlyc3QgZ2VvbWV0cnkuXG4gKiBUaGUgaW50ZXJpb3JzIG9mIGJvdGggZ2VvbWV0cmllcyBtdXN0IGludGVyc2VjdCBhbmQsIHRoZSBpbnRlcmlvciBhbmQgYm91bmRhcnkgb2YgdGhlIHNlY29uZGFyeSAoZ2VvbWV0cnkgYilcbiAqIG11c3Qgbm90IGludGVyc2VjdCB0aGUgZXh0ZXJpb3Igb2YgdGhlIHByaW1hcnkgKGdlb21ldHJ5IGEpLlxuICogQm9vbGVhbi1jb250YWlucyByZXR1cm5zIHRoZSBleGFjdCBvcHBvc2l0ZSByZXN1bHQgb2YgdGhlIGBAdHVyZi9ib29sZWFuLXdpdGhpbmAuXG4gKlxuICogQG5hbWUgYm9vbGVhbkNvbnRhaW5zXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8YW55Pn0gZmVhdHVyZTEgR2VvSlNPTiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8YW55Pn0gZmVhdHVyZTIgR2VvSlNPTiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZS9mYWxzZVxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1sxLCAxXSwgWzEsIDJdLCBbMSwgM10sIFsxLCA0XV0pO1xuICogY29uc3QgcG9pbnQgPSB0dXJmLnBvaW50KFsxLCAyXSk7XG4gKlxuICogdHVyZi5ib29sZWFuQ29udGFpbnMobGluZSwgcG9pbnQpO1xuICogLy89dHJ1ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmZWF0dXJlMSwgZmVhdHVyZTIpIHtcbiAgICB2YXIgdHlwZTEgPSBnZXRHZW9tVHlwZShmZWF0dXJlMSk7XG4gICAgdmFyIHR5cGUyID0gZ2V0R2VvbVR5cGUoZmVhdHVyZTIpO1xuICAgIHZhciBnZW9tMSA9IGdldEdlb20oZmVhdHVyZTEpO1xuICAgIHZhciBnZW9tMiA9IGdldEdlb20oZmVhdHVyZTIpO1xuICAgIHZhciBjb29yZHMxID0gZ2V0Q29vcmRzKGZlYXR1cmUxKTtcbiAgICB2YXIgY29vcmRzMiA9IGdldENvb3JkcyhmZWF0dXJlMik7XG5cbiAgICBzd2l0Y2ggKHR5cGUxKSB7XG4gICAgY2FzZSAnUG9pbnQnOlxuICAgICAgICBzd2l0Y2ggKHR5cGUyKSB7XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlQ29vcmRzKGNvb3JkczEsIGNvb3JkczIpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZWF0dXJlMiAnICsgdHlwZTIgKyAnIGdlb21ldHJ5IG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgIGNhc2UgJ011bHRpUG9pbnQnOlxuICAgICAgICBzd2l0Y2ggKHR5cGUyKSB7XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgICAgIHJldHVybiBpc1BvaW50SW5NdWx0aVBvaW50KGdlb20xLCBnZW9tMik7XG4gICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOlxuICAgICAgICAgICAgcmV0dXJuIGlzTXVsdGlQb2ludEluTXVsdGlQb2ludChnZW9tMSwgZ2VvbTIpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZWF0dXJlMiAnICsgdHlwZTIgKyAnIGdlb21ldHJ5IG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICBzd2l0Y2ggKHR5cGUyKSB7XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgICAgIHJldHVybiBpc1BvaW50T25MaW5lKGdlb20xLCBnZW9tMiwgdHJ1ZSk7XG4gICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuIGlzTGluZU9uTGluZShnZW9tMSwgZ2VvbTIpO1xuICAgICAgICBjYXNlICdNdWx0aVBvaW50JzpcbiAgICAgICAgICAgIHJldHVybiBpc011bHRpUG9pbnRPbkxpbmUoZ2VvbTEsIGdlb20yKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmVhdHVyZTIgJyArIHR5cGUyICsgJyBnZW9tZXRyeSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgc3dpdGNoICh0eXBlMikge1xuICAgICAgICBjYXNlICdQb2ludCc6XG4gICAgICAgICAgICByZXR1cm4gaW5zaWRlKGdlb20yLCBnZW9tMSwgdHJ1ZSk7XG4gICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuIGlzTGluZUluUG9seShnZW9tMSwgZ2VvbTIpO1xuICAgICAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgICAgIHJldHVybiBpc1BvbHlJblBvbHkoZ2VvbTEsIGdlb20yKTtcbiAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICAgICAgICByZXR1cm4gaXNNdWx0aVBvaW50SW5Qb2x5KGdlb20xLCBnZW9tMik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZlYXR1cmUyICcgKyB0eXBlMiArICcgZ2VvbWV0cnkgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZWF0dXJlMSAnICsgdHlwZTEgKyAnIGdlb21ldHJ5IG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBpc1BvaW50SW5NdWx0aVBvaW50KG11bHRpUG9pbnQsIHBvaW50KSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIG91dHB1dCA9IGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBtdWx0aVBvaW50LmNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjb21wYXJlQ29vcmRzKG11bHRpUG9pbnQuY29vcmRpbmF0ZXNbaV0sIHBvaW50LmNvb3JkaW5hdGVzKSkge1xuICAgICAgICAgICAgb3V0cHV0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGlzTXVsdGlQb2ludEluTXVsdGlQb2ludChtdWx0aVBvaW50MSwgbXVsdGlQb2ludDIpIHtcbiAgICB2YXIgZm91bmRBTWF0Y2ggPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlQb2ludDIuY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGFueU1hdGNoID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkyID0gMDsgaTIgPCBtdWx0aVBvaW50MS5jb29yZGluYXRlcy5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgICAgIGlmIChjb21wYXJlQ29vcmRzKG11bHRpUG9pbnQyLmNvb3JkaW5hdGVzW2ldLCBtdWx0aVBvaW50MS5jb29yZGluYXRlc1tpMl0pKSB7XG4gICAgICAgICAgICAgICAgZm91bmRBTWF0Y2grKztcbiAgICAgICAgICAgICAgICBhbnlNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhbnlNYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmb3VuZEFNYXRjaCA+IDA7XG59XG5cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExOTA4MTU4LzE5NzkwODVcbmZ1bmN0aW9uIGlzUG9pbnRPbkxpbmUobGluZVN0cmluZywgcG9pbnQsIGV4Y0VuZFBvaW50cykge1xuICAgIHZhciBvdXRwdXQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVTdHJpbmcuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBpbmNFbmRWZXJ0aWNlcyA9IHRydWU7XG4gICAgICAgIGlmICgoaSA9PT0gMCB8fCBpID09PSBsaW5lU3RyaW5nLmNvb3JkaW5hdGVzLmxlbmd0aCAtIDIpICYmIGV4Y0VuZFBvaW50cykge1xuICAgICAgICAgICAgaW5jRW5kVmVydGljZXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQb2ludE9uTGluZVNlZ21lbnQobGluZVN0cmluZy5jb29yZGluYXRlc1tpXSwgbGluZVN0cmluZy5jb29yZGluYXRlc1tpICsgMV0sIHBvaW50LmNvb3JkaW5hdGVzLCBpbmNFbmRWZXJ0aWNlcykpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBpc011bHRpUG9pbnRPbkxpbmUobGluZVN0cmluZywgbXVsdGlQb2ludCkge1xuICAgIHZhciBvdXRwdXQgPSB0cnVlO1xuICAgIHZhciBmb3VuZEFuSW50ZXJpb3JQb2ludCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlQb2ludC5jb29yZGluYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcG9pbnRJc09uTGluZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpMiA9IDA7IGkyIDwgbGluZVN0cmluZy5jb29yZGluYXRlcy5sZW5ndGggLSAxOyBpMisrKSB7XG4gICAgICAgICAgICBpZiAoaXNQb2ludE9uTGluZVNlZ21lbnQobGluZVN0cmluZy5jb29yZGluYXRlc1tpMl0sIGxpbmVTdHJpbmcuY29vcmRpbmF0ZXNbaTIgKyAxXSwgbXVsdGlQb2ludC5jb29yZGluYXRlc1tpXSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvdW5kQW5JbnRlcmlvclBvaW50ICYmIGlzUG9pbnRPbkxpbmVTZWdtZW50KGxpbmVTdHJpbmcuY29vcmRpbmF0ZXNbaTJdLCBsaW5lU3RyaW5nLmNvb3JkaW5hdGVzW2kyICsgMV0sIG11bHRpUG9pbnQuY29vcmRpbmF0ZXNbaV0sIGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZEFuSW50ZXJpb3JQb2ludCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvaW50SXNPbkxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcG9pbnRJc09uTGluZSkge1xuICAgICAgICAgICAgb3V0cHV0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0ICYmIGZvdW5kQW5JbnRlcmlvclBvaW50O1xufVxuXG5mdW5jdGlvbiBpc011bHRpUG9pbnRJblBvbHkocG9seWdvbiwgbXVsdGlQb2ludCkge1xuICAgIHZhciBvdXRwdXQgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlQb2ludC5jb29yZGluYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaXNJbnNpZGUgPSBpbnNpZGUobXVsdGlQb2ludC5jb29yZGluYXRlc1sxXSwgcG9seWdvbiwgdHJ1ZSk7XG4gICAgICAgIGlmICghaXNJbnNpZGUpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gaXNMaW5lT25MaW5lKGxpbmVTdHJpbmcxLCBsaW5lU3RyaW5nMikge1xuICAgIHZhciBvdXRwdXQgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZVN0cmluZzIuY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrTGluZUNvb3JkcyA9IGlzUG9pbnRPbkxpbmUobGluZVN0cmluZzEsIHt0eXBlOiAnUG9pbnQnLCBjb29yZGluYXRlczogbGluZVN0cmluZzIuY29vcmRpbmF0ZXNbaV19LCBmYWxzZSk7XG4gICAgICAgIGlmICghY2hlY2tMaW5lQ29vcmRzKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGlzTGluZUluUG9seShwb2x5Z29uLCBsaW5lc3RyaW5nKSB7XG4gICAgdmFyIG91dHB1dCA9IGZhbHNlO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGluZUxlbmd0aCA9IGxpbmVzdHJpbmcuY29vcmRpbmF0ZXMubGVuZ3RoO1xuXG4gICAgdmFyIHBvbHlCYm94ID0gY2FsY0Jib3gocG9seWdvbik7XG4gICAgdmFyIGxpbmVCYm94ID0gY2FsY0Jib3gobGluZXN0cmluZyk7XG4gICAgaWYgKCFkb0JCb3hPdmVybGFwKHBvbHlCYm94LCBsaW5lQmJveCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGk7IGkgPCBsaW5lTGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBtaWRQb2ludCA9IGdldE1pZHBvaW50KGxpbmVzdHJpbmcuY29vcmRpbmF0ZXNbaV0sIGxpbmVzdHJpbmcuY29vcmRpbmF0ZXNbaSArIDFdKTtcbiAgICAgICAgaWYgKGluc2lkZSh7dHlwZTogJ1BvaW50JywgY29vcmRpbmF0ZXM6IG1pZFBvaW50fSwgcG9seWdvbiwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG4vKipcbiAqIElzIFBvbHlnb24gKGdlb20xKSBpbiBQb2x5Z29uIChnZW9tMilcbiAqIE9ubHkgdGFrZXMgaW50byBhY2NvdW50IG91dGVyIHJpbmdzXG4gKiBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDgzMzgyMy8xOTc5MDg1XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2x5Z29uPn0gZmVhdHVyZTEgUG9seWdvbjFcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxQb2x5Z29uPn0gZmVhdHVyZTIgUG9seWdvbjJcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlL2ZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUG9seUluUG9seShmZWF0dXJlMSwgZmVhdHVyZTIpIHtcbiAgICB2YXIgcG9seTFCYm94ID0gY2FsY0Jib3goZmVhdHVyZTEpO1xuICAgIHZhciBwb2x5MkJib3ggPSBjYWxjQmJveChmZWF0dXJlMik7XG4gICAgaWYgKCFkb0JCb3hPdmVybGFwKHBvbHkxQmJveCwgcG9seTJCYm94KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5cbi8qKlxuICogSXMgYSBwb2ludCBvbiBhIGxpbmUgc2VnbWVudFxuICogT25seSB0YWtlcyBpbnRvIGFjY291bnQgb3V0ZXIgcmluZ3NcbiAqIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80ODMzODIzLzE5NzkwODVcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gbGluZVNlZ21lbnRTdGFydCBjb29yZCBwYWlyIG9mIHN0YXJ0IG9mIGxpbmVcbiAqIEBwYXJhbSB7QXJyYXl9IGxpbmVTZWdtZW50RW5kIGNvb3JkIHBhaXIgb2YgZW5kIG9mIGxpbmVcbiAqIEBwYXJhbSB7QXJyYXl9IHBvaW50IGNvb3JkIHBhaXIgb2YgcG9pbnQgdG8gY2hlY2tcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jRW5kIHdoZXRoZXIgdGhlIHBvaW50IGlzIGFsbG93ZWQgdG8gZmFsbCBvbiB0aGUgbGluZSBlbmRzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZS9mYWxzZVxuICovXG5mdW5jdGlvbiBpc1BvaW50T25MaW5lU2VnbWVudChsaW5lU2VnbWVudFN0YXJ0LCBsaW5lU2VnbWVudEVuZCwgcG9pbnQsIGluY0VuZCkge1xuICAgIHZhciBkeGMgPSBwb2ludFswXSAtIGxpbmVTZWdtZW50U3RhcnRbMF07XG4gICAgdmFyIGR5YyA9IHBvaW50WzFdIC0gbGluZVNlZ21lbnRTdGFydFsxXTtcbiAgICB2YXIgZHhsID0gbGluZVNlZ21lbnRFbmRbMF0gLSBsaW5lU2VnbWVudFN0YXJ0WzBdO1xuICAgIHZhciBkeWwgPSBsaW5lU2VnbWVudEVuZFsxXSAtIGxpbmVTZWdtZW50U3RhcnRbMV07XG4gICAgdmFyIGNyb3NzID0gZHhjICogZHlsIC0gZHljICogZHhsO1xuICAgIGlmIChjcm9zcyAhPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpbmNFbmQpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGR4bCkgPj0gTWF0aC5hYnMoZHlsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGR4bCA+IDAgPyBsaW5lU2VnbWVudFN0YXJ0WzBdIDw9IHBvaW50WzBdICYmIHBvaW50WzBdIDw9IGxpbmVTZWdtZW50RW5kWzBdIDogbGluZVNlZ21lbnRFbmRbMF0gPD0gcG9pbnRbMF0gJiYgcG9pbnRbMF0gPD0gbGluZVNlZ21lbnRTdGFydFswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHlsID4gMCA/IGxpbmVTZWdtZW50U3RhcnRbMV0gPD0gcG9pbnRbMV0gJiYgcG9pbnRbMV0gPD0gbGluZVNlZ21lbnRFbmRbMV0gOiBsaW5lU2VnbWVudEVuZFsxXSA8PSBwb2ludFsxXSAmJiBwb2ludFsxXSA8PSBsaW5lU2VnbWVudFN0YXJ0WzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhkeGwpID49IE1hdGguYWJzKGR5bCkpIHtcbiAgICAgICAgICAgIHJldHVybiBkeGwgPiAwID8gbGluZVNlZ21lbnRTdGFydFswXSA8IHBvaW50WzBdICYmIHBvaW50WzBdIDwgbGluZVNlZ21lbnRFbmRbMF0gOiBsaW5lU2VnbWVudEVuZFswXSA8IHBvaW50WzBdICYmIHBvaW50WzBdIDwgbGluZVNlZ21lbnRTdGFydFswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHlsID4gMCA/IGxpbmVTZWdtZW50U3RhcnRbMV0gPCBwb2ludFsxXSAmJiBwb2ludFsxXSA8IGxpbmVTZWdtZW50RW5kWzFdIDogbGluZVNlZ21lbnRFbmRbMV0gPCBwb2ludFsxXSAmJiBwb2ludFsxXSA8IGxpbmVTZWdtZW50U3RhcnRbMV07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkb0JCb3hPdmVybGFwKGJib3gxLCBiYm94Mikge1xuICAgIGlmIChiYm94MVswXSA+IGJib3gyWzBdKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGJib3gxWzJdIDwgYmJveDJbMl0pIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYmJveDFbMV0gPiBiYm94MlsxXSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChiYm94MVszXSA8IGJib3gyWzNdKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogY29tcGFyZUNvb3Jkc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlcl19IHBhaXIxIHBvaW50IFt4LHldXG4gKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlcl19IHBhaXIyIHBvaW50IFt4LHldXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZS9mYWxzZSBpZiBjb29yZCBwYWlycyBtYXRjaFxuICovXG5mdW5jdGlvbiBjb21wYXJlQ29vcmRzKHBhaXIxLCBwYWlyMikge1xuICAgIHJldHVybiBwYWlyMVswXSA9PT0gcGFpcjJbMF0gJiYgcGFpcjFbMV0gPT09IHBhaXIyWzFdO1xufVxuXG5mdW5jdGlvbiBnZXRNaWRwb2ludChwYWlyMSwgcGFpcjIpIHtcbiAgICByZXR1cm4gWyhwYWlyMVswXSArIHBhaXIyWzBdKSAvIDIsIChwYWlyMVsxXSArIHBhaXIyWzFdKSAvIDJdO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvYm9vbGVhbi1jb250YWlucy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBoZWxwZXJzID0gcmVxdWlyZSgnQHR1cmYvaGVscGVycycpO1xudmFyIGluc2lkZSA9IHJlcXVpcmUoJ0B0dXJmL2luc2lkZScpO1xudmFyIGxpbmVJbnRlcnNlY3QgPSByZXF1aXJlKCdAdHVyZi9saW5lLWludGVyc2VjdCcpO1xudmFyIHBvbHlUb0xpbmVzdHJpbmcgPSByZXF1aXJlKCdAdHVyZi9wb2x5Z29uLXRvLWxpbmVzdHJpbmcnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKTtcbnZhciBnZXRHZW9tID0gaW52YXJpYW50LmdldEdlb207XG52YXIgZ2V0R2VvbVR5cGUgPSBpbnZhcmlhbnQuZ2V0R2VvbVR5cGU7XG5cbi8qKlxuICogQm9vbGVhbi1Dcm9zc2VzIHJldHVybnMgVHJ1ZSBpZiB0aGUgaW50ZXJzZWN0aW9uIHJlc3VsdHMgaW4gYSBnZW9tZXRyeSB3aG9zZSBkaW1lbnNpb24gaXMgb25lIGxlc3MgdGhhblxuICogdGhlIG1heGltdW0gZGltZW5zaW9uIG9mIHRoZSB0d28gc291cmNlIGdlb21ldHJpZXMgYW5kIHRoZSBpbnRlcnNlY3Rpb24gc2V0IGlzIGludGVyaW9yIHRvXG4gKiBib3RoIHNvdXJjZSBnZW9tZXRyaWVzLlxuICpcbiAqIEJvb2xlYW4tQ3Jvc3NlcyByZXR1cm5zIHQgKFRSVUUpIGZvciBvbmx5IG11bHRpcG9pbnQvcG9seWdvbiwgbXVsdGlwb2ludC9saW5lc3RyaW5nLCBsaW5lc3RyaW5nL2xpbmVzdHJpbmcsIGxpbmVzdHJpbmcvcG9seWdvbiwgYW5kIGxpbmVzdHJpbmcvbXVsdGlwb2x5Z29uIGNvbXBhcmlzb25zLlxuICpcbiAqIEBuYW1lIGJvb2xlYW5Dcm9zc2VzXG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8YW55Pn0gZmVhdHVyZTEgR2VvSlNPTiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcGFyYW0ge0dlb21ldHJ5fEZlYXR1cmU8YW55Pn0gZmVhdHVyZTIgR2VvSlNPTiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZS9mYWxzZVxuICogQGV4YW1wbGVcbiAqIHZhciBsaW5lMSA9IHR1cmYubGluZVN0cmluZyhbWy0yLCAyXSwgWzQsIDJdXSk7XG4gKiB2YXIgbGluZTIgPSB0dXJmLmxpbmVTdHJpbmcoW1sxLCAxXSwgWzEsIDJdLCBbMSwgM10sIFsxLCA0XV0pO1xuICpcbiAqIHZhciBjcm9zcyA9IHR1cmYuYm9vbGVhbkNyb3NzZXMobGluZTEsIGxpbmUyKTtcbiAqIC8vPXRydWVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZmVhdHVyZTEsIGZlYXR1cmUyKSB7XG4gICAgdmFyIHR5cGUxID0gZ2V0R2VvbVR5cGUoZmVhdHVyZTEpO1xuICAgIHZhciB0eXBlMiA9IGdldEdlb21UeXBlKGZlYXR1cmUyKTtcbiAgICB2YXIgZ2VvbTEgPSBnZXRHZW9tKGZlYXR1cmUxKTtcbiAgICB2YXIgZ2VvbTIgPSBnZXRHZW9tKGZlYXR1cmUyKTtcblxuICAgIHN3aXRjaCAodHlwZTEpIHtcbiAgICBjYXNlICdNdWx0aVBvaW50JzpcbiAgICAgICAgc3dpdGNoICh0eXBlMikge1xuICAgICAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiBkb011bHRpUG9pbnRBbmRMaW5lU3RyaW5nQ3Jvc3MoZ2VvbTEsIGdlb20yKTtcbiAgICAgICAgY2FzZSAnUG9seWdvbic6XG4gICAgICAgICAgICByZXR1cm4gZG9lc011bHRpUG9pbnRDcm9zc1BvbHkoZ2VvbTEsIGdlb20yKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmVhdHVyZTIgJyArIHR5cGUyICsgJyBnZW9tZXRyeSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICBjYXNlICdMaW5lU3RyaW5nJzpcbiAgICAgICAgc3dpdGNoICh0eXBlMikge1xuICAgICAgICBjYXNlICdNdWx0aVBvaW50JzogLy8gQW4gaW52ZXJzZSBvcGVyYXRpb25cbiAgICAgICAgICAgIHJldHVybiBkb011bHRpUG9pbnRBbmRMaW5lU3RyaW5nQ3Jvc3MoZ2VvbTIsIGdlb20xKTtcbiAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XG4gICAgICAgICAgICByZXR1cm4gZG9MaW5lU3RyaW5nc0Nyb3NzKGdlb20xLCBnZW9tMik7XG4gICAgICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICAgICAgcmV0dXJuIGRvTGluZVN0cmluZ0FuZFBvbHlnb25Dcm9zcyhnZW9tMSwgZ2VvbTIpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZWF0dXJlMiAnICsgdHlwZTIgKyAnIGdlb21ldHJ5IG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICBzd2l0Y2ggKHR5cGUyKSB7XG4gICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOiAvLyBBbiBpbnZlcnNlIG9wZXJhdGlvblxuICAgICAgICAgICAgcmV0dXJuIGRvZXNNdWx0aVBvaW50Q3Jvc3NQb2x5KGdlb20yLCBnZW9tMSk7XG4gICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOiAvLyBBbiBpbnZlcnNlIG9wZXJhdGlvblxuICAgICAgICAgICAgcmV0dXJuIGRvTGluZVN0cmluZ0FuZFBvbHlnb25Dcm9zcyhnZW9tMiwgZ2VvbTEpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZWF0dXJlMiAnICsgdHlwZTIgKyAnIGdlb21ldHJ5IG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmVhdHVyZTEgJyArIHR5cGUxICsgJyBnZW9tZXRyeSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gZG9NdWx0aVBvaW50QW5kTGluZVN0cmluZ0Nyb3NzKG11bHRpUG9pbnQsIGxpbmVTdHJpbmcpIHtcbiAgICB2YXIgZm91bmRJbnRQb2ludCA9IGZhbHNlO1xuICAgIHZhciBmb3VuZEV4dFBvaW50ID0gZmFsc2U7XG4gICAgdmFyIHBvaW50TGVuZ3RoID0gbXVsdGlQb2ludC5jb29yZGluYXRlcy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgcG9pbnRMZW5ndGggJiYgIWZvdW5kSW50UG9pbnQgJiYgIWZvdW5kRXh0UG9pbnQpIHtcbiAgICAgICAgZm9yICh2YXIgaTIgPSAwOyBpMiA8IGxpbmVTdHJpbmcuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTsgaTIrKykge1xuICAgICAgICAgICAgdmFyIGluY0VuZFZlcnRpY2VzID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpMiA9PT0gMCB8fCBpMiA9PT0gbGluZVN0cmluZy5jb29yZGluYXRlcy5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgICAgICAgaW5jRW5kVmVydGljZXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1BvaW50T25MaW5lU2VnbWVudChsaW5lU3RyaW5nLmNvb3JkaW5hdGVzW2kyXSwgbGluZVN0cmluZy5jb29yZGluYXRlc1tpMiArIDFdLCBtdWx0aVBvaW50LmNvb3JkaW5hdGVzW2ldLCBpbmNFbmRWZXJ0aWNlcykpIHtcbiAgICAgICAgICAgICAgICBmb3VuZEludFBvaW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm91bmRFeHRQb2ludCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmRJbnRQb2ludCAmJiBmb3VuZEV4dFBvaW50O1xufVxuXG5mdW5jdGlvbiBkb0xpbmVTdHJpbmdzQ3Jvc3MobGluZVN0cmluZzEsIGxpbmVTdHJpbmcyKSB7XG4gICAgdmFyIGRvTGluZXNJbnRlcnNlY3QgPSBsaW5lSW50ZXJzZWN0KGxpbmVTdHJpbmcxLCBsaW5lU3RyaW5nMik7XG4gICAgaWYgKGRvTGluZXNJbnRlcnNlY3QuZmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVTdHJpbmcxLmNvb3JkaW5hdGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaTIgPSAwOyBpMiA8IGxpbmVTdHJpbmcyLmNvb3JkaW5hdGVzLmxlbmd0aCAtIDE7IGkyKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5jRW5kVmVydGljZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChpMiA9PT0gMCB8fCBpMiA9PT0gbGluZVN0cmluZzIuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMikge1xuICAgICAgICAgICAgICAgICAgICBpbmNFbmRWZXJ0aWNlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNQb2ludE9uTGluZVNlZ21lbnQobGluZVN0cmluZzEuY29vcmRpbmF0ZXNbaV0sIGxpbmVTdHJpbmcxLmNvb3JkaW5hdGVzW2kgKyAxXSwgbGluZVN0cmluZzIuY29vcmRpbmF0ZXNbaTJdLCBpbmNFbmRWZXJ0aWNlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZG9MaW5lU3RyaW5nQW5kUG9seWdvbkNyb3NzKGxpbmVTdHJpbmcsIHBvbHlnb24pIHtcbiAgICB2YXIgZG9MaW5lc0ludGVyc2VjdCA9IGxpbmVJbnRlcnNlY3QobGluZVN0cmluZywgcG9seVRvTGluZXN0cmluZyhwb2x5Z29uKSk7XG4gICAgaWYgKGRvTGluZXNJbnRlcnNlY3QuZmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1BvaW50SW5Qb2x5KHBvbHlnb24sIHBvaW50KSB7XG4gICAgcmV0dXJuIGluc2lkZShwb2ludCwgcG9seWdvbik7XG59XG5cbmZ1bmN0aW9uIGRvZXNNdWx0aVBvaW50Q3Jvc3NQb2x5KG11bHRpUG9pbnQsIHBvbHlnb24pIHtcbiAgICB2YXIgZm91bmRJbnRQb2ludCA9IGZhbHNlO1xuICAgIHZhciBmb3VuZEV4dFBvaW50ID0gZmFsc2U7XG4gICAgdmFyIHBvaW50TGVuZ3RoID0gbXVsdGlQb2ludC5jb29yZGluYXRlc1swXS5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgcG9pbnRMZW5ndGggJiYgZm91bmRJbnRQb2ludCAmJiBmb3VuZEV4dFBvaW50KSB7XG4gICAgICAgIGlmIChpc1BvaW50SW5Qb2x5KHBvbHlnb24sIGhlbHBlcnMucG9pbnQobXVsdGlQb2ludC5jb29yZGluYXRlc1swXVtpXSksIHRydWUpKSB7XG4gICAgICAgICAgICBmb3VuZEludFBvaW50ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvdW5kRXh0UG9pbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmRFeHRQb2ludCAmJiBmb3VuZEV4dFBvaW50O1xufVxuXG4vKipcbiAqIElzIGEgcG9pbnQgb24gYSBsaW5lIHNlZ21lbnRcbiAqIE9ubHkgdGFrZXMgaW50byBhY2NvdW50IG91dGVyIHJpbmdzXG4gKiBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDgzMzgyMy8xOTc5MDg1XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGxpbmVTZWdtZW50U3RhcnQgY29vcmQgcGFpciBvZiBzdGFydCBvZiBsaW5lXG4gKiBAcGFyYW0ge0FycmF5fSBsaW5lU2VnbWVudEVuZCBjb29yZCBwYWlyIG9mIGVuZCBvZiBsaW5lXG4gKiBAcGFyYW0ge0FycmF5fSBwb2ludCBjb29yZCBwYWlyIG9mIHBvaW50IHRvIGNoZWNrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY0VuZCB3aGV0aGVyIHRoZSBwb2ludCBpcyBhbGxvd2VkIHRvIGZhbGwgb24gdGhlIGxpbmUgZW5kc1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUvZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQb2ludE9uTGluZVNlZ21lbnQobGluZVNlZ21lbnRTdGFydCwgbGluZVNlZ21lbnRFbmQsIHBvaW50LCBpbmNFbmQpIHtcbiAgICB2YXIgZHhjID0gcG9pbnRbMF0gLSBsaW5lU2VnbWVudFN0YXJ0WzBdO1xuICAgIHZhciBkeWMgPSBwb2ludFsxXSAtIGxpbmVTZWdtZW50U3RhcnRbMV07XG4gICAgdmFyIGR4bCA9IGxpbmVTZWdtZW50RW5kWzBdIC0gbGluZVNlZ21lbnRTdGFydFswXTtcbiAgICB2YXIgZHlsID0gbGluZVNlZ21lbnRFbmRbMV0gLSBsaW5lU2VnbWVudFN0YXJ0WzFdO1xuICAgIHZhciBjcm9zcyA9IGR4YyAqIGR5bCAtIGR5YyAqIGR4bDtcbiAgICBpZiAoY3Jvc3MgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaW5jRW5kKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhkeGwpID49IE1hdGguYWJzKGR5bCkpIHtcbiAgICAgICAgICAgIHJldHVybiBkeGwgPiAwID8gbGluZVNlZ21lbnRTdGFydFswXSA8PSBwb2ludFswXSAmJiBwb2ludFswXSA8PSBsaW5lU2VnbWVudEVuZFswXSA6IGxpbmVTZWdtZW50RW5kWzBdIDw9IHBvaW50WzBdICYmIHBvaW50WzBdIDw9IGxpbmVTZWdtZW50U3RhcnRbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGR5bCA+IDAgPyBsaW5lU2VnbWVudFN0YXJ0WzFdIDw9IHBvaW50WzFdICYmIHBvaW50WzFdIDw9IGxpbmVTZWdtZW50RW5kWzFdIDogbGluZVNlZ21lbnRFbmRbMV0gPD0gcG9pbnRbMV0gJiYgcG9pbnRbMV0gPD0gbGluZVNlZ21lbnRTdGFydFsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZHhsKSA+PSBNYXRoLmFicyhkeWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gZHhsID4gMCA/IGxpbmVTZWdtZW50U3RhcnRbMF0gPCBwb2ludFswXSAmJiBwb2ludFswXSA8IGxpbmVTZWdtZW50RW5kWzBdIDogbGluZVNlZ21lbnRFbmRbMF0gPCBwb2ludFswXSAmJiBwb2ludFswXSA8IGxpbmVTZWdtZW50U3RhcnRbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGR5bCA+IDAgPyBsaW5lU2VnbWVudFN0YXJ0WzFdIDwgcG9pbnRbMV0gJiYgcG9pbnRbMV0gPCBsaW5lU2VnbWVudEVuZFsxXSA6IGxpbmVTZWdtZW50RW5kWzFdIDwgcG9pbnRbMV0gJiYgcG9pbnRbMV0gPCBsaW5lU2VnbWVudFN0YXJ0WzFdO1xuICAgIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2Jvb2xlYW4tY3Jvc3Nlcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKTtcbnZhciBnZXRDb29yZHMgPSBpbnZhcmlhbnQuZ2V0Q29vcmRzO1xuXG4vKipcbiAqIFRha2VzIGEgcmluZyBhbmQgcmV0dXJuIHRydWUgb3IgZmFsc2Ugd2hldGhlciBvciBub3QgdGhlIHJpbmcgaXMgY2xvY2t3aXNlIG9yIGNvdW50ZXItY2xvY2t3aXNlLlxuICpcbiAqIEBuYW1lIGJvb2xlYW5DbG9ja3dpc2VcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nPnxBcnJheTxBcnJheTxudW1iZXI+Pn0gbGluZSB0byBiZSBldmFsdWF0ZWRcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlL2ZhbHNlXG4gKiBAZXhhbXBsZVxuICogdmFyIGNsb2Nrd2lzZVJpbmcgPSB0dXJmLmxpbmVTdHJpbmcoW1swLDBdLFsxLDFdLFsxLDBdLFswLDBdXSk7XG4gKiB2YXIgY291bnRlckNsb2Nrd2lzZVJpbmcgPSB0dXJmLmxpbmVTdHJpbmcoW1swLDBdLFsxLDBdLFsxLDFdLFswLDBdXSk7XG4gKlxuICogdHVyZi5ib29sZWFuQ2xvY2t3aXNlKGNsb2Nrd2lzZVJpbmcpXG4gKiAvLz10cnVlXG4gKiB0dXJmLmJvb2xlYW5DbG9ja3dpc2UoY291bnRlckNsb2Nrd2lzZVJpbmcpXG4gKiAvLz1mYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICghbGluZSkgdGhyb3cgbmV3IEVycm9yKCdsaW5lIGlzIHJlcXVpcmVkJyk7XG4gICAgdmFyIHR5cGUgPSAobGluZS5nZW9tZXRyeSkgPyBsaW5lLmdlb21ldHJ5LnR5cGUgOiBsaW5lLnR5cGU7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGxpbmUpICYmIHR5cGUgIT09ICdMaW5lU3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCdnZW9tZXRyeSBtdXN0IGJlIGEgTGluZVN0cmluZycpO1xuXG4gICAgdmFyIHJpbmcgPSBnZXRDb29yZHMobGluZSk7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciBwcmV2LCBjdXI7XG4gICAgd2hpbGUgKGkgPCByaW5nLmxlbmd0aCkge1xuICAgICAgICBwcmV2ID0gY3VyIHx8IHJpbmdbMF07XG4gICAgICAgIGN1ciA9IHJpbmdbaV07XG4gICAgICAgIHN1bSArPSAoKGN1clswXSAtIHByZXZbMF0pICogKGN1clsxXSArIHByZXZbMV0pKTtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gc3VtID4gMDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHVyZi9ib29sZWFuLWNsb2Nrd2lzZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBHZW9qc29uRXF1YWxpdHkgPSByZXF1aXJlKCdnZW9qc29uLWVxdWFsaXR5Jyk7XG52YXIgY2xlYW5Db29yZHMgPSByZXF1aXJlKCdAdHVyZi9jbGVhbi1jb29yZHMnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdAdHVyZi9pbnZhcmlhbnQnKTtcbnZhciBnZXRHZW9tVHlwZSA9IGludmFyaWFudC5nZXRHZW9tVHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0d28gZ2VvbWV0cmllcyBvZiB0aGUgc2FtZSB0eXBlIGhhdmUgaWRlbnRpY2FsIFgsWSBjb29yZGluYXRlIHZhbHVlcy5cbiAqIFNlZSBodHRwOi8vZWRuZG9jLmVzcmkuY29tL2FyY3NkZS85LjAvZ2VuZXJhbF90b3BpY3MvdW5kZXJzdGFuZF9zcGF0aWFsX3JlbGF0aW9ucy5odG1cbiAqXG4gKiBAbmFtZSBib29sZWFuRXF1YWxcbiAqIEBwYXJhbSB7R2VvbWV0cnl8RmVhdHVyZX0gZmVhdHVyZTEgR2VvSlNPTiBpbnB1dFxuICogQHBhcmFtIHtHZW9tZXRyeXxGZWF0dXJlfSBmZWF0dXJlMiBHZW9KU09OIGlucHV0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZVxuICogQGV4YW1wbGVcbiAqIHZhciBwdDEgPSB0dXJmLnBvaW50KFswLCAwXSk7XG4gKiB2YXIgcHQyID0gdHVyZi5wb2ludChbMCwgMF0pO1xuICogdmFyIHB0MyA9IHR1cmYucG9pbnQoWzEsIDFdKTtcbiAqXG4gKiB0dXJmLmJvb2xlYW5FcXVhbChwdDEsIHB0Mik7XG4gKiAvLz0gdHJ1ZVxuICogdHVyZi5ib29sZWFuRXF1YWwocHQyLCBwdDMpO1xuICogLy89IGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZlYXR1cmUxLCBmZWF0dXJlMikge1xuICAgIC8vIHZhbGlkYXRpb25cbiAgICBpZiAoIWZlYXR1cmUxKSB0aHJvdyBuZXcgRXJyb3IoJ2ZlYXR1cmUxIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCFmZWF0dXJlMikgdGhyb3cgbmV3IEVycm9yKCdmZWF0dXJlMiBpcyByZXF1aXJlZCcpO1xuICAgIHZhciB0eXBlMSA9IGdldEdlb21UeXBlKGZlYXR1cmUxKTtcbiAgICB2YXIgdHlwZTIgPSBnZXRHZW9tVHlwZShmZWF0dXJlMik7XG4gICAgaWYgKHR5cGUxICE9PSB0eXBlMikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGVxdWFsaXR5ID0gbmV3IEdlb2pzb25FcXVhbGl0eSh7cHJlY2lzaW9uOiA2fSk7XG4gICAgcmV0dXJuIGVxdWFsaXR5LmNvbXBhcmUoY2xlYW5Db29yZHMoZmVhdHVyZTEpLCBjbGVhbkNvb3JkcyhmZWF0dXJlMikpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0dXJmL2Jvb2xlYW4tZXF1YWwvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvL2luZGV4LmpzXG52YXIgZGVlcEVxdWFsID0gcmVxdWlyZSgnZGVlcC1lcXVhbCcpO1xuXG52YXIgRXF1YWxpdHkgPSBmdW5jdGlvbihvcHQpIHtcbiAgdGhpcy5wcmVjaXNpb24gPSBvcHQgJiYgb3B0LnByZWNpc2lvbiA/IG9wdC5wcmVjaXNpb24gOiAxNztcbiAgdGhpcy5kaXJlY3Rpb24gPSBvcHQgJiYgb3B0LmRpcmVjdGlvbiA/IG9wdC5kaXJlY3Rpb24gOiBmYWxzZTtcbiAgdGhpcy5wc2V1ZG9Ob2RlID0gb3B0ICYmIG9wdC5wc2V1ZG9Ob2RlID8gb3B0LnBzZXVkb05vZGUgOiBmYWxzZTtcbiAgdGhpcy5vYmplY3RDb21wYXJhdG9yID0gb3B0ICYmIG9wdC5vYmplY3RDb21wYXJhdG9yID8gb3B0Lm9iamVjdENvbXBhcmF0b3IgOiBvYmplY3RDb21wYXJhdG9yO1xufTtcblxuRXF1YWxpdHkucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbihnMSxnMikge1xuICBpZiAoZzEudHlwZSAhPT0gZzIudHlwZSB8fCAhc2FtZUxlbmd0aChnMSxnMikpIHJldHVybiBmYWxzZTtcblxuICBzd2l0Y2goZzEudHlwZSkge1xuICBjYXNlICdQb2ludCc6XG4gICAgcmV0dXJuIHRoaXMuY29tcGFyZUNvb3JkKGcxLmNvb3JkaW5hdGVzLCBnMi5jb29yZGluYXRlcyk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgIHJldHVybiB0aGlzLmNvbXBhcmVMaW5lKGcxLmNvb3JkaW5hdGVzLCBnMi5jb29yZGluYXRlcywwLGZhbHNlKTtcbiAgICBicmVhaztcbiAgY2FzZSAnUG9seWdvbic6XG4gICAgcmV0dXJuIHRoaXMuY29tcGFyZVBvbHlnb24oZzEsZzIpO1xuICAgIGJyZWFrO1xuICBjYXNlICdGZWF0dXJlJzpcbiAgICByZXR1cm4gdGhpcy5jb21wYXJlRmVhdHVyZShnMSwgZzIpO1xuICBkZWZhdWx0OlxuICAgIGlmIChnMS50eXBlLmluZGV4T2YoJ011bHRpJykgPT09IDApIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIHZhciBnMXMgPSBleHBsb2RlKGcxKTtcbiAgICAgIHZhciBnMnMgPSBleHBsb2RlKGcyKTtcbiAgICAgIHJldHVybiBnMXMuZXZlcnkoZnVuY3Rpb24oZzFwYXJ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvbWUoZnVuY3Rpb24oZzJwYXJ0KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29tcGFyZShnMXBhcnQsZzJwYXJ0KTtcbiAgICAgICAgfSk7XG4gICAgICB9LGcycyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIGV4cGxvZGUoZykge1xuICByZXR1cm4gZy5jb29yZGluYXRlcy5tYXAoZnVuY3Rpb24ocGFydCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBnLnR5cGUucmVwbGFjZSgnTXVsdGknLCAnJyksXG4gICAgICBjb29yZGluYXRlczogcGFydH1cbiAgfSk7XG59XG4vL2NvbXBhcmUgbGVuZ3RoIG9mIGNvb3JkaW5hdGVzL2FycmF5XG5mdW5jdGlvbiBzYW1lTGVuZ3RoKGcxLGcyKSB7XG4gICByZXR1cm4gZzEuaGFzT3duUHJvcGVydHkoJ2Nvb3JkaW5hdGVzJykgP1xuICAgIGcxLmNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gZzIuY29vcmRpbmF0ZXMubGVuZ3RoXG4gICAgOiBnMS5sZW5ndGggPT09IGcyLmxlbmd0aDtcbn1cblxuLy8gY29tcGFyZSB0aGUgdHdvIGNvb3JkaW5hdGVzIFt4LHldXG5FcXVhbGl0eS5wcm90b3R5cGUuY29tcGFyZUNvb3JkID0gZnVuY3Rpb24oYzEsYzIpIHtcbiAgaWYgKGMxLmxlbmd0aCAhPT0gYzIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaT0wOyBpIDwgYzEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYzFbaV0udG9GaXhlZCh0aGlzLnByZWNpc2lvbikgIT09IGMyW2ldLnRvRml4ZWQodGhpcy5wcmVjaXNpb24pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuRXF1YWxpdHkucHJvdG90eXBlLmNvbXBhcmVMaW5lID0gZnVuY3Rpb24ocGF0aDEscGF0aDIsaW5kLGlzUG9seSkge1xuICBpZiAoIXNhbWVMZW5ndGgocGF0aDEscGF0aDIpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwMSA9IHRoaXMucHNldWRvTm9kZSA/IHBhdGgxIDogdGhpcy5yZW1vdmVQc2V1ZG8ocGF0aDEpO1xuICB2YXIgcDIgPSB0aGlzLnBzZXVkb05vZGUgPyBwYXRoMiA6IHRoaXMucmVtb3ZlUHNldWRvKHBhdGgyKTtcbiAgaWYgKGlzUG9seSAmJiAhdGhpcy5jb21wYXJlQ29vcmQocDFbMF0scDJbMF0pKSB7XG4gICAgLy8gZml4IHN0YXJ0IGluZGV4IG9mIGJvdGggdG8gc2FtZSBwb2ludFxuICAgIHAyID0gdGhpcy5maXhTdGFydEluZGV4KHAyLHAxKTtcbiAgICBpZighcDIpIHJldHVybjtcbiAgfVxuICAvLyBmb3IgbGluZXN0cmluZyBpbmQgPTAgYW5kIGZvciBwb2x5Z29uIGluZCA9MVxuICB2YXIgc2FtZURpcmVjdGlvbiA9IHRoaXMuY29tcGFyZUNvb3JkKHAxW2luZF0scDJbaW5kXSk7XG4gIGlmICh0aGlzLmRpcmVjdGlvbiB8fCBzYW1lRGlyZWN0aW9uXG4gICkge1xuICAgIHJldHVybiB0aGlzLmNvbXBhcmVQYXRoKHAxLCBwMik7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY29tcGFyZUNvb3JkKHAxW2luZF0scDJbcDIubGVuZ3RoIC0gKDEraW5kKV0pXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wYXJlUGF0aChwMS5zbGljZSgpLnJldmVyc2UoKSwgcDIpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5FcXVhbGl0eS5wcm90b3R5cGUuZml4U3RhcnRJbmRleCA9IGZ1bmN0aW9uKHNvdXJjZVBhdGgsdGFyZ2V0UGF0aCkge1xuICAvL21ha2Ugc291cmNlUGF0aCBmaXJzdCBwb2ludCBzYW1lIGFzIG9mIHRhcmdldFBhdGhcbiAgdmFyIGNvcnJlY3RQYXRoLGluZCA9IC0xO1xuICBmb3IgKHZhciBpPTA7IGk8IHNvdXJjZVBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBpZih0aGlzLmNvbXBhcmVDb29yZChzb3VyY2VQYXRoW2ldLHRhcmdldFBhdGhbMF0pKSB7XG4gICAgICBpbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChpbmQgPj0gMCkge1xuICAgIGNvcnJlY3RQYXRoID0gW10uY29uY2F0KFxuICAgICAgc291cmNlUGF0aC5zbGljZShpbmQsc291cmNlUGF0aC5sZW5ndGgpLFxuICAgICAgc291cmNlUGF0aC5zbGljZSgxLGluZCsxKSk7XG4gIH1cbiAgcmV0dXJuIGNvcnJlY3RQYXRoO1xufTtcbkVxdWFsaXR5LnByb3RvdHlwZS5jb21wYXJlUGF0aCA9IGZ1bmN0aW9uIChwMSxwMikge1xuICB2YXIgY29udCA9IHRoaXM7XG4gIHJldHVybiBwMS5ldmVyeShmdW5jdGlvbihjLGkpIHtcbiAgICByZXR1cm4gY29udC5jb21wYXJlQ29vcmQoYyx0aGlzW2ldKTtcbiAgfSxwMik7XG59O1xuXG5FcXVhbGl0eS5wcm90b3R5cGUuY29tcGFyZVBvbHlnb24gPSBmdW5jdGlvbihnMSxnMikge1xuICBpZiAodGhpcy5jb21wYXJlTGluZShnMS5jb29yZGluYXRlc1swXSxnMi5jb29yZGluYXRlc1swXSwxLHRydWUpKSB7XG4gICAgdmFyIGhvbGVzMSA9IGcxLmNvb3JkaW5hdGVzLnNsaWNlKDEsZzEuY29vcmRpbmF0ZXMubGVuZ3RoKTtcbiAgICB2YXIgaG9sZXMyID0gZzIuY29vcmRpbmF0ZXMuc2xpY2UoMSxnMi5jb29yZGluYXRlcy5sZW5ndGgpO1xuICAgIHZhciBjb250ID0gdGhpcztcbiAgICByZXR1cm4gaG9sZXMxLmV2ZXJ5KGZ1bmN0aW9uKGgxKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb21lKGZ1bmN0aW9uKGgyKSB7XG4gICAgICAgIHJldHVybiBjb250LmNvbXBhcmVMaW5lKGgxLGgyLDEsdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9LGhvbGVzMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5FcXVhbGl0eS5wcm90b3R5cGUuY29tcGFyZUZlYXR1cmUgPSBmdW5jdGlvbihnMSxnMikge1xuICBpZiAoXG4gICAgZzEuaWQgIT09IGcyLmlkIHx8XG4gICAgIXRoaXMub2JqZWN0Q29tcGFyYXRvcihnMS5wcm9wZXJ0aWVzLCBnMi5wcm9wZXJ0aWVzKSB8fFxuICAgICF0aGlzLmNvbXBhcmVCQm94KGcxLGcyKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY29tcGFyZShnMS5nZW9tZXRyeSwgZzIuZ2VvbWV0cnkpO1xufTtcblxuRXF1YWxpdHkucHJvdG90eXBlLmNvbXBhcmVCQm94ID0gZnVuY3Rpb24oZzEsZzIpIHtcbiAgaWYgKFxuICAgICghZzEuYmJveCAmJiAhZzIuYmJveCkgfHwgXG4gICAgKFxuICAgICAgZzEuYmJveCAmJiBnMi5iYm94ICYmXG4gICAgICB0aGlzLmNvbXBhcmVDb29yZChnMS5iYm94LCBnMi5iYm94KVxuICAgIClcbiAgKSAge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5FcXVhbGl0eS5wcm90b3R5cGUucmVtb3ZlUHNldWRvID0gZnVuY3Rpb24ocGF0aCkge1xuICAvL1RPRE8gdG8gYmUgaW1wbGVtZW50XG4gIHJldHVybiBwYXRoO1xufTtcblxuZnVuY3Rpb24gb2JqZWN0Q29tcGFyYXRvcihvYmoxLCBvYmoyKSB7XG4gIHJldHVybiBkZWVwRXF1YWwob2JqMSwgb2JqMiwge3N0cmljdDogdHJ1ZX0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVxdWFsaXR5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2VvanNvbi1lcXVhbGl0eS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogUmV0dXJucyBhIGNsb25lZCBjb3B5IG9mIHRoZSBwYXNzZWQgR2VvSlNPTiBPYmplY3QuXG4gKiBCeSBkZWZhdWx0IGl0IGR1cGxpY2F0ZXMgb25seSB0aGUgc3RhbmRhcmQgR2VvSlNPTiBmaWVsZHMgb2YgdGhlIG9iamVjdDsgaWYgYGNsb25lQWxsYCBpcyBzZXQgdG8gYHRydWVgIGFsbFxuICogZmllbGRzIG9mIHRoZSBPYmplY3QsIHRodXMgaW5jbHVkaW5nICdGb3JlaWduIE1lbWJlcnMnLCB3aWxsIGJlIGNsb25lZCAoMy0yMHggc2xvd2VyKS5cbiAqXG4gKiBAbmFtZSBjbG9uZVxuICogQHBhcmFtIHtHZW9KU09OfSBnZW9qc29uIEdlb0pTT04gT2JqZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtjbG9uZUFsbD1mYWxzZV0gY2xvbmVzIGVudGlyZSBHZW9KU09OIG9iamVjdCwgdXNpbmcgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnZW9qc29uKSlcbiAqIEByZXR1cm5zIHtHZW9KU09OfSBjbG9uZWQgR2VvSlNPTiBPYmplY3RcbiAqIEBleGFtcGxlXG4gKiB2YXIgbGluZSA9IHR1cmYubGluZVN0cmluZyhbWy03NCwgNDBdLCBbLTc4LCA0Ml0sIFstODIsIDM1XV0pO1xuICpcbiAqIHZhciBsaW5lQ2xvbmVkID0gdHVyZi5jbG9uZShsaW5lKTtcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ2VvanNvbiwgY2xvbmVBbGwpIHtcbiAgICBpZiAoIWdlb2pzb24pIHRocm93IG5ldyBFcnJvcignZ2VvanNvbiBpcyByZXF1aXJlZCcpO1xuICAgIGlmIChjbG9uZUFsbCAmJiB0eXBlb2YgY2xvbmVBbGwgIT09ICdib29sZWFuJykgdGhyb3cgbmV3IEVycm9yKCdjbG9uZUFsbCBtdXN0IGJlIGEgQm9vbGVhbicpO1xuXG4gICAgLy8gQ2xvbmUgZW50aXJlIG9iamVjdCAoMy0yMHggc2xvd2VyKVxuICAgIGlmIChjbG9uZUFsbCkgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZ2VvanNvbikpO1xuXG4gICAgLy8gQ2xvbmVzIG9ubHkgR2VvSlNPTiBmaWVsZHNcbiAgICByZXR1cm4gY2xvbmUoZ2VvanNvbik7XG59O1xuXG4vKipcbiAqIENsb25lXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7R2VvSlNPTn0gZ2VvanNvbiBHZW9KU09OIEZlYXR1cmUgb3IgR2VvbWV0cnlcbiAqIEByZXR1cm5zIHtHZW9KU09OfSBjbG9uZWQgRmVhdHVyZVxuICovXG5mdW5jdGlvbiBjbG9uZShnZW9qc29uKSB7XG4gICAgLy8gR2VvbWV0cnkgT2JqZWN0XG4gICAgaWYgKGdlb2pzb24uY29vcmRpbmF0ZXMpIHJldHVybiBjbG9uZUdlb21ldHJ5KGdlb2pzb24pO1xuXG4gICAgLy8gRmVhdHVyZVxuICAgIGlmIChnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlJykgcmV0dXJuIGNsb25lRmVhdHVyZShnZW9qc29uKTtcblxuICAgIC8vIEZlYXR1cmUgQ29sbGVjdGlvblxuICAgIGlmIChnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHJldHVybiBjbG9uZUZlYXR1cmVDb2xsZWN0aW9uKGdlb2pzb24pO1xuXG4gICAgLy8gR2VvbWV0cnkgQ29sbGVjdGlvblxuICAgIGlmIChnZW9qc29uLnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSByZXR1cm4gY2xvbmVHZW9tZXRyeShnZW9qc29uKTtcbn1cblxuLyoqXG4gKiBDbG9uZSBGZWF0dXJlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZTxhbnk+fSBmZWF0dXJlIEdlb0pTT04gRmVhdHVyZVxuICogQHJldHVybnMge0ZlYXR1cmU8YW55Pn0gY2xvbmVkIEZlYXR1cmVcbiAqL1xuZnVuY3Rpb24gY2xvbmVGZWF0dXJlKGZlYXR1cmUpIHtcbiAgICB2YXIgY2xvbmVkID0ge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIHByb3BlcnRpZXM6IGZlYXR1cmUucHJvcGVydGllcyB8fCB7fSxcbiAgICAgICAgZ2VvbWV0cnk6IGNsb25lR2VvbWV0cnkoZmVhdHVyZS5nZW9tZXRyeSlcbiAgICB9O1xuICAgIGlmIChmZWF0dXJlLmlkKSBjbG9uZWQuaWQgPSBmZWF0dXJlLmlkO1xuICAgIGlmIChmZWF0dXJlLmJib3gpIGNsb25lZC5iYm94ID0gZmVhdHVyZS5iYm94O1xuICAgIHJldHVybiBjbG9uZWQ7XG59XG5cbi8qKlxuICogQ2xvbmUgRmVhdHVyZSBDb2xsZWN0aW9uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248YW55Pn0gZ2VvanNvbiBHZW9KU09OIEZlYXR1cmUgQ29sbGVjdGlvblxuICogQHJldHVybnMge0ZlYXR1cmVDb2xsZWN0aW9uPGFueT59IGNsb25lZCBGZWF0dXJlIENvbGxlY3Rpb25cbiAqL1xuZnVuY3Rpb24gY2xvbmVGZWF0dXJlQ29sbGVjdGlvbihnZW9qc29uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IGdlb2pzb24uZmVhdHVyZXMubWFwKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVGZWF0dXJlKGZlYXR1cmUpO1xuICAgICAgICB9KVxuICAgIH07XG59XG5cbi8qKlxuICogQ2xvbmUgR2VvbWV0cnlcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtHZW9tZXRyeTxhbnk+fSBnZW9tZXRyeSBHZW9KU09OIEdlb21ldHJ5XG4gKiBAcmV0dXJucyB7R2VvbWV0cnk8YW55Pn0gY2xvbmVkIEdlb21ldHJ5XG4gKi9cbmZ1bmN0aW9uIGNsb25lR2VvbWV0cnkoZ2VvbWV0cnkpIHtcbiAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdHZW9tZXRyeUNvbGxlY3Rpb24nLFxuICAgICAgICAgICAgZ2VvbWV0cmllczogZ2VvbWV0cnkuZ2VvbWV0cmllcy5tYXAoZnVuY3Rpb24gKGdlb20pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVHZW9tZXRyeShnZW9tKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGdlb21ldHJ5LnR5cGUsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBkZWVwU2xpY2UoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpXG4gICAgfTtcbn1cblxuLyoqXG4gKiBEZWVwIFNsaWNlIGNvb3JkaW5hdGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Q29vcmRpbmF0ZXN9IGNvb3JkcyBDb29yZGluYXRlc1xuICogQHJldHVybnMge0Nvb3JkaW5hdGVzfSBhbGwgY29vcmRpbmF0ZXMgc2xpY2VkXG4gKi9cbmZ1bmN0aW9uIGRlZXBTbGljZShjb29yZHMpIHtcbiAgICBpZiAodHlwZW9mIGNvb3Jkc1swXSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGNvb3Jkcy5zbGljZSgpOyB9XG4gICAgcmV0dXJuIGNvb3Jkcy5tYXAoZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgICAgIHJldHVybiBkZWVwU2xpY2UoY29vcmQpO1xuICAgIH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR1cmYvY2xvbmUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9