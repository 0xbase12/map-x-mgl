jed = {} ;

jed.editors = {};
jed.helper = {};
jed.extend = {};
jed.extend.position = {};
jed.extend.texteditor = {};

jed.helper.render = function(id, schema, startVal, options ) {

  el = document.getElementById(id);
  if(!el) throw("jed element " + id + "not found");

  var opt_final = {};

  if(!options){
    options = {};
  }

  // opt can't be changed after instantiation. 
  var opt = {
    ajax : true,
    theme : 'bootstrap3',
    iconlib : "bootstrap3",
    disable_collapse : false,
    disable_properties : true,
    disable_edit_json : false,
    required_by_default : true,
    show_errors : "always",
    no_additional_properties : true,
    schema : schema,
    startval : startVal
  };


  JSONEditor.plugins.selectize.enable = false;

  /**
  * Set a resolver for the map position format
  */
  JSONEditor.defaults.resolvers.unshift(function(schema) {
    if(schema.type === "object" && schema.format === "position") {
      return "position";
    }
  });
  JSONEditor.defaults.editors.position = JSONEditor.defaults.editors.object.extend({
    layoutEditors : jed.extend.position.layoutEditors
  });
  
  /**
  * Set resolver for texteditor
  */
  JSONEditor.defaults.resolvers.unshift(function(schema) {
    if(schema.type === "texteditor") {
      return "texteditor";
    }
  });

  JSONEditor.defaults.editors.texteditor = jed.extend.texteditor;


 /* end*/


  for (var v1 in opt) { opt_final[v1] = opt[v1]; }
  for (var v2 in options) { opt_final[v2] = options[v2]; }

  if(jed.editors[id]){
    jed.editors[id].destroy();
  }

  if(jed.theme){
    JSONEditor.defaults.themes.bootstrap3 = JSONEditor.AbstractTheme.extend(jed.theme);
  }

  var editor = new JSONEditor(el,opt_final);

  editor.on('ready',function() {
    var id = editor.element.id;
    Shiny.onInputChange(id + '_ready', (new Date()));     
  });


  //editor.on('change',jed.helper.debounce(function() {
  editor.on('change',function() {
    var id = editor.element.id;

    var valid = {
      msg : editor.validate(),
      time : (new Date())
    };

    var values = {
      msg : editor.getValue(),
      time : (new Date())
    };

    Shiny.onInputChange(id + '_values', values);     
    Shiny.onInputChange(id + '_issues', valid);     

    /**
    * Add jed-error class to all ancestor of issue's element
    */
    elEditor = editor.element;
    elsJedError = elEditor.querySelectorAll(".jed-error");

    for(var i = 0; i < elsJedError.length ; i++){
      elsJedError[i].classList.remove("jed-error");
    }

    var issueLength =  valid.msg.length;

    if(issueLength > 0){
      for(var j = 0 ; j < issueLength; j++){
        var p = valid.msg[j].path.split(".");
        var pL = p.length;
        for(var k =0; k < pL ; k++){
          var elError = elEditor
            .querySelector("[data-schemapath='"+p.join(".")+"']");
           
          if(elError){
            elError
              .classList
              .add("jed-error");
          }
          p.pop()
        }
      }
    }

  });
  //},50));

  jed.editors[id] = editor; 

}; 
/** Update jed editor
 * @param id {string} id of the editor
 * @param val {object} object to populate editor, according to schema
 */
jed.helper.update = function(id, val) {
  var jed = jed.editors[[id]];
  if(jed){
    jed.setValue(val);
  }
};
// shiny binding
$('document').ready(function() {
  // add auto layer generated by schema
  Shiny.addCustomMessageHandler('jedInit', function(e) {
    jed.helper.render(e.id,e.schema,e.startVal,e.options);
  });
  // update editor with given values
  Shiny.addCustomMessageHandler('jedUpdate', function(e) {
    jed.helper.update(e.id,e.val);
  });
  // change 
  Shiny.addCustomMessageHandler('jedUpdate', function(e) {
    jed.helper.update(e.id,e.val);
  });
});





/**
* 
*/

jed.extend.texteditor =  JSONEditor.AbstractEditor.extend({
  setValue: function(value,initial,from_template) {
    var self = this;
    
    if(this.template && !from_template) {
      return;
    }
    
    if(value === null || typeof value === 'undefined') value = "";
    else if(typeof value === "object") value = JSON.stringify(value);
    else if(typeof value !== "string") value = ""+value;
    
    if(value === this.serialized) return;

    // Sanitize value before setting it
    var sanitized = this.sanitize(value);

    if(this.input.value === sanitized) {
      return;
    }

    this.input.value = sanitized;
    
    // If using SCEditor, update the WYSIWYG
    if(this.sceditor_instance) {
      this.sceditor_instance.val(sanitized);
    }
    else if(this.epiceditor) {
      this.epiceditor.importFile(null,sanitized);
    }
    else if(this.ace_editor) {
      this.ace_editor.setValue(sanitized);
    }
    
    var changed = from_template || this.getValue() !== value;
    
    this.refreshValue();
    
    if(initial) this.is_dirty = false;
    else if(this.jsoneditor.options.show_errors === "change") this.is_dirty = true;
    
    if(this.adjust_height) this.adjust_height(this.input);

    // Bubble this setValue to parents if the value changed
    this.onChange(changed);
  },
  getNumColumns: function() {
    var min = Math.ceil(Math.max(this.getTitle().length,this.schema.maxLength||0,this.schema.minLength||0)/5);
    var num;
    
    if(this.input_type === 'textarea') num = 6;
    else if(['text','email'].indexOf(this.input_type) >= 0) num = 4;
    else num = 2;
    
    return Math.min(12,Math.max(min,num));
  },
  build: function() {
    var self = this, i;
    if(!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle());
    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);

    this.format = this.schema.format;
    if(!this.format && this.schema.media && this.schema.media.type) {
      this.format = this.schema.media.type.replace(/(^(application|text)\/(x-)?(script\.)?)|(-source$)/g,'');
    }
    if(!this.format && this.options.default_format) {
      this.format = this.options.default_format;
    }
    if(this.options.format) {
      this.format = this.options.format;
    }

    // Specific format
    if(this.format) {
      // Text Area
      if(this.format === 'textarea') {
        this.input_type = 'textarea';
        this.input = this.theme.getTextareaInput();
      }
      // Range Input
      else if(this.format === 'range') {
        this.input_type = 'range';
        var min = this.schema.minimum || 0;
        var max = this.schema.maximum || Math.max(100,min+1);
        var step = 1;
        if(this.schema.multipleOf) {
          if(min%this.schema.multipleOf) min = Math.ceil(min/this.schema.multipleOf)*this.schema.multipleOf;
          if(max%this.schema.multipleOf) max = Math.floor(max/this.schema.multipleOf)*this.schema.multipleOf;
          step = this.schema.multipleOf;
        }

        this.input = this.theme.getRangeInput(min,max,step);
      }
      // Source Code
      else if([
          'actionscript',
          'batchfile',
          'bbcode',
          'c',
          'c++',
          'cpp',
          'coffee',
          'csharp',
          'css',
          'dart',
          'django',
          'ejs',
          'erlang',
          'golang',
          'groovy',
          'handlebars',
          'haskell',
          'haxe',
          'html',
          'ini',
          'jade',
          'java',
          'javascript',
          'json',
          'less',
          'lisp',
          'lua',
          'makefile',
          'markdown',
          'matlab',
          'mysql',
          'objectivec',
          'pascal',
          'perl',
          'pgsql',
          'php',
          'python',
          'r',
          'ruby',
          'sass',
          'scala',
          'scss',
          'smarty',
          'sql',
          'stylus',
          'svg',
          'twig',
          'vbscript',
          'xml',
          'yaml'
        ].indexOf(this.format) >= 0
      ) {
        this.input_type = this.format;
        this.source_code = true;
        
        this.input = this.theme.getTextareaInput();
      }
      // HTML5 Input type
      else {
        this.input_type = this.format;
        this.input = this.theme.getFormInputField(this.input_type);
      }
    }
    // Normal text input
    else {
      this.input_type = 'text';
      this.input = this.theme.getFormInputField(this.input_type);
    }
    
    // minLength, maxLength, and pattern
    if(typeof this.schema.maxLength !== "undefined") this.input.setAttribute('maxlength',this.schema.maxLength);
    if(typeof this.schema.pattern !== "undefined") this.input.setAttribute('pattern',this.schema.pattern);
    else if(typeof this.schema.minLength !== "undefined") this.input.setAttribute('pattern','.{'+this.schema.minLength+',}');

    if(this.options.compact) {
      this.container.className += ' compact';
    }
    else {
      if(this.options.input_width) this.input.style.width = this.options.input_width;
    }

    if(this.schema.readOnly || this.schema.readonly || this.schema.template) {
      this.always_disabled = true;
      this.input.disabled = true;
    }

    this.input
      .addEventListener('change',function(e) {        
        e.preventDefault();
        e.stopPropagation();
        
        // Don't allow changing if this field is a template
        if(self.schema.template) {
          this.value = self.value;
          return;
        }

        var val = this.value;
        
        // sanitize value
        var sanitized = self.sanitize(val);
        if(val !== sanitized) {
          this.value = sanitized;
        }
        
        self.is_dirty = true;

        self.refreshValue();
        self.onChange(true);
      });
      
    if(this.options.input_height) this.input.style.height = this.options.input_height;
    if(this.options.expand_height) {
      this.adjust_height = function(el) {
        if(!el) return;
        var i, ch=el.offsetHeight;
        // Input too short
        if(el.offsetHeight < el.scrollHeight) {
          i=0;
          while(el.offsetHeight < el.scrollHeight+3) {
            if(i>100) break;
            i++;
            ch++;
            el.style.height = ch+'px';
          }
        }
        else {
          i=0;
          while(el.offsetHeight >= el.scrollHeight+3) {
            if(i>100) break;
            i++;
            ch--;
            el.style.height = ch+'px';
          }
          el.style.height = (ch+1)+'px';
        }
      };
      
      this.input.addEventListener('keyup',function(e) {
        self.adjust_height(this);
      });
      this.input.addEventListener('change',function(e) {
        self.adjust_height(this);
      });
      this.adjust_height();
    }

    if(this.format) this.input.setAttribute('data-schemaformat',this.format);

    this.control = this.theme.getFormControl(this.label, this.input, this.description);
    this.container.appendChild(this.control);

    // Any special formatting that needs to happen after the input is added to the dom
    window.requestAnimationFrame(function() {
      // Skip in case the input is only a temporary editor,
      // otherwise, in the case of an ace_editor creation,
      // it will generate an error trying to append it to the missing parentNode
      if(self.input.parentNode) self.afterInputReady();
      if(self.adjust_height) self.adjust_height(self.input);
    });

    // Compile and store the template
    if(this.schema.template) {
      this.template = this.jsoneditor.compileTemplate(this.schema.template, this.template_engine);
      this.refreshValue();
    }
    else {
      this.refreshValue();
    }
  },
  enable: function() {
    if(!this.always_disabled) {
      this.input.disabled = false;
      // TODO: WYSIWYG and Markdown editors
    }
    this._super();
  },
  disable: function() {
    this.input.disabled = true;
    // TODO: WYSIWYG and Markdown editors
    this._super();
  },
  afterInputReady: function() {

    var self = this, options;
 
    // Code editor
      if(!self.options.hidden && window.MediumEditor){

        self.medium_container = document.createElement("div");
        self.medium_container.innerHTML = self.value;

        self.input.parentNode.insertBefore(self.medium_container,self.input);
        self.input.style.display = 'none';
 
        self.medium_editor = new MediumEditor(self.medium_container,{
          buttonLabels:"fontawesome",
    toolbar: {
        buttons: ['h1','h2','h3','bold', 'italic', 'quote', 'anchor','unorderedlist']
    }
        });

        self.medium_editor.subscribe('editableInput', function (event, editable) {
        self.input.value = editable.innerHTML;
        self.refreshValue();
        self.is_dirty = true;
        self.onChange(true);
      });

    }    

    self.theme.afterInputReady(self.input);
  },
  refreshValue: function() {

    this.value = this.input.value;
    if(typeof this.value !== "string") this.value = '';
    this.serialized = this.value;
  },
  destroy: function() {
    // If using SCEditor, destroy the editor instance
    if(this.sceditor_instance) {
      this.sceditor_instance.destroy();
    }
    else if(this.epiceditor) {
      this.epiceditor.unload();
    }
    else if(this.ace_editor) {
      this.ace_editor.destroy();
    }
    
    
    this.template = null;
    if(this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
    if(this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);
    if(this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);

    this._super();
  },
  /**
   * This is overridden in derivative editors
   */
  sanitize: function(value) {
    return value;
  },
  /**
   * Re-calculates the value if needed
   */
  onWatchedFieldChange: function() {    

    var self = this, vars, j;
    
    // If this editor needs to be rendered by a macro template
    if(this.template) {
      vars = this.getWatchedFieldValues();
      this.setValue(this.template(vars),false,true);
    }
    
    this._super();
  },
  showValidationErrors: function(errors) {

    var self = this;
    
    if(this.jsoneditor.options.show_errors === "always") {}
    else if(!this.is_dirty && this.previous_error_setting===this.jsoneditor.options.show_errors) return;
    
    this.previous_error_setting = this.jsoneditor.options.show_errors;

    var messages = [];
    jQuery.each(errors,function(i,error) {
      if(error.path === self.path) {
        messages.push(error.message);
      }
    });

    if(messages.length) {
      this.theme.addInputError(this.input, messages.join('. ')+'.');
    }
    else {
      this.theme.removeInputError(this.input);
    }
  }
});





/**
* Set position editor : used for fetching map position
*/
jed.extend.position.layoutEditors =  function() {
  var self = this, i, j;

  if(!this.row_container) return;

  var container; 

  var addPos, idMap, mapPos, divBtnPos, btnPos;
  /**
   * Add button to get position from a map
   */  

  if(this.options.addButtonPos) {
    addPos = function(){
      idMap =  self.options.idMap;
      if(!idMap) console.log("no id map provided in position editor as an option");
      mapPos = mgl.helper.getMapPos({id:idMap});
      self.setValue({
        z : mapPos.z,
        lat : mapPos.lat,
        lng : mapPos.lng,
        pitch : mapPos.p,
        bearing : mapPos.b
      });
    };
    divBtnPos = document.createElement("div");
    divBtnPos.className = "btn-group btn-group-wide";
    btnLabel = document.createElement("label");
    btnLabel.innerHTML = this.options.textButton;
    btnLabel.className += " control-label";
    btnPos = this.getButton("");
    btnPos.className += "fa fa-refresh";
    btnPos.onclick = addPos;
    divBtnPos.appendChild(btnLabel);
    divBtnPos.appendChild(btnPos);
  }
  /**
   * set layout
   */
  if(this.format === 'grid') {
    var rows = [];
    this.property_order.forEach(function(key,j) {
      var editor = self.editors[key];
      if(editor.property_removed) return;
      var found = false;
      var width = editor.options.hidden? 0 : (editor.options.grid_columns || editor.getNumColumns());
      var height = editor.options.hidden? 0 : editor.container.offsetHeight;
      // See if the editor will fit in any of the existing rows first
      for(var i=0; i<rows.length; i++) {
        // If the editor will fit in the row horizontally
        if(rows[i].width + width <= 12) {
          // If the editor is close to the other elements in height
          // i.e. Don't put a really tall editor in an otherwise short row or vice versa
          if(!height || (rows[i].minh*0.5 < height && rows[i].maxh*2 > height)) {
            found = i;
          }
        }
      }

      // If there isn't a spot in any of the existing rows, start a new row
      if(found === false) {
        rows.push({
          width: 0,
          minh: 999999,
          maxh: 0,
          editors: []
        });
        found = rows.length-1;
      }

      rows[found].editors.push({
        key: key,
        //editor: editor,
        width: width,
        height: height
      });
      rows[found].width += width;
      rows[found].minh = Math.min(rows[found].minh,height);
      rows[found].maxh = Math.max(rows[found].maxh,height);
    });

    // Make almost full rows width 12
    // Do this by increasing all editors' sizes proprotionately
    // Any left over space goes to the biggest editor
    // Don't touch rows with a width of 6 or less
    for(i=0; i<rows.length; i++) {
      if(rows[i].width < 12) {
        var biggest = false;
        var new_width = 0;
        for(j=0; j<rows[i].editors.length; j++) {
          if(biggest === false) biggest = j;
          else if(rows[i].editors[j].width > rows[i].editors[biggest].width) biggest = j;
          rows[i].editors[j].width *= 12/rows[i].width;
          rows[i].editors[j].width = Math.floor(rows[i].editors[j].width);
          new_width += rows[i].editors[j].width;
        }
        if(new_width < 12) rows[i].editors[biggest].width += 12-new_width;
        rows[i].width = 12;
      }
    }

    // layout hasn't changed
    if(this.layout === JSON.stringify(rows)) return false;
    this.layout = JSON.stringify(rows);

    // Layout the form
    container = document.createElement('div');
    // last row = add position button
    for(i=0; i<rows.length; i++) {
      var row = this.theme.getGridRow();

      if(this.options.addButtonPos) {
        /**
         * Add button in first pos
         */
          container.appendChild(divBtnPos);
        }
    /*
      * Add row
      */
      container.appendChild(row);
        for(j=0; j<rows[i].editors.length; j++) {
          var key = rows[i].editors[j].key;
          var editor = this.editors[key];

          if(editor.options.hidden) editor.container.style.display = 'none'; 
        //else this.theme.setGridColumnSize(editor.container,rows[i].editors[j].width);
          else editor.container.className += " col-md-2";
          row.appendChild(editor.container);
        }
         }

    }
        // Normal layout
    else {
      container = document.createElement('div');
      jQuery.each(this.property_order, function(i,key) {
        var editor = self.editors[key];
        if(editor.property_removed) return;
        var row = self.theme.getGridRow();
        container.appendChild(row);

        if(editor.options.hidden) editor.container.style.display = 'none';
        else self.theme.setGridColumnSize(editor.container,12);
        row.appendChild(editor.container);
      });
    }
   this.row_container.innerHTML = '';
    this.row_container.appendChild(container);
  };


/**
* Theme : create element, set classes
*/
jed.theme = {
  getSelectInput: function(options) {
    var el = this._super(options);
    el.className += 'form-control form-input-line';
    return el;
  },
  setGridColumnSize: function(el,size) {
    el.className = 'col-md-'+size;
  },
  afterInputReady: function(input) {
    if(input.controlgroup) return;
    input.controlgroup = this.closest(input,'.form-group');
    if(this.closest(input,'.compact')) {
      input.controlgroup.style.marginBottom = 0;
    }

  },
  getTextareaInput: function() {
    var el = document.createElement('textarea');
    el.className = 'form-control form-input-line';
    return el;
  },
  getRangeInput: function(min, max, step) {
    return this._super(min, max, step);
  },
  getGridRow: function() {
    var el = document.createElement('div');
    el.className = 'row';
    return el;
  },
  getFormInputField: function(type) {

    var el = this._super(type);

    if(type !== 'checkbox') {
      el.className += ' form-control form-input-line';
    }
    return el;
  },
  getFormControl: function(label, input, description) {
    var group = document.createElement('div');


    if(label && input.type === 'checkbox') {
      group.className += ' checkbox';
      label.appendChild(input);
      label.style.fontSize = '14px';
      group.style.marginTop = '0';
      group.appendChild(label);
      input.style.position = 'relative';
      input.style.cssFloat = 'left';
    } 
    else {
      group.className += ' form-group';
      if(label) {
        label.className += ' control-label';
        group.appendChild(label);
      }
      group.appendChild(input);
    }

    if(description) group.appendChild(description);

    return group;
  },
  getIndentedPanel: function() {
    var el = document.createElement('div');
    el.className = 'well well-sm';
    el.style.paddingBottom = 0;
    return el;
  },
  getFormInputDescription: function(text) {
    var el = document.createElement('p');
    el.className = 'help-block';
    el.innerHTML = text;
    return el;
  },
  getHeaderButtonHolder: function() {
    var el = this.getButtonHolder();
    el.style.marginLeft = '10px';
    return el;
  },
  getButtonHolder: function() {
    var el = document.createElement('div');
    el.className = 'btn-group';
    return el;
  },
  getButton: function(text, icon, title) {
    var el = this._super(text, icon, title);
    el.className += 'btn btn-default';
    return el;
  },
  getTable: function() {
    var el = document.createElement('table');
    el.className = 'table table-bordered';
    el.style.width = 'auto';
    el.style.maxWidth = 'none';
    return el;
  },

  addInputError: function(input,text) {
    if(!input.controlgroup) return;
    input.controlgroup.className += ' has-error';
    if(!input.errmsg) {
      input.errmsg = document.createElement('p');
      input.errmsg.className = 'help-block errormsg';
      input.controlgroup.appendChild(input.errmsg);
    }
    else {
      input.errmsg.style.display = '';
    }

    input.errmsg.textContent = text;
  },
  removeInputError: function(input) {
    if(!input.errmsg) return;
    input.errmsg.style.display = 'none';
    input.controlgroup.className = input.controlgroup.className.replace(/\s?has-error/g,'');
  },
  getTabHolder: function() {
    var el = document.createElement('div');
    el.innerHTML = "<div class='tabs list-group col-md-2'></div><div class='col-md-10'></div>";
    el.className = 'rows';
    return el;
  },
  getTab: function(text) {
    var el = document.createElement('a');
    el.className = 'list-group-item';
    el.setAttribute('href','#');
    el.appendChild(text);
    return el;
  },
  markTabActive: function(tab) {
    tab.className += ' active';
  },
  markTabInactive: function(tab) {
    tab.className = tab.className.replace(/\s?active/g,'');
  },
  getProgressBar: function() {
    var min = 0, max = 100, start = 0;

    var container = document.createElement('div');
    container.className = 'progress';

    var bar = document.createElement('div');
    bar.className = 'progress-bar';
    bar.setAttribute('role', 'progressbar');
    bar.setAttribute('aria-valuenow', start);
    bar.setAttribute('aria-valuemin', min);
    bar.setAttribute('aria-valuenax', max);
    bar.innerHTML = start + "%";
    container.appendChild(bar);

    return container;
  },
  updateProgressBar: function(progressBar, progress) {
    if (!progressBar) return;

    var bar = progressBar.firstChild;
    var percentage = progress + "%";
    bar.setAttribute('aria-valuenow', progress);
    bar.style.width = percentage;
    bar.innerHTML = percentage;
  },
  updateProgressBarUnknown: function(progressBar) {
    if (!progressBar) return;

    var bar = progressBar.firstChild;
    progressBar.className = 'progress progress-striped active';
    bar.removeAttribute('aria-valuenow');
    bar.style.width = '100%';
    bar.innerHTML = '';
  }
};


/**
 *  * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If 
 * @note https://davidwalsh.name/javascript-debounce-function
 * @param func {function} function to evaluate
 * @param wait {integer} number of millisecond to wait
 * @param immedate {boolean} immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 */
jed.helper.debounce = function(func, wait, immediate) {
    var timeout;
    return function() {
        var context = this,
            args = arguments;
        var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
};



